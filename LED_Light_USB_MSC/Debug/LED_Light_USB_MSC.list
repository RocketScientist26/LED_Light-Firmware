
LED_Light_USB_MSC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c6e4  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  0800c878  0800c878  0001c878  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c8f0  0800c8f0  00020128  2**0
                  CONTENTS
  4 .ARM          00000008  0800c8f0  0800c8f0  0001c8f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c8f8  0800c8f8  00020128  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c8f8  0800c8f8  0001c8f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c8fc  0800c8fc  0001c8fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000128  20000000  0800c900  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002bc8  20000128  0800ca28  00020128  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002cf0  0800ca28  00022cf0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020128  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b1d1  00000000  00000000  00020158  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004974  00000000  00000000  0003b329  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001718  00000000  00000000  0003fca0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000014d8  00000000  00000000  000413b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001bde5  00000000  00000000  00042890  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ed57  00000000  00000000  0005e675  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00092439  00000000  00000000  0007d3cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0010f805  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005d2c  00000000  00000000  0010f858  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000128 	.word	0x20000128
 80001b0:	00000000 	.word	0x00000000
 80001b4:	0800c860 	.word	0x0800c860

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	2000012c 	.word	0x2000012c
 80001d0:	0800c860 	.word	0x0800c860

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b974 	b.w	80004d4 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9d08      	ldr	r5, [sp, #32]
 800020a:	4604      	mov	r4, r0
 800020c:	468e      	mov	lr, r1
 800020e:	2b00      	cmp	r3, #0
 8000210:	d14d      	bne.n	80002ae <__udivmoddi4+0xaa>
 8000212:	428a      	cmp	r2, r1
 8000214:	4694      	mov	ip, r2
 8000216:	d969      	bls.n	80002ec <__udivmoddi4+0xe8>
 8000218:	fab2 f282 	clz	r2, r2
 800021c:	b152      	cbz	r2, 8000234 <__udivmoddi4+0x30>
 800021e:	fa01 f302 	lsl.w	r3, r1, r2
 8000222:	f1c2 0120 	rsb	r1, r2, #32
 8000226:	fa20 f101 	lsr.w	r1, r0, r1
 800022a:	fa0c fc02 	lsl.w	ip, ip, r2
 800022e:	ea41 0e03 	orr.w	lr, r1, r3
 8000232:	4094      	lsls	r4, r2
 8000234:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000238:	0c21      	lsrs	r1, r4, #16
 800023a:	fbbe f6f8 	udiv	r6, lr, r8
 800023e:	fa1f f78c 	uxth.w	r7, ip
 8000242:	fb08 e316 	mls	r3, r8, r6, lr
 8000246:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024a:	fb06 f107 	mul.w	r1, r6, r7
 800024e:	4299      	cmp	r1, r3
 8000250:	d90a      	bls.n	8000268 <__udivmoddi4+0x64>
 8000252:	eb1c 0303 	adds.w	r3, ip, r3
 8000256:	f106 30ff 	add.w	r0, r6, #4294967295
 800025a:	f080 811f 	bcs.w	800049c <__udivmoddi4+0x298>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 811c 	bls.w	800049c <__udivmoddi4+0x298>
 8000264:	3e02      	subs	r6, #2
 8000266:	4463      	add	r3, ip
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000270:	fb08 3310 	mls	r3, r8, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 f707 	mul.w	r7, r0, r7
 800027c:	42a7      	cmp	r7, r4
 800027e:	d90a      	bls.n	8000296 <__udivmoddi4+0x92>
 8000280:	eb1c 0404 	adds.w	r4, ip, r4
 8000284:	f100 33ff 	add.w	r3, r0, #4294967295
 8000288:	f080 810a 	bcs.w	80004a0 <__udivmoddi4+0x29c>
 800028c:	42a7      	cmp	r7, r4
 800028e:	f240 8107 	bls.w	80004a0 <__udivmoddi4+0x29c>
 8000292:	4464      	add	r4, ip
 8000294:	3802      	subs	r0, #2
 8000296:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029a:	1be4      	subs	r4, r4, r7
 800029c:	2600      	movs	r6, #0
 800029e:	b11d      	cbz	r5, 80002a8 <__udivmoddi4+0xa4>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c5 4300 	strd	r4, r3, [r5]
 80002a8:	4631      	mov	r1, r6
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d909      	bls.n	80002c6 <__udivmoddi4+0xc2>
 80002b2:	2d00      	cmp	r5, #0
 80002b4:	f000 80ef 	beq.w	8000496 <__udivmoddi4+0x292>
 80002b8:	2600      	movs	r6, #0
 80002ba:	e9c5 0100 	strd	r0, r1, [r5]
 80002be:	4630      	mov	r0, r6
 80002c0:	4631      	mov	r1, r6
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	fab3 f683 	clz	r6, r3
 80002ca:	2e00      	cmp	r6, #0
 80002cc:	d14a      	bne.n	8000364 <__udivmoddi4+0x160>
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d302      	bcc.n	80002d8 <__udivmoddi4+0xd4>
 80002d2:	4282      	cmp	r2, r0
 80002d4:	f200 80f9 	bhi.w	80004ca <__udivmoddi4+0x2c6>
 80002d8:	1a84      	subs	r4, r0, r2
 80002da:	eb61 0303 	sbc.w	r3, r1, r3
 80002de:	2001      	movs	r0, #1
 80002e0:	469e      	mov	lr, r3
 80002e2:	2d00      	cmp	r5, #0
 80002e4:	d0e0      	beq.n	80002a8 <__udivmoddi4+0xa4>
 80002e6:	e9c5 4e00 	strd	r4, lr, [r5]
 80002ea:	e7dd      	b.n	80002a8 <__udivmoddi4+0xa4>
 80002ec:	b902      	cbnz	r2, 80002f0 <__udivmoddi4+0xec>
 80002ee:	deff      	udf	#255	; 0xff
 80002f0:	fab2 f282 	clz	r2, r2
 80002f4:	2a00      	cmp	r2, #0
 80002f6:	f040 8092 	bne.w	800041e <__udivmoddi4+0x21a>
 80002fa:	eba1 010c 	sub.w	r1, r1, ip
 80002fe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000302:	fa1f fe8c 	uxth.w	lr, ip
 8000306:	2601      	movs	r6, #1
 8000308:	0c20      	lsrs	r0, r4, #16
 800030a:	fbb1 f3f7 	udiv	r3, r1, r7
 800030e:	fb07 1113 	mls	r1, r7, r3, r1
 8000312:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000316:	fb0e f003 	mul.w	r0, lr, r3
 800031a:	4288      	cmp	r0, r1
 800031c:	d908      	bls.n	8000330 <__udivmoddi4+0x12c>
 800031e:	eb1c 0101 	adds.w	r1, ip, r1
 8000322:	f103 38ff 	add.w	r8, r3, #4294967295
 8000326:	d202      	bcs.n	800032e <__udivmoddi4+0x12a>
 8000328:	4288      	cmp	r0, r1
 800032a:	f200 80cb 	bhi.w	80004c4 <__udivmoddi4+0x2c0>
 800032e:	4643      	mov	r3, r8
 8000330:	1a09      	subs	r1, r1, r0
 8000332:	b2a4      	uxth	r4, r4
 8000334:	fbb1 f0f7 	udiv	r0, r1, r7
 8000338:	fb07 1110 	mls	r1, r7, r0, r1
 800033c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000340:	fb0e fe00 	mul.w	lr, lr, r0
 8000344:	45a6      	cmp	lr, r4
 8000346:	d908      	bls.n	800035a <__udivmoddi4+0x156>
 8000348:	eb1c 0404 	adds.w	r4, ip, r4
 800034c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000350:	d202      	bcs.n	8000358 <__udivmoddi4+0x154>
 8000352:	45a6      	cmp	lr, r4
 8000354:	f200 80bb 	bhi.w	80004ce <__udivmoddi4+0x2ca>
 8000358:	4608      	mov	r0, r1
 800035a:	eba4 040e 	sub.w	r4, r4, lr
 800035e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000362:	e79c      	b.n	800029e <__udivmoddi4+0x9a>
 8000364:	f1c6 0720 	rsb	r7, r6, #32
 8000368:	40b3      	lsls	r3, r6
 800036a:	fa22 fc07 	lsr.w	ip, r2, r7
 800036e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000372:	fa20 f407 	lsr.w	r4, r0, r7
 8000376:	fa01 f306 	lsl.w	r3, r1, r6
 800037a:	431c      	orrs	r4, r3
 800037c:	40f9      	lsrs	r1, r7
 800037e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000382:	fa00 f306 	lsl.w	r3, r0, r6
 8000386:	fbb1 f8f9 	udiv	r8, r1, r9
 800038a:	0c20      	lsrs	r0, r4, #16
 800038c:	fa1f fe8c 	uxth.w	lr, ip
 8000390:	fb09 1118 	mls	r1, r9, r8, r1
 8000394:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000398:	fb08 f00e 	mul.w	r0, r8, lr
 800039c:	4288      	cmp	r0, r1
 800039e:	fa02 f206 	lsl.w	r2, r2, r6
 80003a2:	d90b      	bls.n	80003bc <__udivmoddi4+0x1b8>
 80003a4:	eb1c 0101 	adds.w	r1, ip, r1
 80003a8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003ac:	f080 8088 	bcs.w	80004c0 <__udivmoddi4+0x2bc>
 80003b0:	4288      	cmp	r0, r1
 80003b2:	f240 8085 	bls.w	80004c0 <__udivmoddi4+0x2bc>
 80003b6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ba:	4461      	add	r1, ip
 80003bc:	1a09      	subs	r1, r1, r0
 80003be:	b2a4      	uxth	r4, r4
 80003c0:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c4:	fb09 1110 	mls	r1, r9, r0, r1
 80003c8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003cc:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d0:	458e      	cmp	lr, r1
 80003d2:	d908      	bls.n	80003e6 <__udivmoddi4+0x1e2>
 80003d4:	eb1c 0101 	adds.w	r1, ip, r1
 80003d8:	f100 34ff 	add.w	r4, r0, #4294967295
 80003dc:	d26c      	bcs.n	80004b8 <__udivmoddi4+0x2b4>
 80003de:	458e      	cmp	lr, r1
 80003e0:	d96a      	bls.n	80004b8 <__udivmoddi4+0x2b4>
 80003e2:	3802      	subs	r0, #2
 80003e4:	4461      	add	r1, ip
 80003e6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ea:	fba0 9402 	umull	r9, r4, r0, r2
 80003ee:	eba1 010e 	sub.w	r1, r1, lr
 80003f2:	42a1      	cmp	r1, r4
 80003f4:	46c8      	mov	r8, r9
 80003f6:	46a6      	mov	lr, r4
 80003f8:	d356      	bcc.n	80004a8 <__udivmoddi4+0x2a4>
 80003fa:	d053      	beq.n	80004a4 <__udivmoddi4+0x2a0>
 80003fc:	b15d      	cbz	r5, 8000416 <__udivmoddi4+0x212>
 80003fe:	ebb3 0208 	subs.w	r2, r3, r8
 8000402:	eb61 010e 	sbc.w	r1, r1, lr
 8000406:	fa01 f707 	lsl.w	r7, r1, r7
 800040a:	fa22 f306 	lsr.w	r3, r2, r6
 800040e:	40f1      	lsrs	r1, r6
 8000410:	431f      	orrs	r7, r3
 8000412:	e9c5 7100 	strd	r7, r1, [r5]
 8000416:	2600      	movs	r6, #0
 8000418:	4631      	mov	r1, r6
 800041a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041e:	f1c2 0320 	rsb	r3, r2, #32
 8000422:	40d8      	lsrs	r0, r3
 8000424:	fa0c fc02 	lsl.w	ip, ip, r2
 8000428:	fa21 f303 	lsr.w	r3, r1, r3
 800042c:	4091      	lsls	r1, r2
 800042e:	4301      	orrs	r1, r0
 8000430:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000434:	fa1f fe8c 	uxth.w	lr, ip
 8000438:	fbb3 f0f7 	udiv	r0, r3, r7
 800043c:	fb07 3610 	mls	r6, r7, r0, r3
 8000440:	0c0b      	lsrs	r3, r1, #16
 8000442:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000446:	fb00 f60e 	mul.w	r6, r0, lr
 800044a:	429e      	cmp	r6, r3
 800044c:	fa04 f402 	lsl.w	r4, r4, r2
 8000450:	d908      	bls.n	8000464 <__udivmoddi4+0x260>
 8000452:	eb1c 0303 	adds.w	r3, ip, r3
 8000456:	f100 38ff 	add.w	r8, r0, #4294967295
 800045a:	d22f      	bcs.n	80004bc <__udivmoddi4+0x2b8>
 800045c:	429e      	cmp	r6, r3
 800045e:	d92d      	bls.n	80004bc <__udivmoddi4+0x2b8>
 8000460:	3802      	subs	r0, #2
 8000462:	4463      	add	r3, ip
 8000464:	1b9b      	subs	r3, r3, r6
 8000466:	b289      	uxth	r1, r1
 8000468:	fbb3 f6f7 	udiv	r6, r3, r7
 800046c:	fb07 3316 	mls	r3, r7, r6, r3
 8000470:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000474:	fb06 f30e 	mul.w	r3, r6, lr
 8000478:	428b      	cmp	r3, r1
 800047a:	d908      	bls.n	800048e <__udivmoddi4+0x28a>
 800047c:	eb1c 0101 	adds.w	r1, ip, r1
 8000480:	f106 38ff 	add.w	r8, r6, #4294967295
 8000484:	d216      	bcs.n	80004b4 <__udivmoddi4+0x2b0>
 8000486:	428b      	cmp	r3, r1
 8000488:	d914      	bls.n	80004b4 <__udivmoddi4+0x2b0>
 800048a:	3e02      	subs	r6, #2
 800048c:	4461      	add	r1, ip
 800048e:	1ac9      	subs	r1, r1, r3
 8000490:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000494:	e738      	b.n	8000308 <__udivmoddi4+0x104>
 8000496:	462e      	mov	r6, r5
 8000498:	4628      	mov	r0, r5
 800049a:	e705      	b.n	80002a8 <__udivmoddi4+0xa4>
 800049c:	4606      	mov	r6, r0
 800049e:	e6e3      	b.n	8000268 <__udivmoddi4+0x64>
 80004a0:	4618      	mov	r0, r3
 80004a2:	e6f8      	b.n	8000296 <__udivmoddi4+0x92>
 80004a4:	454b      	cmp	r3, r9
 80004a6:	d2a9      	bcs.n	80003fc <__udivmoddi4+0x1f8>
 80004a8:	ebb9 0802 	subs.w	r8, r9, r2
 80004ac:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b0:	3801      	subs	r0, #1
 80004b2:	e7a3      	b.n	80003fc <__udivmoddi4+0x1f8>
 80004b4:	4646      	mov	r6, r8
 80004b6:	e7ea      	b.n	800048e <__udivmoddi4+0x28a>
 80004b8:	4620      	mov	r0, r4
 80004ba:	e794      	b.n	80003e6 <__udivmoddi4+0x1e2>
 80004bc:	4640      	mov	r0, r8
 80004be:	e7d1      	b.n	8000464 <__udivmoddi4+0x260>
 80004c0:	46d0      	mov	r8, sl
 80004c2:	e77b      	b.n	80003bc <__udivmoddi4+0x1b8>
 80004c4:	3b02      	subs	r3, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	e732      	b.n	8000330 <__udivmoddi4+0x12c>
 80004ca:	4630      	mov	r0, r6
 80004cc:	e709      	b.n	80002e2 <__udivmoddi4+0xde>
 80004ce:	4464      	add	r4, ip
 80004d0:	3802      	subs	r0, #2
 80004d2:	e742      	b.n	800035a <__udivmoddi4+0x156>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <Animation_PWM_Pulse_Interrupt>:
void Animation_Timer_Error_Interrupt(){
	HAL_TIM_PWM_Stop_IT(&htim1, TIM_CHANNEL_1);
	animation_i = 0;
	animation_busy = 0;
}
void Animation_PWM_Pulse_Interrupt(){
 80004d8:	b580      	push	{r7, lr}
 80004da:	af00      	add	r7, sp, #0
	if(animation_i < ((animation_data_config.image_size * 8) + animation_data_config.stop_pulses)){
 80004dc:	4b2b      	ldr	r3, [pc, #172]	; (800058c <Animation_PWM_Pulse_Interrupt+0xb4>)
 80004de:	68db      	ldr	r3, [r3, #12]
 80004e0:	00db      	lsls	r3, r3, #3
 80004e2:	4a2a      	ldr	r2, [pc, #168]	; (800058c <Animation_PWM_Pulse_Interrupt+0xb4>)
 80004e4:	88d2      	ldrh	r2, [r2, #6]
 80004e6:	441a      	add	r2, r3
 80004e8:	4b29      	ldr	r3, [pc, #164]	; (8000590 <Animation_PWM_Pulse_Interrupt+0xb8>)
 80004ea:	681b      	ldr	r3, [r3, #0]
 80004ec:	429a      	cmp	r2, r3
 80004ee:	d944      	bls.n	800057a <Animation_PWM_Pulse_Interrupt+0xa2>
		if((animation_i + 1) >= ((animation_data_config.image_size * 8) + 1)){
 80004f0:	4b27      	ldr	r3, [pc, #156]	; (8000590 <Animation_PWM_Pulse_Interrupt+0xb8>)
 80004f2:	681b      	ldr	r3, [r3, #0]
 80004f4:	1c5a      	adds	r2, r3, #1
 80004f6:	4b25      	ldr	r3, [pc, #148]	; (800058c <Animation_PWM_Pulse_Interrupt+0xb4>)
 80004f8:	68db      	ldr	r3, [r3, #12]
 80004fa:	00db      	lsls	r3, r3, #3
 80004fc:	3301      	adds	r3, #1
 80004fe:	429a      	cmp	r2, r3
 8000500:	d304      	bcc.n	800050c <Animation_PWM_Pulse_Interrupt+0x34>
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 8000502:	4b24      	ldr	r3, [pc, #144]	; (8000594 <Animation_PWM_Pulse_Interrupt+0xbc>)
 8000504:	681b      	ldr	r3, [r3, #0]
 8000506:	2200      	movs	r2, #0
 8000508:	635a      	str	r2, [r3, #52]	; 0x34
 800050a:	e030      	b.n	800056e <Animation_PWM_Pulse_Interrupt+0x96>
		}else{
			switch(animation_mode){
 800050c:	4b22      	ldr	r3, [pc, #136]	; (8000598 <Animation_PWM_Pulse_Interrupt+0xc0>)
 800050e:	781b      	ldrb	r3, [r3, #0]
 8000510:	2b00      	cmp	r3, #0
 8000512:	d002      	beq.n	800051a <Animation_PWM_Pulse_Interrupt+0x42>
 8000514:	2b01      	cmp	r3, #1
 8000516:	d017      	beq.n	8000548 <Animation_PWM_Pulse_Interrupt+0x70>
 8000518:	e029      	b.n	800056e <Animation_PWM_Pulse_Interrupt+0x96>
				case ANIMATION_MODE_COLOR:
					Animation_Set_Bit((uint8_t)(((uint32_t)animation_color >> ((uint32_t)animation_i % 24)) & (uint32_t)1));
 800051a:	4b20      	ldr	r3, [pc, #128]	; (800059c <Animation_PWM_Pulse_Interrupt+0xc4>)
 800051c:	6818      	ldr	r0, [r3, #0]
 800051e:	4b1c      	ldr	r3, [pc, #112]	; (8000590 <Animation_PWM_Pulse_Interrupt+0xb8>)
 8000520:	6819      	ldr	r1, [r3, #0]
 8000522:	4b1f      	ldr	r3, [pc, #124]	; (80005a0 <Animation_PWM_Pulse_Interrupt+0xc8>)
 8000524:	fba3 2301 	umull	r2, r3, r3, r1
 8000528:	091a      	lsrs	r2, r3, #4
 800052a:	4613      	mov	r3, r2
 800052c:	005b      	lsls	r3, r3, #1
 800052e:	4413      	add	r3, r2
 8000530:	00db      	lsls	r3, r3, #3
 8000532:	1aca      	subs	r2, r1, r3
 8000534:	fa20 f302 	lsr.w	r3, r0, r2
 8000538:	b2db      	uxtb	r3, r3
 800053a:	f003 0301 	and.w	r3, r3, #1
 800053e:	b2db      	uxtb	r3, r3
 8000540:	4618      	mov	r0, r3
 8000542:	f000 f83d 	bl	80005c0 <Animation_Set_Bit>
				break;
 8000546:	e012      	b.n	800056e <Animation_PWM_Pulse_Interrupt+0x96>
				case ANIMATION_MODE_IMAGE:
					Animation_Set_Bit(Animation_Data_Get_Bit(animation_image, animation_i / 8, animation_i % 8));
 8000548:	4b16      	ldr	r3, [pc, #88]	; (80005a4 <Animation_PWM_Pulse_Interrupt+0xcc>)
 800054a:	8818      	ldrh	r0, [r3, #0]
 800054c:	4b10      	ldr	r3, [pc, #64]	; (8000590 <Animation_PWM_Pulse_Interrupt+0xb8>)
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	08d9      	lsrs	r1, r3, #3
 8000552:	4b0f      	ldr	r3, [pc, #60]	; (8000590 <Animation_PWM_Pulse_Interrupt+0xb8>)
 8000554:	681b      	ldr	r3, [r3, #0]
 8000556:	b2db      	uxtb	r3, r3
 8000558:	f003 0307 	and.w	r3, r3, #7
 800055c:	b2db      	uxtb	r3, r3
 800055e:	461a      	mov	r2, r3
 8000560:	f000 f9ea 	bl	8000938 <Animation_Data_Get_Bit>
 8000564:	4603      	mov	r3, r0
 8000566:	4618      	mov	r0, r3
 8000568:	f000 f82a 	bl	80005c0 <Animation_Set_Bit>
				break;
 800056c:	bf00      	nop
			}
		}
		animation_i++;
 800056e:	4b08      	ldr	r3, [pc, #32]	; (8000590 <Animation_PWM_Pulse_Interrupt+0xb8>)
 8000570:	681b      	ldr	r3, [r3, #0]
 8000572:	3301      	adds	r3, #1
 8000574:	4a06      	ldr	r2, [pc, #24]	; (8000590 <Animation_PWM_Pulse_Interrupt+0xb8>)
 8000576:	6013      	str	r3, [r2, #0]
	}else{
		HAL_TIM_PWM_Stop_IT(&htim1, TIM_CHANNEL_1);
		animation_busy = 0;
	}
}
 8000578:	e006      	b.n	8000588 <Animation_PWM_Pulse_Interrupt+0xb0>
		HAL_TIM_PWM_Stop_IT(&htim1, TIM_CHANNEL_1);
 800057a:	2100      	movs	r1, #0
 800057c:	4805      	ldr	r0, [pc, #20]	; (8000594 <Animation_PWM_Pulse_Interrupt+0xbc>)
 800057e:	f005 fd4b 	bl	8006018 <HAL_TIM_PWM_Stop_IT>
		animation_busy = 0;
 8000582:	4b09      	ldr	r3, [pc, #36]	; (80005a8 <Animation_PWM_Pulse_Interrupt+0xd0>)
 8000584:	2200      	movs	r2, #0
 8000586:	701a      	strb	r2, [r3, #0]
}
 8000588:	bf00      	nop
 800058a:	bd80      	pop	{r7, pc}
 800058c:	20000154 	.word	0x20000154
 8000590:	20000150 	.word	0x20000150
 8000594:	20001240 	.word	0x20001240
 8000598:	20000145 	.word	0x20000145
 800059c:	20000148 	.word	0x20000148
 80005a0:	aaaaaaab 	.word	0xaaaaaaab
 80005a4:	2000014c 	.word	0x2000014c
 80005a8:	20000144 	.word	0x20000144

080005ac <Animation_Busy>:

uint8_t Animation_Busy(){
 80005ac:	b580      	push	{r7, lr}
 80005ae:	af00      	add	r7, sp, #0
	Animation_Data_Buffer();
 80005b0:	f000 faf0 	bl	8000b94 <Animation_Data_Buffer>
	return animation_busy;
 80005b4:	4b01      	ldr	r3, [pc, #4]	; (80005bc <Animation_Busy+0x10>)
 80005b6:	781b      	ldrb	r3, [r3, #0]
}
 80005b8:	4618      	mov	r0, r3
 80005ba:	bd80      	pop	{r7, pc}
 80005bc:	20000144 	.word	0x20000144

080005c0 <Animation_Set_Bit>:
void Animation_Set_Bit(uint8_t bit){
 80005c0:	b480      	push	{r7}
 80005c2:	b083      	sub	sp, #12
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	4603      	mov	r3, r0
 80005c8:	71fb      	strb	r3, [r7, #7]
	if(bit){
 80005ca:	79fb      	ldrb	r3, [r7, #7]
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d005      	beq.n	80005dc <Animation_Set_Bit+0x1c>
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, animation_data_config.bit_1);
 80005d0:	4b08      	ldr	r3, [pc, #32]	; (80005f4 <Animation_Set_Bit+0x34>)
 80005d2:	791a      	ldrb	r2, [r3, #4]
 80005d4:	4b08      	ldr	r3, [pc, #32]	; (80005f8 <Animation_Set_Bit+0x38>)
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	635a      	str	r2, [r3, #52]	; 0x34
	}else{
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, animation_data_config.bit_0);
	}
}
 80005da:	e004      	b.n	80005e6 <Animation_Set_Bit+0x26>
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, animation_data_config.bit_0);
 80005dc:	4b05      	ldr	r3, [pc, #20]	; (80005f4 <Animation_Set_Bit+0x34>)
 80005de:	78da      	ldrb	r2, [r3, #3]
 80005e0:	4b05      	ldr	r3, [pc, #20]	; (80005f8 <Animation_Set_Bit+0x38>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	635a      	str	r2, [r3, #52]	; 0x34
}
 80005e6:	bf00      	nop
 80005e8:	370c      	adds	r7, #12
 80005ea:	46bd      	mov	sp, r7
 80005ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f0:	4770      	bx	lr
 80005f2:	bf00      	nop
 80005f4:	20000154 	.word	0x20000154
 80005f8:	20001240 	.word	0x20001240

080005fc <Animation_Display_Color>:
void Animation_Stop(){
	HAL_TIM_PWM_Stop_IT(&htim1, TIM_CHANNEL_1);
	animation_i = 0;
	animation_busy = 0;
}
void Animation_Display_Color(uint32_t color){
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b084      	sub	sp, #16
 8000600:	af00      	add	r7, sp, #0
 8000602:	6078      	str	r0, [r7, #4]
	if(animation_data_config.image_size){
 8000604:	4b53      	ldr	r3, [pc, #332]	; (8000754 <Animation_Display_Color+0x158>)
 8000606:	68db      	ldr	r3, [r3, #12]
 8000608:	2b00      	cmp	r3, #0
 800060a:	f000 809f 	beq.w	800074c <Animation_Display_Color+0x150>
		uint8_t color_a = (uint8_t)((uint32_t)color >> 16);
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	0c1b      	lsrs	r3, r3, #16
 8000612:	73fb      	strb	r3, [r7, #15]
		color_a = (color_a & 0xF0) >> 4 | (color_a & 0x0F) << 4;
 8000614:	7bfb      	ldrb	r3, [r7, #15]
 8000616:	091b      	lsrs	r3, r3, #4
 8000618:	b2db      	uxtb	r3, r3
 800061a:	b25a      	sxtb	r2, r3
 800061c:	7bfb      	ldrb	r3, [r7, #15]
 800061e:	011b      	lsls	r3, r3, #4
 8000620:	b25b      	sxtb	r3, r3
 8000622:	4313      	orrs	r3, r2
 8000624:	b25b      	sxtb	r3, r3
 8000626:	73fb      	strb	r3, [r7, #15]
		color_a = (color_a & 0xCC) >> 2 | (color_a & 0x33) << 2;
 8000628:	7bfb      	ldrb	r3, [r7, #15]
 800062a:	109b      	asrs	r3, r3, #2
 800062c:	b25b      	sxtb	r3, r3
 800062e:	f003 0333 	and.w	r3, r3, #51	; 0x33
 8000632:	b25a      	sxtb	r2, r3
 8000634:	7bfb      	ldrb	r3, [r7, #15]
 8000636:	009b      	lsls	r3, r3, #2
 8000638:	b25b      	sxtb	r3, r3
 800063a:	f023 0333 	bic.w	r3, r3, #51	; 0x33
 800063e:	b25b      	sxtb	r3, r3
 8000640:	4313      	orrs	r3, r2
 8000642:	b25b      	sxtb	r3, r3
 8000644:	73fb      	strb	r3, [r7, #15]
		color_a = (color_a & 0xAA) >> 1 | (color_a & 0x55) << 1;
 8000646:	7bfb      	ldrb	r3, [r7, #15]
 8000648:	105b      	asrs	r3, r3, #1
 800064a:	b25b      	sxtb	r3, r3
 800064c:	f003 0355 	and.w	r3, r3, #85	; 0x55
 8000650:	b25a      	sxtb	r2, r3
 8000652:	7bfb      	ldrb	r3, [r7, #15]
 8000654:	005b      	lsls	r3, r3, #1
 8000656:	b25b      	sxtb	r3, r3
 8000658:	f023 0355 	bic.w	r3, r3, #85	; 0x55
 800065c:	b25b      	sxtb	r3, r3
 800065e:	4313      	orrs	r3, r2
 8000660:	b25b      	sxtb	r3, r3
 8000662:	73fb      	strb	r3, [r7, #15]
		uint8_t color_b = (uint8_t)((uint32_t)color >> 8);
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	0a1b      	lsrs	r3, r3, #8
 8000668:	73bb      	strb	r3, [r7, #14]
		color_b = (color_b & 0xF0) >> 4 | (color_b & 0x0F) << 4;
 800066a:	7bbb      	ldrb	r3, [r7, #14]
 800066c:	091b      	lsrs	r3, r3, #4
 800066e:	b2db      	uxtb	r3, r3
 8000670:	b25a      	sxtb	r2, r3
 8000672:	7bbb      	ldrb	r3, [r7, #14]
 8000674:	011b      	lsls	r3, r3, #4
 8000676:	b25b      	sxtb	r3, r3
 8000678:	4313      	orrs	r3, r2
 800067a:	b25b      	sxtb	r3, r3
 800067c:	73bb      	strb	r3, [r7, #14]
		color_b = (color_b & 0xCC) >> 2 | (color_b & 0x33) << 2;
 800067e:	7bbb      	ldrb	r3, [r7, #14]
 8000680:	109b      	asrs	r3, r3, #2
 8000682:	b25b      	sxtb	r3, r3
 8000684:	f003 0333 	and.w	r3, r3, #51	; 0x33
 8000688:	b25a      	sxtb	r2, r3
 800068a:	7bbb      	ldrb	r3, [r7, #14]
 800068c:	009b      	lsls	r3, r3, #2
 800068e:	b25b      	sxtb	r3, r3
 8000690:	f023 0333 	bic.w	r3, r3, #51	; 0x33
 8000694:	b25b      	sxtb	r3, r3
 8000696:	4313      	orrs	r3, r2
 8000698:	b25b      	sxtb	r3, r3
 800069a:	73bb      	strb	r3, [r7, #14]
		color_b = (color_b & 0xAA) >> 1 | (color_b & 0x55) << 1;
 800069c:	7bbb      	ldrb	r3, [r7, #14]
 800069e:	105b      	asrs	r3, r3, #1
 80006a0:	b25b      	sxtb	r3, r3
 80006a2:	f003 0355 	and.w	r3, r3, #85	; 0x55
 80006a6:	b25a      	sxtb	r2, r3
 80006a8:	7bbb      	ldrb	r3, [r7, #14]
 80006aa:	005b      	lsls	r3, r3, #1
 80006ac:	b25b      	sxtb	r3, r3
 80006ae:	f023 0355 	bic.w	r3, r3, #85	; 0x55
 80006b2:	b25b      	sxtb	r3, r3
 80006b4:	4313      	orrs	r3, r2
 80006b6:	b25b      	sxtb	r3, r3
 80006b8:	73bb      	strb	r3, [r7, #14]
		uint8_t color_c = (uint8_t)((uint32_t)color);
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	737b      	strb	r3, [r7, #13]
		color_c = (color_c & 0xF0) >> 4 | (color_c & 0x0F) << 4;
 80006be:	7b7b      	ldrb	r3, [r7, #13]
 80006c0:	091b      	lsrs	r3, r3, #4
 80006c2:	b2db      	uxtb	r3, r3
 80006c4:	b25a      	sxtb	r2, r3
 80006c6:	7b7b      	ldrb	r3, [r7, #13]
 80006c8:	011b      	lsls	r3, r3, #4
 80006ca:	b25b      	sxtb	r3, r3
 80006cc:	4313      	orrs	r3, r2
 80006ce:	b25b      	sxtb	r3, r3
 80006d0:	737b      	strb	r3, [r7, #13]
		color_c = (color_c & 0xCC) >> 2 | (color_c & 0x33) << 2;
 80006d2:	7b7b      	ldrb	r3, [r7, #13]
 80006d4:	109b      	asrs	r3, r3, #2
 80006d6:	b25b      	sxtb	r3, r3
 80006d8:	f003 0333 	and.w	r3, r3, #51	; 0x33
 80006dc:	b25a      	sxtb	r2, r3
 80006de:	7b7b      	ldrb	r3, [r7, #13]
 80006e0:	009b      	lsls	r3, r3, #2
 80006e2:	b25b      	sxtb	r3, r3
 80006e4:	f023 0333 	bic.w	r3, r3, #51	; 0x33
 80006e8:	b25b      	sxtb	r3, r3
 80006ea:	4313      	orrs	r3, r2
 80006ec:	b25b      	sxtb	r3, r3
 80006ee:	737b      	strb	r3, [r7, #13]
		color_c = (color_c & 0xAA) >> 1 | (color_c & 0x55) << 1;
 80006f0:	7b7b      	ldrb	r3, [r7, #13]
 80006f2:	105b      	asrs	r3, r3, #1
 80006f4:	b25b      	sxtb	r3, r3
 80006f6:	f003 0355 	and.w	r3, r3, #85	; 0x55
 80006fa:	b25a      	sxtb	r2, r3
 80006fc:	7b7b      	ldrb	r3, [r7, #13]
 80006fe:	005b      	lsls	r3, r3, #1
 8000700:	b25b      	sxtb	r3, r3
 8000702:	f023 0355 	bic.w	r3, r3, #85	; 0x55
 8000706:	b25b      	sxtb	r3, r3
 8000708:	4313      	orrs	r3, r2
 800070a:	b25b      	sxtb	r3, r3
 800070c:	737b      	strb	r3, [r7, #13]

		animation_busy = 1;
 800070e:	4b12      	ldr	r3, [pc, #72]	; (8000758 <Animation_Display_Color+0x15c>)
 8000710:	2201      	movs	r2, #1
 8000712:	701a      	strb	r2, [r3, #0]
		animation_i = 0;
 8000714:	4b11      	ldr	r3, [pc, #68]	; (800075c <Animation_Display_Color+0x160>)
 8000716:	2200      	movs	r2, #0
 8000718:	601a      	str	r2, [r3, #0]
		animation_color = ((uint32_t)color_a <<16) | ((uint32_t)color_b <<8) | (uint32_t)color_c;
 800071a:	7bfb      	ldrb	r3, [r7, #15]
 800071c:	041a      	lsls	r2, r3, #16
 800071e:	7bbb      	ldrb	r3, [r7, #14]
 8000720:	021b      	lsls	r3, r3, #8
 8000722:	431a      	orrs	r2, r3
 8000724:	7b7b      	ldrb	r3, [r7, #13]
 8000726:	4313      	orrs	r3, r2
 8000728:	4a0d      	ldr	r2, [pc, #52]	; (8000760 <Animation_Display_Color+0x164>)
 800072a:	6013      	str	r3, [r2, #0]
		animation_mode = ANIMATION_MODE_COLOR;
 800072c:	4b0d      	ldr	r3, [pc, #52]	; (8000764 <Animation_Display_Color+0x168>)
 800072e:	2200      	movs	r2, #0
 8000730:	701a      	strb	r2, [r3, #0]

		HAL_TIM_PWM_PulseFinishedCallback(&htim1);
 8000732:	480d      	ldr	r0, [pc, #52]	; (8000768 <Animation_Display_Color+0x16c>)
 8000734:	f000 fc0a 	bl	8000f4c <HAL_TIM_PWM_PulseFinishedCallback>
		HAL_TIM_PWM_Start_IT(&htim1, TIM_CHANNEL_1);
 8000738:	2100      	movs	r1, #0
 800073a:	480b      	ldr	r0, [pc, #44]	; (8000768 <Animation_Display_Color+0x16c>)
 800073c:	f005 fb6e 	bl	8005e1c <HAL_TIM_PWM_Start_IT>
		while(Animation_Busy());
 8000740:	bf00      	nop
 8000742:	f7ff ff33 	bl	80005ac <Animation_Busy>
 8000746:	4603      	mov	r3, r0
 8000748:	2b00      	cmp	r3, #0
 800074a:	d1fa      	bne.n	8000742 <Animation_Display_Color+0x146>
	}
}
 800074c:	bf00      	nop
 800074e:	3710      	adds	r7, #16
 8000750:	46bd      	mov	sp, r7
 8000752:	bd80      	pop	{r7, pc}
 8000754:	20000154 	.word	0x20000154
 8000758:	20000144 	.word	0x20000144
 800075c:	20000150 	.word	0x20000150
 8000760:	20000148 	.word	0x20000148
 8000764:	20000145 	.word	0x20000145
 8000768:	20001240 	.word	0x20001240

0800076c <Animation_Display_Image>:
void Animation_Display_Image(uint16_t image){
 800076c:	b580      	push	{r7, lr}
 800076e:	b082      	sub	sp, #8
 8000770:	af00      	add	r7, sp, #0
 8000772:	4603      	mov	r3, r0
 8000774:	80fb      	strh	r3, [r7, #6]
	if((image < animation_data_config.images) && animation_data_config.image_size){
 8000776:	88fa      	ldrh	r2, [r7, #6]
 8000778:	4b14      	ldr	r3, [pc, #80]	; (80007cc <Animation_Display_Image+0x60>)
 800077a:	689b      	ldr	r3, [r3, #8]
 800077c:	429a      	cmp	r2, r3
 800077e:	d220      	bcs.n	80007c2 <Animation_Display_Image+0x56>
 8000780:	4b12      	ldr	r3, [pc, #72]	; (80007cc <Animation_Display_Image+0x60>)
 8000782:	68db      	ldr	r3, [r3, #12]
 8000784:	2b00      	cmp	r3, #0
 8000786:	d01c      	beq.n	80007c2 <Animation_Display_Image+0x56>
		animation_busy = 1;
 8000788:	4b11      	ldr	r3, [pc, #68]	; (80007d0 <Animation_Display_Image+0x64>)
 800078a:	2201      	movs	r2, #1
 800078c:	701a      	strb	r2, [r3, #0]
		animation_image = image;
 800078e:	4a11      	ldr	r2, [pc, #68]	; (80007d4 <Animation_Display_Image+0x68>)
 8000790:	88fb      	ldrh	r3, [r7, #6]
 8000792:	8013      	strh	r3, [r2, #0]
		animation_i = 0;
 8000794:	4b10      	ldr	r3, [pc, #64]	; (80007d8 <Animation_Display_Image+0x6c>)
 8000796:	2200      	movs	r2, #0
 8000798:	601a      	str	r2, [r3, #0]
		animation_mode = ANIMATION_MODE_IMAGE;
 800079a:	4b10      	ldr	r3, [pc, #64]	; (80007dc <Animation_Display_Image+0x70>)
 800079c:	2201      	movs	r2, #1
 800079e:	701a      	strb	r2, [r3, #0]

		Animation_Data_Prefetch(image);
 80007a0:	88fb      	ldrh	r3, [r7, #6]
 80007a2:	4618      	mov	r0, r3
 80007a4:	f000 f846 	bl	8000834 <Animation_Data_Prefetch>
		HAL_TIM_PWM_PulseFinishedCallback(&htim1);
 80007a8:	480d      	ldr	r0, [pc, #52]	; (80007e0 <Animation_Display_Image+0x74>)
 80007aa:	f000 fbcf 	bl	8000f4c <HAL_TIM_PWM_PulseFinishedCallback>
		HAL_TIM_PWM_Start_IT(&htim1, TIM_CHANNEL_1);
 80007ae:	2100      	movs	r1, #0
 80007b0:	480b      	ldr	r0, [pc, #44]	; (80007e0 <Animation_Display_Image+0x74>)
 80007b2:	f005 fb33 	bl	8005e1c <HAL_TIM_PWM_Start_IT>
		while(Animation_Busy());
 80007b6:	bf00      	nop
 80007b8:	f7ff fef8 	bl	80005ac <Animation_Busy>
 80007bc:	4603      	mov	r3, r0
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d1fa      	bne.n	80007b8 <Animation_Display_Image+0x4c>
	}
}
 80007c2:	bf00      	nop
 80007c4:	3708      	adds	r7, #8
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bd80      	pop	{r7, pc}
 80007ca:	bf00      	nop
 80007cc:	20000154 	.word	0x20000154
 80007d0:	20000144 	.word	0x20000144
 80007d4:	2000014c 	.word	0x2000014c
 80007d8:	20000150 	.word	0x20000150
 80007dc:	20000145 	.word	0x20000145
 80007e0:	20001240 	.word	0x20001240

080007e4 <Animation_Init>:
void Animation_Init(){
 80007e4:	b580      	push	{r7, lr}
 80007e6:	af00      	add	r7, sp, #0
	Animation_Data_Init();
 80007e8:	f000 f8e2 	bl	80009b0 <Animation_Data_Init>

	if(animation_data_config.images && animation_data_config.image_size){
 80007ec:	4b0f      	ldr	r3, [pc, #60]	; (800082c <Animation_Init+0x48>)
 80007ee:	689b      	ldr	r3, [r3, #8]
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d018      	beq.n	8000826 <Animation_Init+0x42>
 80007f4:	4b0d      	ldr	r3, [pc, #52]	; (800082c <Animation_Init+0x48>)
 80007f6:	68db      	ldr	r3, [r3, #12]
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d014      	beq.n	8000826 <Animation_Init+0x42>
		htim1.Init.Prescaler = animation_data_config.clkdiv;
 80007fc:	4b0b      	ldr	r3, [pc, #44]	; (800082c <Animation_Init+0x48>)
 80007fe:	881b      	ldrh	r3, [r3, #0]
 8000800:	461a      	mov	r2, r3
 8000802:	4b0b      	ldr	r3, [pc, #44]	; (8000830 <Animation_Init+0x4c>)
 8000804:	605a      	str	r2, [r3, #4]
		htim1.Init.Period = animation_data_config.pulse;
 8000806:	4b09      	ldr	r3, [pc, #36]	; (800082c <Animation_Init+0x48>)
 8000808:	789b      	ldrb	r3, [r3, #2]
 800080a:	461a      	mov	r2, r3
 800080c:	4b08      	ldr	r3, [pc, #32]	; (8000830 <Animation_Init+0x4c>)
 800080e:	60da      	str	r2, [r3, #12]
		if(HAL_TIM_Base_Init(&htim1) != HAL_OK){Error_Handler();}
 8000810:	4807      	ldr	r0, [pc, #28]	; (8000830 <Animation_Init+0x4c>)
 8000812:	f005 fa5b 	bl	8005ccc <HAL_TIM_Base_Init>
 8000816:	4603      	mov	r3, r0
 8000818:	2b00      	cmp	r3, #0
 800081a:	d001      	beq.n	8000820 <Animation_Init+0x3c>
 800081c:	f001 f854 	bl	80018c8 <Error_Handler>
		Animation_Display_Color(0);
 8000820:	2000      	movs	r0, #0
 8000822:	f7ff feeb 	bl	80005fc <Animation_Display_Color>
	}
}
 8000826:	bf00      	nop
 8000828:	bd80      	pop	{r7, pc}
 800082a:	bf00      	nop
 800082c:	20000154 	.word	0x20000154
 8000830:	20001240 	.word	0x20001240

08000834 <Animation_Data_Prefetch>:
static uint8_t animation_data[ANIMATION_DATA_BUFFER_SIZE];
static uint32_t animation_data_buffered = 0;
static uint8_t animation_data_buffering_rq = 0;
static uint16_t animation_data_buffering_image = 0;

void Animation_Data_Prefetch(uint16_t image){
 8000834:	b580      	push	{r7, lr}
 8000836:	b084      	sub	sp, #16
 8000838:	af00      	add	r7, sp, #0
 800083a:	4603      	mov	r3, r0
 800083c:	80fb      	strh	r3, [r7, #6]
	uint32_t data_size = 0;
 800083e:	2300      	movs	r3, #0
 8000840:	60fb      	str	r3, [r7, #12]
	if(animation_data_config.image_size < ANIMATION_DATA_BUFFER_SIZE){
 8000842:	4b11      	ldr	r3, [pc, #68]	; (8000888 <Animation_Data_Prefetch+0x54>)
 8000844:	68db      	ldr	r3, [r3, #12]
 8000846:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800084a:	d203      	bcs.n	8000854 <Animation_Data_Prefetch+0x20>
		data_size = animation_data_config.image_size;
 800084c:	4b0e      	ldr	r3, [pc, #56]	; (8000888 <Animation_Data_Prefetch+0x54>)
 800084e:	68db      	ldr	r3, [r3, #12]
 8000850:	60fb      	str	r3, [r7, #12]
 8000852:	e002      	b.n	800085a <Animation_Data_Prefetch+0x26>
	}else{
		data_size = ANIMATION_DATA_BUFFER_SIZE;
 8000854:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000858:	60fb      	str	r3, [r7, #12]
	}
	W25Q_Read(animation_data, ANIMATION_DATA_HEADER_SIZE + (animation_data_config.image_size * image), data_size);
 800085a:	4b0b      	ldr	r3, [pc, #44]	; (8000888 <Animation_Data_Prefetch+0x54>)
 800085c:	68db      	ldr	r3, [r3, #12]
 800085e:	88fa      	ldrh	r2, [r7, #6]
 8000860:	fb02 f303 	mul.w	r3, r2, r3
 8000864:	3313      	adds	r3, #19
 8000866:	68fa      	ldr	r2, [r7, #12]
 8000868:	b292      	uxth	r2, r2
 800086a:	4619      	mov	r1, r3
 800086c:	4807      	ldr	r0, [pc, #28]	; (800088c <Animation_Data_Prefetch+0x58>)
 800086e:	f000 fdc5 	bl	80013fc <W25Q_Read>
	animation_data_buffered = data_size;
 8000872:	4a07      	ldr	r2, [pc, #28]	; (8000890 <Animation_Data_Prefetch+0x5c>)
 8000874:	68fb      	ldr	r3, [r7, #12]
 8000876:	6013      	str	r3, [r2, #0]
	animation_data_buffering_rq = 0;
 8000878:	4b06      	ldr	r3, [pc, #24]	; (8000894 <Animation_Data_Prefetch+0x60>)
 800087a:	2200      	movs	r2, #0
 800087c:	701a      	strb	r2, [r3, #0]
}
 800087e:	bf00      	nop
 8000880:	3710      	adds	r7, #16
 8000882:	46bd      	mov	sp, r7
 8000884:	bd80      	pop	{r7, pc}
 8000886:	bf00      	nop
 8000888:	20000154 	.word	0x20000154
 800088c:	20000164 	.word	0x20000164
 8000890:	20001164 	.word	0x20001164
 8000894:	20001168 	.word	0x20001168

08000898 <Animation_Data_Read>:
void Animation_Data_Read(uint16_t image){
 8000898:	b580      	push	{r7, lr}
 800089a:	b084      	sub	sp, #16
 800089c:	af00      	add	r7, sp, #0
 800089e:	4603      	mov	r3, r0
 80008a0:	80fb      	strh	r3, [r7, #6]
	uint32_t data_size = 0;
 80008a2:	2300      	movs	r3, #0
 80008a4:	60fb      	str	r3, [r7, #12]
	if((animation_data_config.image_size - animation_data_buffered) < ANIMATION_DATA_BUFFER_SIZE_HALF){
 80008a6:	4b20      	ldr	r3, [pc, #128]	; (8000928 <Animation_Data_Read+0x90>)
 80008a8:	68da      	ldr	r2, [r3, #12]
 80008aa:	4b20      	ldr	r3, [pc, #128]	; (800092c <Animation_Data_Read+0x94>)
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	1ad3      	subs	r3, r2, r3
 80008b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80008b4:	d206      	bcs.n	80008c4 <Animation_Data_Read+0x2c>
		data_size = animation_data_config.image_size - animation_data_buffered;
 80008b6:	4b1c      	ldr	r3, [pc, #112]	; (8000928 <Animation_Data_Read+0x90>)
 80008b8:	68da      	ldr	r2, [r3, #12]
 80008ba:	4b1c      	ldr	r3, [pc, #112]	; (800092c <Animation_Data_Read+0x94>)
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	1ad3      	subs	r3, r2, r3
 80008c0:	60fb      	str	r3, [r7, #12]
 80008c2:	e002      	b.n	80008ca <Animation_Data_Read+0x32>
	}else{
		data_size = ANIMATION_DATA_BUFFER_SIZE_HALF;
 80008c4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80008c8:	60fb      	str	r3, [r7, #12]
	}

	if(!(animation_data_buffered % ANIMATION_DATA_BUFFER_SIZE)){
 80008ca:	4b18      	ldr	r3, [pc, #96]	; (800092c <Animation_Data_Read+0x94>)
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d10f      	bne.n	80008f6 <Animation_Data_Read+0x5e>
		//If requested byte 0 of buffer
		W25Q_Read_DMA(&animation_data[0], data_size, ANIMATION_DATA_HEADER_SIZE + (animation_data_config.image_size * image) + animation_data_buffered);
 80008d6:	68fb      	ldr	r3, [r7, #12]
 80008d8:	b299      	uxth	r1, r3
 80008da:	4b13      	ldr	r3, [pc, #76]	; (8000928 <Animation_Data_Read+0x90>)
 80008dc:	68db      	ldr	r3, [r3, #12]
 80008de:	88fa      	ldrh	r2, [r7, #6]
 80008e0:	fb03 f202 	mul.w	r2, r3, r2
 80008e4:	4b11      	ldr	r3, [pc, #68]	; (800092c <Animation_Data_Read+0x94>)
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	4413      	add	r3, r2
 80008ea:	3313      	adds	r3, #19
 80008ec:	461a      	mov	r2, r3
 80008ee:	4810      	ldr	r0, [pc, #64]	; (8000930 <Animation_Data_Read+0x98>)
 80008f0:	f000 fd4c 	bl	800138c <W25Q_Read_DMA>
 80008f4:	e00e      	b.n	8000914 <Animation_Data_Read+0x7c>
	}else{
		//If requested middle right byte of buffer
		W25Q_Read_DMA(&animation_data[ANIMATION_DATA_BUFFER_SIZE_HALF], data_size, ANIMATION_DATA_HEADER_SIZE + (animation_data_config.image_size * image) + animation_data_buffered);
 80008f6:	68fb      	ldr	r3, [r7, #12]
 80008f8:	b299      	uxth	r1, r3
 80008fa:	4b0b      	ldr	r3, [pc, #44]	; (8000928 <Animation_Data_Read+0x90>)
 80008fc:	68db      	ldr	r3, [r3, #12]
 80008fe:	88fa      	ldrh	r2, [r7, #6]
 8000900:	fb03 f202 	mul.w	r2, r3, r2
 8000904:	4b09      	ldr	r3, [pc, #36]	; (800092c <Animation_Data_Read+0x94>)
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	4413      	add	r3, r2
 800090a:	3313      	adds	r3, #19
 800090c:	461a      	mov	r2, r3
 800090e:	4809      	ldr	r0, [pc, #36]	; (8000934 <Animation_Data_Read+0x9c>)
 8000910:	f000 fd3c 	bl	800138c <W25Q_Read_DMA>
	}

	animation_data_buffered += data_size;
 8000914:	4b05      	ldr	r3, [pc, #20]	; (800092c <Animation_Data_Read+0x94>)
 8000916:	681a      	ldr	r2, [r3, #0]
 8000918:	68fb      	ldr	r3, [r7, #12]
 800091a:	4413      	add	r3, r2
 800091c:	4a03      	ldr	r2, [pc, #12]	; (800092c <Animation_Data_Read+0x94>)
 800091e:	6013      	str	r3, [r2, #0]
}
 8000920:	bf00      	nop
 8000922:	3710      	adds	r7, #16
 8000924:	46bd      	mov	sp, r7
 8000926:	bd80      	pop	{r7, pc}
 8000928:	20000154 	.word	0x20000154
 800092c:	20001164 	.word	0x20001164
 8000930:	20000164 	.word	0x20000164
 8000934:	20000964 	.word	0x20000964

08000938 <Animation_Data_Get_Bit>:
uint8_t Animation_Data_Get_Bit(uint16_t image, uint32_t byte, uint8_t bit){
 8000938:	b480      	push	{r7}
 800093a:	b083      	sub	sp, #12
 800093c:	af00      	add	r7, sp, #0
 800093e:	4603      	mov	r3, r0
 8000940:	6039      	str	r1, [r7, #0]
 8000942:	80fb      	strh	r3, [r7, #6]
 8000944:	4613      	mov	r3, r2
 8000946:	717b      	strb	r3, [r7, #5]
	if(byte && !(byte % ANIMATION_DATA_BUFFER_SIZE_HALF) && !bit){
 8000948:	683b      	ldr	r3, [r7, #0]
 800094a:	2b00      	cmp	r3, #0
 800094c:	d013      	beq.n	8000976 <Animation_Data_Get_Bit+0x3e>
 800094e:	683b      	ldr	r3, [r7, #0]
 8000950:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000954:	2b00      	cmp	r3, #0
 8000956:	d10e      	bne.n	8000976 <Animation_Data_Get_Bit+0x3e>
 8000958:	797b      	ldrb	r3, [r7, #5]
 800095a:	2b00      	cmp	r3, #0
 800095c:	d10b      	bne.n	8000976 <Animation_Data_Get_Bit+0x3e>
		//If requested first bit of first byte from first or second half of buffer
		if(animation_data_buffered < animation_data_config.image_size){
 800095e:	4b0f      	ldr	r3, [pc, #60]	; (800099c <Animation_Data_Get_Bit+0x64>)
 8000960:	68da      	ldr	r2, [r3, #12]
 8000962:	4b0f      	ldr	r3, [pc, #60]	; (80009a0 <Animation_Data_Get_Bit+0x68>)
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	429a      	cmp	r2, r3
 8000968:	d905      	bls.n	8000976 <Animation_Data_Get_Bit+0x3e>
			animation_data_buffering_image = image;
 800096a:	4a0e      	ldr	r2, [pc, #56]	; (80009a4 <Animation_Data_Get_Bit+0x6c>)
 800096c:	88fb      	ldrh	r3, [r7, #6]
 800096e:	8013      	strh	r3, [r2, #0]
			animation_data_buffering_rq = 1;
 8000970:	4b0d      	ldr	r3, [pc, #52]	; (80009a8 <Animation_Data_Get_Bit+0x70>)
 8000972:	2201      	movs	r2, #1
 8000974:	701a      	strb	r2, [r3, #0]
		}
	}

	return (animation_data[byte % ANIMATION_DATA_BUFFER_SIZE] >> bit) & 1;
 8000976:	683b      	ldr	r3, [r7, #0]
 8000978:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800097c:	4a0b      	ldr	r2, [pc, #44]	; (80009ac <Animation_Data_Get_Bit+0x74>)
 800097e:	5cd3      	ldrb	r3, [r2, r3]
 8000980:	461a      	mov	r2, r3
 8000982:	797b      	ldrb	r3, [r7, #5]
 8000984:	fa42 f303 	asr.w	r3, r2, r3
 8000988:	b2db      	uxtb	r3, r3
 800098a:	f003 0301 	and.w	r3, r3, #1
 800098e:	b2db      	uxtb	r3, r3
}
 8000990:	4618      	mov	r0, r3
 8000992:	370c      	adds	r7, #12
 8000994:	46bd      	mov	sp, r7
 8000996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099a:	4770      	bx	lr
 800099c:	20000154 	.word	0x20000154
 80009a0:	20001164 	.word	0x20001164
 80009a4:	2000116a 	.word	0x2000116a
 80009a8:	20001168 	.word	0x20001168
 80009ac:	20000164 	.word	0x20000164

080009b0 <Animation_Data_Init>:
void Animation_Data_Init(){
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b086      	sub	sp, #24
 80009b4:	af00      	add	r7, sp, #0
	uint8_t data_error = 0;
 80009b6:	2300      	movs	r3, #0
 80009b8:	75fb      	strb	r3, [r7, #23]
	//Check size
	uint32_t data_size = 0;
 80009ba:	2300      	movs	r3, #0
 80009bc:	60bb      	str	r3, [r7, #8]
	W25Q_Read((uint8_t *)&data_size, 0, 4);
 80009be:	f107 0308 	add.w	r3, r7, #8
 80009c2:	2204      	movs	r2, #4
 80009c4:	2100      	movs	r1, #0
 80009c6:	4618      	mov	r0, r3
 80009c8:	f000 fd18 	bl	80013fc <W25Q_Read>
	if(data_size <= ANIMATION_DATA_MAX_SIZE){
 80009cc:	68bb      	ldr	r3, [r7, #8]
 80009ce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80009d2:	f200 80bb 	bhi.w	8000b4c <Animation_Data_Init+0x19c>
		//Read CRC
		uint32_t data_crc = 0;
 80009d6:	2300      	movs	r3, #0
 80009d8:	607b      	str	r3, [r7, #4]
		W25Q_Read((uint8_t *)&data_crc, data_size - 4, 4);
 80009da:	68bb      	ldr	r3, [r7, #8]
 80009dc:	1f19      	subs	r1, r3, #4
 80009de:	1d3b      	adds	r3, r7, #4
 80009e0:	2204      	movs	r2, #4
 80009e2:	4618      	mov	r0, r3
 80009e4:	f000 fd0a 	bl	80013fc <W25Q_Read>

		//Subtract CRC length
		data_size -= 4;
 80009e8:	68bb      	ldr	r3, [r7, #8]
 80009ea:	3b04      	subs	r3, #4
 80009ec:	60bb      	str	r3, [r7, #8]
		//Calculate actual CRC
		uint32_t i = 0;
 80009ee:	2300      	movs	r3, #0
 80009f0:	613b      	str	r3, [r7, #16]
		uint32_t data_crc_actual = 0;
 80009f2:	2300      	movs	r3, #0
 80009f4:	60fb      	str	r3, [r7, #12]
		if(data_size < ANIMATION_DATA_BUFFER_SIZE){
 80009f6:	68bb      	ldr	r3, [r7, #8]
 80009f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80009fc:	d213      	bcs.n	8000a26 <Animation_Data_Init+0x76>
			W25Q_Read(&animation_data[0], 0, data_size);
 80009fe:	68bb      	ldr	r3, [r7, #8]
 8000a00:	b29b      	uxth	r3, r3
 8000a02:	461a      	mov	r2, r3
 8000a04:	2100      	movs	r1, #0
 8000a06:	4860      	ldr	r0, [pc, #384]	; (8000b88 <Animation_Data_Init+0x1d8>)
 8000a08:	f000 fcf8 	bl	80013fc <W25Q_Read>
			data_crc_actual = HAL_CRC_Calculate(&hcrc, (uint32_t *)&animation_data[0], data_size / 4);
 8000a0c:	68bb      	ldr	r3, [r7, #8]
 8000a0e:	089b      	lsrs	r3, r3, #2
 8000a10:	461a      	mov	r2, r3
 8000a12:	495d      	ldr	r1, [pc, #372]	; (8000b88 <Animation_Data_Init+0x1d8>)
 8000a14:	485d      	ldr	r0, [pc, #372]	; (8000b8c <Animation_Data_Init+0x1dc>)
 8000a16:	f001 fb35 	bl	8002084 <HAL_CRC_Calculate>
 8000a1a:	60f8      	str	r0, [r7, #12]
			i += data_size;
 8000a1c:	68bb      	ldr	r3, [r7, #8]
 8000a1e:	693a      	ldr	r2, [r7, #16]
 8000a20:	4413      	add	r3, r2
 8000a22:	613b      	str	r3, [r7, #16]
 8000a24:	e040      	b.n	8000aa8 <Animation_Data_Init+0xf8>
		}else{
			W25Q_Read(&animation_data[0], i, ANIMATION_DATA_BUFFER_SIZE);
 8000a26:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000a2a:	6939      	ldr	r1, [r7, #16]
 8000a2c:	4856      	ldr	r0, [pc, #344]	; (8000b88 <Animation_Data_Init+0x1d8>)
 8000a2e:	f000 fce5 	bl	80013fc <W25Q_Read>
			data_crc_actual = HAL_CRC_Calculate(&hcrc, (uint32_t *)&animation_data[0], ANIMATION_DATA_BUFFER_SIZE / 4);
 8000a32:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000a36:	4954      	ldr	r1, [pc, #336]	; (8000b88 <Animation_Data_Init+0x1d8>)
 8000a38:	4854      	ldr	r0, [pc, #336]	; (8000b8c <Animation_Data_Init+0x1dc>)
 8000a3a:	f001 fb23 	bl	8002084 <HAL_CRC_Calculate>
 8000a3e:	60f8      	str	r0, [r7, #12]
			i += ANIMATION_DATA_BUFFER_SIZE;
 8000a40:	693b      	ldr	r3, [r7, #16]
 8000a42:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000a46:	613b      	str	r3, [r7, #16]
		}
		while(i != data_size){
 8000a48:	e02e      	b.n	8000aa8 <Animation_Data_Init+0xf8>
			if((data_size - i) < ANIMATION_DATA_BUFFER_SIZE){
 8000a4a:	68ba      	ldr	r2, [r7, #8]
 8000a4c:	693b      	ldr	r3, [r7, #16]
 8000a4e:	1ad3      	subs	r3, r2, r3
 8000a50:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000a54:	d217      	bcs.n	8000a86 <Animation_Data_Init+0xd6>
				W25Q_Read(&animation_data[0], i, data_size - i);
 8000a56:	68bb      	ldr	r3, [r7, #8]
 8000a58:	b29a      	uxth	r2, r3
 8000a5a:	693b      	ldr	r3, [r7, #16]
 8000a5c:	b29b      	uxth	r3, r3
 8000a5e:	1ad3      	subs	r3, r2, r3
 8000a60:	b29b      	uxth	r3, r3
 8000a62:	461a      	mov	r2, r3
 8000a64:	6939      	ldr	r1, [r7, #16]
 8000a66:	4848      	ldr	r0, [pc, #288]	; (8000b88 <Animation_Data_Init+0x1d8>)
 8000a68:	f000 fcc8 	bl	80013fc <W25Q_Read>
				data_crc_actual = HAL_CRC_Accumulate(&hcrc, (uint32_t *)&animation_data[0], (data_size - i) / 4);
 8000a6c:	68ba      	ldr	r2, [r7, #8]
 8000a6e:	693b      	ldr	r3, [r7, #16]
 8000a70:	1ad3      	subs	r3, r2, r3
 8000a72:	089b      	lsrs	r3, r3, #2
 8000a74:	461a      	mov	r2, r3
 8000a76:	4944      	ldr	r1, [pc, #272]	; (8000b88 <Animation_Data_Init+0x1d8>)
 8000a78:	4844      	ldr	r0, [pc, #272]	; (8000b8c <Animation_Data_Init+0x1dc>)
 8000a7a:	f001 fad8 	bl	800202e <HAL_CRC_Accumulate>
 8000a7e:	60f8      	str	r0, [r7, #12]
				i += data_size - i;
 8000a80:	68bb      	ldr	r3, [r7, #8]
 8000a82:	613b      	str	r3, [r7, #16]
 8000a84:	e010      	b.n	8000aa8 <Animation_Data_Init+0xf8>
			}else{
				W25Q_Read(&animation_data[0], i, ANIMATION_DATA_BUFFER_SIZE);
 8000a86:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000a8a:	6939      	ldr	r1, [r7, #16]
 8000a8c:	483e      	ldr	r0, [pc, #248]	; (8000b88 <Animation_Data_Init+0x1d8>)
 8000a8e:	f000 fcb5 	bl	80013fc <W25Q_Read>
				data_crc_actual = HAL_CRC_Accumulate(&hcrc, (uint32_t *)&animation_data[0], ANIMATION_DATA_BUFFER_SIZE / 4);
 8000a92:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000a96:	493c      	ldr	r1, [pc, #240]	; (8000b88 <Animation_Data_Init+0x1d8>)
 8000a98:	483c      	ldr	r0, [pc, #240]	; (8000b8c <Animation_Data_Init+0x1dc>)
 8000a9a:	f001 fac8 	bl	800202e <HAL_CRC_Accumulate>
 8000a9e:	60f8      	str	r0, [r7, #12]
				i += ANIMATION_DATA_BUFFER_SIZE;
 8000aa0:	693b      	ldr	r3, [r7, #16]
 8000aa2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000aa6:	613b      	str	r3, [r7, #16]
		while(i != data_size){
 8000aa8:	68bb      	ldr	r3, [r7, #8]
 8000aaa:	693a      	ldr	r2, [r7, #16]
 8000aac:	429a      	cmp	r2, r3
 8000aae:	d1cc      	bne.n	8000a4a <Animation_Data_Init+0x9a>
			}
		}

		//Check CRC
		if(data_crc_actual == data_crc){
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	68fa      	ldr	r2, [r7, #12]
 8000ab4:	429a      	cmp	r2, r3
 8000ab6:	d146      	bne.n	8000b46 <Animation_Data_Init+0x196>
			//Read animation data configuration
			uint32_t data = 0;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	603b      	str	r3, [r7, #0]
			W25Q_Read((uint8_t *)&data, 4, 2);
 8000abc:	463b      	mov	r3, r7
 8000abe:	2202      	movs	r2, #2
 8000ac0:	2104      	movs	r1, #4
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	f000 fc9a 	bl	80013fc <W25Q_Read>
			animation_data_config.clkdiv = *(uint16_t *)&data;
 8000ac8:	463b      	mov	r3, r7
 8000aca:	881a      	ldrh	r2, [r3, #0]
 8000acc:	4b30      	ldr	r3, [pc, #192]	; (8000b90 <Animation_Data_Init+0x1e0>)
 8000ace:	801a      	strh	r2, [r3, #0]
			W25Q_Read((uint8_t *)&data, 6, 1);
 8000ad0:	463b      	mov	r3, r7
 8000ad2:	2201      	movs	r2, #1
 8000ad4:	2106      	movs	r1, #6
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	f000 fc90 	bl	80013fc <W25Q_Read>
			animation_data_config.pulse = *(uint8_t *)&data;
 8000adc:	463b      	mov	r3, r7
 8000ade:	781a      	ldrb	r2, [r3, #0]
 8000ae0:	4b2b      	ldr	r3, [pc, #172]	; (8000b90 <Animation_Data_Init+0x1e0>)
 8000ae2:	709a      	strb	r2, [r3, #2]
			W25Q_Read((uint8_t *)&data, 7, 1);
 8000ae4:	463b      	mov	r3, r7
 8000ae6:	2201      	movs	r2, #1
 8000ae8:	2107      	movs	r1, #7
 8000aea:	4618      	mov	r0, r3
 8000aec:	f000 fc86 	bl	80013fc <W25Q_Read>
			animation_data_config.bit_0 = *(uint8_t *)&data;
 8000af0:	463b      	mov	r3, r7
 8000af2:	781a      	ldrb	r2, [r3, #0]
 8000af4:	4b26      	ldr	r3, [pc, #152]	; (8000b90 <Animation_Data_Init+0x1e0>)
 8000af6:	70da      	strb	r2, [r3, #3]
			W25Q_Read((uint8_t *)&data, 8, 1);
 8000af8:	463b      	mov	r3, r7
 8000afa:	2201      	movs	r2, #1
 8000afc:	2108      	movs	r1, #8
 8000afe:	4618      	mov	r0, r3
 8000b00:	f000 fc7c 	bl	80013fc <W25Q_Read>
			animation_data_config.bit_1 = *(uint8_t *)&data;
 8000b04:	463b      	mov	r3, r7
 8000b06:	781a      	ldrb	r2, [r3, #0]
 8000b08:	4b21      	ldr	r3, [pc, #132]	; (8000b90 <Animation_Data_Init+0x1e0>)
 8000b0a:	711a      	strb	r2, [r3, #4]
			W25Q_Read((uint8_t *)&data, 9, 2);
 8000b0c:	463b      	mov	r3, r7
 8000b0e:	2202      	movs	r2, #2
 8000b10:	2109      	movs	r1, #9
 8000b12:	4618      	mov	r0, r3
 8000b14:	f000 fc72 	bl	80013fc <W25Q_Read>
			animation_data_config.stop_pulses = *(uint16_t *)&data;
 8000b18:	463b      	mov	r3, r7
 8000b1a:	881a      	ldrh	r2, [r3, #0]
 8000b1c:	4b1c      	ldr	r3, [pc, #112]	; (8000b90 <Animation_Data_Init+0x1e0>)
 8000b1e:	80da      	strh	r2, [r3, #6]
			W25Q_Read((uint8_t *)&data, 11, 4);
 8000b20:	463b      	mov	r3, r7
 8000b22:	2204      	movs	r2, #4
 8000b24:	210b      	movs	r1, #11
 8000b26:	4618      	mov	r0, r3
 8000b28:	f000 fc68 	bl	80013fc <W25Q_Read>
			animation_data_config.images = *(uint32_t *)&data;
 8000b2c:	683b      	ldr	r3, [r7, #0]
 8000b2e:	4a18      	ldr	r2, [pc, #96]	; (8000b90 <Animation_Data_Init+0x1e0>)
 8000b30:	6093      	str	r3, [r2, #8]
			W25Q_Read((uint8_t *)&data, 15, 4);
 8000b32:	463b      	mov	r3, r7
 8000b34:	2204      	movs	r2, #4
 8000b36:	210f      	movs	r1, #15
 8000b38:	4618      	mov	r0, r3
 8000b3a:	f000 fc5f 	bl	80013fc <W25Q_Read>
			animation_data_config.image_size = *(uint32_t *)&data;
 8000b3e:	683b      	ldr	r3, [r7, #0]
 8000b40:	4a13      	ldr	r2, [pc, #76]	; (8000b90 <Animation_Data_Init+0x1e0>)
 8000b42:	60d3      	str	r3, [r2, #12]
 8000b44:	e004      	b.n	8000b50 <Animation_Data_Init+0x1a0>
		}else{
			data_error = 1;
 8000b46:	2301      	movs	r3, #1
 8000b48:	75fb      	strb	r3, [r7, #23]
 8000b4a:	e001      	b.n	8000b50 <Animation_Data_Init+0x1a0>
		}
	}else{
		data_error = 1;
 8000b4c:	2301      	movs	r3, #1
 8000b4e:	75fb      	strb	r3, [r7, #23]
	}

	//Reading correct data failed
	if(data_error){
 8000b50:	7dfb      	ldrb	r3, [r7, #23]
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d014      	beq.n	8000b80 <Animation_Data_Init+0x1d0>
		animation_data_config.clkdiv = 0;
 8000b56:	4b0e      	ldr	r3, [pc, #56]	; (8000b90 <Animation_Data_Init+0x1e0>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	801a      	strh	r2, [r3, #0]
		animation_data_config.pulse = 0;
 8000b5c:	4b0c      	ldr	r3, [pc, #48]	; (8000b90 <Animation_Data_Init+0x1e0>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	709a      	strb	r2, [r3, #2]
		animation_data_config.bit_0 = 0;
 8000b62:	4b0b      	ldr	r3, [pc, #44]	; (8000b90 <Animation_Data_Init+0x1e0>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	70da      	strb	r2, [r3, #3]
		animation_data_config.bit_1 = 0;
 8000b68:	4b09      	ldr	r3, [pc, #36]	; (8000b90 <Animation_Data_Init+0x1e0>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	711a      	strb	r2, [r3, #4]
		animation_data_config.stop_pulses = 0;
 8000b6e:	4b08      	ldr	r3, [pc, #32]	; (8000b90 <Animation_Data_Init+0x1e0>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	80da      	strh	r2, [r3, #6]
		animation_data_config.images = 0;
 8000b74:	4b06      	ldr	r3, [pc, #24]	; (8000b90 <Animation_Data_Init+0x1e0>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	609a      	str	r2, [r3, #8]
		animation_data_config.image_size = 0;
 8000b7a:	4b05      	ldr	r3, [pc, #20]	; (8000b90 <Animation_Data_Init+0x1e0>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	60da      	str	r2, [r3, #12]
	}
}
 8000b80:	bf00      	nop
 8000b82:	3718      	adds	r7, #24
 8000b84:	46bd      	mov	sp, r7
 8000b86:	bd80      	pop	{r7, pc}
 8000b88:	20000164 	.word	0x20000164
 8000b8c:	20001180 	.word	0x20001180
 8000b90:	20000154 	.word	0x20000154

08000b94 <Animation_Data_Buffer>:

void Animation_Data_Buffer(){
 8000b94:	b580      	push	{r7, lr}
 8000b96:	af00      	add	r7, sp, #0
	if(animation_data_buffering_rq){
 8000b98:	4b06      	ldr	r3, [pc, #24]	; (8000bb4 <Animation_Data_Buffer+0x20>)
 8000b9a:	781b      	ldrb	r3, [r3, #0]
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d007      	beq.n	8000bb0 <Animation_Data_Buffer+0x1c>
		animation_data_buffering_rq = 0;
 8000ba0:	4b04      	ldr	r3, [pc, #16]	; (8000bb4 <Animation_Data_Buffer+0x20>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	701a      	strb	r2, [r3, #0]
		Animation_Data_Read(animation_data_buffering_image);
 8000ba6:	4b04      	ldr	r3, [pc, #16]	; (8000bb8 <Animation_Data_Buffer+0x24>)
 8000ba8:	881b      	ldrh	r3, [r3, #0]
 8000baa:	4618      	mov	r0, r3
 8000bac:	f7ff fe74 	bl	8000898 <Animation_Data_Read>
	}
}
 8000bb0:	bf00      	nop
 8000bb2:	bd80      	pop	{r7, pc}
 8000bb4:	20001168 	.word	0x20001168
 8000bb8:	2000116a 	.word	0x2000116a

08000bbc <Example_Animation_Play>:
uint32_t example_run = 0;
uint32_t example_current_animation = 0;
uint32_t example_current_animation_played_times = 0;
uint32_t example_current_animation_image = 0;

void Example_Animation_Play(uint32_t ntimes, uint32_t from_image, uint32_t length, uint32_t delay){
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b084      	sub	sp, #16
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	60f8      	str	r0, [r7, #12]
 8000bc4:	60b9      	str	r1, [r7, #8]
 8000bc6:	607a      	str	r2, [r7, #4]
 8000bc8:	603b      	str	r3, [r7, #0]
	if(example_current_animation_played_times < ntimes){
 8000bca:	4b19      	ldr	r3, [pc, #100]	; (8000c30 <Example_Animation_Play+0x74>)
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	68fa      	ldr	r2, [r7, #12]
 8000bd0:	429a      	cmp	r2, r3
 8000bd2:	d920      	bls.n	8000c16 <Example_Animation_Play+0x5a>
		if(example_current_animation_image < length){
 8000bd4:	4b17      	ldr	r3, [pc, #92]	; (8000c34 <Example_Animation_Play+0x78>)
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	687a      	ldr	r2, [r7, #4]
 8000bda:	429a      	cmp	r2, r3
 8000bdc:	d912      	bls.n	8000c04 <Example_Animation_Play+0x48>
			Animation_Display_Image(from_image + example_current_animation_image);
 8000bde:	68bb      	ldr	r3, [r7, #8]
 8000be0:	b29a      	uxth	r2, r3
 8000be2:	4b14      	ldr	r3, [pc, #80]	; (8000c34 <Example_Animation_Play+0x78>)
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	b29b      	uxth	r3, r3
 8000be8:	4413      	add	r3, r2
 8000bea:	b29b      	uxth	r3, r3
 8000bec:	4618      	mov	r0, r3
 8000bee:	f7ff fdbd 	bl	800076c <Animation_Display_Image>
			example_current_animation_image++;
 8000bf2:	4b10      	ldr	r3, [pc, #64]	; (8000c34 <Example_Animation_Play+0x78>)
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	3301      	adds	r3, #1
 8000bf8:	4a0e      	ldr	r2, [pc, #56]	; (8000c34 <Example_Animation_Play+0x78>)
 8000bfa:	6013      	str	r3, [r2, #0]
			HAL_Delay(delay);
 8000bfc:	6838      	ldr	r0, [r7, #0]
 8000bfe:	f001 f8c5 	bl	8001d8c <HAL_Delay>
		}
	}else{
		example_current_animation_played_times = 0;
		example_current_animation++;
	}
}
 8000c02:	e010      	b.n	8000c26 <Example_Animation_Play+0x6a>
			example_current_animation_image = 0;
 8000c04:	4b0b      	ldr	r3, [pc, #44]	; (8000c34 <Example_Animation_Play+0x78>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	601a      	str	r2, [r3, #0]
			example_current_animation_played_times++;
 8000c0a:	4b09      	ldr	r3, [pc, #36]	; (8000c30 <Example_Animation_Play+0x74>)
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	3301      	adds	r3, #1
 8000c10:	4a07      	ldr	r2, [pc, #28]	; (8000c30 <Example_Animation_Play+0x74>)
 8000c12:	6013      	str	r3, [r2, #0]
}
 8000c14:	e007      	b.n	8000c26 <Example_Animation_Play+0x6a>
		example_current_animation_played_times = 0;
 8000c16:	4b06      	ldr	r3, [pc, #24]	; (8000c30 <Example_Animation_Play+0x74>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	601a      	str	r2, [r3, #0]
		example_current_animation++;
 8000c1c:	4b06      	ldr	r3, [pc, #24]	; (8000c38 <Example_Animation_Play+0x7c>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	3301      	adds	r3, #1
 8000c22:	4a05      	ldr	r2, [pc, #20]	; (8000c38 <Example_Animation_Play+0x7c>)
 8000c24:	6013      	str	r3, [r2, #0]
}
 8000c26:	bf00      	nop
 8000c28:	3710      	adds	r7, #16
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	20001174 	.word	0x20001174
 8000c34:	20001178 	.word	0x20001178
 8000c38:	20001170 	.word	0x20001170

08000c3c <App_Loop>:
///PART OF EXAMPLE ANIMATION TO HERE

void App_Loop(){
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	af00      	add	r7, sp, #0
	if(!USB_Enabled() && USB_Det_State()){
 8000c40:	f000 fa0a 	bl	8001058 <USB_Enabled>
 8000c44:	4603      	mov	r3, r0
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d117      	bne.n	8000c7a <App_Loop+0x3e>
 8000c4a:	f000 f9f9 	bl	8001040 <USB_Det_State>
 8000c4e:	4603      	mov	r3, r0
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d012      	beq.n	8000c7a <App_Loop+0x3e>
		///PART OF EXAMPLE ANIMATION FROM HERE
		example_run = 0;
 8000c54:	4b6d      	ldr	r3, [pc, #436]	; (8000e0c <App_Loop+0x1d0>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	601a      	str	r2, [r3, #0]
		example_current_animation = 0;
 8000c5a:	4b6d      	ldr	r3, [pc, #436]	; (8000e10 <App_Loop+0x1d4>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	601a      	str	r2, [r3, #0]
		example_current_animation_played_times = 0;
 8000c60:	4b6c      	ldr	r3, [pc, #432]	; (8000e14 <App_Loop+0x1d8>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	601a      	str	r2, [r3, #0]
		example_current_animation_image = 0;
 8000c66:	4b6c      	ldr	r3, [pc, #432]	; (8000e18 <App_Loop+0x1dc>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	601a      	str	r2, [r3, #0]
		///PART OF EXAMPLE ANIMATION TO HERE

		Animation_Display_Color(0);
 8000c6c:	2000      	movs	r0, #0
 8000c6e:	f7ff fcc5 	bl	80005fc <Animation_Display_Color>
		USB_Enable(1);
 8000c72:	2001      	movs	r0, #1
 8000c74:	f000 f9fc 	bl	8001070 <USB_Enable>
 8000c78:	e014      	b.n	8000ca4 <App_Loop+0x68>
	}else if(USB_Enabled() && !USB_Det_State()){
 8000c7a:	f000 f9ed 	bl	8001058 <USB_Enabled>
 8000c7e:	4603      	mov	r3, r0
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d00f      	beq.n	8000ca4 <App_Loop+0x68>
 8000c84:	f000 f9dc 	bl	8001040 <USB_Det_State>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d10a      	bne.n	8000ca4 <App_Loop+0x68>
		USB_Enable(0);
 8000c8e:	2000      	movs	r0, #0
 8000c90:	f000 f9ee 	bl	8001070 <USB_Enable>
		LED_Set(LED_ON);
 8000c94:	2001      	movs	r0, #1
 8000c96:	f000 f96b 	bl	8000f70 <LED_Set>
		Animation_Init();
 8000c9a:	f7ff fda3 	bl	80007e4 <Animation_Init>
		LED_Set(LED_OFF);
 8000c9e:	2000      	movs	r0, #0
 8000ca0:	f000 f966 	bl	8000f70 <LED_Set>
	}
	
	if(!USB_Enabled()){
 8000ca4:	f000 f9d8 	bl	8001058 <USB_Enabled>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	f040 80ab 	bne.w	8000e06 <App_Loop+0x1ca>
		if(!animation_data_config.images || !animation_data_config.image_size){
 8000cb0:	4b5a      	ldr	r3, [pc, #360]	; (8000e1c <App_Loop+0x1e0>)
 8000cb2:	689b      	ldr	r3, [r3, #8]
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d003      	beq.n	8000cc0 <App_Loop+0x84>
 8000cb8:	4b58      	ldr	r3, [pc, #352]	; (8000e1c <App_Loop+0x1e0>)
 8000cba:	68db      	ldr	r3, [r3, #12]
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d10d      	bne.n	8000cdc <App_Loop+0xa0>
			LED_Set(1 - LED_State());
 8000cc0:	f000 f976 	bl	8000fb0 <LED_State>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	f1c3 0301 	rsb	r3, r3, #1
 8000cca:	b2db      	uxtb	r3, r3
 8000ccc:	4618      	mov	r0, r3
 8000cce:	f000 f94f 	bl	8000f70 <LED_Set>
			HAL_Delay(300);
 8000cd2:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000cd6:	f001 f859 	bl	8001d8c <HAL_Delay>
				HAL_Delay(100);
			}
			///PART OF EXAMPLE ANIMATION TO HERE
		}
	}
}
 8000cda:	e094      	b.n	8000e06 <App_Loop+0x1ca>
			if(LED_State()){
 8000cdc:	f000 f968 	bl	8000fb0 <LED_State>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d002      	beq.n	8000cec <App_Loop+0xb0>
				LED_Set(LED_OFF);
 8000ce6:	2000      	movs	r0, #0
 8000ce8:	f000 f942 	bl	8000f70 <LED_Set>
			if(!Button_State()){
 8000cec:	f000 f8e4 	bl	8000eb8 <Button_State>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d121      	bne.n	8000d3a <App_Loop+0xfe>
				example_run = 1 - example_run;
 8000cf6:	4b45      	ldr	r3, [pc, #276]	; (8000e0c <App_Loop+0x1d0>)
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	f1c3 0301 	rsb	r3, r3, #1
 8000cfe:	4a43      	ldr	r2, [pc, #268]	; (8000e0c <App_Loop+0x1d0>)
 8000d00:	6013      	str	r3, [r2, #0]
				if(!example_run){
 8000d02:	4b42      	ldr	r3, [pc, #264]	; (8000e0c <App_Loop+0x1d0>)
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d10e      	bne.n	8000d28 <App_Loop+0xec>
					example_run = 0;
 8000d0a:	4b40      	ldr	r3, [pc, #256]	; (8000e0c <App_Loop+0x1d0>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	601a      	str	r2, [r3, #0]
					example_current_animation = 0;
 8000d10:	4b3f      	ldr	r3, [pc, #252]	; (8000e10 <App_Loop+0x1d4>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	601a      	str	r2, [r3, #0]
					example_current_animation_played_times = 0;
 8000d16:	4b3f      	ldr	r3, [pc, #252]	; (8000e14 <App_Loop+0x1d8>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	601a      	str	r2, [r3, #0]
					example_current_animation_image = 0;
 8000d1c:	4b3e      	ldr	r3, [pc, #248]	; (8000e18 <App_Loop+0x1dc>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	601a      	str	r2, [r3, #0]
					Animation_Display_Color(0);
 8000d22:	2000      	movs	r0, #0
 8000d24:	f7ff fc6a 	bl	80005fc <Animation_Display_Color>
				while(!Button_State());
 8000d28:	bf00      	nop
 8000d2a:	f000 f8c5 	bl	8000eb8 <Button_State>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d0fa      	beq.n	8000d2a <App_Loop+0xee>
				HAL_Delay(200);
 8000d34:	20c8      	movs	r0, #200	; 0xc8
 8000d36:	f001 f829 	bl	8001d8c <HAL_Delay>
			if(example_run && (animation_data_config.images == 35)){
 8000d3a:	4b34      	ldr	r3, [pc, #208]	; (8000e0c <App_Loop+0x1d0>)
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d050      	beq.n	8000de4 <App_Loop+0x1a8>
 8000d42:	4b36      	ldr	r3, [pc, #216]	; (8000e1c <App_Loop+0x1e0>)
 8000d44:	689b      	ldr	r3, [r3, #8]
 8000d46:	2b23      	cmp	r3, #35	; 0x23
 8000d48:	d14c      	bne.n	8000de4 <App_Loop+0x1a8>
				switch(example_current_animation){
 8000d4a:	4b31      	ldr	r3, [pc, #196]	; (8000e10 <App_Loop+0x1d4>)
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	2b06      	cmp	r3, #6
 8000d50:	d84b      	bhi.n	8000dea <App_Loop+0x1ae>
 8000d52:	a201      	add	r2, pc, #4	; (adr r2, 8000d58 <App_Loop+0x11c>)
 8000d54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d58:	08000d75 	.word	0x08000d75
 8000d5c:	08000d83 	.word	0x08000d83
 8000d60:	08000d91 	.word	0x08000d91
 8000d64:	08000da1 	.word	0x08000da1
 8000d68:	08000db1 	.word	0x08000db1
 8000d6c:	08000dcf 	.word	0x08000dcf
 8000d70:	08000ddd 	.word	0x08000ddd
						Example_Animation_Play(8, 0, 8, 50);
 8000d74:	2332      	movs	r3, #50	; 0x32
 8000d76:	2208      	movs	r2, #8
 8000d78:	2100      	movs	r1, #0
 8000d7a:	2008      	movs	r0, #8
 8000d7c:	f7ff ff1e 	bl	8000bbc <Example_Animation_Play>
					break;
 8000d80:	e033      	b.n	8000dea <App_Loop+0x1ae>
						Example_Animation_Play(8, 8, 8, 50);
 8000d82:	2332      	movs	r3, #50	; 0x32
 8000d84:	2208      	movs	r2, #8
 8000d86:	2108      	movs	r1, #8
 8000d88:	2008      	movs	r0, #8
 8000d8a:	f7ff ff17 	bl	8000bbc <Example_Animation_Play>
					break;
 8000d8e:	e02c      	b.n	8000dea <App_Loop+0x1ae>
						Example_Animation_Play(4, 16, 2, 1000);
 8000d90:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d94:	2202      	movs	r2, #2
 8000d96:	2110      	movs	r1, #16
 8000d98:	2004      	movs	r0, #4
 8000d9a:	f7ff ff0f 	bl	8000bbc <Example_Animation_Play>
					break;
 8000d9e:	e024      	b.n	8000dea <App_Loop+0x1ae>
						Example_Animation_Play(2, 18, 2, 1000);
 8000da0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000da4:	2202      	movs	r2, #2
 8000da6:	2112      	movs	r1, #18
 8000da8:	2002      	movs	r0, #2
 8000daa:	f7ff ff07 	bl	8000bbc <Example_Animation_Play>
					break;
 8000dae:	e01c      	b.n	8000dea <App_Loop+0x1ae>
						Example_Animation_Play(1, 20, 11, 50);
 8000db0:	2332      	movs	r3, #50	; 0x32
 8000db2:	220b      	movs	r2, #11
 8000db4:	2114      	movs	r1, #20
 8000db6:	2001      	movs	r0, #1
 8000db8:	f7ff ff00 	bl	8000bbc <Example_Animation_Play>
						if(example_current_animation == 5){
 8000dbc:	4b14      	ldr	r3, [pc, #80]	; (8000e10 <App_Loop+0x1d4>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	2b05      	cmp	r3, #5
 8000dc2:	d111      	bne.n	8000de8 <App_Loop+0x1ac>
							HAL_Delay(2000);
 8000dc4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000dc8:	f000 ffe0 	bl	8001d8c <HAL_Delay>
					break;
 8000dcc:	e00c      	b.n	8000de8 <App_Loop+0x1ac>
						Example_Animation_Play(6, 31, 4, 250);
 8000dce:	23fa      	movs	r3, #250	; 0xfa
 8000dd0:	2204      	movs	r2, #4
 8000dd2:	211f      	movs	r1, #31
 8000dd4:	2006      	movs	r0, #6
 8000dd6:	f7ff fef1 	bl	8000bbc <Example_Animation_Play>
					break;
 8000dda:	e006      	b.n	8000dea <App_Loop+0x1ae>
						example_current_animation = 0;
 8000ddc:	4b0c      	ldr	r3, [pc, #48]	; (8000e10 <App_Loop+0x1d4>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	601a      	str	r2, [r3, #0]
					break;
 8000de2:	e002      	b.n	8000dea <App_Loop+0x1ae>
			}
 8000de4:	bf00      	nop
 8000de6:	e000      	b.n	8000dea <App_Loop+0x1ae>
					break;
 8000de8:	bf00      	nop
			if(example_run && (animation_data_config.images == 1)){
 8000dea:	4b08      	ldr	r3, [pc, #32]	; (8000e0c <App_Loop+0x1d0>)
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d009      	beq.n	8000e06 <App_Loop+0x1ca>
 8000df2:	4b0a      	ldr	r3, [pc, #40]	; (8000e1c <App_Loop+0x1e0>)
 8000df4:	689b      	ldr	r3, [r3, #8]
 8000df6:	2b01      	cmp	r3, #1
 8000df8:	d105      	bne.n	8000e06 <App_Loop+0x1ca>
				Animation_Display_Image(0);
 8000dfa:	2000      	movs	r0, #0
 8000dfc:	f7ff fcb6 	bl	800076c <Animation_Display_Image>
				HAL_Delay(100);
 8000e00:	2064      	movs	r0, #100	; 0x64
 8000e02:	f000 ffc3 	bl	8001d8c <HAL_Delay>
}
 8000e06:	bf00      	nop
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	bf00      	nop
 8000e0c:	2000116c 	.word	0x2000116c
 8000e10:	20001170 	.word	0x20001170
 8000e14:	20001174 	.word	0x20001174
 8000e18:	20001178 	.word	0x20001178
 8000e1c:	20000154 	.word	0x20000154

08000e20 <App_Init>:
void App_Init(){
 8000e20:	b580      	push	{r7, lr}
 8000e22:	af00      	add	r7, sp, #0
	LED_Set(LED_ON);
 8000e24:	2001      	movs	r0, #1
 8000e26:	f000 f8a3 	bl	8000f70 <LED_Set>
	USB_Init();
 8000e2a:	f000 f945 	bl	80010b8 <USB_Init>
	Button_Init();
 8000e2e:	f000 f84f 	bl	8000ed0 <Button_Init>
	Animation_Init();
 8000e32:	f7ff fcd7 	bl	80007e4 <Animation_Init>
	LED_Set(LED_OFF);
 8000e36:	2000      	movs	r0, #0
 8000e38:	f000 f89a 	bl	8000f70 <LED_Set>
}
 8000e3c:	bf00      	nop
 8000e3e:	bd80      	pop	{r7, pc}

08000e40 <Button_Interrupt>:
#include "main.h"
#include "button.h"

static uint8_t button_state = 0;

void Button_Interrupt(){
 8000e40:	b580      	push	{r7, lr}
 8000e42:	af00      	add	r7, sp, #0
	button_state = Button_Debounce_Read();
 8000e44:	f000 f808 	bl	8000e58 <Button_Debounce_Read>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	461a      	mov	r2, r3
 8000e4c:	4b01      	ldr	r3, [pc, #4]	; (8000e54 <Button_Interrupt+0x14>)
 8000e4e:	701a      	strb	r2, [r3, #0]
}
 8000e50:	bf00      	nop
 8000e52:	bd80      	pop	{r7, pc}
 8000e54:	2000117c 	.word	0x2000117c

08000e58 <Button_Debounce_Read>:

uint8_t Button_Debounce_Read(){
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b082      	sub	sp, #8
 8000e5c:	af00      	add	r7, sp, #0
	uint8_t level;
	uint8_t d = 0;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	71bb      	strb	r3, [r7, #6]
	uint8_t i = 0;
 8000e62:	2300      	movs	r3, #0
 8000e64:	717b      	strb	r3, [r7, #5]
	while(d != 1){
 8000e66:	e01d      	b.n	8000ea4 <Button_Debounce_Read+0x4c>
		i = 0;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	717b      	strb	r3, [r7, #5]
		level = HAL_GPIO_ReadPin(BUTTON_GPIO_Port, BUTTON_Pin);
 8000e6c:	2101      	movs	r1, #1
 8000e6e:	4811      	ldr	r0, [pc, #68]	; (8000eb4 <Button_Debounce_Read+0x5c>)
 8000e70:	f001 fe52 	bl	8002b18 <HAL_GPIO_ReadPin>
 8000e74:	4603      	mov	r3, r0
 8000e76:	71fb      	strb	r3, [r7, #7]
		while(i != BUTTON_DEBOUNCE_SAMPLES){
 8000e78:	e011      	b.n	8000e9e <Button_Debounce_Read+0x46>
			i++;
 8000e7a:	797b      	ldrb	r3, [r7, #5]
 8000e7c:	3301      	adds	r3, #1
 8000e7e:	717b      	strb	r3, [r7, #5]
			if(HAL_GPIO_ReadPin(BUTTON_GPIO_Port, BUTTON_Pin) != level){
 8000e80:	2101      	movs	r1, #1
 8000e82:	480c      	ldr	r0, [pc, #48]	; (8000eb4 <Button_Debounce_Read+0x5c>)
 8000e84:	f001 fe48 	bl	8002b18 <HAL_GPIO_ReadPin>
 8000e88:	4603      	mov	r3, r0
 8000e8a:	461a      	mov	r2, r3
 8000e8c:	79fb      	ldrb	r3, [r7, #7]
 8000e8e:	4293      	cmp	r3, r2
 8000e90:	d000      	beq.n	8000e94 <Button_Debounce_Read+0x3c>
				break;
 8000e92:	e007      	b.n	8000ea4 <Button_Debounce_Read+0x4c>
			}
			if(i == BUTTON_DEBOUNCE_SAMPLES){
 8000e94:	797b      	ldrb	r3, [r7, #5]
 8000e96:	2b0a      	cmp	r3, #10
 8000e98:	d101      	bne.n	8000e9e <Button_Debounce_Read+0x46>
				d = 1;
 8000e9a:	2301      	movs	r3, #1
 8000e9c:	71bb      	strb	r3, [r7, #6]
		while(i != BUTTON_DEBOUNCE_SAMPLES){
 8000e9e:	797b      	ldrb	r3, [r7, #5]
 8000ea0:	2b0a      	cmp	r3, #10
 8000ea2:	d1ea      	bne.n	8000e7a <Button_Debounce_Read+0x22>
	while(d != 1){
 8000ea4:	79bb      	ldrb	r3, [r7, #6]
 8000ea6:	2b01      	cmp	r3, #1
 8000ea8:	d1de      	bne.n	8000e68 <Button_Debounce_Read+0x10>
			}
		}
	}
	return level;
 8000eaa:	79fb      	ldrb	r3, [r7, #7]
}
 8000eac:	4618      	mov	r0, r3
 8000eae:	3708      	adds	r7, #8
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	bd80      	pop	{r7, pc}
 8000eb4:	40020000 	.word	0x40020000

08000eb8 <Button_State>:

uint8_t Button_State(){
 8000eb8:	b480      	push	{r7}
 8000eba:	af00      	add	r7, sp, #0
	return button_state;
 8000ebc:	4b03      	ldr	r3, [pc, #12]	; (8000ecc <Button_State+0x14>)
 8000ebe:	781b      	ldrb	r3, [r3, #0]
}
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec8:	4770      	bx	lr
 8000eca:	bf00      	nop
 8000ecc:	2000117c 	.word	0x2000117c

08000ed0 <Button_Init>:
void Button_Init(){
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	af00      	add	r7, sp, #0
	Button_Interrupt();
 8000ed4:	f7ff ffb4 	bl	8000e40 <Button_Interrupt>
 8000ed8:	bf00      	nop
 8000eda:	bd80      	pop	{r7, pc}

08000edc <HAL_SPI_ErrorCallback>:
#include "button.h"
#include "animation.h"
#include "w25q.h"
#include "usb.h"

void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi){
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b082      	sub	sp, #8
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
	if(hspi->Instance == SPI1){
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	4a04      	ldr	r2, [pc, #16]	; (8000efc <HAL_SPI_ErrorCallback+0x20>)
 8000eea:	4293      	cmp	r3, r2
 8000eec:	d101      	bne.n	8000ef2 <HAL_SPI_ErrorCallback+0x16>
		W25Q_SPI_Error_Interrupt();
 8000eee:	f000 f8ed 	bl	80010cc <W25Q_SPI_Error_Interrupt>
	}
}
 8000ef2:	bf00      	nop
 8000ef4:	3708      	adds	r7, #8
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	bf00      	nop
 8000efc:	40013000 	.word	0x40013000

08000f00 <HAL_SPI_RxCpltCallback>:
void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi){
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b082      	sub	sp, #8
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
	if(hspi->Instance == SPI1){
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	4a04      	ldr	r2, [pc, #16]	; (8000f20 <HAL_SPI_RxCpltCallback+0x20>)
 8000f0e:	4293      	cmp	r3, r2
 8000f10:	d101      	bne.n	8000f16 <HAL_SPI_RxCpltCallback+0x16>
		W25Q_SPI_Receive_DMA_Interrupt();
 8000f12:	f000 f8e7 	bl	80010e4 <W25Q_SPI_Receive_DMA_Interrupt>
	}
}
 8000f16:	bf00      	nop
 8000f18:	3708      	adds	r7, #8
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	bf00      	nop
 8000f20:	40013000 	.word	0x40013000

08000f24 <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b082      	sub	sp, #8
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == BUTTON_Pin){
 8000f2e:	88fb      	ldrh	r3, [r7, #6]
 8000f30:	2b01      	cmp	r3, #1
 8000f32:	d102      	bne.n	8000f3a <HAL_GPIO_EXTI_Callback+0x16>
		Button_Interrupt();
 8000f34:	f7ff ff84 	bl	8000e40 <Button_Interrupt>
	}
	else if(GPIO_Pin == USB_DET_Pin){
		USB_Det_Interrupt();
	}
}
 8000f38:	e004      	b.n	8000f44 <HAL_GPIO_EXTI_Callback+0x20>
	else if(GPIO_Pin == USB_DET_Pin){
 8000f3a:	88fb      	ldrh	r3, [r7, #6]
 8000f3c:	2b40      	cmp	r3, #64	; 0x40
 8000f3e:	d101      	bne.n	8000f44 <HAL_GPIO_EXTI_Callback+0x20>
		USB_Det_Interrupt();
 8000f40:	f000 f842 	bl	8000fc8 <USB_Det_Interrupt>
}
 8000f44:	bf00      	nop
 8000f46:	3708      	adds	r7, #8
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bd80      	pop	{r7, pc}

08000f4c <HAL_TIM_PWM_PulseFinishedCallback>:
void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim){
	if(htim->Instance == TIM1){
		Animation_Timer_Error_Interrupt();
	}
}
void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim){
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b082      	sub	sp, #8
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM1){
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	4a04      	ldr	r2, [pc, #16]	; (8000f6c <HAL_TIM_PWM_PulseFinishedCallback+0x20>)
 8000f5a:	4293      	cmp	r3, r2
 8000f5c:	d101      	bne.n	8000f62 <HAL_TIM_PWM_PulseFinishedCallback+0x16>
		Animation_PWM_Pulse_Interrupt();
 8000f5e:	f7ff fabb 	bl	80004d8 <Animation_PWM_Pulse_Interrupt>
	}
}
 8000f62:	bf00      	nop
 8000f64:	3708      	adds	r7, #8
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	bf00      	nop
 8000f6c:	40010000 	.word	0x40010000

08000f70 <LED_Set>:
#include "main.h"
#include "led.h"

static uint8_t led_state = LED_OFF;

void LED_Set(uint8_t state){
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b082      	sub	sp, #8
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	4603      	mov	r3, r0
 8000f78:	71fb      	strb	r3, [r7, #7]
	led_state = state;
 8000f7a:	4a0b      	ldr	r2, [pc, #44]	; (8000fa8 <LED_Set+0x38>)
 8000f7c:	79fb      	ldrb	r3, [r7, #7]
 8000f7e:	7013      	strb	r3, [r2, #0]
	if(state){
 8000f80:	79fb      	ldrb	r3, [r7, #7]
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d006      	beq.n	8000f94 <LED_Set+0x24>
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000f86:	2200      	movs	r2, #0
 8000f88:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f8c:	4807      	ldr	r0, [pc, #28]	; (8000fac <LED_Set+0x3c>)
 8000f8e:	f001 fddb 	bl	8002b48 <HAL_GPIO_WritePin>
	}else{
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
	}
}
 8000f92:	e005      	b.n	8000fa0 <LED_Set+0x30>
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8000f94:	2201      	movs	r2, #1
 8000f96:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f9a:	4804      	ldr	r0, [pc, #16]	; (8000fac <LED_Set+0x3c>)
 8000f9c:	f001 fdd4 	bl	8002b48 <HAL_GPIO_WritePin>
}
 8000fa0:	bf00      	nop
 8000fa2:	3708      	adds	r7, #8
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bd80      	pop	{r7, pc}
 8000fa8:	2000117d 	.word	0x2000117d
 8000fac:	40020800 	.word	0x40020800

08000fb0 <LED_State>:
uint8_t LED_State(){
 8000fb0:	b480      	push	{r7}
 8000fb2:	af00      	add	r7, sp, #0
	return led_state;
 8000fb4:	4b03      	ldr	r3, [pc, #12]	; (8000fc4 <LED_State+0x14>)
 8000fb6:	781b      	ldrb	r3, [r3, #0]
 8000fb8:	4618      	mov	r0, r3
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc0:	4770      	bx	lr
 8000fc2:	bf00      	nop
 8000fc4:	2000117d 	.word	0x2000117d

08000fc8 <USB_Det_Interrupt>:
extern USBD_HandleTypeDef hUsbDeviceFS;

static uint8_t usb_det_state = 0;
static uint8_t usb_enabled = 1;

void USB_Det_Interrupt(){
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	af00      	add	r7, sp, #0
	usb_det_state = USB_Det_Debounce_Read();
 8000fcc:	f000 f808 	bl	8000fe0 <USB_Det_Debounce_Read>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	461a      	mov	r2, r3
 8000fd4:	4b01      	ldr	r3, [pc, #4]	; (8000fdc <USB_Det_Interrupt+0x14>)
 8000fd6:	701a      	strb	r2, [r3, #0]
}
 8000fd8:	bf00      	nop
 8000fda:	bd80      	pop	{r7, pc}
 8000fdc:	2000117e 	.word	0x2000117e

08000fe0 <USB_Det_Debounce_Read>:

uint8_t USB_Det_Debounce_Read(){
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b082      	sub	sp, #8
 8000fe4:	af00      	add	r7, sp, #0
	uint8_t level;
	uint8_t d = 0;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	71bb      	strb	r3, [r7, #6]
	uint8_t i = 0;
 8000fea:	2300      	movs	r3, #0
 8000fec:	717b      	strb	r3, [r7, #5]
	while(d != 1){
 8000fee:	e01d      	b.n	800102c <USB_Det_Debounce_Read+0x4c>
		i = 0;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	717b      	strb	r3, [r7, #5]
		level = HAL_GPIO_ReadPin(USB_DET_GPIO_Port, USB_DET_Pin);
 8000ff4:	2140      	movs	r1, #64	; 0x40
 8000ff6:	4811      	ldr	r0, [pc, #68]	; (800103c <USB_Det_Debounce_Read+0x5c>)
 8000ff8:	f001 fd8e 	bl	8002b18 <HAL_GPIO_ReadPin>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	71fb      	strb	r3, [r7, #7]
		while(i != USB_DET_DEBOUNCE_SAMPLES){
 8001000:	e011      	b.n	8001026 <USB_Det_Debounce_Read+0x46>
			i++;
 8001002:	797b      	ldrb	r3, [r7, #5]
 8001004:	3301      	adds	r3, #1
 8001006:	717b      	strb	r3, [r7, #5]
			if(HAL_GPIO_ReadPin(USB_DET_GPIO_Port, USB_DET_Pin) != level){
 8001008:	2140      	movs	r1, #64	; 0x40
 800100a:	480c      	ldr	r0, [pc, #48]	; (800103c <USB_Det_Debounce_Read+0x5c>)
 800100c:	f001 fd84 	bl	8002b18 <HAL_GPIO_ReadPin>
 8001010:	4603      	mov	r3, r0
 8001012:	461a      	mov	r2, r3
 8001014:	79fb      	ldrb	r3, [r7, #7]
 8001016:	4293      	cmp	r3, r2
 8001018:	d000      	beq.n	800101c <USB_Det_Debounce_Read+0x3c>
				break;
 800101a:	e007      	b.n	800102c <USB_Det_Debounce_Read+0x4c>
			}
			if(i == USB_DET_DEBOUNCE_SAMPLES){
 800101c:	797b      	ldrb	r3, [r7, #5]
 800101e:	2b0a      	cmp	r3, #10
 8001020:	d101      	bne.n	8001026 <USB_Det_Debounce_Read+0x46>
				d = 1;
 8001022:	2301      	movs	r3, #1
 8001024:	71bb      	strb	r3, [r7, #6]
		while(i != USB_DET_DEBOUNCE_SAMPLES){
 8001026:	797b      	ldrb	r3, [r7, #5]
 8001028:	2b0a      	cmp	r3, #10
 800102a:	d1ea      	bne.n	8001002 <USB_Det_Debounce_Read+0x22>
	while(d != 1){
 800102c:	79bb      	ldrb	r3, [r7, #6]
 800102e:	2b01      	cmp	r3, #1
 8001030:	d1de      	bne.n	8000ff0 <USB_Det_Debounce_Read+0x10>
			}
		}
	}
	return level;
 8001032:	79fb      	ldrb	r3, [r7, #7]
}
 8001034:	4618      	mov	r0, r3
 8001036:	3708      	adds	r7, #8
 8001038:	46bd      	mov	sp, r7
 800103a:	bd80      	pop	{r7, pc}
 800103c:	40020400 	.word	0x40020400

08001040 <USB_Det_State>:

uint8_t USB_Det_State(){
 8001040:	b480      	push	{r7}
 8001042:	af00      	add	r7, sp, #0
	return usb_det_state;
 8001044:	4b03      	ldr	r3, [pc, #12]	; (8001054 <USB_Det_State+0x14>)
 8001046:	781b      	ldrb	r3, [r3, #0]
}
 8001048:	4618      	mov	r0, r3
 800104a:	46bd      	mov	sp, r7
 800104c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop
 8001054:	2000117e 	.word	0x2000117e

08001058 <USB_Enabled>:
uint8_t USB_Enabled(){
 8001058:	b480      	push	{r7}
 800105a:	af00      	add	r7, sp, #0
	return usb_enabled;
 800105c:	4b03      	ldr	r3, [pc, #12]	; (800106c <USB_Enabled+0x14>)
 800105e:	781b      	ldrb	r3, [r3, #0]
}
 8001060:	4618      	mov	r0, r3
 8001062:	46bd      	mov	sp, r7
 8001064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001068:	4770      	bx	lr
 800106a:	bf00      	nop
 800106c:	20000000 	.word	0x20000000

08001070 <USB_Enable>:
void USB_Enable(uint8_t enable){
 8001070:	b580      	push	{r7, lr}
 8001072:	b082      	sub	sp, #8
 8001074:	af00      	add	r7, sp, #0
 8001076:	4603      	mov	r3, r0
 8001078:	71fb      	strb	r3, [r7, #7]
	if(enable){
 800107a:	79fb      	ldrb	r3, [r7, #7]
 800107c:	2b00      	cmp	r3, #0
 800107e:	d008      	beq.n	8001092 <USB_Enable+0x22>
		if(USBD_Start(&hUsbDeviceFS) != USBD_OK){Error_Handler();}
 8001080:	480b      	ldr	r0, [pc, #44]	; (80010b0 <USB_Enable+0x40>)
 8001082:	f009 fc1e 	bl	800a8c2 <USBD_Start>
 8001086:	4603      	mov	r3, r0
 8001088:	2b00      	cmp	r3, #0
 800108a:	d00a      	beq.n	80010a2 <USB_Enable+0x32>
 800108c:	f000 fc1c 	bl	80018c8 <Error_Handler>
 8001090:	e007      	b.n	80010a2 <USB_Enable+0x32>
	}else{
		if(USBD_Stop(&hUsbDeviceFS) != USBD_OK){Error_Handler();}
 8001092:	4807      	ldr	r0, [pc, #28]	; (80010b0 <USB_Enable+0x40>)
 8001094:	f009 fc21 	bl	800a8da <USBD_Stop>
 8001098:	4603      	mov	r3, r0
 800109a:	2b00      	cmp	r3, #0
 800109c:	d001      	beq.n	80010a2 <USB_Enable+0x32>
 800109e:	f000 fc13 	bl	80018c8 <Error_Handler>
	}
	usb_enabled = enable;
 80010a2:	4a04      	ldr	r2, [pc, #16]	; (80010b4 <USB_Enable+0x44>)
 80010a4:	79fb      	ldrb	r3, [r7, #7]
 80010a6:	7013      	strb	r3, [r2, #0]
}
 80010a8:	bf00      	nop
 80010aa:	3708      	adds	r7, #8
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bd80      	pop	{r7, pc}
 80010b0:	20001290 	.word	0x20001290
 80010b4:	20000000 	.word	0x20000000

080010b8 <USB_Init>:
void USB_Init(){
 80010b8:	b580      	push	{r7, lr}
 80010ba:	af00      	add	r7, sp, #0
	USB_Det_Interrupt();
 80010bc:	f7ff ff84 	bl	8000fc8 <USB_Det_Interrupt>
	USB_Enable(0);
 80010c0:	2000      	movs	r0, #0
 80010c2:	f7ff ffd5 	bl	8001070 <USB_Enable>
 80010c6:	bf00      	nop
 80010c8:	bd80      	pop	{r7, pc}
	...

080010cc <W25Q_SPI_Error_Interrupt>:

extern SPI_HandleTypeDef hspi1;
uint8_t w25q_dma_busy = 0;

//Hardware
void W25Q_SPI_Error_Interrupt(){
 80010cc:	b580      	push	{r7, lr}
 80010ce:	af00      	add	r7, sp, #0
	W25Q_Set_CS(1);
 80010d0:	2001      	movs	r0, #1
 80010d2:	f000 f84d 	bl	8001170 <W25Q_Set_CS>
	w25q_dma_busy = 0;
 80010d6:	4b02      	ldr	r3, [pc, #8]	; (80010e0 <W25Q_SPI_Error_Interrupt+0x14>)
 80010d8:	2200      	movs	r2, #0
 80010da:	701a      	strb	r2, [r3, #0]
}
 80010dc:	bf00      	nop
 80010de:	bd80      	pop	{r7, pc}
 80010e0:	2000117f 	.word	0x2000117f

080010e4 <W25Q_SPI_Receive_DMA_Interrupt>:
void W25Q_SPI_Receive_DMA_Interrupt(){
 80010e4:	b580      	push	{r7, lr}
 80010e6:	af00      	add	r7, sp, #0
	W25Q_Set_CS(1);
 80010e8:	2001      	movs	r0, #1
 80010ea:	f000 f841 	bl	8001170 <W25Q_Set_CS>
	w25q_dma_busy = 0;
 80010ee:	4b02      	ldr	r3, [pc, #8]	; (80010f8 <W25Q_SPI_Receive_DMA_Interrupt+0x14>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	701a      	strb	r2, [r3, #0]
}
 80010f4:	bf00      	nop
 80010f6:	bd80      	pop	{r7, pc}
 80010f8:	2000117f 	.word	0x2000117f

080010fc <W25Q_SPI_Receive_DMA>:
void W25Q_SPI_Receive_DMA(uint8_t *data, uint16_t length){
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b082      	sub	sp, #8
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
 8001104:	460b      	mov	r3, r1
 8001106:	807b      	strh	r3, [r7, #2]
	HAL_SPI_Receive_DMA(&hspi1, data, length);
 8001108:	887b      	ldrh	r3, [r7, #2]
 800110a:	461a      	mov	r2, r3
 800110c:	6879      	ldr	r1, [r7, #4]
 800110e:	4803      	ldr	r0, [pc, #12]	; (800111c <W25Q_SPI_Receive_DMA+0x20>)
 8001110:	f004 f8d8 	bl	80052c4 <HAL_SPI_Receive_DMA>
}
 8001114:	bf00      	nop
 8001116:	3708      	adds	r7, #8
 8001118:	46bd      	mov	sp, r7
 800111a:	bd80      	pop	{r7, pc}
 800111c:	20001188 	.word	0x20001188

08001120 <W25Q_SPI_Receive>:
void W25Q_SPI_Receive(uint8_t *data, uint16_t length){
 8001120:	b580      	push	{r7, lr}
 8001122:	b082      	sub	sp, #8
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
 8001128:	460b      	mov	r3, r1
 800112a:	807b      	strh	r3, [r7, #2]
	HAL_SPI_Receive(&hspi1, data, length, W25Q_BLOCKING_TIMEOUT);
 800112c:	887a      	ldrh	r2, [r7, #2]
 800112e:	f242 7310 	movw	r3, #10000	; 0x2710
 8001132:	6879      	ldr	r1, [r7, #4]
 8001134:	4803      	ldr	r0, [pc, #12]	; (8001144 <W25Q_SPI_Receive+0x24>)
 8001136:	f003 fe12 	bl	8004d5e <HAL_SPI_Receive>
}
 800113a:	bf00      	nop
 800113c:	3708      	adds	r7, #8
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}
 8001142:	bf00      	nop
 8001144:	20001188 	.word	0x20001188

08001148 <W25Q_SPI_Transmit>:
void W25Q_SPI_Transmit(uint8_t *data, uint16_t length){
 8001148:	b580      	push	{r7, lr}
 800114a:	b082      	sub	sp, #8
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
 8001150:	460b      	mov	r3, r1
 8001152:	807b      	strh	r3, [r7, #2]
	HAL_SPI_Transmit(&hspi1, data, length, W25Q_BLOCKING_TIMEOUT);
 8001154:	887a      	ldrh	r2, [r7, #2]
 8001156:	f242 7310 	movw	r3, #10000	; 0x2710
 800115a:	6879      	ldr	r1, [r7, #4]
 800115c:	4803      	ldr	r0, [pc, #12]	; (800116c <W25Q_SPI_Transmit+0x24>)
 800115e:	f003 fcc2 	bl	8004ae6 <HAL_SPI_Transmit>
}
 8001162:	bf00      	nop
 8001164:	3708      	adds	r7, #8
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	20001188 	.word	0x20001188

08001170 <W25Q_Set_CS>:
void W25Q_Set_CS(uint8_t cs){
 8001170:	b580      	push	{r7, lr}
 8001172:	b082      	sub	sp, #8
 8001174:	af00      	add	r7, sp, #0
 8001176:	4603      	mov	r3, r0
 8001178:	71fb      	strb	r3, [r7, #7]
	if(!cs){
 800117a:	79fb      	ldrb	r3, [r7, #7]
 800117c:	2b00      	cmp	r3, #0
 800117e:	d105      	bne.n	800118c <W25Q_Set_CS+0x1c>
		HAL_GPIO_WritePin(FLASH_CS_GPIO_Port, FLASH_CS_Pin, GPIO_PIN_RESET);
 8001180:	2200      	movs	r2, #0
 8001182:	2110      	movs	r1, #16
 8001184:	4806      	ldr	r0, [pc, #24]	; (80011a0 <W25Q_Set_CS+0x30>)
 8001186:	f001 fcdf 	bl	8002b48 <HAL_GPIO_WritePin>
	}else{
		HAL_GPIO_WritePin(FLASH_CS_GPIO_Port, FLASH_CS_Pin, GPIO_PIN_SET);
	}
}
 800118a:	e004      	b.n	8001196 <W25Q_Set_CS+0x26>
		HAL_GPIO_WritePin(FLASH_CS_GPIO_Port, FLASH_CS_Pin, GPIO_PIN_SET);
 800118c:	2201      	movs	r2, #1
 800118e:	2110      	movs	r1, #16
 8001190:	4803      	ldr	r0, [pc, #12]	; (80011a0 <W25Q_Set_CS+0x30>)
 8001192:	f001 fcd9 	bl	8002b48 <HAL_GPIO_WritePin>
}
 8001196:	bf00      	nop
 8001198:	3708      	adds	r7, #8
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}
 800119e:	bf00      	nop
 80011a0:	40020000 	.word	0x40020000

080011a4 <W25Q_Write_Enable>:

//USB Side Commands
void W25Q_Write_Enable(uint8_t enable){
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b084      	sub	sp, #16
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	4603      	mov	r3, r0
 80011ac:	71fb      	strb	r3, [r7, #7]
	W25Q_Set_CS(0);
 80011ae:	2000      	movs	r0, #0
 80011b0:	f7ff ffde 	bl	8001170 <W25Q_Set_CS>
	uint8_t cmd = W25Q_CMD_WRIRE_ENABLE;
 80011b4:	2306      	movs	r3, #6
 80011b6:	73fb      	strb	r3, [r7, #15]
	if(!enable){
 80011b8:	79fb      	ldrb	r3, [r7, #7]
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d101      	bne.n	80011c2 <W25Q_Write_Enable+0x1e>
		cmd = W25Q_CMD_WRITE_DISABLE;
 80011be:	2304      	movs	r3, #4
 80011c0:	73fb      	strb	r3, [r7, #15]
	}
	W25Q_SPI_Transmit(&cmd, 1);
 80011c2:	f107 030f 	add.w	r3, r7, #15
 80011c6:	2101      	movs	r1, #1
 80011c8:	4618      	mov	r0, r3
 80011ca:	f7ff ffbd 	bl	8001148 <W25Q_SPI_Transmit>
	W25Q_Set_CS(1);
 80011ce:	2001      	movs	r0, #1
 80011d0:	f7ff ffce 	bl	8001170 <W25Q_Set_CS>
}
 80011d4:	bf00      	nop
 80011d6:	3710      	adds	r7, #16
 80011d8:	46bd      	mov	sp, r7
 80011da:	bd80      	pop	{r7, pc}

080011dc <W25Q_Busy>:
uint8_t W25Q_Busy(){
 80011dc:	b580      	push	{r7, lr}
 80011de:	b082      	sub	sp, #8
 80011e0:	af00      	add	r7, sp, #0
	W25Q_Set_CS(0);
 80011e2:	2000      	movs	r0, #0
 80011e4:	f7ff ffc4 	bl	8001170 <W25Q_Set_CS>
	uint8_t tmp = W25Q_CMD_READ_STATUS_R1;
 80011e8:	2305      	movs	r3, #5
 80011ea:	71fb      	strb	r3, [r7, #7]
	W25Q_SPI_Transmit(&tmp, 1);
 80011ec:	1dfb      	adds	r3, r7, #7
 80011ee:	2101      	movs	r1, #1
 80011f0:	4618      	mov	r0, r3
 80011f2:	f7ff ffa9 	bl	8001148 <W25Q_SPI_Transmit>
	W25Q_SPI_Receive(&tmp, 1);
 80011f6:	1dfb      	adds	r3, r7, #7
 80011f8:	2101      	movs	r1, #1
 80011fa:	4618      	mov	r0, r3
 80011fc:	f7ff ff90 	bl	8001120 <W25Q_SPI_Receive>
	W25Q_Set_CS(1);
 8001200:	2001      	movs	r0, #1
 8001202:	f7ff ffb5 	bl	8001170 <W25Q_Set_CS>
	return (tmp & 1);
 8001206:	79fb      	ldrb	r3, [r7, #7]
 8001208:	f003 0301 	and.w	r3, r3, #1
 800120c:	b2db      	uxtb	r3, r3
}
 800120e:	4618      	mov	r0, r3
 8001210:	3708      	adds	r7, #8
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}

08001216 <W25Q_Erase_Sector>:
void W25Q_Erase_Sector(uint32_t sector){
 8001216:	b580      	push	{r7, lr}
 8001218:	b084      	sub	sp, #16
 800121a:	af00      	add	r7, sp, #0
 800121c:	6078      	str	r0, [r7, #4]
	while(W25Q_Busy());
 800121e:	bf00      	nop
 8001220:	f7ff ffdc 	bl	80011dc <W25Q_Busy>
 8001224:	4603      	mov	r3, r0
 8001226:	2b00      	cmp	r3, #0
 8001228:	d1fa      	bne.n	8001220 <W25Q_Erase_Sector+0xa>
	W25Q_Write_Enable(1);
 800122a:	2001      	movs	r0, #1
 800122c:	f7ff ffba 	bl	80011a4 <W25Q_Write_Enable>
	while(W25Q_Busy());
 8001230:	bf00      	nop
 8001232:	f7ff ffd3 	bl	80011dc <W25Q_Busy>
 8001236:	4603      	mov	r3, r0
 8001238:	2b00      	cmp	r3, #0
 800123a:	d1fa      	bne.n	8001232 <W25Q_Erase_Sector+0x1c>
	W25Q_Set_CS(0);
 800123c:	2000      	movs	r0, #0
 800123e:	f7ff ff97 	bl	8001170 <W25Q_Set_CS>
	uint8_t cmd = W25Q_CMD_SECTOR_ERASE;
 8001242:	2320      	movs	r3, #32
 8001244:	73fb      	strb	r3, [r7, #15]
	W25Q_SPI_Transmit(&cmd, 1);
 8001246:	f107 030f 	add.w	r3, r7, #15
 800124a:	2101      	movs	r1, #1
 800124c:	4618      	mov	r0, r3
 800124e:	f7ff ff7b 	bl	8001148 <W25Q_SPI_Transmit>
	uint32_t address = sector * W25Q_SECTOR_SIZE;
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	031b      	lsls	r3, r3, #12
 8001256:	60bb      	str	r3, [r7, #8]
	W25Q_SPI_Transmit((uint8_t *)&address, 3);
 8001258:	f107 0308 	add.w	r3, r7, #8
 800125c:	2103      	movs	r1, #3
 800125e:	4618      	mov	r0, r3
 8001260:	f7ff ff72 	bl	8001148 <W25Q_SPI_Transmit>
	W25Q_Set_CS(1);
 8001264:	2001      	movs	r0, #1
 8001266:	f7ff ff83 	bl	8001170 <W25Q_Set_CS>
	while(W25Q_Busy());
 800126a:	bf00      	nop
 800126c:	f7ff ffb6 	bl	80011dc <W25Q_Busy>
 8001270:	4603      	mov	r3, r0
 8001272:	2b00      	cmp	r3, #0
 8001274:	d1fa      	bne.n	800126c <W25Q_Erase_Sector+0x56>
}
 8001276:	bf00      	nop
 8001278:	bf00      	nop
 800127a:	3710      	adds	r7, #16
 800127c:	46bd      	mov	sp, r7
 800127e:	bd80      	pop	{r7, pc}

08001280 <W25Q_Write_Sector>:
void W25Q_Write_Sector(uint8_t* data, uint16_t sector){
 8001280:	b580      	push	{r7, lr}
 8001282:	b086      	sub	sp, #24
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
 8001288:	460b      	mov	r3, r1
 800128a:	807b      	strh	r3, [r7, #2]
	uint8_t cmd = W25Q_CMD_PAGE_PROGRAM;
 800128c:	2302      	movs	r3, #2
 800128e:	74fb      	strb	r3, [r7, #19]
	uint32_t address = sector * W25Q_SECTOR_SIZE;
 8001290:	887b      	ldrh	r3, [r7, #2]
 8001292:	031b      	lsls	r3, r3, #12
 8001294:	60fb      	str	r3, [r7, #12]
	uint32_t i = 0;
 8001296:	2300      	movs	r3, #0
 8001298:	617b      	str	r3, [r7, #20]
	while(i != W25Q_SECTOR_SIZE / W25Q_PAGE_SIZE){
 800129a:	e030      	b.n	80012fe <W25Q_Write_Sector+0x7e>
		while(W25Q_Busy());
 800129c:	bf00      	nop
 800129e:	f7ff ff9d 	bl	80011dc <W25Q_Busy>
 80012a2:	4603      	mov	r3, r0
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d1fa      	bne.n	800129e <W25Q_Write_Sector+0x1e>
		W25Q_Write_Enable(1);
 80012a8:	2001      	movs	r0, #1
 80012aa:	f7ff ff7b 	bl	80011a4 <W25Q_Write_Enable>
		while(W25Q_Busy());
 80012ae:	bf00      	nop
 80012b0:	f7ff ff94 	bl	80011dc <W25Q_Busy>
 80012b4:	4603      	mov	r3, r0
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d1fa      	bne.n	80012b0 <W25Q_Write_Sector+0x30>
		W25Q_Set_CS(0);
 80012ba:	2000      	movs	r0, #0
 80012bc:	f7ff ff58 	bl	8001170 <W25Q_Set_CS>
		W25Q_SPI_Transmit(&cmd, 1);
 80012c0:	f107 0313 	add.w	r3, r7, #19
 80012c4:	2101      	movs	r1, #1
 80012c6:	4618      	mov	r0, r3
 80012c8:	f7ff ff3e 	bl	8001148 <W25Q_SPI_Transmit>
		W25Q_SPI_Transmit((uint8_t *)&address, 3);
 80012cc:	f107 030c 	add.w	r3, r7, #12
 80012d0:	2103      	movs	r1, #3
 80012d2:	4618      	mov	r0, r3
 80012d4:	f7ff ff38 	bl	8001148 <W25Q_SPI_Transmit>
		W25Q_SPI_Transmit(&data[W25Q_PAGE_SIZE * i], W25Q_PAGE_SIZE);
 80012d8:	697b      	ldr	r3, [r7, #20]
 80012da:	021b      	lsls	r3, r3, #8
 80012dc:	687a      	ldr	r2, [r7, #4]
 80012de:	4413      	add	r3, r2
 80012e0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80012e4:	4618      	mov	r0, r3
 80012e6:	f7ff ff2f 	bl	8001148 <W25Q_SPI_Transmit>
		W25Q_Set_CS(1);
 80012ea:	2001      	movs	r0, #1
 80012ec:	f7ff ff40 	bl	8001170 <W25Q_Set_CS>
		address += W25Q_PAGE_SIZE;
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80012f6:	60fb      	str	r3, [r7, #12]
		i++;
 80012f8:	697b      	ldr	r3, [r7, #20]
 80012fa:	3301      	adds	r3, #1
 80012fc:	617b      	str	r3, [r7, #20]
	while(i != W25Q_SECTOR_SIZE / W25Q_PAGE_SIZE){
 80012fe:	697b      	ldr	r3, [r7, #20]
 8001300:	2b10      	cmp	r3, #16
 8001302:	d1cb      	bne.n	800129c <W25Q_Write_Sector+0x1c>
	}
	while(W25Q_Busy());
 8001304:	bf00      	nop
 8001306:	f7ff ff69 	bl	80011dc <W25Q_Busy>
 800130a:	4603      	mov	r3, r0
 800130c:	2b00      	cmp	r3, #0
 800130e:	d1fa      	bne.n	8001306 <W25Q_Write_Sector+0x86>
}
 8001310:	bf00      	nop
 8001312:	bf00      	nop
 8001314:	3718      	adds	r7, #24
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}

0800131a <W25Q_Read_Sector>:
void W25Q_Read_Sector(uint8_t *data, uint16_t sector){
 800131a:	b580      	push	{r7, lr}
 800131c:	b084      	sub	sp, #16
 800131e:	af00      	add	r7, sp, #0
 8001320:	6078      	str	r0, [r7, #4]
 8001322:	460b      	mov	r3, r1
 8001324:	807b      	strh	r3, [r7, #2]
	while(W25Q_Busy());
 8001326:	bf00      	nop
 8001328:	f7ff ff58 	bl	80011dc <W25Q_Busy>
 800132c:	4603      	mov	r3, r0
 800132e:	2b00      	cmp	r3, #0
 8001330:	d1fa      	bne.n	8001328 <W25Q_Read_Sector+0xe>
	W25Q_Set_CS(0);
 8001332:	2000      	movs	r0, #0
 8001334:	f7ff ff1c 	bl	8001170 <W25Q_Set_CS>
	uint8_t cmd = W25Q_CMD_FAST_READ;
 8001338:	230b      	movs	r3, #11
 800133a:	73fb      	strb	r3, [r7, #15]
	W25Q_SPI_Transmit(&cmd, 1);
 800133c:	f107 030f 	add.w	r3, r7, #15
 8001340:	2101      	movs	r1, #1
 8001342:	4618      	mov	r0, r3
 8001344:	f7ff ff00 	bl	8001148 <W25Q_SPI_Transmit>

	uint32_t address = sector * W25Q_SECTOR_SIZE;
 8001348:	887b      	ldrh	r3, [r7, #2]
 800134a:	031b      	lsls	r3, r3, #12
 800134c:	60bb      	str	r3, [r7, #8]
	address = ((address >> 16) & 0xff) | (address & 0xff00) | ((address << 16) & 0xff0000);
 800134e:	68bb      	ldr	r3, [r7, #8]
 8001350:	0c1b      	lsrs	r3, r3, #16
 8001352:	b2da      	uxtb	r2, r3
 8001354:	68bb      	ldr	r3, [r7, #8]
 8001356:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800135a:	431a      	orrs	r2, r3
 800135c:	68bb      	ldr	r3, [r7, #8]
 800135e:	041b      	lsls	r3, r3, #16
 8001360:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8001364:	4313      	orrs	r3, r2
 8001366:	60bb      	str	r3, [r7, #8]
	W25Q_SPI_Transmit((uint8_t *)&address, 4);
 8001368:	f107 0308 	add.w	r3, r7, #8
 800136c:	2104      	movs	r1, #4
 800136e:	4618      	mov	r0, r3
 8001370:	f7ff feea 	bl	8001148 <W25Q_SPI_Transmit>

	W25Q_SPI_Receive(data, W25Q_SECTOR_SIZE);
 8001374:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001378:	6878      	ldr	r0, [r7, #4]
 800137a:	f7ff fed1 	bl	8001120 <W25Q_SPI_Receive>
 	W25Q_Set_CS(1);
 800137e:	2001      	movs	r0, #1
 8001380:	f7ff fef6 	bl	8001170 <W25Q_Set_CS>
}
 8001384:	bf00      	nop
 8001386:	3710      	adds	r7, #16
 8001388:	46bd      	mov	sp, r7
 800138a:	bd80      	pop	{r7, pc}

0800138c <W25Q_Read_DMA>:
	W25Q_Set_CS(1);
	while(W25Q_Busy());
}

//App
void W25Q_Read_DMA(uint8_t *data, uint16_t length, uint32_t address){
 800138c:	b580      	push	{r7, lr}
 800138e:	b086      	sub	sp, #24
 8001390:	af00      	add	r7, sp, #0
 8001392:	60f8      	str	r0, [r7, #12]
 8001394:	460b      	mov	r3, r1
 8001396:	607a      	str	r2, [r7, #4]
 8001398:	817b      	strh	r3, [r7, #10]
	while(w25q_dma_busy);
 800139a:	bf00      	nop
 800139c:	4b16      	ldr	r3, [pc, #88]	; (80013f8 <W25Q_Read_DMA+0x6c>)
 800139e:	781b      	ldrb	r3, [r3, #0]
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d1fb      	bne.n	800139c <W25Q_Read_DMA+0x10>
	w25q_dma_busy = 1;
 80013a4:	4b14      	ldr	r3, [pc, #80]	; (80013f8 <W25Q_Read_DMA+0x6c>)
 80013a6:	2201      	movs	r2, #1
 80013a8:	701a      	strb	r2, [r3, #0]
	W25Q_Set_CS(0);
 80013aa:	2000      	movs	r0, #0
 80013ac:	f7ff fee0 	bl	8001170 <W25Q_Set_CS>
	uint8_t cmd = W25Q_CMD_FAST_READ;
 80013b0:	230b      	movs	r3, #11
 80013b2:	75fb      	strb	r3, [r7, #23]
	W25Q_SPI_Transmit(&cmd, 1);
 80013b4:	f107 0317 	add.w	r3, r7, #23
 80013b8:	2101      	movs	r1, #1
 80013ba:	4618      	mov	r0, r3
 80013bc:	f7ff fec4 	bl	8001148 <W25Q_SPI_Transmit>

	address = ((address >> 16) & 0xff) | (address & 0xff00) | ((address << 16) & 0xff0000);
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	0c1b      	lsrs	r3, r3, #16
 80013c4:	b2da      	uxtb	r2, r3
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80013cc:	431a      	orrs	r2, r3
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	041b      	lsls	r3, r3, #16
 80013d2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80013d6:	4313      	orrs	r3, r2
 80013d8:	607b      	str	r3, [r7, #4]
	W25Q_SPI_Transmit((uint8_t *)&address, 4);
 80013da:	1d3b      	adds	r3, r7, #4
 80013dc:	2104      	movs	r1, #4
 80013de:	4618      	mov	r0, r3
 80013e0:	f7ff feb2 	bl	8001148 <W25Q_SPI_Transmit>

	W25Q_SPI_Receive_DMA(data, length);
 80013e4:	897b      	ldrh	r3, [r7, #10]
 80013e6:	4619      	mov	r1, r3
 80013e8:	68f8      	ldr	r0, [r7, #12]
 80013ea:	f7ff fe87 	bl	80010fc <W25Q_SPI_Receive_DMA>
}
 80013ee:	bf00      	nop
 80013f0:	3718      	adds	r7, #24
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	2000117f 	.word	0x2000117f

080013fc <W25Q_Read>:
void W25Q_Read(uint8_t *data, uint32_t address, uint16_t length){
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b086      	sub	sp, #24
 8001400:	af00      	add	r7, sp, #0
 8001402:	60f8      	str	r0, [r7, #12]
 8001404:	60b9      	str	r1, [r7, #8]
 8001406:	4613      	mov	r3, r2
 8001408:	80fb      	strh	r3, [r7, #6]
	while(W25Q_Busy());
 800140a:	bf00      	nop
 800140c:	f7ff fee6 	bl	80011dc <W25Q_Busy>
 8001410:	4603      	mov	r3, r0
 8001412:	2b00      	cmp	r3, #0
 8001414:	d1fa      	bne.n	800140c <W25Q_Read+0x10>
	W25Q_Set_CS(0);
 8001416:	2000      	movs	r0, #0
 8001418:	f7ff feaa 	bl	8001170 <W25Q_Set_CS>
	uint8_t cmd = W25Q_CMD_FAST_READ;
 800141c:	230b      	movs	r3, #11
 800141e:	75fb      	strb	r3, [r7, #23]
	W25Q_SPI_Transmit(&cmd, 1);
 8001420:	f107 0317 	add.w	r3, r7, #23
 8001424:	2101      	movs	r1, #1
 8001426:	4618      	mov	r0, r3
 8001428:	f7ff fe8e 	bl	8001148 <W25Q_SPI_Transmit>

	address = ((address >> 16) & 0xff) | (address & 0xff00) | ((address << 16) & 0xff0000);
 800142c:	68bb      	ldr	r3, [r7, #8]
 800142e:	0c1b      	lsrs	r3, r3, #16
 8001430:	b2da      	uxtb	r2, r3
 8001432:	68bb      	ldr	r3, [r7, #8]
 8001434:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8001438:	431a      	orrs	r2, r3
 800143a:	68bb      	ldr	r3, [r7, #8]
 800143c:	041b      	lsls	r3, r3, #16
 800143e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8001442:	4313      	orrs	r3, r2
 8001444:	60bb      	str	r3, [r7, #8]
	W25Q_SPI_Transmit((uint8_t *)&address, 4);
 8001446:	f107 0308 	add.w	r3, r7, #8
 800144a:	2104      	movs	r1, #4
 800144c:	4618      	mov	r0, r3
 800144e:	f7ff fe7b 	bl	8001148 <W25Q_SPI_Transmit>

	W25Q_SPI_Receive(data, length);
 8001452:	88fb      	ldrh	r3, [r7, #6]
 8001454:	4619      	mov	r1, r3
 8001456:	68f8      	ldr	r0, [r7, #12]
 8001458:	f7ff fe62 	bl	8001120 <W25Q_SPI_Receive>
 	W25Q_Set_CS(1);
 800145c:	2001      	movs	r0, #1
 800145e:	f7ff fe87 	bl	8001170 <W25Q_Set_CS>
}
 8001462:	bf00      	nop
 8001464:	3718      	adds	r7, #24
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}

0800146a <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800146a:	b580      	push	{r7, lr}
 800146c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800146e:	f000 fc30 	bl	8001cd2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001472:	f000 f811 	bl	8001498 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001476:	f000 f985 	bl	8001784 <MX_GPIO_Init>
  MX_DMA_Init();
 800147a:	f000 f963 	bl	8001744 <MX_DMA_Init>
  MX_TIM1_Init();
 800147e:	f000 f8c1 	bl	8001604 <MX_TIM1_Init>
  MX_CRC_Init();
 8001482:	f000 f875 	bl	8001570 <MX_CRC_Init>
  MX_SPI1_Init();
 8001486:	f000 f887 	bl	8001598 <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 800148a:	f00a fca5 	bl	800bdd8 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  App_Init();
 800148e:	f7ff fcc7 	bl	8000e20 <App_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    App_Loop();
 8001492:	f7ff fbd3 	bl	8000c3c <App_Loop>
 8001496:	e7fc      	b.n	8001492 <main+0x28>

08001498 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b094      	sub	sp, #80	; 0x50
 800149c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800149e:	f107 0320 	add.w	r3, r7, #32
 80014a2:	2230      	movs	r2, #48	; 0x30
 80014a4:	2100      	movs	r1, #0
 80014a6:	4618      	mov	r0, r3
 80014a8:	f00b f9d2 	bl	800c850 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014ac:	f107 030c 	add.w	r3, r7, #12
 80014b0:	2200      	movs	r2, #0
 80014b2:	601a      	str	r2, [r3, #0]
 80014b4:	605a      	str	r2, [r3, #4]
 80014b6:	609a      	str	r2, [r3, #8]
 80014b8:	60da      	str	r2, [r3, #12]
 80014ba:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80014bc:	2300      	movs	r3, #0
 80014be:	60bb      	str	r3, [r7, #8]
 80014c0:	4b29      	ldr	r3, [pc, #164]	; (8001568 <SystemClock_Config+0xd0>)
 80014c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014c4:	4a28      	ldr	r2, [pc, #160]	; (8001568 <SystemClock_Config+0xd0>)
 80014c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014ca:	6413      	str	r3, [r2, #64]	; 0x40
 80014cc:	4b26      	ldr	r3, [pc, #152]	; (8001568 <SystemClock_Config+0xd0>)
 80014ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014d4:	60bb      	str	r3, [r7, #8]
 80014d6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80014d8:	2300      	movs	r3, #0
 80014da:	607b      	str	r3, [r7, #4]
 80014dc:	4b23      	ldr	r3, [pc, #140]	; (800156c <SystemClock_Config+0xd4>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80014e4:	4a21      	ldr	r2, [pc, #132]	; (800156c <SystemClock_Config+0xd4>)
 80014e6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014ea:	6013      	str	r3, [r2, #0]
 80014ec:	4b1f      	ldr	r3, [pc, #124]	; (800156c <SystemClock_Config+0xd4>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80014f4:	607b      	str	r3, [r7, #4]
 80014f6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80014f8:	2301      	movs	r3, #1
 80014fa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80014fc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001500:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001502:	2302      	movs	r3, #2
 8001504:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001506:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800150a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 800150c:	2319      	movs	r3, #25
 800150e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001510:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001514:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001516:	2304      	movs	r3, #4
 8001518:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800151a:	2307      	movs	r3, #7
 800151c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800151e:	f107 0320 	add.w	r3, r7, #32
 8001522:	4618      	mov	r0, r3
 8001524:	f002 fe26 	bl	8004174 <HAL_RCC_OscConfig>
 8001528:	4603      	mov	r3, r0
 800152a:	2b00      	cmp	r3, #0
 800152c:	d001      	beq.n	8001532 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800152e:	f000 f9cb 	bl	80018c8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001532:	230f      	movs	r3, #15
 8001534:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001536:	2302      	movs	r3, #2
 8001538:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800153a:	2300      	movs	r3, #0
 800153c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800153e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001542:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001544:	2300      	movs	r3, #0
 8001546:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001548:	f107 030c 	add.w	r3, r7, #12
 800154c:	2102      	movs	r1, #2
 800154e:	4618      	mov	r0, r3
 8001550:	f003 f888 	bl	8004664 <HAL_RCC_ClockConfig>
 8001554:	4603      	mov	r3, r0
 8001556:	2b00      	cmp	r3, #0
 8001558:	d001      	beq.n	800155e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800155a:	f000 f9b5 	bl	80018c8 <Error_Handler>
  }
}
 800155e:	bf00      	nop
 8001560:	3750      	adds	r7, #80	; 0x50
 8001562:	46bd      	mov	sp, r7
 8001564:	bd80      	pop	{r7, pc}
 8001566:	bf00      	nop
 8001568:	40023800 	.word	0x40023800
 800156c:	40007000 	.word	0x40007000

08001570 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8001574:	4b06      	ldr	r3, [pc, #24]	; (8001590 <MX_CRC_Init+0x20>)
 8001576:	4a07      	ldr	r2, [pc, #28]	; (8001594 <MX_CRC_Init+0x24>)
 8001578:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800157a:	4805      	ldr	r0, [pc, #20]	; (8001590 <MX_CRC_Init+0x20>)
 800157c:	f000 fd3b 	bl	8001ff6 <HAL_CRC_Init>
 8001580:	4603      	mov	r3, r0
 8001582:	2b00      	cmp	r3, #0
 8001584:	d001      	beq.n	800158a <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8001586:	f000 f99f 	bl	80018c8 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800158a:	bf00      	nop
 800158c:	bd80      	pop	{r7, pc}
 800158e:	bf00      	nop
 8001590:	20001180 	.word	0x20001180
 8001594:	40023000 	.word	0x40023000

08001598 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800159c:	4b17      	ldr	r3, [pc, #92]	; (80015fc <MX_SPI1_Init+0x64>)
 800159e:	4a18      	ldr	r2, [pc, #96]	; (8001600 <MX_SPI1_Init+0x68>)
 80015a0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80015a2:	4b16      	ldr	r3, [pc, #88]	; (80015fc <MX_SPI1_Init+0x64>)
 80015a4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80015a8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80015aa:	4b14      	ldr	r3, [pc, #80]	; (80015fc <MX_SPI1_Init+0x64>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80015b0:	4b12      	ldr	r3, [pc, #72]	; (80015fc <MX_SPI1_Init+0x64>)
 80015b2:	2200      	movs	r2, #0
 80015b4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80015b6:	4b11      	ldr	r3, [pc, #68]	; (80015fc <MX_SPI1_Init+0x64>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80015bc:	4b0f      	ldr	r3, [pc, #60]	; (80015fc <MX_SPI1_Init+0x64>)
 80015be:	2200      	movs	r2, #0
 80015c0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80015c2:	4b0e      	ldr	r3, [pc, #56]	; (80015fc <MX_SPI1_Init+0x64>)
 80015c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015c8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80015ca:	4b0c      	ldr	r3, [pc, #48]	; (80015fc <MX_SPI1_Init+0x64>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80015d0:	4b0a      	ldr	r3, [pc, #40]	; (80015fc <MX_SPI1_Init+0x64>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80015d6:	4b09      	ldr	r3, [pc, #36]	; (80015fc <MX_SPI1_Init+0x64>)
 80015d8:	2200      	movs	r2, #0
 80015da:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80015dc:	4b07      	ldr	r3, [pc, #28]	; (80015fc <MX_SPI1_Init+0x64>)
 80015de:	2200      	movs	r2, #0
 80015e0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80015e2:	4b06      	ldr	r3, [pc, #24]	; (80015fc <MX_SPI1_Init+0x64>)
 80015e4:	220a      	movs	r2, #10
 80015e6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80015e8:	4804      	ldr	r0, [pc, #16]	; (80015fc <MX_SPI1_Init+0x64>)
 80015ea:	f003 f9f3 	bl	80049d4 <HAL_SPI_Init>
 80015ee:	4603      	mov	r3, r0
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d001      	beq.n	80015f8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80015f4:	f000 f968 	bl	80018c8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80015f8:	bf00      	nop
 80015fa:	bd80      	pop	{r7, pc}
 80015fc:	20001188 	.word	0x20001188
 8001600:	40013000 	.word	0x40013000

08001604 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b096      	sub	sp, #88	; 0x58
 8001608:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800160a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800160e:	2200      	movs	r2, #0
 8001610:	601a      	str	r2, [r3, #0]
 8001612:	605a      	str	r2, [r3, #4]
 8001614:	609a      	str	r2, [r3, #8]
 8001616:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001618:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800161c:	2200      	movs	r2, #0
 800161e:	601a      	str	r2, [r3, #0]
 8001620:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001622:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001626:	2200      	movs	r2, #0
 8001628:	601a      	str	r2, [r3, #0]
 800162a:	605a      	str	r2, [r3, #4]
 800162c:	609a      	str	r2, [r3, #8]
 800162e:	60da      	str	r2, [r3, #12]
 8001630:	611a      	str	r2, [r3, #16]
 8001632:	615a      	str	r2, [r3, #20]
 8001634:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001636:	1d3b      	adds	r3, r7, #4
 8001638:	2220      	movs	r2, #32
 800163a:	2100      	movs	r1, #0
 800163c:	4618      	mov	r0, r3
 800163e:	f00b f907 	bl	800c850 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001642:	4b3e      	ldr	r3, [pc, #248]	; (800173c <MX_TIM1_Init+0x138>)
 8001644:	4a3e      	ldr	r2, [pc, #248]	; (8001740 <MX_TIM1_Init+0x13c>)
 8001646:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 3;
 8001648:	4b3c      	ldr	r3, [pc, #240]	; (800173c <MX_TIM1_Init+0x138>)
 800164a:	2203      	movs	r2, #3
 800164c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800164e:	4b3b      	ldr	r3, [pc, #236]	; (800173c <MX_TIM1_Init+0x138>)
 8001650:	2200      	movs	r2, #0
 8001652:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 104;
 8001654:	4b39      	ldr	r3, [pc, #228]	; (800173c <MX_TIM1_Init+0x138>)
 8001656:	2268      	movs	r2, #104	; 0x68
 8001658:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800165a:	4b38      	ldr	r3, [pc, #224]	; (800173c <MX_TIM1_Init+0x138>)
 800165c:	2200      	movs	r2, #0
 800165e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001660:	4b36      	ldr	r3, [pc, #216]	; (800173c <MX_TIM1_Init+0x138>)
 8001662:	2200      	movs	r2, #0
 8001664:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001666:	4b35      	ldr	r3, [pc, #212]	; (800173c <MX_TIM1_Init+0x138>)
 8001668:	2280      	movs	r2, #128	; 0x80
 800166a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800166c:	4833      	ldr	r0, [pc, #204]	; (800173c <MX_TIM1_Init+0x138>)
 800166e:	f004 fb2d 	bl	8005ccc <HAL_TIM_Base_Init>
 8001672:	4603      	mov	r3, r0
 8001674:	2b00      	cmp	r3, #0
 8001676:	d001      	beq.n	800167c <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8001678:	f000 f926 	bl	80018c8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800167c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001680:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001682:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001686:	4619      	mov	r1, r3
 8001688:	482c      	ldr	r0, [pc, #176]	; (800173c <MX_TIM1_Init+0x138>)
 800168a:	f004 ff41 	bl	8006510 <HAL_TIM_ConfigClockSource>
 800168e:	4603      	mov	r3, r0
 8001690:	2b00      	cmp	r3, #0
 8001692:	d001      	beq.n	8001698 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8001694:	f000 f918 	bl	80018c8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001698:	4828      	ldr	r0, [pc, #160]	; (800173c <MX_TIM1_Init+0x138>)
 800169a:	f004 fb66 	bl	8005d6a <HAL_TIM_PWM_Init>
 800169e:	4603      	mov	r3, r0
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d001      	beq.n	80016a8 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 80016a4:	f000 f910 	bl	80018c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016a8:	2300      	movs	r3, #0
 80016aa:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016ac:	2300      	movs	r3, #0
 80016ae:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80016b0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80016b4:	4619      	mov	r1, r3
 80016b6:	4821      	ldr	r0, [pc, #132]	; (800173c <MX_TIM1_Init+0x138>)
 80016b8:	f005 fae6 	bl	8006c88 <HAL_TIMEx_MasterConfigSynchronization>
 80016bc:	4603      	mov	r3, r0
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d001      	beq.n	80016c6 <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 80016c2:	f000 f901 	bl	80018c8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80016c6:	2360      	movs	r3, #96	; 0x60
 80016c8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80016ca:	2300      	movs	r3, #0
 80016cc:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80016ce:	2300      	movs	r3, #0
 80016d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80016d2:	2300      	movs	r3, #0
 80016d4:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80016d6:	2300      	movs	r3, #0
 80016d8:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80016da:	2300      	movs	r3, #0
 80016dc:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80016de:	2300      	movs	r3, #0
 80016e0:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80016e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016e6:	2200      	movs	r2, #0
 80016e8:	4619      	mov	r1, r3
 80016ea:	4814      	ldr	r0, [pc, #80]	; (800173c <MX_TIM1_Init+0x138>)
 80016ec:	f004 fe4e 	bl	800638c <HAL_TIM_PWM_ConfigChannel>
 80016f0:	4603      	mov	r3, r0
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d001      	beq.n	80016fa <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 80016f6:	f000 f8e7 	bl	80018c8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80016fa:	2300      	movs	r3, #0
 80016fc:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80016fe:	2300      	movs	r3, #0
 8001700:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001702:	2300      	movs	r3, #0
 8001704:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001706:	2300      	movs	r3, #0
 8001708:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800170a:	2300      	movs	r3, #0
 800170c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800170e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001712:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001714:	2300      	movs	r3, #0
 8001716:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001718:	1d3b      	adds	r3, r7, #4
 800171a:	4619      	mov	r1, r3
 800171c:	4807      	ldr	r0, [pc, #28]	; (800173c <MX_TIM1_Init+0x138>)
 800171e:	f005 fb21 	bl	8006d64 <HAL_TIMEx_ConfigBreakDeadTime>
 8001722:	4603      	mov	r3, r0
 8001724:	2b00      	cmp	r3, #0
 8001726:	d001      	beq.n	800172c <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8001728:	f000 f8ce 	bl	80018c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800172c:	4803      	ldr	r0, [pc, #12]	; (800173c <MX_TIM1_Init+0x138>)
 800172e:	f000 f9dd 	bl	8001aec <HAL_TIM_MspPostInit>

}
 8001732:	bf00      	nop
 8001734:	3758      	adds	r7, #88	; 0x58
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}
 800173a:	bf00      	nop
 800173c:	20001240 	.word	0x20001240
 8001740:	40010000 	.word	0x40010000

08001744 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b082      	sub	sp, #8
 8001748:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800174a:	2300      	movs	r3, #0
 800174c:	607b      	str	r3, [r7, #4]
 800174e:	4b0c      	ldr	r3, [pc, #48]	; (8001780 <MX_DMA_Init+0x3c>)
 8001750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001752:	4a0b      	ldr	r2, [pc, #44]	; (8001780 <MX_DMA_Init+0x3c>)
 8001754:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001758:	6313      	str	r3, [r2, #48]	; 0x30
 800175a:	4b09      	ldr	r3, [pc, #36]	; (8001780 <MX_DMA_Init+0x3c>)
 800175c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800175e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001762:	607b      	str	r3, [r7, #4]
 8001764:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001766:	2200      	movs	r2, #0
 8001768:	2100      	movs	r1, #0
 800176a:	2038      	movs	r0, #56	; 0x38
 800176c:	f000 fc0d 	bl	8001f8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001770:	2038      	movs	r0, #56	; 0x38
 8001772:	f000 fc26 	bl	8001fc2 <HAL_NVIC_EnableIRQ>

}
 8001776:	bf00      	nop
 8001778:	3708      	adds	r7, #8
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}
 800177e:	bf00      	nop
 8001780:	40023800 	.word	0x40023800

08001784 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b08a      	sub	sp, #40	; 0x28
 8001788:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800178a:	f107 0314 	add.w	r3, r7, #20
 800178e:	2200      	movs	r2, #0
 8001790:	601a      	str	r2, [r3, #0]
 8001792:	605a      	str	r2, [r3, #4]
 8001794:	609a      	str	r2, [r3, #8]
 8001796:	60da      	str	r2, [r3, #12]
 8001798:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800179a:	2300      	movs	r3, #0
 800179c:	613b      	str	r3, [r7, #16]
 800179e:	4b46      	ldr	r3, [pc, #280]	; (80018b8 <MX_GPIO_Init+0x134>)
 80017a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017a2:	4a45      	ldr	r2, [pc, #276]	; (80018b8 <MX_GPIO_Init+0x134>)
 80017a4:	f043 0304 	orr.w	r3, r3, #4
 80017a8:	6313      	str	r3, [r2, #48]	; 0x30
 80017aa:	4b43      	ldr	r3, [pc, #268]	; (80018b8 <MX_GPIO_Init+0x134>)
 80017ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ae:	f003 0304 	and.w	r3, r3, #4
 80017b2:	613b      	str	r3, [r7, #16]
 80017b4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80017b6:	2300      	movs	r3, #0
 80017b8:	60fb      	str	r3, [r7, #12]
 80017ba:	4b3f      	ldr	r3, [pc, #252]	; (80018b8 <MX_GPIO_Init+0x134>)
 80017bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017be:	4a3e      	ldr	r2, [pc, #248]	; (80018b8 <MX_GPIO_Init+0x134>)
 80017c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80017c4:	6313      	str	r3, [r2, #48]	; 0x30
 80017c6:	4b3c      	ldr	r3, [pc, #240]	; (80018b8 <MX_GPIO_Init+0x134>)
 80017c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017ce:	60fb      	str	r3, [r7, #12]
 80017d0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017d2:	2300      	movs	r3, #0
 80017d4:	60bb      	str	r3, [r7, #8]
 80017d6:	4b38      	ldr	r3, [pc, #224]	; (80018b8 <MX_GPIO_Init+0x134>)
 80017d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017da:	4a37      	ldr	r2, [pc, #220]	; (80018b8 <MX_GPIO_Init+0x134>)
 80017dc:	f043 0301 	orr.w	r3, r3, #1
 80017e0:	6313      	str	r3, [r2, #48]	; 0x30
 80017e2:	4b35      	ldr	r3, [pc, #212]	; (80018b8 <MX_GPIO_Init+0x134>)
 80017e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017e6:	f003 0301 	and.w	r3, r3, #1
 80017ea:	60bb      	str	r3, [r7, #8]
 80017ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017ee:	2300      	movs	r3, #0
 80017f0:	607b      	str	r3, [r7, #4]
 80017f2:	4b31      	ldr	r3, [pc, #196]	; (80018b8 <MX_GPIO_Init+0x134>)
 80017f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017f6:	4a30      	ldr	r2, [pc, #192]	; (80018b8 <MX_GPIO_Init+0x134>)
 80017f8:	f043 0302 	orr.w	r3, r3, #2
 80017fc:	6313      	str	r3, [r2, #48]	; 0x30
 80017fe:	4b2e      	ldr	r3, [pc, #184]	; (80018b8 <MX_GPIO_Init+0x134>)
 8001800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001802:	f003 0302 	and.w	r3, r3, #2
 8001806:	607b      	str	r3, [r7, #4]
 8001808:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 800180a:	2201      	movs	r2, #1
 800180c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001810:	482a      	ldr	r0, [pc, #168]	; (80018bc <MX_GPIO_Init+0x138>)
 8001812:	f001 f999 	bl	8002b48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FLASH_CS_GPIO_Port, FLASH_CS_Pin, GPIO_PIN_SET);
 8001816:	2201      	movs	r2, #1
 8001818:	2110      	movs	r1, #16
 800181a:	4829      	ldr	r0, [pc, #164]	; (80018c0 <MX_GPIO_Init+0x13c>)
 800181c:	f001 f994 	bl	8002b48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8001820:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001824:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001826:	2301      	movs	r3, #1
 8001828:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800182a:	2301      	movs	r3, #1
 800182c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800182e:	2300      	movs	r3, #0
 8001830:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001832:	f107 0314 	add.w	r3, r7, #20
 8001836:	4619      	mov	r1, r3
 8001838:	4820      	ldr	r0, [pc, #128]	; (80018bc <MX_GPIO_Init+0x138>)
 800183a:	f000 ffe9 	bl	8002810 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 800183e:	2301      	movs	r3, #1
 8001840:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001842:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8001846:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001848:	2301      	movs	r3, #1
 800184a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 800184c:	f107 0314 	add.w	r3, r7, #20
 8001850:	4619      	mov	r1, r3
 8001852:	481b      	ldr	r0, [pc, #108]	; (80018c0 <MX_GPIO_Init+0x13c>)
 8001854:	f000 ffdc 	bl	8002810 <HAL_GPIO_Init>

  /*Configure GPIO pin : FLASH_CS_Pin */
  GPIO_InitStruct.Pin = FLASH_CS_Pin;
 8001858:	2310      	movs	r3, #16
 800185a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800185c:	2301      	movs	r3, #1
 800185e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001860:	2301      	movs	r3, #1
 8001862:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001864:	2303      	movs	r3, #3
 8001866:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(FLASH_CS_GPIO_Port, &GPIO_InitStruct);
 8001868:	f107 0314 	add.w	r3, r7, #20
 800186c:	4619      	mov	r1, r3
 800186e:	4814      	ldr	r0, [pc, #80]	; (80018c0 <MX_GPIO_Init+0x13c>)
 8001870:	f000 ffce 	bl	8002810 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_DET_Pin */
  GPIO_InitStruct.Pin = USB_DET_Pin;
 8001874:	2340      	movs	r3, #64	; 0x40
 8001876:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001878:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 800187c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800187e:	2302      	movs	r3, #2
 8001880:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USB_DET_GPIO_Port, &GPIO_InitStruct);
 8001882:	f107 0314 	add.w	r3, r7, #20
 8001886:	4619      	mov	r1, r3
 8001888:	480e      	ldr	r0, [pc, #56]	; (80018c4 <MX_GPIO_Init+0x140>)
 800188a:	f000 ffc1 	bl	8002810 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 1, 0);
 800188e:	2200      	movs	r2, #0
 8001890:	2101      	movs	r1, #1
 8001892:	2006      	movs	r0, #6
 8001894:	f000 fb79 	bl	8001f8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001898:	2006      	movs	r0, #6
 800189a:	f000 fb92 	bl	8001fc2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 1, 0);
 800189e:	2200      	movs	r2, #0
 80018a0:	2101      	movs	r1, #1
 80018a2:	2017      	movs	r0, #23
 80018a4:	f000 fb71 	bl	8001f8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80018a8:	2017      	movs	r0, #23
 80018aa:	f000 fb8a 	bl	8001fc2 <HAL_NVIC_EnableIRQ>

}
 80018ae:	bf00      	nop
 80018b0:	3728      	adds	r7, #40	; 0x28
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bd80      	pop	{r7, pc}
 80018b6:	bf00      	nop
 80018b8:	40023800 	.word	0x40023800
 80018bc:	40020800 	.word	0x40020800
 80018c0:	40020000 	.word	0x40020000
 80018c4:	40020400 	.word	0x40020400

080018c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018c8:	b480      	push	{r7}
 80018ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018cc:	b672      	cpsid	i
}
 80018ce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80018d0:	e7fe      	b.n	80018d0 <Error_Handler+0x8>
	...

080018d4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018d4:	b480      	push	{r7}
 80018d6:	b083      	sub	sp, #12
 80018d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018da:	2300      	movs	r3, #0
 80018dc:	607b      	str	r3, [r7, #4]
 80018de:	4b10      	ldr	r3, [pc, #64]	; (8001920 <HAL_MspInit+0x4c>)
 80018e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018e2:	4a0f      	ldr	r2, [pc, #60]	; (8001920 <HAL_MspInit+0x4c>)
 80018e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018e8:	6453      	str	r3, [r2, #68]	; 0x44
 80018ea:	4b0d      	ldr	r3, [pc, #52]	; (8001920 <HAL_MspInit+0x4c>)
 80018ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018f2:	607b      	str	r3, [r7, #4]
 80018f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018f6:	2300      	movs	r3, #0
 80018f8:	603b      	str	r3, [r7, #0]
 80018fa:	4b09      	ldr	r3, [pc, #36]	; (8001920 <HAL_MspInit+0x4c>)
 80018fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018fe:	4a08      	ldr	r2, [pc, #32]	; (8001920 <HAL_MspInit+0x4c>)
 8001900:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001904:	6413      	str	r3, [r2, #64]	; 0x40
 8001906:	4b06      	ldr	r3, [pc, #24]	; (8001920 <HAL_MspInit+0x4c>)
 8001908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800190a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800190e:	603b      	str	r3, [r7, #0]
 8001910:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001912:	bf00      	nop
 8001914:	370c      	adds	r7, #12
 8001916:	46bd      	mov	sp, r7
 8001918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191c:	4770      	bx	lr
 800191e:	bf00      	nop
 8001920:	40023800 	.word	0x40023800

08001924 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001924:	b480      	push	{r7}
 8001926:	b085      	sub	sp, #20
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	4a0b      	ldr	r2, [pc, #44]	; (8001960 <HAL_CRC_MspInit+0x3c>)
 8001932:	4293      	cmp	r3, r2
 8001934:	d10d      	bne.n	8001952 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001936:	2300      	movs	r3, #0
 8001938:	60fb      	str	r3, [r7, #12]
 800193a:	4b0a      	ldr	r3, [pc, #40]	; (8001964 <HAL_CRC_MspInit+0x40>)
 800193c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800193e:	4a09      	ldr	r2, [pc, #36]	; (8001964 <HAL_CRC_MspInit+0x40>)
 8001940:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001944:	6313      	str	r3, [r2, #48]	; 0x30
 8001946:	4b07      	ldr	r3, [pc, #28]	; (8001964 <HAL_CRC_MspInit+0x40>)
 8001948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800194a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800194e:	60fb      	str	r3, [r7, #12]
 8001950:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8001952:	bf00      	nop
 8001954:	3714      	adds	r7, #20
 8001956:	46bd      	mov	sp, r7
 8001958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195c:	4770      	bx	lr
 800195e:	bf00      	nop
 8001960:	40023000 	.word	0x40023000
 8001964:	40023800 	.word	0x40023800

08001968 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b08a      	sub	sp, #40	; 0x28
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001970:	f107 0314 	add.w	r3, r7, #20
 8001974:	2200      	movs	r2, #0
 8001976:	601a      	str	r2, [r3, #0]
 8001978:	605a      	str	r2, [r3, #4]
 800197a:	609a      	str	r2, [r3, #8]
 800197c:	60da      	str	r2, [r3, #12]
 800197e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	4a34      	ldr	r2, [pc, #208]	; (8001a58 <HAL_SPI_MspInit+0xf0>)
 8001986:	4293      	cmp	r3, r2
 8001988:	d161      	bne.n	8001a4e <HAL_SPI_MspInit+0xe6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800198a:	2300      	movs	r3, #0
 800198c:	613b      	str	r3, [r7, #16]
 800198e:	4b33      	ldr	r3, [pc, #204]	; (8001a5c <HAL_SPI_MspInit+0xf4>)
 8001990:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001992:	4a32      	ldr	r2, [pc, #200]	; (8001a5c <HAL_SPI_MspInit+0xf4>)
 8001994:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001998:	6453      	str	r3, [r2, #68]	; 0x44
 800199a:	4b30      	ldr	r3, [pc, #192]	; (8001a5c <HAL_SPI_MspInit+0xf4>)
 800199c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800199e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80019a2:	613b      	str	r3, [r7, #16]
 80019a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019a6:	2300      	movs	r3, #0
 80019a8:	60fb      	str	r3, [r7, #12]
 80019aa:	4b2c      	ldr	r3, [pc, #176]	; (8001a5c <HAL_SPI_MspInit+0xf4>)
 80019ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ae:	4a2b      	ldr	r2, [pc, #172]	; (8001a5c <HAL_SPI_MspInit+0xf4>)
 80019b0:	f043 0301 	orr.w	r3, r3, #1
 80019b4:	6313      	str	r3, [r2, #48]	; 0x30
 80019b6:	4b29      	ldr	r3, [pc, #164]	; (8001a5c <HAL_SPI_MspInit+0xf4>)
 80019b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ba:	f003 0301 	and.w	r3, r3, #1
 80019be:	60fb      	str	r3, [r7, #12]
 80019c0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = FLASH_SCK_Pin|FLASH_MISO_Pin|FLASH_MOSI_Pin;
 80019c2:	23e0      	movs	r3, #224	; 0xe0
 80019c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019c6:	2302      	movs	r3, #2
 80019c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80019ca:	2301      	movs	r3, #1
 80019cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019ce:	2303      	movs	r3, #3
 80019d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80019d2:	2305      	movs	r3, #5
 80019d4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019d6:	f107 0314 	add.w	r3, r7, #20
 80019da:	4619      	mov	r1, r3
 80019dc:	4820      	ldr	r0, [pc, #128]	; (8001a60 <HAL_SPI_MspInit+0xf8>)
 80019de:	f000 ff17 	bl	8002810 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream0;
 80019e2:	4b20      	ldr	r3, [pc, #128]	; (8001a64 <HAL_SPI_MspInit+0xfc>)
 80019e4:	4a20      	ldr	r2, [pc, #128]	; (8001a68 <HAL_SPI_MspInit+0x100>)
 80019e6:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 80019e8:	4b1e      	ldr	r3, [pc, #120]	; (8001a64 <HAL_SPI_MspInit+0xfc>)
 80019ea:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 80019ee:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80019f0:	4b1c      	ldr	r3, [pc, #112]	; (8001a64 <HAL_SPI_MspInit+0xfc>)
 80019f2:	2200      	movs	r2, #0
 80019f4:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80019f6:	4b1b      	ldr	r3, [pc, #108]	; (8001a64 <HAL_SPI_MspInit+0xfc>)
 80019f8:	2200      	movs	r2, #0
 80019fa:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80019fc:	4b19      	ldr	r3, [pc, #100]	; (8001a64 <HAL_SPI_MspInit+0xfc>)
 80019fe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001a02:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001a04:	4b17      	ldr	r3, [pc, #92]	; (8001a64 <HAL_SPI_MspInit+0xfc>)
 8001a06:	2200      	movs	r2, #0
 8001a08:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001a0a:	4b16      	ldr	r3, [pc, #88]	; (8001a64 <HAL_SPI_MspInit+0xfc>)
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8001a10:	4b14      	ldr	r3, [pc, #80]	; (8001a64 <HAL_SPI_MspInit+0xfc>)
 8001a12:	2200      	movs	r2, #0
 8001a14:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001a16:	4b13      	ldr	r3, [pc, #76]	; (8001a64 <HAL_SPI_MspInit+0xfc>)
 8001a18:	2200      	movs	r2, #0
 8001a1a:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001a1c:	4b11      	ldr	r3, [pc, #68]	; (8001a64 <HAL_SPI_MspInit+0xfc>)
 8001a1e:	2200      	movs	r2, #0
 8001a20:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8001a22:	4810      	ldr	r0, [pc, #64]	; (8001a64 <HAL_SPI_MspInit+0xfc>)
 8001a24:	f000 fb62 	bl	80020ec <HAL_DMA_Init>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d001      	beq.n	8001a32 <HAL_SPI_MspInit+0xca>
    {
      Error_Handler();
 8001a2e:	f7ff ff4b 	bl	80018c8 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	4a0b      	ldr	r2, [pc, #44]	; (8001a64 <HAL_SPI_MspInit+0xfc>)
 8001a36:	64da      	str	r2, [r3, #76]	; 0x4c
 8001a38:	4a0a      	ldr	r2, [pc, #40]	; (8001a64 <HAL_SPI_MspInit+0xfc>)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8001a3e:	2200      	movs	r2, #0
 8001a40:	2100      	movs	r1, #0
 8001a42:	2023      	movs	r0, #35	; 0x23
 8001a44:	f000 faa1 	bl	8001f8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8001a48:	2023      	movs	r0, #35	; 0x23
 8001a4a:	f000 faba 	bl	8001fc2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001a4e:	bf00      	nop
 8001a50:	3728      	adds	r7, #40	; 0x28
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}
 8001a56:	bf00      	nop
 8001a58:	40013000 	.word	0x40013000
 8001a5c:	40023800 	.word	0x40023800
 8001a60:	40020000 	.word	0x40020000
 8001a64:	200011e0 	.word	0x200011e0
 8001a68:	40026410 	.word	0x40026410

08001a6c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b084      	sub	sp, #16
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	4a1a      	ldr	r2, [pc, #104]	; (8001ae4 <HAL_TIM_Base_MspInit+0x78>)
 8001a7a:	4293      	cmp	r3, r2
 8001a7c:	d12d      	bne.n	8001ada <HAL_TIM_Base_MspInit+0x6e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001a7e:	2300      	movs	r3, #0
 8001a80:	60fb      	str	r3, [r7, #12]
 8001a82:	4b19      	ldr	r3, [pc, #100]	; (8001ae8 <HAL_TIM_Base_MspInit+0x7c>)
 8001a84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a86:	4a18      	ldr	r2, [pc, #96]	; (8001ae8 <HAL_TIM_Base_MspInit+0x7c>)
 8001a88:	f043 0301 	orr.w	r3, r3, #1
 8001a8c:	6453      	str	r3, [r2, #68]	; 0x44
 8001a8e:	4b16      	ldr	r3, [pc, #88]	; (8001ae8 <HAL_TIM_Base_MspInit+0x7c>)
 8001a90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a92:	f003 0301 	and.w	r3, r3, #1
 8001a96:	60fb      	str	r3, [r7, #12]
 8001a98:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	2100      	movs	r1, #0
 8001a9e:	2018      	movs	r0, #24
 8001aa0:	f000 fa73 	bl	8001f8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8001aa4:	2018      	movs	r0, #24
 8001aa6:	f000 fa8c 	bl	8001fc2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8001aaa:	2200      	movs	r2, #0
 8001aac:	2100      	movs	r1, #0
 8001aae:	2019      	movs	r0, #25
 8001ab0:	f000 fa6b 	bl	8001f8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001ab4:	2019      	movs	r0, #25
 8001ab6:	f000 fa84 	bl	8001fc2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8001aba:	2200      	movs	r2, #0
 8001abc:	2100      	movs	r1, #0
 8001abe:	201a      	movs	r0, #26
 8001ac0:	f000 fa63 	bl	8001f8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8001ac4:	201a      	movs	r0, #26
 8001ac6:	f000 fa7c 	bl	8001fc2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8001aca:	2200      	movs	r2, #0
 8001acc:	2100      	movs	r1, #0
 8001ace:	201b      	movs	r0, #27
 8001ad0:	f000 fa5b 	bl	8001f8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001ad4:	201b      	movs	r0, #27
 8001ad6:	f000 fa74 	bl	8001fc2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001ada:	bf00      	nop
 8001adc:	3710      	adds	r7, #16
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}
 8001ae2:	bf00      	nop
 8001ae4:	40010000 	.word	0x40010000
 8001ae8:	40023800 	.word	0x40023800

08001aec <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b088      	sub	sp, #32
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001af4:	f107 030c 	add.w	r3, r7, #12
 8001af8:	2200      	movs	r2, #0
 8001afa:	601a      	str	r2, [r3, #0]
 8001afc:	605a      	str	r2, [r3, #4]
 8001afe:	609a      	str	r2, [r3, #8]
 8001b00:	60da      	str	r2, [r3, #12]
 8001b02:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	4a12      	ldr	r2, [pc, #72]	; (8001b54 <HAL_TIM_MspPostInit+0x68>)
 8001b0a:	4293      	cmp	r3, r2
 8001b0c:	d11e      	bne.n	8001b4c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b0e:	2300      	movs	r3, #0
 8001b10:	60bb      	str	r3, [r7, #8]
 8001b12:	4b11      	ldr	r3, [pc, #68]	; (8001b58 <HAL_TIM_MspPostInit+0x6c>)
 8001b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b16:	4a10      	ldr	r2, [pc, #64]	; (8001b58 <HAL_TIM_MspPostInit+0x6c>)
 8001b18:	f043 0301 	orr.w	r3, r3, #1
 8001b1c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b1e:	4b0e      	ldr	r3, [pc, #56]	; (8001b58 <HAL_TIM_MspPostInit+0x6c>)
 8001b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b22:	f003 0301 	and.w	r3, r3, #1
 8001b26:	60bb      	str	r3, [r7, #8]
 8001b28:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = LED_STRIPE_Pin;
 8001b2a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b2e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b30:	2302      	movs	r3, #2
 8001b32:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001b34:	2302      	movs	r3, #2
 8001b36:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b38:	2303      	movs	r3, #3
 8001b3a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001b3c:	2301      	movs	r3, #1
 8001b3e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(LED_STRIPE_GPIO_Port, &GPIO_InitStruct);
 8001b40:	f107 030c 	add.w	r3, r7, #12
 8001b44:	4619      	mov	r1, r3
 8001b46:	4805      	ldr	r0, [pc, #20]	; (8001b5c <HAL_TIM_MspPostInit+0x70>)
 8001b48:	f000 fe62 	bl	8002810 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001b4c:	bf00      	nop
 8001b4e:	3720      	adds	r7, #32
 8001b50:	46bd      	mov	sp, r7
 8001b52:	bd80      	pop	{r7, pc}
 8001b54:	40010000 	.word	0x40010000
 8001b58:	40023800 	.word	0x40023800
 8001b5c:	40020000 	.word	0x40020000

08001b60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b60:	b480      	push	{r7}
 8001b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001b64:	e7fe      	b.n	8001b64 <NMI_Handler+0x4>

08001b66 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b66:	b480      	push	{r7}
 8001b68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b6a:	e7fe      	b.n	8001b6a <HardFault_Handler+0x4>

08001b6c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b70:	e7fe      	b.n	8001b70 <MemManage_Handler+0x4>

08001b72 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b72:	b480      	push	{r7}
 8001b74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b76:	e7fe      	b.n	8001b76 <BusFault_Handler+0x4>

08001b78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b7c:	e7fe      	b.n	8001b7c <UsageFault_Handler+0x4>

08001b7e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b7e:	b480      	push	{r7}
 8001b80:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b82:	bf00      	nop
 8001b84:	46bd      	mov	sp, r7
 8001b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8a:	4770      	bx	lr

08001b8c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b90:	bf00      	nop
 8001b92:	46bd      	mov	sp, r7
 8001b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b98:	4770      	bx	lr

08001b9a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b9a:	b480      	push	{r7}
 8001b9c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b9e:	bf00      	nop
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba6:	4770      	bx	lr

08001ba8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001bac:	f000 f8ce 	bl	8001d4c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001bb0:	bf00      	nop
 8001bb2:	bd80      	pop	{r7, pc}

08001bb4 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_Pin);
 8001bb8:	2001      	movs	r0, #1
 8001bba:	f000 ffdf 	bl	8002b7c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001bbe:	bf00      	nop
 8001bc0:	bd80      	pop	{r7, pc}

08001bc2 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001bc2:	b580      	push	{r7, lr}
 8001bc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USB_DET_Pin);
 8001bc6:	2040      	movs	r0, #64	; 0x40
 8001bc8:	f000 ffd8 	bl	8002b7c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001bcc:	bf00      	nop
 8001bce:	bd80      	pop	{r7, pc}

08001bd0 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001bd4:	4802      	ldr	r0, [pc, #8]	; (8001be0 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 8001bd6:	f004 fad1 	bl	800617c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8001bda:	bf00      	nop
 8001bdc:	bd80      	pop	{r7, pc}
 8001bde:	bf00      	nop
 8001be0:	20001240 	.word	0x20001240

08001be4 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001be8:	4802      	ldr	r0, [pc, #8]	; (8001bf4 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001bea:	f004 fac7 	bl	800617c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001bee:	bf00      	nop
 8001bf0:	bd80      	pop	{r7, pc}
 8001bf2:	bf00      	nop
 8001bf4:	20001240 	.word	0x20001240

08001bf8 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001bfc:	4802      	ldr	r0, [pc, #8]	; (8001c08 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8001bfe:	f004 fabd 	bl	800617c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8001c02:	bf00      	nop
 8001c04:	bd80      	pop	{r7, pc}
 8001c06:	bf00      	nop
 8001c08:	20001240 	.word	0x20001240

08001c0c <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001c10:	4802      	ldr	r0, [pc, #8]	; (8001c1c <TIM1_CC_IRQHandler+0x10>)
 8001c12:	f004 fab3 	bl	800617c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8001c16:	bf00      	nop
 8001c18:	bd80      	pop	{r7, pc}
 8001c1a:	bf00      	nop
 8001c1c:	20001240 	.word	0x20001240

08001c20 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001c24:	4802      	ldr	r0, [pc, #8]	; (8001c30 <SPI1_IRQHandler+0x10>)
 8001c26:	f003 fd17 	bl	8005658 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8001c2a:	bf00      	nop
 8001c2c:	bd80      	pop	{r7, pc}
 8001c2e:	bf00      	nop
 8001c30:	20001188 	.word	0x20001188

08001c34 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8001c38:	4802      	ldr	r0, [pc, #8]	; (8001c44 <DMA2_Stream0_IRQHandler+0x10>)
 8001c3a:	f000 fb7f 	bl	800233c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001c3e:	bf00      	nop
 8001c40:	bd80      	pop	{r7, pc}
 8001c42:	bf00      	nop
 8001c44:	200011e0 	.word	0x200011e0

08001c48 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001c4c:	4802      	ldr	r0, [pc, #8]	; (8001c58 <OTG_FS_IRQHandler+0x10>)
 8001c4e:	f001 f936 	bl	8002ebe <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001c52:	bf00      	nop
 8001c54:	bd80      	pop	{r7, pc}
 8001c56:	bf00      	nop
 8001c58:	2000176c 	.word	0x2000176c

08001c5c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c60:	4b06      	ldr	r3, [pc, #24]	; (8001c7c <SystemInit+0x20>)
 8001c62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c66:	4a05      	ldr	r2, [pc, #20]	; (8001c7c <SystemInit+0x20>)
 8001c68:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001c6c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c70:	bf00      	nop
 8001c72:	46bd      	mov	sp, r7
 8001c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c78:	4770      	bx	lr
 8001c7a:	bf00      	nop
 8001c7c:	e000ed00 	.word	0xe000ed00

08001c80 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001c80:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001cb8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001c84:	480d      	ldr	r0, [pc, #52]	; (8001cbc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001c86:	490e      	ldr	r1, [pc, #56]	; (8001cc0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001c88:	4a0e      	ldr	r2, [pc, #56]	; (8001cc4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001c8a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c8c:	e002      	b.n	8001c94 <LoopCopyDataInit>

08001c8e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c8e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c90:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c92:	3304      	adds	r3, #4

08001c94 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c94:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c96:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c98:	d3f9      	bcc.n	8001c8e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c9a:	4a0b      	ldr	r2, [pc, #44]	; (8001cc8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001c9c:	4c0b      	ldr	r4, [pc, #44]	; (8001ccc <LoopFillZerobss+0x26>)
  movs r3, #0
 8001c9e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ca0:	e001      	b.n	8001ca6 <LoopFillZerobss>

08001ca2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ca2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ca4:	3204      	adds	r2, #4

08001ca6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ca6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ca8:	d3fb      	bcc.n	8001ca2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001caa:	f7ff ffd7 	bl	8001c5c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001cae:	f00a fdab 	bl	800c808 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001cb2:	f7ff fbda 	bl	800146a <main>
  bx  lr    
 8001cb6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001cb8:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001cbc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001cc0:	20000128 	.word	0x20000128
  ldr r2, =_sidata
 8001cc4:	0800c900 	.word	0x0800c900
  ldr r2, =_sbss
 8001cc8:	20000128 	.word	0x20000128
  ldr r4, =_ebss
 8001ccc:	20002cf0 	.word	0x20002cf0

08001cd0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001cd0:	e7fe      	b.n	8001cd0 <ADC_IRQHandler>

08001cd2 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001cd2:	b580      	push	{r7, lr}
 8001cd4:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001cd6:	2003      	movs	r0, #3
 8001cd8:	f000 f94c 	bl	8001f74 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001cdc:	200f      	movs	r0, #15
 8001cde:	f000 f805 	bl	8001cec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ce2:	f7ff fdf7 	bl	80018d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ce6:	2300      	movs	r3, #0
}
 8001ce8:	4618      	mov	r0, r3
 8001cea:	bd80      	pop	{r7, pc}

08001cec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b082      	sub	sp, #8
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001cf4:	4b12      	ldr	r3, [pc, #72]	; (8001d40 <HAL_InitTick+0x54>)
 8001cf6:	681a      	ldr	r2, [r3, #0]
 8001cf8:	4b12      	ldr	r3, [pc, #72]	; (8001d44 <HAL_InitTick+0x58>)
 8001cfa:	781b      	ldrb	r3, [r3, #0]
 8001cfc:	4619      	mov	r1, r3
 8001cfe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d02:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d06:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	f000 f967 	bl	8001fde <HAL_SYSTICK_Config>
 8001d10:	4603      	mov	r3, r0
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d001      	beq.n	8001d1a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001d16:	2301      	movs	r3, #1
 8001d18:	e00e      	b.n	8001d38 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	2b0f      	cmp	r3, #15
 8001d1e:	d80a      	bhi.n	8001d36 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d20:	2200      	movs	r2, #0
 8001d22:	6879      	ldr	r1, [r7, #4]
 8001d24:	f04f 30ff 	mov.w	r0, #4294967295
 8001d28:	f000 f92f 	bl	8001f8a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d2c:	4a06      	ldr	r2, [pc, #24]	; (8001d48 <HAL_InitTick+0x5c>)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d32:	2300      	movs	r3, #0
 8001d34:	e000      	b.n	8001d38 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001d36:	2301      	movs	r3, #1
}
 8001d38:	4618      	mov	r0, r3
 8001d3a:	3708      	adds	r7, #8
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	bd80      	pop	{r7, pc}
 8001d40:	20000004 	.word	0x20000004
 8001d44:	2000000c 	.word	0x2000000c
 8001d48:	20000008 	.word	0x20000008

08001d4c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d50:	4b06      	ldr	r3, [pc, #24]	; (8001d6c <HAL_IncTick+0x20>)
 8001d52:	781b      	ldrb	r3, [r3, #0]
 8001d54:	461a      	mov	r2, r3
 8001d56:	4b06      	ldr	r3, [pc, #24]	; (8001d70 <HAL_IncTick+0x24>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	4413      	add	r3, r2
 8001d5c:	4a04      	ldr	r2, [pc, #16]	; (8001d70 <HAL_IncTick+0x24>)
 8001d5e:	6013      	str	r3, [r2, #0]
}
 8001d60:	bf00      	nop
 8001d62:	46bd      	mov	sp, r7
 8001d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d68:	4770      	bx	lr
 8001d6a:	bf00      	nop
 8001d6c:	2000000c 	.word	0x2000000c
 8001d70:	20001288 	.word	0x20001288

08001d74 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d74:	b480      	push	{r7}
 8001d76:	af00      	add	r7, sp, #0
  return uwTick;
 8001d78:	4b03      	ldr	r3, [pc, #12]	; (8001d88 <HAL_GetTick+0x14>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
}
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d84:	4770      	bx	lr
 8001d86:	bf00      	nop
 8001d88:	20001288 	.word	0x20001288

08001d8c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b084      	sub	sp, #16
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d94:	f7ff ffee 	bl	8001d74 <HAL_GetTick>
 8001d98:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001da4:	d005      	beq.n	8001db2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001da6:	4b0a      	ldr	r3, [pc, #40]	; (8001dd0 <HAL_Delay+0x44>)
 8001da8:	781b      	ldrb	r3, [r3, #0]
 8001daa:	461a      	mov	r2, r3
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	4413      	add	r3, r2
 8001db0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001db2:	bf00      	nop
 8001db4:	f7ff ffde 	bl	8001d74 <HAL_GetTick>
 8001db8:	4602      	mov	r2, r0
 8001dba:	68bb      	ldr	r3, [r7, #8]
 8001dbc:	1ad3      	subs	r3, r2, r3
 8001dbe:	68fa      	ldr	r2, [r7, #12]
 8001dc0:	429a      	cmp	r2, r3
 8001dc2:	d8f7      	bhi.n	8001db4 <HAL_Delay+0x28>
  {
  }
}
 8001dc4:	bf00      	nop
 8001dc6:	bf00      	nop
 8001dc8:	3710      	adds	r7, #16
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}
 8001dce:	bf00      	nop
 8001dd0:	2000000c 	.word	0x2000000c

08001dd4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	b085      	sub	sp, #20
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	f003 0307 	and.w	r3, r3, #7
 8001de2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001de4:	4b0c      	ldr	r3, [pc, #48]	; (8001e18 <__NVIC_SetPriorityGrouping+0x44>)
 8001de6:	68db      	ldr	r3, [r3, #12]
 8001de8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001dea:	68ba      	ldr	r2, [r7, #8]
 8001dec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001df0:	4013      	ands	r3, r2
 8001df2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001df8:	68bb      	ldr	r3, [r7, #8]
 8001dfa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001dfc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001e00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e04:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e06:	4a04      	ldr	r2, [pc, #16]	; (8001e18 <__NVIC_SetPriorityGrouping+0x44>)
 8001e08:	68bb      	ldr	r3, [r7, #8]
 8001e0a:	60d3      	str	r3, [r2, #12]
}
 8001e0c:	bf00      	nop
 8001e0e:	3714      	adds	r7, #20
 8001e10:	46bd      	mov	sp, r7
 8001e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e16:	4770      	bx	lr
 8001e18:	e000ed00 	.word	0xe000ed00

08001e1c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e20:	4b04      	ldr	r3, [pc, #16]	; (8001e34 <__NVIC_GetPriorityGrouping+0x18>)
 8001e22:	68db      	ldr	r3, [r3, #12]
 8001e24:	0a1b      	lsrs	r3, r3, #8
 8001e26:	f003 0307 	and.w	r3, r3, #7
}
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e32:	4770      	bx	lr
 8001e34:	e000ed00 	.word	0xe000ed00

08001e38 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	b083      	sub	sp, #12
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	4603      	mov	r3, r0
 8001e40:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	db0b      	blt.n	8001e62 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e4a:	79fb      	ldrb	r3, [r7, #7]
 8001e4c:	f003 021f 	and.w	r2, r3, #31
 8001e50:	4907      	ldr	r1, [pc, #28]	; (8001e70 <__NVIC_EnableIRQ+0x38>)
 8001e52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e56:	095b      	lsrs	r3, r3, #5
 8001e58:	2001      	movs	r0, #1
 8001e5a:	fa00 f202 	lsl.w	r2, r0, r2
 8001e5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001e62:	bf00      	nop
 8001e64:	370c      	adds	r7, #12
 8001e66:	46bd      	mov	sp, r7
 8001e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6c:	4770      	bx	lr
 8001e6e:	bf00      	nop
 8001e70:	e000e100 	.word	0xe000e100

08001e74 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e74:	b480      	push	{r7}
 8001e76:	b083      	sub	sp, #12
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	6039      	str	r1, [r7, #0]
 8001e7e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	db0a      	blt.n	8001e9e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	b2da      	uxtb	r2, r3
 8001e8c:	490c      	ldr	r1, [pc, #48]	; (8001ec0 <__NVIC_SetPriority+0x4c>)
 8001e8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e92:	0112      	lsls	r2, r2, #4
 8001e94:	b2d2      	uxtb	r2, r2
 8001e96:	440b      	add	r3, r1
 8001e98:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e9c:	e00a      	b.n	8001eb4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	b2da      	uxtb	r2, r3
 8001ea2:	4908      	ldr	r1, [pc, #32]	; (8001ec4 <__NVIC_SetPriority+0x50>)
 8001ea4:	79fb      	ldrb	r3, [r7, #7]
 8001ea6:	f003 030f 	and.w	r3, r3, #15
 8001eaa:	3b04      	subs	r3, #4
 8001eac:	0112      	lsls	r2, r2, #4
 8001eae:	b2d2      	uxtb	r2, r2
 8001eb0:	440b      	add	r3, r1
 8001eb2:	761a      	strb	r2, [r3, #24]
}
 8001eb4:	bf00      	nop
 8001eb6:	370c      	adds	r7, #12
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebe:	4770      	bx	lr
 8001ec0:	e000e100 	.word	0xe000e100
 8001ec4:	e000ed00 	.word	0xe000ed00

08001ec8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	b089      	sub	sp, #36	; 0x24
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	60f8      	str	r0, [r7, #12]
 8001ed0:	60b9      	str	r1, [r7, #8]
 8001ed2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	f003 0307 	and.w	r3, r3, #7
 8001eda:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001edc:	69fb      	ldr	r3, [r7, #28]
 8001ede:	f1c3 0307 	rsb	r3, r3, #7
 8001ee2:	2b04      	cmp	r3, #4
 8001ee4:	bf28      	it	cs
 8001ee6:	2304      	movcs	r3, #4
 8001ee8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001eea:	69fb      	ldr	r3, [r7, #28]
 8001eec:	3304      	adds	r3, #4
 8001eee:	2b06      	cmp	r3, #6
 8001ef0:	d902      	bls.n	8001ef8 <NVIC_EncodePriority+0x30>
 8001ef2:	69fb      	ldr	r3, [r7, #28]
 8001ef4:	3b03      	subs	r3, #3
 8001ef6:	e000      	b.n	8001efa <NVIC_EncodePriority+0x32>
 8001ef8:	2300      	movs	r3, #0
 8001efa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001efc:	f04f 32ff 	mov.w	r2, #4294967295
 8001f00:	69bb      	ldr	r3, [r7, #24]
 8001f02:	fa02 f303 	lsl.w	r3, r2, r3
 8001f06:	43da      	mvns	r2, r3
 8001f08:	68bb      	ldr	r3, [r7, #8]
 8001f0a:	401a      	ands	r2, r3
 8001f0c:	697b      	ldr	r3, [r7, #20]
 8001f0e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f10:	f04f 31ff 	mov.w	r1, #4294967295
 8001f14:	697b      	ldr	r3, [r7, #20]
 8001f16:	fa01 f303 	lsl.w	r3, r1, r3
 8001f1a:	43d9      	mvns	r1, r3
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f20:	4313      	orrs	r3, r2
         );
}
 8001f22:	4618      	mov	r0, r3
 8001f24:	3724      	adds	r7, #36	; 0x24
 8001f26:	46bd      	mov	sp, r7
 8001f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2c:	4770      	bx	lr
	...

08001f30 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b082      	sub	sp, #8
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	3b01      	subs	r3, #1
 8001f3c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f40:	d301      	bcc.n	8001f46 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f42:	2301      	movs	r3, #1
 8001f44:	e00f      	b.n	8001f66 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f46:	4a0a      	ldr	r2, [pc, #40]	; (8001f70 <SysTick_Config+0x40>)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	3b01      	subs	r3, #1
 8001f4c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f4e:	210f      	movs	r1, #15
 8001f50:	f04f 30ff 	mov.w	r0, #4294967295
 8001f54:	f7ff ff8e 	bl	8001e74 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f58:	4b05      	ldr	r3, [pc, #20]	; (8001f70 <SysTick_Config+0x40>)
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f5e:	4b04      	ldr	r3, [pc, #16]	; (8001f70 <SysTick_Config+0x40>)
 8001f60:	2207      	movs	r2, #7
 8001f62:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f64:	2300      	movs	r3, #0
}
 8001f66:	4618      	mov	r0, r3
 8001f68:	3708      	adds	r7, #8
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	bd80      	pop	{r7, pc}
 8001f6e:	bf00      	nop
 8001f70:	e000e010 	.word	0xe000e010

08001f74 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b082      	sub	sp, #8
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f7c:	6878      	ldr	r0, [r7, #4]
 8001f7e:	f7ff ff29 	bl	8001dd4 <__NVIC_SetPriorityGrouping>
}
 8001f82:	bf00      	nop
 8001f84:	3708      	adds	r7, #8
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bd80      	pop	{r7, pc}

08001f8a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f8a:	b580      	push	{r7, lr}
 8001f8c:	b086      	sub	sp, #24
 8001f8e:	af00      	add	r7, sp, #0
 8001f90:	4603      	mov	r3, r0
 8001f92:	60b9      	str	r1, [r7, #8]
 8001f94:	607a      	str	r2, [r7, #4]
 8001f96:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f98:	2300      	movs	r3, #0
 8001f9a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f9c:	f7ff ff3e 	bl	8001e1c <__NVIC_GetPriorityGrouping>
 8001fa0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001fa2:	687a      	ldr	r2, [r7, #4]
 8001fa4:	68b9      	ldr	r1, [r7, #8]
 8001fa6:	6978      	ldr	r0, [r7, #20]
 8001fa8:	f7ff ff8e 	bl	8001ec8 <NVIC_EncodePriority>
 8001fac:	4602      	mov	r2, r0
 8001fae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001fb2:	4611      	mov	r1, r2
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	f7ff ff5d 	bl	8001e74 <__NVIC_SetPriority>
}
 8001fba:	bf00      	nop
 8001fbc:	3718      	adds	r7, #24
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bd80      	pop	{r7, pc}

08001fc2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fc2:	b580      	push	{r7, lr}
 8001fc4:	b082      	sub	sp, #8
 8001fc6:	af00      	add	r7, sp, #0
 8001fc8:	4603      	mov	r3, r0
 8001fca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001fcc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	f7ff ff31 	bl	8001e38 <__NVIC_EnableIRQ>
}
 8001fd6:	bf00      	nop
 8001fd8:	3708      	adds	r7, #8
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bd80      	pop	{r7, pc}

08001fde <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001fde:	b580      	push	{r7, lr}
 8001fe0:	b082      	sub	sp, #8
 8001fe2:	af00      	add	r7, sp, #0
 8001fe4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001fe6:	6878      	ldr	r0, [r7, #4]
 8001fe8:	f7ff ffa2 	bl	8001f30 <SysTick_Config>
 8001fec:	4603      	mov	r3, r0
}
 8001fee:	4618      	mov	r0, r3
 8001ff0:	3708      	adds	r7, #8
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bd80      	pop	{r7, pc}

08001ff6 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001ff6:	b580      	push	{r7, lr}
 8001ff8:	b082      	sub	sp, #8
 8001ffa:	af00      	add	r7, sp, #0
 8001ffc:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	2b00      	cmp	r3, #0
 8002002:	d101      	bne.n	8002008 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8002004:	2301      	movs	r3, #1
 8002006:	e00e      	b.n	8002026 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	795b      	ldrb	r3, [r3, #5]
 800200c:	b2db      	uxtb	r3, r3
 800200e:	2b00      	cmp	r3, #0
 8002010:	d105      	bne.n	800201e <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	2200      	movs	r2, #0
 8002016:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8002018:	6878      	ldr	r0, [r7, #4]
 800201a:	f7ff fc83 	bl	8001924 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	2201      	movs	r2, #1
 8002022:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002024:	2300      	movs	r3, #0
}
 8002026:	4618      	mov	r0, r3
 8002028:	3708      	adds	r7, #8
 800202a:	46bd      	mov	sp, r7
 800202c:	bd80      	pop	{r7, pc}

0800202e <HAL_CRC_Accumulate>:
  * @param  pBuffer pointer to the input data buffer.
  * @param  BufferLength input data buffer length (number of uint32_t words).
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Accumulate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 800202e:	b480      	push	{r7}
 8002030:	b087      	sub	sp, #28
 8002032:	af00      	add	r7, sp, #0
 8002034:	60f8      	str	r0, [r7, #12]
 8002036:	60b9      	str	r1, [r7, #8]
 8002038:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 800203a:	2300      	movs	r3, #0
 800203c:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	2202      	movs	r2, #2
 8002042:	715a      	strb	r2, [r3, #5]

  /* Enter Data to the CRC calculator */
  for (index = 0U; index < BufferLength; index++)
 8002044:	2300      	movs	r3, #0
 8002046:	617b      	str	r3, [r7, #20]
 8002048:	e00a      	b.n	8002060 <HAL_CRC_Accumulate+0x32>
  {
    hcrc->Instance->DR = pBuffer[index];
 800204a:	697b      	ldr	r3, [r7, #20]
 800204c:	009b      	lsls	r3, r3, #2
 800204e:	68ba      	ldr	r2, [r7, #8]
 8002050:	441a      	add	r2, r3
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	6812      	ldr	r2, [r2, #0]
 8002058:	601a      	str	r2, [r3, #0]
  for (index = 0U; index < BufferLength; index++)
 800205a:	697b      	ldr	r3, [r7, #20]
 800205c:	3301      	adds	r3, #1
 800205e:	617b      	str	r3, [r7, #20]
 8002060:	697a      	ldr	r2, [r7, #20]
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	429a      	cmp	r2, r3
 8002066:	d3f0      	bcc.n	800204a <HAL_CRC_Accumulate+0x1c>
  }
  temp = hcrc->Instance->DR;
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	2201      	movs	r2, #1
 8002074:	715a      	strb	r2, [r3, #5]

  /* Return the CRC computed value */
  return temp;
 8002076:	693b      	ldr	r3, [r7, #16]
}
 8002078:	4618      	mov	r0, r3
 800207a:	371c      	adds	r7, #28
 800207c:	46bd      	mov	sp, r7
 800207e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002082:	4770      	bx	lr

08002084 <HAL_CRC_Calculate>:
  * @param  pBuffer pointer to the input data buffer.
  * @param  BufferLength input data buffer length (number of uint32_t words).
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 8002084:	b480      	push	{r7}
 8002086:	b087      	sub	sp, #28
 8002088:	af00      	add	r7, sp, #0
 800208a:	60f8      	str	r0, [r7, #12]
 800208c:	60b9      	str	r1, [r7, #8]
 800208e:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 8002090:	2300      	movs	r3, #0
 8002092:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	2202      	movs	r2, #2
 8002098:	715a      	strb	r2, [r3, #5]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	689a      	ldr	r2, [r3, #8]
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f042 0201 	orr.w	r2, r2, #1
 80020a8:	609a      	str	r2, [r3, #8]

  /* Enter 32-bit input data to the CRC calculator */
  for (index = 0U; index < BufferLength; index++)
 80020aa:	2300      	movs	r3, #0
 80020ac:	617b      	str	r3, [r7, #20]
 80020ae:	e00a      	b.n	80020c6 <HAL_CRC_Calculate+0x42>
  {
    hcrc->Instance->DR = pBuffer[index];
 80020b0:	697b      	ldr	r3, [r7, #20]
 80020b2:	009b      	lsls	r3, r3, #2
 80020b4:	68ba      	ldr	r2, [r7, #8]
 80020b6:	441a      	add	r2, r3
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	6812      	ldr	r2, [r2, #0]
 80020be:	601a      	str	r2, [r3, #0]
  for (index = 0U; index < BufferLength; index++)
 80020c0:	697b      	ldr	r3, [r7, #20]
 80020c2:	3301      	adds	r3, #1
 80020c4:	617b      	str	r3, [r7, #20]
 80020c6:	697a      	ldr	r2, [r7, #20]
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	429a      	cmp	r2, r3
 80020cc:	d3f0      	bcc.n	80020b0 <HAL_CRC_Calculate+0x2c>
  }
  temp = hcrc->Instance->DR;
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	2201      	movs	r2, #1
 80020da:	715a      	strb	r2, [r3, #5]

  /* Return the CRC computed value */
  return temp;
 80020dc:	693b      	ldr	r3, [r7, #16]
}
 80020de:	4618      	mov	r0, r3
 80020e0:	371c      	adds	r7, #28
 80020e2:	46bd      	mov	sp, r7
 80020e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e8:	4770      	bx	lr
	...

080020ec <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b086      	sub	sp, #24
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80020f4:	2300      	movs	r3, #0
 80020f6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80020f8:	f7ff fe3c 	bl	8001d74 <HAL_GetTick>
 80020fc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	2b00      	cmp	r3, #0
 8002102:	d101      	bne.n	8002108 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002104:	2301      	movs	r3, #1
 8002106:	e099      	b.n	800223c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	2202      	movs	r2, #2
 800210c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	2200      	movs	r2, #0
 8002114:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	681a      	ldr	r2, [r3, #0]
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f022 0201 	bic.w	r2, r2, #1
 8002126:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002128:	e00f      	b.n	800214a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800212a:	f7ff fe23 	bl	8001d74 <HAL_GetTick>
 800212e:	4602      	mov	r2, r0
 8002130:	693b      	ldr	r3, [r7, #16]
 8002132:	1ad3      	subs	r3, r2, r3
 8002134:	2b05      	cmp	r3, #5
 8002136:	d908      	bls.n	800214a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2220      	movs	r2, #32
 800213c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	2203      	movs	r2, #3
 8002142:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002146:	2303      	movs	r3, #3
 8002148:	e078      	b.n	800223c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f003 0301 	and.w	r3, r3, #1
 8002154:	2b00      	cmp	r3, #0
 8002156:	d1e8      	bne.n	800212a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002160:	697a      	ldr	r2, [r7, #20]
 8002162:	4b38      	ldr	r3, [pc, #224]	; (8002244 <HAL_DMA_Init+0x158>)
 8002164:	4013      	ands	r3, r2
 8002166:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	685a      	ldr	r2, [r3, #4]
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	689b      	ldr	r3, [r3, #8]
 8002170:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002176:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	691b      	ldr	r3, [r3, #16]
 800217c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002182:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	699b      	ldr	r3, [r3, #24]
 8002188:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800218e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6a1b      	ldr	r3, [r3, #32]
 8002194:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002196:	697a      	ldr	r2, [r7, #20]
 8002198:	4313      	orrs	r3, r2
 800219a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021a0:	2b04      	cmp	r3, #4
 80021a2:	d107      	bne.n	80021b4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ac:	4313      	orrs	r3, r2
 80021ae:	697a      	ldr	r2, [r7, #20]
 80021b0:	4313      	orrs	r3, r2
 80021b2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	697a      	ldr	r2, [r7, #20]
 80021ba:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	695b      	ldr	r3, [r3, #20]
 80021c2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80021c4:	697b      	ldr	r3, [r7, #20]
 80021c6:	f023 0307 	bic.w	r3, r3, #7
 80021ca:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021d0:	697a      	ldr	r2, [r7, #20]
 80021d2:	4313      	orrs	r3, r2
 80021d4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021da:	2b04      	cmp	r3, #4
 80021dc:	d117      	bne.n	800220e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021e2:	697a      	ldr	r2, [r7, #20]
 80021e4:	4313      	orrs	r3, r2
 80021e6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d00e      	beq.n	800220e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80021f0:	6878      	ldr	r0, [r7, #4]
 80021f2:	f000 fa91 	bl	8002718 <DMA_CheckFifoParam>
 80021f6:	4603      	mov	r3, r0
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d008      	beq.n	800220e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	2240      	movs	r2, #64	; 0x40
 8002200:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	2201      	movs	r2, #1
 8002206:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800220a:	2301      	movs	r3, #1
 800220c:	e016      	b.n	800223c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	697a      	ldr	r2, [r7, #20]
 8002214:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002216:	6878      	ldr	r0, [r7, #4]
 8002218:	f000 fa48 	bl	80026ac <DMA_CalcBaseAndBitshift>
 800221c:	4603      	mov	r3, r0
 800221e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002224:	223f      	movs	r2, #63	; 0x3f
 8002226:	409a      	lsls	r2, r3
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	2200      	movs	r2, #0
 8002230:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	2201      	movs	r2, #1
 8002236:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800223a:	2300      	movs	r3, #0
}
 800223c:	4618      	mov	r0, r3
 800223e:	3718      	adds	r7, #24
 8002240:	46bd      	mov	sp, r7
 8002242:	bd80      	pop	{r7, pc}
 8002244:	f010803f 	.word	0xf010803f

08002248 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b086      	sub	sp, #24
 800224c:	af00      	add	r7, sp, #0
 800224e:	60f8      	str	r0, [r7, #12]
 8002250:	60b9      	str	r1, [r7, #8]
 8002252:	607a      	str	r2, [r7, #4]
 8002254:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002256:	2300      	movs	r3, #0
 8002258:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800225e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002266:	2b01      	cmp	r3, #1
 8002268:	d101      	bne.n	800226e <HAL_DMA_Start_IT+0x26>
 800226a:	2302      	movs	r3, #2
 800226c:	e040      	b.n	80022f0 <HAL_DMA_Start_IT+0xa8>
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	2201      	movs	r2, #1
 8002272:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800227c:	b2db      	uxtb	r3, r3
 800227e:	2b01      	cmp	r3, #1
 8002280:	d12f      	bne.n	80022e2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	2202      	movs	r2, #2
 8002286:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	2200      	movs	r2, #0
 800228e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	687a      	ldr	r2, [r7, #4]
 8002294:	68b9      	ldr	r1, [r7, #8]
 8002296:	68f8      	ldr	r0, [r7, #12]
 8002298:	f000 f9da 	bl	8002650 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022a0:	223f      	movs	r2, #63	; 0x3f
 80022a2:	409a      	lsls	r2, r3
 80022a4:	693b      	ldr	r3, [r7, #16]
 80022a6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	681a      	ldr	r2, [r3, #0]
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f042 0216 	orr.w	r2, r2, #22
 80022b6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d007      	beq.n	80022d0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	681a      	ldr	r2, [r3, #0]
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f042 0208 	orr.w	r2, r2, #8
 80022ce:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	681a      	ldr	r2, [r3, #0]
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f042 0201 	orr.w	r2, r2, #1
 80022de:	601a      	str	r2, [r3, #0]
 80022e0:	e005      	b.n	80022ee <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	2200      	movs	r2, #0
 80022e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80022ea:	2302      	movs	r3, #2
 80022ec:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80022ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80022f0:	4618      	mov	r0, r3
 80022f2:	3718      	adds	r7, #24
 80022f4:	46bd      	mov	sp, r7
 80022f6:	bd80      	pop	{r7, pc}

080022f8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80022f8:	b480      	push	{r7}
 80022fa:	b083      	sub	sp, #12
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002306:	b2db      	uxtb	r3, r3
 8002308:	2b02      	cmp	r3, #2
 800230a:	d004      	beq.n	8002316 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2280      	movs	r2, #128	; 0x80
 8002310:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002312:	2301      	movs	r3, #1
 8002314:	e00c      	b.n	8002330 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	2205      	movs	r2, #5
 800231a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	681a      	ldr	r2, [r3, #0]
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f022 0201 	bic.w	r2, r2, #1
 800232c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800232e:	2300      	movs	r3, #0
}
 8002330:	4618      	mov	r0, r3
 8002332:	370c      	adds	r7, #12
 8002334:	46bd      	mov	sp, r7
 8002336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233a:	4770      	bx	lr

0800233c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b086      	sub	sp, #24
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002344:	2300      	movs	r3, #0
 8002346:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002348:	4b8e      	ldr	r3, [pc, #568]	; (8002584 <HAL_DMA_IRQHandler+0x248>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	4a8e      	ldr	r2, [pc, #568]	; (8002588 <HAL_DMA_IRQHandler+0x24c>)
 800234e:	fba2 2303 	umull	r2, r3, r2, r3
 8002352:	0a9b      	lsrs	r3, r3, #10
 8002354:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800235a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800235c:	693b      	ldr	r3, [r7, #16]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002366:	2208      	movs	r2, #8
 8002368:	409a      	lsls	r2, r3
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	4013      	ands	r3, r2
 800236e:	2b00      	cmp	r3, #0
 8002370:	d01a      	beq.n	80023a8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f003 0304 	and.w	r3, r3, #4
 800237c:	2b00      	cmp	r3, #0
 800237e:	d013      	beq.n	80023a8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	681a      	ldr	r2, [r3, #0]
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f022 0204 	bic.w	r2, r2, #4
 800238e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002394:	2208      	movs	r2, #8
 8002396:	409a      	lsls	r2, r3
 8002398:	693b      	ldr	r3, [r7, #16]
 800239a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023a0:	f043 0201 	orr.w	r2, r3, #1
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023ac:	2201      	movs	r2, #1
 80023ae:	409a      	lsls	r2, r3
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	4013      	ands	r3, r2
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d012      	beq.n	80023de <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	695b      	ldr	r3, [r3, #20]
 80023be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d00b      	beq.n	80023de <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023ca:	2201      	movs	r2, #1
 80023cc:	409a      	lsls	r2, r3
 80023ce:	693b      	ldr	r3, [r7, #16]
 80023d0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023d6:	f043 0202 	orr.w	r2, r3, #2
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023e2:	2204      	movs	r2, #4
 80023e4:	409a      	lsls	r2, r3
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	4013      	ands	r3, r2
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d012      	beq.n	8002414 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f003 0302 	and.w	r3, r3, #2
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d00b      	beq.n	8002414 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002400:	2204      	movs	r2, #4
 8002402:	409a      	lsls	r2, r3
 8002404:	693b      	ldr	r3, [r7, #16]
 8002406:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800240c:	f043 0204 	orr.w	r2, r3, #4
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002418:	2210      	movs	r2, #16
 800241a:	409a      	lsls	r2, r3
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	4013      	ands	r3, r2
 8002420:	2b00      	cmp	r3, #0
 8002422:	d043      	beq.n	80024ac <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f003 0308 	and.w	r3, r3, #8
 800242e:	2b00      	cmp	r3, #0
 8002430:	d03c      	beq.n	80024ac <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002436:	2210      	movs	r2, #16
 8002438:	409a      	lsls	r2, r3
 800243a:	693b      	ldr	r3, [r7, #16]
 800243c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002448:	2b00      	cmp	r3, #0
 800244a:	d018      	beq.n	800247e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002456:	2b00      	cmp	r3, #0
 8002458:	d108      	bne.n	800246c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800245e:	2b00      	cmp	r3, #0
 8002460:	d024      	beq.n	80024ac <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002466:	6878      	ldr	r0, [r7, #4]
 8002468:	4798      	blx	r3
 800246a:	e01f      	b.n	80024ac <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002470:	2b00      	cmp	r3, #0
 8002472:	d01b      	beq.n	80024ac <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002478:	6878      	ldr	r0, [r7, #4]
 800247a:	4798      	blx	r3
 800247c:	e016      	b.n	80024ac <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002488:	2b00      	cmp	r3, #0
 800248a:	d107      	bne.n	800249c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	681a      	ldr	r2, [r3, #0]
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f022 0208 	bic.w	r2, r2, #8
 800249a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d003      	beq.n	80024ac <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024a8:	6878      	ldr	r0, [r7, #4]
 80024aa:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024b0:	2220      	movs	r2, #32
 80024b2:	409a      	lsls	r2, r3
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	4013      	ands	r3, r2
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	f000 808f 	beq.w	80025dc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f003 0310 	and.w	r3, r3, #16
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	f000 8087 	beq.w	80025dc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024d2:	2220      	movs	r2, #32
 80024d4:	409a      	lsls	r2, r3
 80024d6:	693b      	ldr	r3, [r7, #16]
 80024d8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80024e0:	b2db      	uxtb	r3, r3
 80024e2:	2b05      	cmp	r3, #5
 80024e4:	d136      	bne.n	8002554 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	681a      	ldr	r2, [r3, #0]
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f022 0216 	bic.w	r2, r2, #22
 80024f4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	695a      	ldr	r2, [r3, #20]
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002504:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800250a:	2b00      	cmp	r3, #0
 800250c:	d103      	bne.n	8002516 <HAL_DMA_IRQHandler+0x1da>
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002512:	2b00      	cmp	r3, #0
 8002514:	d007      	beq.n	8002526 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	681a      	ldr	r2, [r3, #0]
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f022 0208 	bic.w	r2, r2, #8
 8002524:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800252a:	223f      	movs	r2, #63	; 0x3f
 800252c:	409a      	lsls	r2, r3
 800252e:	693b      	ldr	r3, [r7, #16]
 8002530:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2201      	movs	r2, #1
 8002536:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	2200      	movs	r2, #0
 800253e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002546:	2b00      	cmp	r3, #0
 8002548:	d07e      	beq.n	8002648 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800254e:	6878      	ldr	r0, [r7, #4]
 8002550:	4798      	blx	r3
        }
        return;
 8002552:	e079      	b.n	8002648 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800255e:	2b00      	cmp	r3, #0
 8002560:	d01d      	beq.n	800259e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800256c:	2b00      	cmp	r3, #0
 800256e:	d10d      	bne.n	800258c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002574:	2b00      	cmp	r3, #0
 8002576:	d031      	beq.n	80025dc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800257c:	6878      	ldr	r0, [r7, #4]
 800257e:	4798      	blx	r3
 8002580:	e02c      	b.n	80025dc <HAL_DMA_IRQHandler+0x2a0>
 8002582:	bf00      	nop
 8002584:	20000004 	.word	0x20000004
 8002588:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002590:	2b00      	cmp	r3, #0
 8002592:	d023      	beq.n	80025dc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002598:	6878      	ldr	r0, [r7, #4]
 800259a:	4798      	blx	r3
 800259c:	e01e      	b.n	80025dc <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d10f      	bne.n	80025cc <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	681a      	ldr	r2, [r3, #0]
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f022 0210 	bic.w	r2, r2, #16
 80025ba:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2201      	movs	r2, #1
 80025c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2200      	movs	r2, #0
 80025c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d003      	beq.n	80025dc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025d8:	6878      	ldr	r0, [r7, #4]
 80025da:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d032      	beq.n	800264a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025e8:	f003 0301 	and.w	r3, r3, #1
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d022      	beq.n	8002636 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2205      	movs	r2, #5
 80025f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	681a      	ldr	r2, [r3, #0]
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f022 0201 	bic.w	r2, r2, #1
 8002606:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002608:	68bb      	ldr	r3, [r7, #8]
 800260a:	3301      	adds	r3, #1
 800260c:	60bb      	str	r3, [r7, #8]
 800260e:	697a      	ldr	r2, [r7, #20]
 8002610:	429a      	cmp	r2, r3
 8002612:	d307      	bcc.n	8002624 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f003 0301 	and.w	r3, r3, #1
 800261e:	2b00      	cmp	r3, #0
 8002620:	d1f2      	bne.n	8002608 <HAL_DMA_IRQHandler+0x2cc>
 8002622:	e000      	b.n	8002626 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002624:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	2201      	movs	r2, #1
 800262a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	2200      	movs	r2, #0
 8002632:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800263a:	2b00      	cmp	r3, #0
 800263c:	d005      	beq.n	800264a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002642:	6878      	ldr	r0, [r7, #4]
 8002644:	4798      	blx	r3
 8002646:	e000      	b.n	800264a <HAL_DMA_IRQHandler+0x30e>
        return;
 8002648:	bf00      	nop
    }
  }
}
 800264a:	3718      	adds	r7, #24
 800264c:	46bd      	mov	sp, r7
 800264e:	bd80      	pop	{r7, pc}

08002650 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002650:	b480      	push	{r7}
 8002652:	b085      	sub	sp, #20
 8002654:	af00      	add	r7, sp, #0
 8002656:	60f8      	str	r0, [r7, #12]
 8002658:	60b9      	str	r1, [r7, #8]
 800265a:	607a      	str	r2, [r7, #4]
 800265c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	681a      	ldr	r2, [r3, #0]
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800266c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	683a      	ldr	r2, [r7, #0]
 8002674:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	689b      	ldr	r3, [r3, #8]
 800267a:	2b40      	cmp	r3, #64	; 0x40
 800267c:	d108      	bne.n	8002690 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	687a      	ldr	r2, [r7, #4]
 8002684:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	68ba      	ldr	r2, [r7, #8]
 800268c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800268e:	e007      	b.n	80026a0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	68ba      	ldr	r2, [r7, #8]
 8002696:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	687a      	ldr	r2, [r7, #4]
 800269e:	60da      	str	r2, [r3, #12]
}
 80026a0:	bf00      	nop
 80026a2:	3714      	adds	r7, #20
 80026a4:	46bd      	mov	sp, r7
 80026a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026aa:	4770      	bx	lr

080026ac <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80026ac:	b480      	push	{r7}
 80026ae:	b085      	sub	sp, #20
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	b2db      	uxtb	r3, r3
 80026ba:	3b10      	subs	r3, #16
 80026bc:	4a14      	ldr	r2, [pc, #80]	; (8002710 <DMA_CalcBaseAndBitshift+0x64>)
 80026be:	fba2 2303 	umull	r2, r3, r2, r3
 80026c2:	091b      	lsrs	r3, r3, #4
 80026c4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80026c6:	4a13      	ldr	r2, [pc, #76]	; (8002714 <DMA_CalcBaseAndBitshift+0x68>)
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	4413      	add	r3, r2
 80026cc:	781b      	ldrb	r3, [r3, #0]
 80026ce:	461a      	mov	r2, r3
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	2b03      	cmp	r3, #3
 80026d8:	d909      	bls.n	80026ee <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80026e2:	f023 0303 	bic.w	r3, r3, #3
 80026e6:	1d1a      	adds	r2, r3, #4
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	659a      	str	r2, [r3, #88]	; 0x58
 80026ec:	e007      	b.n	80026fe <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80026f6:	f023 0303 	bic.w	r3, r3, #3
 80026fa:	687a      	ldr	r2, [r7, #4]
 80026fc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002702:	4618      	mov	r0, r3
 8002704:	3714      	adds	r7, #20
 8002706:	46bd      	mov	sp, r7
 8002708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270c:	4770      	bx	lr
 800270e:	bf00      	nop
 8002710:	aaaaaaab 	.word	0xaaaaaaab
 8002714:	0800c8c4 	.word	0x0800c8c4

08002718 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002718:	b480      	push	{r7}
 800271a:	b085      	sub	sp, #20
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002720:	2300      	movs	r3, #0
 8002722:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002728:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	699b      	ldr	r3, [r3, #24]
 800272e:	2b00      	cmp	r3, #0
 8002730:	d11f      	bne.n	8002772 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002732:	68bb      	ldr	r3, [r7, #8]
 8002734:	2b03      	cmp	r3, #3
 8002736:	d856      	bhi.n	80027e6 <DMA_CheckFifoParam+0xce>
 8002738:	a201      	add	r2, pc, #4	; (adr r2, 8002740 <DMA_CheckFifoParam+0x28>)
 800273a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800273e:	bf00      	nop
 8002740:	08002751 	.word	0x08002751
 8002744:	08002763 	.word	0x08002763
 8002748:	08002751 	.word	0x08002751
 800274c:	080027e7 	.word	0x080027e7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002754:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002758:	2b00      	cmp	r3, #0
 800275a:	d046      	beq.n	80027ea <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800275c:	2301      	movs	r3, #1
 800275e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002760:	e043      	b.n	80027ea <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002766:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800276a:	d140      	bne.n	80027ee <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800276c:	2301      	movs	r3, #1
 800276e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002770:	e03d      	b.n	80027ee <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	699b      	ldr	r3, [r3, #24]
 8002776:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800277a:	d121      	bne.n	80027c0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800277c:	68bb      	ldr	r3, [r7, #8]
 800277e:	2b03      	cmp	r3, #3
 8002780:	d837      	bhi.n	80027f2 <DMA_CheckFifoParam+0xda>
 8002782:	a201      	add	r2, pc, #4	; (adr r2, 8002788 <DMA_CheckFifoParam+0x70>)
 8002784:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002788:	08002799 	.word	0x08002799
 800278c:	0800279f 	.word	0x0800279f
 8002790:	08002799 	.word	0x08002799
 8002794:	080027b1 	.word	0x080027b1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002798:	2301      	movs	r3, #1
 800279a:	73fb      	strb	r3, [r7, #15]
      break;
 800279c:	e030      	b.n	8002800 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027a2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d025      	beq.n	80027f6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80027aa:	2301      	movs	r3, #1
 80027ac:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80027ae:	e022      	b.n	80027f6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027b4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80027b8:	d11f      	bne.n	80027fa <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80027ba:	2301      	movs	r3, #1
 80027bc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80027be:	e01c      	b.n	80027fa <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80027c0:	68bb      	ldr	r3, [r7, #8]
 80027c2:	2b02      	cmp	r3, #2
 80027c4:	d903      	bls.n	80027ce <DMA_CheckFifoParam+0xb6>
 80027c6:	68bb      	ldr	r3, [r7, #8]
 80027c8:	2b03      	cmp	r3, #3
 80027ca:	d003      	beq.n	80027d4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80027cc:	e018      	b.n	8002800 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80027ce:	2301      	movs	r3, #1
 80027d0:	73fb      	strb	r3, [r7, #15]
      break;
 80027d2:	e015      	b.n	8002800 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027d8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d00e      	beq.n	80027fe <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80027e0:	2301      	movs	r3, #1
 80027e2:	73fb      	strb	r3, [r7, #15]
      break;
 80027e4:	e00b      	b.n	80027fe <DMA_CheckFifoParam+0xe6>
      break;
 80027e6:	bf00      	nop
 80027e8:	e00a      	b.n	8002800 <DMA_CheckFifoParam+0xe8>
      break;
 80027ea:	bf00      	nop
 80027ec:	e008      	b.n	8002800 <DMA_CheckFifoParam+0xe8>
      break;
 80027ee:	bf00      	nop
 80027f0:	e006      	b.n	8002800 <DMA_CheckFifoParam+0xe8>
      break;
 80027f2:	bf00      	nop
 80027f4:	e004      	b.n	8002800 <DMA_CheckFifoParam+0xe8>
      break;
 80027f6:	bf00      	nop
 80027f8:	e002      	b.n	8002800 <DMA_CheckFifoParam+0xe8>
      break;   
 80027fa:	bf00      	nop
 80027fc:	e000      	b.n	8002800 <DMA_CheckFifoParam+0xe8>
      break;
 80027fe:	bf00      	nop
    }
  } 
  
  return status; 
 8002800:	7bfb      	ldrb	r3, [r7, #15]
}
 8002802:	4618      	mov	r0, r3
 8002804:	3714      	adds	r7, #20
 8002806:	46bd      	mov	sp, r7
 8002808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280c:	4770      	bx	lr
 800280e:	bf00      	nop

08002810 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002810:	b480      	push	{r7}
 8002812:	b089      	sub	sp, #36	; 0x24
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
 8002818:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800281a:	2300      	movs	r3, #0
 800281c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800281e:	2300      	movs	r3, #0
 8002820:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002822:	2300      	movs	r3, #0
 8002824:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002826:	2300      	movs	r3, #0
 8002828:	61fb      	str	r3, [r7, #28]
 800282a:	e159      	b.n	8002ae0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800282c:	2201      	movs	r2, #1
 800282e:	69fb      	ldr	r3, [r7, #28]
 8002830:	fa02 f303 	lsl.w	r3, r2, r3
 8002834:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	697a      	ldr	r2, [r7, #20]
 800283c:	4013      	ands	r3, r2
 800283e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002840:	693a      	ldr	r2, [r7, #16]
 8002842:	697b      	ldr	r3, [r7, #20]
 8002844:	429a      	cmp	r2, r3
 8002846:	f040 8148 	bne.w	8002ada <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	685b      	ldr	r3, [r3, #4]
 800284e:	f003 0303 	and.w	r3, r3, #3
 8002852:	2b01      	cmp	r3, #1
 8002854:	d005      	beq.n	8002862 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	685b      	ldr	r3, [r3, #4]
 800285a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800285e:	2b02      	cmp	r3, #2
 8002860:	d130      	bne.n	80028c4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	689b      	ldr	r3, [r3, #8]
 8002866:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002868:	69fb      	ldr	r3, [r7, #28]
 800286a:	005b      	lsls	r3, r3, #1
 800286c:	2203      	movs	r2, #3
 800286e:	fa02 f303 	lsl.w	r3, r2, r3
 8002872:	43db      	mvns	r3, r3
 8002874:	69ba      	ldr	r2, [r7, #24]
 8002876:	4013      	ands	r3, r2
 8002878:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	68da      	ldr	r2, [r3, #12]
 800287e:	69fb      	ldr	r3, [r7, #28]
 8002880:	005b      	lsls	r3, r3, #1
 8002882:	fa02 f303 	lsl.w	r3, r2, r3
 8002886:	69ba      	ldr	r2, [r7, #24]
 8002888:	4313      	orrs	r3, r2
 800288a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	69ba      	ldr	r2, [r7, #24]
 8002890:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	685b      	ldr	r3, [r3, #4]
 8002896:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002898:	2201      	movs	r2, #1
 800289a:	69fb      	ldr	r3, [r7, #28]
 800289c:	fa02 f303 	lsl.w	r3, r2, r3
 80028a0:	43db      	mvns	r3, r3
 80028a2:	69ba      	ldr	r2, [r7, #24]
 80028a4:	4013      	ands	r3, r2
 80028a6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	685b      	ldr	r3, [r3, #4]
 80028ac:	091b      	lsrs	r3, r3, #4
 80028ae:	f003 0201 	and.w	r2, r3, #1
 80028b2:	69fb      	ldr	r3, [r7, #28]
 80028b4:	fa02 f303 	lsl.w	r3, r2, r3
 80028b8:	69ba      	ldr	r2, [r7, #24]
 80028ba:	4313      	orrs	r3, r2
 80028bc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	69ba      	ldr	r2, [r7, #24]
 80028c2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	f003 0303 	and.w	r3, r3, #3
 80028cc:	2b03      	cmp	r3, #3
 80028ce:	d017      	beq.n	8002900 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	68db      	ldr	r3, [r3, #12]
 80028d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80028d6:	69fb      	ldr	r3, [r7, #28]
 80028d8:	005b      	lsls	r3, r3, #1
 80028da:	2203      	movs	r2, #3
 80028dc:	fa02 f303 	lsl.w	r3, r2, r3
 80028e0:	43db      	mvns	r3, r3
 80028e2:	69ba      	ldr	r2, [r7, #24]
 80028e4:	4013      	ands	r3, r2
 80028e6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	689a      	ldr	r2, [r3, #8]
 80028ec:	69fb      	ldr	r3, [r7, #28]
 80028ee:	005b      	lsls	r3, r3, #1
 80028f0:	fa02 f303 	lsl.w	r3, r2, r3
 80028f4:	69ba      	ldr	r2, [r7, #24]
 80028f6:	4313      	orrs	r3, r2
 80028f8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	69ba      	ldr	r2, [r7, #24]
 80028fe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	685b      	ldr	r3, [r3, #4]
 8002904:	f003 0303 	and.w	r3, r3, #3
 8002908:	2b02      	cmp	r3, #2
 800290a:	d123      	bne.n	8002954 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800290c:	69fb      	ldr	r3, [r7, #28]
 800290e:	08da      	lsrs	r2, r3, #3
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	3208      	adds	r2, #8
 8002914:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002918:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800291a:	69fb      	ldr	r3, [r7, #28]
 800291c:	f003 0307 	and.w	r3, r3, #7
 8002920:	009b      	lsls	r3, r3, #2
 8002922:	220f      	movs	r2, #15
 8002924:	fa02 f303 	lsl.w	r3, r2, r3
 8002928:	43db      	mvns	r3, r3
 800292a:	69ba      	ldr	r2, [r7, #24]
 800292c:	4013      	ands	r3, r2
 800292e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	691a      	ldr	r2, [r3, #16]
 8002934:	69fb      	ldr	r3, [r7, #28]
 8002936:	f003 0307 	and.w	r3, r3, #7
 800293a:	009b      	lsls	r3, r3, #2
 800293c:	fa02 f303 	lsl.w	r3, r2, r3
 8002940:	69ba      	ldr	r2, [r7, #24]
 8002942:	4313      	orrs	r3, r2
 8002944:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002946:	69fb      	ldr	r3, [r7, #28]
 8002948:	08da      	lsrs	r2, r3, #3
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	3208      	adds	r2, #8
 800294e:	69b9      	ldr	r1, [r7, #24]
 8002950:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800295a:	69fb      	ldr	r3, [r7, #28]
 800295c:	005b      	lsls	r3, r3, #1
 800295e:	2203      	movs	r2, #3
 8002960:	fa02 f303 	lsl.w	r3, r2, r3
 8002964:	43db      	mvns	r3, r3
 8002966:	69ba      	ldr	r2, [r7, #24]
 8002968:	4013      	ands	r3, r2
 800296a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	685b      	ldr	r3, [r3, #4]
 8002970:	f003 0203 	and.w	r2, r3, #3
 8002974:	69fb      	ldr	r3, [r7, #28]
 8002976:	005b      	lsls	r3, r3, #1
 8002978:	fa02 f303 	lsl.w	r3, r2, r3
 800297c:	69ba      	ldr	r2, [r7, #24]
 800297e:	4313      	orrs	r3, r2
 8002980:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	69ba      	ldr	r2, [r7, #24]
 8002986:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	685b      	ldr	r3, [r3, #4]
 800298c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002990:	2b00      	cmp	r3, #0
 8002992:	f000 80a2 	beq.w	8002ada <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002996:	2300      	movs	r3, #0
 8002998:	60fb      	str	r3, [r7, #12]
 800299a:	4b57      	ldr	r3, [pc, #348]	; (8002af8 <HAL_GPIO_Init+0x2e8>)
 800299c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800299e:	4a56      	ldr	r2, [pc, #344]	; (8002af8 <HAL_GPIO_Init+0x2e8>)
 80029a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80029a4:	6453      	str	r3, [r2, #68]	; 0x44
 80029a6:	4b54      	ldr	r3, [pc, #336]	; (8002af8 <HAL_GPIO_Init+0x2e8>)
 80029a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029ae:	60fb      	str	r3, [r7, #12]
 80029b0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80029b2:	4a52      	ldr	r2, [pc, #328]	; (8002afc <HAL_GPIO_Init+0x2ec>)
 80029b4:	69fb      	ldr	r3, [r7, #28]
 80029b6:	089b      	lsrs	r3, r3, #2
 80029b8:	3302      	adds	r3, #2
 80029ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029be:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80029c0:	69fb      	ldr	r3, [r7, #28]
 80029c2:	f003 0303 	and.w	r3, r3, #3
 80029c6:	009b      	lsls	r3, r3, #2
 80029c8:	220f      	movs	r2, #15
 80029ca:	fa02 f303 	lsl.w	r3, r2, r3
 80029ce:	43db      	mvns	r3, r3
 80029d0:	69ba      	ldr	r2, [r7, #24]
 80029d2:	4013      	ands	r3, r2
 80029d4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	4a49      	ldr	r2, [pc, #292]	; (8002b00 <HAL_GPIO_Init+0x2f0>)
 80029da:	4293      	cmp	r3, r2
 80029dc:	d019      	beq.n	8002a12 <HAL_GPIO_Init+0x202>
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	4a48      	ldr	r2, [pc, #288]	; (8002b04 <HAL_GPIO_Init+0x2f4>)
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d013      	beq.n	8002a0e <HAL_GPIO_Init+0x1fe>
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	4a47      	ldr	r2, [pc, #284]	; (8002b08 <HAL_GPIO_Init+0x2f8>)
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d00d      	beq.n	8002a0a <HAL_GPIO_Init+0x1fa>
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	4a46      	ldr	r2, [pc, #280]	; (8002b0c <HAL_GPIO_Init+0x2fc>)
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d007      	beq.n	8002a06 <HAL_GPIO_Init+0x1f6>
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	4a45      	ldr	r2, [pc, #276]	; (8002b10 <HAL_GPIO_Init+0x300>)
 80029fa:	4293      	cmp	r3, r2
 80029fc:	d101      	bne.n	8002a02 <HAL_GPIO_Init+0x1f2>
 80029fe:	2304      	movs	r3, #4
 8002a00:	e008      	b.n	8002a14 <HAL_GPIO_Init+0x204>
 8002a02:	2307      	movs	r3, #7
 8002a04:	e006      	b.n	8002a14 <HAL_GPIO_Init+0x204>
 8002a06:	2303      	movs	r3, #3
 8002a08:	e004      	b.n	8002a14 <HAL_GPIO_Init+0x204>
 8002a0a:	2302      	movs	r3, #2
 8002a0c:	e002      	b.n	8002a14 <HAL_GPIO_Init+0x204>
 8002a0e:	2301      	movs	r3, #1
 8002a10:	e000      	b.n	8002a14 <HAL_GPIO_Init+0x204>
 8002a12:	2300      	movs	r3, #0
 8002a14:	69fa      	ldr	r2, [r7, #28]
 8002a16:	f002 0203 	and.w	r2, r2, #3
 8002a1a:	0092      	lsls	r2, r2, #2
 8002a1c:	4093      	lsls	r3, r2
 8002a1e:	69ba      	ldr	r2, [r7, #24]
 8002a20:	4313      	orrs	r3, r2
 8002a22:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002a24:	4935      	ldr	r1, [pc, #212]	; (8002afc <HAL_GPIO_Init+0x2ec>)
 8002a26:	69fb      	ldr	r3, [r7, #28]
 8002a28:	089b      	lsrs	r3, r3, #2
 8002a2a:	3302      	adds	r3, #2
 8002a2c:	69ba      	ldr	r2, [r7, #24]
 8002a2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002a32:	4b38      	ldr	r3, [pc, #224]	; (8002b14 <HAL_GPIO_Init+0x304>)
 8002a34:	689b      	ldr	r3, [r3, #8]
 8002a36:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a38:	693b      	ldr	r3, [r7, #16]
 8002a3a:	43db      	mvns	r3, r3
 8002a3c:	69ba      	ldr	r2, [r7, #24]
 8002a3e:	4013      	ands	r3, r2
 8002a40:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	685b      	ldr	r3, [r3, #4]
 8002a46:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d003      	beq.n	8002a56 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002a4e:	69ba      	ldr	r2, [r7, #24]
 8002a50:	693b      	ldr	r3, [r7, #16]
 8002a52:	4313      	orrs	r3, r2
 8002a54:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002a56:	4a2f      	ldr	r2, [pc, #188]	; (8002b14 <HAL_GPIO_Init+0x304>)
 8002a58:	69bb      	ldr	r3, [r7, #24]
 8002a5a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002a5c:	4b2d      	ldr	r3, [pc, #180]	; (8002b14 <HAL_GPIO_Init+0x304>)
 8002a5e:	68db      	ldr	r3, [r3, #12]
 8002a60:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a62:	693b      	ldr	r3, [r7, #16]
 8002a64:	43db      	mvns	r3, r3
 8002a66:	69ba      	ldr	r2, [r7, #24]
 8002a68:	4013      	ands	r3, r2
 8002a6a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	685b      	ldr	r3, [r3, #4]
 8002a70:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d003      	beq.n	8002a80 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002a78:	69ba      	ldr	r2, [r7, #24]
 8002a7a:	693b      	ldr	r3, [r7, #16]
 8002a7c:	4313      	orrs	r3, r2
 8002a7e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002a80:	4a24      	ldr	r2, [pc, #144]	; (8002b14 <HAL_GPIO_Init+0x304>)
 8002a82:	69bb      	ldr	r3, [r7, #24]
 8002a84:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002a86:	4b23      	ldr	r3, [pc, #140]	; (8002b14 <HAL_GPIO_Init+0x304>)
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a8c:	693b      	ldr	r3, [r7, #16]
 8002a8e:	43db      	mvns	r3, r3
 8002a90:	69ba      	ldr	r2, [r7, #24]
 8002a92:	4013      	ands	r3, r2
 8002a94:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	685b      	ldr	r3, [r3, #4]
 8002a9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d003      	beq.n	8002aaa <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002aa2:	69ba      	ldr	r2, [r7, #24]
 8002aa4:	693b      	ldr	r3, [r7, #16]
 8002aa6:	4313      	orrs	r3, r2
 8002aa8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002aaa:	4a1a      	ldr	r2, [pc, #104]	; (8002b14 <HAL_GPIO_Init+0x304>)
 8002aac:	69bb      	ldr	r3, [r7, #24]
 8002aae:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002ab0:	4b18      	ldr	r3, [pc, #96]	; (8002b14 <HAL_GPIO_Init+0x304>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ab6:	693b      	ldr	r3, [r7, #16]
 8002ab8:	43db      	mvns	r3, r3
 8002aba:	69ba      	ldr	r2, [r7, #24]
 8002abc:	4013      	ands	r3, r2
 8002abe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	685b      	ldr	r3, [r3, #4]
 8002ac4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d003      	beq.n	8002ad4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002acc:	69ba      	ldr	r2, [r7, #24]
 8002ace:	693b      	ldr	r3, [r7, #16]
 8002ad0:	4313      	orrs	r3, r2
 8002ad2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002ad4:	4a0f      	ldr	r2, [pc, #60]	; (8002b14 <HAL_GPIO_Init+0x304>)
 8002ad6:	69bb      	ldr	r3, [r7, #24]
 8002ad8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002ada:	69fb      	ldr	r3, [r7, #28]
 8002adc:	3301      	adds	r3, #1
 8002ade:	61fb      	str	r3, [r7, #28]
 8002ae0:	69fb      	ldr	r3, [r7, #28]
 8002ae2:	2b0f      	cmp	r3, #15
 8002ae4:	f67f aea2 	bls.w	800282c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002ae8:	bf00      	nop
 8002aea:	bf00      	nop
 8002aec:	3724      	adds	r7, #36	; 0x24
 8002aee:	46bd      	mov	sp, r7
 8002af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af4:	4770      	bx	lr
 8002af6:	bf00      	nop
 8002af8:	40023800 	.word	0x40023800
 8002afc:	40013800 	.word	0x40013800
 8002b00:	40020000 	.word	0x40020000
 8002b04:	40020400 	.word	0x40020400
 8002b08:	40020800 	.word	0x40020800
 8002b0c:	40020c00 	.word	0x40020c00
 8002b10:	40021000 	.word	0x40021000
 8002b14:	40013c00 	.word	0x40013c00

08002b18 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002b18:	b480      	push	{r7}
 8002b1a:	b085      	sub	sp, #20
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
 8002b20:	460b      	mov	r3, r1
 8002b22:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	691a      	ldr	r2, [r3, #16]
 8002b28:	887b      	ldrh	r3, [r7, #2]
 8002b2a:	4013      	ands	r3, r2
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d002      	beq.n	8002b36 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002b30:	2301      	movs	r3, #1
 8002b32:	73fb      	strb	r3, [r7, #15]
 8002b34:	e001      	b.n	8002b3a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002b36:	2300      	movs	r3, #0
 8002b38:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002b3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	3714      	adds	r7, #20
 8002b40:	46bd      	mov	sp, r7
 8002b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b46:	4770      	bx	lr

08002b48 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b48:	b480      	push	{r7}
 8002b4a:	b083      	sub	sp, #12
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
 8002b50:	460b      	mov	r3, r1
 8002b52:	807b      	strh	r3, [r7, #2]
 8002b54:	4613      	mov	r3, r2
 8002b56:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002b58:	787b      	ldrb	r3, [r7, #1]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d003      	beq.n	8002b66 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b5e:	887a      	ldrh	r2, [r7, #2]
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002b64:	e003      	b.n	8002b6e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002b66:	887b      	ldrh	r3, [r7, #2]
 8002b68:	041a      	lsls	r2, r3, #16
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	619a      	str	r2, [r3, #24]
}
 8002b6e:	bf00      	nop
 8002b70:	370c      	adds	r7, #12
 8002b72:	46bd      	mov	sp, r7
 8002b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b78:	4770      	bx	lr
	...

08002b7c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b082      	sub	sp, #8
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	4603      	mov	r3, r0
 8002b84:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002b86:	4b08      	ldr	r3, [pc, #32]	; (8002ba8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002b88:	695a      	ldr	r2, [r3, #20]
 8002b8a:	88fb      	ldrh	r3, [r7, #6]
 8002b8c:	4013      	ands	r3, r2
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d006      	beq.n	8002ba0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002b92:	4a05      	ldr	r2, [pc, #20]	; (8002ba8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002b94:	88fb      	ldrh	r3, [r7, #6]
 8002b96:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002b98:	88fb      	ldrh	r3, [r7, #6]
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	f7fe f9c2 	bl	8000f24 <HAL_GPIO_EXTI_Callback>
  }
}
 8002ba0:	bf00      	nop
 8002ba2:	3708      	adds	r7, #8
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	bd80      	pop	{r7, pc}
 8002ba8:	40013c00 	.word	0x40013c00

08002bac <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002bac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002bae:	b08f      	sub	sp, #60	; 0x3c
 8002bb0:	af0a      	add	r7, sp, #40	; 0x28
 8002bb2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d101      	bne.n	8002bbe <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002bba:	2301      	movs	r3, #1
 8002bbc:	e10f      	b.n	8002dde <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002bca:	b2db      	uxtb	r3, r3
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d106      	bne.n	8002bde <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002bd8:	6878      	ldr	r0, [r7, #4]
 8002bda:	f009 fad1 	bl	800c180 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	2203      	movs	r2, #3
 8002be2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002be6:	68bb      	ldr	r3, [r7, #8]
 8002be8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d102      	bne.n	8002bf8 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	f004 fa2c 	bl	800705a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	603b      	str	r3, [r7, #0]
 8002c08:	687e      	ldr	r6, [r7, #4]
 8002c0a:	466d      	mov	r5, sp
 8002c0c:	f106 0410 	add.w	r4, r6, #16
 8002c10:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002c12:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002c14:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002c16:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002c18:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002c1c:	e885 0003 	stmia.w	r5, {r0, r1}
 8002c20:	1d33      	adds	r3, r6, #4
 8002c22:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002c24:	6838      	ldr	r0, [r7, #0]
 8002c26:	f004 f903 	bl	8006e30 <USB_CoreInit>
 8002c2a:	4603      	mov	r3, r0
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d005      	beq.n	8002c3c <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2202      	movs	r2, #2
 8002c34:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002c38:	2301      	movs	r3, #1
 8002c3a:	e0d0      	b.n	8002dde <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	2100      	movs	r1, #0
 8002c42:	4618      	mov	r0, r3
 8002c44:	f004 fa1a 	bl	800707c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c48:	2300      	movs	r3, #0
 8002c4a:	73fb      	strb	r3, [r7, #15]
 8002c4c:	e04a      	b.n	8002ce4 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002c4e:	7bfa      	ldrb	r2, [r7, #15]
 8002c50:	6879      	ldr	r1, [r7, #4]
 8002c52:	4613      	mov	r3, r2
 8002c54:	00db      	lsls	r3, r3, #3
 8002c56:	4413      	add	r3, r2
 8002c58:	009b      	lsls	r3, r3, #2
 8002c5a:	440b      	add	r3, r1
 8002c5c:	333d      	adds	r3, #61	; 0x3d
 8002c5e:	2201      	movs	r2, #1
 8002c60:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002c62:	7bfa      	ldrb	r2, [r7, #15]
 8002c64:	6879      	ldr	r1, [r7, #4]
 8002c66:	4613      	mov	r3, r2
 8002c68:	00db      	lsls	r3, r3, #3
 8002c6a:	4413      	add	r3, r2
 8002c6c:	009b      	lsls	r3, r3, #2
 8002c6e:	440b      	add	r3, r1
 8002c70:	333c      	adds	r3, #60	; 0x3c
 8002c72:	7bfa      	ldrb	r2, [r7, #15]
 8002c74:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002c76:	7bfa      	ldrb	r2, [r7, #15]
 8002c78:	7bfb      	ldrb	r3, [r7, #15]
 8002c7a:	b298      	uxth	r0, r3
 8002c7c:	6879      	ldr	r1, [r7, #4]
 8002c7e:	4613      	mov	r3, r2
 8002c80:	00db      	lsls	r3, r3, #3
 8002c82:	4413      	add	r3, r2
 8002c84:	009b      	lsls	r3, r3, #2
 8002c86:	440b      	add	r3, r1
 8002c88:	3344      	adds	r3, #68	; 0x44
 8002c8a:	4602      	mov	r2, r0
 8002c8c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002c8e:	7bfa      	ldrb	r2, [r7, #15]
 8002c90:	6879      	ldr	r1, [r7, #4]
 8002c92:	4613      	mov	r3, r2
 8002c94:	00db      	lsls	r3, r3, #3
 8002c96:	4413      	add	r3, r2
 8002c98:	009b      	lsls	r3, r3, #2
 8002c9a:	440b      	add	r3, r1
 8002c9c:	3340      	adds	r3, #64	; 0x40
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002ca2:	7bfa      	ldrb	r2, [r7, #15]
 8002ca4:	6879      	ldr	r1, [r7, #4]
 8002ca6:	4613      	mov	r3, r2
 8002ca8:	00db      	lsls	r3, r3, #3
 8002caa:	4413      	add	r3, r2
 8002cac:	009b      	lsls	r3, r3, #2
 8002cae:	440b      	add	r3, r1
 8002cb0:	3348      	adds	r3, #72	; 0x48
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002cb6:	7bfa      	ldrb	r2, [r7, #15]
 8002cb8:	6879      	ldr	r1, [r7, #4]
 8002cba:	4613      	mov	r3, r2
 8002cbc:	00db      	lsls	r3, r3, #3
 8002cbe:	4413      	add	r3, r2
 8002cc0:	009b      	lsls	r3, r3, #2
 8002cc2:	440b      	add	r3, r1
 8002cc4:	334c      	adds	r3, #76	; 0x4c
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002cca:	7bfa      	ldrb	r2, [r7, #15]
 8002ccc:	6879      	ldr	r1, [r7, #4]
 8002cce:	4613      	mov	r3, r2
 8002cd0:	00db      	lsls	r3, r3, #3
 8002cd2:	4413      	add	r3, r2
 8002cd4:	009b      	lsls	r3, r3, #2
 8002cd6:	440b      	add	r3, r1
 8002cd8:	3354      	adds	r3, #84	; 0x54
 8002cda:	2200      	movs	r2, #0
 8002cdc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002cde:	7bfb      	ldrb	r3, [r7, #15]
 8002ce0:	3301      	adds	r3, #1
 8002ce2:	73fb      	strb	r3, [r7, #15]
 8002ce4:	7bfa      	ldrb	r2, [r7, #15]
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	685b      	ldr	r3, [r3, #4]
 8002cea:	429a      	cmp	r2, r3
 8002cec:	d3af      	bcc.n	8002c4e <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002cee:	2300      	movs	r3, #0
 8002cf0:	73fb      	strb	r3, [r7, #15]
 8002cf2:	e044      	b.n	8002d7e <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002cf4:	7bfa      	ldrb	r2, [r7, #15]
 8002cf6:	6879      	ldr	r1, [r7, #4]
 8002cf8:	4613      	mov	r3, r2
 8002cfa:	00db      	lsls	r3, r3, #3
 8002cfc:	4413      	add	r3, r2
 8002cfe:	009b      	lsls	r3, r3, #2
 8002d00:	440b      	add	r3, r1
 8002d02:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002d06:	2200      	movs	r2, #0
 8002d08:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002d0a:	7bfa      	ldrb	r2, [r7, #15]
 8002d0c:	6879      	ldr	r1, [r7, #4]
 8002d0e:	4613      	mov	r3, r2
 8002d10:	00db      	lsls	r3, r3, #3
 8002d12:	4413      	add	r3, r2
 8002d14:	009b      	lsls	r3, r3, #2
 8002d16:	440b      	add	r3, r1
 8002d18:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002d1c:	7bfa      	ldrb	r2, [r7, #15]
 8002d1e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002d20:	7bfa      	ldrb	r2, [r7, #15]
 8002d22:	6879      	ldr	r1, [r7, #4]
 8002d24:	4613      	mov	r3, r2
 8002d26:	00db      	lsls	r3, r3, #3
 8002d28:	4413      	add	r3, r2
 8002d2a:	009b      	lsls	r3, r3, #2
 8002d2c:	440b      	add	r3, r1
 8002d2e:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002d32:	2200      	movs	r2, #0
 8002d34:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002d36:	7bfa      	ldrb	r2, [r7, #15]
 8002d38:	6879      	ldr	r1, [r7, #4]
 8002d3a:	4613      	mov	r3, r2
 8002d3c:	00db      	lsls	r3, r3, #3
 8002d3e:	4413      	add	r3, r2
 8002d40:	009b      	lsls	r3, r3, #2
 8002d42:	440b      	add	r3, r1
 8002d44:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002d48:	2200      	movs	r2, #0
 8002d4a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002d4c:	7bfa      	ldrb	r2, [r7, #15]
 8002d4e:	6879      	ldr	r1, [r7, #4]
 8002d50:	4613      	mov	r3, r2
 8002d52:	00db      	lsls	r3, r3, #3
 8002d54:	4413      	add	r3, r2
 8002d56:	009b      	lsls	r3, r3, #2
 8002d58:	440b      	add	r3, r1
 8002d5a:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002d5e:	2200      	movs	r2, #0
 8002d60:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002d62:	7bfa      	ldrb	r2, [r7, #15]
 8002d64:	6879      	ldr	r1, [r7, #4]
 8002d66:	4613      	mov	r3, r2
 8002d68:	00db      	lsls	r3, r3, #3
 8002d6a:	4413      	add	r3, r2
 8002d6c:	009b      	lsls	r3, r3, #2
 8002d6e:	440b      	add	r3, r1
 8002d70:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002d74:	2200      	movs	r2, #0
 8002d76:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d78:	7bfb      	ldrb	r3, [r7, #15]
 8002d7a:	3301      	adds	r3, #1
 8002d7c:	73fb      	strb	r3, [r7, #15]
 8002d7e:	7bfa      	ldrb	r2, [r7, #15]
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	685b      	ldr	r3, [r3, #4]
 8002d84:	429a      	cmp	r2, r3
 8002d86:	d3b5      	bcc.n	8002cf4 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	603b      	str	r3, [r7, #0]
 8002d8e:	687e      	ldr	r6, [r7, #4]
 8002d90:	466d      	mov	r5, sp
 8002d92:	f106 0410 	add.w	r4, r6, #16
 8002d96:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002d98:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002d9a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002d9c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002d9e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002da2:	e885 0003 	stmia.w	r5, {r0, r1}
 8002da6:	1d33      	adds	r3, r6, #4
 8002da8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002daa:	6838      	ldr	r0, [r7, #0]
 8002dac:	f004 f9b2 	bl	8007114 <USB_DevInit>
 8002db0:	4603      	mov	r3, r0
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d005      	beq.n	8002dc2 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	2202      	movs	r2, #2
 8002dba:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	e00d      	b.n	8002dde <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	2201      	movs	r2, #1
 8002dce:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	f005 fb01 	bl	80083de <USB_DevDisconnect>

  return HAL_OK;
 8002ddc:	2300      	movs	r3, #0
}
 8002dde:	4618      	mov	r0, r3
 8002de0:	3714      	adds	r7, #20
 8002de2:	46bd      	mov	sp, r7
 8002de4:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002de6 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002de6:	b580      	push	{r7, lr}
 8002de8:	b084      	sub	sp, #16
 8002dea:	af00      	add	r7, sp, #0
 8002dec:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002dfa:	2b01      	cmp	r3, #1
 8002dfc:	d101      	bne.n	8002e02 <HAL_PCD_Start+0x1c>
 8002dfe:	2302      	movs	r3, #2
 8002e00:	e020      	b.n	8002e44 <HAL_PCD_Start+0x5e>
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	2201      	movs	r2, #1
 8002e06:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e0e:	2b01      	cmp	r3, #1
 8002e10:	d109      	bne.n	8002e26 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002e16:	2b01      	cmp	r3, #1
 8002e18:	d005      	beq.n	8002e26 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e1e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	f004 f904 	bl	8007038 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	4618      	mov	r0, r3
 8002e36:	f005 fab1 	bl	800839c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002e42:	2300      	movs	r3, #0
}
 8002e44:	4618      	mov	r0, r3
 8002e46:	3710      	adds	r7, #16
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	bd80      	pop	{r7, pc}

08002e4c <HAL_PCD_Stop>:
  * @brief  Stop the USB device.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Stop(PCD_HandleTypeDef *hpcd)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b084      	sub	sp, #16
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002e60:	2b01      	cmp	r3, #1
 8002e62:	d101      	bne.n	8002e68 <HAL_PCD_Stop+0x1c>
 8002e64:	2302      	movs	r3, #2
 8002e66:	e026      	b.n	8002eb6 <HAL_PCD_Stop+0x6a>
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2201      	movs	r2, #1
 8002e6c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  __HAL_PCD_DISABLE(hpcd);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	4618      	mov	r0, r3
 8002e76:	f004 f8f0 	bl	800705a <USB_DisableGlobalInt>
  (void)USB_DevDisconnect(hpcd->Instance);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	4618      	mov	r0, r3
 8002e80:	f005 faad 	bl	80083de <USB_DevDisconnect>

  (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	2110      	movs	r1, #16
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	f004 faa6 	bl	80073dc <USB_FlushTxFifo>

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e94:	2b01      	cmp	r3, #1
 8002e96:	d109      	bne.n	8002eac <HAL_PCD_Stop+0x60>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002e9c:	2b01      	cmp	r3, #1
 8002e9e:	d005      	beq.n	8002eac <HAL_PCD_Stop+0x60>
  {
    /* Disable USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ea4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_UNLOCK(hpcd);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2200      	movs	r2, #0
 8002eb0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002eb4:	2300      	movs	r3, #0
}
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	3710      	adds	r7, #16
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	bd80      	pop	{r7, pc}

08002ebe <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002ebe:	b590      	push	{r4, r7, lr}
 8002ec0:	b08d      	sub	sp, #52	; 0x34
 8002ec2:	af00      	add	r7, sp, #0
 8002ec4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002ecc:	6a3b      	ldr	r3, [r7, #32]
 8002ece:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	f005 fb36 	bl	8008546 <USB_GetMode>
 8002eda:	4603      	mov	r3, r0
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	f040 848a 	bne.w	80037f6 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	f005 fa9a 	bl	8008420 <USB_ReadInterrupts>
 8002eec:	4603      	mov	r3, r0
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	f000 8480 	beq.w	80037f4 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002ef4:	69fb      	ldr	r3, [r7, #28]
 8002ef6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002efa:	689b      	ldr	r3, [r3, #8]
 8002efc:	0a1b      	lsrs	r3, r3, #8
 8002efe:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	f005 fa87 	bl	8008420 <USB_ReadInterrupts>
 8002f12:	4603      	mov	r3, r0
 8002f14:	f003 0302 	and.w	r3, r3, #2
 8002f18:	2b02      	cmp	r3, #2
 8002f1a:	d107      	bne.n	8002f2c <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	695a      	ldr	r2, [r3, #20]
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f002 0202 	and.w	r2, r2, #2
 8002f2a:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	4618      	mov	r0, r3
 8002f32:	f005 fa75 	bl	8008420 <USB_ReadInterrupts>
 8002f36:	4603      	mov	r3, r0
 8002f38:	f003 0310 	and.w	r3, r3, #16
 8002f3c:	2b10      	cmp	r3, #16
 8002f3e:	d161      	bne.n	8003004 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	699a      	ldr	r2, [r3, #24]
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f022 0210 	bic.w	r2, r2, #16
 8002f4e:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002f50:	6a3b      	ldr	r3, [r7, #32]
 8002f52:	6a1b      	ldr	r3, [r3, #32]
 8002f54:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002f56:	69bb      	ldr	r3, [r7, #24]
 8002f58:	f003 020f 	and.w	r2, r3, #15
 8002f5c:	4613      	mov	r3, r2
 8002f5e:	00db      	lsls	r3, r3, #3
 8002f60:	4413      	add	r3, r2
 8002f62:	009b      	lsls	r3, r3, #2
 8002f64:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002f68:	687a      	ldr	r2, [r7, #4]
 8002f6a:	4413      	add	r3, r2
 8002f6c:	3304      	adds	r3, #4
 8002f6e:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002f70:	69bb      	ldr	r3, [r7, #24]
 8002f72:	0c5b      	lsrs	r3, r3, #17
 8002f74:	f003 030f 	and.w	r3, r3, #15
 8002f78:	2b02      	cmp	r3, #2
 8002f7a:	d124      	bne.n	8002fc6 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002f7c:	69ba      	ldr	r2, [r7, #24]
 8002f7e:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002f82:	4013      	ands	r3, r2
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d035      	beq.n	8002ff4 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002f88:	697b      	ldr	r3, [r7, #20]
 8002f8a:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002f8c:	69bb      	ldr	r3, [r7, #24]
 8002f8e:	091b      	lsrs	r3, r3, #4
 8002f90:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002f92:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002f96:	b29b      	uxth	r3, r3
 8002f98:	461a      	mov	r2, r3
 8002f9a:	6a38      	ldr	r0, [r7, #32]
 8002f9c:	f005 f8ac 	bl	80080f8 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002fa0:	697b      	ldr	r3, [r7, #20]
 8002fa2:	691a      	ldr	r2, [r3, #16]
 8002fa4:	69bb      	ldr	r3, [r7, #24]
 8002fa6:	091b      	lsrs	r3, r3, #4
 8002fa8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002fac:	441a      	add	r2, r3
 8002fae:	697b      	ldr	r3, [r7, #20]
 8002fb0:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002fb2:	697b      	ldr	r3, [r7, #20]
 8002fb4:	6a1a      	ldr	r2, [r3, #32]
 8002fb6:	69bb      	ldr	r3, [r7, #24]
 8002fb8:	091b      	lsrs	r3, r3, #4
 8002fba:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002fbe:	441a      	add	r2, r3
 8002fc0:	697b      	ldr	r3, [r7, #20]
 8002fc2:	621a      	str	r2, [r3, #32]
 8002fc4:	e016      	b.n	8002ff4 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002fc6:	69bb      	ldr	r3, [r7, #24]
 8002fc8:	0c5b      	lsrs	r3, r3, #17
 8002fca:	f003 030f 	and.w	r3, r3, #15
 8002fce:	2b06      	cmp	r3, #6
 8002fd0:	d110      	bne.n	8002ff4 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002fd8:	2208      	movs	r2, #8
 8002fda:	4619      	mov	r1, r3
 8002fdc:	6a38      	ldr	r0, [r7, #32]
 8002fde:	f005 f88b 	bl	80080f8 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002fe2:	697b      	ldr	r3, [r7, #20]
 8002fe4:	6a1a      	ldr	r2, [r3, #32]
 8002fe6:	69bb      	ldr	r3, [r7, #24]
 8002fe8:	091b      	lsrs	r3, r3, #4
 8002fea:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002fee:	441a      	add	r2, r3
 8002ff0:	697b      	ldr	r3, [r7, #20]
 8002ff2:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	699a      	ldr	r2, [r3, #24]
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f042 0210 	orr.w	r2, r2, #16
 8003002:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4618      	mov	r0, r3
 800300a:	f005 fa09 	bl	8008420 <USB_ReadInterrupts>
 800300e:	4603      	mov	r3, r0
 8003010:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003014:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003018:	f040 80a7 	bne.w	800316a <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800301c:	2300      	movs	r3, #0
 800301e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	4618      	mov	r0, r3
 8003026:	f005 fa0e 	bl	8008446 <USB_ReadDevAllOutEpInterrupt>
 800302a:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800302c:	e099      	b.n	8003162 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800302e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003030:	f003 0301 	and.w	r3, r3, #1
 8003034:	2b00      	cmp	r3, #0
 8003036:	f000 808e 	beq.w	8003156 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003040:	b2d2      	uxtb	r2, r2
 8003042:	4611      	mov	r1, r2
 8003044:	4618      	mov	r0, r3
 8003046:	f005 fa32 	bl	80084ae <USB_ReadDevOutEPInterrupt>
 800304a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800304c:	693b      	ldr	r3, [r7, #16]
 800304e:	f003 0301 	and.w	r3, r3, #1
 8003052:	2b00      	cmp	r3, #0
 8003054:	d00c      	beq.n	8003070 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003058:	015a      	lsls	r2, r3, #5
 800305a:	69fb      	ldr	r3, [r7, #28]
 800305c:	4413      	add	r3, r2
 800305e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003062:	461a      	mov	r2, r3
 8003064:	2301      	movs	r3, #1
 8003066:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003068:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800306a:	6878      	ldr	r0, [r7, #4]
 800306c:	f000 fef0 	bl	8003e50 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003070:	693b      	ldr	r3, [r7, #16]
 8003072:	f003 0308 	and.w	r3, r3, #8
 8003076:	2b00      	cmp	r3, #0
 8003078:	d00c      	beq.n	8003094 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800307a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800307c:	015a      	lsls	r2, r3, #5
 800307e:	69fb      	ldr	r3, [r7, #28]
 8003080:	4413      	add	r3, r2
 8003082:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003086:	461a      	mov	r2, r3
 8003088:	2308      	movs	r3, #8
 800308a:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800308c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800308e:	6878      	ldr	r0, [r7, #4]
 8003090:	f000 ffc6 	bl	8004020 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003094:	693b      	ldr	r3, [r7, #16]
 8003096:	f003 0310 	and.w	r3, r3, #16
 800309a:	2b00      	cmp	r3, #0
 800309c:	d008      	beq.n	80030b0 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800309e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030a0:	015a      	lsls	r2, r3, #5
 80030a2:	69fb      	ldr	r3, [r7, #28]
 80030a4:	4413      	add	r3, r2
 80030a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030aa:	461a      	mov	r2, r3
 80030ac:	2310      	movs	r3, #16
 80030ae:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80030b0:	693b      	ldr	r3, [r7, #16]
 80030b2:	f003 0302 	and.w	r3, r3, #2
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d030      	beq.n	800311c <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80030ba:	6a3b      	ldr	r3, [r7, #32]
 80030bc:	695b      	ldr	r3, [r3, #20]
 80030be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030c2:	2b80      	cmp	r3, #128	; 0x80
 80030c4:	d109      	bne.n	80030da <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80030c6:	69fb      	ldr	r3, [r7, #28]
 80030c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80030cc:	685b      	ldr	r3, [r3, #4]
 80030ce:	69fa      	ldr	r2, [r7, #28]
 80030d0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80030d4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80030d8:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80030da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030dc:	4613      	mov	r3, r2
 80030de:	00db      	lsls	r3, r3, #3
 80030e0:	4413      	add	r3, r2
 80030e2:	009b      	lsls	r3, r3, #2
 80030e4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80030e8:	687a      	ldr	r2, [r7, #4]
 80030ea:	4413      	add	r3, r2
 80030ec:	3304      	adds	r3, #4
 80030ee:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80030f0:	697b      	ldr	r3, [r7, #20]
 80030f2:	78db      	ldrb	r3, [r3, #3]
 80030f4:	2b01      	cmp	r3, #1
 80030f6:	d108      	bne.n	800310a <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80030f8:	697b      	ldr	r3, [r7, #20]
 80030fa:	2200      	movs	r2, #0
 80030fc:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80030fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003100:	b2db      	uxtb	r3, r3
 8003102:	4619      	mov	r1, r3
 8003104:	6878      	ldr	r0, [r7, #4]
 8003106:	f009 f937 	bl	800c378 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800310a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800310c:	015a      	lsls	r2, r3, #5
 800310e:	69fb      	ldr	r3, [r7, #28]
 8003110:	4413      	add	r3, r2
 8003112:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003116:	461a      	mov	r2, r3
 8003118:	2302      	movs	r3, #2
 800311a:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800311c:	693b      	ldr	r3, [r7, #16]
 800311e:	f003 0320 	and.w	r3, r3, #32
 8003122:	2b00      	cmp	r3, #0
 8003124:	d008      	beq.n	8003138 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003128:	015a      	lsls	r2, r3, #5
 800312a:	69fb      	ldr	r3, [r7, #28]
 800312c:	4413      	add	r3, r2
 800312e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003132:	461a      	mov	r2, r3
 8003134:	2320      	movs	r3, #32
 8003136:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003138:	693b      	ldr	r3, [r7, #16]
 800313a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800313e:	2b00      	cmp	r3, #0
 8003140:	d009      	beq.n	8003156 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003144:	015a      	lsls	r2, r3, #5
 8003146:	69fb      	ldr	r3, [r7, #28]
 8003148:	4413      	add	r3, r2
 800314a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800314e:	461a      	mov	r2, r3
 8003150:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003154:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003158:	3301      	adds	r3, #1
 800315a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800315c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800315e:	085b      	lsrs	r3, r3, #1
 8003160:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003162:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003164:	2b00      	cmp	r3, #0
 8003166:	f47f af62 	bne.w	800302e <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	4618      	mov	r0, r3
 8003170:	f005 f956 	bl	8008420 <USB_ReadInterrupts>
 8003174:	4603      	mov	r3, r0
 8003176:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800317a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800317e:	f040 80db 	bne.w	8003338 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	4618      	mov	r0, r3
 8003188:	f005 f977 	bl	800847a <USB_ReadDevAllInEpInterrupt>
 800318c:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800318e:	2300      	movs	r3, #0
 8003190:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8003192:	e0cd      	b.n	8003330 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003194:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003196:	f003 0301 	and.w	r3, r3, #1
 800319a:	2b00      	cmp	r3, #0
 800319c:	f000 80c2 	beq.w	8003324 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031a6:	b2d2      	uxtb	r2, r2
 80031a8:	4611      	mov	r1, r2
 80031aa:	4618      	mov	r0, r3
 80031ac:	f005 f99d 	bl	80084ea <USB_ReadDevInEPInterrupt>
 80031b0:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80031b2:	693b      	ldr	r3, [r7, #16]
 80031b4:	f003 0301 	and.w	r3, r3, #1
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d057      	beq.n	800326c <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80031bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031be:	f003 030f 	and.w	r3, r3, #15
 80031c2:	2201      	movs	r2, #1
 80031c4:	fa02 f303 	lsl.w	r3, r2, r3
 80031c8:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80031ca:	69fb      	ldr	r3, [r7, #28]
 80031cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80031d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	43db      	mvns	r3, r3
 80031d6:	69f9      	ldr	r1, [r7, #28]
 80031d8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80031dc:	4013      	ands	r3, r2
 80031de:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80031e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031e2:	015a      	lsls	r2, r3, #5
 80031e4:	69fb      	ldr	r3, [r7, #28]
 80031e6:	4413      	add	r3, r2
 80031e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80031ec:	461a      	mov	r2, r3
 80031ee:	2301      	movs	r3, #1
 80031f0:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	691b      	ldr	r3, [r3, #16]
 80031f6:	2b01      	cmp	r3, #1
 80031f8:	d132      	bne.n	8003260 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80031fa:	6879      	ldr	r1, [r7, #4]
 80031fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031fe:	4613      	mov	r3, r2
 8003200:	00db      	lsls	r3, r3, #3
 8003202:	4413      	add	r3, r2
 8003204:	009b      	lsls	r3, r3, #2
 8003206:	440b      	add	r3, r1
 8003208:	334c      	adds	r3, #76	; 0x4c
 800320a:	6819      	ldr	r1, [r3, #0]
 800320c:	6878      	ldr	r0, [r7, #4]
 800320e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003210:	4613      	mov	r3, r2
 8003212:	00db      	lsls	r3, r3, #3
 8003214:	4413      	add	r3, r2
 8003216:	009b      	lsls	r3, r3, #2
 8003218:	4403      	add	r3, r0
 800321a:	3348      	adds	r3, #72	; 0x48
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	4419      	add	r1, r3
 8003220:	6878      	ldr	r0, [r7, #4]
 8003222:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003224:	4613      	mov	r3, r2
 8003226:	00db      	lsls	r3, r3, #3
 8003228:	4413      	add	r3, r2
 800322a:	009b      	lsls	r3, r3, #2
 800322c:	4403      	add	r3, r0
 800322e:	334c      	adds	r3, #76	; 0x4c
 8003230:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003234:	2b00      	cmp	r3, #0
 8003236:	d113      	bne.n	8003260 <HAL_PCD_IRQHandler+0x3a2>
 8003238:	6879      	ldr	r1, [r7, #4]
 800323a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800323c:	4613      	mov	r3, r2
 800323e:	00db      	lsls	r3, r3, #3
 8003240:	4413      	add	r3, r2
 8003242:	009b      	lsls	r3, r3, #2
 8003244:	440b      	add	r3, r1
 8003246:	3354      	adds	r3, #84	; 0x54
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	2b00      	cmp	r3, #0
 800324c:	d108      	bne.n	8003260 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6818      	ldr	r0, [r3, #0]
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003258:	461a      	mov	r2, r3
 800325a:	2101      	movs	r1, #1
 800325c:	f005 f9a4 	bl	80085a8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003262:	b2db      	uxtb	r3, r3
 8003264:	4619      	mov	r1, r3
 8003266:	6878      	ldr	r0, [r7, #4]
 8003268:	f009 f80b 	bl	800c282 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800326c:	693b      	ldr	r3, [r7, #16]
 800326e:	f003 0308 	and.w	r3, r3, #8
 8003272:	2b00      	cmp	r3, #0
 8003274:	d008      	beq.n	8003288 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003278:	015a      	lsls	r2, r3, #5
 800327a:	69fb      	ldr	r3, [r7, #28]
 800327c:	4413      	add	r3, r2
 800327e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003282:	461a      	mov	r2, r3
 8003284:	2308      	movs	r3, #8
 8003286:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003288:	693b      	ldr	r3, [r7, #16]
 800328a:	f003 0310 	and.w	r3, r3, #16
 800328e:	2b00      	cmp	r3, #0
 8003290:	d008      	beq.n	80032a4 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003294:	015a      	lsls	r2, r3, #5
 8003296:	69fb      	ldr	r3, [r7, #28]
 8003298:	4413      	add	r3, r2
 800329a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800329e:	461a      	mov	r2, r3
 80032a0:	2310      	movs	r3, #16
 80032a2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80032a4:	693b      	ldr	r3, [r7, #16]
 80032a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d008      	beq.n	80032c0 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80032ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032b0:	015a      	lsls	r2, r3, #5
 80032b2:	69fb      	ldr	r3, [r7, #28]
 80032b4:	4413      	add	r3, r2
 80032b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80032ba:	461a      	mov	r2, r3
 80032bc:	2340      	movs	r3, #64	; 0x40
 80032be:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80032c0:	693b      	ldr	r3, [r7, #16]
 80032c2:	f003 0302 	and.w	r3, r3, #2
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d023      	beq.n	8003312 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80032ca:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80032cc:	6a38      	ldr	r0, [r7, #32]
 80032ce:	f004 f885 	bl	80073dc <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80032d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032d4:	4613      	mov	r3, r2
 80032d6:	00db      	lsls	r3, r3, #3
 80032d8:	4413      	add	r3, r2
 80032da:	009b      	lsls	r3, r3, #2
 80032dc:	3338      	adds	r3, #56	; 0x38
 80032de:	687a      	ldr	r2, [r7, #4]
 80032e0:	4413      	add	r3, r2
 80032e2:	3304      	adds	r3, #4
 80032e4:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80032e6:	697b      	ldr	r3, [r7, #20]
 80032e8:	78db      	ldrb	r3, [r3, #3]
 80032ea:	2b01      	cmp	r3, #1
 80032ec:	d108      	bne.n	8003300 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80032ee:	697b      	ldr	r3, [r7, #20]
 80032f0:	2200      	movs	r2, #0
 80032f2:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80032f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032f6:	b2db      	uxtb	r3, r3
 80032f8:	4619      	mov	r1, r3
 80032fa:	6878      	ldr	r0, [r7, #4]
 80032fc:	f009 f84e 	bl	800c39c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003302:	015a      	lsls	r2, r3, #5
 8003304:	69fb      	ldr	r3, [r7, #28]
 8003306:	4413      	add	r3, r2
 8003308:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800330c:	461a      	mov	r2, r3
 800330e:	2302      	movs	r3, #2
 8003310:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003312:	693b      	ldr	r3, [r7, #16]
 8003314:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003318:	2b00      	cmp	r3, #0
 800331a:	d003      	beq.n	8003324 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800331c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800331e:	6878      	ldr	r0, [r7, #4]
 8003320:	f000 fd08 	bl	8003d34 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003326:	3301      	adds	r3, #1
 8003328:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800332a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800332c:	085b      	lsrs	r3, r3, #1
 800332e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003330:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003332:	2b00      	cmp	r3, #0
 8003334:	f47f af2e 	bne.w	8003194 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	4618      	mov	r0, r3
 800333e:	f005 f86f 	bl	8008420 <USB_ReadInterrupts>
 8003342:	4603      	mov	r3, r0
 8003344:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003348:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800334c:	d122      	bne.n	8003394 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800334e:	69fb      	ldr	r3, [r7, #28]
 8003350:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003354:	685b      	ldr	r3, [r3, #4]
 8003356:	69fa      	ldr	r2, [r7, #28]
 8003358:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800335c:	f023 0301 	bic.w	r3, r3, #1
 8003360:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8003368:	2b01      	cmp	r3, #1
 800336a:	d108      	bne.n	800337e <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2200      	movs	r2, #0
 8003370:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003374:	2100      	movs	r1, #0
 8003376:	6878      	ldr	r0, [r7, #4]
 8003378:	f000 fef0 	bl	800415c <HAL_PCDEx_LPM_Callback>
 800337c:	e002      	b.n	8003384 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800337e:	6878      	ldr	r0, [r7, #4]
 8003380:	f008 ffec 	bl	800c35c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	695a      	ldr	r2, [r3, #20]
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8003392:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	4618      	mov	r0, r3
 800339a:	f005 f841 	bl	8008420 <USB_ReadInterrupts>
 800339e:	4603      	mov	r3, r0
 80033a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80033a4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80033a8:	d112      	bne.n	80033d0 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80033aa:	69fb      	ldr	r3, [r7, #28]
 80033ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80033b0:	689b      	ldr	r3, [r3, #8]
 80033b2:	f003 0301 	and.w	r3, r3, #1
 80033b6:	2b01      	cmp	r3, #1
 80033b8:	d102      	bne.n	80033c0 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80033ba:	6878      	ldr	r0, [r7, #4]
 80033bc:	f008 ffa8 	bl	800c310 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	695a      	ldr	r2, [r3, #20]
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80033ce:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	4618      	mov	r0, r3
 80033d6:	f005 f823 	bl	8008420 <USB_ReadInterrupts>
 80033da:	4603      	mov	r3, r0
 80033dc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80033e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033e4:	f040 80b7 	bne.w	8003556 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80033e8:	69fb      	ldr	r3, [r7, #28]
 80033ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80033ee:	685b      	ldr	r3, [r3, #4]
 80033f0:	69fa      	ldr	r2, [r7, #28]
 80033f2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80033f6:	f023 0301 	bic.w	r3, r3, #1
 80033fa:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	2110      	movs	r1, #16
 8003402:	4618      	mov	r0, r3
 8003404:	f003 ffea 	bl	80073dc <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003408:	2300      	movs	r3, #0
 800340a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800340c:	e046      	b.n	800349c <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800340e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003410:	015a      	lsls	r2, r3, #5
 8003412:	69fb      	ldr	r3, [r7, #28]
 8003414:	4413      	add	r3, r2
 8003416:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800341a:	461a      	mov	r2, r3
 800341c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003420:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003422:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003424:	015a      	lsls	r2, r3, #5
 8003426:	69fb      	ldr	r3, [r7, #28]
 8003428:	4413      	add	r3, r2
 800342a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003432:	0151      	lsls	r1, r2, #5
 8003434:	69fa      	ldr	r2, [r7, #28]
 8003436:	440a      	add	r2, r1
 8003438:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800343c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003440:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003442:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003444:	015a      	lsls	r2, r3, #5
 8003446:	69fb      	ldr	r3, [r7, #28]
 8003448:	4413      	add	r3, r2
 800344a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800344e:	461a      	mov	r2, r3
 8003450:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003454:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003456:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003458:	015a      	lsls	r2, r3, #5
 800345a:	69fb      	ldr	r3, [r7, #28]
 800345c:	4413      	add	r3, r2
 800345e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003466:	0151      	lsls	r1, r2, #5
 8003468:	69fa      	ldr	r2, [r7, #28]
 800346a:	440a      	add	r2, r1
 800346c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003470:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003474:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003476:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003478:	015a      	lsls	r2, r3, #5
 800347a:	69fb      	ldr	r3, [r7, #28]
 800347c:	4413      	add	r3, r2
 800347e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003486:	0151      	lsls	r1, r2, #5
 8003488:	69fa      	ldr	r2, [r7, #28]
 800348a:	440a      	add	r2, r1
 800348c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003490:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003494:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003496:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003498:	3301      	adds	r3, #1
 800349a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	685b      	ldr	r3, [r3, #4]
 80034a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80034a2:	429a      	cmp	r2, r3
 80034a4:	d3b3      	bcc.n	800340e <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80034a6:	69fb      	ldr	r3, [r7, #28]
 80034a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80034ac:	69db      	ldr	r3, [r3, #28]
 80034ae:	69fa      	ldr	r2, [r7, #28]
 80034b0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80034b4:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80034b8:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d016      	beq.n	80034f0 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80034c2:	69fb      	ldr	r3, [r7, #28]
 80034c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80034c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80034cc:	69fa      	ldr	r2, [r7, #28]
 80034ce:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80034d2:	f043 030b 	orr.w	r3, r3, #11
 80034d6:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80034da:	69fb      	ldr	r3, [r7, #28]
 80034dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80034e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034e2:	69fa      	ldr	r2, [r7, #28]
 80034e4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80034e8:	f043 030b 	orr.w	r3, r3, #11
 80034ec:	6453      	str	r3, [r2, #68]	; 0x44
 80034ee:	e015      	b.n	800351c <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80034f0:	69fb      	ldr	r3, [r7, #28]
 80034f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80034f6:	695b      	ldr	r3, [r3, #20]
 80034f8:	69fa      	ldr	r2, [r7, #28]
 80034fa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80034fe:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003502:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8003506:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003508:	69fb      	ldr	r3, [r7, #28]
 800350a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800350e:	691b      	ldr	r3, [r3, #16]
 8003510:	69fa      	ldr	r2, [r7, #28]
 8003512:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003516:	f043 030b 	orr.w	r3, r3, #11
 800351a:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800351c:	69fb      	ldr	r3, [r7, #28]
 800351e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	69fa      	ldr	r2, [r7, #28]
 8003526:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800352a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800352e:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6818      	ldr	r0, [r3, #0]
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	691b      	ldr	r3, [r3, #16]
 8003538:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003540:	461a      	mov	r2, r3
 8003542:	f005 f831 	bl	80085a8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	695a      	ldr	r2, [r3, #20]
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003554:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	4618      	mov	r0, r3
 800355c:	f004 ff60 	bl	8008420 <USB_ReadInterrupts>
 8003560:	4603      	mov	r3, r0
 8003562:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003566:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800356a:	d124      	bne.n	80035b6 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	4618      	mov	r0, r3
 8003572:	f004 fff6 	bl	8008562 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	4618      	mov	r0, r3
 800357c:	f003 ffab 	bl	80074d6 <USB_GetDevSpeed>
 8003580:	4603      	mov	r3, r0
 8003582:	461a      	mov	r2, r3
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681c      	ldr	r4, [r3, #0]
 800358c:	f001 fa16 	bl	80049bc <HAL_RCC_GetHCLKFreq>
 8003590:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003596:	b2db      	uxtb	r3, r3
 8003598:	461a      	mov	r2, r3
 800359a:	4620      	mov	r0, r4
 800359c:	f003 fcaa 	bl	8006ef4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80035a0:	6878      	ldr	r0, [r7, #4]
 80035a2:	f008 fe96 	bl	800c2d2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	695a      	ldr	r2, [r3, #20]
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80035b4:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	4618      	mov	r0, r3
 80035bc:	f004 ff30 	bl	8008420 <USB_ReadInterrupts>
 80035c0:	4603      	mov	r3, r0
 80035c2:	f003 0308 	and.w	r3, r3, #8
 80035c6:	2b08      	cmp	r3, #8
 80035c8:	d10a      	bne.n	80035e0 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80035ca:	6878      	ldr	r0, [r7, #4]
 80035cc:	f008 fe73 	bl	800c2b6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	695a      	ldr	r2, [r3, #20]
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f002 0208 	and.w	r2, r2, #8
 80035de:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	4618      	mov	r0, r3
 80035e6:	f004 ff1b 	bl	8008420 <USB_ReadInterrupts>
 80035ea:	4603      	mov	r3, r0
 80035ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035f0:	2b80      	cmp	r3, #128	; 0x80
 80035f2:	d122      	bne.n	800363a <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80035f4:	6a3b      	ldr	r3, [r7, #32]
 80035f6:	699b      	ldr	r3, [r3, #24]
 80035f8:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80035fc:	6a3b      	ldr	r3, [r7, #32]
 80035fe:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003600:	2301      	movs	r3, #1
 8003602:	627b      	str	r3, [r7, #36]	; 0x24
 8003604:	e014      	b.n	8003630 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003606:	6879      	ldr	r1, [r7, #4]
 8003608:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800360a:	4613      	mov	r3, r2
 800360c:	00db      	lsls	r3, r3, #3
 800360e:	4413      	add	r3, r2
 8003610:	009b      	lsls	r3, r3, #2
 8003612:	440b      	add	r3, r1
 8003614:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003618:	781b      	ldrb	r3, [r3, #0]
 800361a:	2b01      	cmp	r3, #1
 800361c:	d105      	bne.n	800362a <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800361e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003620:	b2db      	uxtb	r3, r3
 8003622:	4619      	mov	r1, r3
 8003624:	6878      	ldr	r0, [r7, #4]
 8003626:	f000 fb27 	bl	8003c78 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800362a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800362c:	3301      	adds	r3, #1
 800362e:	627b      	str	r3, [r7, #36]	; 0x24
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	685b      	ldr	r3, [r3, #4]
 8003634:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003636:	429a      	cmp	r2, r3
 8003638:	d3e5      	bcc.n	8003606 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	4618      	mov	r0, r3
 8003640:	f004 feee 	bl	8008420 <USB_ReadInterrupts>
 8003644:	4603      	mov	r3, r0
 8003646:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800364a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800364e:	d13b      	bne.n	80036c8 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003650:	2301      	movs	r3, #1
 8003652:	627b      	str	r3, [r7, #36]	; 0x24
 8003654:	e02b      	b.n	80036ae <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003658:	015a      	lsls	r2, r3, #5
 800365a:	69fb      	ldr	r3, [r7, #28]
 800365c:	4413      	add	r3, r2
 800365e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003666:	6879      	ldr	r1, [r7, #4]
 8003668:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800366a:	4613      	mov	r3, r2
 800366c:	00db      	lsls	r3, r3, #3
 800366e:	4413      	add	r3, r2
 8003670:	009b      	lsls	r3, r3, #2
 8003672:	440b      	add	r3, r1
 8003674:	3340      	adds	r3, #64	; 0x40
 8003676:	781b      	ldrb	r3, [r3, #0]
 8003678:	2b01      	cmp	r3, #1
 800367a:	d115      	bne.n	80036a8 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800367c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800367e:	2b00      	cmp	r3, #0
 8003680:	da12      	bge.n	80036a8 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003682:	6879      	ldr	r1, [r7, #4]
 8003684:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003686:	4613      	mov	r3, r2
 8003688:	00db      	lsls	r3, r3, #3
 800368a:	4413      	add	r3, r2
 800368c:	009b      	lsls	r3, r3, #2
 800368e:	440b      	add	r3, r1
 8003690:	333f      	adds	r3, #63	; 0x3f
 8003692:	2201      	movs	r2, #1
 8003694:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8003696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003698:	b2db      	uxtb	r3, r3
 800369a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800369e:	b2db      	uxtb	r3, r3
 80036a0:	4619      	mov	r1, r3
 80036a2:	6878      	ldr	r0, [r7, #4]
 80036a4:	f000 fae8 	bl	8003c78 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80036a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036aa:	3301      	adds	r3, #1
 80036ac:	627b      	str	r3, [r7, #36]	; 0x24
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	685b      	ldr	r3, [r3, #4]
 80036b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036b4:	429a      	cmp	r2, r3
 80036b6:	d3ce      	bcc.n	8003656 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	695a      	ldr	r2, [r3, #20]
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80036c6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	4618      	mov	r0, r3
 80036ce:	f004 fea7 	bl	8008420 <USB_ReadInterrupts>
 80036d2:	4603      	mov	r3, r0
 80036d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80036d8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80036dc:	d155      	bne.n	800378a <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80036de:	2301      	movs	r3, #1
 80036e0:	627b      	str	r3, [r7, #36]	; 0x24
 80036e2:	e045      	b.n	8003770 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80036e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036e6:	015a      	lsls	r2, r3, #5
 80036e8:	69fb      	ldr	r3, [r7, #28]
 80036ea:	4413      	add	r3, r2
 80036ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80036f4:	6879      	ldr	r1, [r7, #4]
 80036f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036f8:	4613      	mov	r3, r2
 80036fa:	00db      	lsls	r3, r3, #3
 80036fc:	4413      	add	r3, r2
 80036fe:	009b      	lsls	r3, r3, #2
 8003700:	440b      	add	r3, r1
 8003702:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003706:	781b      	ldrb	r3, [r3, #0]
 8003708:	2b01      	cmp	r3, #1
 800370a:	d12e      	bne.n	800376a <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800370c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800370e:	2b00      	cmp	r3, #0
 8003710:	da2b      	bge.n	800376a <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8003712:	69bb      	ldr	r3, [r7, #24]
 8003714:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 800371e:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003722:	429a      	cmp	r2, r3
 8003724:	d121      	bne.n	800376a <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8003726:	6879      	ldr	r1, [r7, #4]
 8003728:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800372a:	4613      	mov	r3, r2
 800372c:	00db      	lsls	r3, r3, #3
 800372e:	4413      	add	r3, r2
 8003730:	009b      	lsls	r3, r3, #2
 8003732:	440b      	add	r3, r1
 8003734:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003738:	2201      	movs	r2, #1
 800373a:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800373c:	6a3b      	ldr	r3, [r7, #32]
 800373e:	699b      	ldr	r3, [r3, #24]
 8003740:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003744:	6a3b      	ldr	r3, [r7, #32]
 8003746:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8003748:	6a3b      	ldr	r3, [r7, #32]
 800374a:	695b      	ldr	r3, [r3, #20]
 800374c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003750:	2b00      	cmp	r3, #0
 8003752:	d10a      	bne.n	800376a <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8003754:	69fb      	ldr	r3, [r7, #28]
 8003756:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800375a:	685b      	ldr	r3, [r3, #4]
 800375c:	69fa      	ldr	r2, [r7, #28]
 800375e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003762:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003766:	6053      	str	r3, [r2, #4]
            break;
 8003768:	e007      	b.n	800377a <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800376a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800376c:	3301      	adds	r3, #1
 800376e:	627b      	str	r3, [r7, #36]	; 0x24
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	685b      	ldr	r3, [r3, #4]
 8003774:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003776:	429a      	cmp	r2, r3
 8003778:	d3b4      	bcc.n	80036e4 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	695a      	ldr	r2, [r3, #20]
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003788:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	4618      	mov	r0, r3
 8003790:	f004 fe46 	bl	8008420 <USB_ReadInterrupts>
 8003794:	4603      	mov	r3, r0
 8003796:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800379a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800379e:	d10a      	bne.n	80037b6 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80037a0:	6878      	ldr	r0, [r7, #4]
 80037a2:	f008 fe0d 	bl	800c3c0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	695a      	ldr	r2, [r3, #20]
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80037b4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	4618      	mov	r0, r3
 80037bc:	f004 fe30 	bl	8008420 <USB_ReadInterrupts>
 80037c0:	4603      	mov	r3, r0
 80037c2:	f003 0304 	and.w	r3, r3, #4
 80037c6:	2b04      	cmp	r3, #4
 80037c8:	d115      	bne.n	80037f6 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	685b      	ldr	r3, [r3, #4]
 80037d0:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80037d2:	69bb      	ldr	r3, [r7, #24]
 80037d4:	f003 0304 	and.w	r3, r3, #4
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d002      	beq.n	80037e2 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80037dc:	6878      	ldr	r0, [r7, #4]
 80037de:	f008 fdfd 	bl	800c3dc <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	6859      	ldr	r1, [r3, #4]
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	69ba      	ldr	r2, [r7, #24]
 80037ee:	430a      	orrs	r2, r1
 80037f0:	605a      	str	r2, [r3, #4]
 80037f2:	e000      	b.n	80037f6 <HAL_PCD_IRQHandler+0x938>
      return;
 80037f4:	bf00      	nop
    }
  }
}
 80037f6:	3734      	adds	r7, #52	; 0x34
 80037f8:	46bd      	mov	sp, r7
 80037fa:	bd90      	pop	{r4, r7, pc}

080037fc <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b082      	sub	sp, #8
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
 8003804:	460b      	mov	r3, r1
 8003806:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800380e:	2b01      	cmp	r3, #1
 8003810:	d101      	bne.n	8003816 <HAL_PCD_SetAddress+0x1a>
 8003812:	2302      	movs	r3, #2
 8003814:	e013      	b.n	800383e <HAL_PCD_SetAddress+0x42>
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	2201      	movs	r2, #1
 800381a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	78fa      	ldrb	r2, [r7, #3]
 8003822:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	78fa      	ldrb	r2, [r7, #3]
 800382c:	4611      	mov	r1, r2
 800382e:	4618      	mov	r0, r3
 8003830:	f004 fd8e 	bl	8008350 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2200      	movs	r2, #0
 8003838:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800383c:	2300      	movs	r3, #0
}
 800383e:	4618      	mov	r0, r3
 8003840:	3708      	adds	r7, #8
 8003842:	46bd      	mov	sp, r7
 8003844:	bd80      	pop	{r7, pc}

08003846 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003846:	b580      	push	{r7, lr}
 8003848:	b084      	sub	sp, #16
 800384a:	af00      	add	r7, sp, #0
 800384c:	6078      	str	r0, [r7, #4]
 800384e:	4608      	mov	r0, r1
 8003850:	4611      	mov	r1, r2
 8003852:	461a      	mov	r2, r3
 8003854:	4603      	mov	r3, r0
 8003856:	70fb      	strb	r3, [r7, #3]
 8003858:	460b      	mov	r3, r1
 800385a:	803b      	strh	r3, [r7, #0]
 800385c:	4613      	mov	r3, r2
 800385e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003860:	2300      	movs	r3, #0
 8003862:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003864:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003868:	2b00      	cmp	r3, #0
 800386a:	da0f      	bge.n	800388c <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800386c:	78fb      	ldrb	r3, [r7, #3]
 800386e:	f003 020f 	and.w	r2, r3, #15
 8003872:	4613      	mov	r3, r2
 8003874:	00db      	lsls	r3, r3, #3
 8003876:	4413      	add	r3, r2
 8003878:	009b      	lsls	r3, r3, #2
 800387a:	3338      	adds	r3, #56	; 0x38
 800387c:	687a      	ldr	r2, [r7, #4]
 800387e:	4413      	add	r3, r2
 8003880:	3304      	adds	r3, #4
 8003882:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	2201      	movs	r2, #1
 8003888:	705a      	strb	r2, [r3, #1]
 800388a:	e00f      	b.n	80038ac <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800388c:	78fb      	ldrb	r3, [r7, #3]
 800388e:	f003 020f 	and.w	r2, r3, #15
 8003892:	4613      	mov	r3, r2
 8003894:	00db      	lsls	r3, r3, #3
 8003896:	4413      	add	r3, r2
 8003898:	009b      	lsls	r3, r3, #2
 800389a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800389e:	687a      	ldr	r2, [r7, #4]
 80038a0:	4413      	add	r3, r2
 80038a2:	3304      	adds	r3, #4
 80038a4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	2200      	movs	r2, #0
 80038aa:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80038ac:	78fb      	ldrb	r3, [r7, #3]
 80038ae:	f003 030f 	and.w	r3, r3, #15
 80038b2:	b2da      	uxtb	r2, r3
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80038b8:	883a      	ldrh	r2, [r7, #0]
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	78ba      	ldrb	r2, [r7, #2]
 80038c2:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	785b      	ldrb	r3, [r3, #1]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d004      	beq.n	80038d6 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	781b      	ldrb	r3, [r3, #0]
 80038d0:	b29a      	uxth	r2, r3
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80038d6:	78bb      	ldrb	r3, [r7, #2]
 80038d8:	2b02      	cmp	r3, #2
 80038da:	d102      	bne.n	80038e2 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	2200      	movs	r2, #0
 80038e0:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80038e8:	2b01      	cmp	r3, #1
 80038ea:	d101      	bne.n	80038f0 <HAL_PCD_EP_Open+0xaa>
 80038ec:	2302      	movs	r3, #2
 80038ee:	e00e      	b.n	800390e <HAL_PCD_EP_Open+0xc8>
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2201      	movs	r2, #1
 80038f4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	68f9      	ldr	r1, [r7, #12]
 80038fe:	4618      	mov	r0, r3
 8003900:	f003 fe0e 	bl	8007520 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2200      	movs	r2, #0
 8003908:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 800390c:	7afb      	ldrb	r3, [r7, #11]
}
 800390e:	4618      	mov	r0, r3
 8003910:	3710      	adds	r7, #16
 8003912:	46bd      	mov	sp, r7
 8003914:	bd80      	pop	{r7, pc}

08003916 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003916:	b580      	push	{r7, lr}
 8003918:	b084      	sub	sp, #16
 800391a:	af00      	add	r7, sp, #0
 800391c:	6078      	str	r0, [r7, #4]
 800391e:	460b      	mov	r3, r1
 8003920:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003922:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003926:	2b00      	cmp	r3, #0
 8003928:	da0f      	bge.n	800394a <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800392a:	78fb      	ldrb	r3, [r7, #3]
 800392c:	f003 020f 	and.w	r2, r3, #15
 8003930:	4613      	mov	r3, r2
 8003932:	00db      	lsls	r3, r3, #3
 8003934:	4413      	add	r3, r2
 8003936:	009b      	lsls	r3, r3, #2
 8003938:	3338      	adds	r3, #56	; 0x38
 800393a:	687a      	ldr	r2, [r7, #4]
 800393c:	4413      	add	r3, r2
 800393e:	3304      	adds	r3, #4
 8003940:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	2201      	movs	r2, #1
 8003946:	705a      	strb	r2, [r3, #1]
 8003948:	e00f      	b.n	800396a <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800394a:	78fb      	ldrb	r3, [r7, #3]
 800394c:	f003 020f 	and.w	r2, r3, #15
 8003950:	4613      	mov	r3, r2
 8003952:	00db      	lsls	r3, r3, #3
 8003954:	4413      	add	r3, r2
 8003956:	009b      	lsls	r3, r3, #2
 8003958:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800395c:	687a      	ldr	r2, [r7, #4]
 800395e:	4413      	add	r3, r2
 8003960:	3304      	adds	r3, #4
 8003962:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	2200      	movs	r2, #0
 8003968:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800396a:	78fb      	ldrb	r3, [r7, #3]
 800396c:	f003 030f 	and.w	r3, r3, #15
 8003970:	b2da      	uxtb	r2, r3
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800397c:	2b01      	cmp	r3, #1
 800397e:	d101      	bne.n	8003984 <HAL_PCD_EP_Close+0x6e>
 8003980:	2302      	movs	r3, #2
 8003982:	e00e      	b.n	80039a2 <HAL_PCD_EP_Close+0x8c>
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2201      	movs	r2, #1
 8003988:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	68f9      	ldr	r1, [r7, #12]
 8003992:	4618      	mov	r0, r3
 8003994:	f003 fe4c 	bl	8007630 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2200      	movs	r2, #0
 800399c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 80039a0:	2300      	movs	r3, #0
}
 80039a2:	4618      	mov	r0, r3
 80039a4:	3710      	adds	r7, #16
 80039a6:	46bd      	mov	sp, r7
 80039a8:	bd80      	pop	{r7, pc}

080039aa <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80039aa:	b580      	push	{r7, lr}
 80039ac:	b086      	sub	sp, #24
 80039ae:	af00      	add	r7, sp, #0
 80039b0:	60f8      	str	r0, [r7, #12]
 80039b2:	607a      	str	r2, [r7, #4]
 80039b4:	603b      	str	r3, [r7, #0]
 80039b6:	460b      	mov	r3, r1
 80039b8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80039ba:	7afb      	ldrb	r3, [r7, #11]
 80039bc:	f003 020f 	and.w	r2, r3, #15
 80039c0:	4613      	mov	r3, r2
 80039c2:	00db      	lsls	r3, r3, #3
 80039c4:	4413      	add	r3, r2
 80039c6:	009b      	lsls	r3, r3, #2
 80039c8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80039cc:	68fa      	ldr	r2, [r7, #12]
 80039ce:	4413      	add	r3, r2
 80039d0:	3304      	adds	r3, #4
 80039d2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80039d4:	697b      	ldr	r3, [r7, #20]
 80039d6:	687a      	ldr	r2, [r7, #4]
 80039d8:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80039da:	697b      	ldr	r3, [r7, #20]
 80039dc:	683a      	ldr	r2, [r7, #0]
 80039de:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80039e0:	697b      	ldr	r3, [r7, #20]
 80039e2:	2200      	movs	r2, #0
 80039e4:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 80039e6:	697b      	ldr	r3, [r7, #20]
 80039e8:	2200      	movs	r2, #0
 80039ea:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80039ec:	7afb      	ldrb	r3, [r7, #11]
 80039ee:	f003 030f 	and.w	r3, r3, #15
 80039f2:	b2da      	uxtb	r2, r3
 80039f4:	697b      	ldr	r3, [r7, #20]
 80039f6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	691b      	ldr	r3, [r3, #16]
 80039fc:	2b01      	cmp	r3, #1
 80039fe:	d102      	bne.n	8003a06 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003a00:	687a      	ldr	r2, [r7, #4]
 8003a02:	697b      	ldr	r3, [r7, #20]
 8003a04:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003a06:	7afb      	ldrb	r3, [r7, #11]
 8003a08:	f003 030f 	and.w	r3, r3, #15
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d109      	bne.n	8003a24 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	6818      	ldr	r0, [r3, #0]
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	691b      	ldr	r3, [r3, #16]
 8003a18:	b2db      	uxtb	r3, r3
 8003a1a:	461a      	mov	r2, r3
 8003a1c:	6979      	ldr	r1, [r7, #20]
 8003a1e:	f004 f92b 	bl	8007c78 <USB_EP0StartXfer>
 8003a22:	e008      	b.n	8003a36 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	6818      	ldr	r0, [r3, #0]
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	691b      	ldr	r3, [r3, #16]
 8003a2c:	b2db      	uxtb	r3, r3
 8003a2e:	461a      	mov	r2, r3
 8003a30:	6979      	ldr	r1, [r7, #20]
 8003a32:	f003 fed9 	bl	80077e8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003a36:	2300      	movs	r3, #0
}
 8003a38:	4618      	mov	r0, r3
 8003a3a:	3718      	adds	r7, #24
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	bd80      	pop	{r7, pc}

08003a40 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003a40:	b480      	push	{r7}
 8003a42:	b083      	sub	sp, #12
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
 8003a48:	460b      	mov	r3, r1
 8003a4a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003a4c:	78fb      	ldrb	r3, [r7, #3]
 8003a4e:	f003 020f 	and.w	r2, r3, #15
 8003a52:	6879      	ldr	r1, [r7, #4]
 8003a54:	4613      	mov	r3, r2
 8003a56:	00db      	lsls	r3, r3, #3
 8003a58:	4413      	add	r3, r2
 8003a5a:	009b      	lsls	r3, r3, #2
 8003a5c:	440b      	add	r3, r1
 8003a5e:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8003a62:	681b      	ldr	r3, [r3, #0]
}
 8003a64:	4618      	mov	r0, r3
 8003a66:	370c      	adds	r7, #12
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6e:	4770      	bx	lr

08003a70 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b086      	sub	sp, #24
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	60f8      	str	r0, [r7, #12]
 8003a78:	607a      	str	r2, [r7, #4]
 8003a7a:	603b      	str	r3, [r7, #0]
 8003a7c:	460b      	mov	r3, r1
 8003a7e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003a80:	7afb      	ldrb	r3, [r7, #11]
 8003a82:	f003 020f 	and.w	r2, r3, #15
 8003a86:	4613      	mov	r3, r2
 8003a88:	00db      	lsls	r3, r3, #3
 8003a8a:	4413      	add	r3, r2
 8003a8c:	009b      	lsls	r3, r3, #2
 8003a8e:	3338      	adds	r3, #56	; 0x38
 8003a90:	68fa      	ldr	r2, [r7, #12]
 8003a92:	4413      	add	r3, r2
 8003a94:	3304      	adds	r3, #4
 8003a96:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003a98:	697b      	ldr	r3, [r7, #20]
 8003a9a:	687a      	ldr	r2, [r7, #4]
 8003a9c:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8003a9e:	697b      	ldr	r3, [r7, #20]
 8003aa0:	683a      	ldr	r2, [r7, #0]
 8003aa2:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003aa4:	697b      	ldr	r3, [r7, #20]
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8003aaa:	697b      	ldr	r3, [r7, #20]
 8003aac:	2201      	movs	r2, #1
 8003aae:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003ab0:	7afb      	ldrb	r3, [r7, #11]
 8003ab2:	f003 030f 	and.w	r3, r3, #15
 8003ab6:	b2da      	uxtb	r2, r3
 8003ab8:	697b      	ldr	r3, [r7, #20]
 8003aba:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	691b      	ldr	r3, [r3, #16]
 8003ac0:	2b01      	cmp	r3, #1
 8003ac2:	d102      	bne.n	8003aca <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003ac4:	687a      	ldr	r2, [r7, #4]
 8003ac6:	697b      	ldr	r3, [r7, #20]
 8003ac8:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003aca:	7afb      	ldrb	r3, [r7, #11]
 8003acc:	f003 030f 	and.w	r3, r3, #15
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d109      	bne.n	8003ae8 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	6818      	ldr	r0, [r3, #0]
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	691b      	ldr	r3, [r3, #16]
 8003adc:	b2db      	uxtb	r3, r3
 8003ade:	461a      	mov	r2, r3
 8003ae0:	6979      	ldr	r1, [r7, #20]
 8003ae2:	f004 f8c9 	bl	8007c78 <USB_EP0StartXfer>
 8003ae6:	e008      	b.n	8003afa <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	6818      	ldr	r0, [r3, #0]
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	691b      	ldr	r3, [r3, #16]
 8003af0:	b2db      	uxtb	r3, r3
 8003af2:	461a      	mov	r2, r3
 8003af4:	6979      	ldr	r1, [r7, #20]
 8003af6:	f003 fe77 	bl	80077e8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003afa:	2300      	movs	r3, #0
}
 8003afc:	4618      	mov	r0, r3
 8003afe:	3718      	adds	r7, #24
 8003b00:	46bd      	mov	sp, r7
 8003b02:	bd80      	pop	{r7, pc}

08003b04 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b084      	sub	sp, #16
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
 8003b0c:	460b      	mov	r3, r1
 8003b0e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003b10:	78fb      	ldrb	r3, [r7, #3]
 8003b12:	f003 020f 	and.w	r2, r3, #15
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	685b      	ldr	r3, [r3, #4]
 8003b1a:	429a      	cmp	r2, r3
 8003b1c:	d901      	bls.n	8003b22 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003b1e:	2301      	movs	r3, #1
 8003b20:	e050      	b.n	8003bc4 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003b22:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	da0f      	bge.n	8003b4a <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003b2a:	78fb      	ldrb	r3, [r7, #3]
 8003b2c:	f003 020f 	and.w	r2, r3, #15
 8003b30:	4613      	mov	r3, r2
 8003b32:	00db      	lsls	r3, r3, #3
 8003b34:	4413      	add	r3, r2
 8003b36:	009b      	lsls	r3, r3, #2
 8003b38:	3338      	adds	r3, #56	; 0x38
 8003b3a:	687a      	ldr	r2, [r7, #4]
 8003b3c:	4413      	add	r3, r2
 8003b3e:	3304      	adds	r3, #4
 8003b40:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	2201      	movs	r2, #1
 8003b46:	705a      	strb	r2, [r3, #1]
 8003b48:	e00d      	b.n	8003b66 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003b4a:	78fa      	ldrb	r2, [r7, #3]
 8003b4c:	4613      	mov	r3, r2
 8003b4e:	00db      	lsls	r3, r3, #3
 8003b50:	4413      	add	r3, r2
 8003b52:	009b      	lsls	r3, r3, #2
 8003b54:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003b58:	687a      	ldr	r2, [r7, #4]
 8003b5a:	4413      	add	r3, r2
 8003b5c:	3304      	adds	r3, #4
 8003b5e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	2200      	movs	r2, #0
 8003b64:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	2201      	movs	r2, #1
 8003b6a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003b6c:	78fb      	ldrb	r3, [r7, #3]
 8003b6e:	f003 030f 	and.w	r3, r3, #15
 8003b72:	b2da      	uxtb	r2, r3
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003b7e:	2b01      	cmp	r3, #1
 8003b80:	d101      	bne.n	8003b86 <HAL_PCD_EP_SetStall+0x82>
 8003b82:	2302      	movs	r3, #2
 8003b84:	e01e      	b.n	8003bc4 <HAL_PCD_EP_SetStall+0xc0>
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2201      	movs	r2, #1
 8003b8a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	68f9      	ldr	r1, [r7, #12]
 8003b94:	4618      	mov	r0, r3
 8003b96:	f004 fb07 	bl	80081a8 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003b9a:	78fb      	ldrb	r3, [r7, #3]
 8003b9c:	f003 030f 	and.w	r3, r3, #15
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d10a      	bne.n	8003bba <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6818      	ldr	r0, [r3, #0]
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	691b      	ldr	r3, [r3, #16]
 8003bac:	b2d9      	uxtb	r1, r3
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003bb4:	461a      	mov	r2, r3
 8003bb6:	f004 fcf7 	bl	80085a8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003bc2:	2300      	movs	r3, #0
}
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	3710      	adds	r7, #16
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	bd80      	pop	{r7, pc}

08003bcc <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b084      	sub	sp, #16
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
 8003bd4:	460b      	mov	r3, r1
 8003bd6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003bd8:	78fb      	ldrb	r3, [r7, #3]
 8003bda:	f003 020f 	and.w	r2, r3, #15
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	685b      	ldr	r3, [r3, #4]
 8003be2:	429a      	cmp	r2, r3
 8003be4:	d901      	bls.n	8003bea <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003be6:	2301      	movs	r3, #1
 8003be8:	e042      	b.n	8003c70 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003bea:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	da0f      	bge.n	8003c12 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003bf2:	78fb      	ldrb	r3, [r7, #3]
 8003bf4:	f003 020f 	and.w	r2, r3, #15
 8003bf8:	4613      	mov	r3, r2
 8003bfa:	00db      	lsls	r3, r3, #3
 8003bfc:	4413      	add	r3, r2
 8003bfe:	009b      	lsls	r3, r3, #2
 8003c00:	3338      	adds	r3, #56	; 0x38
 8003c02:	687a      	ldr	r2, [r7, #4]
 8003c04:	4413      	add	r3, r2
 8003c06:	3304      	adds	r3, #4
 8003c08:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	2201      	movs	r2, #1
 8003c0e:	705a      	strb	r2, [r3, #1]
 8003c10:	e00f      	b.n	8003c32 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003c12:	78fb      	ldrb	r3, [r7, #3]
 8003c14:	f003 020f 	and.w	r2, r3, #15
 8003c18:	4613      	mov	r3, r2
 8003c1a:	00db      	lsls	r3, r3, #3
 8003c1c:	4413      	add	r3, r2
 8003c1e:	009b      	lsls	r3, r3, #2
 8003c20:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003c24:	687a      	ldr	r2, [r7, #4]
 8003c26:	4413      	add	r3, r2
 8003c28:	3304      	adds	r3, #4
 8003c2a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	2200      	movs	r2, #0
 8003c30:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	2200      	movs	r2, #0
 8003c36:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003c38:	78fb      	ldrb	r3, [r7, #3]
 8003c3a:	f003 030f 	and.w	r3, r3, #15
 8003c3e:	b2da      	uxtb	r2, r3
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003c4a:	2b01      	cmp	r3, #1
 8003c4c:	d101      	bne.n	8003c52 <HAL_PCD_EP_ClrStall+0x86>
 8003c4e:	2302      	movs	r3, #2
 8003c50:	e00e      	b.n	8003c70 <HAL_PCD_EP_ClrStall+0xa4>
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	2201      	movs	r2, #1
 8003c56:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	68f9      	ldr	r1, [r7, #12]
 8003c60:	4618      	mov	r0, r3
 8003c62:	f004 fb0f 	bl	8008284 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	2200      	movs	r2, #0
 8003c6a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003c6e:	2300      	movs	r3, #0
}
 8003c70:	4618      	mov	r0, r3
 8003c72:	3710      	adds	r7, #16
 8003c74:	46bd      	mov	sp, r7
 8003c76:	bd80      	pop	{r7, pc}

08003c78 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b084      	sub	sp, #16
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
 8003c80:	460b      	mov	r3, r1
 8003c82:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003c84:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	da0c      	bge.n	8003ca6 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003c8c:	78fb      	ldrb	r3, [r7, #3]
 8003c8e:	f003 020f 	and.w	r2, r3, #15
 8003c92:	4613      	mov	r3, r2
 8003c94:	00db      	lsls	r3, r3, #3
 8003c96:	4413      	add	r3, r2
 8003c98:	009b      	lsls	r3, r3, #2
 8003c9a:	3338      	adds	r3, #56	; 0x38
 8003c9c:	687a      	ldr	r2, [r7, #4]
 8003c9e:	4413      	add	r3, r2
 8003ca0:	3304      	adds	r3, #4
 8003ca2:	60fb      	str	r3, [r7, #12]
 8003ca4:	e00c      	b.n	8003cc0 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003ca6:	78fb      	ldrb	r3, [r7, #3]
 8003ca8:	f003 020f 	and.w	r2, r3, #15
 8003cac:	4613      	mov	r3, r2
 8003cae:	00db      	lsls	r3, r3, #3
 8003cb0:	4413      	add	r3, r2
 8003cb2:	009b      	lsls	r3, r3, #2
 8003cb4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003cb8:	687a      	ldr	r2, [r7, #4]
 8003cba:	4413      	add	r3, r2
 8003cbc:	3304      	adds	r3, #4
 8003cbe:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	68f9      	ldr	r1, [r7, #12]
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	f004 f92e 	bl	8007f28 <USB_EPStopXfer>
 8003ccc:	4603      	mov	r3, r0
 8003cce:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003cd0:	7afb      	ldrb	r3, [r7, #11]
}
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	3710      	adds	r7, #16
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	bd80      	pop	{r7, pc}

08003cda <HAL_PCD_EP_Flush>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Flush(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003cda:	b580      	push	{r7, lr}
 8003cdc:	b082      	sub	sp, #8
 8003cde:	af00      	add	r7, sp, #0
 8003ce0:	6078      	str	r0, [r7, #4]
 8003ce2:	460b      	mov	r3, r1
 8003ce4:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003cec:	2b01      	cmp	r3, #1
 8003cee:	d101      	bne.n	8003cf4 <HAL_PCD_EP_Flush+0x1a>
 8003cf0:	2302      	movs	r3, #2
 8003cf2:	e01b      	b.n	8003d2c <HAL_PCD_EP_Flush+0x52>
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2201      	movs	r2, #1
 8003cf8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((ep_addr & 0x80U) == 0x80U)
 8003cfc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	da09      	bge.n	8003d18 <HAL_PCD_EP_Flush+0x3e>
  {
    (void)USB_FlushTxFifo(hpcd->Instance, (uint32_t)ep_addr & EP_ADDR_MSK);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681a      	ldr	r2, [r3, #0]
 8003d08:	78fb      	ldrb	r3, [r7, #3]
 8003d0a:	f003 030f 	and.w	r3, r3, #15
 8003d0e:	4619      	mov	r1, r3
 8003d10:	4610      	mov	r0, r2
 8003d12:	f003 fb63 	bl	80073dc <USB_FlushTxFifo>
 8003d16:	e004      	b.n	8003d22 <HAL_PCD_EP_Flush+0x48>
  }
  else
  {
    (void)USB_FlushRxFifo(hpcd->Instance);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	f003 fb91 	bl	8007444 <USB_FlushRxFifo>
  }

  __HAL_UNLOCK(hpcd);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	2200      	movs	r2, #0
 8003d26:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003d2a:	2300      	movs	r3, #0
}
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	3708      	adds	r7, #8
 8003d30:	46bd      	mov	sp, r7
 8003d32:	bd80      	pop	{r7, pc}

08003d34 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b08a      	sub	sp, #40	; 0x28
 8003d38:	af02      	add	r7, sp, #8
 8003d3a:	6078      	str	r0, [r7, #4]
 8003d3c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d44:	697b      	ldr	r3, [r7, #20]
 8003d46:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003d48:	683a      	ldr	r2, [r7, #0]
 8003d4a:	4613      	mov	r3, r2
 8003d4c:	00db      	lsls	r3, r3, #3
 8003d4e:	4413      	add	r3, r2
 8003d50:	009b      	lsls	r3, r3, #2
 8003d52:	3338      	adds	r3, #56	; 0x38
 8003d54:	687a      	ldr	r2, [r7, #4]
 8003d56:	4413      	add	r3, r2
 8003d58:	3304      	adds	r3, #4
 8003d5a:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	6a1a      	ldr	r2, [r3, #32]
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	699b      	ldr	r3, [r3, #24]
 8003d64:	429a      	cmp	r2, r3
 8003d66:	d901      	bls.n	8003d6c <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003d68:	2301      	movs	r3, #1
 8003d6a:	e06c      	b.n	8003e46 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	699a      	ldr	r2, [r3, #24]
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	6a1b      	ldr	r3, [r3, #32]
 8003d74:	1ad3      	subs	r3, r2, r3
 8003d76:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	68db      	ldr	r3, [r3, #12]
 8003d7c:	69fa      	ldr	r2, [r7, #28]
 8003d7e:	429a      	cmp	r2, r3
 8003d80:	d902      	bls.n	8003d88 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	68db      	ldr	r3, [r3, #12]
 8003d86:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003d88:	69fb      	ldr	r3, [r7, #28]
 8003d8a:	3303      	adds	r3, #3
 8003d8c:	089b      	lsrs	r3, r3, #2
 8003d8e:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003d90:	e02b      	b.n	8003dea <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	699a      	ldr	r2, [r3, #24]
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	6a1b      	ldr	r3, [r3, #32]
 8003d9a:	1ad3      	subs	r3, r2, r3
 8003d9c:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	68db      	ldr	r3, [r3, #12]
 8003da2:	69fa      	ldr	r2, [r7, #28]
 8003da4:	429a      	cmp	r2, r3
 8003da6:	d902      	bls.n	8003dae <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	68db      	ldr	r3, [r3, #12]
 8003dac:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003dae:	69fb      	ldr	r3, [r7, #28]
 8003db0:	3303      	adds	r3, #3
 8003db2:	089b      	lsrs	r3, r3, #2
 8003db4:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	6919      	ldr	r1, [r3, #16]
 8003dba:	683b      	ldr	r3, [r7, #0]
 8003dbc:	b2da      	uxtb	r2, r3
 8003dbe:	69fb      	ldr	r3, [r7, #28]
 8003dc0:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003dc6:	b2db      	uxtb	r3, r3
 8003dc8:	9300      	str	r3, [sp, #0]
 8003dca:	4603      	mov	r3, r0
 8003dcc:	6978      	ldr	r0, [r7, #20]
 8003dce:	f004 f955 	bl	800807c <USB_WritePacket>

    ep->xfer_buff  += len;
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	691a      	ldr	r2, [r3, #16]
 8003dd6:	69fb      	ldr	r3, [r7, #28]
 8003dd8:	441a      	add	r2, r3
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	6a1a      	ldr	r2, [r3, #32]
 8003de2:	69fb      	ldr	r3, [r7, #28]
 8003de4:	441a      	add	r2, r3
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003dea:	683b      	ldr	r3, [r7, #0]
 8003dec:	015a      	lsls	r2, r3, #5
 8003dee:	693b      	ldr	r3, [r7, #16]
 8003df0:	4413      	add	r3, r2
 8003df2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003df6:	699b      	ldr	r3, [r3, #24]
 8003df8:	b29b      	uxth	r3, r3
 8003dfa:	69ba      	ldr	r2, [r7, #24]
 8003dfc:	429a      	cmp	r2, r3
 8003dfe:	d809      	bhi.n	8003e14 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	6a1a      	ldr	r2, [r3, #32]
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003e08:	429a      	cmp	r2, r3
 8003e0a:	d203      	bcs.n	8003e14 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	699b      	ldr	r3, [r3, #24]
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d1be      	bne.n	8003d92 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	699a      	ldr	r2, [r3, #24]
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	6a1b      	ldr	r3, [r3, #32]
 8003e1c:	429a      	cmp	r2, r3
 8003e1e:	d811      	bhi.n	8003e44 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	f003 030f 	and.w	r3, r3, #15
 8003e26:	2201      	movs	r2, #1
 8003e28:	fa02 f303 	lsl.w	r3, r2, r3
 8003e2c:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003e2e:	693b      	ldr	r3, [r7, #16]
 8003e30:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e34:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003e36:	68bb      	ldr	r3, [r7, #8]
 8003e38:	43db      	mvns	r3, r3
 8003e3a:	6939      	ldr	r1, [r7, #16]
 8003e3c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003e40:	4013      	ands	r3, r2
 8003e42:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003e44:	2300      	movs	r3, #0
}
 8003e46:	4618      	mov	r0, r3
 8003e48:	3720      	adds	r7, #32
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	bd80      	pop	{r7, pc}
	...

08003e50 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	b088      	sub	sp, #32
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
 8003e58:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e60:	69fb      	ldr	r3, [r7, #28]
 8003e62:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003e64:	69fb      	ldr	r3, [r7, #28]
 8003e66:	333c      	adds	r3, #60	; 0x3c
 8003e68:	3304      	adds	r3, #4
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003e6e:	683b      	ldr	r3, [r7, #0]
 8003e70:	015a      	lsls	r2, r3, #5
 8003e72:	69bb      	ldr	r3, [r7, #24]
 8003e74:	4413      	add	r3, r2
 8003e76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e7a:	689b      	ldr	r3, [r3, #8]
 8003e7c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	691b      	ldr	r3, [r3, #16]
 8003e82:	2b01      	cmp	r3, #1
 8003e84:	d17b      	bne.n	8003f7e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003e86:	693b      	ldr	r3, [r7, #16]
 8003e88:	f003 0308 	and.w	r3, r3, #8
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d015      	beq.n	8003ebc <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003e90:	697b      	ldr	r3, [r7, #20]
 8003e92:	4a61      	ldr	r2, [pc, #388]	; (8004018 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003e94:	4293      	cmp	r3, r2
 8003e96:	f240 80b9 	bls.w	800400c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003e9a:	693b      	ldr	r3, [r7, #16]
 8003e9c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	f000 80b3 	beq.w	800400c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003ea6:	683b      	ldr	r3, [r7, #0]
 8003ea8:	015a      	lsls	r2, r3, #5
 8003eaa:	69bb      	ldr	r3, [r7, #24]
 8003eac:	4413      	add	r3, r2
 8003eae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003eb2:	461a      	mov	r2, r3
 8003eb4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003eb8:	6093      	str	r3, [r2, #8]
 8003eba:	e0a7      	b.n	800400c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003ebc:	693b      	ldr	r3, [r7, #16]
 8003ebe:	f003 0320 	and.w	r3, r3, #32
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d009      	beq.n	8003eda <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003ec6:	683b      	ldr	r3, [r7, #0]
 8003ec8:	015a      	lsls	r2, r3, #5
 8003eca:	69bb      	ldr	r3, [r7, #24]
 8003ecc:	4413      	add	r3, r2
 8003ece:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ed2:	461a      	mov	r2, r3
 8003ed4:	2320      	movs	r3, #32
 8003ed6:	6093      	str	r3, [r2, #8]
 8003ed8:	e098      	b.n	800400c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003eda:	693b      	ldr	r3, [r7, #16]
 8003edc:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	f040 8093 	bne.w	800400c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003ee6:	697b      	ldr	r3, [r7, #20]
 8003ee8:	4a4b      	ldr	r2, [pc, #300]	; (8004018 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d90f      	bls.n	8003f0e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003eee:	693b      	ldr	r3, [r7, #16]
 8003ef0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d00a      	beq.n	8003f0e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003ef8:	683b      	ldr	r3, [r7, #0]
 8003efa:	015a      	lsls	r2, r3, #5
 8003efc:	69bb      	ldr	r3, [r7, #24]
 8003efe:	4413      	add	r3, r2
 8003f00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f04:	461a      	mov	r2, r3
 8003f06:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003f0a:	6093      	str	r3, [r2, #8]
 8003f0c:	e07e      	b.n	800400c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8003f0e:	683a      	ldr	r2, [r7, #0]
 8003f10:	4613      	mov	r3, r2
 8003f12:	00db      	lsls	r3, r3, #3
 8003f14:	4413      	add	r3, r2
 8003f16:	009b      	lsls	r3, r3, #2
 8003f18:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003f1c:	687a      	ldr	r2, [r7, #4]
 8003f1e:	4413      	add	r3, r2
 8003f20:	3304      	adds	r3, #4
 8003f22:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	69da      	ldr	r2, [r3, #28]
 8003f28:	683b      	ldr	r3, [r7, #0]
 8003f2a:	0159      	lsls	r1, r3, #5
 8003f2c:	69bb      	ldr	r3, [r7, #24]
 8003f2e:	440b      	add	r3, r1
 8003f30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f34:	691b      	ldr	r3, [r3, #16]
 8003f36:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f3a:	1ad2      	subs	r2, r2, r3
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d114      	bne.n	8003f70 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	699b      	ldr	r3, [r3, #24]
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d109      	bne.n	8003f62 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6818      	ldr	r0, [r3, #0]
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003f58:	461a      	mov	r2, r3
 8003f5a:	2101      	movs	r1, #1
 8003f5c:	f004 fb24 	bl	80085a8 <USB_EP0_OutStart>
 8003f60:	e006      	b.n	8003f70 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	691a      	ldr	r2, [r3, #16]
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	6a1b      	ldr	r3, [r3, #32]
 8003f6a:	441a      	add	r2, r3
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003f70:	683b      	ldr	r3, [r7, #0]
 8003f72:	b2db      	uxtb	r3, r3
 8003f74:	4619      	mov	r1, r3
 8003f76:	6878      	ldr	r0, [r7, #4]
 8003f78:	f008 f968 	bl	800c24c <HAL_PCD_DataOutStageCallback>
 8003f7c:	e046      	b.n	800400c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003f7e:	697b      	ldr	r3, [r7, #20]
 8003f80:	4a26      	ldr	r2, [pc, #152]	; (800401c <PCD_EP_OutXfrComplete_int+0x1cc>)
 8003f82:	4293      	cmp	r3, r2
 8003f84:	d124      	bne.n	8003fd0 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003f86:	693b      	ldr	r3, [r7, #16]
 8003f88:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d00a      	beq.n	8003fa6 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	015a      	lsls	r2, r3, #5
 8003f94:	69bb      	ldr	r3, [r7, #24]
 8003f96:	4413      	add	r3, r2
 8003f98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f9c:	461a      	mov	r2, r3
 8003f9e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003fa2:	6093      	str	r3, [r2, #8]
 8003fa4:	e032      	b.n	800400c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003fa6:	693b      	ldr	r3, [r7, #16]
 8003fa8:	f003 0320 	and.w	r3, r3, #32
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d008      	beq.n	8003fc2 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003fb0:	683b      	ldr	r3, [r7, #0]
 8003fb2:	015a      	lsls	r2, r3, #5
 8003fb4:	69bb      	ldr	r3, [r7, #24]
 8003fb6:	4413      	add	r3, r2
 8003fb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fbc:	461a      	mov	r2, r3
 8003fbe:	2320      	movs	r3, #32
 8003fc0:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003fc2:	683b      	ldr	r3, [r7, #0]
 8003fc4:	b2db      	uxtb	r3, r3
 8003fc6:	4619      	mov	r1, r3
 8003fc8:	6878      	ldr	r0, [r7, #4]
 8003fca:	f008 f93f 	bl	800c24c <HAL_PCD_DataOutStageCallback>
 8003fce:	e01d      	b.n	800400c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003fd0:	683b      	ldr	r3, [r7, #0]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d114      	bne.n	8004000 <PCD_EP_OutXfrComplete_int+0x1b0>
 8003fd6:	6879      	ldr	r1, [r7, #4]
 8003fd8:	683a      	ldr	r2, [r7, #0]
 8003fda:	4613      	mov	r3, r2
 8003fdc:	00db      	lsls	r3, r3, #3
 8003fde:	4413      	add	r3, r2
 8003fe0:	009b      	lsls	r3, r3, #2
 8003fe2:	440b      	add	r3, r1
 8003fe4:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d108      	bne.n	8004000 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6818      	ldr	r0, [r3, #0]
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003ff8:	461a      	mov	r2, r3
 8003ffa:	2100      	movs	r1, #0
 8003ffc:	f004 fad4 	bl	80085a8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004000:	683b      	ldr	r3, [r7, #0]
 8004002:	b2db      	uxtb	r3, r3
 8004004:	4619      	mov	r1, r3
 8004006:	6878      	ldr	r0, [r7, #4]
 8004008:	f008 f920 	bl	800c24c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800400c:	2300      	movs	r3, #0
}
 800400e:	4618      	mov	r0, r3
 8004010:	3720      	adds	r7, #32
 8004012:	46bd      	mov	sp, r7
 8004014:	bd80      	pop	{r7, pc}
 8004016:	bf00      	nop
 8004018:	4f54300a 	.word	0x4f54300a
 800401c:	4f54310a 	.word	0x4f54310a

08004020 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004020:	b580      	push	{r7, lr}
 8004022:	b086      	sub	sp, #24
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
 8004028:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004030:	697b      	ldr	r3, [r7, #20]
 8004032:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004034:	697b      	ldr	r3, [r7, #20]
 8004036:	333c      	adds	r3, #60	; 0x3c
 8004038:	3304      	adds	r3, #4
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800403e:	683b      	ldr	r3, [r7, #0]
 8004040:	015a      	lsls	r2, r3, #5
 8004042:	693b      	ldr	r3, [r7, #16]
 8004044:	4413      	add	r3, r2
 8004046:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800404a:	689b      	ldr	r3, [r3, #8]
 800404c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	4a15      	ldr	r2, [pc, #84]	; (80040a8 <PCD_EP_OutSetupPacket_int+0x88>)
 8004052:	4293      	cmp	r3, r2
 8004054:	d90e      	bls.n	8004074 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004056:	68bb      	ldr	r3, [r7, #8]
 8004058:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800405c:	2b00      	cmp	r3, #0
 800405e:	d009      	beq.n	8004074 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004060:	683b      	ldr	r3, [r7, #0]
 8004062:	015a      	lsls	r2, r3, #5
 8004064:	693b      	ldr	r3, [r7, #16]
 8004066:	4413      	add	r3, r2
 8004068:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800406c:	461a      	mov	r2, r3
 800406e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004072:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004074:	6878      	ldr	r0, [r7, #4]
 8004076:	f008 f8d7 	bl	800c228 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	4a0a      	ldr	r2, [pc, #40]	; (80040a8 <PCD_EP_OutSetupPacket_int+0x88>)
 800407e:	4293      	cmp	r3, r2
 8004080:	d90c      	bls.n	800409c <PCD_EP_OutSetupPacket_int+0x7c>
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	691b      	ldr	r3, [r3, #16]
 8004086:	2b01      	cmp	r3, #1
 8004088:	d108      	bne.n	800409c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6818      	ldr	r0, [r3, #0]
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004094:	461a      	mov	r2, r3
 8004096:	2101      	movs	r1, #1
 8004098:	f004 fa86 	bl	80085a8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800409c:	2300      	movs	r3, #0
}
 800409e:	4618      	mov	r0, r3
 80040a0:	3718      	adds	r7, #24
 80040a2:	46bd      	mov	sp, r7
 80040a4:	bd80      	pop	{r7, pc}
 80040a6:	bf00      	nop
 80040a8:	4f54300a 	.word	0x4f54300a

080040ac <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80040ac:	b480      	push	{r7}
 80040ae:	b085      	sub	sp, #20
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
 80040b4:	460b      	mov	r3, r1
 80040b6:	70fb      	strb	r3, [r7, #3]
 80040b8:	4613      	mov	r3, r2
 80040ba:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040c2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80040c4:	78fb      	ldrb	r3, [r7, #3]
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d107      	bne.n	80040da <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80040ca:	883b      	ldrh	r3, [r7, #0]
 80040cc:	0419      	lsls	r1, r3, #16
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	68ba      	ldr	r2, [r7, #8]
 80040d4:	430a      	orrs	r2, r1
 80040d6:	629a      	str	r2, [r3, #40]	; 0x28
 80040d8:	e028      	b.n	800412c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040e0:	0c1b      	lsrs	r3, r3, #16
 80040e2:	68ba      	ldr	r2, [r7, #8]
 80040e4:	4413      	add	r3, r2
 80040e6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80040e8:	2300      	movs	r3, #0
 80040ea:	73fb      	strb	r3, [r7, #15]
 80040ec:	e00d      	b.n	800410a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681a      	ldr	r2, [r3, #0]
 80040f2:	7bfb      	ldrb	r3, [r7, #15]
 80040f4:	3340      	adds	r3, #64	; 0x40
 80040f6:	009b      	lsls	r3, r3, #2
 80040f8:	4413      	add	r3, r2
 80040fa:	685b      	ldr	r3, [r3, #4]
 80040fc:	0c1b      	lsrs	r3, r3, #16
 80040fe:	68ba      	ldr	r2, [r7, #8]
 8004100:	4413      	add	r3, r2
 8004102:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004104:	7bfb      	ldrb	r3, [r7, #15]
 8004106:	3301      	adds	r3, #1
 8004108:	73fb      	strb	r3, [r7, #15]
 800410a:	7bfa      	ldrb	r2, [r7, #15]
 800410c:	78fb      	ldrb	r3, [r7, #3]
 800410e:	3b01      	subs	r3, #1
 8004110:	429a      	cmp	r2, r3
 8004112:	d3ec      	bcc.n	80040ee <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004114:	883b      	ldrh	r3, [r7, #0]
 8004116:	0418      	lsls	r0, r3, #16
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	6819      	ldr	r1, [r3, #0]
 800411c:	78fb      	ldrb	r3, [r7, #3]
 800411e:	3b01      	subs	r3, #1
 8004120:	68ba      	ldr	r2, [r7, #8]
 8004122:	4302      	orrs	r2, r0
 8004124:	3340      	adds	r3, #64	; 0x40
 8004126:	009b      	lsls	r3, r3, #2
 8004128:	440b      	add	r3, r1
 800412a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800412c:	2300      	movs	r3, #0
}
 800412e:	4618      	mov	r0, r3
 8004130:	3714      	adds	r7, #20
 8004132:	46bd      	mov	sp, r7
 8004134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004138:	4770      	bx	lr

0800413a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800413a:	b480      	push	{r7}
 800413c:	b083      	sub	sp, #12
 800413e:	af00      	add	r7, sp, #0
 8004140:	6078      	str	r0, [r7, #4]
 8004142:	460b      	mov	r3, r1
 8004144:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	887a      	ldrh	r2, [r7, #2]
 800414c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800414e:	2300      	movs	r3, #0
}
 8004150:	4618      	mov	r0, r3
 8004152:	370c      	adds	r7, #12
 8004154:	46bd      	mov	sp, r7
 8004156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415a:	4770      	bx	lr

0800415c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800415c:	b480      	push	{r7}
 800415e:	b083      	sub	sp, #12
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
 8004164:	460b      	mov	r3, r1
 8004166:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004168:	bf00      	nop
 800416a:	370c      	adds	r7, #12
 800416c:	46bd      	mov	sp, r7
 800416e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004172:	4770      	bx	lr

08004174 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004174:	b580      	push	{r7, lr}
 8004176:	b086      	sub	sp, #24
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2b00      	cmp	r3, #0
 8004180:	d101      	bne.n	8004186 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004182:	2301      	movs	r3, #1
 8004184:	e267      	b.n	8004656 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f003 0301 	and.w	r3, r3, #1
 800418e:	2b00      	cmp	r3, #0
 8004190:	d075      	beq.n	800427e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004192:	4b88      	ldr	r3, [pc, #544]	; (80043b4 <HAL_RCC_OscConfig+0x240>)
 8004194:	689b      	ldr	r3, [r3, #8]
 8004196:	f003 030c 	and.w	r3, r3, #12
 800419a:	2b04      	cmp	r3, #4
 800419c:	d00c      	beq.n	80041b8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800419e:	4b85      	ldr	r3, [pc, #532]	; (80043b4 <HAL_RCC_OscConfig+0x240>)
 80041a0:	689b      	ldr	r3, [r3, #8]
 80041a2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80041a6:	2b08      	cmp	r3, #8
 80041a8:	d112      	bne.n	80041d0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80041aa:	4b82      	ldr	r3, [pc, #520]	; (80043b4 <HAL_RCC_OscConfig+0x240>)
 80041ac:	685b      	ldr	r3, [r3, #4]
 80041ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80041b2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80041b6:	d10b      	bne.n	80041d0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041b8:	4b7e      	ldr	r3, [pc, #504]	; (80043b4 <HAL_RCC_OscConfig+0x240>)
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d05b      	beq.n	800427c <HAL_RCC_OscConfig+0x108>
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	685b      	ldr	r3, [r3, #4]
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d157      	bne.n	800427c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80041cc:	2301      	movs	r3, #1
 80041ce:	e242      	b.n	8004656 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	685b      	ldr	r3, [r3, #4]
 80041d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041d8:	d106      	bne.n	80041e8 <HAL_RCC_OscConfig+0x74>
 80041da:	4b76      	ldr	r3, [pc, #472]	; (80043b4 <HAL_RCC_OscConfig+0x240>)
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	4a75      	ldr	r2, [pc, #468]	; (80043b4 <HAL_RCC_OscConfig+0x240>)
 80041e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041e4:	6013      	str	r3, [r2, #0]
 80041e6:	e01d      	b.n	8004224 <HAL_RCC_OscConfig+0xb0>
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	685b      	ldr	r3, [r3, #4]
 80041ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80041f0:	d10c      	bne.n	800420c <HAL_RCC_OscConfig+0x98>
 80041f2:	4b70      	ldr	r3, [pc, #448]	; (80043b4 <HAL_RCC_OscConfig+0x240>)
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	4a6f      	ldr	r2, [pc, #444]	; (80043b4 <HAL_RCC_OscConfig+0x240>)
 80041f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80041fc:	6013      	str	r3, [r2, #0]
 80041fe:	4b6d      	ldr	r3, [pc, #436]	; (80043b4 <HAL_RCC_OscConfig+0x240>)
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	4a6c      	ldr	r2, [pc, #432]	; (80043b4 <HAL_RCC_OscConfig+0x240>)
 8004204:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004208:	6013      	str	r3, [r2, #0]
 800420a:	e00b      	b.n	8004224 <HAL_RCC_OscConfig+0xb0>
 800420c:	4b69      	ldr	r3, [pc, #420]	; (80043b4 <HAL_RCC_OscConfig+0x240>)
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	4a68      	ldr	r2, [pc, #416]	; (80043b4 <HAL_RCC_OscConfig+0x240>)
 8004212:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004216:	6013      	str	r3, [r2, #0]
 8004218:	4b66      	ldr	r3, [pc, #408]	; (80043b4 <HAL_RCC_OscConfig+0x240>)
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	4a65      	ldr	r2, [pc, #404]	; (80043b4 <HAL_RCC_OscConfig+0x240>)
 800421e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004222:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	685b      	ldr	r3, [r3, #4]
 8004228:	2b00      	cmp	r3, #0
 800422a:	d013      	beq.n	8004254 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800422c:	f7fd fda2 	bl	8001d74 <HAL_GetTick>
 8004230:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004232:	e008      	b.n	8004246 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004234:	f7fd fd9e 	bl	8001d74 <HAL_GetTick>
 8004238:	4602      	mov	r2, r0
 800423a:	693b      	ldr	r3, [r7, #16]
 800423c:	1ad3      	subs	r3, r2, r3
 800423e:	2b64      	cmp	r3, #100	; 0x64
 8004240:	d901      	bls.n	8004246 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004242:	2303      	movs	r3, #3
 8004244:	e207      	b.n	8004656 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004246:	4b5b      	ldr	r3, [pc, #364]	; (80043b4 <HAL_RCC_OscConfig+0x240>)
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800424e:	2b00      	cmp	r3, #0
 8004250:	d0f0      	beq.n	8004234 <HAL_RCC_OscConfig+0xc0>
 8004252:	e014      	b.n	800427e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004254:	f7fd fd8e 	bl	8001d74 <HAL_GetTick>
 8004258:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800425a:	e008      	b.n	800426e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800425c:	f7fd fd8a 	bl	8001d74 <HAL_GetTick>
 8004260:	4602      	mov	r2, r0
 8004262:	693b      	ldr	r3, [r7, #16]
 8004264:	1ad3      	subs	r3, r2, r3
 8004266:	2b64      	cmp	r3, #100	; 0x64
 8004268:	d901      	bls.n	800426e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800426a:	2303      	movs	r3, #3
 800426c:	e1f3      	b.n	8004656 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800426e:	4b51      	ldr	r3, [pc, #324]	; (80043b4 <HAL_RCC_OscConfig+0x240>)
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004276:	2b00      	cmp	r3, #0
 8004278:	d1f0      	bne.n	800425c <HAL_RCC_OscConfig+0xe8>
 800427a:	e000      	b.n	800427e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800427c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f003 0302 	and.w	r3, r3, #2
 8004286:	2b00      	cmp	r3, #0
 8004288:	d063      	beq.n	8004352 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800428a:	4b4a      	ldr	r3, [pc, #296]	; (80043b4 <HAL_RCC_OscConfig+0x240>)
 800428c:	689b      	ldr	r3, [r3, #8]
 800428e:	f003 030c 	and.w	r3, r3, #12
 8004292:	2b00      	cmp	r3, #0
 8004294:	d00b      	beq.n	80042ae <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004296:	4b47      	ldr	r3, [pc, #284]	; (80043b4 <HAL_RCC_OscConfig+0x240>)
 8004298:	689b      	ldr	r3, [r3, #8]
 800429a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800429e:	2b08      	cmp	r3, #8
 80042a0:	d11c      	bne.n	80042dc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80042a2:	4b44      	ldr	r3, [pc, #272]	; (80043b4 <HAL_RCC_OscConfig+0x240>)
 80042a4:	685b      	ldr	r3, [r3, #4]
 80042a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d116      	bne.n	80042dc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80042ae:	4b41      	ldr	r3, [pc, #260]	; (80043b4 <HAL_RCC_OscConfig+0x240>)
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f003 0302 	and.w	r3, r3, #2
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d005      	beq.n	80042c6 <HAL_RCC_OscConfig+0x152>
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	68db      	ldr	r3, [r3, #12]
 80042be:	2b01      	cmp	r3, #1
 80042c0:	d001      	beq.n	80042c6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80042c2:	2301      	movs	r3, #1
 80042c4:	e1c7      	b.n	8004656 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042c6:	4b3b      	ldr	r3, [pc, #236]	; (80043b4 <HAL_RCC_OscConfig+0x240>)
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	691b      	ldr	r3, [r3, #16]
 80042d2:	00db      	lsls	r3, r3, #3
 80042d4:	4937      	ldr	r1, [pc, #220]	; (80043b4 <HAL_RCC_OscConfig+0x240>)
 80042d6:	4313      	orrs	r3, r2
 80042d8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80042da:	e03a      	b.n	8004352 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	68db      	ldr	r3, [r3, #12]
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d020      	beq.n	8004326 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80042e4:	4b34      	ldr	r3, [pc, #208]	; (80043b8 <HAL_RCC_OscConfig+0x244>)
 80042e6:	2201      	movs	r2, #1
 80042e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042ea:	f7fd fd43 	bl	8001d74 <HAL_GetTick>
 80042ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042f0:	e008      	b.n	8004304 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80042f2:	f7fd fd3f 	bl	8001d74 <HAL_GetTick>
 80042f6:	4602      	mov	r2, r0
 80042f8:	693b      	ldr	r3, [r7, #16]
 80042fa:	1ad3      	subs	r3, r2, r3
 80042fc:	2b02      	cmp	r3, #2
 80042fe:	d901      	bls.n	8004304 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004300:	2303      	movs	r3, #3
 8004302:	e1a8      	b.n	8004656 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004304:	4b2b      	ldr	r3, [pc, #172]	; (80043b4 <HAL_RCC_OscConfig+0x240>)
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f003 0302 	and.w	r3, r3, #2
 800430c:	2b00      	cmp	r3, #0
 800430e:	d0f0      	beq.n	80042f2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004310:	4b28      	ldr	r3, [pc, #160]	; (80043b4 <HAL_RCC_OscConfig+0x240>)
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	691b      	ldr	r3, [r3, #16]
 800431c:	00db      	lsls	r3, r3, #3
 800431e:	4925      	ldr	r1, [pc, #148]	; (80043b4 <HAL_RCC_OscConfig+0x240>)
 8004320:	4313      	orrs	r3, r2
 8004322:	600b      	str	r3, [r1, #0]
 8004324:	e015      	b.n	8004352 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004326:	4b24      	ldr	r3, [pc, #144]	; (80043b8 <HAL_RCC_OscConfig+0x244>)
 8004328:	2200      	movs	r2, #0
 800432a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800432c:	f7fd fd22 	bl	8001d74 <HAL_GetTick>
 8004330:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004332:	e008      	b.n	8004346 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004334:	f7fd fd1e 	bl	8001d74 <HAL_GetTick>
 8004338:	4602      	mov	r2, r0
 800433a:	693b      	ldr	r3, [r7, #16]
 800433c:	1ad3      	subs	r3, r2, r3
 800433e:	2b02      	cmp	r3, #2
 8004340:	d901      	bls.n	8004346 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004342:	2303      	movs	r3, #3
 8004344:	e187      	b.n	8004656 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004346:	4b1b      	ldr	r3, [pc, #108]	; (80043b4 <HAL_RCC_OscConfig+0x240>)
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f003 0302 	and.w	r3, r3, #2
 800434e:	2b00      	cmp	r3, #0
 8004350:	d1f0      	bne.n	8004334 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f003 0308 	and.w	r3, r3, #8
 800435a:	2b00      	cmp	r3, #0
 800435c:	d036      	beq.n	80043cc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	695b      	ldr	r3, [r3, #20]
 8004362:	2b00      	cmp	r3, #0
 8004364:	d016      	beq.n	8004394 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004366:	4b15      	ldr	r3, [pc, #84]	; (80043bc <HAL_RCC_OscConfig+0x248>)
 8004368:	2201      	movs	r2, #1
 800436a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800436c:	f7fd fd02 	bl	8001d74 <HAL_GetTick>
 8004370:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004372:	e008      	b.n	8004386 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004374:	f7fd fcfe 	bl	8001d74 <HAL_GetTick>
 8004378:	4602      	mov	r2, r0
 800437a:	693b      	ldr	r3, [r7, #16]
 800437c:	1ad3      	subs	r3, r2, r3
 800437e:	2b02      	cmp	r3, #2
 8004380:	d901      	bls.n	8004386 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004382:	2303      	movs	r3, #3
 8004384:	e167      	b.n	8004656 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004386:	4b0b      	ldr	r3, [pc, #44]	; (80043b4 <HAL_RCC_OscConfig+0x240>)
 8004388:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800438a:	f003 0302 	and.w	r3, r3, #2
 800438e:	2b00      	cmp	r3, #0
 8004390:	d0f0      	beq.n	8004374 <HAL_RCC_OscConfig+0x200>
 8004392:	e01b      	b.n	80043cc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004394:	4b09      	ldr	r3, [pc, #36]	; (80043bc <HAL_RCC_OscConfig+0x248>)
 8004396:	2200      	movs	r2, #0
 8004398:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800439a:	f7fd fceb 	bl	8001d74 <HAL_GetTick>
 800439e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80043a0:	e00e      	b.n	80043c0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80043a2:	f7fd fce7 	bl	8001d74 <HAL_GetTick>
 80043a6:	4602      	mov	r2, r0
 80043a8:	693b      	ldr	r3, [r7, #16]
 80043aa:	1ad3      	subs	r3, r2, r3
 80043ac:	2b02      	cmp	r3, #2
 80043ae:	d907      	bls.n	80043c0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80043b0:	2303      	movs	r3, #3
 80043b2:	e150      	b.n	8004656 <HAL_RCC_OscConfig+0x4e2>
 80043b4:	40023800 	.word	0x40023800
 80043b8:	42470000 	.word	0x42470000
 80043bc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80043c0:	4b88      	ldr	r3, [pc, #544]	; (80045e4 <HAL_RCC_OscConfig+0x470>)
 80043c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043c4:	f003 0302 	and.w	r3, r3, #2
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d1ea      	bne.n	80043a2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f003 0304 	and.w	r3, r3, #4
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	f000 8097 	beq.w	8004508 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80043da:	2300      	movs	r3, #0
 80043dc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80043de:	4b81      	ldr	r3, [pc, #516]	; (80045e4 <HAL_RCC_OscConfig+0x470>)
 80043e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d10f      	bne.n	800440a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80043ea:	2300      	movs	r3, #0
 80043ec:	60bb      	str	r3, [r7, #8]
 80043ee:	4b7d      	ldr	r3, [pc, #500]	; (80045e4 <HAL_RCC_OscConfig+0x470>)
 80043f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043f2:	4a7c      	ldr	r2, [pc, #496]	; (80045e4 <HAL_RCC_OscConfig+0x470>)
 80043f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043f8:	6413      	str	r3, [r2, #64]	; 0x40
 80043fa:	4b7a      	ldr	r3, [pc, #488]	; (80045e4 <HAL_RCC_OscConfig+0x470>)
 80043fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004402:	60bb      	str	r3, [r7, #8]
 8004404:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004406:	2301      	movs	r3, #1
 8004408:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800440a:	4b77      	ldr	r3, [pc, #476]	; (80045e8 <HAL_RCC_OscConfig+0x474>)
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004412:	2b00      	cmp	r3, #0
 8004414:	d118      	bne.n	8004448 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004416:	4b74      	ldr	r3, [pc, #464]	; (80045e8 <HAL_RCC_OscConfig+0x474>)
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	4a73      	ldr	r2, [pc, #460]	; (80045e8 <HAL_RCC_OscConfig+0x474>)
 800441c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004420:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004422:	f7fd fca7 	bl	8001d74 <HAL_GetTick>
 8004426:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004428:	e008      	b.n	800443c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800442a:	f7fd fca3 	bl	8001d74 <HAL_GetTick>
 800442e:	4602      	mov	r2, r0
 8004430:	693b      	ldr	r3, [r7, #16]
 8004432:	1ad3      	subs	r3, r2, r3
 8004434:	2b02      	cmp	r3, #2
 8004436:	d901      	bls.n	800443c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004438:	2303      	movs	r3, #3
 800443a:	e10c      	b.n	8004656 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800443c:	4b6a      	ldr	r3, [pc, #424]	; (80045e8 <HAL_RCC_OscConfig+0x474>)
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004444:	2b00      	cmp	r3, #0
 8004446:	d0f0      	beq.n	800442a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	689b      	ldr	r3, [r3, #8]
 800444c:	2b01      	cmp	r3, #1
 800444e:	d106      	bne.n	800445e <HAL_RCC_OscConfig+0x2ea>
 8004450:	4b64      	ldr	r3, [pc, #400]	; (80045e4 <HAL_RCC_OscConfig+0x470>)
 8004452:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004454:	4a63      	ldr	r2, [pc, #396]	; (80045e4 <HAL_RCC_OscConfig+0x470>)
 8004456:	f043 0301 	orr.w	r3, r3, #1
 800445a:	6713      	str	r3, [r2, #112]	; 0x70
 800445c:	e01c      	b.n	8004498 <HAL_RCC_OscConfig+0x324>
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	689b      	ldr	r3, [r3, #8]
 8004462:	2b05      	cmp	r3, #5
 8004464:	d10c      	bne.n	8004480 <HAL_RCC_OscConfig+0x30c>
 8004466:	4b5f      	ldr	r3, [pc, #380]	; (80045e4 <HAL_RCC_OscConfig+0x470>)
 8004468:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800446a:	4a5e      	ldr	r2, [pc, #376]	; (80045e4 <HAL_RCC_OscConfig+0x470>)
 800446c:	f043 0304 	orr.w	r3, r3, #4
 8004470:	6713      	str	r3, [r2, #112]	; 0x70
 8004472:	4b5c      	ldr	r3, [pc, #368]	; (80045e4 <HAL_RCC_OscConfig+0x470>)
 8004474:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004476:	4a5b      	ldr	r2, [pc, #364]	; (80045e4 <HAL_RCC_OscConfig+0x470>)
 8004478:	f043 0301 	orr.w	r3, r3, #1
 800447c:	6713      	str	r3, [r2, #112]	; 0x70
 800447e:	e00b      	b.n	8004498 <HAL_RCC_OscConfig+0x324>
 8004480:	4b58      	ldr	r3, [pc, #352]	; (80045e4 <HAL_RCC_OscConfig+0x470>)
 8004482:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004484:	4a57      	ldr	r2, [pc, #348]	; (80045e4 <HAL_RCC_OscConfig+0x470>)
 8004486:	f023 0301 	bic.w	r3, r3, #1
 800448a:	6713      	str	r3, [r2, #112]	; 0x70
 800448c:	4b55      	ldr	r3, [pc, #340]	; (80045e4 <HAL_RCC_OscConfig+0x470>)
 800448e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004490:	4a54      	ldr	r2, [pc, #336]	; (80045e4 <HAL_RCC_OscConfig+0x470>)
 8004492:	f023 0304 	bic.w	r3, r3, #4
 8004496:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	689b      	ldr	r3, [r3, #8]
 800449c:	2b00      	cmp	r3, #0
 800449e:	d015      	beq.n	80044cc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044a0:	f7fd fc68 	bl	8001d74 <HAL_GetTick>
 80044a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044a6:	e00a      	b.n	80044be <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80044a8:	f7fd fc64 	bl	8001d74 <HAL_GetTick>
 80044ac:	4602      	mov	r2, r0
 80044ae:	693b      	ldr	r3, [r7, #16]
 80044b0:	1ad3      	subs	r3, r2, r3
 80044b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80044b6:	4293      	cmp	r3, r2
 80044b8:	d901      	bls.n	80044be <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80044ba:	2303      	movs	r3, #3
 80044bc:	e0cb      	b.n	8004656 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044be:	4b49      	ldr	r3, [pc, #292]	; (80045e4 <HAL_RCC_OscConfig+0x470>)
 80044c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044c2:	f003 0302 	and.w	r3, r3, #2
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d0ee      	beq.n	80044a8 <HAL_RCC_OscConfig+0x334>
 80044ca:	e014      	b.n	80044f6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80044cc:	f7fd fc52 	bl	8001d74 <HAL_GetTick>
 80044d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80044d2:	e00a      	b.n	80044ea <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80044d4:	f7fd fc4e 	bl	8001d74 <HAL_GetTick>
 80044d8:	4602      	mov	r2, r0
 80044da:	693b      	ldr	r3, [r7, #16]
 80044dc:	1ad3      	subs	r3, r2, r3
 80044de:	f241 3288 	movw	r2, #5000	; 0x1388
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d901      	bls.n	80044ea <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80044e6:	2303      	movs	r3, #3
 80044e8:	e0b5      	b.n	8004656 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80044ea:	4b3e      	ldr	r3, [pc, #248]	; (80045e4 <HAL_RCC_OscConfig+0x470>)
 80044ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044ee:	f003 0302 	and.w	r3, r3, #2
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d1ee      	bne.n	80044d4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80044f6:	7dfb      	ldrb	r3, [r7, #23]
 80044f8:	2b01      	cmp	r3, #1
 80044fa:	d105      	bne.n	8004508 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80044fc:	4b39      	ldr	r3, [pc, #228]	; (80045e4 <HAL_RCC_OscConfig+0x470>)
 80044fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004500:	4a38      	ldr	r2, [pc, #224]	; (80045e4 <HAL_RCC_OscConfig+0x470>)
 8004502:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004506:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	699b      	ldr	r3, [r3, #24]
 800450c:	2b00      	cmp	r3, #0
 800450e:	f000 80a1 	beq.w	8004654 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004512:	4b34      	ldr	r3, [pc, #208]	; (80045e4 <HAL_RCC_OscConfig+0x470>)
 8004514:	689b      	ldr	r3, [r3, #8]
 8004516:	f003 030c 	and.w	r3, r3, #12
 800451a:	2b08      	cmp	r3, #8
 800451c:	d05c      	beq.n	80045d8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	699b      	ldr	r3, [r3, #24]
 8004522:	2b02      	cmp	r3, #2
 8004524:	d141      	bne.n	80045aa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004526:	4b31      	ldr	r3, [pc, #196]	; (80045ec <HAL_RCC_OscConfig+0x478>)
 8004528:	2200      	movs	r2, #0
 800452a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800452c:	f7fd fc22 	bl	8001d74 <HAL_GetTick>
 8004530:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004532:	e008      	b.n	8004546 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004534:	f7fd fc1e 	bl	8001d74 <HAL_GetTick>
 8004538:	4602      	mov	r2, r0
 800453a:	693b      	ldr	r3, [r7, #16]
 800453c:	1ad3      	subs	r3, r2, r3
 800453e:	2b02      	cmp	r3, #2
 8004540:	d901      	bls.n	8004546 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004542:	2303      	movs	r3, #3
 8004544:	e087      	b.n	8004656 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004546:	4b27      	ldr	r3, [pc, #156]	; (80045e4 <HAL_RCC_OscConfig+0x470>)
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800454e:	2b00      	cmp	r3, #0
 8004550:	d1f0      	bne.n	8004534 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	69da      	ldr	r2, [r3, #28]
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	6a1b      	ldr	r3, [r3, #32]
 800455a:	431a      	orrs	r2, r3
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004560:	019b      	lsls	r3, r3, #6
 8004562:	431a      	orrs	r2, r3
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004568:	085b      	lsrs	r3, r3, #1
 800456a:	3b01      	subs	r3, #1
 800456c:	041b      	lsls	r3, r3, #16
 800456e:	431a      	orrs	r2, r3
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004574:	061b      	lsls	r3, r3, #24
 8004576:	491b      	ldr	r1, [pc, #108]	; (80045e4 <HAL_RCC_OscConfig+0x470>)
 8004578:	4313      	orrs	r3, r2
 800457a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800457c:	4b1b      	ldr	r3, [pc, #108]	; (80045ec <HAL_RCC_OscConfig+0x478>)
 800457e:	2201      	movs	r2, #1
 8004580:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004582:	f7fd fbf7 	bl	8001d74 <HAL_GetTick>
 8004586:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004588:	e008      	b.n	800459c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800458a:	f7fd fbf3 	bl	8001d74 <HAL_GetTick>
 800458e:	4602      	mov	r2, r0
 8004590:	693b      	ldr	r3, [r7, #16]
 8004592:	1ad3      	subs	r3, r2, r3
 8004594:	2b02      	cmp	r3, #2
 8004596:	d901      	bls.n	800459c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004598:	2303      	movs	r3, #3
 800459a:	e05c      	b.n	8004656 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800459c:	4b11      	ldr	r3, [pc, #68]	; (80045e4 <HAL_RCC_OscConfig+0x470>)
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d0f0      	beq.n	800458a <HAL_RCC_OscConfig+0x416>
 80045a8:	e054      	b.n	8004654 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80045aa:	4b10      	ldr	r3, [pc, #64]	; (80045ec <HAL_RCC_OscConfig+0x478>)
 80045ac:	2200      	movs	r2, #0
 80045ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045b0:	f7fd fbe0 	bl	8001d74 <HAL_GetTick>
 80045b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045b6:	e008      	b.n	80045ca <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80045b8:	f7fd fbdc 	bl	8001d74 <HAL_GetTick>
 80045bc:	4602      	mov	r2, r0
 80045be:	693b      	ldr	r3, [r7, #16]
 80045c0:	1ad3      	subs	r3, r2, r3
 80045c2:	2b02      	cmp	r3, #2
 80045c4:	d901      	bls.n	80045ca <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80045c6:	2303      	movs	r3, #3
 80045c8:	e045      	b.n	8004656 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045ca:	4b06      	ldr	r3, [pc, #24]	; (80045e4 <HAL_RCC_OscConfig+0x470>)
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d1f0      	bne.n	80045b8 <HAL_RCC_OscConfig+0x444>
 80045d6:	e03d      	b.n	8004654 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	699b      	ldr	r3, [r3, #24]
 80045dc:	2b01      	cmp	r3, #1
 80045de:	d107      	bne.n	80045f0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80045e0:	2301      	movs	r3, #1
 80045e2:	e038      	b.n	8004656 <HAL_RCC_OscConfig+0x4e2>
 80045e4:	40023800 	.word	0x40023800
 80045e8:	40007000 	.word	0x40007000
 80045ec:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80045f0:	4b1b      	ldr	r3, [pc, #108]	; (8004660 <HAL_RCC_OscConfig+0x4ec>)
 80045f2:	685b      	ldr	r3, [r3, #4]
 80045f4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	699b      	ldr	r3, [r3, #24]
 80045fa:	2b01      	cmp	r3, #1
 80045fc:	d028      	beq.n	8004650 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004608:	429a      	cmp	r2, r3
 800460a:	d121      	bne.n	8004650 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004616:	429a      	cmp	r2, r3
 8004618:	d11a      	bne.n	8004650 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800461a:	68fa      	ldr	r2, [r7, #12]
 800461c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004620:	4013      	ands	r3, r2
 8004622:	687a      	ldr	r2, [r7, #4]
 8004624:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004626:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004628:	4293      	cmp	r3, r2
 800462a:	d111      	bne.n	8004650 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004636:	085b      	lsrs	r3, r3, #1
 8004638:	3b01      	subs	r3, #1
 800463a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800463c:	429a      	cmp	r2, r3
 800463e:	d107      	bne.n	8004650 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800464a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800464c:	429a      	cmp	r2, r3
 800464e:	d001      	beq.n	8004654 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004650:	2301      	movs	r3, #1
 8004652:	e000      	b.n	8004656 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004654:	2300      	movs	r3, #0
}
 8004656:	4618      	mov	r0, r3
 8004658:	3718      	adds	r7, #24
 800465a:	46bd      	mov	sp, r7
 800465c:	bd80      	pop	{r7, pc}
 800465e:	bf00      	nop
 8004660:	40023800 	.word	0x40023800

08004664 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004664:	b580      	push	{r7, lr}
 8004666:	b084      	sub	sp, #16
 8004668:	af00      	add	r7, sp, #0
 800466a:	6078      	str	r0, [r7, #4]
 800466c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	2b00      	cmp	r3, #0
 8004672:	d101      	bne.n	8004678 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004674:	2301      	movs	r3, #1
 8004676:	e0cc      	b.n	8004812 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004678:	4b68      	ldr	r3, [pc, #416]	; (800481c <HAL_RCC_ClockConfig+0x1b8>)
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f003 0307 	and.w	r3, r3, #7
 8004680:	683a      	ldr	r2, [r7, #0]
 8004682:	429a      	cmp	r2, r3
 8004684:	d90c      	bls.n	80046a0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004686:	4b65      	ldr	r3, [pc, #404]	; (800481c <HAL_RCC_ClockConfig+0x1b8>)
 8004688:	683a      	ldr	r2, [r7, #0]
 800468a:	b2d2      	uxtb	r2, r2
 800468c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800468e:	4b63      	ldr	r3, [pc, #396]	; (800481c <HAL_RCC_ClockConfig+0x1b8>)
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f003 0307 	and.w	r3, r3, #7
 8004696:	683a      	ldr	r2, [r7, #0]
 8004698:	429a      	cmp	r2, r3
 800469a:	d001      	beq.n	80046a0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800469c:	2301      	movs	r3, #1
 800469e:	e0b8      	b.n	8004812 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f003 0302 	and.w	r3, r3, #2
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d020      	beq.n	80046ee <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f003 0304 	and.w	r3, r3, #4
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d005      	beq.n	80046c4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80046b8:	4b59      	ldr	r3, [pc, #356]	; (8004820 <HAL_RCC_ClockConfig+0x1bc>)
 80046ba:	689b      	ldr	r3, [r3, #8]
 80046bc:	4a58      	ldr	r2, [pc, #352]	; (8004820 <HAL_RCC_ClockConfig+0x1bc>)
 80046be:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80046c2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f003 0308 	and.w	r3, r3, #8
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d005      	beq.n	80046dc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80046d0:	4b53      	ldr	r3, [pc, #332]	; (8004820 <HAL_RCC_ClockConfig+0x1bc>)
 80046d2:	689b      	ldr	r3, [r3, #8]
 80046d4:	4a52      	ldr	r2, [pc, #328]	; (8004820 <HAL_RCC_ClockConfig+0x1bc>)
 80046d6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80046da:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80046dc:	4b50      	ldr	r3, [pc, #320]	; (8004820 <HAL_RCC_ClockConfig+0x1bc>)
 80046de:	689b      	ldr	r3, [r3, #8]
 80046e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	689b      	ldr	r3, [r3, #8]
 80046e8:	494d      	ldr	r1, [pc, #308]	; (8004820 <HAL_RCC_ClockConfig+0x1bc>)
 80046ea:	4313      	orrs	r3, r2
 80046ec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f003 0301 	and.w	r3, r3, #1
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d044      	beq.n	8004784 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	685b      	ldr	r3, [r3, #4]
 80046fe:	2b01      	cmp	r3, #1
 8004700:	d107      	bne.n	8004712 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004702:	4b47      	ldr	r3, [pc, #284]	; (8004820 <HAL_RCC_ClockConfig+0x1bc>)
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800470a:	2b00      	cmp	r3, #0
 800470c:	d119      	bne.n	8004742 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800470e:	2301      	movs	r3, #1
 8004710:	e07f      	b.n	8004812 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	685b      	ldr	r3, [r3, #4]
 8004716:	2b02      	cmp	r3, #2
 8004718:	d003      	beq.n	8004722 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800471e:	2b03      	cmp	r3, #3
 8004720:	d107      	bne.n	8004732 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004722:	4b3f      	ldr	r3, [pc, #252]	; (8004820 <HAL_RCC_ClockConfig+0x1bc>)
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800472a:	2b00      	cmp	r3, #0
 800472c:	d109      	bne.n	8004742 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800472e:	2301      	movs	r3, #1
 8004730:	e06f      	b.n	8004812 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004732:	4b3b      	ldr	r3, [pc, #236]	; (8004820 <HAL_RCC_ClockConfig+0x1bc>)
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f003 0302 	and.w	r3, r3, #2
 800473a:	2b00      	cmp	r3, #0
 800473c:	d101      	bne.n	8004742 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800473e:	2301      	movs	r3, #1
 8004740:	e067      	b.n	8004812 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004742:	4b37      	ldr	r3, [pc, #220]	; (8004820 <HAL_RCC_ClockConfig+0x1bc>)
 8004744:	689b      	ldr	r3, [r3, #8]
 8004746:	f023 0203 	bic.w	r2, r3, #3
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	685b      	ldr	r3, [r3, #4]
 800474e:	4934      	ldr	r1, [pc, #208]	; (8004820 <HAL_RCC_ClockConfig+0x1bc>)
 8004750:	4313      	orrs	r3, r2
 8004752:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004754:	f7fd fb0e 	bl	8001d74 <HAL_GetTick>
 8004758:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800475a:	e00a      	b.n	8004772 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800475c:	f7fd fb0a 	bl	8001d74 <HAL_GetTick>
 8004760:	4602      	mov	r2, r0
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	1ad3      	subs	r3, r2, r3
 8004766:	f241 3288 	movw	r2, #5000	; 0x1388
 800476a:	4293      	cmp	r3, r2
 800476c:	d901      	bls.n	8004772 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800476e:	2303      	movs	r3, #3
 8004770:	e04f      	b.n	8004812 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004772:	4b2b      	ldr	r3, [pc, #172]	; (8004820 <HAL_RCC_ClockConfig+0x1bc>)
 8004774:	689b      	ldr	r3, [r3, #8]
 8004776:	f003 020c 	and.w	r2, r3, #12
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	685b      	ldr	r3, [r3, #4]
 800477e:	009b      	lsls	r3, r3, #2
 8004780:	429a      	cmp	r2, r3
 8004782:	d1eb      	bne.n	800475c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004784:	4b25      	ldr	r3, [pc, #148]	; (800481c <HAL_RCC_ClockConfig+0x1b8>)
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f003 0307 	and.w	r3, r3, #7
 800478c:	683a      	ldr	r2, [r7, #0]
 800478e:	429a      	cmp	r2, r3
 8004790:	d20c      	bcs.n	80047ac <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004792:	4b22      	ldr	r3, [pc, #136]	; (800481c <HAL_RCC_ClockConfig+0x1b8>)
 8004794:	683a      	ldr	r2, [r7, #0]
 8004796:	b2d2      	uxtb	r2, r2
 8004798:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800479a:	4b20      	ldr	r3, [pc, #128]	; (800481c <HAL_RCC_ClockConfig+0x1b8>)
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f003 0307 	and.w	r3, r3, #7
 80047a2:	683a      	ldr	r2, [r7, #0]
 80047a4:	429a      	cmp	r2, r3
 80047a6:	d001      	beq.n	80047ac <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80047a8:	2301      	movs	r3, #1
 80047aa:	e032      	b.n	8004812 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f003 0304 	and.w	r3, r3, #4
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d008      	beq.n	80047ca <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80047b8:	4b19      	ldr	r3, [pc, #100]	; (8004820 <HAL_RCC_ClockConfig+0x1bc>)
 80047ba:	689b      	ldr	r3, [r3, #8]
 80047bc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	68db      	ldr	r3, [r3, #12]
 80047c4:	4916      	ldr	r1, [pc, #88]	; (8004820 <HAL_RCC_ClockConfig+0x1bc>)
 80047c6:	4313      	orrs	r3, r2
 80047c8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f003 0308 	and.w	r3, r3, #8
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d009      	beq.n	80047ea <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80047d6:	4b12      	ldr	r3, [pc, #72]	; (8004820 <HAL_RCC_ClockConfig+0x1bc>)
 80047d8:	689b      	ldr	r3, [r3, #8]
 80047da:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	691b      	ldr	r3, [r3, #16]
 80047e2:	00db      	lsls	r3, r3, #3
 80047e4:	490e      	ldr	r1, [pc, #56]	; (8004820 <HAL_RCC_ClockConfig+0x1bc>)
 80047e6:	4313      	orrs	r3, r2
 80047e8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80047ea:	f000 f821 	bl	8004830 <HAL_RCC_GetSysClockFreq>
 80047ee:	4602      	mov	r2, r0
 80047f0:	4b0b      	ldr	r3, [pc, #44]	; (8004820 <HAL_RCC_ClockConfig+0x1bc>)
 80047f2:	689b      	ldr	r3, [r3, #8]
 80047f4:	091b      	lsrs	r3, r3, #4
 80047f6:	f003 030f 	and.w	r3, r3, #15
 80047fa:	490a      	ldr	r1, [pc, #40]	; (8004824 <HAL_RCC_ClockConfig+0x1c0>)
 80047fc:	5ccb      	ldrb	r3, [r1, r3]
 80047fe:	fa22 f303 	lsr.w	r3, r2, r3
 8004802:	4a09      	ldr	r2, [pc, #36]	; (8004828 <HAL_RCC_ClockConfig+0x1c4>)
 8004804:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004806:	4b09      	ldr	r3, [pc, #36]	; (800482c <HAL_RCC_ClockConfig+0x1c8>)
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	4618      	mov	r0, r3
 800480c:	f7fd fa6e 	bl	8001cec <HAL_InitTick>

  return HAL_OK;
 8004810:	2300      	movs	r3, #0
}
 8004812:	4618      	mov	r0, r3
 8004814:	3710      	adds	r7, #16
 8004816:	46bd      	mov	sp, r7
 8004818:	bd80      	pop	{r7, pc}
 800481a:	bf00      	nop
 800481c:	40023c00 	.word	0x40023c00
 8004820:	40023800 	.word	0x40023800
 8004824:	0800c8b4 	.word	0x0800c8b4
 8004828:	20000004 	.word	0x20000004
 800482c:	20000008 	.word	0x20000008

08004830 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004830:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004834:	b090      	sub	sp, #64	; 0x40
 8004836:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004838:	2300      	movs	r3, #0
 800483a:	637b      	str	r3, [r7, #52]	; 0x34
 800483c:	2300      	movs	r3, #0
 800483e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004840:	2300      	movs	r3, #0
 8004842:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8004844:	2300      	movs	r3, #0
 8004846:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004848:	4b59      	ldr	r3, [pc, #356]	; (80049b0 <HAL_RCC_GetSysClockFreq+0x180>)
 800484a:	689b      	ldr	r3, [r3, #8]
 800484c:	f003 030c 	and.w	r3, r3, #12
 8004850:	2b08      	cmp	r3, #8
 8004852:	d00d      	beq.n	8004870 <HAL_RCC_GetSysClockFreq+0x40>
 8004854:	2b08      	cmp	r3, #8
 8004856:	f200 80a1 	bhi.w	800499c <HAL_RCC_GetSysClockFreq+0x16c>
 800485a:	2b00      	cmp	r3, #0
 800485c:	d002      	beq.n	8004864 <HAL_RCC_GetSysClockFreq+0x34>
 800485e:	2b04      	cmp	r3, #4
 8004860:	d003      	beq.n	800486a <HAL_RCC_GetSysClockFreq+0x3a>
 8004862:	e09b      	b.n	800499c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004864:	4b53      	ldr	r3, [pc, #332]	; (80049b4 <HAL_RCC_GetSysClockFreq+0x184>)
 8004866:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8004868:	e09b      	b.n	80049a2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800486a:	4b53      	ldr	r3, [pc, #332]	; (80049b8 <HAL_RCC_GetSysClockFreq+0x188>)
 800486c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800486e:	e098      	b.n	80049a2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004870:	4b4f      	ldr	r3, [pc, #316]	; (80049b0 <HAL_RCC_GetSysClockFreq+0x180>)
 8004872:	685b      	ldr	r3, [r3, #4]
 8004874:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004878:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800487a:	4b4d      	ldr	r3, [pc, #308]	; (80049b0 <HAL_RCC_GetSysClockFreq+0x180>)
 800487c:	685b      	ldr	r3, [r3, #4]
 800487e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004882:	2b00      	cmp	r3, #0
 8004884:	d028      	beq.n	80048d8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004886:	4b4a      	ldr	r3, [pc, #296]	; (80049b0 <HAL_RCC_GetSysClockFreq+0x180>)
 8004888:	685b      	ldr	r3, [r3, #4]
 800488a:	099b      	lsrs	r3, r3, #6
 800488c:	2200      	movs	r2, #0
 800488e:	623b      	str	r3, [r7, #32]
 8004890:	627a      	str	r2, [r7, #36]	; 0x24
 8004892:	6a3b      	ldr	r3, [r7, #32]
 8004894:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004898:	2100      	movs	r1, #0
 800489a:	4b47      	ldr	r3, [pc, #284]	; (80049b8 <HAL_RCC_GetSysClockFreq+0x188>)
 800489c:	fb03 f201 	mul.w	r2, r3, r1
 80048a0:	2300      	movs	r3, #0
 80048a2:	fb00 f303 	mul.w	r3, r0, r3
 80048a6:	4413      	add	r3, r2
 80048a8:	4a43      	ldr	r2, [pc, #268]	; (80049b8 <HAL_RCC_GetSysClockFreq+0x188>)
 80048aa:	fba0 1202 	umull	r1, r2, r0, r2
 80048ae:	62fa      	str	r2, [r7, #44]	; 0x2c
 80048b0:	460a      	mov	r2, r1
 80048b2:	62ba      	str	r2, [r7, #40]	; 0x28
 80048b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80048b6:	4413      	add	r3, r2
 80048b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80048ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048bc:	2200      	movs	r2, #0
 80048be:	61bb      	str	r3, [r7, #24]
 80048c0:	61fa      	str	r2, [r7, #28]
 80048c2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80048c6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80048ca:	f7fb fc83 	bl	80001d4 <__aeabi_uldivmod>
 80048ce:	4602      	mov	r2, r0
 80048d0:	460b      	mov	r3, r1
 80048d2:	4613      	mov	r3, r2
 80048d4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80048d6:	e053      	b.n	8004980 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80048d8:	4b35      	ldr	r3, [pc, #212]	; (80049b0 <HAL_RCC_GetSysClockFreq+0x180>)
 80048da:	685b      	ldr	r3, [r3, #4]
 80048dc:	099b      	lsrs	r3, r3, #6
 80048de:	2200      	movs	r2, #0
 80048e0:	613b      	str	r3, [r7, #16]
 80048e2:	617a      	str	r2, [r7, #20]
 80048e4:	693b      	ldr	r3, [r7, #16]
 80048e6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80048ea:	f04f 0b00 	mov.w	fp, #0
 80048ee:	4652      	mov	r2, sl
 80048f0:	465b      	mov	r3, fp
 80048f2:	f04f 0000 	mov.w	r0, #0
 80048f6:	f04f 0100 	mov.w	r1, #0
 80048fa:	0159      	lsls	r1, r3, #5
 80048fc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004900:	0150      	lsls	r0, r2, #5
 8004902:	4602      	mov	r2, r0
 8004904:	460b      	mov	r3, r1
 8004906:	ebb2 080a 	subs.w	r8, r2, sl
 800490a:	eb63 090b 	sbc.w	r9, r3, fp
 800490e:	f04f 0200 	mov.w	r2, #0
 8004912:	f04f 0300 	mov.w	r3, #0
 8004916:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800491a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800491e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004922:	ebb2 0408 	subs.w	r4, r2, r8
 8004926:	eb63 0509 	sbc.w	r5, r3, r9
 800492a:	f04f 0200 	mov.w	r2, #0
 800492e:	f04f 0300 	mov.w	r3, #0
 8004932:	00eb      	lsls	r3, r5, #3
 8004934:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004938:	00e2      	lsls	r2, r4, #3
 800493a:	4614      	mov	r4, r2
 800493c:	461d      	mov	r5, r3
 800493e:	eb14 030a 	adds.w	r3, r4, sl
 8004942:	603b      	str	r3, [r7, #0]
 8004944:	eb45 030b 	adc.w	r3, r5, fp
 8004948:	607b      	str	r3, [r7, #4]
 800494a:	f04f 0200 	mov.w	r2, #0
 800494e:	f04f 0300 	mov.w	r3, #0
 8004952:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004956:	4629      	mov	r1, r5
 8004958:	028b      	lsls	r3, r1, #10
 800495a:	4621      	mov	r1, r4
 800495c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004960:	4621      	mov	r1, r4
 8004962:	028a      	lsls	r2, r1, #10
 8004964:	4610      	mov	r0, r2
 8004966:	4619      	mov	r1, r3
 8004968:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800496a:	2200      	movs	r2, #0
 800496c:	60bb      	str	r3, [r7, #8]
 800496e:	60fa      	str	r2, [r7, #12]
 8004970:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004974:	f7fb fc2e 	bl	80001d4 <__aeabi_uldivmod>
 8004978:	4602      	mov	r2, r0
 800497a:	460b      	mov	r3, r1
 800497c:	4613      	mov	r3, r2
 800497e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004980:	4b0b      	ldr	r3, [pc, #44]	; (80049b0 <HAL_RCC_GetSysClockFreq+0x180>)
 8004982:	685b      	ldr	r3, [r3, #4]
 8004984:	0c1b      	lsrs	r3, r3, #16
 8004986:	f003 0303 	and.w	r3, r3, #3
 800498a:	3301      	adds	r3, #1
 800498c:	005b      	lsls	r3, r3, #1
 800498e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8004990:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004992:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004994:	fbb2 f3f3 	udiv	r3, r2, r3
 8004998:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800499a:	e002      	b.n	80049a2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800499c:	4b05      	ldr	r3, [pc, #20]	; (80049b4 <HAL_RCC_GetSysClockFreq+0x184>)
 800499e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80049a0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80049a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80049a4:	4618      	mov	r0, r3
 80049a6:	3740      	adds	r7, #64	; 0x40
 80049a8:	46bd      	mov	sp, r7
 80049aa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80049ae:	bf00      	nop
 80049b0:	40023800 	.word	0x40023800
 80049b4:	00f42400 	.word	0x00f42400
 80049b8:	017d7840 	.word	0x017d7840

080049bc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80049bc:	b480      	push	{r7}
 80049be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80049c0:	4b03      	ldr	r3, [pc, #12]	; (80049d0 <HAL_RCC_GetHCLKFreq+0x14>)
 80049c2:	681b      	ldr	r3, [r3, #0]
}
 80049c4:	4618      	mov	r0, r3
 80049c6:	46bd      	mov	sp, r7
 80049c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049cc:	4770      	bx	lr
 80049ce:	bf00      	nop
 80049d0:	20000004 	.word	0x20000004

080049d4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80049d4:	b580      	push	{r7, lr}
 80049d6:	b082      	sub	sp, #8
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d101      	bne.n	80049e6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80049e2:	2301      	movs	r3, #1
 80049e4:	e07b      	b.n	8004ade <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d108      	bne.n	8004a00 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	685b      	ldr	r3, [r3, #4]
 80049f2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80049f6:	d009      	beq.n	8004a0c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	2200      	movs	r2, #0
 80049fc:	61da      	str	r2, [r3, #28]
 80049fe:	e005      	b.n	8004a0c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2200      	movs	r2, #0
 8004a04:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	2200      	movs	r2, #0
 8004a0a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2200      	movs	r2, #0
 8004a10:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004a18:	b2db      	uxtb	r3, r3
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d106      	bne.n	8004a2c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	2200      	movs	r2, #0
 8004a22:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004a26:	6878      	ldr	r0, [r7, #4]
 8004a28:	f7fc ff9e 	bl	8001968 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2202      	movs	r2, #2
 8004a30:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	681a      	ldr	r2, [r3, #0]
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a42:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	685b      	ldr	r3, [r3, #4]
 8004a48:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	689b      	ldr	r3, [r3, #8]
 8004a50:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004a54:	431a      	orrs	r2, r3
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	68db      	ldr	r3, [r3, #12]
 8004a5a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a5e:	431a      	orrs	r2, r3
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	691b      	ldr	r3, [r3, #16]
 8004a64:	f003 0302 	and.w	r3, r3, #2
 8004a68:	431a      	orrs	r2, r3
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	695b      	ldr	r3, [r3, #20]
 8004a6e:	f003 0301 	and.w	r3, r3, #1
 8004a72:	431a      	orrs	r2, r3
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	699b      	ldr	r3, [r3, #24]
 8004a78:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004a7c:	431a      	orrs	r2, r3
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	69db      	ldr	r3, [r3, #28]
 8004a82:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004a86:	431a      	orrs	r2, r3
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	6a1b      	ldr	r3, [r3, #32]
 8004a8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a90:	ea42 0103 	orr.w	r1, r2, r3
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a98:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	430a      	orrs	r2, r1
 8004aa2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	699b      	ldr	r3, [r3, #24]
 8004aa8:	0c1b      	lsrs	r3, r3, #16
 8004aaa:	f003 0104 	and.w	r1, r3, #4
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ab2:	f003 0210 	and.w	r2, r3, #16
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	430a      	orrs	r2, r1
 8004abc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	69da      	ldr	r2, [r3, #28]
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004acc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2201      	movs	r2, #1
 8004ad8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004adc:	2300      	movs	r3, #0
}
 8004ade:	4618      	mov	r0, r3
 8004ae0:	3708      	adds	r7, #8
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	bd80      	pop	{r7, pc}

08004ae6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ae6:	b580      	push	{r7, lr}
 8004ae8:	b088      	sub	sp, #32
 8004aea:	af00      	add	r7, sp, #0
 8004aec:	60f8      	str	r0, [r7, #12]
 8004aee:	60b9      	str	r1, [r7, #8]
 8004af0:	603b      	str	r3, [r7, #0]
 8004af2:	4613      	mov	r3, r2
 8004af4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004af6:	2300      	movs	r3, #0
 8004af8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004b00:	2b01      	cmp	r3, #1
 8004b02:	d101      	bne.n	8004b08 <HAL_SPI_Transmit+0x22>
 8004b04:	2302      	movs	r3, #2
 8004b06:	e126      	b.n	8004d56 <HAL_SPI_Transmit+0x270>
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	2201      	movs	r2, #1
 8004b0c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004b10:	f7fd f930 	bl	8001d74 <HAL_GetTick>
 8004b14:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004b16:	88fb      	ldrh	r3, [r7, #6]
 8004b18:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004b20:	b2db      	uxtb	r3, r3
 8004b22:	2b01      	cmp	r3, #1
 8004b24:	d002      	beq.n	8004b2c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004b26:	2302      	movs	r3, #2
 8004b28:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004b2a:	e10b      	b.n	8004d44 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004b2c:	68bb      	ldr	r3, [r7, #8]
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d002      	beq.n	8004b38 <HAL_SPI_Transmit+0x52>
 8004b32:	88fb      	ldrh	r3, [r7, #6]
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d102      	bne.n	8004b3e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004b38:	2301      	movs	r3, #1
 8004b3a:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004b3c:	e102      	b.n	8004d44 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	2203      	movs	r2, #3
 8004b42:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	2200      	movs	r2, #0
 8004b4a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	68ba      	ldr	r2, [r7, #8]
 8004b50:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	88fa      	ldrh	r2, [r7, #6]
 8004b56:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	88fa      	ldrh	r2, [r7, #6]
 8004b5c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	2200      	movs	r2, #0
 8004b62:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	2200      	movs	r2, #0
 8004b68:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	2200      	movs	r2, #0
 8004b74:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	2200      	movs	r2, #0
 8004b7a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	689b      	ldr	r3, [r3, #8]
 8004b80:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b84:	d10f      	bne.n	8004ba6 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	681a      	ldr	r2, [r3, #0]
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b94:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	681a      	ldr	r2, [r3, #0]
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004ba4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bb0:	2b40      	cmp	r3, #64	; 0x40
 8004bb2:	d007      	beq.n	8004bc4 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	681a      	ldr	r2, [r3, #0]
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004bc2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	68db      	ldr	r3, [r3, #12]
 8004bc8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004bcc:	d14b      	bne.n	8004c66 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	685b      	ldr	r3, [r3, #4]
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d002      	beq.n	8004bdc <HAL_SPI_Transmit+0xf6>
 8004bd6:	8afb      	ldrh	r3, [r7, #22]
 8004bd8:	2b01      	cmp	r3, #1
 8004bda:	d13e      	bne.n	8004c5a <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004be0:	881a      	ldrh	r2, [r3, #0]
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bec:	1c9a      	adds	r2, r3, #2
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004bf6:	b29b      	uxth	r3, r3
 8004bf8:	3b01      	subs	r3, #1
 8004bfa:	b29a      	uxth	r2, r3
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004c00:	e02b      	b.n	8004c5a <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	689b      	ldr	r3, [r3, #8]
 8004c08:	f003 0302 	and.w	r3, r3, #2
 8004c0c:	2b02      	cmp	r3, #2
 8004c0e:	d112      	bne.n	8004c36 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c14:	881a      	ldrh	r2, [r3, #0]
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c20:	1c9a      	adds	r2, r3, #2
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004c2a:	b29b      	uxth	r3, r3
 8004c2c:	3b01      	subs	r3, #1
 8004c2e:	b29a      	uxth	r2, r3
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	86da      	strh	r2, [r3, #54]	; 0x36
 8004c34:	e011      	b.n	8004c5a <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004c36:	f7fd f89d 	bl	8001d74 <HAL_GetTick>
 8004c3a:	4602      	mov	r2, r0
 8004c3c:	69bb      	ldr	r3, [r7, #24]
 8004c3e:	1ad3      	subs	r3, r2, r3
 8004c40:	683a      	ldr	r2, [r7, #0]
 8004c42:	429a      	cmp	r2, r3
 8004c44:	d803      	bhi.n	8004c4e <HAL_SPI_Transmit+0x168>
 8004c46:	683b      	ldr	r3, [r7, #0]
 8004c48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c4c:	d102      	bne.n	8004c54 <HAL_SPI_Transmit+0x16e>
 8004c4e:	683b      	ldr	r3, [r7, #0]
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d102      	bne.n	8004c5a <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8004c54:	2303      	movs	r3, #3
 8004c56:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004c58:	e074      	b.n	8004d44 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004c5e:	b29b      	uxth	r3, r3
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d1ce      	bne.n	8004c02 <HAL_SPI_Transmit+0x11c>
 8004c64:	e04c      	b.n	8004d00 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	685b      	ldr	r3, [r3, #4]
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d002      	beq.n	8004c74 <HAL_SPI_Transmit+0x18e>
 8004c6e:	8afb      	ldrh	r3, [r7, #22]
 8004c70:	2b01      	cmp	r3, #1
 8004c72:	d140      	bne.n	8004cf6 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	330c      	adds	r3, #12
 8004c7e:	7812      	ldrb	r2, [r2, #0]
 8004c80:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c86:	1c5a      	adds	r2, r3, #1
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004c90:	b29b      	uxth	r3, r3
 8004c92:	3b01      	subs	r3, #1
 8004c94:	b29a      	uxth	r2, r3
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004c9a:	e02c      	b.n	8004cf6 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	689b      	ldr	r3, [r3, #8]
 8004ca2:	f003 0302 	and.w	r3, r3, #2
 8004ca6:	2b02      	cmp	r3, #2
 8004ca8:	d113      	bne.n	8004cd2 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	330c      	adds	r3, #12
 8004cb4:	7812      	ldrb	r2, [r2, #0]
 8004cb6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cbc:	1c5a      	adds	r2, r3, #1
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004cc6:	b29b      	uxth	r3, r3
 8004cc8:	3b01      	subs	r3, #1
 8004cca:	b29a      	uxth	r2, r3
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	86da      	strh	r2, [r3, #54]	; 0x36
 8004cd0:	e011      	b.n	8004cf6 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004cd2:	f7fd f84f 	bl	8001d74 <HAL_GetTick>
 8004cd6:	4602      	mov	r2, r0
 8004cd8:	69bb      	ldr	r3, [r7, #24]
 8004cda:	1ad3      	subs	r3, r2, r3
 8004cdc:	683a      	ldr	r2, [r7, #0]
 8004cde:	429a      	cmp	r2, r3
 8004ce0:	d803      	bhi.n	8004cea <HAL_SPI_Transmit+0x204>
 8004ce2:	683b      	ldr	r3, [r7, #0]
 8004ce4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ce8:	d102      	bne.n	8004cf0 <HAL_SPI_Transmit+0x20a>
 8004cea:	683b      	ldr	r3, [r7, #0]
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d102      	bne.n	8004cf6 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8004cf0:	2303      	movs	r3, #3
 8004cf2:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004cf4:	e026      	b.n	8004d44 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004cfa:	b29b      	uxth	r3, r3
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d1cd      	bne.n	8004c9c <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004d00:	69ba      	ldr	r2, [r7, #24]
 8004d02:	6839      	ldr	r1, [r7, #0]
 8004d04:	68f8      	ldr	r0, [r7, #12]
 8004d06:	f000 ff9f 	bl	8005c48 <SPI_EndRxTxTransaction>
 8004d0a:	4603      	mov	r3, r0
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d002      	beq.n	8004d16 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	2220      	movs	r2, #32
 8004d14:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	689b      	ldr	r3, [r3, #8]
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d10a      	bne.n	8004d34 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004d1e:	2300      	movs	r3, #0
 8004d20:	613b      	str	r3, [r7, #16]
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	68db      	ldr	r3, [r3, #12]
 8004d28:	613b      	str	r3, [r7, #16]
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	689b      	ldr	r3, [r3, #8]
 8004d30:	613b      	str	r3, [r7, #16]
 8004d32:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d002      	beq.n	8004d42 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8004d3c:	2301      	movs	r3, #1
 8004d3e:	77fb      	strb	r3, [r7, #31]
 8004d40:	e000      	b.n	8004d44 <HAL_SPI_Transmit+0x25e>
  }

error:
 8004d42:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	2201      	movs	r2, #1
 8004d48:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	2200      	movs	r2, #0
 8004d50:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004d54:	7ffb      	ldrb	r3, [r7, #31]
}
 8004d56:	4618      	mov	r0, r3
 8004d58:	3720      	adds	r7, #32
 8004d5a:	46bd      	mov	sp, r7
 8004d5c:	bd80      	pop	{r7, pc}

08004d5e <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d5e:	b580      	push	{r7, lr}
 8004d60:	b088      	sub	sp, #32
 8004d62:	af02      	add	r7, sp, #8
 8004d64:	60f8      	str	r0, [r7, #12]
 8004d66:	60b9      	str	r1, [r7, #8]
 8004d68:	603b      	str	r3, [r7, #0]
 8004d6a:	4613      	mov	r3, r2
 8004d6c:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004d6e:	2300      	movs	r3, #0
 8004d70:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	685b      	ldr	r3, [r3, #4]
 8004d76:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004d7a:	d112      	bne.n	8004da2 <HAL_SPI_Receive+0x44>
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	689b      	ldr	r3, [r3, #8]
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d10e      	bne.n	8004da2 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	2204      	movs	r2, #4
 8004d88:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004d8c:	88fa      	ldrh	r2, [r7, #6]
 8004d8e:	683b      	ldr	r3, [r7, #0]
 8004d90:	9300      	str	r3, [sp, #0]
 8004d92:	4613      	mov	r3, r2
 8004d94:	68ba      	ldr	r2, [r7, #8]
 8004d96:	68b9      	ldr	r1, [r7, #8]
 8004d98:	68f8      	ldr	r0, [r7, #12]
 8004d9a:	f000 f8f1 	bl	8004f80 <HAL_SPI_TransmitReceive>
 8004d9e:	4603      	mov	r3, r0
 8004da0:	e0ea      	b.n	8004f78 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004da8:	2b01      	cmp	r3, #1
 8004daa:	d101      	bne.n	8004db0 <HAL_SPI_Receive+0x52>
 8004dac:	2302      	movs	r3, #2
 8004dae:	e0e3      	b.n	8004f78 <HAL_SPI_Receive+0x21a>
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	2201      	movs	r2, #1
 8004db4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004db8:	f7fc ffdc 	bl	8001d74 <HAL_GetTick>
 8004dbc:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004dc4:	b2db      	uxtb	r3, r3
 8004dc6:	2b01      	cmp	r3, #1
 8004dc8:	d002      	beq.n	8004dd0 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8004dca:	2302      	movs	r3, #2
 8004dcc:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004dce:	e0ca      	b.n	8004f66 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8004dd0:	68bb      	ldr	r3, [r7, #8]
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d002      	beq.n	8004ddc <HAL_SPI_Receive+0x7e>
 8004dd6:	88fb      	ldrh	r3, [r7, #6]
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d102      	bne.n	8004de2 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004ddc:	2301      	movs	r3, #1
 8004dde:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004de0:	e0c1      	b.n	8004f66 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	2204      	movs	r2, #4
 8004de6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	2200      	movs	r2, #0
 8004dee:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	68ba      	ldr	r2, [r7, #8]
 8004df4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	88fa      	ldrh	r2, [r7, #6]
 8004dfa:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	88fa      	ldrh	r2, [r7, #6]
 8004e00:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	2200      	movs	r2, #0
 8004e06:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	2200      	movs	r2, #0
 8004e0c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	2200      	movs	r2, #0
 8004e12:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	2200      	movs	r2, #0
 8004e18:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	689b      	ldr	r3, [r3, #8]
 8004e24:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e28:	d10f      	bne.n	8004e4a <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	681a      	ldr	r2, [r3, #0]
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004e38:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	681a      	ldr	r2, [r3, #0]
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004e48:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e54:	2b40      	cmp	r3, #64	; 0x40
 8004e56:	d007      	beq.n	8004e68 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	681a      	ldr	r2, [r3, #0]
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004e66:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	68db      	ldr	r3, [r3, #12]
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d162      	bne.n	8004f36 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004e70:	e02e      	b.n	8004ed0 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	689b      	ldr	r3, [r3, #8]
 8004e78:	f003 0301 	and.w	r3, r3, #1
 8004e7c:	2b01      	cmp	r3, #1
 8004e7e:	d115      	bne.n	8004eac <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	f103 020c 	add.w	r2, r3, #12
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e8c:	7812      	ldrb	r2, [r2, #0]
 8004e8e:	b2d2      	uxtb	r2, r2
 8004e90:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e96:	1c5a      	adds	r2, r3, #1
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ea0:	b29b      	uxth	r3, r3
 8004ea2:	3b01      	subs	r3, #1
 8004ea4:	b29a      	uxth	r2, r3
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004eaa:	e011      	b.n	8004ed0 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004eac:	f7fc ff62 	bl	8001d74 <HAL_GetTick>
 8004eb0:	4602      	mov	r2, r0
 8004eb2:	693b      	ldr	r3, [r7, #16]
 8004eb4:	1ad3      	subs	r3, r2, r3
 8004eb6:	683a      	ldr	r2, [r7, #0]
 8004eb8:	429a      	cmp	r2, r3
 8004eba:	d803      	bhi.n	8004ec4 <HAL_SPI_Receive+0x166>
 8004ebc:	683b      	ldr	r3, [r7, #0]
 8004ebe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ec2:	d102      	bne.n	8004eca <HAL_SPI_Receive+0x16c>
 8004ec4:	683b      	ldr	r3, [r7, #0]
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d102      	bne.n	8004ed0 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8004eca:	2303      	movs	r3, #3
 8004ecc:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004ece:	e04a      	b.n	8004f66 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ed4:	b29b      	uxth	r3, r3
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d1cb      	bne.n	8004e72 <HAL_SPI_Receive+0x114>
 8004eda:	e031      	b.n	8004f40 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	689b      	ldr	r3, [r3, #8]
 8004ee2:	f003 0301 	and.w	r3, r3, #1
 8004ee6:	2b01      	cmp	r3, #1
 8004ee8:	d113      	bne.n	8004f12 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	68da      	ldr	r2, [r3, #12]
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ef4:	b292      	uxth	r2, r2
 8004ef6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004efc:	1c9a      	adds	r2, r3, #2
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f06:	b29b      	uxth	r3, r3
 8004f08:	3b01      	subs	r3, #1
 8004f0a:	b29a      	uxth	r2, r3
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004f10:	e011      	b.n	8004f36 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004f12:	f7fc ff2f 	bl	8001d74 <HAL_GetTick>
 8004f16:	4602      	mov	r2, r0
 8004f18:	693b      	ldr	r3, [r7, #16]
 8004f1a:	1ad3      	subs	r3, r2, r3
 8004f1c:	683a      	ldr	r2, [r7, #0]
 8004f1e:	429a      	cmp	r2, r3
 8004f20:	d803      	bhi.n	8004f2a <HAL_SPI_Receive+0x1cc>
 8004f22:	683b      	ldr	r3, [r7, #0]
 8004f24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f28:	d102      	bne.n	8004f30 <HAL_SPI_Receive+0x1d2>
 8004f2a:	683b      	ldr	r3, [r7, #0]
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d102      	bne.n	8004f36 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8004f30:	2303      	movs	r3, #3
 8004f32:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004f34:	e017      	b.n	8004f66 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f3a:	b29b      	uxth	r3, r3
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d1cd      	bne.n	8004edc <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004f40:	693a      	ldr	r2, [r7, #16]
 8004f42:	6839      	ldr	r1, [r7, #0]
 8004f44:	68f8      	ldr	r0, [r7, #12]
 8004f46:	f000 fe19 	bl	8005b7c <SPI_EndRxTransaction>
 8004f4a:	4603      	mov	r3, r0
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d002      	beq.n	8004f56 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	2220      	movs	r2, #32
 8004f54:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d002      	beq.n	8004f64 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8004f5e:	2301      	movs	r3, #1
 8004f60:	75fb      	strb	r3, [r7, #23]
 8004f62:	e000      	b.n	8004f66 <HAL_SPI_Receive+0x208>
  }

error :
 8004f64:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	2201      	movs	r2, #1
 8004f6a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	2200      	movs	r2, #0
 8004f72:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004f76:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f78:	4618      	mov	r0, r3
 8004f7a:	3718      	adds	r7, #24
 8004f7c:	46bd      	mov	sp, r7
 8004f7e:	bd80      	pop	{r7, pc}

08004f80 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004f80:	b580      	push	{r7, lr}
 8004f82:	b08c      	sub	sp, #48	; 0x30
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	60f8      	str	r0, [r7, #12]
 8004f88:	60b9      	str	r1, [r7, #8]
 8004f8a:	607a      	str	r2, [r7, #4]
 8004f8c:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004f8e:	2301      	movs	r3, #1
 8004f90:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004f92:	2300      	movs	r3, #0
 8004f94:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004f9e:	2b01      	cmp	r3, #1
 8004fa0:	d101      	bne.n	8004fa6 <HAL_SPI_TransmitReceive+0x26>
 8004fa2:	2302      	movs	r3, #2
 8004fa4:	e18a      	b.n	80052bc <HAL_SPI_TransmitReceive+0x33c>
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	2201      	movs	r2, #1
 8004faa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004fae:	f7fc fee1 	bl	8001d74 <HAL_GetTick>
 8004fb2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004fba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	685b      	ldr	r3, [r3, #4]
 8004fc2:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004fc4:	887b      	ldrh	r3, [r7, #2]
 8004fc6:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004fc8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004fcc:	2b01      	cmp	r3, #1
 8004fce:	d00f      	beq.n	8004ff0 <HAL_SPI_TransmitReceive+0x70>
 8004fd0:	69fb      	ldr	r3, [r7, #28]
 8004fd2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004fd6:	d107      	bne.n	8004fe8 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	689b      	ldr	r3, [r3, #8]
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d103      	bne.n	8004fe8 <HAL_SPI_TransmitReceive+0x68>
 8004fe0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004fe4:	2b04      	cmp	r3, #4
 8004fe6:	d003      	beq.n	8004ff0 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004fe8:	2302      	movs	r3, #2
 8004fea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004fee:	e15b      	b.n	80052a8 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004ff0:	68bb      	ldr	r3, [r7, #8]
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d005      	beq.n	8005002 <HAL_SPI_TransmitReceive+0x82>
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d002      	beq.n	8005002 <HAL_SPI_TransmitReceive+0x82>
 8004ffc:	887b      	ldrh	r3, [r7, #2]
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d103      	bne.n	800500a <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8005002:	2301      	movs	r3, #1
 8005004:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005008:	e14e      	b.n	80052a8 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005010:	b2db      	uxtb	r3, r3
 8005012:	2b04      	cmp	r3, #4
 8005014:	d003      	beq.n	800501e <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	2205      	movs	r2, #5
 800501a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	2200      	movs	r2, #0
 8005022:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	687a      	ldr	r2, [r7, #4]
 8005028:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	887a      	ldrh	r2, [r7, #2]
 800502e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	887a      	ldrh	r2, [r7, #2]
 8005034:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	68ba      	ldr	r2, [r7, #8]
 800503a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	887a      	ldrh	r2, [r7, #2]
 8005040:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	887a      	ldrh	r2, [r7, #2]
 8005046:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	2200      	movs	r2, #0
 800504c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	2200      	movs	r2, #0
 8005052:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800505e:	2b40      	cmp	r3, #64	; 0x40
 8005060:	d007      	beq.n	8005072 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	681a      	ldr	r2, [r3, #0]
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005070:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	68db      	ldr	r3, [r3, #12]
 8005076:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800507a:	d178      	bne.n	800516e <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	685b      	ldr	r3, [r3, #4]
 8005080:	2b00      	cmp	r3, #0
 8005082:	d002      	beq.n	800508a <HAL_SPI_TransmitReceive+0x10a>
 8005084:	8b7b      	ldrh	r3, [r7, #26]
 8005086:	2b01      	cmp	r3, #1
 8005088:	d166      	bne.n	8005158 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800508e:	881a      	ldrh	r2, [r3, #0]
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800509a:	1c9a      	adds	r2, r3, #2
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80050a4:	b29b      	uxth	r3, r3
 80050a6:	3b01      	subs	r3, #1
 80050a8:	b29a      	uxth	r2, r3
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80050ae:	e053      	b.n	8005158 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	689b      	ldr	r3, [r3, #8]
 80050b6:	f003 0302 	and.w	r3, r3, #2
 80050ba:	2b02      	cmp	r3, #2
 80050bc:	d11b      	bne.n	80050f6 <HAL_SPI_TransmitReceive+0x176>
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80050c2:	b29b      	uxth	r3, r3
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d016      	beq.n	80050f6 <HAL_SPI_TransmitReceive+0x176>
 80050c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050ca:	2b01      	cmp	r3, #1
 80050cc:	d113      	bne.n	80050f6 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050d2:	881a      	ldrh	r2, [r3, #0]
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050de:	1c9a      	adds	r2, r3, #2
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80050e8:	b29b      	uxth	r3, r3
 80050ea:	3b01      	subs	r3, #1
 80050ec:	b29a      	uxth	r2, r3
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80050f2:	2300      	movs	r3, #0
 80050f4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	689b      	ldr	r3, [r3, #8]
 80050fc:	f003 0301 	and.w	r3, r3, #1
 8005100:	2b01      	cmp	r3, #1
 8005102:	d119      	bne.n	8005138 <HAL_SPI_TransmitReceive+0x1b8>
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005108:	b29b      	uxth	r3, r3
 800510a:	2b00      	cmp	r3, #0
 800510c:	d014      	beq.n	8005138 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	68da      	ldr	r2, [r3, #12]
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005118:	b292      	uxth	r2, r2
 800511a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005120:	1c9a      	adds	r2, r3, #2
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800512a:	b29b      	uxth	r3, r3
 800512c:	3b01      	subs	r3, #1
 800512e:	b29a      	uxth	r2, r3
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005134:	2301      	movs	r3, #1
 8005136:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005138:	f7fc fe1c 	bl	8001d74 <HAL_GetTick>
 800513c:	4602      	mov	r2, r0
 800513e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005140:	1ad3      	subs	r3, r2, r3
 8005142:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005144:	429a      	cmp	r2, r3
 8005146:	d807      	bhi.n	8005158 <HAL_SPI_TransmitReceive+0x1d8>
 8005148:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800514a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800514e:	d003      	beq.n	8005158 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8005150:	2303      	movs	r3, #3
 8005152:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005156:	e0a7      	b.n	80052a8 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800515c:	b29b      	uxth	r3, r3
 800515e:	2b00      	cmp	r3, #0
 8005160:	d1a6      	bne.n	80050b0 <HAL_SPI_TransmitReceive+0x130>
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005166:	b29b      	uxth	r3, r3
 8005168:	2b00      	cmp	r3, #0
 800516a:	d1a1      	bne.n	80050b0 <HAL_SPI_TransmitReceive+0x130>
 800516c:	e07c      	b.n	8005268 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	685b      	ldr	r3, [r3, #4]
 8005172:	2b00      	cmp	r3, #0
 8005174:	d002      	beq.n	800517c <HAL_SPI_TransmitReceive+0x1fc>
 8005176:	8b7b      	ldrh	r3, [r7, #26]
 8005178:	2b01      	cmp	r3, #1
 800517a:	d16b      	bne.n	8005254 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	330c      	adds	r3, #12
 8005186:	7812      	ldrb	r2, [r2, #0]
 8005188:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800518e:	1c5a      	adds	r2, r3, #1
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005198:	b29b      	uxth	r3, r3
 800519a:	3b01      	subs	r3, #1
 800519c:	b29a      	uxth	r2, r3
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80051a2:	e057      	b.n	8005254 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	689b      	ldr	r3, [r3, #8]
 80051aa:	f003 0302 	and.w	r3, r3, #2
 80051ae:	2b02      	cmp	r3, #2
 80051b0:	d11c      	bne.n	80051ec <HAL_SPI_TransmitReceive+0x26c>
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80051b6:	b29b      	uxth	r3, r3
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d017      	beq.n	80051ec <HAL_SPI_TransmitReceive+0x26c>
 80051bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051be:	2b01      	cmp	r3, #1
 80051c0:	d114      	bne.n	80051ec <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	330c      	adds	r3, #12
 80051cc:	7812      	ldrb	r2, [r2, #0]
 80051ce:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051d4:	1c5a      	adds	r2, r3, #1
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80051de:	b29b      	uxth	r3, r3
 80051e0:	3b01      	subs	r3, #1
 80051e2:	b29a      	uxth	r2, r3
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80051e8:	2300      	movs	r3, #0
 80051ea:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	689b      	ldr	r3, [r3, #8]
 80051f2:	f003 0301 	and.w	r3, r3, #1
 80051f6:	2b01      	cmp	r3, #1
 80051f8:	d119      	bne.n	800522e <HAL_SPI_TransmitReceive+0x2ae>
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80051fe:	b29b      	uxth	r3, r3
 8005200:	2b00      	cmp	r3, #0
 8005202:	d014      	beq.n	800522e <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	68da      	ldr	r2, [r3, #12]
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800520e:	b2d2      	uxtb	r2, r2
 8005210:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005216:	1c5a      	adds	r2, r3, #1
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005220:	b29b      	uxth	r3, r3
 8005222:	3b01      	subs	r3, #1
 8005224:	b29a      	uxth	r2, r3
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800522a:	2301      	movs	r3, #1
 800522c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800522e:	f7fc fda1 	bl	8001d74 <HAL_GetTick>
 8005232:	4602      	mov	r2, r0
 8005234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005236:	1ad3      	subs	r3, r2, r3
 8005238:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800523a:	429a      	cmp	r2, r3
 800523c:	d803      	bhi.n	8005246 <HAL_SPI_TransmitReceive+0x2c6>
 800523e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005240:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005244:	d102      	bne.n	800524c <HAL_SPI_TransmitReceive+0x2cc>
 8005246:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005248:	2b00      	cmp	r3, #0
 800524a:	d103      	bne.n	8005254 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800524c:	2303      	movs	r3, #3
 800524e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005252:	e029      	b.n	80052a8 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005258:	b29b      	uxth	r3, r3
 800525a:	2b00      	cmp	r3, #0
 800525c:	d1a2      	bne.n	80051a4 <HAL_SPI_TransmitReceive+0x224>
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005262:	b29b      	uxth	r3, r3
 8005264:	2b00      	cmp	r3, #0
 8005266:	d19d      	bne.n	80051a4 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005268:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800526a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800526c:	68f8      	ldr	r0, [r7, #12]
 800526e:	f000 fceb 	bl	8005c48 <SPI_EndRxTxTransaction>
 8005272:	4603      	mov	r3, r0
 8005274:	2b00      	cmp	r3, #0
 8005276:	d006      	beq.n	8005286 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8005278:	2301      	movs	r3, #1
 800527a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	2220      	movs	r2, #32
 8005282:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8005284:	e010      	b.n	80052a8 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	689b      	ldr	r3, [r3, #8]
 800528a:	2b00      	cmp	r3, #0
 800528c:	d10b      	bne.n	80052a6 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800528e:	2300      	movs	r3, #0
 8005290:	617b      	str	r3, [r7, #20]
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	68db      	ldr	r3, [r3, #12]
 8005298:	617b      	str	r3, [r7, #20]
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	689b      	ldr	r3, [r3, #8]
 80052a0:	617b      	str	r3, [r7, #20]
 80052a2:	697b      	ldr	r3, [r7, #20]
 80052a4:	e000      	b.n	80052a8 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80052a6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	2201      	movs	r2, #1
 80052ac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	2200      	movs	r2, #0
 80052b4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80052b8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80052bc:	4618      	mov	r0, r3
 80052be:	3730      	adds	r7, #48	; 0x30
 80052c0:	46bd      	mov	sp, r7
 80052c2:	bd80      	pop	{r7, pc}

080052c4 <HAL_SPI_Receive_DMA>:
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 80052c4:	b580      	push	{r7, lr}
 80052c6:	b086      	sub	sp, #24
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	60f8      	str	r0, [r7, #12]
 80052cc:	60b9      	str	r1, [r7, #8]
 80052ce:	4613      	mov	r3, r2
 80052d0:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80052d2:	2300      	movs	r3, #0
 80052d4:	75fb      	strb	r3, [r7, #23]

  /* Check rx dma handle */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	689b      	ldr	r3, [r3, #8]
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d110      	bne.n	8005300 <HAL_SPI_Receive_DMA+0x3c>
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	685b      	ldr	r3, [r3, #4]
 80052e2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80052e6:	d10b      	bne.n	8005300 <HAL_SPI_Receive_DMA+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	2204      	movs	r2, #4
 80052ec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    /* Check tx dma handle */
    assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 80052f0:	88fb      	ldrh	r3, [r7, #6]
 80052f2:	68ba      	ldr	r2, [r7, #8]
 80052f4:	68b9      	ldr	r1, [r7, #8]
 80052f6:	68f8      	ldr	r0, [r7, #12]
 80052f8:	f000 f8ac 	bl	8005454 <HAL_SPI_TransmitReceive_DMA>
 80052fc:	4603      	mov	r3, r0
 80052fe:	e09f      	b.n	8005440 <HAL_SPI_Receive_DMA+0x17c>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005306:	2b01      	cmp	r3, #1
 8005308:	d101      	bne.n	800530e <HAL_SPI_Receive_DMA+0x4a>
 800530a:	2302      	movs	r3, #2
 800530c:	e098      	b.n	8005440 <HAL_SPI_Receive_DMA+0x17c>
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	2201      	movs	r2, #1
 8005312:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800531c:	b2db      	uxtb	r3, r3
 800531e:	2b01      	cmp	r3, #1
 8005320:	d002      	beq.n	8005328 <HAL_SPI_Receive_DMA+0x64>
  {
    errorcode = HAL_BUSY;
 8005322:	2302      	movs	r3, #2
 8005324:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005326:	e086      	b.n	8005436 <HAL_SPI_Receive_DMA+0x172>
  }

  if ((pData == NULL) || (Size == 0U))
 8005328:	68bb      	ldr	r3, [r7, #8]
 800532a:	2b00      	cmp	r3, #0
 800532c:	d002      	beq.n	8005334 <HAL_SPI_Receive_DMA+0x70>
 800532e:	88fb      	ldrh	r3, [r7, #6]
 8005330:	2b00      	cmp	r3, #0
 8005332:	d102      	bne.n	800533a <HAL_SPI_Receive_DMA+0x76>
  {
    errorcode = HAL_ERROR;
 8005334:	2301      	movs	r3, #1
 8005336:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005338:	e07d      	b.n	8005436 <HAL_SPI_Receive_DMA+0x172>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	2204      	movs	r2, #4
 800533e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	2200      	movs	r2, #0
 8005346:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	68ba      	ldr	r2, [r7, #8]
 800534c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	88fa      	ldrh	r2, [r7, #6]
 8005352:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	88fa      	ldrh	r2, [r7, #6]
 8005358:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	2200      	movs	r2, #0
 800535e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	2200      	movs	r2, #0
 8005364:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->TxXferSize  = 0U;
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	2200      	movs	r2, #0
 800536a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	2200      	movs	r2, #0
 8005370:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	689b      	ldr	r3, [r3, #8]
 8005376:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800537a:	d10f      	bne.n	800539c <HAL_SPI_Receive_DMA+0xd8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	681a      	ldr	r2, [r3, #0]
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800538a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	681a      	ldr	r2, [r3, #0]
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800539a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80053a0:	4a29      	ldr	r2, [pc, #164]	; (8005448 <HAL_SPI_Receive_DMA+0x184>)
 80053a2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80053a8:	4a28      	ldr	r2, [pc, #160]	; (800544c <HAL_SPI_Receive_DMA+0x188>)
 80053aa:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80053b0:	4a27      	ldr	r2, [pc, #156]	; (8005450 <HAL_SPI_Receive_DMA+0x18c>)
 80053b2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80053b8:	2200      	movs	r2, #0
 80053ba:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	330c      	adds	r3, #12
 80053c6:	4619      	mov	r1, r3
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053cc:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80053d2:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 80053d4:	f7fc ff38 	bl	8002248 <HAL_DMA_Start_IT>
 80053d8:	4603      	mov	r3, r0
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d00c      	beq.n	80053f8 <HAL_SPI_Receive_DMA+0x134>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053e2:	f043 0210 	orr.w	r2, r3, #16
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 80053ea:	2301      	movs	r3, #1
 80053ec:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	2201      	movs	r2, #1
 80053f2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 80053f6:	e01e      	b.n	8005436 <HAL_SPI_Receive_DMA+0x172>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005402:	2b40      	cmp	r3, #64	; 0x40
 8005404:	d007      	beq.n	8005416 <HAL_SPI_Receive_DMA+0x152>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	681a      	ldr	r2, [r3, #0]
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005414:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	685a      	ldr	r2, [r3, #4]
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	f042 0220 	orr.w	r2, r2, #32
 8005424:	605a      	str	r2, [r3, #4]

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	685a      	ldr	r2, [r3, #4]
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	f042 0201 	orr.w	r2, r2, #1
 8005434:	605a      	str	r2, [r3, #4]

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	2200      	movs	r2, #0
 800543a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800543e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005440:	4618      	mov	r0, r3
 8005442:	3718      	adds	r7, #24
 8005444:	46bd      	mov	sp, r7
 8005446:	bd80      	pop	{r7, pc}
 8005448:	080059cd 	.word	0x080059cd
 800544c:	08005895 	.word	0x08005895
 8005450:	08005a05 	.word	0x08005a05

08005454 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8005454:	b580      	push	{r7, lr}
 8005456:	b086      	sub	sp, #24
 8005458:	af00      	add	r7, sp, #0
 800545a:	60f8      	str	r0, [r7, #12]
 800545c:	60b9      	str	r1, [r7, #8]
 800545e:	607a      	str	r2, [r7, #4]
 8005460:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005462:	2300      	movs	r3, #0
 8005464:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800546c:	2b01      	cmp	r3, #1
 800546e:	d101      	bne.n	8005474 <HAL_SPI_TransmitReceive_DMA+0x20>
 8005470:	2302      	movs	r3, #2
 8005472:	e0e3      	b.n	800563c <HAL_SPI_TransmitReceive_DMA+0x1e8>
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	2201      	movs	r2, #1
 8005478:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005482:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	685b      	ldr	r3, [r3, #4]
 8005488:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 800548a:	7dbb      	ldrb	r3, [r7, #22]
 800548c:	2b01      	cmp	r3, #1
 800548e:	d00d      	beq.n	80054ac <HAL_SPI_TransmitReceive_DMA+0x58>
 8005490:	693b      	ldr	r3, [r7, #16]
 8005492:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005496:	d106      	bne.n	80054a6 <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	689b      	ldr	r3, [r3, #8]
 800549c:	2b00      	cmp	r3, #0
 800549e:	d102      	bne.n	80054a6 <HAL_SPI_TransmitReceive_DMA+0x52>
 80054a0:	7dbb      	ldrb	r3, [r7, #22]
 80054a2:	2b04      	cmp	r3, #4
 80054a4:	d002      	beq.n	80054ac <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 80054a6:	2302      	movs	r3, #2
 80054a8:	75fb      	strb	r3, [r7, #23]
    goto error;
 80054aa:	e0c2      	b.n	8005632 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80054ac:	68bb      	ldr	r3, [r7, #8]
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d005      	beq.n	80054be <HAL_SPI_TransmitReceive_DMA+0x6a>
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d002      	beq.n	80054be <HAL_SPI_TransmitReceive_DMA+0x6a>
 80054b8:	887b      	ldrh	r3, [r7, #2]
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d102      	bne.n	80054c4 <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 80054be:	2301      	movs	r3, #1
 80054c0:	75fb      	strb	r3, [r7, #23]
    goto error;
 80054c2:	e0b6      	b.n	8005632 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80054ca:	b2db      	uxtb	r3, r3
 80054cc:	2b04      	cmp	r3, #4
 80054ce:	d003      	beq.n	80054d8 <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	2205      	movs	r2, #5
 80054d4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	2200      	movs	r2, #0
 80054dc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	68ba      	ldr	r2, [r7, #8]
 80054e2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	887a      	ldrh	r2, [r7, #2]
 80054e8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	887a      	ldrh	r2, [r7, #2]
 80054ee:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	687a      	ldr	r2, [r7, #4]
 80054f4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	887a      	ldrh	r2, [r7, #2]
 80054fa:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	887a      	ldrh	r2, [r7, #2]
 8005500:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	2200      	movs	r2, #0
 8005506:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	2200      	movs	r2, #0
 800550c:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005514:	b2db      	uxtb	r3, r3
 8005516:	2b04      	cmp	r3, #4
 8005518:	d108      	bne.n	800552c <HAL_SPI_TransmitReceive_DMA+0xd8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800551e:	4a49      	ldr	r2, [pc, #292]	; (8005644 <HAL_SPI_TransmitReceive_DMA+0x1f0>)
 8005520:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005526:	4a48      	ldr	r2, [pc, #288]	; (8005648 <HAL_SPI_TransmitReceive_DMA+0x1f4>)
 8005528:	63da      	str	r2, [r3, #60]	; 0x3c
 800552a:	e007      	b.n	800553c <HAL_SPI_TransmitReceive_DMA+0xe8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005530:	4a46      	ldr	r2, [pc, #280]	; (800564c <HAL_SPI_TransmitReceive_DMA+0x1f8>)
 8005532:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005538:	4a45      	ldr	r2, [pc, #276]	; (8005650 <HAL_SPI_TransmitReceive_DMA+0x1fc>)
 800553a:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005540:	4a44      	ldr	r2, [pc, #272]	; (8005654 <HAL_SPI_TransmitReceive_DMA+0x200>)
 8005542:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005548:	2200      	movs	r2, #0
 800554a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	330c      	adds	r3, #12
 8005556:	4619      	mov	r1, r3
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800555c:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005562:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8005564:	f7fc fe70 	bl	8002248 <HAL_DMA_Start_IT>
 8005568:	4603      	mov	r3, r0
 800556a:	2b00      	cmp	r3, #0
 800556c:	d00c      	beq.n	8005588 <HAL_SPI_TransmitReceive_DMA+0x134>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005572:	f043 0210 	orr.w	r2, r3, #16
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 800557a:	2301      	movs	r3, #1
 800557c:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	2201      	movs	r2, #1
 8005582:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8005586:	e054      	b.n	8005632 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	685a      	ldr	r2, [r3, #4]
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f042 0201 	orr.w	r2, r2, #1
 8005596:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800559c:	2200      	movs	r2, #0
 800559e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80055a4:	2200      	movs	r2, #0
 80055a6:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80055ac:	2200      	movs	r2, #0
 80055ae:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80055b4:	2200      	movs	r2, #0
 80055b6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	6c98      	ldr	r0, [r3, #72]	; 0x48
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055c0:	4619      	mov	r1, r3
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	330c      	adds	r3, #12
 80055c8:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80055ce:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80055d0:	f7fc fe3a 	bl	8002248 <HAL_DMA_Start_IT>
 80055d4:	4603      	mov	r3, r0
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d00c      	beq.n	80055f4 <HAL_SPI_TransmitReceive_DMA+0x1a0>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055de:	f043 0210 	orr.w	r2, r3, #16
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 80055e6:	2301      	movs	r3, #1
 80055e8:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	2201      	movs	r2, #1
 80055ee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 80055f2:	e01e      	b.n	8005632 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055fe:	2b40      	cmp	r3, #64	; 0x40
 8005600:	d007      	beq.n	8005612 <HAL_SPI_TransmitReceive_DMA+0x1be>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	681a      	ldr	r2, [r3, #0]
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005610:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	685a      	ldr	r2, [r3, #4]
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	f042 0220 	orr.w	r2, r2, #32
 8005620:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	685a      	ldr	r2, [r3, #4]
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	f042 0202 	orr.w	r2, r2, #2
 8005630:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	2200      	movs	r2, #0
 8005636:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800563a:	7dfb      	ldrb	r3, [r7, #23]
}
 800563c:	4618      	mov	r0, r3
 800563e:	3718      	adds	r7, #24
 8005640:	46bd      	mov	sp, r7
 8005642:	bd80      	pop	{r7, pc}
 8005644:	080059cd 	.word	0x080059cd
 8005648:	08005895 	.word	0x08005895
 800564c:	080059e9 	.word	0x080059e9
 8005650:	0800593d 	.word	0x0800593d
 8005654:	08005a05 	.word	0x08005a05

08005658 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8005658:	b580      	push	{r7, lr}
 800565a:	b088      	sub	sp, #32
 800565c:	af00      	add	r7, sp, #0
 800565e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	685b      	ldr	r3, [r3, #4]
 8005666:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	689b      	ldr	r3, [r3, #8]
 800566e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005670:	69bb      	ldr	r3, [r7, #24]
 8005672:	099b      	lsrs	r3, r3, #6
 8005674:	f003 0301 	and.w	r3, r3, #1
 8005678:	2b00      	cmp	r3, #0
 800567a:	d10f      	bne.n	800569c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800567c:	69bb      	ldr	r3, [r7, #24]
 800567e:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005682:	2b00      	cmp	r3, #0
 8005684:	d00a      	beq.n	800569c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005686:	69fb      	ldr	r3, [r7, #28]
 8005688:	099b      	lsrs	r3, r3, #6
 800568a:	f003 0301 	and.w	r3, r3, #1
 800568e:	2b00      	cmp	r3, #0
 8005690:	d004      	beq.n	800569c <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005696:	6878      	ldr	r0, [r7, #4]
 8005698:	4798      	blx	r3
    return;
 800569a:	e0d7      	b.n	800584c <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800569c:	69bb      	ldr	r3, [r7, #24]
 800569e:	085b      	lsrs	r3, r3, #1
 80056a0:	f003 0301 	and.w	r3, r3, #1
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d00a      	beq.n	80056be <HAL_SPI_IRQHandler+0x66>
 80056a8:	69fb      	ldr	r3, [r7, #28]
 80056aa:	09db      	lsrs	r3, r3, #7
 80056ac:	f003 0301 	and.w	r3, r3, #1
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d004      	beq.n	80056be <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056b8:	6878      	ldr	r0, [r7, #4]
 80056ba:	4798      	blx	r3
    return;
 80056bc:	e0c6      	b.n	800584c <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80056be:	69bb      	ldr	r3, [r7, #24]
 80056c0:	095b      	lsrs	r3, r3, #5
 80056c2:	f003 0301 	and.w	r3, r3, #1
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d10c      	bne.n	80056e4 <HAL_SPI_IRQHandler+0x8c>
 80056ca:	69bb      	ldr	r3, [r7, #24]
 80056cc:	099b      	lsrs	r3, r3, #6
 80056ce:	f003 0301 	and.w	r3, r3, #1
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d106      	bne.n	80056e4 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80056d6:	69bb      	ldr	r3, [r7, #24]
 80056d8:	0a1b      	lsrs	r3, r3, #8
 80056da:	f003 0301 	and.w	r3, r3, #1
 80056de:	2b00      	cmp	r3, #0
 80056e0:	f000 80b4 	beq.w	800584c <HAL_SPI_IRQHandler+0x1f4>
 80056e4:	69fb      	ldr	r3, [r7, #28]
 80056e6:	095b      	lsrs	r3, r3, #5
 80056e8:	f003 0301 	and.w	r3, r3, #1
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	f000 80ad 	beq.w	800584c <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80056f2:	69bb      	ldr	r3, [r7, #24]
 80056f4:	099b      	lsrs	r3, r3, #6
 80056f6:	f003 0301 	and.w	r3, r3, #1
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d023      	beq.n	8005746 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005704:	b2db      	uxtb	r3, r3
 8005706:	2b03      	cmp	r3, #3
 8005708:	d011      	beq.n	800572e <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800570e:	f043 0204 	orr.w	r2, r3, #4
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005716:	2300      	movs	r3, #0
 8005718:	617b      	str	r3, [r7, #20]
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	68db      	ldr	r3, [r3, #12]
 8005720:	617b      	str	r3, [r7, #20]
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	689b      	ldr	r3, [r3, #8]
 8005728:	617b      	str	r3, [r7, #20]
 800572a:	697b      	ldr	r3, [r7, #20]
 800572c:	e00b      	b.n	8005746 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800572e:	2300      	movs	r3, #0
 8005730:	613b      	str	r3, [r7, #16]
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	68db      	ldr	r3, [r3, #12]
 8005738:	613b      	str	r3, [r7, #16]
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	689b      	ldr	r3, [r3, #8]
 8005740:	613b      	str	r3, [r7, #16]
 8005742:	693b      	ldr	r3, [r7, #16]
        return;
 8005744:	e082      	b.n	800584c <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8005746:	69bb      	ldr	r3, [r7, #24]
 8005748:	095b      	lsrs	r3, r3, #5
 800574a:	f003 0301 	and.w	r3, r3, #1
 800574e:	2b00      	cmp	r3, #0
 8005750:	d014      	beq.n	800577c <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005756:	f043 0201 	orr.w	r2, r3, #1
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800575e:	2300      	movs	r3, #0
 8005760:	60fb      	str	r3, [r7, #12]
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	689b      	ldr	r3, [r3, #8]
 8005768:	60fb      	str	r3, [r7, #12]
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	681a      	ldr	r2, [r3, #0]
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005778:	601a      	str	r2, [r3, #0]
 800577a:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800577c:	69bb      	ldr	r3, [r7, #24]
 800577e:	0a1b      	lsrs	r3, r3, #8
 8005780:	f003 0301 	and.w	r3, r3, #1
 8005784:	2b00      	cmp	r3, #0
 8005786:	d00c      	beq.n	80057a2 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800578c:	f043 0208 	orr.w	r2, r3, #8
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8005794:	2300      	movs	r3, #0
 8005796:	60bb      	str	r3, [r7, #8]
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	689b      	ldr	r3, [r3, #8]
 800579e:	60bb      	str	r3, [r7, #8]
 80057a0:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d04f      	beq.n	800584a <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	685a      	ldr	r2, [r3, #4]
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80057b8:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	2201      	movs	r2, #1
 80057be:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80057c2:	69fb      	ldr	r3, [r7, #28]
 80057c4:	f003 0302 	and.w	r3, r3, #2
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d104      	bne.n	80057d6 <HAL_SPI_IRQHandler+0x17e>
 80057cc:	69fb      	ldr	r3, [r7, #28]
 80057ce:	f003 0301 	and.w	r3, r3, #1
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d034      	beq.n	8005840 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	685a      	ldr	r2, [r3, #4]
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	f022 0203 	bic.w	r2, r2, #3
 80057e4:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d011      	beq.n	8005812 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80057f2:	4a18      	ldr	r2, [pc, #96]	; (8005854 <HAL_SPI_IRQHandler+0x1fc>)
 80057f4:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80057fa:	4618      	mov	r0, r3
 80057fc:	f7fc fd7c 	bl	80022f8 <HAL_DMA_Abort_IT>
 8005800:	4603      	mov	r3, r0
 8005802:	2b00      	cmp	r3, #0
 8005804:	d005      	beq.n	8005812 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800580a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005816:	2b00      	cmp	r3, #0
 8005818:	d016      	beq.n	8005848 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800581e:	4a0d      	ldr	r2, [pc, #52]	; (8005854 <HAL_SPI_IRQHandler+0x1fc>)
 8005820:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005826:	4618      	mov	r0, r3
 8005828:	f7fc fd66 	bl	80022f8 <HAL_DMA_Abort_IT>
 800582c:	4603      	mov	r3, r0
 800582e:	2b00      	cmp	r3, #0
 8005830:	d00a      	beq.n	8005848 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005836:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 800583e:	e003      	b.n	8005848 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8005840:	6878      	ldr	r0, [r7, #4]
 8005842:	f7fb fb4b 	bl	8000edc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8005846:	e000      	b.n	800584a <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8005848:	bf00      	nop
    return;
 800584a:	bf00      	nop
  }
}
 800584c:	3720      	adds	r7, #32
 800584e:	46bd      	mov	sp, r7
 8005850:	bd80      	pop	{r7, pc}
 8005852:	bf00      	nop
 8005854:	08005a45 	.word	0x08005a45

08005858 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005858:	b480      	push	{r7}
 800585a:	b083      	sub	sp, #12
 800585c:	af00      	add	r7, sp, #0
 800585e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8005860:	bf00      	nop
 8005862:	370c      	adds	r7, #12
 8005864:	46bd      	mov	sp, r7
 8005866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800586a:	4770      	bx	lr

0800586c <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800586c:	b480      	push	{r7}
 800586e:	b083      	sub	sp, #12
 8005870:	af00      	add	r7, sp, #0
 8005872:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8005874:	bf00      	nop
 8005876:	370c      	adds	r7, #12
 8005878:	46bd      	mov	sp, r7
 800587a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800587e:	4770      	bx	lr

08005880 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005880:	b480      	push	{r7}
 8005882:	b083      	sub	sp, #12
 8005884:	af00      	add	r7, sp, #0
 8005886:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8005888:	bf00      	nop
 800588a:	370c      	adds	r7, #12
 800588c:	46bd      	mov	sp, r7
 800588e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005892:	4770      	bx	lr

08005894 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005894:	b580      	push	{r7, lr}
 8005896:	b084      	sub	sp, #16
 8005898:	af00      	add	r7, sp, #0
 800589a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058a0:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80058a2:	f7fc fa67 	bl	8001d74 <HAL_GetTick>
 80058a6:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80058b6:	d03b      	beq.n	8005930 <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	685a      	ldr	r2, [r3, #4]
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	f022 0220 	bic.w	r2, r2, #32
 80058c6:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	689b      	ldr	r3, [r3, #8]
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d10d      	bne.n	80058ec <SPI_DMAReceiveCplt+0x58>
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	685b      	ldr	r3, [r3, #4]
 80058d4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80058d8:	d108      	bne.n	80058ec <SPI_DMAReceiveCplt+0x58>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	685a      	ldr	r2, [r3, #4]
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	f022 0203 	bic.w	r2, r2, #3
 80058e8:	605a      	str	r2, [r3, #4]
 80058ea:	e007      	b.n	80058fc <SPI_DMAReceiveCplt+0x68>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	685a      	ldr	r2, [r3, #4]
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	f022 0201 	bic.w	r2, r2, #1
 80058fa:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80058fc:	68ba      	ldr	r2, [r7, #8]
 80058fe:	2164      	movs	r1, #100	; 0x64
 8005900:	68f8      	ldr	r0, [r7, #12]
 8005902:	f000 f93b 	bl	8005b7c <SPI_EndRxTransaction>
 8005906:	4603      	mov	r3, r0
 8005908:	2b00      	cmp	r3, #0
 800590a:	d002      	beq.n	8005912 <SPI_DMAReceiveCplt+0x7e>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	2220      	movs	r2, #32
 8005910:	655a      	str	r2, [r3, #84]	; 0x54
    }

    hspi->RxXferCount = 0U;
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	2200      	movs	r2, #0
 8005916:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	2201      	movs	r2, #1
 800591c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005924:	2b00      	cmp	r3, #0
 8005926:	d003      	beq.n	8005930 <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8005928:	68f8      	ldr	r0, [r7, #12]
 800592a:	f7fb fad7 	bl	8000edc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800592e:	e002      	b.n	8005936 <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 8005930:	68f8      	ldr	r0, [r7, #12]
 8005932:	f7fb fae5 	bl	8000f00 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005936:	3710      	adds	r7, #16
 8005938:	46bd      	mov	sp, r7
 800593a:	bd80      	pop	{r7, pc}

0800593c <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800593c:	b580      	push	{r7, lr}
 800593e:	b084      	sub	sp, #16
 8005940:	af00      	add	r7, sp, #0
 8005942:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005948:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800594a:	f7fc fa13 	bl	8001d74 <HAL_GetTick>
 800594e:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800595a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800595e:	d02f      	beq.n	80059c0 <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	685a      	ldr	r2, [r3, #4]
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	f022 0220 	bic.w	r2, r2, #32
 800596e:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8005970:	68ba      	ldr	r2, [r7, #8]
 8005972:	2164      	movs	r1, #100	; 0x64
 8005974:	68f8      	ldr	r0, [r7, #12]
 8005976:	f000 f967 	bl	8005c48 <SPI_EndRxTxTransaction>
 800597a:	4603      	mov	r3, r0
 800597c:	2b00      	cmp	r3, #0
 800597e:	d005      	beq.n	800598c <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005984:	f043 0220 	orr.w	r2, r3, #32
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	685a      	ldr	r2, [r3, #4]
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	f022 0203 	bic.w	r2, r2, #3
 800599a:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	2200      	movs	r2, #0
 80059a0:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->RxXferCount = 0U;
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	2200      	movs	r2, #0
 80059a6:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	2201      	movs	r2, #1
 80059ac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d003      	beq.n	80059c0 <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80059b8:	68f8      	ldr	r0, [r7, #12]
 80059ba:	f7fb fa8f 	bl	8000edc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80059be:	e002      	b.n	80059c6 <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 80059c0:	68f8      	ldr	r0, [r7, #12]
 80059c2:	f7ff ff49 	bl	8005858 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80059c6:	3710      	adds	r7, #16
 80059c8:	46bd      	mov	sp, r7
 80059ca:	bd80      	pop	{r7, pc}

080059cc <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80059cc:	b580      	push	{r7, lr}
 80059ce:	b084      	sub	sp, #16
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059d8:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 80059da:	68f8      	ldr	r0, [r7, #12]
 80059dc:	f7ff ff46 	bl	800586c <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80059e0:	bf00      	nop
 80059e2:	3710      	adds	r7, #16
 80059e4:	46bd      	mov	sp, r7
 80059e6:	bd80      	pop	{r7, pc}

080059e8 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80059e8:	b580      	push	{r7, lr}
 80059ea:	b084      	sub	sp, #16
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059f4:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 80059f6:	68f8      	ldr	r0, [r7, #12]
 80059f8:	f7ff ff42 	bl	8005880 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80059fc:	bf00      	nop
 80059fe:	3710      	adds	r7, #16
 8005a00:	46bd      	mov	sp, r7
 8005a02:	bd80      	pop	{r7, pc}

08005a04 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8005a04:	b580      	push	{r7, lr}
 8005a06:	b084      	sub	sp, #16
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a10:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	685a      	ldr	r2, [r3, #4]
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	f022 0203 	bic.w	r2, r2, #3
 8005a20:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a26:	f043 0210 	orr.w	r2, r3, #16
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	2201      	movs	r2, #1
 8005a32:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8005a36:	68f8      	ldr	r0, [r7, #12]
 8005a38:	f7fb fa50 	bl	8000edc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005a3c:	bf00      	nop
 8005a3e:	3710      	adds	r7, #16
 8005a40:	46bd      	mov	sp, r7
 8005a42:	bd80      	pop	{r7, pc}

08005a44 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005a44:	b580      	push	{r7, lr}
 8005a46:	b084      	sub	sp, #16
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a50:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	2200      	movs	r2, #0
 8005a56:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	2200      	movs	r2, #0
 8005a5c:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8005a5e:	68f8      	ldr	r0, [r7, #12]
 8005a60:	f7fb fa3c 	bl	8000edc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005a64:	bf00      	nop
 8005a66:	3710      	adds	r7, #16
 8005a68:	46bd      	mov	sp, r7
 8005a6a:	bd80      	pop	{r7, pc}

08005a6c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005a6c:	b580      	push	{r7, lr}
 8005a6e:	b088      	sub	sp, #32
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	60f8      	str	r0, [r7, #12]
 8005a74:	60b9      	str	r1, [r7, #8]
 8005a76:	603b      	str	r3, [r7, #0]
 8005a78:	4613      	mov	r3, r2
 8005a7a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005a7c:	f7fc f97a 	bl	8001d74 <HAL_GetTick>
 8005a80:	4602      	mov	r2, r0
 8005a82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a84:	1a9b      	subs	r3, r3, r2
 8005a86:	683a      	ldr	r2, [r7, #0]
 8005a88:	4413      	add	r3, r2
 8005a8a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005a8c:	f7fc f972 	bl	8001d74 <HAL_GetTick>
 8005a90:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005a92:	4b39      	ldr	r3, [pc, #228]	; (8005b78 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	015b      	lsls	r3, r3, #5
 8005a98:	0d1b      	lsrs	r3, r3, #20
 8005a9a:	69fa      	ldr	r2, [r7, #28]
 8005a9c:	fb02 f303 	mul.w	r3, r2, r3
 8005aa0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005aa2:	e054      	b.n	8005b4e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005aa4:	683b      	ldr	r3, [r7, #0]
 8005aa6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005aaa:	d050      	beq.n	8005b4e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005aac:	f7fc f962 	bl	8001d74 <HAL_GetTick>
 8005ab0:	4602      	mov	r2, r0
 8005ab2:	69bb      	ldr	r3, [r7, #24]
 8005ab4:	1ad3      	subs	r3, r2, r3
 8005ab6:	69fa      	ldr	r2, [r7, #28]
 8005ab8:	429a      	cmp	r2, r3
 8005aba:	d902      	bls.n	8005ac2 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005abc:	69fb      	ldr	r3, [r7, #28]
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d13d      	bne.n	8005b3e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	685a      	ldr	r2, [r3, #4]
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005ad0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	685b      	ldr	r3, [r3, #4]
 8005ad6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005ada:	d111      	bne.n	8005b00 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	689b      	ldr	r3, [r3, #8]
 8005ae0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005ae4:	d004      	beq.n	8005af0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	689b      	ldr	r3, [r3, #8]
 8005aea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005aee:	d107      	bne.n	8005b00 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	681a      	ldr	r2, [r3, #0]
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005afe:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b04:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b08:	d10f      	bne.n	8005b2a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	681a      	ldr	r2, [r3, #0]
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005b18:	601a      	str	r2, [r3, #0]
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	681a      	ldr	r2, [r3, #0]
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005b28:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	2201      	movs	r2, #1
 8005b2e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	2200      	movs	r2, #0
 8005b36:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005b3a:	2303      	movs	r3, #3
 8005b3c:	e017      	b.n	8005b6e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005b3e:	697b      	ldr	r3, [r7, #20]
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d101      	bne.n	8005b48 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005b44:	2300      	movs	r3, #0
 8005b46:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005b48:	697b      	ldr	r3, [r7, #20]
 8005b4a:	3b01      	subs	r3, #1
 8005b4c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	689a      	ldr	r2, [r3, #8]
 8005b54:	68bb      	ldr	r3, [r7, #8]
 8005b56:	4013      	ands	r3, r2
 8005b58:	68ba      	ldr	r2, [r7, #8]
 8005b5a:	429a      	cmp	r2, r3
 8005b5c:	bf0c      	ite	eq
 8005b5e:	2301      	moveq	r3, #1
 8005b60:	2300      	movne	r3, #0
 8005b62:	b2db      	uxtb	r3, r3
 8005b64:	461a      	mov	r2, r3
 8005b66:	79fb      	ldrb	r3, [r7, #7]
 8005b68:	429a      	cmp	r2, r3
 8005b6a:	d19b      	bne.n	8005aa4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005b6c:	2300      	movs	r3, #0
}
 8005b6e:	4618      	mov	r0, r3
 8005b70:	3720      	adds	r7, #32
 8005b72:	46bd      	mov	sp, r7
 8005b74:	bd80      	pop	{r7, pc}
 8005b76:	bf00      	nop
 8005b78:	20000004 	.word	0x20000004

08005b7c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005b7c:	b580      	push	{r7, lr}
 8005b7e:	b086      	sub	sp, #24
 8005b80:	af02      	add	r7, sp, #8
 8005b82:	60f8      	str	r0, [r7, #12]
 8005b84:	60b9      	str	r1, [r7, #8]
 8005b86:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	685b      	ldr	r3, [r3, #4]
 8005b8c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005b90:	d111      	bne.n	8005bb6 <SPI_EndRxTransaction+0x3a>
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	689b      	ldr	r3, [r3, #8]
 8005b96:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005b9a:	d004      	beq.n	8005ba6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	689b      	ldr	r3, [r3, #8]
 8005ba0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ba4:	d107      	bne.n	8005bb6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	681a      	ldr	r2, [r3, #0]
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005bb4:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	685b      	ldr	r3, [r3, #4]
 8005bba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005bbe:	d12a      	bne.n	8005c16 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	689b      	ldr	r3, [r3, #8]
 8005bc4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005bc8:	d012      	beq.n	8005bf0 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	9300      	str	r3, [sp, #0]
 8005bce:	68bb      	ldr	r3, [r7, #8]
 8005bd0:	2200      	movs	r2, #0
 8005bd2:	2180      	movs	r1, #128	; 0x80
 8005bd4:	68f8      	ldr	r0, [r7, #12]
 8005bd6:	f7ff ff49 	bl	8005a6c <SPI_WaitFlagStateUntilTimeout>
 8005bda:	4603      	mov	r3, r0
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d02d      	beq.n	8005c3c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005be4:	f043 0220 	orr.w	r2, r3, #32
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8005bec:	2303      	movs	r3, #3
 8005bee:	e026      	b.n	8005c3e <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	9300      	str	r3, [sp, #0]
 8005bf4:	68bb      	ldr	r3, [r7, #8]
 8005bf6:	2200      	movs	r2, #0
 8005bf8:	2101      	movs	r1, #1
 8005bfa:	68f8      	ldr	r0, [r7, #12]
 8005bfc:	f7ff ff36 	bl	8005a6c <SPI_WaitFlagStateUntilTimeout>
 8005c00:	4603      	mov	r3, r0
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d01a      	beq.n	8005c3c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c0a:	f043 0220 	orr.w	r2, r3, #32
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8005c12:	2303      	movs	r3, #3
 8005c14:	e013      	b.n	8005c3e <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	9300      	str	r3, [sp, #0]
 8005c1a:	68bb      	ldr	r3, [r7, #8]
 8005c1c:	2200      	movs	r2, #0
 8005c1e:	2101      	movs	r1, #1
 8005c20:	68f8      	ldr	r0, [r7, #12]
 8005c22:	f7ff ff23 	bl	8005a6c <SPI_WaitFlagStateUntilTimeout>
 8005c26:	4603      	mov	r3, r0
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d007      	beq.n	8005c3c <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c30:	f043 0220 	orr.w	r2, r3, #32
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005c38:	2303      	movs	r3, #3
 8005c3a:	e000      	b.n	8005c3e <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8005c3c:	2300      	movs	r3, #0
}
 8005c3e:	4618      	mov	r0, r3
 8005c40:	3710      	adds	r7, #16
 8005c42:	46bd      	mov	sp, r7
 8005c44:	bd80      	pop	{r7, pc}
	...

08005c48 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005c48:	b580      	push	{r7, lr}
 8005c4a:	b088      	sub	sp, #32
 8005c4c:	af02      	add	r7, sp, #8
 8005c4e:	60f8      	str	r0, [r7, #12]
 8005c50:	60b9      	str	r1, [r7, #8]
 8005c52:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005c54:	4b1b      	ldr	r3, [pc, #108]	; (8005cc4 <SPI_EndRxTxTransaction+0x7c>)
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	4a1b      	ldr	r2, [pc, #108]	; (8005cc8 <SPI_EndRxTxTransaction+0x80>)
 8005c5a:	fba2 2303 	umull	r2, r3, r2, r3
 8005c5e:	0d5b      	lsrs	r3, r3, #21
 8005c60:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005c64:	fb02 f303 	mul.w	r3, r2, r3
 8005c68:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	685b      	ldr	r3, [r3, #4]
 8005c6e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005c72:	d112      	bne.n	8005c9a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	9300      	str	r3, [sp, #0]
 8005c78:	68bb      	ldr	r3, [r7, #8]
 8005c7a:	2200      	movs	r2, #0
 8005c7c:	2180      	movs	r1, #128	; 0x80
 8005c7e:	68f8      	ldr	r0, [r7, #12]
 8005c80:	f7ff fef4 	bl	8005a6c <SPI_WaitFlagStateUntilTimeout>
 8005c84:	4603      	mov	r3, r0
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d016      	beq.n	8005cb8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c8e:	f043 0220 	orr.w	r2, r3, #32
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005c96:	2303      	movs	r3, #3
 8005c98:	e00f      	b.n	8005cba <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005c9a:	697b      	ldr	r3, [r7, #20]
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d00a      	beq.n	8005cb6 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8005ca0:	697b      	ldr	r3, [r7, #20]
 8005ca2:	3b01      	subs	r3, #1
 8005ca4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	689b      	ldr	r3, [r3, #8]
 8005cac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005cb0:	2b80      	cmp	r3, #128	; 0x80
 8005cb2:	d0f2      	beq.n	8005c9a <SPI_EndRxTxTransaction+0x52>
 8005cb4:	e000      	b.n	8005cb8 <SPI_EndRxTxTransaction+0x70>
        break;
 8005cb6:	bf00      	nop
  }

  return HAL_OK;
 8005cb8:	2300      	movs	r3, #0
}
 8005cba:	4618      	mov	r0, r3
 8005cbc:	3718      	adds	r7, #24
 8005cbe:	46bd      	mov	sp, r7
 8005cc0:	bd80      	pop	{r7, pc}
 8005cc2:	bf00      	nop
 8005cc4:	20000004 	.word	0x20000004
 8005cc8:	165e9f81 	.word	0x165e9f81

08005ccc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005ccc:	b580      	push	{r7, lr}
 8005cce:	b082      	sub	sp, #8
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d101      	bne.n	8005cde <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005cda:	2301      	movs	r3, #1
 8005cdc:	e041      	b.n	8005d62 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ce4:	b2db      	uxtb	r3, r3
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d106      	bne.n	8005cf8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	2200      	movs	r2, #0
 8005cee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005cf2:	6878      	ldr	r0, [r7, #4]
 8005cf4:	f7fb feba 	bl	8001a6c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	2202      	movs	r2, #2
 8005cfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681a      	ldr	r2, [r3, #0]
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	3304      	adds	r3, #4
 8005d08:	4619      	mov	r1, r3
 8005d0a:	4610      	mov	r0, r2
 8005d0c:	f000 fcf0 	bl	80066f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	2201      	movs	r2, #1
 8005d14:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	2201      	movs	r2, #1
 8005d1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	2201      	movs	r2, #1
 8005d24:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	2201      	movs	r2, #1
 8005d2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	2201      	movs	r2, #1
 8005d34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	2201      	movs	r2, #1
 8005d3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	2201      	movs	r2, #1
 8005d44:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	2201      	movs	r2, #1
 8005d4c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	2201      	movs	r2, #1
 8005d54:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	2201      	movs	r2, #1
 8005d5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005d60:	2300      	movs	r3, #0
}
 8005d62:	4618      	mov	r0, r3
 8005d64:	3708      	adds	r7, #8
 8005d66:	46bd      	mov	sp, r7
 8005d68:	bd80      	pop	{r7, pc}

08005d6a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005d6a:	b580      	push	{r7, lr}
 8005d6c:	b082      	sub	sp, #8
 8005d6e:	af00      	add	r7, sp, #0
 8005d70:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d101      	bne.n	8005d7c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005d78:	2301      	movs	r3, #1
 8005d7a:	e041      	b.n	8005e00 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d82:	b2db      	uxtb	r3, r3
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d106      	bne.n	8005d96 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	2200      	movs	r2, #0
 8005d8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005d90:	6878      	ldr	r0, [r7, #4]
 8005d92:	f000 f839 	bl	8005e08 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	2202      	movs	r2, #2
 8005d9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681a      	ldr	r2, [r3, #0]
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	3304      	adds	r3, #4
 8005da6:	4619      	mov	r1, r3
 8005da8:	4610      	mov	r0, r2
 8005daa:	f000 fca1 	bl	80066f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	2201      	movs	r2, #1
 8005db2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	2201      	movs	r2, #1
 8005dba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	2201      	movs	r2, #1
 8005dc2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	2201      	movs	r2, #1
 8005dca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	2201      	movs	r2, #1
 8005dd2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	2201      	movs	r2, #1
 8005dda:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	2201      	movs	r2, #1
 8005de2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	2201      	movs	r2, #1
 8005dea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	2201      	movs	r2, #1
 8005df2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	2201      	movs	r2, #1
 8005dfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005dfe:	2300      	movs	r3, #0
}
 8005e00:	4618      	mov	r0, r3
 8005e02:	3708      	adds	r7, #8
 8005e04:	46bd      	mov	sp, r7
 8005e06:	bd80      	pop	{r7, pc}

08005e08 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005e08:	b480      	push	{r7}
 8005e0a:	b083      	sub	sp, #12
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005e10:	bf00      	nop
 8005e12:	370c      	adds	r7, #12
 8005e14:	46bd      	mov	sp, r7
 8005e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1a:	4770      	bx	lr

08005e1c <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005e1c:	b580      	push	{r7, lr}
 8005e1e:	b084      	sub	sp, #16
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	6078      	str	r0, [r7, #4]
 8005e24:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005e26:	2300      	movs	r3, #0
 8005e28:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005e2a:	683b      	ldr	r3, [r7, #0]
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d109      	bne.n	8005e44 <HAL_TIM_PWM_Start_IT+0x28>
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005e36:	b2db      	uxtb	r3, r3
 8005e38:	2b01      	cmp	r3, #1
 8005e3a:	bf14      	ite	ne
 8005e3c:	2301      	movne	r3, #1
 8005e3e:	2300      	moveq	r3, #0
 8005e40:	b2db      	uxtb	r3, r3
 8005e42:	e022      	b.n	8005e8a <HAL_TIM_PWM_Start_IT+0x6e>
 8005e44:	683b      	ldr	r3, [r7, #0]
 8005e46:	2b04      	cmp	r3, #4
 8005e48:	d109      	bne.n	8005e5e <HAL_TIM_PWM_Start_IT+0x42>
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005e50:	b2db      	uxtb	r3, r3
 8005e52:	2b01      	cmp	r3, #1
 8005e54:	bf14      	ite	ne
 8005e56:	2301      	movne	r3, #1
 8005e58:	2300      	moveq	r3, #0
 8005e5a:	b2db      	uxtb	r3, r3
 8005e5c:	e015      	b.n	8005e8a <HAL_TIM_PWM_Start_IT+0x6e>
 8005e5e:	683b      	ldr	r3, [r7, #0]
 8005e60:	2b08      	cmp	r3, #8
 8005e62:	d109      	bne.n	8005e78 <HAL_TIM_PWM_Start_IT+0x5c>
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005e6a:	b2db      	uxtb	r3, r3
 8005e6c:	2b01      	cmp	r3, #1
 8005e6e:	bf14      	ite	ne
 8005e70:	2301      	movne	r3, #1
 8005e72:	2300      	moveq	r3, #0
 8005e74:	b2db      	uxtb	r3, r3
 8005e76:	e008      	b.n	8005e8a <HAL_TIM_PWM_Start_IT+0x6e>
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005e7e:	b2db      	uxtb	r3, r3
 8005e80:	2b01      	cmp	r3, #1
 8005e82:	bf14      	ite	ne
 8005e84:	2301      	movne	r3, #1
 8005e86:	2300      	moveq	r3, #0
 8005e88:	b2db      	uxtb	r3, r3
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d001      	beq.n	8005e92 <HAL_TIM_PWM_Start_IT+0x76>
  {
    return HAL_ERROR;
 8005e8e:	2301      	movs	r3, #1
 8005e90:	e0b3      	b.n	8005ffa <HAL_TIM_PWM_Start_IT+0x1de>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005e92:	683b      	ldr	r3, [r7, #0]
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d104      	bne.n	8005ea2 <HAL_TIM_PWM_Start_IT+0x86>
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	2202      	movs	r2, #2
 8005e9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005ea0:	e013      	b.n	8005eca <HAL_TIM_PWM_Start_IT+0xae>
 8005ea2:	683b      	ldr	r3, [r7, #0]
 8005ea4:	2b04      	cmp	r3, #4
 8005ea6:	d104      	bne.n	8005eb2 <HAL_TIM_PWM_Start_IT+0x96>
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	2202      	movs	r2, #2
 8005eac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005eb0:	e00b      	b.n	8005eca <HAL_TIM_PWM_Start_IT+0xae>
 8005eb2:	683b      	ldr	r3, [r7, #0]
 8005eb4:	2b08      	cmp	r3, #8
 8005eb6:	d104      	bne.n	8005ec2 <HAL_TIM_PWM_Start_IT+0xa6>
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	2202      	movs	r2, #2
 8005ebc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005ec0:	e003      	b.n	8005eca <HAL_TIM_PWM_Start_IT+0xae>
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	2202      	movs	r2, #2
 8005ec6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  switch (Channel)
 8005eca:	683b      	ldr	r3, [r7, #0]
 8005ecc:	2b0c      	cmp	r3, #12
 8005ece:	d841      	bhi.n	8005f54 <HAL_TIM_PWM_Start_IT+0x138>
 8005ed0:	a201      	add	r2, pc, #4	; (adr r2, 8005ed8 <HAL_TIM_PWM_Start_IT+0xbc>)
 8005ed2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ed6:	bf00      	nop
 8005ed8:	08005f0d 	.word	0x08005f0d
 8005edc:	08005f55 	.word	0x08005f55
 8005ee0:	08005f55 	.word	0x08005f55
 8005ee4:	08005f55 	.word	0x08005f55
 8005ee8:	08005f1f 	.word	0x08005f1f
 8005eec:	08005f55 	.word	0x08005f55
 8005ef0:	08005f55 	.word	0x08005f55
 8005ef4:	08005f55 	.word	0x08005f55
 8005ef8:	08005f31 	.word	0x08005f31
 8005efc:	08005f55 	.word	0x08005f55
 8005f00:	08005f55 	.word	0x08005f55
 8005f04:	08005f55 	.word	0x08005f55
 8005f08:	08005f43 	.word	0x08005f43
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	68da      	ldr	r2, [r3, #12]
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	f042 0202 	orr.w	r2, r2, #2
 8005f1a:	60da      	str	r2, [r3, #12]
      break;
 8005f1c:	e01d      	b.n	8005f5a <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	68da      	ldr	r2, [r3, #12]
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	f042 0204 	orr.w	r2, r2, #4
 8005f2c:	60da      	str	r2, [r3, #12]
      break;
 8005f2e:	e014      	b.n	8005f5a <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	68da      	ldr	r2, [r3, #12]
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	f042 0208 	orr.w	r2, r2, #8
 8005f3e:	60da      	str	r2, [r3, #12]
      break;
 8005f40:	e00b      	b.n	8005f5a <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	68da      	ldr	r2, [r3, #12]
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	f042 0210 	orr.w	r2, r2, #16
 8005f50:	60da      	str	r2, [r3, #12]
      break;
 8005f52:	e002      	b.n	8005f5a <HAL_TIM_PWM_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 8005f54:	2301      	movs	r3, #1
 8005f56:	73fb      	strb	r3, [r7, #15]
      break;
 8005f58:	bf00      	nop
  }

  if (status == HAL_OK)
 8005f5a:	7bfb      	ldrb	r3, [r7, #15]
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d14b      	bne.n	8005ff8 <HAL_TIM_PWM_Start_IT+0x1dc>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	2201      	movs	r2, #1
 8005f66:	6839      	ldr	r1, [r7, #0]
 8005f68:	4618      	mov	r0, r3
 8005f6a:	f000 fe67 	bl	8006c3c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	4a24      	ldr	r2, [pc, #144]	; (8006004 <HAL_TIM_PWM_Start_IT+0x1e8>)
 8005f74:	4293      	cmp	r3, r2
 8005f76:	d107      	bne.n	8005f88 <HAL_TIM_PWM_Start_IT+0x16c>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005f86:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	4a1d      	ldr	r2, [pc, #116]	; (8006004 <HAL_TIM_PWM_Start_IT+0x1e8>)
 8005f8e:	4293      	cmp	r3, r2
 8005f90:	d018      	beq.n	8005fc4 <HAL_TIM_PWM_Start_IT+0x1a8>
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f9a:	d013      	beq.n	8005fc4 <HAL_TIM_PWM_Start_IT+0x1a8>
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	4a19      	ldr	r2, [pc, #100]	; (8006008 <HAL_TIM_PWM_Start_IT+0x1ec>)
 8005fa2:	4293      	cmp	r3, r2
 8005fa4:	d00e      	beq.n	8005fc4 <HAL_TIM_PWM_Start_IT+0x1a8>
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	4a18      	ldr	r2, [pc, #96]	; (800600c <HAL_TIM_PWM_Start_IT+0x1f0>)
 8005fac:	4293      	cmp	r3, r2
 8005fae:	d009      	beq.n	8005fc4 <HAL_TIM_PWM_Start_IT+0x1a8>
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	4a16      	ldr	r2, [pc, #88]	; (8006010 <HAL_TIM_PWM_Start_IT+0x1f4>)
 8005fb6:	4293      	cmp	r3, r2
 8005fb8:	d004      	beq.n	8005fc4 <HAL_TIM_PWM_Start_IT+0x1a8>
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	4a15      	ldr	r2, [pc, #84]	; (8006014 <HAL_TIM_PWM_Start_IT+0x1f8>)
 8005fc0:	4293      	cmp	r3, r2
 8005fc2:	d111      	bne.n	8005fe8 <HAL_TIM_PWM_Start_IT+0x1cc>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	689b      	ldr	r3, [r3, #8]
 8005fca:	f003 0307 	and.w	r3, r3, #7
 8005fce:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005fd0:	68bb      	ldr	r3, [r7, #8]
 8005fd2:	2b06      	cmp	r3, #6
 8005fd4:	d010      	beq.n	8005ff8 <HAL_TIM_PWM_Start_IT+0x1dc>
      {
        __HAL_TIM_ENABLE(htim);
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	681a      	ldr	r2, [r3, #0]
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	f042 0201 	orr.w	r2, r2, #1
 8005fe4:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005fe6:	e007      	b.n	8005ff8 <HAL_TIM_PWM_Start_IT+0x1dc>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	681a      	ldr	r2, [r3, #0]
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	f042 0201 	orr.w	r2, r2, #1
 8005ff6:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8005ff8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ffa:	4618      	mov	r0, r3
 8005ffc:	3710      	adds	r7, #16
 8005ffe:	46bd      	mov	sp, r7
 8006000:	bd80      	pop	{r7, pc}
 8006002:	bf00      	nop
 8006004:	40010000 	.word	0x40010000
 8006008:	40000400 	.word	0x40000400
 800600c:	40000800 	.word	0x40000800
 8006010:	40000c00 	.word	0x40000c00
 8006014:	40014000 	.word	0x40014000

08006018 <HAL_TIM_PWM_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006018:	b580      	push	{r7, lr}
 800601a:	b084      	sub	sp, #16
 800601c:	af00      	add	r7, sp, #0
 800601e:	6078      	str	r0, [r7, #4]
 8006020:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006022:	2300      	movs	r3, #0
 8006024:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8006026:	683b      	ldr	r3, [r7, #0]
 8006028:	2b0c      	cmp	r3, #12
 800602a:	d841      	bhi.n	80060b0 <HAL_TIM_PWM_Stop_IT+0x98>
 800602c:	a201      	add	r2, pc, #4	; (adr r2, 8006034 <HAL_TIM_PWM_Stop_IT+0x1c>)
 800602e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006032:	bf00      	nop
 8006034:	08006069 	.word	0x08006069
 8006038:	080060b1 	.word	0x080060b1
 800603c:	080060b1 	.word	0x080060b1
 8006040:	080060b1 	.word	0x080060b1
 8006044:	0800607b 	.word	0x0800607b
 8006048:	080060b1 	.word	0x080060b1
 800604c:	080060b1 	.word	0x080060b1
 8006050:	080060b1 	.word	0x080060b1
 8006054:	0800608d 	.word	0x0800608d
 8006058:	080060b1 	.word	0x080060b1
 800605c:	080060b1 	.word	0x080060b1
 8006060:	080060b1 	.word	0x080060b1
 8006064:	0800609f 	.word	0x0800609f
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	68da      	ldr	r2, [r3, #12]
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	f022 0202 	bic.w	r2, r2, #2
 8006076:	60da      	str	r2, [r3, #12]
      break;
 8006078:	e01d      	b.n	80060b6 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	68da      	ldr	r2, [r3, #12]
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	f022 0204 	bic.w	r2, r2, #4
 8006088:	60da      	str	r2, [r3, #12]
      break;
 800608a:	e014      	b.n	80060b6 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	68da      	ldr	r2, [r3, #12]
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	f022 0208 	bic.w	r2, r2, #8
 800609a:	60da      	str	r2, [r3, #12]
      break;
 800609c:	e00b      	b.n	80060b6 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	68da      	ldr	r2, [r3, #12]
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	f022 0210 	bic.w	r2, r2, #16
 80060ac:	60da      	str	r2, [r3, #12]
      break;
 80060ae:	e002      	b.n	80060b6 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 80060b0:	2301      	movs	r3, #1
 80060b2:	73fb      	strb	r3, [r7, #15]
      break;
 80060b4:	bf00      	nop
  }

  if (status == HAL_OK)
 80060b6:	7bfb      	ldrb	r3, [r7, #15]
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d157      	bne.n	800616c <HAL_TIM_PWM_Stop_IT+0x154>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	2200      	movs	r2, #0
 80060c2:	6839      	ldr	r1, [r7, #0]
 80060c4:	4618      	mov	r0, r3
 80060c6:	f000 fdb9 	bl	8006c3c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	4a2a      	ldr	r2, [pc, #168]	; (8006178 <HAL_TIM_PWM_Stop_IT+0x160>)
 80060d0:	4293      	cmp	r3, r2
 80060d2:	d117      	bne.n	8006104 <HAL_TIM_PWM_Stop_IT+0xec>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	6a1a      	ldr	r2, [r3, #32]
 80060da:	f241 1311 	movw	r3, #4369	; 0x1111
 80060de:	4013      	ands	r3, r2
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d10f      	bne.n	8006104 <HAL_TIM_PWM_Stop_IT+0xec>
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	6a1a      	ldr	r2, [r3, #32]
 80060ea:	f240 4344 	movw	r3, #1092	; 0x444
 80060ee:	4013      	ands	r3, r2
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d107      	bne.n	8006104 <HAL_TIM_PWM_Stop_IT+0xec>
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006102:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	6a1a      	ldr	r2, [r3, #32]
 800610a:	f241 1311 	movw	r3, #4369	; 0x1111
 800610e:	4013      	ands	r3, r2
 8006110:	2b00      	cmp	r3, #0
 8006112:	d10f      	bne.n	8006134 <HAL_TIM_PWM_Stop_IT+0x11c>
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	6a1a      	ldr	r2, [r3, #32]
 800611a:	f240 4344 	movw	r3, #1092	; 0x444
 800611e:	4013      	ands	r3, r2
 8006120:	2b00      	cmp	r3, #0
 8006122:	d107      	bne.n	8006134 <HAL_TIM_PWM_Stop_IT+0x11c>
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	681a      	ldr	r2, [r3, #0]
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	f022 0201 	bic.w	r2, r2, #1
 8006132:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8006134:	683b      	ldr	r3, [r7, #0]
 8006136:	2b00      	cmp	r3, #0
 8006138:	d104      	bne.n	8006144 <HAL_TIM_PWM_Stop_IT+0x12c>
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	2201      	movs	r2, #1
 800613e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006142:	e013      	b.n	800616c <HAL_TIM_PWM_Stop_IT+0x154>
 8006144:	683b      	ldr	r3, [r7, #0]
 8006146:	2b04      	cmp	r3, #4
 8006148:	d104      	bne.n	8006154 <HAL_TIM_PWM_Stop_IT+0x13c>
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	2201      	movs	r2, #1
 800614e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006152:	e00b      	b.n	800616c <HAL_TIM_PWM_Stop_IT+0x154>
 8006154:	683b      	ldr	r3, [r7, #0]
 8006156:	2b08      	cmp	r3, #8
 8006158:	d104      	bne.n	8006164 <HAL_TIM_PWM_Stop_IT+0x14c>
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	2201      	movs	r2, #1
 800615e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006162:	e003      	b.n	800616c <HAL_TIM_PWM_Stop_IT+0x154>
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	2201      	movs	r2, #1
 8006168:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 800616c:	7bfb      	ldrb	r3, [r7, #15]
}
 800616e:	4618      	mov	r0, r3
 8006170:	3710      	adds	r7, #16
 8006172:	46bd      	mov	sp, r7
 8006174:	bd80      	pop	{r7, pc}
 8006176:	bf00      	nop
 8006178:	40010000 	.word	0x40010000

0800617c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800617c:	b580      	push	{r7, lr}
 800617e:	b082      	sub	sp, #8
 8006180:	af00      	add	r7, sp, #0
 8006182:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	691b      	ldr	r3, [r3, #16]
 800618a:	f003 0302 	and.w	r3, r3, #2
 800618e:	2b02      	cmp	r3, #2
 8006190:	d122      	bne.n	80061d8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	68db      	ldr	r3, [r3, #12]
 8006198:	f003 0302 	and.w	r3, r3, #2
 800619c:	2b02      	cmp	r3, #2
 800619e:	d11b      	bne.n	80061d8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	f06f 0202 	mvn.w	r2, #2
 80061a8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	2201      	movs	r2, #1
 80061ae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	699b      	ldr	r3, [r3, #24]
 80061b6:	f003 0303 	and.w	r3, r3, #3
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d003      	beq.n	80061c6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80061be:	6878      	ldr	r0, [r7, #4]
 80061c0:	f000 fa81 	bl	80066c6 <HAL_TIM_IC_CaptureCallback>
 80061c4:	e005      	b.n	80061d2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80061c6:	6878      	ldr	r0, [r7, #4]
 80061c8:	f000 fa73 	bl	80066b2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80061cc:	6878      	ldr	r0, [r7, #4]
 80061ce:	f7fa febd 	bl	8000f4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	2200      	movs	r2, #0
 80061d6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	691b      	ldr	r3, [r3, #16]
 80061de:	f003 0304 	and.w	r3, r3, #4
 80061e2:	2b04      	cmp	r3, #4
 80061e4:	d122      	bne.n	800622c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	68db      	ldr	r3, [r3, #12]
 80061ec:	f003 0304 	and.w	r3, r3, #4
 80061f0:	2b04      	cmp	r3, #4
 80061f2:	d11b      	bne.n	800622c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	f06f 0204 	mvn.w	r2, #4
 80061fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	2202      	movs	r2, #2
 8006202:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	699b      	ldr	r3, [r3, #24]
 800620a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800620e:	2b00      	cmp	r3, #0
 8006210:	d003      	beq.n	800621a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006212:	6878      	ldr	r0, [r7, #4]
 8006214:	f000 fa57 	bl	80066c6 <HAL_TIM_IC_CaptureCallback>
 8006218:	e005      	b.n	8006226 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800621a:	6878      	ldr	r0, [r7, #4]
 800621c:	f000 fa49 	bl	80066b2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006220:	6878      	ldr	r0, [r7, #4]
 8006222:	f7fa fe93 	bl	8000f4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	2200      	movs	r2, #0
 800622a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	691b      	ldr	r3, [r3, #16]
 8006232:	f003 0308 	and.w	r3, r3, #8
 8006236:	2b08      	cmp	r3, #8
 8006238:	d122      	bne.n	8006280 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	68db      	ldr	r3, [r3, #12]
 8006240:	f003 0308 	and.w	r3, r3, #8
 8006244:	2b08      	cmp	r3, #8
 8006246:	d11b      	bne.n	8006280 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	f06f 0208 	mvn.w	r2, #8
 8006250:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	2204      	movs	r2, #4
 8006256:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	69db      	ldr	r3, [r3, #28]
 800625e:	f003 0303 	and.w	r3, r3, #3
 8006262:	2b00      	cmp	r3, #0
 8006264:	d003      	beq.n	800626e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006266:	6878      	ldr	r0, [r7, #4]
 8006268:	f000 fa2d 	bl	80066c6 <HAL_TIM_IC_CaptureCallback>
 800626c:	e005      	b.n	800627a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800626e:	6878      	ldr	r0, [r7, #4]
 8006270:	f000 fa1f 	bl	80066b2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006274:	6878      	ldr	r0, [r7, #4]
 8006276:	f7fa fe69 	bl	8000f4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	2200      	movs	r2, #0
 800627e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	691b      	ldr	r3, [r3, #16]
 8006286:	f003 0310 	and.w	r3, r3, #16
 800628a:	2b10      	cmp	r3, #16
 800628c:	d122      	bne.n	80062d4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	68db      	ldr	r3, [r3, #12]
 8006294:	f003 0310 	and.w	r3, r3, #16
 8006298:	2b10      	cmp	r3, #16
 800629a:	d11b      	bne.n	80062d4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	f06f 0210 	mvn.w	r2, #16
 80062a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	2208      	movs	r2, #8
 80062aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	69db      	ldr	r3, [r3, #28]
 80062b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d003      	beq.n	80062c2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80062ba:	6878      	ldr	r0, [r7, #4]
 80062bc:	f000 fa03 	bl	80066c6 <HAL_TIM_IC_CaptureCallback>
 80062c0:	e005      	b.n	80062ce <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80062c2:	6878      	ldr	r0, [r7, #4]
 80062c4:	f000 f9f5 	bl	80066b2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80062c8:	6878      	ldr	r0, [r7, #4]
 80062ca:	f7fa fe3f 	bl	8000f4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	2200      	movs	r2, #0
 80062d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	691b      	ldr	r3, [r3, #16]
 80062da:	f003 0301 	and.w	r3, r3, #1
 80062de:	2b01      	cmp	r3, #1
 80062e0:	d10e      	bne.n	8006300 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	68db      	ldr	r3, [r3, #12]
 80062e8:	f003 0301 	and.w	r3, r3, #1
 80062ec:	2b01      	cmp	r3, #1
 80062ee:	d107      	bne.n	8006300 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	f06f 0201 	mvn.w	r2, #1
 80062f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80062fa:	6878      	ldr	r0, [r7, #4]
 80062fc:	f000 f9cf 	bl	800669e <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	691b      	ldr	r3, [r3, #16]
 8006306:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800630a:	2b80      	cmp	r3, #128	; 0x80
 800630c:	d10e      	bne.n	800632c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	68db      	ldr	r3, [r3, #12]
 8006314:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006318:	2b80      	cmp	r3, #128	; 0x80
 800631a:	d107      	bne.n	800632c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006324:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006326:	6878      	ldr	r0, [r7, #4]
 8006328:	f000 fd78 	bl	8006e1c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	691b      	ldr	r3, [r3, #16]
 8006332:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006336:	2b40      	cmp	r3, #64	; 0x40
 8006338:	d10e      	bne.n	8006358 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	68db      	ldr	r3, [r3, #12]
 8006340:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006344:	2b40      	cmp	r3, #64	; 0x40
 8006346:	d107      	bne.n	8006358 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006350:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006352:	6878      	ldr	r0, [r7, #4]
 8006354:	f000 f9c1 	bl	80066da <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	691b      	ldr	r3, [r3, #16]
 800635e:	f003 0320 	and.w	r3, r3, #32
 8006362:	2b20      	cmp	r3, #32
 8006364:	d10e      	bne.n	8006384 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	68db      	ldr	r3, [r3, #12]
 800636c:	f003 0320 	and.w	r3, r3, #32
 8006370:	2b20      	cmp	r3, #32
 8006372:	d107      	bne.n	8006384 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	f06f 0220 	mvn.w	r2, #32
 800637c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800637e:	6878      	ldr	r0, [r7, #4]
 8006380:	f000 fd42 	bl	8006e08 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006384:	bf00      	nop
 8006386:	3708      	adds	r7, #8
 8006388:	46bd      	mov	sp, r7
 800638a:	bd80      	pop	{r7, pc}

0800638c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800638c:	b580      	push	{r7, lr}
 800638e:	b086      	sub	sp, #24
 8006390:	af00      	add	r7, sp, #0
 8006392:	60f8      	str	r0, [r7, #12]
 8006394:	60b9      	str	r1, [r7, #8]
 8006396:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006398:	2300      	movs	r3, #0
 800639a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80063a2:	2b01      	cmp	r3, #1
 80063a4:	d101      	bne.n	80063aa <HAL_TIM_PWM_ConfigChannel+0x1e>
 80063a6:	2302      	movs	r3, #2
 80063a8:	e0ae      	b.n	8006508 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	2201      	movs	r2, #1
 80063ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	2b0c      	cmp	r3, #12
 80063b6:	f200 809f 	bhi.w	80064f8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80063ba:	a201      	add	r2, pc, #4	; (adr r2, 80063c0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80063bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063c0:	080063f5 	.word	0x080063f5
 80063c4:	080064f9 	.word	0x080064f9
 80063c8:	080064f9 	.word	0x080064f9
 80063cc:	080064f9 	.word	0x080064f9
 80063d0:	08006435 	.word	0x08006435
 80063d4:	080064f9 	.word	0x080064f9
 80063d8:	080064f9 	.word	0x080064f9
 80063dc:	080064f9 	.word	0x080064f9
 80063e0:	08006477 	.word	0x08006477
 80063e4:	080064f9 	.word	0x080064f9
 80063e8:	080064f9 	.word	0x080064f9
 80063ec:	080064f9 	.word	0x080064f9
 80063f0:	080064b7 	.word	0x080064b7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	68b9      	ldr	r1, [r7, #8]
 80063fa:	4618      	mov	r0, r3
 80063fc:	f000 f9f8 	bl	80067f0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	699a      	ldr	r2, [r3, #24]
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	f042 0208 	orr.w	r2, r2, #8
 800640e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	699a      	ldr	r2, [r3, #24]
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	f022 0204 	bic.w	r2, r2, #4
 800641e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	6999      	ldr	r1, [r3, #24]
 8006426:	68bb      	ldr	r3, [r7, #8]
 8006428:	691a      	ldr	r2, [r3, #16]
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	430a      	orrs	r2, r1
 8006430:	619a      	str	r2, [r3, #24]
      break;
 8006432:	e064      	b.n	80064fe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	68b9      	ldr	r1, [r7, #8]
 800643a:	4618      	mov	r0, r3
 800643c:	f000 fa3e 	bl	80068bc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	699a      	ldr	r2, [r3, #24]
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800644e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	699a      	ldr	r2, [r3, #24]
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800645e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	6999      	ldr	r1, [r3, #24]
 8006466:	68bb      	ldr	r3, [r7, #8]
 8006468:	691b      	ldr	r3, [r3, #16]
 800646a:	021a      	lsls	r2, r3, #8
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	430a      	orrs	r2, r1
 8006472:	619a      	str	r2, [r3, #24]
      break;
 8006474:	e043      	b.n	80064fe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	68b9      	ldr	r1, [r7, #8]
 800647c:	4618      	mov	r0, r3
 800647e:	f000 fa89 	bl	8006994 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	69da      	ldr	r2, [r3, #28]
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	f042 0208 	orr.w	r2, r2, #8
 8006490:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	69da      	ldr	r2, [r3, #28]
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	f022 0204 	bic.w	r2, r2, #4
 80064a0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	69d9      	ldr	r1, [r3, #28]
 80064a8:	68bb      	ldr	r3, [r7, #8]
 80064aa:	691a      	ldr	r2, [r3, #16]
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	430a      	orrs	r2, r1
 80064b2:	61da      	str	r2, [r3, #28]
      break;
 80064b4:	e023      	b.n	80064fe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	68b9      	ldr	r1, [r7, #8]
 80064bc:	4618      	mov	r0, r3
 80064be:	f000 fad3 	bl	8006a68 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	69da      	ldr	r2, [r3, #28]
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80064d0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	69da      	ldr	r2, [r3, #28]
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80064e0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	69d9      	ldr	r1, [r3, #28]
 80064e8:	68bb      	ldr	r3, [r7, #8]
 80064ea:	691b      	ldr	r3, [r3, #16]
 80064ec:	021a      	lsls	r2, r3, #8
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	430a      	orrs	r2, r1
 80064f4:	61da      	str	r2, [r3, #28]
      break;
 80064f6:	e002      	b.n	80064fe <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80064f8:	2301      	movs	r3, #1
 80064fa:	75fb      	strb	r3, [r7, #23]
      break;
 80064fc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	2200      	movs	r2, #0
 8006502:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006506:	7dfb      	ldrb	r3, [r7, #23]
}
 8006508:	4618      	mov	r0, r3
 800650a:	3718      	adds	r7, #24
 800650c:	46bd      	mov	sp, r7
 800650e:	bd80      	pop	{r7, pc}

08006510 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006510:	b580      	push	{r7, lr}
 8006512:	b084      	sub	sp, #16
 8006514:	af00      	add	r7, sp, #0
 8006516:	6078      	str	r0, [r7, #4]
 8006518:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800651a:	2300      	movs	r3, #0
 800651c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006524:	2b01      	cmp	r3, #1
 8006526:	d101      	bne.n	800652c <HAL_TIM_ConfigClockSource+0x1c>
 8006528:	2302      	movs	r3, #2
 800652a:	e0b4      	b.n	8006696 <HAL_TIM_ConfigClockSource+0x186>
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	2201      	movs	r2, #1
 8006530:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	2202      	movs	r2, #2
 8006538:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	689b      	ldr	r3, [r3, #8]
 8006542:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006544:	68bb      	ldr	r3, [r7, #8]
 8006546:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800654a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800654c:	68bb      	ldr	r3, [r7, #8]
 800654e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006552:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	68ba      	ldr	r2, [r7, #8]
 800655a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800655c:	683b      	ldr	r3, [r7, #0]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006564:	d03e      	beq.n	80065e4 <HAL_TIM_ConfigClockSource+0xd4>
 8006566:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800656a:	f200 8087 	bhi.w	800667c <HAL_TIM_ConfigClockSource+0x16c>
 800656e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006572:	f000 8086 	beq.w	8006682 <HAL_TIM_ConfigClockSource+0x172>
 8006576:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800657a:	d87f      	bhi.n	800667c <HAL_TIM_ConfigClockSource+0x16c>
 800657c:	2b70      	cmp	r3, #112	; 0x70
 800657e:	d01a      	beq.n	80065b6 <HAL_TIM_ConfigClockSource+0xa6>
 8006580:	2b70      	cmp	r3, #112	; 0x70
 8006582:	d87b      	bhi.n	800667c <HAL_TIM_ConfigClockSource+0x16c>
 8006584:	2b60      	cmp	r3, #96	; 0x60
 8006586:	d050      	beq.n	800662a <HAL_TIM_ConfigClockSource+0x11a>
 8006588:	2b60      	cmp	r3, #96	; 0x60
 800658a:	d877      	bhi.n	800667c <HAL_TIM_ConfigClockSource+0x16c>
 800658c:	2b50      	cmp	r3, #80	; 0x50
 800658e:	d03c      	beq.n	800660a <HAL_TIM_ConfigClockSource+0xfa>
 8006590:	2b50      	cmp	r3, #80	; 0x50
 8006592:	d873      	bhi.n	800667c <HAL_TIM_ConfigClockSource+0x16c>
 8006594:	2b40      	cmp	r3, #64	; 0x40
 8006596:	d058      	beq.n	800664a <HAL_TIM_ConfigClockSource+0x13a>
 8006598:	2b40      	cmp	r3, #64	; 0x40
 800659a:	d86f      	bhi.n	800667c <HAL_TIM_ConfigClockSource+0x16c>
 800659c:	2b30      	cmp	r3, #48	; 0x30
 800659e:	d064      	beq.n	800666a <HAL_TIM_ConfigClockSource+0x15a>
 80065a0:	2b30      	cmp	r3, #48	; 0x30
 80065a2:	d86b      	bhi.n	800667c <HAL_TIM_ConfigClockSource+0x16c>
 80065a4:	2b20      	cmp	r3, #32
 80065a6:	d060      	beq.n	800666a <HAL_TIM_ConfigClockSource+0x15a>
 80065a8:	2b20      	cmp	r3, #32
 80065aa:	d867      	bhi.n	800667c <HAL_TIM_ConfigClockSource+0x16c>
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d05c      	beq.n	800666a <HAL_TIM_ConfigClockSource+0x15a>
 80065b0:	2b10      	cmp	r3, #16
 80065b2:	d05a      	beq.n	800666a <HAL_TIM_ConfigClockSource+0x15a>
 80065b4:	e062      	b.n	800667c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	6818      	ldr	r0, [r3, #0]
 80065ba:	683b      	ldr	r3, [r7, #0]
 80065bc:	6899      	ldr	r1, [r3, #8]
 80065be:	683b      	ldr	r3, [r7, #0]
 80065c0:	685a      	ldr	r2, [r3, #4]
 80065c2:	683b      	ldr	r3, [r7, #0]
 80065c4:	68db      	ldr	r3, [r3, #12]
 80065c6:	f000 fb19 	bl	8006bfc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	689b      	ldr	r3, [r3, #8]
 80065d0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80065d2:	68bb      	ldr	r3, [r7, #8]
 80065d4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80065d8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	68ba      	ldr	r2, [r7, #8]
 80065e0:	609a      	str	r2, [r3, #8]
      break;
 80065e2:	e04f      	b.n	8006684 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	6818      	ldr	r0, [r3, #0]
 80065e8:	683b      	ldr	r3, [r7, #0]
 80065ea:	6899      	ldr	r1, [r3, #8]
 80065ec:	683b      	ldr	r3, [r7, #0]
 80065ee:	685a      	ldr	r2, [r3, #4]
 80065f0:	683b      	ldr	r3, [r7, #0]
 80065f2:	68db      	ldr	r3, [r3, #12]
 80065f4:	f000 fb02 	bl	8006bfc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	689a      	ldr	r2, [r3, #8]
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006606:	609a      	str	r2, [r3, #8]
      break;
 8006608:	e03c      	b.n	8006684 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	6818      	ldr	r0, [r3, #0]
 800660e:	683b      	ldr	r3, [r7, #0]
 8006610:	6859      	ldr	r1, [r3, #4]
 8006612:	683b      	ldr	r3, [r7, #0]
 8006614:	68db      	ldr	r3, [r3, #12]
 8006616:	461a      	mov	r2, r3
 8006618:	f000 fa76 	bl	8006b08 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	2150      	movs	r1, #80	; 0x50
 8006622:	4618      	mov	r0, r3
 8006624:	f000 facf 	bl	8006bc6 <TIM_ITRx_SetConfig>
      break;
 8006628:	e02c      	b.n	8006684 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	6818      	ldr	r0, [r3, #0]
 800662e:	683b      	ldr	r3, [r7, #0]
 8006630:	6859      	ldr	r1, [r3, #4]
 8006632:	683b      	ldr	r3, [r7, #0]
 8006634:	68db      	ldr	r3, [r3, #12]
 8006636:	461a      	mov	r2, r3
 8006638:	f000 fa95 	bl	8006b66 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	2160      	movs	r1, #96	; 0x60
 8006642:	4618      	mov	r0, r3
 8006644:	f000 fabf 	bl	8006bc6 <TIM_ITRx_SetConfig>
      break;
 8006648:	e01c      	b.n	8006684 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	6818      	ldr	r0, [r3, #0]
 800664e:	683b      	ldr	r3, [r7, #0]
 8006650:	6859      	ldr	r1, [r3, #4]
 8006652:	683b      	ldr	r3, [r7, #0]
 8006654:	68db      	ldr	r3, [r3, #12]
 8006656:	461a      	mov	r2, r3
 8006658:	f000 fa56 	bl	8006b08 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	2140      	movs	r1, #64	; 0x40
 8006662:	4618      	mov	r0, r3
 8006664:	f000 faaf 	bl	8006bc6 <TIM_ITRx_SetConfig>
      break;
 8006668:	e00c      	b.n	8006684 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681a      	ldr	r2, [r3, #0]
 800666e:	683b      	ldr	r3, [r7, #0]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	4619      	mov	r1, r3
 8006674:	4610      	mov	r0, r2
 8006676:	f000 faa6 	bl	8006bc6 <TIM_ITRx_SetConfig>
      break;
 800667a:	e003      	b.n	8006684 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800667c:	2301      	movs	r3, #1
 800667e:	73fb      	strb	r3, [r7, #15]
      break;
 8006680:	e000      	b.n	8006684 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006682:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	2201      	movs	r2, #1
 8006688:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	2200      	movs	r2, #0
 8006690:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006694:	7bfb      	ldrb	r3, [r7, #15]
}
 8006696:	4618      	mov	r0, r3
 8006698:	3710      	adds	r7, #16
 800669a:	46bd      	mov	sp, r7
 800669c:	bd80      	pop	{r7, pc}

0800669e <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800669e:	b480      	push	{r7}
 80066a0:	b083      	sub	sp, #12
 80066a2:	af00      	add	r7, sp, #0
 80066a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80066a6:	bf00      	nop
 80066a8:	370c      	adds	r7, #12
 80066aa:	46bd      	mov	sp, r7
 80066ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b0:	4770      	bx	lr

080066b2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80066b2:	b480      	push	{r7}
 80066b4:	b083      	sub	sp, #12
 80066b6:	af00      	add	r7, sp, #0
 80066b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80066ba:	bf00      	nop
 80066bc:	370c      	adds	r7, #12
 80066be:	46bd      	mov	sp, r7
 80066c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c4:	4770      	bx	lr

080066c6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80066c6:	b480      	push	{r7}
 80066c8:	b083      	sub	sp, #12
 80066ca:	af00      	add	r7, sp, #0
 80066cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80066ce:	bf00      	nop
 80066d0:	370c      	adds	r7, #12
 80066d2:	46bd      	mov	sp, r7
 80066d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d8:	4770      	bx	lr

080066da <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80066da:	b480      	push	{r7}
 80066dc:	b083      	sub	sp, #12
 80066de:	af00      	add	r7, sp, #0
 80066e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80066e2:	bf00      	nop
 80066e4:	370c      	adds	r7, #12
 80066e6:	46bd      	mov	sp, r7
 80066e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ec:	4770      	bx	lr
	...

080066f0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80066f0:	b480      	push	{r7}
 80066f2:	b085      	sub	sp, #20
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	6078      	str	r0, [r7, #4]
 80066f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	4a34      	ldr	r2, [pc, #208]	; (80067d4 <TIM_Base_SetConfig+0xe4>)
 8006704:	4293      	cmp	r3, r2
 8006706:	d00f      	beq.n	8006728 <TIM_Base_SetConfig+0x38>
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800670e:	d00b      	beq.n	8006728 <TIM_Base_SetConfig+0x38>
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	4a31      	ldr	r2, [pc, #196]	; (80067d8 <TIM_Base_SetConfig+0xe8>)
 8006714:	4293      	cmp	r3, r2
 8006716:	d007      	beq.n	8006728 <TIM_Base_SetConfig+0x38>
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	4a30      	ldr	r2, [pc, #192]	; (80067dc <TIM_Base_SetConfig+0xec>)
 800671c:	4293      	cmp	r3, r2
 800671e:	d003      	beq.n	8006728 <TIM_Base_SetConfig+0x38>
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	4a2f      	ldr	r2, [pc, #188]	; (80067e0 <TIM_Base_SetConfig+0xf0>)
 8006724:	4293      	cmp	r3, r2
 8006726:	d108      	bne.n	800673a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800672e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006730:	683b      	ldr	r3, [r7, #0]
 8006732:	685b      	ldr	r3, [r3, #4]
 8006734:	68fa      	ldr	r2, [r7, #12]
 8006736:	4313      	orrs	r3, r2
 8006738:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	4a25      	ldr	r2, [pc, #148]	; (80067d4 <TIM_Base_SetConfig+0xe4>)
 800673e:	4293      	cmp	r3, r2
 8006740:	d01b      	beq.n	800677a <TIM_Base_SetConfig+0x8a>
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006748:	d017      	beq.n	800677a <TIM_Base_SetConfig+0x8a>
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	4a22      	ldr	r2, [pc, #136]	; (80067d8 <TIM_Base_SetConfig+0xe8>)
 800674e:	4293      	cmp	r3, r2
 8006750:	d013      	beq.n	800677a <TIM_Base_SetConfig+0x8a>
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	4a21      	ldr	r2, [pc, #132]	; (80067dc <TIM_Base_SetConfig+0xec>)
 8006756:	4293      	cmp	r3, r2
 8006758:	d00f      	beq.n	800677a <TIM_Base_SetConfig+0x8a>
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	4a20      	ldr	r2, [pc, #128]	; (80067e0 <TIM_Base_SetConfig+0xf0>)
 800675e:	4293      	cmp	r3, r2
 8006760:	d00b      	beq.n	800677a <TIM_Base_SetConfig+0x8a>
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	4a1f      	ldr	r2, [pc, #124]	; (80067e4 <TIM_Base_SetConfig+0xf4>)
 8006766:	4293      	cmp	r3, r2
 8006768:	d007      	beq.n	800677a <TIM_Base_SetConfig+0x8a>
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	4a1e      	ldr	r2, [pc, #120]	; (80067e8 <TIM_Base_SetConfig+0xf8>)
 800676e:	4293      	cmp	r3, r2
 8006770:	d003      	beq.n	800677a <TIM_Base_SetConfig+0x8a>
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	4a1d      	ldr	r2, [pc, #116]	; (80067ec <TIM_Base_SetConfig+0xfc>)
 8006776:	4293      	cmp	r3, r2
 8006778:	d108      	bne.n	800678c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006780:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006782:	683b      	ldr	r3, [r7, #0]
 8006784:	68db      	ldr	r3, [r3, #12]
 8006786:	68fa      	ldr	r2, [r7, #12]
 8006788:	4313      	orrs	r3, r2
 800678a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006792:	683b      	ldr	r3, [r7, #0]
 8006794:	695b      	ldr	r3, [r3, #20]
 8006796:	4313      	orrs	r3, r2
 8006798:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	68fa      	ldr	r2, [r7, #12]
 800679e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80067a0:	683b      	ldr	r3, [r7, #0]
 80067a2:	689a      	ldr	r2, [r3, #8]
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80067a8:	683b      	ldr	r3, [r7, #0]
 80067aa:	681a      	ldr	r2, [r3, #0]
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	4a08      	ldr	r2, [pc, #32]	; (80067d4 <TIM_Base_SetConfig+0xe4>)
 80067b4:	4293      	cmp	r3, r2
 80067b6:	d103      	bne.n	80067c0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80067b8:	683b      	ldr	r3, [r7, #0]
 80067ba:	691a      	ldr	r2, [r3, #16]
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	2201      	movs	r2, #1
 80067c4:	615a      	str	r2, [r3, #20]
}
 80067c6:	bf00      	nop
 80067c8:	3714      	adds	r7, #20
 80067ca:	46bd      	mov	sp, r7
 80067cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d0:	4770      	bx	lr
 80067d2:	bf00      	nop
 80067d4:	40010000 	.word	0x40010000
 80067d8:	40000400 	.word	0x40000400
 80067dc:	40000800 	.word	0x40000800
 80067e0:	40000c00 	.word	0x40000c00
 80067e4:	40014000 	.word	0x40014000
 80067e8:	40014400 	.word	0x40014400
 80067ec:	40014800 	.word	0x40014800

080067f0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80067f0:	b480      	push	{r7}
 80067f2:	b087      	sub	sp, #28
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	6078      	str	r0, [r7, #4]
 80067f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	6a1b      	ldr	r3, [r3, #32]
 80067fe:	f023 0201 	bic.w	r2, r3, #1
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	6a1b      	ldr	r3, [r3, #32]
 800680a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	685b      	ldr	r3, [r3, #4]
 8006810:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	699b      	ldr	r3, [r3, #24]
 8006816:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800681e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	f023 0303 	bic.w	r3, r3, #3
 8006826:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006828:	683b      	ldr	r3, [r7, #0]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	68fa      	ldr	r2, [r7, #12]
 800682e:	4313      	orrs	r3, r2
 8006830:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006832:	697b      	ldr	r3, [r7, #20]
 8006834:	f023 0302 	bic.w	r3, r3, #2
 8006838:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800683a:	683b      	ldr	r3, [r7, #0]
 800683c:	689b      	ldr	r3, [r3, #8]
 800683e:	697a      	ldr	r2, [r7, #20]
 8006840:	4313      	orrs	r3, r2
 8006842:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	4a1c      	ldr	r2, [pc, #112]	; (80068b8 <TIM_OC1_SetConfig+0xc8>)
 8006848:	4293      	cmp	r3, r2
 800684a:	d10c      	bne.n	8006866 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800684c:	697b      	ldr	r3, [r7, #20]
 800684e:	f023 0308 	bic.w	r3, r3, #8
 8006852:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006854:	683b      	ldr	r3, [r7, #0]
 8006856:	68db      	ldr	r3, [r3, #12]
 8006858:	697a      	ldr	r2, [r7, #20]
 800685a:	4313      	orrs	r3, r2
 800685c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800685e:	697b      	ldr	r3, [r7, #20]
 8006860:	f023 0304 	bic.w	r3, r3, #4
 8006864:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	4a13      	ldr	r2, [pc, #76]	; (80068b8 <TIM_OC1_SetConfig+0xc8>)
 800686a:	4293      	cmp	r3, r2
 800686c:	d111      	bne.n	8006892 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800686e:	693b      	ldr	r3, [r7, #16]
 8006870:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006874:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006876:	693b      	ldr	r3, [r7, #16]
 8006878:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800687c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800687e:	683b      	ldr	r3, [r7, #0]
 8006880:	695b      	ldr	r3, [r3, #20]
 8006882:	693a      	ldr	r2, [r7, #16]
 8006884:	4313      	orrs	r3, r2
 8006886:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006888:	683b      	ldr	r3, [r7, #0]
 800688a:	699b      	ldr	r3, [r3, #24]
 800688c:	693a      	ldr	r2, [r7, #16]
 800688e:	4313      	orrs	r3, r2
 8006890:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	693a      	ldr	r2, [r7, #16]
 8006896:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	68fa      	ldr	r2, [r7, #12]
 800689c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800689e:	683b      	ldr	r3, [r7, #0]
 80068a0:	685a      	ldr	r2, [r3, #4]
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	697a      	ldr	r2, [r7, #20]
 80068aa:	621a      	str	r2, [r3, #32]
}
 80068ac:	bf00      	nop
 80068ae:	371c      	adds	r7, #28
 80068b0:	46bd      	mov	sp, r7
 80068b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b6:	4770      	bx	lr
 80068b8:	40010000 	.word	0x40010000

080068bc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80068bc:	b480      	push	{r7}
 80068be:	b087      	sub	sp, #28
 80068c0:	af00      	add	r7, sp, #0
 80068c2:	6078      	str	r0, [r7, #4]
 80068c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	6a1b      	ldr	r3, [r3, #32]
 80068ca:	f023 0210 	bic.w	r2, r3, #16
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	6a1b      	ldr	r3, [r3, #32]
 80068d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	685b      	ldr	r3, [r3, #4]
 80068dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	699b      	ldr	r3, [r3, #24]
 80068e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80068ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80068f2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80068f4:	683b      	ldr	r3, [r7, #0]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	021b      	lsls	r3, r3, #8
 80068fa:	68fa      	ldr	r2, [r7, #12]
 80068fc:	4313      	orrs	r3, r2
 80068fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006900:	697b      	ldr	r3, [r7, #20]
 8006902:	f023 0320 	bic.w	r3, r3, #32
 8006906:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006908:	683b      	ldr	r3, [r7, #0]
 800690a:	689b      	ldr	r3, [r3, #8]
 800690c:	011b      	lsls	r3, r3, #4
 800690e:	697a      	ldr	r2, [r7, #20]
 8006910:	4313      	orrs	r3, r2
 8006912:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	4a1e      	ldr	r2, [pc, #120]	; (8006990 <TIM_OC2_SetConfig+0xd4>)
 8006918:	4293      	cmp	r3, r2
 800691a:	d10d      	bne.n	8006938 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800691c:	697b      	ldr	r3, [r7, #20]
 800691e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006922:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006924:	683b      	ldr	r3, [r7, #0]
 8006926:	68db      	ldr	r3, [r3, #12]
 8006928:	011b      	lsls	r3, r3, #4
 800692a:	697a      	ldr	r2, [r7, #20]
 800692c:	4313      	orrs	r3, r2
 800692e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006930:	697b      	ldr	r3, [r7, #20]
 8006932:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006936:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	4a15      	ldr	r2, [pc, #84]	; (8006990 <TIM_OC2_SetConfig+0xd4>)
 800693c:	4293      	cmp	r3, r2
 800693e:	d113      	bne.n	8006968 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006940:	693b      	ldr	r3, [r7, #16]
 8006942:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006946:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006948:	693b      	ldr	r3, [r7, #16]
 800694a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800694e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006950:	683b      	ldr	r3, [r7, #0]
 8006952:	695b      	ldr	r3, [r3, #20]
 8006954:	009b      	lsls	r3, r3, #2
 8006956:	693a      	ldr	r2, [r7, #16]
 8006958:	4313      	orrs	r3, r2
 800695a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800695c:	683b      	ldr	r3, [r7, #0]
 800695e:	699b      	ldr	r3, [r3, #24]
 8006960:	009b      	lsls	r3, r3, #2
 8006962:	693a      	ldr	r2, [r7, #16]
 8006964:	4313      	orrs	r3, r2
 8006966:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	693a      	ldr	r2, [r7, #16]
 800696c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	68fa      	ldr	r2, [r7, #12]
 8006972:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006974:	683b      	ldr	r3, [r7, #0]
 8006976:	685a      	ldr	r2, [r3, #4]
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	697a      	ldr	r2, [r7, #20]
 8006980:	621a      	str	r2, [r3, #32]
}
 8006982:	bf00      	nop
 8006984:	371c      	adds	r7, #28
 8006986:	46bd      	mov	sp, r7
 8006988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800698c:	4770      	bx	lr
 800698e:	bf00      	nop
 8006990:	40010000 	.word	0x40010000

08006994 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006994:	b480      	push	{r7}
 8006996:	b087      	sub	sp, #28
 8006998:	af00      	add	r7, sp, #0
 800699a:	6078      	str	r0, [r7, #4]
 800699c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	6a1b      	ldr	r3, [r3, #32]
 80069a2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	6a1b      	ldr	r3, [r3, #32]
 80069ae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	685b      	ldr	r3, [r3, #4]
 80069b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	69db      	ldr	r3, [r3, #28]
 80069ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	f023 0303 	bic.w	r3, r3, #3
 80069ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80069cc:	683b      	ldr	r3, [r7, #0]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	68fa      	ldr	r2, [r7, #12]
 80069d2:	4313      	orrs	r3, r2
 80069d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80069d6:	697b      	ldr	r3, [r7, #20]
 80069d8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80069dc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80069de:	683b      	ldr	r3, [r7, #0]
 80069e0:	689b      	ldr	r3, [r3, #8]
 80069e2:	021b      	lsls	r3, r3, #8
 80069e4:	697a      	ldr	r2, [r7, #20]
 80069e6:	4313      	orrs	r3, r2
 80069e8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	4a1d      	ldr	r2, [pc, #116]	; (8006a64 <TIM_OC3_SetConfig+0xd0>)
 80069ee:	4293      	cmp	r3, r2
 80069f0:	d10d      	bne.n	8006a0e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80069f2:	697b      	ldr	r3, [r7, #20]
 80069f4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80069f8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80069fa:	683b      	ldr	r3, [r7, #0]
 80069fc:	68db      	ldr	r3, [r3, #12]
 80069fe:	021b      	lsls	r3, r3, #8
 8006a00:	697a      	ldr	r2, [r7, #20]
 8006a02:	4313      	orrs	r3, r2
 8006a04:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006a06:	697b      	ldr	r3, [r7, #20]
 8006a08:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006a0c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	4a14      	ldr	r2, [pc, #80]	; (8006a64 <TIM_OC3_SetConfig+0xd0>)
 8006a12:	4293      	cmp	r3, r2
 8006a14:	d113      	bne.n	8006a3e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006a16:	693b      	ldr	r3, [r7, #16]
 8006a18:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006a1c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006a1e:	693b      	ldr	r3, [r7, #16]
 8006a20:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006a24:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006a26:	683b      	ldr	r3, [r7, #0]
 8006a28:	695b      	ldr	r3, [r3, #20]
 8006a2a:	011b      	lsls	r3, r3, #4
 8006a2c:	693a      	ldr	r2, [r7, #16]
 8006a2e:	4313      	orrs	r3, r2
 8006a30:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006a32:	683b      	ldr	r3, [r7, #0]
 8006a34:	699b      	ldr	r3, [r3, #24]
 8006a36:	011b      	lsls	r3, r3, #4
 8006a38:	693a      	ldr	r2, [r7, #16]
 8006a3a:	4313      	orrs	r3, r2
 8006a3c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	693a      	ldr	r2, [r7, #16]
 8006a42:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	68fa      	ldr	r2, [r7, #12]
 8006a48:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006a4a:	683b      	ldr	r3, [r7, #0]
 8006a4c:	685a      	ldr	r2, [r3, #4]
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	697a      	ldr	r2, [r7, #20]
 8006a56:	621a      	str	r2, [r3, #32]
}
 8006a58:	bf00      	nop
 8006a5a:	371c      	adds	r7, #28
 8006a5c:	46bd      	mov	sp, r7
 8006a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a62:	4770      	bx	lr
 8006a64:	40010000 	.word	0x40010000

08006a68 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006a68:	b480      	push	{r7}
 8006a6a:	b087      	sub	sp, #28
 8006a6c:	af00      	add	r7, sp, #0
 8006a6e:	6078      	str	r0, [r7, #4]
 8006a70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	6a1b      	ldr	r3, [r3, #32]
 8006a76:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	6a1b      	ldr	r3, [r3, #32]
 8006a82:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	685b      	ldr	r3, [r3, #4]
 8006a88:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	69db      	ldr	r3, [r3, #28]
 8006a8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006a9e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006aa0:	683b      	ldr	r3, [r7, #0]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	021b      	lsls	r3, r3, #8
 8006aa6:	68fa      	ldr	r2, [r7, #12]
 8006aa8:	4313      	orrs	r3, r2
 8006aaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006aac:	693b      	ldr	r3, [r7, #16]
 8006aae:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006ab2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006ab4:	683b      	ldr	r3, [r7, #0]
 8006ab6:	689b      	ldr	r3, [r3, #8]
 8006ab8:	031b      	lsls	r3, r3, #12
 8006aba:	693a      	ldr	r2, [r7, #16]
 8006abc:	4313      	orrs	r3, r2
 8006abe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	4a10      	ldr	r2, [pc, #64]	; (8006b04 <TIM_OC4_SetConfig+0x9c>)
 8006ac4:	4293      	cmp	r3, r2
 8006ac6:	d109      	bne.n	8006adc <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006ac8:	697b      	ldr	r3, [r7, #20]
 8006aca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006ace:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006ad0:	683b      	ldr	r3, [r7, #0]
 8006ad2:	695b      	ldr	r3, [r3, #20]
 8006ad4:	019b      	lsls	r3, r3, #6
 8006ad6:	697a      	ldr	r2, [r7, #20]
 8006ad8:	4313      	orrs	r3, r2
 8006ada:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	697a      	ldr	r2, [r7, #20]
 8006ae0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	68fa      	ldr	r2, [r7, #12]
 8006ae6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006ae8:	683b      	ldr	r3, [r7, #0]
 8006aea:	685a      	ldr	r2, [r3, #4]
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	693a      	ldr	r2, [r7, #16]
 8006af4:	621a      	str	r2, [r3, #32]
}
 8006af6:	bf00      	nop
 8006af8:	371c      	adds	r7, #28
 8006afa:	46bd      	mov	sp, r7
 8006afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b00:	4770      	bx	lr
 8006b02:	bf00      	nop
 8006b04:	40010000 	.word	0x40010000

08006b08 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006b08:	b480      	push	{r7}
 8006b0a:	b087      	sub	sp, #28
 8006b0c:	af00      	add	r7, sp, #0
 8006b0e:	60f8      	str	r0, [r7, #12]
 8006b10:	60b9      	str	r1, [r7, #8]
 8006b12:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	6a1b      	ldr	r3, [r3, #32]
 8006b18:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	6a1b      	ldr	r3, [r3, #32]
 8006b1e:	f023 0201 	bic.w	r2, r3, #1
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	699b      	ldr	r3, [r3, #24]
 8006b2a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006b2c:	693b      	ldr	r3, [r7, #16]
 8006b2e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006b32:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	011b      	lsls	r3, r3, #4
 8006b38:	693a      	ldr	r2, [r7, #16]
 8006b3a:	4313      	orrs	r3, r2
 8006b3c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006b3e:	697b      	ldr	r3, [r7, #20]
 8006b40:	f023 030a 	bic.w	r3, r3, #10
 8006b44:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006b46:	697a      	ldr	r2, [r7, #20]
 8006b48:	68bb      	ldr	r3, [r7, #8]
 8006b4a:	4313      	orrs	r3, r2
 8006b4c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	693a      	ldr	r2, [r7, #16]
 8006b52:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	697a      	ldr	r2, [r7, #20]
 8006b58:	621a      	str	r2, [r3, #32]
}
 8006b5a:	bf00      	nop
 8006b5c:	371c      	adds	r7, #28
 8006b5e:	46bd      	mov	sp, r7
 8006b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b64:	4770      	bx	lr

08006b66 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006b66:	b480      	push	{r7}
 8006b68:	b087      	sub	sp, #28
 8006b6a:	af00      	add	r7, sp, #0
 8006b6c:	60f8      	str	r0, [r7, #12]
 8006b6e:	60b9      	str	r1, [r7, #8]
 8006b70:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	6a1b      	ldr	r3, [r3, #32]
 8006b76:	f023 0210 	bic.w	r2, r3, #16
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	699b      	ldr	r3, [r3, #24]
 8006b82:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	6a1b      	ldr	r3, [r3, #32]
 8006b88:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006b8a:	697b      	ldr	r3, [r7, #20]
 8006b8c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006b90:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	031b      	lsls	r3, r3, #12
 8006b96:	697a      	ldr	r2, [r7, #20]
 8006b98:	4313      	orrs	r3, r2
 8006b9a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006b9c:	693b      	ldr	r3, [r7, #16]
 8006b9e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006ba2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006ba4:	68bb      	ldr	r3, [r7, #8]
 8006ba6:	011b      	lsls	r3, r3, #4
 8006ba8:	693a      	ldr	r2, [r7, #16]
 8006baa:	4313      	orrs	r3, r2
 8006bac:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	697a      	ldr	r2, [r7, #20]
 8006bb2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	693a      	ldr	r2, [r7, #16]
 8006bb8:	621a      	str	r2, [r3, #32]
}
 8006bba:	bf00      	nop
 8006bbc:	371c      	adds	r7, #28
 8006bbe:	46bd      	mov	sp, r7
 8006bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc4:	4770      	bx	lr

08006bc6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006bc6:	b480      	push	{r7}
 8006bc8:	b085      	sub	sp, #20
 8006bca:	af00      	add	r7, sp, #0
 8006bcc:	6078      	str	r0, [r7, #4]
 8006bce:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	689b      	ldr	r3, [r3, #8]
 8006bd4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006bdc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006bde:	683a      	ldr	r2, [r7, #0]
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	4313      	orrs	r3, r2
 8006be4:	f043 0307 	orr.w	r3, r3, #7
 8006be8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	68fa      	ldr	r2, [r7, #12]
 8006bee:	609a      	str	r2, [r3, #8]
}
 8006bf0:	bf00      	nop
 8006bf2:	3714      	adds	r7, #20
 8006bf4:	46bd      	mov	sp, r7
 8006bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bfa:	4770      	bx	lr

08006bfc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006bfc:	b480      	push	{r7}
 8006bfe:	b087      	sub	sp, #28
 8006c00:	af00      	add	r7, sp, #0
 8006c02:	60f8      	str	r0, [r7, #12]
 8006c04:	60b9      	str	r1, [r7, #8]
 8006c06:	607a      	str	r2, [r7, #4]
 8006c08:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	689b      	ldr	r3, [r3, #8]
 8006c0e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006c10:	697b      	ldr	r3, [r7, #20]
 8006c12:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006c16:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006c18:	683b      	ldr	r3, [r7, #0]
 8006c1a:	021a      	lsls	r2, r3, #8
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	431a      	orrs	r2, r3
 8006c20:	68bb      	ldr	r3, [r7, #8]
 8006c22:	4313      	orrs	r3, r2
 8006c24:	697a      	ldr	r2, [r7, #20]
 8006c26:	4313      	orrs	r3, r2
 8006c28:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	697a      	ldr	r2, [r7, #20]
 8006c2e:	609a      	str	r2, [r3, #8]
}
 8006c30:	bf00      	nop
 8006c32:	371c      	adds	r7, #28
 8006c34:	46bd      	mov	sp, r7
 8006c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c3a:	4770      	bx	lr

08006c3c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006c3c:	b480      	push	{r7}
 8006c3e:	b087      	sub	sp, #28
 8006c40:	af00      	add	r7, sp, #0
 8006c42:	60f8      	str	r0, [r7, #12]
 8006c44:	60b9      	str	r1, [r7, #8]
 8006c46:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006c48:	68bb      	ldr	r3, [r7, #8]
 8006c4a:	f003 031f 	and.w	r3, r3, #31
 8006c4e:	2201      	movs	r2, #1
 8006c50:	fa02 f303 	lsl.w	r3, r2, r3
 8006c54:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	6a1a      	ldr	r2, [r3, #32]
 8006c5a:	697b      	ldr	r3, [r7, #20]
 8006c5c:	43db      	mvns	r3, r3
 8006c5e:	401a      	ands	r2, r3
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	6a1a      	ldr	r2, [r3, #32]
 8006c68:	68bb      	ldr	r3, [r7, #8]
 8006c6a:	f003 031f 	and.w	r3, r3, #31
 8006c6e:	6879      	ldr	r1, [r7, #4]
 8006c70:	fa01 f303 	lsl.w	r3, r1, r3
 8006c74:	431a      	orrs	r2, r3
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	621a      	str	r2, [r3, #32]
}
 8006c7a:	bf00      	nop
 8006c7c:	371c      	adds	r7, #28
 8006c7e:	46bd      	mov	sp, r7
 8006c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c84:	4770      	bx	lr
	...

08006c88 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006c88:	b480      	push	{r7}
 8006c8a:	b085      	sub	sp, #20
 8006c8c:	af00      	add	r7, sp, #0
 8006c8e:	6078      	str	r0, [r7, #4]
 8006c90:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006c98:	2b01      	cmp	r3, #1
 8006c9a:	d101      	bne.n	8006ca0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006c9c:	2302      	movs	r3, #2
 8006c9e:	e050      	b.n	8006d42 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	2201      	movs	r2, #1
 8006ca4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	2202      	movs	r2, #2
 8006cac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	685b      	ldr	r3, [r3, #4]
 8006cb6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	689b      	ldr	r3, [r3, #8]
 8006cbe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006cc6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006cc8:	683b      	ldr	r3, [r7, #0]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	68fa      	ldr	r2, [r7, #12]
 8006cce:	4313      	orrs	r3, r2
 8006cd0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	68fa      	ldr	r2, [r7, #12]
 8006cd8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	4a1c      	ldr	r2, [pc, #112]	; (8006d50 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006ce0:	4293      	cmp	r3, r2
 8006ce2:	d018      	beq.n	8006d16 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006cec:	d013      	beq.n	8006d16 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	4a18      	ldr	r2, [pc, #96]	; (8006d54 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006cf4:	4293      	cmp	r3, r2
 8006cf6:	d00e      	beq.n	8006d16 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	4a16      	ldr	r2, [pc, #88]	; (8006d58 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006cfe:	4293      	cmp	r3, r2
 8006d00:	d009      	beq.n	8006d16 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	4a15      	ldr	r2, [pc, #84]	; (8006d5c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006d08:	4293      	cmp	r3, r2
 8006d0a:	d004      	beq.n	8006d16 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	4a13      	ldr	r2, [pc, #76]	; (8006d60 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8006d12:	4293      	cmp	r3, r2
 8006d14:	d10c      	bne.n	8006d30 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006d16:	68bb      	ldr	r3, [r7, #8]
 8006d18:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006d1c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006d1e:	683b      	ldr	r3, [r7, #0]
 8006d20:	685b      	ldr	r3, [r3, #4]
 8006d22:	68ba      	ldr	r2, [r7, #8]
 8006d24:	4313      	orrs	r3, r2
 8006d26:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	68ba      	ldr	r2, [r7, #8]
 8006d2e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	2201      	movs	r2, #1
 8006d34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	2200      	movs	r2, #0
 8006d3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006d40:	2300      	movs	r3, #0
}
 8006d42:	4618      	mov	r0, r3
 8006d44:	3714      	adds	r7, #20
 8006d46:	46bd      	mov	sp, r7
 8006d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d4c:	4770      	bx	lr
 8006d4e:	bf00      	nop
 8006d50:	40010000 	.word	0x40010000
 8006d54:	40000400 	.word	0x40000400
 8006d58:	40000800 	.word	0x40000800
 8006d5c:	40000c00 	.word	0x40000c00
 8006d60:	40014000 	.word	0x40014000

08006d64 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006d64:	b480      	push	{r7}
 8006d66:	b085      	sub	sp, #20
 8006d68:	af00      	add	r7, sp, #0
 8006d6a:	6078      	str	r0, [r7, #4]
 8006d6c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006d6e:	2300      	movs	r3, #0
 8006d70:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006d78:	2b01      	cmp	r3, #1
 8006d7a:	d101      	bne.n	8006d80 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006d7c:	2302      	movs	r3, #2
 8006d7e:	e03d      	b.n	8006dfc <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	2201      	movs	r2, #1
 8006d84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006d8e:	683b      	ldr	r3, [r7, #0]
 8006d90:	68db      	ldr	r3, [r3, #12]
 8006d92:	4313      	orrs	r3, r2
 8006d94:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006d9c:	683b      	ldr	r3, [r7, #0]
 8006d9e:	689b      	ldr	r3, [r3, #8]
 8006da0:	4313      	orrs	r3, r2
 8006da2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006daa:	683b      	ldr	r3, [r7, #0]
 8006dac:	685b      	ldr	r3, [r3, #4]
 8006dae:	4313      	orrs	r3, r2
 8006db0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006db8:	683b      	ldr	r3, [r7, #0]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	4313      	orrs	r3, r2
 8006dbe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006dc6:	683b      	ldr	r3, [r7, #0]
 8006dc8:	691b      	ldr	r3, [r3, #16]
 8006dca:	4313      	orrs	r3, r2
 8006dcc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006dd4:	683b      	ldr	r3, [r7, #0]
 8006dd6:	695b      	ldr	r3, [r3, #20]
 8006dd8:	4313      	orrs	r3, r2
 8006dda:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006de2:	683b      	ldr	r3, [r7, #0]
 8006de4:	69db      	ldr	r3, [r3, #28]
 8006de6:	4313      	orrs	r3, r2
 8006de8:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	68fa      	ldr	r2, [r7, #12]
 8006df0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	2200      	movs	r2, #0
 8006df6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006dfa:	2300      	movs	r3, #0
}
 8006dfc:	4618      	mov	r0, r3
 8006dfe:	3714      	adds	r7, #20
 8006e00:	46bd      	mov	sp, r7
 8006e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e06:	4770      	bx	lr

08006e08 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006e08:	b480      	push	{r7}
 8006e0a:	b083      	sub	sp, #12
 8006e0c:	af00      	add	r7, sp, #0
 8006e0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006e10:	bf00      	nop
 8006e12:	370c      	adds	r7, #12
 8006e14:	46bd      	mov	sp, r7
 8006e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e1a:	4770      	bx	lr

08006e1c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006e1c:	b480      	push	{r7}
 8006e1e:	b083      	sub	sp, #12
 8006e20:	af00      	add	r7, sp, #0
 8006e22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006e24:	bf00      	nop
 8006e26:	370c      	adds	r7, #12
 8006e28:	46bd      	mov	sp, r7
 8006e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e2e:	4770      	bx	lr

08006e30 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006e30:	b084      	sub	sp, #16
 8006e32:	b580      	push	{r7, lr}
 8006e34:	b084      	sub	sp, #16
 8006e36:	af00      	add	r7, sp, #0
 8006e38:	6078      	str	r0, [r7, #4]
 8006e3a:	f107 001c 	add.w	r0, r7, #28
 8006e3e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006e42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e44:	2b01      	cmp	r3, #1
 8006e46:	d122      	bne.n	8006e8e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e4c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	68db      	ldr	r3, [r3, #12]
 8006e58:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8006e5c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006e60:	687a      	ldr	r2, [r7, #4]
 8006e62:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	68db      	ldr	r3, [r3, #12]
 8006e68:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006e70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e72:	2b01      	cmp	r3, #1
 8006e74:	d105      	bne.n	8006e82 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	68db      	ldr	r3, [r3, #12]
 8006e7a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006e82:	6878      	ldr	r0, [r7, #4]
 8006e84:	f001 fbee 	bl	8008664 <USB_CoreReset>
 8006e88:	4603      	mov	r3, r0
 8006e8a:	73fb      	strb	r3, [r7, #15]
 8006e8c:	e01a      	b.n	8006ec4 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	68db      	ldr	r3, [r3, #12]
 8006e92:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006e9a:	6878      	ldr	r0, [r7, #4]
 8006e9c:	f001 fbe2 	bl	8008664 <USB_CoreReset>
 8006ea0:	4603      	mov	r3, r0
 8006ea2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006ea4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d106      	bne.n	8006eb8 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006eae:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	639a      	str	r2, [r3, #56]	; 0x38
 8006eb6:	e005      	b.n	8006ec4 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ebc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006ec4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ec6:	2b01      	cmp	r3, #1
 8006ec8:	d10b      	bne.n	8006ee2 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	689b      	ldr	r3, [r3, #8]
 8006ece:	f043 0206 	orr.w	r2, r3, #6
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	689b      	ldr	r3, [r3, #8]
 8006eda:	f043 0220 	orr.w	r2, r3, #32
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006ee2:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ee4:	4618      	mov	r0, r3
 8006ee6:	3710      	adds	r7, #16
 8006ee8:	46bd      	mov	sp, r7
 8006eea:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006eee:	b004      	add	sp, #16
 8006ef0:	4770      	bx	lr
	...

08006ef4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8006ef4:	b480      	push	{r7}
 8006ef6:	b087      	sub	sp, #28
 8006ef8:	af00      	add	r7, sp, #0
 8006efa:	60f8      	str	r0, [r7, #12]
 8006efc:	60b9      	str	r1, [r7, #8]
 8006efe:	4613      	mov	r3, r2
 8006f00:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8006f02:	79fb      	ldrb	r3, [r7, #7]
 8006f04:	2b02      	cmp	r3, #2
 8006f06:	d165      	bne.n	8006fd4 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8006f08:	68bb      	ldr	r3, [r7, #8]
 8006f0a:	4a41      	ldr	r2, [pc, #260]	; (8007010 <USB_SetTurnaroundTime+0x11c>)
 8006f0c:	4293      	cmp	r3, r2
 8006f0e:	d906      	bls.n	8006f1e <USB_SetTurnaroundTime+0x2a>
 8006f10:	68bb      	ldr	r3, [r7, #8]
 8006f12:	4a40      	ldr	r2, [pc, #256]	; (8007014 <USB_SetTurnaroundTime+0x120>)
 8006f14:	4293      	cmp	r3, r2
 8006f16:	d202      	bcs.n	8006f1e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8006f18:	230f      	movs	r3, #15
 8006f1a:	617b      	str	r3, [r7, #20]
 8006f1c:	e062      	b.n	8006fe4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8006f1e:	68bb      	ldr	r3, [r7, #8]
 8006f20:	4a3c      	ldr	r2, [pc, #240]	; (8007014 <USB_SetTurnaroundTime+0x120>)
 8006f22:	4293      	cmp	r3, r2
 8006f24:	d306      	bcc.n	8006f34 <USB_SetTurnaroundTime+0x40>
 8006f26:	68bb      	ldr	r3, [r7, #8]
 8006f28:	4a3b      	ldr	r2, [pc, #236]	; (8007018 <USB_SetTurnaroundTime+0x124>)
 8006f2a:	4293      	cmp	r3, r2
 8006f2c:	d202      	bcs.n	8006f34 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8006f2e:	230e      	movs	r3, #14
 8006f30:	617b      	str	r3, [r7, #20]
 8006f32:	e057      	b.n	8006fe4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8006f34:	68bb      	ldr	r3, [r7, #8]
 8006f36:	4a38      	ldr	r2, [pc, #224]	; (8007018 <USB_SetTurnaroundTime+0x124>)
 8006f38:	4293      	cmp	r3, r2
 8006f3a:	d306      	bcc.n	8006f4a <USB_SetTurnaroundTime+0x56>
 8006f3c:	68bb      	ldr	r3, [r7, #8]
 8006f3e:	4a37      	ldr	r2, [pc, #220]	; (800701c <USB_SetTurnaroundTime+0x128>)
 8006f40:	4293      	cmp	r3, r2
 8006f42:	d202      	bcs.n	8006f4a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8006f44:	230d      	movs	r3, #13
 8006f46:	617b      	str	r3, [r7, #20]
 8006f48:	e04c      	b.n	8006fe4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8006f4a:	68bb      	ldr	r3, [r7, #8]
 8006f4c:	4a33      	ldr	r2, [pc, #204]	; (800701c <USB_SetTurnaroundTime+0x128>)
 8006f4e:	4293      	cmp	r3, r2
 8006f50:	d306      	bcc.n	8006f60 <USB_SetTurnaroundTime+0x6c>
 8006f52:	68bb      	ldr	r3, [r7, #8]
 8006f54:	4a32      	ldr	r2, [pc, #200]	; (8007020 <USB_SetTurnaroundTime+0x12c>)
 8006f56:	4293      	cmp	r3, r2
 8006f58:	d802      	bhi.n	8006f60 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8006f5a:	230c      	movs	r3, #12
 8006f5c:	617b      	str	r3, [r7, #20]
 8006f5e:	e041      	b.n	8006fe4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8006f60:	68bb      	ldr	r3, [r7, #8]
 8006f62:	4a2f      	ldr	r2, [pc, #188]	; (8007020 <USB_SetTurnaroundTime+0x12c>)
 8006f64:	4293      	cmp	r3, r2
 8006f66:	d906      	bls.n	8006f76 <USB_SetTurnaroundTime+0x82>
 8006f68:	68bb      	ldr	r3, [r7, #8]
 8006f6a:	4a2e      	ldr	r2, [pc, #184]	; (8007024 <USB_SetTurnaroundTime+0x130>)
 8006f6c:	4293      	cmp	r3, r2
 8006f6e:	d802      	bhi.n	8006f76 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8006f70:	230b      	movs	r3, #11
 8006f72:	617b      	str	r3, [r7, #20]
 8006f74:	e036      	b.n	8006fe4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8006f76:	68bb      	ldr	r3, [r7, #8]
 8006f78:	4a2a      	ldr	r2, [pc, #168]	; (8007024 <USB_SetTurnaroundTime+0x130>)
 8006f7a:	4293      	cmp	r3, r2
 8006f7c:	d906      	bls.n	8006f8c <USB_SetTurnaroundTime+0x98>
 8006f7e:	68bb      	ldr	r3, [r7, #8]
 8006f80:	4a29      	ldr	r2, [pc, #164]	; (8007028 <USB_SetTurnaroundTime+0x134>)
 8006f82:	4293      	cmp	r3, r2
 8006f84:	d802      	bhi.n	8006f8c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8006f86:	230a      	movs	r3, #10
 8006f88:	617b      	str	r3, [r7, #20]
 8006f8a:	e02b      	b.n	8006fe4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8006f8c:	68bb      	ldr	r3, [r7, #8]
 8006f8e:	4a26      	ldr	r2, [pc, #152]	; (8007028 <USB_SetTurnaroundTime+0x134>)
 8006f90:	4293      	cmp	r3, r2
 8006f92:	d906      	bls.n	8006fa2 <USB_SetTurnaroundTime+0xae>
 8006f94:	68bb      	ldr	r3, [r7, #8]
 8006f96:	4a25      	ldr	r2, [pc, #148]	; (800702c <USB_SetTurnaroundTime+0x138>)
 8006f98:	4293      	cmp	r3, r2
 8006f9a:	d202      	bcs.n	8006fa2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8006f9c:	2309      	movs	r3, #9
 8006f9e:	617b      	str	r3, [r7, #20]
 8006fa0:	e020      	b.n	8006fe4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8006fa2:	68bb      	ldr	r3, [r7, #8]
 8006fa4:	4a21      	ldr	r2, [pc, #132]	; (800702c <USB_SetTurnaroundTime+0x138>)
 8006fa6:	4293      	cmp	r3, r2
 8006fa8:	d306      	bcc.n	8006fb8 <USB_SetTurnaroundTime+0xc4>
 8006faa:	68bb      	ldr	r3, [r7, #8]
 8006fac:	4a20      	ldr	r2, [pc, #128]	; (8007030 <USB_SetTurnaroundTime+0x13c>)
 8006fae:	4293      	cmp	r3, r2
 8006fb0:	d802      	bhi.n	8006fb8 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8006fb2:	2308      	movs	r3, #8
 8006fb4:	617b      	str	r3, [r7, #20]
 8006fb6:	e015      	b.n	8006fe4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8006fb8:	68bb      	ldr	r3, [r7, #8]
 8006fba:	4a1d      	ldr	r2, [pc, #116]	; (8007030 <USB_SetTurnaroundTime+0x13c>)
 8006fbc:	4293      	cmp	r3, r2
 8006fbe:	d906      	bls.n	8006fce <USB_SetTurnaroundTime+0xda>
 8006fc0:	68bb      	ldr	r3, [r7, #8]
 8006fc2:	4a1c      	ldr	r2, [pc, #112]	; (8007034 <USB_SetTurnaroundTime+0x140>)
 8006fc4:	4293      	cmp	r3, r2
 8006fc6:	d202      	bcs.n	8006fce <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8006fc8:	2307      	movs	r3, #7
 8006fca:	617b      	str	r3, [r7, #20]
 8006fcc:	e00a      	b.n	8006fe4 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8006fce:	2306      	movs	r3, #6
 8006fd0:	617b      	str	r3, [r7, #20]
 8006fd2:	e007      	b.n	8006fe4 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8006fd4:	79fb      	ldrb	r3, [r7, #7]
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d102      	bne.n	8006fe0 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8006fda:	2309      	movs	r3, #9
 8006fdc:	617b      	str	r3, [r7, #20]
 8006fde:	e001      	b.n	8006fe4 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8006fe0:	2309      	movs	r3, #9
 8006fe2:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	68db      	ldr	r3, [r3, #12]
 8006fe8:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	68da      	ldr	r2, [r3, #12]
 8006ff4:	697b      	ldr	r3, [r7, #20]
 8006ff6:	029b      	lsls	r3, r3, #10
 8006ff8:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8006ffc:	431a      	orrs	r2, r3
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007002:	2300      	movs	r3, #0
}
 8007004:	4618      	mov	r0, r3
 8007006:	371c      	adds	r7, #28
 8007008:	46bd      	mov	sp, r7
 800700a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800700e:	4770      	bx	lr
 8007010:	00d8acbf 	.word	0x00d8acbf
 8007014:	00e4e1c0 	.word	0x00e4e1c0
 8007018:	00f42400 	.word	0x00f42400
 800701c:	01067380 	.word	0x01067380
 8007020:	011a499f 	.word	0x011a499f
 8007024:	01312cff 	.word	0x01312cff
 8007028:	014ca43f 	.word	0x014ca43f
 800702c:	016e3600 	.word	0x016e3600
 8007030:	01a6ab1f 	.word	0x01a6ab1f
 8007034:	01e84800 	.word	0x01e84800

08007038 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007038:	b480      	push	{r7}
 800703a:	b083      	sub	sp, #12
 800703c:	af00      	add	r7, sp, #0
 800703e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	689b      	ldr	r3, [r3, #8]
 8007044:	f043 0201 	orr.w	r2, r3, #1
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800704c:	2300      	movs	r3, #0
}
 800704e:	4618      	mov	r0, r3
 8007050:	370c      	adds	r7, #12
 8007052:	46bd      	mov	sp, r7
 8007054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007058:	4770      	bx	lr

0800705a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800705a:	b480      	push	{r7}
 800705c:	b083      	sub	sp, #12
 800705e:	af00      	add	r7, sp, #0
 8007060:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	689b      	ldr	r3, [r3, #8]
 8007066:	f023 0201 	bic.w	r2, r3, #1
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800706e:	2300      	movs	r3, #0
}
 8007070:	4618      	mov	r0, r3
 8007072:	370c      	adds	r7, #12
 8007074:	46bd      	mov	sp, r7
 8007076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800707a:	4770      	bx	lr

0800707c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800707c:	b580      	push	{r7, lr}
 800707e:	b084      	sub	sp, #16
 8007080:	af00      	add	r7, sp, #0
 8007082:	6078      	str	r0, [r7, #4]
 8007084:	460b      	mov	r3, r1
 8007086:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007088:	2300      	movs	r3, #0
 800708a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	68db      	ldr	r3, [r3, #12]
 8007090:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007098:	78fb      	ldrb	r3, [r7, #3]
 800709a:	2b01      	cmp	r3, #1
 800709c:	d115      	bne.n	80070ca <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	68db      	ldr	r3, [r3, #12]
 80070a2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80070aa:	2001      	movs	r0, #1
 80070ac:	f7fa fe6e 	bl	8001d8c <HAL_Delay>
      ms++;
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	3301      	adds	r3, #1
 80070b4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80070b6:	6878      	ldr	r0, [r7, #4]
 80070b8:	f001 fa45 	bl	8008546 <USB_GetMode>
 80070bc:	4603      	mov	r3, r0
 80070be:	2b01      	cmp	r3, #1
 80070c0:	d01e      	beq.n	8007100 <USB_SetCurrentMode+0x84>
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	2b31      	cmp	r3, #49	; 0x31
 80070c6:	d9f0      	bls.n	80070aa <USB_SetCurrentMode+0x2e>
 80070c8:	e01a      	b.n	8007100 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80070ca:	78fb      	ldrb	r3, [r7, #3]
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d115      	bne.n	80070fc <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	68db      	ldr	r3, [r3, #12]
 80070d4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80070dc:	2001      	movs	r0, #1
 80070de:	f7fa fe55 	bl	8001d8c <HAL_Delay>
      ms++;
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	3301      	adds	r3, #1
 80070e6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80070e8:	6878      	ldr	r0, [r7, #4]
 80070ea:	f001 fa2c 	bl	8008546 <USB_GetMode>
 80070ee:	4603      	mov	r3, r0
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d005      	beq.n	8007100 <USB_SetCurrentMode+0x84>
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	2b31      	cmp	r3, #49	; 0x31
 80070f8:	d9f0      	bls.n	80070dc <USB_SetCurrentMode+0x60>
 80070fa:	e001      	b.n	8007100 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80070fc:	2301      	movs	r3, #1
 80070fe:	e005      	b.n	800710c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	2b32      	cmp	r3, #50	; 0x32
 8007104:	d101      	bne.n	800710a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007106:	2301      	movs	r3, #1
 8007108:	e000      	b.n	800710c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800710a:	2300      	movs	r3, #0
}
 800710c:	4618      	mov	r0, r3
 800710e:	3710      	adds	r7, #16
 8007110:	46bd      	mov	sp, r7
 8007112:	bd80      	pop	{r7, pc}

08007114 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007114:	b084      	sub	sp, #16
 8007116:	b580      	push	{r7, lr}
 8007118:	b086      	sub	sp, #24
 800711a:	af00      	add	r7, sp, #0
 800711c:	6078      	str	r0, [r7, #4]
 800711e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8007122:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007126:	2300      	movs	r3, #0
 8007128:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800712e:	2300      	movs	r3, #0
 8007130:	613b      	str	r3, [r7, #16]
 8007132:	e009      	b.n	8007148 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007134:	687a      	ldr	r2, [r7, #4]
 8007136:	693b      	ldr	r3, [r7, #16]
 8007138:	3340      	adds	r3, #64	; 0x40
 800713a:	009b      	lsls	r3, r3, #2
 800713c:	4413      	add	r3, r2
 800713e:	2200      	movs	r2, #0
 8007140:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8007142:	693b      	ldr	r3, [r7, #16]
 8007144:	3301      	adds	r3, #1
 8007146:	613b      	str	r3, [r7, #16]
 8007148:	693b      	ldr	r3, [r7, #16]
 800714a:	2b0e      	cmp	r3, #14
 800714c:	d9f2      	bls.n	8007134 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800714e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007150:	2b00      	cmp	r3, #0
 8007152:	d11c      	bne.n	800718e <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800715a:	685b      	ldr	r3, [r3, #4]
 800715c:	68fa      	ldr	r2, [r7, #12]
 800715e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007162:	f043 0302 	orr.w	r3, r3, #2
 8007166:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800716c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007178:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007184:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	639a      	str	r2, [r3, #56]	; 0x38
 800718c:	e00b      	b.n	80071a6 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007192:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800719e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80071ac:	461a      	mov	r2, r3
 80071ae:	2300      	movs	r3, #0
 80071b0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80071b8:	4619      	mov	r1, r3
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80071c0:	461a      	mov	r2, r3
 80071c2:	680b      	ldr	r3, [r1, #0]
 80071c4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80071c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071c8:	2b01      	cmp	r3, #1
 80071ca:	d10c      	bne.n	80071e6 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80071cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d104      	bne.n	80071dc <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80071d2:	2100      	movs	r1, #0
 80071d4:	6878      	ldr	r0, [r7, #4]
 80071d6:	f000 f965 	bl	80074a4 <USB_SetDevSpeed>
 80071da:	e008      	b.n	80071ee <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80071dc:	2101      	movs	r1, #1
 80071de:	6878      	ldr	r0, [r7, #4]
 80071e0:	f000 f960 	bl	80074a4 <USB_SetDevSpeed>
 80071e4:	e003      	b.n	80071ee <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80071e6:	2103      	movs	r1, #3
 80071e8:	6878      	ldr	r0, [r7, #4]
 80071ea:	f000 f95b 	bl	80074a4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80071ee:	2110      	movs	r1, #16
 80071f0:	6878      	ldr	r0, [r7, #4]
 80071f2:	f000 f8f3 	bl	80073dc <USB_FlushTxFifo>
 80071f6:	4603      	mov	r3, r0
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d001      	beq.n	8007200 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80071fc:	2301      	movs	r3, #1
 80071fe:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007200:	6878      	ldr	r0, [r7, #4]
 8007202:	f000 f91f 	bl	8007444 <USB_FlushRxFifo>
 8007206:	4603      	mov	r3, r0
 8007208:	2b00      	cmp	r3, #0
 800720a:	d001      	beq.n	8007210 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800720c:	2301      	movs	r3, #1
 800720e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007216:	461a      	mov	r2, r3
 8007218:	2300      	movs	r3, #0
 800721a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007222:	461a      	mov	r2, r3
 8007224:	2300      	movs	r3, #0
 8007226:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800722e:	461a      	mov	r2, r3
 8007230:	2300      	movs	r3, #0
 8007232:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007234:	2300      	movs	r3, #0
 8007236:	613b      	str	r3, [r7, #16]
 8007238:	e043      	b.n	80072c2 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800723a:	693b      	ldr	r3, [r7, #16]
 800723c:	015a      	lsls	r2, r3, #5
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	4413      	add	r3, r2
 8007242:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800724c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007250:	d118      	bne.n	8007284 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8007252:	693b      	ldr	r3, [r7, #16]
 8007254:	2b00      	cmp	r3, #0
 8007256:	d10a      	bne.n	800726e <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007258:	693b      	ldr	r3, [r7, #16]
 800725a:	015a      	lsls	r2, r3, #5
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	4413      	add	r3, r2
 8007260:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007264:	461a      	mov	r2, r3
 8007266:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800726a:	6013      	str	r3, [r2, #0]
 800726c:	e013      	b.n	8007296 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800726e:	693b      	ldr	r3, [r7, #16]
 8007270:	015a      	lsls	r2, r3, #5
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	4413      	add	r3, r2
 8007276:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800727a:	461a      	mov	r2, r3
 800727c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007280:	6013      	str	r3, [r2, #0]
 8007282:	e008      	b.n	8007296 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007284:	693b      	ldr	r3, [r7, #16]
 8007286:	015a      	lsls	r2, r3, #5
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	4413      	add	r3, r2
 800728c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007290:	461a      	mov	r2, r3
 8007292:	2300      	movs	r3, #0
 8007294:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007296:	693b      	ldr	r3, [r7, #16]
 8007298:	015a      	lsls	r2, r3, #5
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	4413      	add	r3, r2
 800729e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072a2:	461a      	mov	r2, r3
 80072a4:	2300      	movs	r3, #0
 80072a6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80072a8:	693b      	ldr	r3, [r7, #16]
 80072aa:	015a      	lsls	r2, r3, #5
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	4413      	add	r3, r2
 80072b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072b4:	461a      	mov	r2, r3
 80072b6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80072ba:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80072bc:	693b      	ldr	r3, [r7, #16]
 80072be:	3301      	adds	r3, #1
 80072c0:	613b      	str	r3, [r7, #16]
 80072c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072c4:	693a      	ldr	r2, [r7, #16]
 80072c6:	429a      	cmp	r2, r3
 80072c8:	d3b7      	bcc.n	800723a <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80072ca:	2300      	movs	r3, #0
 80072cc:	613b      	str	r3, [r7, #16]
 80072ce:	e043      	b.n	8007358 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80072d0:	693b      	ldr	r3, [r7, #16]
 80072d2:	015a      	lsls	r2, r3, #5
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	4413      	add	r3, r2
 80072d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80072e2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80072e6:	d118      	bne.n	800731a <USB_DevInit+0x206>
    {
      if (i == 0U)
 80072e8:	693b      	ldr	r3, [r7, #16]
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d10a      	bne.n	8007304 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80072ee:	693b      	ldr	r3, [r7, #16]
 80072f0:	015a      	lsls	r2, r3, #5
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	4413      	add	r3, r2
 80072f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072fa:	461a      	mov	r2, r3
 80072fc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007300:	6013      	str	r3, [r2, #0]
 8007302:	e013      	b.n	800732c <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007304:	693b      	ldr	r3, [r7, #16]
 8007306:	015a      	lsls	r2, r3, #5
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	4413      	add	r3, r2
 800730c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007310:	461a      	mov	r2, r3
 8007312:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007316:	6013      	str	r3, [r2, #0]
 8007318:	e008      	b.n	800732c <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800731a:	693b      	ldr	r3, [r7, #16]
 800731c:	015a      	lsls	r2, r3, #5
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	4413      	add	r3, r2
 8007322:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007326:	461a      	mov	r2, r3
 8007328:	2300      	movs	r3, #0
 800732a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800732c:	693b      	ldr	r3, [r7, #16]
 800732e:	015a      	lsls	r2, r3, #5
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	4413      	add	r3, r2
 8007334:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007338:	461a      	mov	r2, r3
 800733a:	2300      	movs	r3, #0
 800733c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800733e:	693b      	ldr	r3, [r7, #16]
 8007340:	015a      	lsls	r2, r3, #5
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	4413      	add	r3, r2
 8007346:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800734a:	461a      	mov	r2, r3
 800734c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007350:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007352:	693b      	ldr	r3, [r7, #16]
 8007354:	3301      	adds	r3, #1
 8007356:	613b      	str	r3, [r7, #16]
 8007358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800735a:	693a      	ldr	r2, [r7, #16]
 800735c:	429a      	cmp	r2, r3
 800735e:	d3b7      	bcc.n	80072d0 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007366:	691b      	ldr	r3, [r3, #16]
 8007368:	68fa      	ldr	r2, [r7, #12]
 800736a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800736e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007372:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	2200      	movs	r2, #0
 8007378:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8007380:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007382:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007384:	2b00      	cmp	r3, #0
 8007386:	d105      	bne.n	8007394 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	699b      	ldr	r3, [r3, #24]
 800738c:	f043 0210 	orr.w	r2, r3, #16
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	699a      	ldr	r2, [r3, #24]
 8007398:	4b0f      	ldr	r3, [pc, #60]	; (80073d8 <USB_DevInit+0x2c4>)
 800739a:	4313      	orrs	r3, r2
 800739c:	687a      	ldr	r2, [r7, #4]
 800739e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80073a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d005      	beq.n	80073b2 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	699b      	ldr	r3, [r3, #24]
 80073aa:	f043 0208 	orr.w	r2, r3, #8
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80073b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80073b4:	2b01      	cmp	r3, #1
 80073b6:	d107      	bne.n	80073c8 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	699b      	ldr	r3, [r3, #24]
 80073bc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80073c0:	f043 0304 	orr.w	r3, r3, #4
 80073c4:	687a      	ldr	r2, [r7, #4]
 80073c6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80073c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80073ca:	4618      	mov	r0, r3
 80073cc:	3718      	adds	r7, #24
 80073ce:	46bd      	mov	sp, r7
 80073d0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80073d4:	b004      	add	sp, #16
 80073d6:	4770      	bx	lr
 80073d8:	803c3800 	.word	0x803c3800

080073dc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80073dc:	b480      	push	{r7}
 80073de:	b085      	sub	sp, #20
 80073e0:	af00      	add	r7, sp, #0
 80073e2:	6078      	str	r0, [r7, #4]
 80073e4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80073e6:	2300      	movs	r3, #0
 80073e8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	3301      	adds	r3, #1
 80073ee:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	4a13      	ldr	r2, [pc, #76]	; (8007440 <USB_FlushTxFifo+0x64>)
 80073f4:	4293      	cmp	r3, r2
 80073f6:	d901      	bls.n	80073fc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80073f8:	2303      	movs	r3, #3
 80073fa:	e01b      	b.n	8007434 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	691b      	ldr	r3, [r3, #16]
 8007400:	2b00      	cmp	r3, #0
 8007402:	daf2      	bge.n	80073ea <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007404:	2300      	movs	r3, #0
 8007406:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007408:	683b      	ldr	r3, [r7, #0]
 800740a:	019b      	lsls	r3, r3, #6
 800740c:	f043 0220 	orr.w	r2, r3, #32
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	3301      	adds	r3, #1
 8007418:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	4a08      	ldr	r2, [pc, #32]	; (8007440 <USB_FlushTxFifo+0x64>)
 800741e:	4293      	cmp	r3, r2
 8007420:	d901      	bls.n	8007426 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007422:	2303      	movs	r3, #3
 8007424:	e006      	b.n	8007434 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	691b      	ldr	r3, [r3, #16]
 800742a:	f003 0320 	and.w	r3, r3, #32
 800742e:	2b20      	cmp	r3, #32
 8007430:	d0f0      	beq.n	8007414 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007432:	2300      	movs	r3, #0
}
 8007434:	4618      	mov	r0, r3
 8007436:	3714      	adds	r7, #20
 8007438:	46bd      	mov	sp, r7
 800743a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800743e:	4770      	bx	lr
 8007440:	00030d40 	.word	0x00030d40

08007444 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007444:	b480      	push	{r7}
 8007446:	b085      	sub	sp, #20
 8007448:	af00      	add	r7, sp, #0
 800744a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800744c:	2300      	movs	r3, #0
 800744e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	3301      	adds	r3, #1
 8007454:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	4a11      	ldr	r2, [pc, #68]	; (80074a0 <USB_FlushRxFifo+0x5c>)
 800745a:	4293      	cmp	r3, r2
 800745c:	d901      	bls.n	8007462 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800745e:	2303      	movs	r3, #3
 8007460:	e018      	b.n	8007494 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	691b      	ldr	r3, [r3, #16]
 8007466:	2b00      	cmp	r3, #0
 8007468:	daf2      	bge.n	8007450 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800746a:	2300      	movs	r3, #0
 800746c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	2210      	movs	r2, #16
 8007472:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	3301      	adds	r3, #1
 8007478:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	4a08      	ldr	r2, [pc, #32]	; (80074a0 <USB_FlushRxFifo+0x5c>)
 800747e:	4293      	cmp	r3, r2
 8007480:	d901      	bls.n	8007486 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8007482:	2303      	movs	r3, #3
 8007484:	e006      	b.n	8007494 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	691b      	ldr	r3, [r3, #16]
 800748a:	f003 0310 	and.w	r3, r3, #16
 800748e:	2b10      	cmp	r3, #16
 8007490:	d0f0      	beq.n	8007474 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007492:	2300      	movs	r3, #0
}
 8007494:	4618      	mov	r0, r3
 8007496:	3714      	adds	r7, #20
 8007498:	46bd      	mov	sp, r7
 800749a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800749e:	4770      	bx	lr
 80074a0:	00030d40 	.word	0x00030d40

080074a4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80074a4:	b480      	push	{r7}
 80074a6:	b085      	sub	sp, #20
 80074a8:	af00      	add	r7, sp, #0
 80074aa:	6078      	str	r0, [r7, #4]
 80074ac:	460b      	mov	r3, r1
 80074ae:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80074ba:	681a      	ldr	r2, [r3, #0]
 80074bc:	78fb      	ldrb	r3, [r7, #3]
 80074be:	68f9      	ldr	r1, [r7, #12]
 80074c0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80074c4:	4313      	orrs	r3, r2
 80074c6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80074c8:	2300      	movs	r3, #0
}
 80074ca:	4618      	mov	r0, r3
 80074cc:	3714      	adds	r7, #20
 80074ce:	46bd      	mov	sp, r7
 80074d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d4:	4770      	bx	lr

080074d6 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80074d6:	b480      	push	{r7}
 80074d8:	b087      	sub	sp, #28
 80074da:	af00      	add	r7, sp, #0
 80074dc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80074e2:	693b      	ldr	r3, [r7, #16]
 80074e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80074e8:	689b      	ldr	r3, [r3, #8]
 80074ea:	f003 0306 	and.w	r3, r3, #6
 80074ee:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d102      	bne.n	80074fc <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80074f6:	2300      	movs	r3, #0
 80074f8:	75fb      	strb	r3, [r7, #23]
 80074fa:	e00a      	b.n	8007512 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	2b02      	cmp	r3, #2
 8007500:	d002      	beq.n	8007508 <USB_GetDevSpeed+0x32>
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	2b06      	cmp	r3, #6
 8007506:	d102      	bne.n	800750e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8007508:	2302      	movs	r3, #2
 800750a:	75fb      	strb	r3, [r7, #23]
 800750c:	e001      	b.n	8007512 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800750e:	230f      	movs	r3, #15
 8007510:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8007512:	7dfb      	ldrb	r3, [r7, #23]
}
 8007514:	4618      	mov	r0, r3
 8007516:	371c      	adds	r7, #28
 8007518:	46bd      	mov	sp, r7
 800751a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800751e:	4770      	bx	lr

08007520 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007520:	b480      	push	{r7}
 8007522:	b085      	sub	sp, #20
 8007524:	af00      	add	r7, sp, #0
 8007526:	6078      	str	r0, [r7, #4]
 8007528:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800752e:	683b      	ldr	r3, [r7, #0]
 8007530:	781b      	ldrb	r3, [r3, #0]
 8007532:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007534:	683b      	ldr	r3, [r7, #0]
 8007536:	785b      	ldrb	r3, [r3, #1]
 8007538:	2b01      	cmp	r3, #1
 800753a:	d13a      	bne.n	80075b2 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007542:	69da      	ldr	r2, [r3, #28]
 8007544:	683b      	ldr	r3, [r7, #0]
 8007546:	781b      	ldrb	r3, [r3, #0]
 8007548:	f003 030f 	and.w	r3, r3, #15
 800754c:	2101      	movs	r1, #1
 800754e:	fa01 f303 	lsl.w	r3, r1, r3
 8007552:	b29b      	uxth	r3, r3
 8007554:	68f9      	ldr	r1, [r7, #12]
 8007556:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800755a:	4313      	orrs	r3, r2
 800755c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800755e:	68bb      	ldr	r3, [r7, #8]
 8007560:	015a      	lsls	r2, r3, #5
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	4413      	add	r3, r2
 8007566:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007570:	2b00      	cmp	r3, #0
 8007572:	d155      	bne.n	8007620 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007574:	68bb      	ldr	r3, [r7, #8]
 8007576:	015a      	lsls	r2, r3, #5
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	4413      	add	r3, r2
 800757c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007580:	681a      	ldr	r2, [r3, #0]
 8007582:	683b      	ldr	r3, [r7, #0]
 8007584:	68db      	ldr	r3, [r3, #12]
 8007586:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800758a:	683b      	ldr	r3, [r7, #0]
 800758c:	791b      	ldrb	r3, [r3, #4]
 800758e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007590:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007592:	68bb      	ldr	r3, [r7, #8]
 8007594:	059b      	lsls	r3, r3, #22
 8007596:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007598:	4313      	orrs	r3, r2
 800759a:	68ba      	ldr	r2, [r7, #8]
 800759c:	0151      	lsls	r1, r2, #5
 800759e:	68fa      	ldr	r2, [r7, #12]
 80075a0:	440a      	add	r2, r1
 80075a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80075a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80075aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80075ae:	6013      	str	r3, [r2, #0]
 80075b0:	e036      	b.n	8007620 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80075b8:	69da      	ldr	r2, [r3, #28]
 80075ba:	683b      	ldr	r3, [r7, #0]
 80075bc:	781b      	ldrb	r3, [r3, #0]
 80075be:	f003 030f 	and.w	r3, r3, #15
 80075c2:	2101      	movs	r1, #1
 80075c4:	fa01 f303 	lsl.w	r3, r1, r3
 80075c8:	041b      	lsls	r3, r3, #16
 80075ca:	68f9      	ldr	r1, [r7, #12]
 80075cc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80075d0:	4313      	orrs	r3, r2
 80075d2:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80075d4:	68bb      	ldr	r3, [r7, #8]
 80075d6:	015a      	lsls	r2, r3, #5
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	4413      	add	r3, r2
 80075dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d11a      	bne.n	8007620 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80075ea:	68bb      	ldr	r3, [r7, #8]
 80075ec:	015a      	lsls	r2, r3, #5
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	4413      	add	r3, r2
 80075f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075f6:	681a      	ldr	r2, [r3, #0]
 80075f8:	683b      	ldr	r3, [r7, #0]
 80075fa:	68db      	ldr	r3, [r3, #12]
 80075fc:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8007600:	683b      	ldr	r3, [r7, #0]
 8007602:	791b      	ldrb	r3, [r3, #4]
 8007604:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007606:	430b      	orrs	r3, r1
 8007608:	4313      	orrs	r3, r2
 800760a:	68ba      	ldr	r2, [r7, #8]
 800760c:	0151      	lsls	r1, r2, #5
 800760e:	68fa      	ldr	r2, [r7, #12]
 8007610:	440a      	add	r2, r1
 8007612:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007616:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800761a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800761e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8007620:	2300      	movs	r3, #0
}
 8007622:	4618      	mov	r0, r3
 8007624:	3714      	adds	r7, #20
 8007626:	46bd      	mov	sp, r7
 8007628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800762c:	4770      	bx	lr
	...

08007630 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007630:	b480      	push	{r7}
 8007632:	b085      	sub	sp, #20
 8007634:	af00      	add	r7, sp, #0
 8007636:	6078      	str	r0, [r7, #4]
 8007638:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800763e:	683b      	ldr	r3, [r7, #0]
 8007640:	781b      	ldrb	r3, [r3, #0]
 8007642:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8007644:	683b      	ldr	r3, [r7, #0]
 8007646:	785b      	ldrb	r3, [r3, #1]
 8007648:	2b01      	cmp	r3, #1
 800764a:	d161      	bne.n	8007710 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800764c:	68bb      	ldr	r3, [r7, #8]
 800764e:	015a      	lsls	r2, r3, #5
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	4413      	add	r3, r2
 8007654:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800765e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007662:	d11f      	bne.n	80076a4 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8007664:	68bb      	ldr	r3, [r7, #8]
 8007666:	015a      	lsls	r2, r3, #5
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	4413      	add	r3, r2
 800766c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	68ba      	ldr	r2, [r7, #8]
 8007674:	0151      	lsls	r1, r2, #5
 8007676:	68fa      	ldr	r2, [r7, #12]
 8007678:	440a      	add	r2, r1
 800767a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800767e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007682:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8007684:	68bb      	ldr	r3, [r7, #8]
 8007686:	015a      	lsls	r2, r3, #5
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	4413      	add	r3, r2
 800768c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	68ba      	ldr	r2, [r7, #8]
 8007694:	0151      	lsls	r1, r2, #5
 8007696:	68fa      	ldr	r2, [r7, #12]
 8007698:	440a      	add	r2, r1
 800769a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800769e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80076a2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80076aa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80076ac:	683b      	ldr	r3, [r7, #0]
 80076ae:	781b      	ldrb	r3, [r3, #0]
 80076b0:	f003 030f 	and.w	r3, r3, #15
 80076b4:	2101      	movs	r1, #1
 80076b6:	fa01 f303 	lsl.w	r3, r1, r3
 80076ba:	b29b      	uxth	r3, r3
 80076bc:	43db      	mvns	r3, r3
 80076be:	68f9      	ldr	r1, [r7, #12]
 80076c0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80076c4:	4013      	ands	r3, r2
 80076c6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80076ce:	69da      	ldr	r2, [r3, #28]
 80076d0:	683b      	ldr	r3, [r7, #0]
 80076d2:	781b      	ldrb	r3, [r3, #0]
 80076d4:	f003 030f 	and.w	r3, r3, #15
 80076d8:	2101      	movs	r1, #1
 80076da:	fa01 f303 	lsl.w	r3, r1, r3
 80076de:	b29b      	uxth	r3, r3
 80076e0:	43db      	mvns	r3, r3
 80076e2:	68f9      	ldr	r1, [r7, #12]
 80076e4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80076e8:	4013      	ands	r3, r2
 80076ea:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80076ec:	68bb      	ldr	r3, [r7, #8]
 80076ee:	015a      	lsls	r2, r3, #5
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	4413      	add	r3, r2
 80076f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80076f8:	681a      	ldr	r2, [r3, #0]
 80076fa:	68bb      	ldr	r3, [r7, #8]
 80076fc:	0159      	lsls	r1, r3, #5
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	440b      	add	r3, r1
 8007702:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007706:	4619      	mov	r1, r3
 8007708:	4b35      	ldr	r3, [pc, #212]	; (80077e0 <USB_DeactivateEndpoint+0x1b0>)
 800770a:	4013      	ands	r3, r2
 800770c:	600b      	str	r3, [r1, #0]
 800770e:	e060      	b.n	80077d2 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007710:	68bb      	ldr	r3, [r7, #8]
 8007712:	015a      	lsls	r2, r3, #5
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	4413      	add	r3, r2
 8007718:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007722:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007726:	d11f      	bne.n	8007768 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8007728:	68bb      	ldr	r3, [r7, #8]
 800772a:	015a      	lsls	r2, r3, #5
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	4413      	add	r3, r2
 8007730:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	68ba      	ldr	r2, [r7, #8]
 8007738:	0151      	lsls	r1, r2, #5
 800773a:	68fa      	ldr	r2, [r7, #12]
 800773c:	440a      	add	r2, r1
 800773e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007742:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007746:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8007748:	68bb      	ldr	r3, [r7, #8]
 800774a:	015a      	lsls	r2, r3, #5
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	4413      	add	r3, r2
 8007750:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	68ba      	ldr	r2, [r7, #8]
 8007758:	0151      	lsls	r1, r2, #5
 800775a:	68fa      	ldr	r2, [r7, #12]
 800775c:	440a      	add	r2, r1
 800775e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007762:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007766:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800776e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007770:	683b      	ldr	r3, [r7, #0]
 8007772:	781b      	ldrb	r3, [r3, #0]
 8007774:	f003 030f 	and.w	r3, r3, #15
 8007778:	2101      	movs	r1, #1
 800777a:	fa01 f303 	lsl.w	r3, r1, r3
 800777e:	041b      	lsls	r3, r3, #16
 8007780:	43db      	mvns	r3, r3
 8007782:	68f9      	ldr	r1, [r7, #12]
 8007784:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007788:	4013      	ands	r3, r2
 800778a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007792:	69da      	ldr	r2, [r3, #28]
 8007794:	683b      	ldr	r3, [r7, #0]
 8007796:	781b      	ldrb	r3, [r3, #0]
 8007798:	f003 030f 	and.w	r3, r3, #15
 800779c:	2101      	movs	r1, #1
 800779e:	fa01 f303 	lsl.w	r3, r1, r3
 80077a2:	041b      	lsls	r3, r3, #16
 80077a4:	43db      	mvns	r3, r3
 80077a6:	68f9      	ldr	r1, [r7, #12]
 80077a8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80077ac:	4013      	ands	r3, r2
 80077ae:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80077b0:	68bb      	ldr	r3, [r7, #8]
 80077b2:	015a      	lsls	r2, r3, #5
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	4413      	add	r3, r2
 80077b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80077bc:	681a      	ldr	r2, [r3, #0]
 80077be:	68bb      	ldr	r3, [r7, #8]
 80077c0:	0159      	lsls	r1, r3, #5
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	440b      	add	r3, r1
 80077c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80077ca:	4619      	mov	r1, r3
 80077cc:	4b05      	ldr	r3, [pc, #20]	; (80077e4 <USB_DeactivateEndpoint+0x1b4>)
 80077ce:	4013      	ands	r3, r2
 80077d0:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80077d2:	2300      	movs	r3, #0
}
 80077d4:	4618      	mov	r0, r3
 80077d6:	3714      	adds	r7, #20
 80077d8:	46bd      	mov	sp, r7
 80077da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077de:	4770      	bx	lr
 80077e0:	ec337800 	.word	0xec337800
 80077e4:	eff37800 	.word	0xeff37800

080077e8 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80077e8:	b580      	push	{r7, lr}
 80077ea:	b08a      	sub	sp, #40	; 0x28
 80077ec:	af02      	add	r7, sp, #8
 80077ee:	60f8      	str	r0, [r7, #12]
 80077f0:	60b9      	str	r1, [r7, #8]
 80077f2:	4613      	mov	r3, r2
 80077f4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80077fa:	68bb      	ldr	r3, [r7, #8]
 80077fc:	781b      	ldrb	r3, [r3, #0]
 80077fe:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007800:	68bb      	ldr	r3, [r7, #8]
 8007802:	785b      	ldrb	r3, [r3, #1]
 8007804:	2b01      	cmp	r3, #1
 8007806:	f040 815c 	bne.w	8007ac2 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800780a:	68bb      	ldr	r3, [r7, #8]
 800780c:	699b      	ldr	r3, [r3, #24]
 800780e:	2b00      	cmp	r3, #0
 8007810:	d132      	bne.n	8007878 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007812:	69bb      	ldr	r3, [r7, #24]
 8007814:	015a      	lsls	r2, r3, #5
 8007816:	69fb      	ldr	r3, [r7, #28]
 8007818:	4413      	add	r3, r2
 800781a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800781e:	691b      	ldr	r3, [r3, #16]
 8007820:	69ba      	ldr	r2, [r7, #24]
 8007822:	0151      	lsls	r1, r2, #5
 8007824:	69fa      	ldr	r2, [r7, #28]
 8007826:	440a      	add	r2, r1
 8007828:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800782c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007830:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007834:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007836:	69bb      	ldr	r3, [r7, #24]
 8007838:	015a      	lsls	r2, r3, #5
 800783a:	69fb      	ldr	r3, [r7, #28]
 800783c:	4413      	add	r3, r2
 800783e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007842:	691b      	ldr	r3, [r3, #16]
 8007844:	69ba      	ldr	r2, [r7, #24]
 8007846:	0151      	lsls	r1, r2, #5
 8007848:	69fa      	ldr	r2, [r7, #28]
 800784a:	440a      	add	r2, r1
 800784c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007850:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007854:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007856:	69bb      	ldr	r3, [r7, #24]
 8007858:	015a      	lsls	r2, r3, #5
 800785a:	69fb      	ldr	r3, [r7, #28]
 800785c:	4413      	add	r3, r2
 800785e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007862:	691b      	ldr	r3, [r3, #16]
 8007864:	69ba      	ldr	r2, [r7, #24]
 8007866:	0151      	lsls	r1, r2, #5
 8007868:	69fa      	ldr	r2, [r7, #28]
 800786a:	440a      	add	r2, r1
 800786c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007870:	0cdb      	lsrs	r3, r3, #19
 8007872:	04db      	lsls	r3, r3, #19
 8007874:	6113      	str	r3, [r2, #16]
 8007876:	e074      	b.n	8007962 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007878:	69bb      	ldr	r3, [r7, #24]
 800787a:	015a      	lsls	r2, r3, #5
 800787c:	69fb      	ldr	r3, [r7, #28]
 800787e:	4413      	add	r3, r2
 8007880:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007884:	691b      	ldr	r3, [r3, #16]
 8007886:	69ba      	ldr	r2, [r7, #24]
 8007888:	0151      	lsls	r1, r2, #5
 800788a:	69fa      	ldr	r2, [r7, #28]
 800788c:	440a      	add	r2, r1
 800788e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007892:	0cdb      	lsrs	r3, r3, #19
 8007894:	04db      	lsls	r3, r3, #19
 8007896:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007898:	69bb      	ldr	r3, [r7, #24]
 800789a:	015a      	lsls	r2, r3, #5
 800789c:	69fb      	ldr	r3, [r7, #28]
 800789e:	4413      	add	r3, r2
 80078a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078a4:	691b      	ldr	r3, [r3, #16]
 80078a6:	69ba      	ldr	r2, [r7, #24]
 80078a8:	0151      	lsls	r1, r2, #5
 80078aa:	69fa      	ldr	r2, [r7, #28]
 80078ac:	440a      	add	r2, r1
 80078ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80078b2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80078b6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80078ba:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80078bc:	69bb      	ldr	r3, [r7, #24]
 80078be:	015a      	lsls	r2, r3, #5
 80078c0:	69fb      	ldr	r3, [r7, #28]
 80078c2:	4413      	add	r3, r2
 80078c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078c8:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80078ca:	68bb      	ldr	r3, [r7, #8]
 80078cc:	6999      	ldr	r1, [r3, #24]
 80078ce:	68bb      	ldr	r3, [r7, #8]
 80078d0:	68db      	ldr	r3, [r3, #12]
 80078d2:	440b      	add	r3, r1
 80078d4:	1e59      	subs	r1, r3, #1
 80078d6:	68bb      	ldr	r3, [r7, #8]
 80078d8:	68db      	ldr	r3, [r3, #12]
 80078da:	fbb1 f3f3 	udiv	r3, r1, r3
 80078de:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80078e0:	4b9d      	ldr	r3, [pc, #628]	; (8007b58 <USB_EPStartXfer+0x370>)
 80078e2:	400b      	ands	r3, r1
 80078e4:	69b9      	ldr	r1, [r7, #24]
 80078e6:	0148      	lsls	r0, r1, #5
 80078e8:	69f9      	ldr	r1, [r7, #28]
 80078ea:	4401      	add	r1, r0
 80078ec:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80078f0:	4313      	orrs	r3, r2
 80078f2:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80078f4:	69bb      	ldr	r3, [r7, #24]
 80078f6:	015a      	lsls	r2, r3, #5
 80078f8:	69fb      	ldr	r3, [r7, #28]
 80078fa:	4413      	add	r3, r2
 80078fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007900:	691a      	ldr	r2, [r3, #16]
 8007902:	68bb      	ldr	r3, [r7, #8]
 8007904:	699b      	ldr	r3, [r3, #24]
 8007906:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800790a:	69b9      	ldr	r1, [r7, #24]
 800790c:	0148      	lsls	r0, r1, #5
 800790e:	69f9      	ldr	r1, [r7, #28]
 8007910:	4401      	add	r1, r0
 8007912:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007916:	4313      	orrs	r3, r2
 8007918:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800791a:	68bb      	ldr	r3, [r7, #8]
 800791c:	791b      	ldrb	r3, [r3, #4]
 800791e:	2b01      	cmp	r3, #1
 8007920:	d11f      	bne.n	8007962 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8007922:	69bb      	ldr	r3, [r7, #24]
 8007924:	015a      	lsls	r2, r3, #5
 8007926:	69fb      	ldr	r3, [r7, #28]
 8007928:	4413      	add	r3, r2
 800792a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800792e:	691b      	ldr	r3, [r3, #16]
 8007930:	69ba      	ldr	r2, [r7, #24]
 8007932:	0151      	lsls	r1, r2, #5
 8007934:	69fa      	ldr	r2, [r7, #28]
 8007936:	440a      	add	r2, r1
 8007938:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800793c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8007940:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8007942:	69bb      	ldr	r3, [r7, #24]
 8007944:	015a      	lsls	r2, r3, #5
 8007946:	69fb      	ldr	r3, [r7, #28]
 8007948:	4413      	add	r3, r2
 800794a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800794e:	691b      	ldr	r3, [r3, #16]
 8007950:	69ba      	ldr	r2, [r7, #24]
 8007952:	0151      	lsls	r1, r2, #5
 8007954:	69fa      	ldr	r2, [r7, #28]
 8007956:	440a      	add	r2, r1
 8007958:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800795c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007960:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8007962:	79fb      	ldrb	r3, [r7, #7]
 8007964:	2b01      	cmp	r3, #1
 8007966:	d14b      	bne.n	8007a00 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007968:	68bb      	ldr	r3, [r7, #8]
 800796a:	695b      	ldr	r3, [r3, #20]
 800796c:	2b00      	cmp	r3, #0
 800796e:	d009      	beq.n	8007984 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007970:	69bb      	ldr	r3, [r7, #24]
 8007972:	015a      	lsls	r2, r3, #5
 8007974:	69fb      	ldr	r3, [r7, #28]
 8007976:	4413      	add	r3, r2
 8007978:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800797c:	461a      	mov	r2, r3
 800797e:	68bb      	ldr	r3, [r7, #8]
 8007980:	695b      	ldr	r3, [r3, #20]
 8007982:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8007984:	68bb      	ldr	r3, [r7, #8]
 8007986:	791b      	ldrb	r3, [r3, #4]
 8007988:	2b01      	cmp	r3, #1
 800798a:	d128      	bne.n	80079de <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800798c:	69fb      	ldr	r3, [r7, #28]
 800798e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007992:	689b      	ldr	r3, [r3, #8]
 8007994:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007998:	2b00      	cmp	r3, #0
 800799a:	d110      	bne.n	80079be <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800799c:	69bb      	ldr	r3, [r7, #24]
 800799e:	015a      	lsls	r2, r3, #5
 80079a0:	69fb      	ldr	r3, [r7, #28]
 80079a2:	4413      	add	r3, r2
 80079a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	69ba      	ldr	r2, [r7, #24]
 80079ac:	0151      	lsls	r1, r2, #5
 80079ae:	69fa      	ldr	r2, [r7, #28]
 80079b0:	440a      	add	r2, r1
 80079b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80079b6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80079ba:	6013      	str	r3, [r2, #0]
 80079bc:	e00f      	b.n	80079de <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80079be:	69bb      	ldr	r3, [r7, #24]
 80079c0:	015a      	lsls	r2, r3, #5
 80079c2:	69fb      	ldr	r3, [r7, #28]
 80079c4:	4413      	add	r3, r2
 80079c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	69ba      	ldr	r2, [r7, #24]
 80079ce:	0151      	lsls	r1, r2, #5
 80079d0:	69fa      	ldr	r2, [r7, #28]
 80079d2:	440a      	add	r2, r1
 80079d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80079d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80079dc:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80079de:	69bb      	ldr	r3, [r7, #24]
 80079e0:	015a      	lsls	r2, r3, #5
 80079e2:	69fb      	ldr	r3, [r7, #28]
 80079e4:	4413      	add	r3, r2
 80079e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	69ba      	ldr	r2, [r7, #24]
 80079ee:	0151      	lsls	r1, r2, #5
 80079f0:	69fa      	ldr	r2, [r7, #28]
 80079f2:	440a      	add	r2, r1
 80079f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80079f8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80079fc:	6013      	str	r3, [r2, #0]
 80079fe:	e133      	b.n	8007c68 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007a00:	69bb      	ldr	r3, [r7, #24]
 8007a02:	015a      	lsls	r2, r3, #5
 8007a04:	69fb      	ldr	r3, [r7, #28]
 8007a06:	4413      	add	r3, r2
 8007a08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	69ba      	ldr	r2, [r7, #24]
 8007a10:	0151      	lsls	r1, r2, #5
 8007a12:	69fa      	ldr	r2, [r7, #28]
 8007a14:	440a      	add	r2, r1
 8007a16:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007a1a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007a1e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007a20:	68bb      	ldr	r3, [r7, #8]
 8007a22:	791b      	ldrb	r3, [r3, #4]
 8007a24:	2b01      	cmp	r3, #1
 8007a26:	d015      	beq.n	8007a54 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8007a28:	68bb      	ldr	r3, [r7, #8]
 8007a2a:	699b      	ldr	r3, [r3, #24]
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	f000 811b 	beq.w	8007c68 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007a32:	69fb      	ldr	r3, [r7, #28]
 8007a34:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a38:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007a3a:	68bb      	ldr	r3, [r7, #8]
 8007a3c:	781b      	ldrb	r3, [r3, #0]
 8007a3e:	f003 030f 	and.w	r3, r3, #15
 8007a42:	2101      	movs	r1, #1
 8007a44:	fa01 f303 	lsl.w	r3, r1, r3
 8007a48:	69f9      	ldr	r1, [r7, #28]
 8007a4a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007a4e:	4313      	orrs	r3, r2
 8007a50:	634b      	str	r3, [r1, #52]	; 0x34
 8007a52:	e109      	b.n	8007c68 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007a54:	69fb      	ldr	r3, [r7, #28]
 8007a56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a5a:	689b      	ldr	r3, [r3, #8]
 8007a5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d110      	bne.n	8007a86 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007a64:	69bb      	ldr	r3, [r7, #24]
 8007a66:	015a      	lsls	r2, r3, #5
 8007a68:	69fb      	ldr	r3, [r7, #28]
 8007a6a:	4413      	add	r3, r2
 8007a6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	69ba      	ldr	r2, [r7, #24]
 8007a74:	0151      	lsls	r1, r2, #5
 8007a76:	69fa      	ldr	r2, [r7, #28]
 8007a78:	440a      	add	r2, r1
 8007a7a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007a7e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007a82:	6013      	str	r3, [r2, #0]
 8007a84:	e00f      	b.n	8007aa6 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007a86:	69bb      	ldr	r3, [r7, #24]
 8007a88:	015a      	lsls	r2, r3, #5
 8007a8a:	69fb      	ldr	r3, [r7, #28]
 8007a8c:	4413      	add	r3, r2
 8007a8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	69ba      	ldr	r2, [r7, #24]
 8007a96:	0151      	lsls	r1, r2, #5
 8007a98:	69fa      	ldr	r2, [r7, #28]
 8007a9a:	440a      	add	r2, r1
 8007a9c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007aa0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007aa4:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8007aa6:	68bb      	ldr	r3, [r7, #8]
 8007aa8:	6919      	ldr	r1, [r3, #16]
 8007aaa:	68bb      	ldr	r3, [r7, #8]
 8007aac:	781a      	ldrb	r2, [r3, #0]
 8007aae:	68bb      	ldr	r3, [r7, #8]
 8007ab0:	699b      	ldr	r3, [r3, #24]
 8007ab2:	b298      	uxth	r0, r3
 8007ab4:	79fb      	ldrb	r3, [r7, #7]
 8007ab6:	9300      	str	r3, [sp, #0]
 8007ab8:	4603      	mov	r3, r0
 8007aba:	68f8      	ldr	r0, [r7, #12]
 8007abc:	f000 fade 	bl	800807c <USB_WritePacket>
 8007ac0:	e0d2      	b.n	8007c68 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007ac2:	69bb      	ldr	r3, [r7, #24]
 8007ac4:	015a      	lsls	r2, r3, #5
 8007ac6:	69fb      	ldr	r3, [r7, #28]
 8007ac8:	4413      	add	r3, r2
 8007aca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ace:	691b      	ldr	r3, [r3, #16]
 8007ad0:	69ba      	ldr	r2, [r7, #24]
 8007ad2:	0151      	lsls	r1, r2, #5
 8007ad4:	69fa      	ldr	r2, [r7, #28]
 8007ad6:	440a      	add	r2, r1
 8007ad8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007adc:	0cdb      	lsrs	r3, r3, #19
 8007ade:	04db      	lsls	r3, r3, #19
 8007ae0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007ae2:	69bb      	ldr	r3, [r7, #24]
 8007ae4:	015a      	lsls	r2, r3, #5
 8007ae6:	69fb      	ldr	r3, [r7, #28]
 8007ae8:	4413      	add	r3, r2
 8007aea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007aee:	691b      	ldr	r3, [r3, #16]
 8007af0:	69ba      	ldr	r2, [r7, #24]
 8007af2:	0151      	lsls	r1, r2, #5
 8007af4:	69fa      	ldr	r2, [r7, #28]
 8007af6:	440a      	add	r2, r1
 8007af8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007afc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007b00:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007b04:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8007b06:	68bb      	ldr	r3, [r7, #8]
 8007b08:	699b      	ldr	r3, [r3, #24]
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d126      	bne.n	8007b5c <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8007b0e:	69bb      	ldr	r3, [r7, #24]
 8007b10:	015a      	lsls	r2, r3, #5
 8007b12:	69fb      	ldr	r3, [r7, #28]
 8007b14:	4413      	add	r3, r2
 8007b16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b1a:	691a      	ldr	r2, [r3, #16]
 8007b1c:	68bb      	ldr	r3, [r7, #8]
 8007b1e:	68db      	ldr	r3, [r3, #12]
 8007b20:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007b24:	69b9      	ldr	r1, [r7, #24]
 8007b26:	0148      	lsls	r0, r1, #5
 8007b28:	69f9      	ldr	r1, [r7, #28]
 8007b2a:	4401      	add	r1, r0
 8007b2c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007b30:	4313      	orrs	r3, r2
 8007b32:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007b34:	69bb      	ldr	r3, [r7, #24]
 8007b36:	015a      	lsls	r2, r3, #5
 8007b38:	69fb      	ldr	r3, [r7, #28]
 8007b3a:	4413      	add	r3, r2
 8007b3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b40:	691b      	ldr	r3, [r3, #16]
 8007b42:	69ba      	ldr	r2, [r7, #24]
 8007b44:	0151      	lsls	r1, r2, #5
 8007b46:	69fa      	ldr	r2, [r7, #28]
 8007b48:	440a      	add	r2, r1
 8007b4a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007b4e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007b52:	6113      	str	r3, [r2, #16]
 8007b54:	e03a      	b.n	8007bcc <USB_EPStartXfer+0x3e4>
 8007b56:	bf00      	nop
 8007b58:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8007b5c:	68bb      	ldr	r3, [r7, #8]
 8007b5e:	699a      	ldr	r2, [r3, #24]
 8007b60:	68bb      	ldr	r3, [r7, #8]
 8007b62:	68db      	ldr	r3, [r3, #12]
 8007b64:	4413      	add	r3, r2
 8007b66:	1e5a      	subs	r2, r3, #1
 8007b68:	68bb      	ldr	r3, [r7, #8]
 8007b6a:	68db      	ldr	r3, [r3, #12]
 8007b6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b70:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8007b72:	68bb      	ldr	r3, [r7, #8]
 8007b74:	68db      	ldr	r3, [r3, #12]
 8007b76:	8afa      	ldrh	r2, [r7, #22]
 8007b78:	fb03 f202 	mul.w	r2, r3, r2
 8007b7c:	68bb      	ldr	r3, [r7, #8]
 8007b7e:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8007b80:	69bb      	ldr	r3, [r7, #24]
 8007b82:	015a      	lsls	r2, r3, #5
 8007b84:	69fb      	ldr	r3, [r7, #28]
 8007b86:	4413      	add	r3, r2
 8007b88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b8c:	691a      	ldr	r2, [r3, #16]
 8007b8e:	8afb      	ldrh	r3, [r7, #22]
 8007b90:	04d9      	lsls	r1, r3, #19
 8007b92:	4b38      	ldr	r3, [pc, #224]	; (8007c74 <USB_EPStartXfer+0x48c>)
 8007b94:	400b      	ands	r3, r1
 8007b96:	69b9      	ldr	r1, [r7, #24]
 8007b98:	0148      	lsls	r0, r1, #5
 8007b9a:	69f9      	ldr	r1, [r7, #28]
 8007b9c:	4401      	add	r1, r0
 8007b9e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007ba2:	4313      	orrs	r3, r2
 8007ba4:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8007ba6:	69bb      	ldr	r3, [r7, #24]
 8007ba8:	015a      	lsls	r2, r3, #5
 8007baa:	69fb      	ldr	r3, [r7, #28]
 8007bac:	4413      	add	r3, r2
 8007bae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007bb2:	691a      	ldr	r2, [r3, #16]
 8007bb4:	68bb      	ldr	r3, [r7, #8]
 8007bb6:	69db      	ldr	r3, [r3, #28]
 8007bb8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007bbc:	69b9      	ldr	r1, [r7, #24]
 8007bbe:	0148      	lsls	r0, r1, #5
 8007bc0:	69f9      	ldr	r1, [r7, #28]
 8007bc2:	4401      	add	r1, r0
 8007bc4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007bc8:	4313      	orrs	r3, r2
 8007bca:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8007bcc:	79fb      	ldrb	r3, [r7, #7]
 8007bce:	2b01      	cmp	r3, #1
 8007bd0:	d10d      	bne.n	8007bee <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8007bd2:	68bb      	ldr	r3, [r7, #8]
 8007bd4:	691b      	ldr	r3, [r3, #16]
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d009      	beq.n	8007bee <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8007bda:	68bb      	ldr	r3, [r7, #8]
 8007bdc:	6919      	ldr	r1, [r3, #16]
 8007bde:	69bb      	ldr	r3, [r7, #24]
 8007be0:	015a      	lsls	r2, r3, #5
 8007be2:	69fb      	ldr	r3, [r7, #28]
 8007be4:	4413      	add	r3, r2
 8007be6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007bea:	460a      	mov	r2, r1
 8007bec:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8007bee:	68bb      	ldr	r3, [r7, #8]
 8007bf0:	791b      	ldrb	r3, [r3, #4]
 8007bf2:	2b01      	cmp	r3, #1
 8007bf4:	d128      	bne.n	8007c48 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007bf6:	69fb      	ldr	r3, [r7, #28]
 8007bf8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007bfc:	689b      	ldr	r3, [r3, #8]
 8007bfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d110      	bne.n	8007c28 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8007c06:	69bb      	ldr	r3, [r7, #24]
 8007c08:	015a      	lsls	r2, r3, #5
 8007c0a:	69fb      	ldr	r3, [r7, #28]
 8007c0c:	4413      	add	r3, r2
 8007c0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	69ba      	ldr	r2, [r7, #24]
 8007c16:	0151      	lsls	r1, r2, #5
 8007c18:	69fa      	ldr	r2, [r7, #28]
 8007c1a:	440a      	add	r2, r1
 8007c1c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007c20:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007c24:	6013      	str	r3, [r2, #0]
 8007c26:	e00f      	b.n	8007c48 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8007c28:	69bb      	ldr	r3, [r7, #24]
 8007c2a:	015a      	lsls	r2, r3, #5
 8007c2c:	69fb      	ldr	r3, [r7, #28]
 8007c2e:	4413      	add	r3, r2
 8007c30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	69ba      	ldr	r2, [r7, #24]
 8007c38:	0151      	lsls	r1, r2, #5
 8007c3a:	69fa      	ldr	r2, [r7, #28]
 8007c3c:	440a      	add	r2, r1
 8007c3e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007c42:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007c46:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007c48:	69bb      	ldr	r3, [r7, #24]
 8007c4a:	015a      	lsls	r2, r3, #5
 8007c4c:	69fb      	ldr	r3, [r7, #28]
 8007c4e:	4413      	add	r3, r2
 8007c50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	69ba      	ldr	r2, [r7, #24]
 8007c58:	0151      	lsls	r1, r2, #5
 8007c5a:	69fa      	ldr	r2, [r7, #28]
 8007c5c:	440a      	add	r2, r1
 8007c5e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007c62:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007c66:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007c68:	2300      	movs	r3, #0
}
 8007c6a:	4618      	mov	r0, r3
 8007c6c:	3720      	adds	r7, #32
 8007c6e:	46bd      	mov	sp, r7
 8007c70:	bd80      	pop	{r7, pc}
 8007c72:	bf00      	nop
 8007c74:	1ff80000 	.word	0x1ff80000

08007c78 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007c78:	b480      	push	{r7}
 8007c7a:	b087      	sub	sp, #28
 8007c7c:	af00      	add	r7, sp, #0
 8007c7e:	60f8      	str	r0, [r7, #12]
 8007c80:	60b9      	str	r1, [r7, #8]
 8007c82:	4613      	mov	r3, r2
 8007c84:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8007c8a:	68bb      	ldr	r3, [r7, #8]
 8007c8c:	781b      	ldrb	r3, [r3, #0]
 8007c8e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007c90:	68bb      	ldr	r3, [r7, #8]
 8007c92:	785b      	ldrb	r3, [r3, #1]
 8007c94:	2b01      	cmp	r3, #1
 8007c96:	f040 80ce 	bne.w	8007e36 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8007c9a:	68bb      	ldr	r3, [r7, #8]
 8007c9c:	699b      	ldr	r3, [r3, #24]
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d132      	bne.n	8007d08 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007ca2:	693b      	ldr	r3, [r7, #16]
 8007ca4:	015a      	lsls	r2, r3, #5
 8007ca6:	697b      	ldr	r3, [r7, #20]
 8007ca8:	4413      	add	r3, r2
 8007caa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007cae:	691b      	ldr	r3, [r3, #16]
 8007cb0:	693a      	ldr	r2, [r7, #16]
 8007cb2:	0151      	lsls	r1, r2, #5
 8007cb4:	697a      	ldr	r2, [r7, #20]
 8007cb6:	440a      	add	r2, r1
 8007cb8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007cbc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007cc0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007cc4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007cc6:	693b      	ldr	r3, [r7, #16]
 8007cc8:	015a      	lsls	r2, r3, #5
 8007cca:	697b      	ldr	r3, [r7, #20]
 8007ccc:	4413      	add	r3, r2
 8007cce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007cd2:	691b      	ldr	r3, [r3, #16]
 8007cd4:	693a      	ldr	r2, [r7, #16]
 8007cd6:	0151      	lsls	r1, r2, #5
 8007cd8:	697a      	ldr	r2, [r7, #20]
 8007cda:	440a      	add	r2, r1
 8007cdc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007ce0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007ce4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007ce6:	693b      	ldr	r3, [r7, #16]
 8007ce8:	015a      	lsls	r2, r3, #5
 8007cea:	697b      	ldr	r3, [r7, #20]
 8007cec:	4413      	add	r3, r2
 8007cee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007cf2:	691b      	ldr	r3, [r3, #16]
 8007cf4:	693a      	ldr	r2, [r7, #16]
 8007cf6:	0151      	lsls	r1, r2, #5
 8007cf8:	697a      	ldr	r2, [r7, #20]
 8007cfa:	440a      	add	r2, r1
 8007cfc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007d00:	0cdb      	lsrs	r3, r3, #19
 8007d02:	04db      	lsls	r3, r3, #19
 8007d04:	6113      	str	r3, [r2, #16]
 8007d06:	e04e      	b.n	8007da6 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007d08:	693b      	ldr	r3, [r7, #16]
 8007d0a:	015a      	lsls	r2, r3, #5
 8007d0c:	697b      	ldr	r3, [r7, #20]
 8007d0e:	4413      	add	r3, r2
 8007d10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d14:	691b      	ldr	r3, [r3, #16]
 8007d16:	693a      	ldr	r2, [r7, #16]
 8007d18:	0151      	lsls	r1, r2, #5
 8007d1a:	697a      	ldr	r2, [r7, #20]
 8007d1c:	440a      	add	r2, r1
 8007d1e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007d22:	0cdb      	lsrs	r3, r3, #19
 8007d24:	04db      	lsls	r3, r3, #19
 8007d26:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007d28:	693b      	ldr	r3, [r7, #16]
 8007d2a:	015a      	lsls	r2, r3, #5
 8007d2c:	697b      	ldr	r3, [r7, #20]
 8007d2e:	4413      	add	r3, r2
 8007d30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d34:	691b      	ldr	r3, [r3, #16]
 8007d36:	693a      	ldr	r2, [r7, #16]
 8007d38:	0151      	lsls	r1, r2, #5
 8007d3a:	697a      	ldr	r2, [r7, #20]
 8007d3c:	440a      	add	r2, r1
 8007d3e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007d42:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007d46:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007d4a:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8007d4c:	68bb      	ldr	r3, [r7, #8]
 8007d4e:	699a      	ldr	r2, [r3, #24]
 8007d50:	68bb      	ldr	r3, [r7, #8]
 8007d52:	68db      	ldr	r3, [r3, #12]
 8007d54:	429a      	cmp	r2, r3
 8007d56:	d903      	bls.n	8007d60 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8007d58:	68bb      	ldr	r3, [r7, #8]
 8007d5a:	68da      	ldr	r2, [r3, #12]
 8007d5c:	68bb      	ldr	r3, [r7, #8]
 8007d5e:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007d60:	693b      	ldr	r3, [r7, #16]
 8007d62:	015a      	lsls	r2, r3, #5
 8007d64:	697b      	ldr	r3, [r7, #20]
 8007d66:	4413      	add	r3, r2
 8007d68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d6c:	691b      	ldr	r3, [r3, #16]
 8007d6e:	693a      	ldr	r2, [r7, #16]
 8007d70:	0151      	lsls	r1, r2, #5
 8007d72:	697a      	ldr	r2, [r7, #20]
 8007d74:	440a      	add	r2, r1
 8007d76:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007d7a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007d7e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007d80:	693b      	ldr	r3, [r7, #16]
 8007d82:	015a      	lsls	r2, r3, #5
 8007d84:	697b      	ldr	r3, [r7, #20]
 8007d86:	4413      	add	r3, r2
 8007d88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d8c:	691a      	ldr	r2, [r3, #16]
 8007d8e:	68bb      	ldr	r3, [r7, #8]
 8007d90:	699b      	ldr	r3, [r3, #24]
 8007d92:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007d96:	6939      	ldr	r1, [r7, #16]
 8007d98:	0148      	lsls	r0, r1, #5
 8007d9a:	6979      	ldr	r1, [r7, #20]
 8007d9c:	4401      	add	r1, r0
 8007d9e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007da2:	4313      	orrs	r3, r2
 8007da4:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8007da6:	79fb      	ldrb	r3, [r7, #7]
 8007da8:	2b01      	cmp	r3, #1
 8007daa:	d11e      	bne.n	8007dea <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007dac:	68bb      	ldr	r3, [r7, #8]
 8007dae:	695b      	ldr	r3, [r3, #20]
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d009      	beq.n	8007dc8 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007db4:	693b      	ldr	r3, [r7, #16]
 8007db6:	015a      	lsls	r2, r3, #5
 8007db8:	697b      	ldr	r3, [r7, #20]
 8007dba:	4413      	add	r3, r2
 8007dbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007dc0:	461a      	mov	r2, r3
 8007dc2:	68bb      	ldr	r3, [r7, #8]
 8007dc4:	695b      	ldr	r3, [r3, #20]
 8007dc6:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007dc8:	693b      	ldr	r3, [r7, #16]
 8007dca:	015a      	lsls	r2, r3, #5
 8007dcc:	697b      	ldr	r3, [r7, #20]
 8007dce:	4413      	add	r3, r2
 8007dd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	693a      	ldr	r2, [r7, #16]
 8007dd8:	0151      	lsls	r1, r2, #5
 8007dda:	697a      	ldr	r2, [r7, #20]
 8007ddc:	440a      	add	r2, r1
 8007dde:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007de2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007de6:	6013      	str	r3, [r2, #0]
 8007de8:	e097      	b.n	8007f1a <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007dea:	693b      	ldr	r3, [r7, #16]
 8007dec:	015a      	lsls	r2, r3, #5
 8007dee:	697b      	ldr	r3, [r7, #20]
 8007df0:	4413      	add	r3, r2
 8007df2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	693a      	ldr	r2, [r7, #16]
 8007dfa:	0151      	lsls	r1, r2, #5
 8007dfc:	697a      	ldr	r2, [r7, #20]
 8007dfe:	440a      	add	r2, r1
 8007e00:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007e04:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007e08:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8007e0a:	68bb      	ldr	r3, [r7, #8]
 8007e0c:	699b      	ldr	r3, [r3, #24]
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	f000 8083 	beq.w	8007f1a <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007e14:	697b      	ldr	r3, [r7, #20]
 8007e16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e1a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007e1c:	68bb      	ldr	r3, [r7, #8]
 8007e1e:	781b      	ldrb	r3, [r3, #0]
 8007e20:	f003 030f 	and.w	r3, r3, #15
 8007e24:	2101      	movs	r1, #1
 8007e26:	fa01 f303 	lsl.w	r3, r1, r3
 8007e2a:	6979      	ldr	r1, [r7, #20]
 8007e2c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007e30:	4313      	orrs	r3, r2
 8007e32:	634b      	str	r3, [r1, #52]	; 0x34
 8007e34:	e071      	b.n	8007f1a <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007e36:	693b      	ldr	r3, [r7, #16]
 8007e38:	015a      	lsls	r2, r3, #5
 8007e3a:	697b      	ldr	r3, [r7, #20]
 8007e3c:	4413      	add	r3, r2
 8007e3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e42:	691b      	ldr	r3, [r3, #16]
 8007e44:	693a      	ldr	r2, [r7, #16]
 8007e46:	0151      	lsls	r1, r2, #5
 8007e48:	697a      	ldr	r2, [r7, #20]
 8007e4a:	440a      	add	r2, r1
 8007e4c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007e50:	0cdb      	lsrs	r3, r3, #19
 8007e52:	04db      	lsls	r3, r3, #19
 8007e54:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007e56:	693b      	ldr	r3, [r7, #16]
 8007e58:	015a      	lsls	r2, r3, #5
 8007e5a:	697b      	ldr	r3, [r7, #20]
 8007e5c:	4413      	add	r3, r2
 8007e5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e62:	691b      	ldr	r3, [r3, #16]
 8007e64:	693a      	ldr	r2, [r7, #16]
 8007e66:	0151      	lsls	r1, r2, #5
 8007e68:	697a      	ldr	r2, [r7, #20]
 8007e6a:	440a      	add	r2, r1
 8007e6c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007e70:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007e74:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007e78:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8007e7a:	68bb      	ldr	r3, [r7, #8]
 8007e7c:	699b      	ldr	r3, [r3, #24]
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d003      	beq.n	8007e8a <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8007e82:	68bb      	ldr	r3, [r7, #8]
 8007e84:	68da      	ldr	r2, [r3, #12]
 8007e86:	68bb      	ldr	r3, [r7, #8]
 8007e88:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8007e8a:	68bb      	ldr	r3, [r7, #8]
 8007e8c:	68da      	ldr	r2, [r3, #12]
 8007e8e:	68bb      	ldr	r3, [r7, #8]
 8007e90:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007e92:	693b      	ldr	r3, [r7, #16]
 8007e94:	015a      	lsls	r2, r3, #5
 8007e96:	697b      	ldr	r3, [r7, #20]
 8007e98:	4413      	add	r3, r2
 8007e9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e9e:	691b      	ldr	r3, [r3, #16]
 8007ea0:	693a      	ldr	r2, [r7, #16]
 8007ea2:	0151      	lsls	r1, r2, #5
 8007ea4:	697a      	ldr	r2, [r7, #20]
 8007ea6:	440a      	add	r2, r1
 8007ea8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007eac:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007eb0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8007eb2:	693b      	ldr	r3, [r7, #16]
 8007eb4:	015a      	lsls	r2, r3, #5
 8007eb6:	697b      	ldr	r3, [r7, #20]
 8007eb8:	4413      	add	r3, r2
 8007eba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ebe:	691a      	ldr	r2, [r3, #16]
 8007ec0:	68bb      	ldr	r3, [r7, #8]
 8007ec2:	69db      	ldr	r3, [r3, #28]
 8007ec4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007ec8:	6939      	ldr	r1, [r7, #16]
 8007eca:	0148      	lsls	r0, r1, #5
 8007ecc:	6979      	ldr	r1, [r7, #20]
 8007ece:	4401      	add	r1, r0
 8007ed0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007ed4:	4313      	orrs	r3, r2
 8007ed6:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8007ed8:	79fb      	ldrb	r3, [r7, #7]
 8007eda:	2b01      	cmp	r3, #1
 8007edc:	d10d      	bne.n	8007efa <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8007ede:	68bb      	ldr	r3, [r7, #8]
 8007ee0:	691b      	ldr	r3, [r3, #16]
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d009      	beq.n	8007efa <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8007ee6:	68bb      	ldr	r3, [r7, #8]
 8007ee8:	6919      	ldr	r1, [r3, #16]
 8007eea:	693b      	ldr	r3, [r7, #16]
 8007eec:	015a      	lsls	r2, r3, #5
 8007eee:	697b      	ldr	r3, [r7, #20]
 8007ef0:	4413      	add	r3, r2
 8007ef2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ef6:	460a      	mov	r2, r1
 8007ef8:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007efa:	693b      	ldr	r3, [r7, #16]
 8007efc:	015a      	lsls	r2, r3, #5
 8007efe:	697b      	ldr	r3, [r7, #20]
 8007f00:	4413      	add	r3, r2
 8007f02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	693a      	ldr	r2, [r7, #16]
 8007f0a:	0151      	lsls	r1, r2, #5
 8007f0c:	697a      	ldr	r2, [r7, #20]
 8007f0e:	440a      	add	r2, r1
 8007f10:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007f14:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007f18:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007f1a:	2300      	movs	r3, #0
}
 8007f1c:	4618      	mov	r0, r3
 8007f1e:	371c      	adds	r7, #28
 8007f20:	46bd      	mov	sp, r7
 8007f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f26:	4770      	bx	lr

08007f28 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007f28:	b480      	push	{r7}
 8007f2a:	b087      	sub	sp, #28
 8007f2c:	af00      	add	r7, sp, #0
 8007f2e:	6078      	str	r0, [r7, #4]
 8007f30:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007f32:	2300      	movs	r3, #0
 8007f34:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8007f36:	2300      	movs	r3, #0
 8007f38:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007f3e:	683b      	ldr	r3, [r7, #0]
 8007f40:	785b      	ldrb	r3, [r3, #1]
 8007f42:	2b01      	cmp	r3, #1
 8007f44:	d14a      	bne.n	8007fdc <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007f46:	683b      	ldr	r3, [r7, #0]
 8007f48:	781b      	ldrb	r3, [r3, #0]
 8007f4a:	015a      	lsls	r2, r3, #5
 8007f4c:	693b      	ldr	r3, [r7, #16]
 8007f4e:	4413      	add	r3, r2
 8007f50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007f5a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007f5e:	f040 8086 	bne.w	800806e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8007f62:	683b      	ldr	r3, [r7, #0]
 8007f64:	781b      	ldrb	r3, [r3, #0]
 8007f66:	015a      	lsls	r2, r3, #5
 8007f68:	693b      	ldr	r3, [r7, #16]
 8007f6a:	4413      	add	r3, r2
 8007f6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	683a      	ldr	r2, [r7, #0]
 8007f74:	7812      	ldrb	r2, [r2, #0]
 8007f76:	0151      	lsls	r1, r2, #5
 8007f78:	693a      	ldr	r2, [r7, #16]
 8007f7a:	440a      	add	r2, r1
 8007f7c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007f80:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007f84:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8007f86:	683b      	ldr	r3, [r7, #0]
 8007f88:	781b      	ldrb	r3, [r3, #0]
 8007f8a:	015a      	lsls	r2, r3, #5
 8007f8c:	693b      	ldr	r3, [r7, #16]
 8007f8e:	4413      	add	r3, r2
 8007f90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	683a      	ldr	r2, [r7, #0]
 8007f98:	7812      	ldrb	r2, [r2, #0]
 8007f9a:	0151      	lsls	r1, r2, #5
 8007f9c:	693a      	ldr	r2, [r7, #16]
 8007f9e:	440a      	add	r2, r1
 8007fa0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007fa4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007fa8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	3301      	adds	r3, #1
 8007fae:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	f242 7210 	movw	r2, #10000	; 0x2710
 8007fb6:	4293      	cmp	r3, r2
 8007fb8:	d902      	bls.n	8007fc0 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8007fba:	2301      	movs	r3, #1
 8007fbc:	75fb      	strb	r3, [r7, #23]
          break;
 8007fbe:	e056      	b.n	800806e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8007fc0:	683b      	ldr	r3, [r7, #0]
 8007fc2:	781b      	ldrb	r3, [r3, #0]
 8007fc4:	015a      	lsls	r2, r3, #5
 8007fc6:	693b      	ldr	r3, [r7, #16]
 8007fc8:	4413      	add	r3, r2
 8007fca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007fd4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007fd8:	d0e7      	beq.n	8007faa <USB_EPStopXfer+0x82>
 8007fda:	e048      	b.n	800806e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007fdc:	683b      	ldr	r3, [r7, #0]
 8007fde:	781b      	ldrb	r3, [r3, #0]
 8007fe0:	015a      	lsls	r2, r3, #5
 8007fe2:	693b      	ldr	r3, [r7, #16]
 8007fe4:	4413      	add	r3, r2
 8007fe6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007ff0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007ff4:	d13b      	bne.n	800806e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8007ff6:	683b      	ldr	r3, [r7, #0]
 8007ff8:	781b      	ldrb	r3, [r3, #0]
 8007ffa:	015a      	lsls	r2, r3, #5
 8007ffc:	693b      	ldr	r3, [r7, #16]
 8007ffe:	4413      	add	r3, r2
 8008000:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	683a      	ldr	r2, [r7, #0]
 8008008:	7812      	ldrb	r2, [r2, #0]
 800800a:	0151      	lsls	r1, r2, #5
 800800c:	693a      	ldr	r2, [r7, #16]
 800800e:	440a      	add	r2, r1
 8008010:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008014:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008018:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800801a:	683b      	ldr	r3, [r7, #0]
 800801c:	781b      	ldrb	r3, [r3, #0]
 800801e:	015a      	lsls	r2, r3, #5
 8008020:	693b      	ldr	r3, [r7, #16]
 8008022:	4413      	add	r3, r2
 8008024:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	683a      	ldr	r2, [r7, #0]
 800802c:	7812      	ldrb	r2, [r2, #0]
 800802e:	0151      	lsls	r1, r2, #5
 8008030:	693a      	ldr	r2, [r7, #16]
 8008032:	440a      	add	r2, r1
 8008034:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008038:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800803c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	3301      	adds	r3, #1
 8008042:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	f242 7210 	movw	r2, #10000	; 0x2710
 800804a:	4293      	cmp	r3, r2
 800804c:	d902      	bls.n	8008054 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800804e:	2301      	movs	r3, #1
 8008050:	75fb      	strb	r3, [r7, #23]
          break;
 8008052:	e00c      	b.n	800806e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8008054:	683b      	ldr	r3, [r7, #0]
 8008056:	781b      	ldrb	r3, [r3, #0]
 8008058:	015a      	lsls	r2, r3, #5
 800805a:	693b      	ldr	r3, [r7, #16]
 800805c:	4413      	add	r3, r2
 800805e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008068:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800806c:	d0e7      	beq.n	800803e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800806e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008070:	4618      	mov	r0, r3
 8008072:	371c      	adds	r7, #28
 8008074:	46bd      	mov	sp, r7
 8008076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800807a:	4770      	bx	lr

0800807c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800807c:	b480      	push	{r7}
 800807e:	b089      	sub	sp, #36	; 0x24
 8008080:	af00      	add	r7, sp, #0
 8008082:	60f8      	str	r0, [r7, #12]
 8008084:	60b9      	str	r1, [r7, #8]
 8008086:	4611      	mov	r1, r2
 8008088:	461a      	mov	r2, r3
 800808a:	460b      	mov	r3, r1
 800808c:	71fb      	strb	r3, [r7, #7]
 800808e:	4613      	mov	r3, r2
 8008090:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8008096:	68bb      	ldr	r3, [r7, #8]
 8008098:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800809a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d123      	bne.n	80080ea <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80080a2:	88bb      	ldrh	r3, [r7, #4]
 80080a4:	3303      	adds	r3, #3
 80080a6:	089b      	lsrs	r3, r3, #2
 80080a8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80080aa:	2300      	movs	r3, #0
 80080ac:	61bb      	str	r3, [r7, #24]
 80080ae:	e018      	b.n	80080e2 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80080b0:	79fb      	ldrb	r3, [r7, #7]
 80080b2:	031a      	lsls	r2, r3, #12
 80080b4:	697b      	ldr	r3, [r7, #20]
 80080b6:	4413      	add	r3, r2
 80080b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80080bc:	461a      	mov	r2, r3
 80080be:	69fb      	ldr	r3, [r7, #28]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	6013      	str	r3, [r2, #0]
      pSrc++;
 80080c4:	69fb      	ldr	r3, [r7, #28]
 80080c6:	3301      	adds	r3, #1
 80080c8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80080ca:	69fb      	ldr	r3, [r7, #28]
 80080cc:	3301      	adds	r3, #1
 80080ce:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80080d0:	69fb      	ldr	r3, [r7, #28]
 80080d2:	3301      	adds	r3, #1
 80080d4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80080d6:	69fb      	ldr	r3, [r7, #28]
 80080d8:	3301      	adds	r3, #1
 80080da:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80080dc:	69bb      	ldr	r3, [r7, #24]
 80080de:	3301      	adds	r3, #1
 80080e0:	61bb      	str	r3, [r7, #24]
 80080e2:	69ba      	ldr	r2, [r7, #24]
 80080e4:	693b      	ldr	r3, [r7, #16]
 80080e6:	429a      	cmp	r2, r3
 80080e8:	d3e2      	bcc.n	80080b0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80080ea:	2300      	movs	r3, #0
}
 80080ec:	4618      	mov	r0, r3
 80080ee:	3724      	adds	r7, #36	; 0x24
 80080f0:	46bd      	mov	sp, r7
 80080f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f6:	4770      	bx	lr

080080f8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80080f8:	b480      	push	{r7}
 80080fa:	b08b      	sub	sp, #44	; 0x2c
 80080fc:	af00      	add	r7, sp, #0
 80080fe:	60f8      	str	r0, [r7, #12]
 8008100:	60b9      	str	r1, [r7, #8]
 8008102:	4613      	mov	r3, r2
 8008104:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800810a:	68bb      	ldr	r3, [r7, #8]
 800810c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800810e:	88fb      	ldrh	r3, [r7, #6]
 8008110:	089b      	lsrs	r3, r3, #2
 8008112:	b29b      	uxth	r3, r3
 8008114:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8008116:	88fb      	ldrh	r3, [r7, #6]
 8008118:	f003 0303 	and.w	r3, r3, #3
 800811c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800811e:	2300      	movs	r3, #0
 8008120:	623b      	str	r3, [r7, #32]
 8008122:	e014      	b.n	800814e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8008124:	69bb      	ldr	r3, [r7, #24]
 8008126:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800812a:	681a      	ldr	r2, [r3, #0]
 800812c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800812e:	601a      	str	r2, [r3, #0]
    pDest++;
 8008130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008132:	3301      	adds	r3, #1
 8008134:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008138:	3301      	adds	r3, #1
 800813a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800813c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800813e:	3301      	adds	r3, #1
 8008140:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008144:	3301      	adds	r3, #1
 8008146:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8008148:	6a3b      	ldr	r3, [r7, #32]
 800814a:	3301      	adds	r3, #1
 800814c:	623b      	str	r3, [r7, #32]
 800814e:	6a3a      	ldr	r2, [r7, #32]
 8008150:	697b      	ldr	r3, [r7, #20]
 8008152:	429a      	cmp	r2, r3
 8008154:	d3e6      	bcc.n	8008124 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8008156:	8bfb      	ldrh	r3, [r7, #30]
 8008158:	2b00      	cmp	r3, #0
 800815a:	d01e      	beq.n	800819a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800815c:	2300      	movs	r3, #0
 800815e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8008160:	69bb      	ldr	r3, [r7, #24]
 8008162:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008166:	461a      	mov	r2, r3
 8008168:	f107 0310 	add.w	r3, r7, #16
 800816c:	6812      	ldr	r2, [r2, #0]
 800816e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8008170:	693a      	ldr	r2, [r7, #16]
 8008172:	6a3b      	ldr	r3, [r7, #32]
 8008174:	b2db      	uxtb	r3, r3
 8008176:	00db      	lsls	r3, r3, #3
 8008178:	fa22 f303 	lsr.w	r3, r2, r3
 800817c:	b2da      	uxtb	r2, r3
 800817e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008180:	701a      	strb	r2, [r3, #0]
      i++;
 8008182:	6a3b      	ldr	r3, [r7, #32]
 8008184:	3301      	adds	r3, #1
 8008186:	623b      	str	r3, [r7, #32]
      pDest++;
 8008188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800818a:	3301      	adds	r3, #1
 800818c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800818e:	8bfb      	ldrh	r3, [r7, #30]
 8008190:	3b01      	subs	r3, #1
 8008192:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8008194:	8bfb      	ldrh	r3, [r7, #30]
 8008196:	2b00      	cmp	r3, #0
 8008198:	d1ea      	bne.n	8008170 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800819a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800819c:	4618      	mov	r0, r3
 800819e:	372c      	adds	r7, #44	; 0x2c
 80081a0:	46bd      	mov	sp, r7
 80081a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a6:	4770      	bx	lr

080081a8 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80081a8:	b480      	push	{r7}
 80081aa:	b085      	sub	sp, #20
 80081ac:	af00      	add	r7, sp, #0
 80081ae:	6078      	str	r0, [r7, #4]
 80081b0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80081b6:	683b      	ldr	r3, [r7, #0]
 80081b8:	781b      	ldrb	r3, [r3, #0]
 80081ba:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80081bc:	683b      	ldr	r3, [r7, #0]
 80081be:	785b      	ldrb	r3, [r3, #1]
 80081c0:	2b01      	cmp	r3, #1
 80081c2:	d12c      	bne.n	800821e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80081c4:	68bb      	ldr	r3, [r7, #8]
 80081c6:	015a      	lsls	r2, r3, #5
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	4413      	add	r3, r2
 80081cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	db12      	blt.n	80081fc <USB_EPSetStall+0x54>
 80081d6:	68bb      	ldr	r3, [r7, #8]
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d00f      	beq.n	80081fc <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80081dc:	68bb      	ldr	r3, [r7, #8]
 80081de:	015a      	lsls	r2, r3, #5
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	4413      	add	r3, r2
 80081e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	68ba      	ldr	r2, [r7, #8]
 80081ec:	0151      	lsls	r1, r2, #5
 80081ee:	68fa      	ldr	r2, [r7, #12]
 80081f0:	440a      	add	r2, r1
 80081f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80081f6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80081fa:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80081fc:	68bb      	ldr	r3, [r7, #8]
 80081fe:	015a      	lsls	r2, r3, #5
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	4413      	add	r3, r2
 8008204:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	68ba      	ldr	r2, [r7, #8]
 800820c:	0151      	lsls	r1, r2, #5
 800820e:	68fa      	ldr	r2, [r7, #12]
 8008210:	440a      	add	r2, r1
 8008212:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008216:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800821a:	6013      	str	r3, [r2, #0]
 800821c:	e02b      	b.n	8008276 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800821e:	68bb      	ldr	r3, [r7, #8]
 8008220:	015a      	lsls	r2, r3, #5
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	4413      	add	r3, r2
 8008226:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	2b00      	cmp	r3, #0
 800822e:	db12      	blt.n	8008256 <USB_EPSetStall+0xae>
 8008230:	68bb      	ldr	r3, [r7, #8]
 8008232:	2b00      	cmp	r3, #0
 8008234:	d00f      	beq.n	8008256 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8008236:	68bb      	ldr	r3, [r7, #8]
 8008238:	015a      	lsls	r2, r3, #5
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	4413      	add	r3, r2
 800823e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	68ba      	ldr	r2, [r7, #8]
 8008246:	0151      	lsls	r1, r2, #5
 8008248:	68fa      	ldr	r2, [r7, #12]
 800824a:	440a      	add	r2, r1
 800824c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008250:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008254:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8008256:	68bb      	ldr	r3, [r7, #8]
 8008258:	015a      	lsls	r2, r3, #5
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	4413      	add	r3, r2
 800825e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	68ba      	ldr	r2, [r7, #8]
 8008266:	0151      	lsls	r1, r2, #5
 8008268:	68fa      	ldr	r2, [r7, #12]
 800826a:	440a      	add	r2, r1
 800826c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008270:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008274:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008276:	2300      	movs	r3, #0
}
 8008278:	4618      	mov	r0, r3
 800827a:	3714      	adds	r7, #20
 800827c:	46bd      	mov	sp, r7
 800827e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008282:	4770      	bx	lr

08008284 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008284:	b480      	push	{r7}
 8008286:	b085      	sub	sp, #20
 8008288:	af00      	add	r7, sp, #0
 800828a:	6078      	str	r0, [r7, #4]
 800828c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008292:	683b      	ldr	r3, [r7, #0]
 8008294:	781b      	ldrb	r3, [r3, #0]
 8008296:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008298:	683b      	ldr	r3, [r7, #0]
 800829a:	785b      	ldrb	r3, [r3, #1]
 800829c:	2b01      	cmp	r3, #1
 800829e:	d128      	bne.n	80082f2 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80082a0:	68bb      	ldr	r3, [r7, #8]
 80082a2:	015a      	lsls	r2, r3, #5
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	4413      	add	r3, r2
 80082a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	68ba      	ldr	r2, [r7, #8]
 80082b0:	0151      	lsls	r1, r2, #5
 80082b2:	68fa      	ldr	r2, [r7, #12]
 80082b4:	440a      	add	r2, r1
 80082b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80082ba:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80082be:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80082c0:	683b      	ldr	r3, [r7, #0]
 80082c2:	791b      	ldrb	r3, [r3, #4]
 80082c4:	2b03      	cmp	r3, #3
 80082c6:	d003      	beq.n	80082d0 <USB_EPClearStall+0x4c>
 80082c8:	683b      	ldr	r3, [r7, #0]
 80082ca:	791b      	ldrb	r3, [r3, #4]
 80082cc:	2b02      	cmp	r3, #2
 80082ce:	d138      	bne.n	8008342 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80082d0:	68bb      	ldr	r3, [r7, #8]
 80082d2:	015a      	lsls	r2, r3, #5
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	4413      	add	r3, r2
 80082d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	68ba      	ldr	r2, [r7, #8]
 80082e0:	0151      	lsls	r1, r2, #5
 80082e2:	68fa      	ldr	r2, [r7, #12]
 80082e4:	440a      	add	r2, r1
 80082e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80082ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80082ee:	6013      	str	r3, [r2, #0]
 80082f0:	e027      	b.n	8008342 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80082f2:	68bb      	ldr	r3, [r7, #8]
 80082f4:	015a      	lsls	r2, r3, #5
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	4413      	add	r3, r2
 80082fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	68ba      	ldr	r2, [r7, #8]
 8008302:	0151      	lsls	r1, r2, #5
 8008304:	68fa      	ldr	r2, [r7, #12]
 8008306:	440a      	add	r2, r1
 8008308:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800830c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008310:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008312:	683b      	ldr	r3, [r7, #0]
 8008314:	791b      	ldrb	r3, [r3, #4]
 8008316:	2b03      	cmp	r3, #3
 8008318:	d003      	beq.n	8008322 <USB_EPClearStall+0x9e>
 800831a:	683b      	ldr	r3, [r7, #0]
 800831c:	791b      	ldrb	r3, [r3, #4]
 800831e:	2b02      	cmp	r3, #2
 8008320:	d10f      	bne.n	8008342 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008322:	68bb      	ldr	r3, [r7, #8]
 8008324:	015a      	lsls	r2, r3, #5
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	4413      	add	r3, r2
 800832a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	68ba      	ldr	r2, [r7, #8]
 8008332:	0151      	lsls	r1, r2, #5
 8008334:	68fa      	ldr	r2, [r7, #12]
 8008336:	440a      	add	r2, r1
 8008338:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800833c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008340:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8008342:	2300      	movs	r3, #0
}
 8008344:	4618      	mov	r0, r3
 8008346:	3714      	adds	r7, #20
 8008348:	46bd      	mov	sp, r7
 800834a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800834e:	4770      	bx	lr

08008350 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8008350:	b480      	push	{r7}
 8008352:	b085      	sub	sp, #20
 8008354:	af00      	add	r7, sp, #0
 8008356:	6078      	str	r0, [r7, #4]
 8008358:	460b      	mov	r3, r1
 800835a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	68fa      	ldr	r2, [r7, #12]
 800836a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800836e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8008372:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800837a:	681a      	ldr	r2, [r3, #0]
 800837c:	78fb      	ldrb	r3, [r7, #3]
 800837e:	011b      	lsls	r3, r3, #4
 8008380:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8008384:	68f9      	ldr	r1, [r7, #12]
 8008386:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800838a:	4313      	orrs	r3, r2
 800838c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800838e:	2300      	movs	r3, #0
}
 8008390:	4618      	mov	r0, r3
 8008392:	3714      	adds	r7, #20
 8008394:	46bd      	mov	sp, r7
 8008396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800839a:	4770      	bx	lr

0800839c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800839c:	b480      	push	{r7}
 800839e:	b085      	sub	sp, #20
 80083a0:	af00      	add	r7, sp, #0
 80083a2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	68fa      	ldr	r2, [r7, #12]
 80083b2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80083b6:	f023 0303 	bic.w	r3, r3, #3
 80083ba:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80083c2:	685b      	ldr	r3, [r3, #4]
 80083c4:	68fa      	ldr	r2, [r7, #12]
 80083c6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80083ca:	f023 0302 	bic.w	r3, r3, #2
 80083ce:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80083d0:	2300      	movs	r3, #0
}
 80083d2:	4618      	mov	r0, r3
 80083d4:	3714      	adds	r7, #20
 80083d6:	46bd      	mov	sp, r7
 80083d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083dc:	4770      	bx	lr

080083de <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80083de:	b480      	push	{r7}
 80083e0:	b085      	sub	sp, #20
 80083e2:	af00      	add	r7, sp, #0
 80083e4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	68fa      	ldr	r2, [r7, #12]
 80083f4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80083f8:	f023 0303 	bic.w	r3, r3, #3
 80083fc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008404:	685b      	ldr	r3, [r3, #4]
 8008406:	68fa      	ldr	r2, [r7, #12]
 8008408:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800840c:	f043 0302 	orr.w	r3, r3, #2
 8008410:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008412:	2300      	movs	r3, #0
}
 8008414:	4618      	mov	r0, r3
 8008416:	3714      	adds	r7, #20
 8008418:	46bd      	mov	sp, r7
 800841a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800841e:	4770      	bx	lr

08008420 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8008420:	b480      	push	{r7}
 8008422:	b085      	sub	sp, #20
 8008424:	af00      	add	r7, sp, #0
 8008426:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	695b      	ldr	r3, [r3, #20]
 800842c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	699b      	ldr	r3, [r3, #24]
 8008432:	68fa      	ldr	r2, [r7, #12]
 8008434:	4013      	ands	r3, r2
 8008436:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8008438:	68fb      	ldr	r3, [r7, #12]
}
 800843a:	4618      	mov	r0, r3
 800843c:	3714      	adds	r7, #20
 800843e:	46bd      	mov	sp, r7
 8008440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008444:	4770      	bx	lr

08008446 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8008446:	b480      	push	{r7}
 8008448:	b085      	sub	sp, #20
 800844a:	af00      	add	r7, sp, #0
 800844c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008458:	699b      	ldr	r3, [r3, #24]
 800845a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008462:	69db      	ldr	r3, [r3, #28]
 8008464:	68ba      	ldr	r2, [r7, #8]
 8008466:	4013      	ands	r3, r2
 8008468:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800846a:	68bb      	ldr	r3, [r7, #8]
 800846c:	0c1b      	lsrs	r3, r3, #16
}
 800846e:	4618      	mov	r0, r3
 8008470:	3714      	adds	r7, #20
 8008472:	46bd      	mov	sp, r7
 8008474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008478:	4770      	bx	lr

0800847a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800847a:	b480      	push	{r7}
 800847c:	b085      	sub	sp, #20
 800847e:	af00      	add	r7, sp, #0
 8008480:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800848c:	699b      	ldr	r3, [r3, #24]
 800848e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008496:	69db      	ldr	r3, [r3, #28]
 8008498:	68ba      	ldr	r2, [r7, #8]
 800849a:	4013      	ands	r3, r2
 800849c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800849e:	68bb      	ldr	r3, [r7, #8]
 80084a0:	b29b      	uxth	r3, r3
}
 80084a2:	4618      	mov	r0, r3
 80084a4:	3714      	adds	r7, #20
 80084a6:	46bd      	mov	sp, r7
 80084a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ac:	4770      	bx	lr

080084ae <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80084ae:	b480      	push	{r7}
 80084b0:	b085      	sub	sp, #20
 80084b2:	af00      	add	r7, sp, #0
 80084b4:	6078      	str	r0, [r7, #4]
 80084b6:	460b      	mov	r3, r1
 80084b8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80084be:	78fb      	ldrb	r3, [r7, #3]
 80084c0:	015a      	lsls	r2, r3, #5
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	4413      	add	r3, r2
 80084c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80084ca:	689b      	ldr	r3, [r3, #8]
 80084cc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80084d4:	695b      	ldr	r3, [r3, #20]
 80084d6:	68ba      	ldr	r2, [r7, #8]
 80084d8:	4013      	ands	r3, r2
 80084da:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80084dc:	68bb      	ldr	r3, [r7, #8]
}
 80084de:	4618      	mov	r0, r3
 80084e0:	3714      	adds	r7, #20
 80084e2:	46bd      	mov	sp, r7
 80084e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e8:	4770      	bx	lr

080084ea <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80084ea:	b480      	push	{r7}
 80084ec:	b087      	sub	sp, #28
 80084ee:	af00      	add	r7, sp, #0
 80084f0:	6078      	str	r0, [r7, #4]
 80084f2:	460b      	mov	r3, r1
 80084f4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80084fa:	697b      	ldr	r3, [r7, #20]
 80084fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008500:	691b      	ldr	r3, [r3, #16]
 8008502:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8008504:	697b      	ldr	r3, [r7, #20]
 8008506:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800850a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800850c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800850e:	78fb      	ldrb	r3, [r7, #3]
 8008510:	f003 030f 	and.w	r3, r3, #15
 8008514:	68fa      	ldr	r2, [r7, #12]
 8008516:	fa22 f303 	lsr.w	r3, r2, r3
 800851a:	01db      	lsls	r3, r3, #7
 800851c:	b2db      	uxtb	r3, r3
 800851e:	693a      	ldr	r2, [r7, #16]
 8008520:	4313      	orrs	r3, r2
 8008522:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8008524:	78fb      	ldrb	r3, [r7, #3]
 8008526:	015a      	lsls	r2, r3, #5
 8008528:	697b      	ldr	r3, [r7, #20]
 800852a:	4413      	add	r3, r2
 800852c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008530:	689b      	ldr	r3, [r3, #8]
 8008532:	693a      	ldr	r2, [r7, #16]
 8008534:	4013      	ands	r3, r2
 8008536:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008538:	68bb      	ldr	r3, [r7, #8]
}
 800853a:	4618      	mov	r0, r3
 800853c:	371c      	adds	r7, #28
 800853e:	46bd      	mov	sp, r7
 8008540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008544:	4770      	bx	lr

08008546 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8008546:	b480      	push	{r7}
 8008548:	b083      	sub	sp, #12
 800854a:	af00      	add	r7, sp, #0
 800854c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	695b      	ldr	r3, [r3, #20]
 8008552:	f003 0301 	and.w	r3, r3, #1
}
 8008556:	4618      	mov	r0, r3
 8008558:	370c      	adds	r7, #12
 800855a:	46bd      	mov	sp, r7
 800855c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008560:	4770      	bx	lr

08008562 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8008562:	b480      	push	{r7}
 8008564:	b085      	sub	sp, #20
 8008566:	af00      	add	r7, sp, #0
 8008568:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	68fa      	ldr	r2, [r7, #12]
 8008578:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800857c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8008580:	f023 0307 	bic.w	r3, r3, #7
 8008584:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800858c:	685b      	ldr	r3, [r3, #4]
 800858e:	68fa      	ldr	r2, [r7, #12]
 8008590:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008594:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008598:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800859a:	2300      	movs	r3, #0
}
 800859c:	4618      	mov	r0, r3
 800859e:	3714      	adds	r7, #20
 80085a0:	46bd      	mov	sp, r7
 80085a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085a6:	4770      	bx	lr

080085a8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80085a8:	b480      	push	{r7}
 80085aa:	b087      	sub	sp, #28
 80085ac:	af00      	add	r7, sp, #0
 80085ae:	60f8      	str	r0, [r7, #12]
 80085b0:	460b      	mov	r3, r1
 80085b2:	607a      	str	r2, [r7, #4]
 80085b4:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	333c      	adds	r3, #60	; 0x3c
 80085be:	3304      	adds	r3, #4
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80085c4:	693b      	ldr	r3, [r7, #16]
 80085c6:	4a26      	ldr	r2, [pc, #152]	; (8008660 <USB_EP0_OutStart+0xb8>)
 80085c8:	4293      	cmp	r3, r2
 80085ca:	d90a      	bls.n	80085e2 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80085cc:	697b      	ldr	r3, [r7, #20]
 80085ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80085d8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80085dc:	d101      	bne.n	80085e2 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80085de:	2300      	movs	r3, #0
 80085e0:	e037      	b.n	8008652 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80085e2:	697b      	ldr	r3, [r7, #20]
 80085e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80085e8:	461a      	mov	r2, r3
 80085ea:	2300      	movs	r3, #0
 80085ec:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80085ee:	697b      	ldr	r3, [r7, #20]
 80085f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80085f4:	691b      	ldr	r3, [r3, #16]
 80085f6:	697a      	ldr	r2, [r7, #20]
 80085f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80085fc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008600:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8008602:	697b      	ldr	r3, [r7, #20]
 8008604:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008608:	691b      	ldr	r3, [r3, #16]
 800860a:	697a      	ldr	r2, [r7, #20]
 800860c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008610:	f043 0318 	orr.w	r3, r3, #24
 8008614:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8008616:	697b      	ldr	r3, [r7, #20]
 8008618:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800861c:	691b      	ldr	r3, [r3, #16]
 800861e:	697a      	ldr	r2, [r7, #20]
 8008620:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008624:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8008628:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800862a:	7afb      	ldrb	r3, [r7, #11]
 800862c:	2b01      	cmp	r3, #1
 800862e:	d10f      	bne.n	8008650 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8008630:	697b      	ldr	r3, [r7, #20]
 8008632:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008636:	461a      	mov	r2, r3
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800863c:	697b      	ldr	r3, [r7, #20]
 800863e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	697a      	ldr	r2, [r7, #20]
 8008646:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800864a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800864e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008650:	2300      	movs	r3, #0
}
 8008652:	4618      	mov	r0, r3
 8008654:	371c      	adds	r7, #28
 8008656:	46bd      	mov	sp, r7
 8008658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800865c:	4770      	bx	lr
 800865e:	bf00      	nop
 8008660:	4f54300a 	.word	0x4f54300a

08008664 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008664:	b480      	push	{r7}
 8008666:	b085      	sub	sp, #20
 8008668:	af00      	add	r7, sp, #0
 800866a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800866c:	2300      	movs	r3, #0
 800866e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	3301      	adds	r3, #1
 8008674:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	4a13      	ldr	r2, [pc, #76]	; (80086c8 <USB_CoreReset+0x64>)
 800867a:	4293      	cmp	r3, r2
 800867c:	d901      	bls.n	8008682 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800867e:	2303      	movs	r3, #3
 8008680:	e01b      	b.n	80086ba <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	691b      	ldr	r3, [r3, #16]
 8008686:	2b00      	cmp	r3, #0
 8008688:	daf2      	bge.n	8008670 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800868a:	2300      	movs	r3, #0
 800868c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	691b      	ldr	r3, [r3, #16]
 8008692:	f043 0201 	orr.w	r2, r3, #1
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	3301      	adds	r3, #1
 800869e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	4a09      	ldr	r2, [pc, #36]	; (80086c8 <USB_CoreReset+0x64>)
 80086a4:	4293      	cmp	r3, r2
 80086a6:	d901      	bls.n	80086ac <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80086a8:	2303      	movs	r3, #3
 80086aa:	e006      	b.n	80086ba <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	691b      	ldr	r3, [r3, #16]
 80086b0:	f003 0301 	and.w	r3, r3, #1
 80086b4:	2b01      	cmp	r3, #1
 80086b6:	d0f0      	beq.n	800869a <USB_CoreReset+0x36>

  return HAL_OK;
 80086b8:	2300      	movs	r3, #0
}
 80086ba:	4618      	mov	r0, r3
 80086bc:	3714      	adds	r7, #20
 80086be:	46bd      	mov	sp, r7
 80086c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c4:	4770      	bx	lr
 80086c6:	bf00      	nop
 80086c8:	00030d40 	.word	0x00030d40

080086cc <USBD_MSC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80086cc:	b580      	push	{r7, lr}
 80086ce:	b084      	sub	sp, #16
 80086d0:	af00      	add	r7, sp, #0
 80086d2:	6078      	str	r0, [r7, #4]
 80086d4:	460b      	mov	r3, r1
 80086d6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_MSC_BOT_HandleTypeDef *hmsc;

  hmsc = (USBD_MSC_BOT_HandleTypeDef *)USBD_malloc(sizeof(USBD_MSC_BOT_HandleTypeDef));
 80086d8:	f241 0074 	movw	r0, #4212	; 0x1074
 80086dc:	f004 f850 	bl	800c780 <USBD_static_malloc>
 80086e0:	60f8      	str	r0, [r7, #12]

  if (hmsc == NULL)
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d109      	bne.n	80086fc <USBD_MSC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	32b0      	adds	r2, #176	; 0xb0
 80086f2:	2100      	movs	r1, #0
 80086f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80086f8:	2302      	movs	r3, #2
 80086fa:	e06e      	b.n	80087da <USBD_MSC_Init+0x10e>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hmsc;
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	32b0      	adds	r2, #176	; 0xb0
 8008706:	68f9      	ldr	r1, [r7, #12]
 8008708:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	32b0      	adds	r2, #176	; 0xb0
 8008716:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	7c1b      	ldrb	r3, [r3, #16]
 8008724:	2b00      	cmp	r3, #0
 8008726:	d12b      	bne.n	8008780 <USBD_MSC_Init+0xb4>
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSCOutEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 8008728:	4b2e      	ldr	r3, [pc, #184]	; (80087e4 <USBD_MSC_Init+0x118>)
 800872a:	7819      	ldrb	r1, [r3, #0]
 800872c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008730:	2202      	movs	r2, #2
 8008732:	6878      	ldr	r0, [r7, #4]
 8008734:	f003 fee2 	bl	800c4fc <USBD_LL_OpenEP>
    pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 1U;
 8008738:	4b2a      	ldr	r3, [pc, #168]	; (80087e4 <USBD_MSC_Init+0x118>)
 800873a:	781b      	ldrb	r3, [r3, #0]
 800873c:	f003 020f 	and.w	r2, r3, #15
 8008740:	6879      	ldr	r1, [r7, #4]
 8008742:	4613      	mov	r3, r2
 8008744:	009b      	lsls	r3, r3, #2
 8008746:	4413      	add	r3, r2
 8008748:	009b      	lsls	r3, r3, #2
 800874a:	440b      	add	r3, r1
 800874c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008750:	2201      	movs	r2, #1
 8008752:	801a      	strh	r2, [r3, #0]

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSCInEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 8008754:	4b24      	ldr	r3, [pc, #144]	; (80087e8 <USBD_MSC_Init+0x11c>)
 8008756:	7819      	ldrb	r1, [r3, #0]
 8008758:	f44f 7300 	mov.w	r3, #512	; 0x200
 800875c:	2202      	movs	r2, #2
 800875e:	6878      	ldr	r0, [r7, #4]
 8008760:	f003 fecc 	bl	800c4fc <USBD_LL_OpenEP>
    pdev->ep_in[MSCInEpAdd & 0xFU].is_used = 1U;
 8008764:	4b20      	ldr	r3, [pc, #128]	; (80087e8 <USBD_MSC_Init+0x11c>)
 8008766:	781b      	ldrb	r3, [r3, #0]
 8008768:	f003 020f 	and.w	r2, r3, #15
 800876c:	6879      	ldr	r1, [r7, #4]
 800876e:	4613      	mov	r3, r2
 8008770:	009b      	lsls	r3, r3, #2
 8008772:	4413      	add	r3, r2
 8008774:	009b      	lsls	r3, r3, #2
 8008776:	440b      	add	r3, r1
 8008778:	3324      	adds	r3, #36	; 0x24
 800877a:	2201      	movs	r2, #1
 800877c:	801a      	strh	r2, [r3, #0]
 800877e:	e028      	b.n	80087d2 <USBD_MSC_Init+0x106>
  }
  else
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSCOutEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 8008780:	4b18      	ldr	r3, [pc, #96]	; (80087e4 <USBD_MSC_Init+0x118>)
 8008782:	7819      	ldrb	r1, [r3, #0]
 8008784:	2340      	movs	r3, #64	; 0x40
 8008786:	2202      	movs	r2, #2
 8008788:	6878      	ldr	r0, [r7, #4]
 800878a:	f003 feb7 	bl	800c4fc <USBD_LL_OpenEP>
    pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 1U;
 800878e:	4b15      	ldr	r3, [pc, #84]	; (80087e4 <USBD_MSC_Init+0x118>)
 8008790:	781b      	ldrb	r3, [r3, #0]
 8008792:	f003 020f 	and.w	r2, r3, #15
 8008796:	6879      	ldr	r1, [r7, #4]
 8008798:	4613      	mov	r3, r2
 800879a:	009b      	lsls	r3, r3, #2
 800879c:	4413      	add	r3, r2
 800879e:	009b      	lsls	r3, r3, #2
 80087a0:	440b      	add	r3, r1
 80087a2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80087a6:	2201      	movs	r2, #1
 80087a8:	801a      	strh	r2, [r3, #0]

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSCInEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 80087aa:	4b0f      	ldr	r3, [pc, #60]	; (80087e8 <USBD_MSC_Init+0x11c>)
 80087ac:	7819      	ldrb	r1, [r3, #0]
 80087ae:	2340      	movs	r3, #64	; 0x40
 80087b0:	2202      	movs	r2, #2
 80087b2:	6878      	ldr	r0, [r7, #4]
 80087b4:	f003 fea2 	bl	800c4fc <USBD_LL_OpenEP>
    pdev->ep_in[MSCInEpAdd & 0xFU].is_used = 1U;
 80087b8:	4b0b      	ldr	r3, [pc, #44]	; (80087e8 <USBD_MSC_Init+0x11c>)
 80087ba:	781b      	ldrb	r3, [r3, #0]
 80087bc:	f003 020f 	and.w	r2, r3, #15
 80087c0:	6879      	ldr	r1, [r7, #4]
 80087c2:	4613      	mov	r3, r2
 80087c4:	009b      	lsls	r3, r3, #2
 80087c6:	4413      	add	r3, r2
 80087c8:	009b      	lsls	r3, r3, #2
 80087ca:	440b      	add	r3, r1
 80087cc:	3324      	adds	r3, #36	; 0x24
 80087ce:	2201      	movs	r2, #1
 80087d0:	801a      	strh	r2, [r3, #0]
  }

  /* Init the BOT  layer */
  MSC_BOT_Init(pdev);
 80087d2:	6878      	ldr	r0, [r7, #4]
 80087d4:	f000 fa2c 	bl	8008c30 <MSC_BOT_Init>

  return (uint8_t)USBD_OK;
 80087d8:	2300      	movs	r3, #0
}
 80087da:	4618      	mov	r0, r3
 80087dc:	3710      	adds	r7, #16
 80087de:	46bd      	mov	sp, r7
 80087e0:	bd80      	pop	{r7, pc}
 80087e2:	bf00      	nop
 80087e4:	20000073 	.word	0x20000073
 80087e8:	20000072 	.word	0x20000072

080087ec <USBD_MSC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80087ec:	b580      	push	{r7, lr}
 80087ee:	b082      	sub	sp, #8
 80087f0:	af00      	add	r7, sp, #0
 80087f2:	6078      	str	r0, [r7, #4]
 80087f4:	460b      	mov	r3, r1
 80087f6:	70fb      	strb	r3, [r7, #3]
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  /* Close MSC EPs */
  (void)USBD_LL_CloseEP(pdev, MSCOutEpAdd);
 80087f8:	4b26      	ldr	r3, [pc, #152]	; (8008894 <USBD_MSC_DeInit+0xa8>)
 80087fa:	781b      	ldrb	r3, [r3, #0]
 80087fc:	4619      	mov	r1, r3
 80087fe:	6878      	ldr	r0, [r7, #4]
 8008800:	f003 fea2 	bl	800c548 <USBD_LL_CloseEP>
  pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 0U;
 8008804:	4b23      	ldr	r3, [pc, #140]	; (8008894 <USBD_MSC_DeInit+0xa8>)
 8008806:	781b      	ldrb	r3, [r3, #0]
 8008808:	f003 020f 	and.w	r2, r3, #15
 800880c:	6879      	ldr	r1, [r7, #4]
 800880e:	4613      	mov	r3, r2
 8008810:	009b      	lsls	r3, r3, #2
 8008812:	4413      	add	r3, r2
 8008814:	009b      	lsls	r3, r3, #2
 8008816:	440b      	add	r3, r1
 8008818:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800881c:	2200      	movs	r2, #0
 800881e:	801a      	strh	r2, [r3, #0]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, MSCInEpAdd);
 8008820:	4b1d      	ldr	r3, [pc, #116]	; (8008898 <USBD_MSC_DeInit+0xac>)
 8008822:	781b      	ldrb	r3, [r3, #0]
 8008824:	4619      	mov	r1, r3
 8008826:	6878      	ldr	r0, [r7, #4]
 8008828:	f003 fe8e 	bl	800c548 <USBD_LL_CloseEP>
  pdev->ep_in[MSCInEpAdd & 0xFU].is_used = 0U;
 800882c:	4b1a      	ldr	r3, [pc, #104]	; (8008898 <USBD_MSC_DeInit+0xac>)
 800882e:	781b      	ldrb	r3, [r3, #0]
 8008830:	f003 020f 	and.w	r2, r3, #15
 8008834:	6879      	ldr	r1, [r7, #4]
 8008836:	4613      	mov	r3, r2
 8008838:	009b      	lsls	r3, r3, #2
 800883a:	4413      	add	r3, r2
 800883c:	009b      	lsls	r3, r3, #2
 800883e:	440b      	add	r3, r1
 8008840:	3324      	adds	r3, #36	; 0x24
 8008842:	2200      	movs	r2, #0
 8008844:	801a      	strh	r2, [r3, #0]

  /* Free MSC Class Resources */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	32b0      	adds	r2, #176	; 0xb0
 8008850:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008854:	2b00      	cmp	r3, #0
 8008856:	d018      	beq.n	800888a <USBD_MSC_DeInit+0x9e>
  {
    /* De-Init the BOT layer */
    MSC_BOT_DeInit(pdev);
 8008858:	6878      	ldr	r0, [r7, #4]
 800885a:	f000 fa6f 	bl	8008d3c <MSC_BOT_DeInit>

    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	32b0      	adds	r2, #176	; 0xb0
 8008868:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800886c:	4618      	mov	r0, r3
 800886e:	f003 ff95 	bl	800c79c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId]  = NULL;
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	32b0      	adds	r2, #176	; 0xb0
 800887c:	2100      	movs	r1, #0
 800887e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	2200      	movs	r2, #0
 8008886:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800888a:	2300      	movs	r3, #0
}
 800888c:	4618      	mov	r0, r3
 800888e:	3708      	adds	r7, #8
 8008890:	46bd      	mov	sp, r7
 8008892:	bd80      	pop	{r7, pc}
 8008894:	20000073 	.word	0x20000073
 8008898:	20000072 	.word	0x20000072

0800889c <USBD_MSC_Setup>:
  * @param  pdev: device instance
  * @param  req: USB request
  * @retval status
  */
uint8_t USBD_MSC_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800889c:	b580      	push	{r7, lr}
 800889e:	b086      	sub	sp, #24
 80088a0:	af00      	add	r7, sp, #0
 80088a2:	6078      	str	r0, [r7, #4]
 80088a4:	6039      	str	r1, [r7, #0]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	32b0      	adds	r2, #176	; 0xb0
 80088b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80088b4:	613b      	str	r3, [r7, #16]
  USBD_StatusTypeDef ret = USBD_OK;
 80088b6:	2300      	movs	r3, #0
 80088b8:	75fb      	strb	r3, [r7, #23]
  uint16_t status_info = 0U;
 80088ba:	2300      	movs	r3, #0
 80088bc:	81fb      	strh	r3, [r7, #14]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 80088be:	693b      	ldr	r3, [r7, #16]
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d101      	bne.n	80088c8 <USBD_MSC_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 80088c4:	2303      	movs	r3, #3
 80088c6:	e0e1      	b.n	8008a8c <USBD_MSC_Setup+0x1f0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80088c8:	683b      	ldr	r3, [r7, #0]
 80088ca:	781b      	ldrb	r3, [r3, #0]
 80088cc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d053      	beq.n	800897c <USBD_MSC_Setup+0xe0>
 80088d4:	2b20      	cmp	r3, #32
 80088d6:	f040 80d1 	bne.w	8008a7c <USBD_MSC_Setup+0x1e0>
  {
    /* Class request */
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 80088da:	683b      	ldr	r3, [r7, #0]
 80088dc:	785b      	ldrb	r3, [r3, #1]
 80088de:	2bfe      	cmp	r3, #254	; 0xfe
 80088e0:	d002      	beq.n	80088e8 <USBD_MSC_Setup+0x4c>
 80088e2:	2bff      	cmp	r3, #255	; 0xff
 80088e4:	d02a      	beq.n	800893c <USBD_MSC_Setup+0xa0>
 80088e6:	e041      	b.n	800896c <USBD_MSC_Setup+0xd0>
      {
        case BOT_GET_MAX_LUN:
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 80088e8:	683b      	ldr	r3, [r7, #0]
 80088ea:	885b      	ldrh	r3, [r3, #2]
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d11e      	bne.n	800892e <USBD_MSC_Setup+0x92>
 80088f0:	683b      	ldr	r3, [r7, #0]
 80088f2:	88db      	ldrh	r3, [r3, #6]
 80088f4:	2b01      	cmp	r3, #1
 80088f6:	d11a      	bne.n	800892e <USBD_MSC_Setup+0x92>
              ((req->bmRequest & 0x80U) == 0x80U))
 80088f8:	683b      	ldr	r3, [r7, #0]
 80088fa:	781b      	ldrb	r3, [r3, #0]
 80088fc:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 80088fe:	2b00      	cmp	r3, #0
 8008900:	da15      	bge.n	800892e <USBD_MSC_Setup+0x92>
          {
            hmsc->max_lun = (uint32_t)((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetMaxLun();
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008908:	687a      	ldr	r2, [r7, #4]
 800890a:	33b0      	adds	r3, #176	; 0xb0
 800890c:	009b      	lsls	r3, r3, #2
 800890e:	4413      	add	r3, r2
 8008910:	685b      	ldr	r3, [r3, #4]
 8008912:	699b      	ldr	r3, [r3, #24]
 8008914:	4798      	blx	r3
 8008916:	4603      	mov	r3, r0
 8008918:	461a      	mov	r2, r3
 800891a:	693b      	ldr	r3, [r7, #16]
 800891c:	601a      	str	r2, [r3, #0]
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->max_lun, 1U);
 800891e:	693b      	ldr	r3, [r7, #16]
 8008920:	2201      	movs	r2, #1
 8008922:	4619      	mov	r1, r3
 8008924:	6878      	ldr	r0, [r7, #4]
 8008926:	f003 f9f3 	bl	800bd10 <USBD_CtlSendData>
 800892a:	bf00      	nop
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800892c:	e025      	b.n	800897a <USBD_MSC_Setup+0xde>
            USBD_CtlError(pdev, req);
 800892e:	6839      	ldr	r1, [r7, #0]
 8008930:	6878      	ldr	r0, [r7, #4]
 8008932:	f003 f97c 	bl	800bc2e <USBD_CtlError>
            ret = USBD_FAIL;
 8008936:	2303      	movs	r3, #3
 8008938:	75fb      	strb	r3, [r7, #23]
          break;
 800893a:	e01e      	b.n	800897a <USBD_MSC_Setup+0xde>

        case BOT_RESET :
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 800893c:	683b      	ldr	r3, [r7, #0]
 800893e:	885b      	ldrh	r3, [r3, #2]
 8008940:	2b00      	cmp	r3, #0
 8008942:	d10c      	bne.n	800895e <USBD_MSC_Setup+0xc2>
 8008944:	683b      	ldr	r3, [r7, #0]
 8008946:	88db      	ldrh	r3, [r3, #6]
 8008948:	2b00      	cmp	r3, #0
 800894a:	d108      	bne.n	800895e <USBD_MSC_Setup+0xc2>
              ((req->bmRequest & 0x80U) != 0x80U))
 800894c:	683b      	ldr	r3, [r7, #0]
 800894e:	781b      	ldrb	r3, [r3, #0]
 8008950:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 8008952:	2b00      	cmp	r3, #0
 8008954:	db03      	blt.n	800895e <USBD_MSC_Setup+0xc2>
          {
            MSC_BOT_Reset(pdev);
 8008956:	6878      	ldr	r0, [r7, #4]
 8008958:	f000 f9bc 	bl	8008cd4 <MSC_BOT_Reset>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800895c:	e00d      	b.n	800897a <USBD_MSC_Setup+0xde>
            USBD_CtlError(pdev, req);
 800895e:	6839      	ldr	r1, [r7, #0]
 8008960:	6878      	ldr	r0, [r7, #4]
 8008962:	f003 f964 	bl	800bc2e <USBD_CtlError>
            ret = USBD_FAIL;
 8008966:	2303      	movs	r3, #3
 8008968:	75fb      	strb	r3, [r7, #23]
          break;
 800896a:	e006      	b.n	800897a <USBD_MSC_Setup+0xde>

        default:
          USBD_CtlError(pdev, req);
 800896c:	6839      	ldr	r1, [r7, #0]
 800896e:	6878      	ldr	r0, [r7, #4]
 8008970:	f003 f95d 	bl	800bc2e <USBD_CtlError>
          ret = USBD_FAIL;
 8008974:	2303      	movs	r3, #3
 8008976:	75fb      	strb	r3, [r7, #23]
          break;
 8008978:	bf00      	nop
      }
      break;
 800897a:	e086      	b.n	8008a8a <USBD_MSC_Setup+0x1ee>
    /* Interface & Endpoint request */
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800897c:	683b      	ldr	r3, [r7, #0]
 800897e:	785b      	ldrb	r3, [r3, #1]
 8008980:	2b0b      	cmp	r3, #11
 8008982:	d872      	bhi.n	8008a6a <USBD_MSC_Setup+0x1ce>
 8008984:	a201      	add	r2, pc, #4	; (adr r2, 800898c <USBD_MSC_Setup+0xf0>)
 8008986:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800898a:	bf00      	nop
 800898c:	080089bd 	.word	0x080089bd
 8008990:	08008a39 	.word	0x08008a39
 8008994:	08008a6b 	.word	0x08008a6b
 8008998:	08008a6b 	.word	0x08008a6b
 800899c:	08008a6b 	.word	0x08008a6b
 80089a0:	08008a6b 	.word	0x08008a6b
 80089a4:	08008a6b 	.word	0x08008a6b
 80089a8:	08008a6b 	.word	0x08008a6b
 80089ac:	08008a6b 	.word	0x08008a6b
 80089b0:	08008a6b 	.word	0x08008a6b
 80089b4:	080089e7 	.word	0x080089e7
 80089b8:	08008a11 	.word	0x08008a11
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80089c2:	b2db      	uxtb	r3, r3
 80089c4:	2b03      	cmp	r3, #3
 80089c6:	d107      	bne.n	80089d8 <USBD_MSC_Setup+0x13c>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80089c8:	f107 030e 	add.w	r3, r7, #14
 80089cc:	2202      	movs	r2, #2
 80089ce:	4619      	mov	r1, r3
 80089d0:	6878      	ldr	r0, [r7, #4]
 80089d2:	f003 f99d 	bl	800bd10 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80089d6:	e050      	b.n	8008a7a <USBD_MSC_Setup+0x1de>
            USBD_CtlError(pdev, req);
 80089d8:	6839      	ldr	r1, [r7, #0]
 80089da:	6878      	ldr	r0, [r7, #4]
 80089dc:	f003 f927 	bl	800bc2e <USBD_CtlError>
            ret = USBD_FAIL;
 80089e0:	2303      	movs	r3, #3
 80089e2:	75fb      	strb	r3, [r7, #23]
          break;
 80089e4:	e049      	b.n	8008a7a <USBD_MSC_Setup+0x1de>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80089ec:	b2db      	uxtb	r3, r3
 80089ee:	2b03      	cmp	r3, #3
 80089f0:	d107      	bne.n	8008a02 <USBD_MSC_Setup+0x166>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->interface, 1U);
 80089f2:	693b      	ldr	r3, [r7, #16]
 80089f4:	3304      	adds	r3, #4
 80089f6:	2201      	movs	r2, #1
 80089f8:	4619      	mov	r1, r3
 80089fa:	6878      	ldr	r0, [r7, #4]
 80089fc:	f003 f988 	bl	800bd10 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008a00:	e03b      	b.n	8008a7a <USBD_MSC_Setup+0x1de>
            USBD_CtlError(pdev, req);
 8008a02:	6839      	ldr	r1, [r7, #0]
 8008a04:	6878      	ldr	r0, [r7, #4]
 8008a06:	f003 f912 	bl	800bc2e <USBD_CtlError>
            ret = USBD_FAIL;
 8008a0a:	2303      	movs	r3, #3
 8008a0c:	75fb      	strb	r3, [r7, #23]
          break;
 8008a0e:	e034      	b.n	8008a7a <USBD_MSC_Setup+0x1de>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a16:	b2db      	uxtb	r3, r3
 8008a18:	2b03      	cmp	r3, #3
 8008a1a:	d106      	bne.n	8008a2a <USBD_MSC_Setup+0x18e>
          {
            hmsc->interface = (uint8_t)(req->wValue);
 8008a1c:	683b      	ldr	r3, [r7, #0]
 8008a1e:	885b      	ldrh	r3, [r3, #2]
 8008a20:	b2db      	uxtb	r3, r3
 8008a22:	461a      	mov	r2, r3
 8008a24:	693b      	ldr	r3, [r7, #16]
 8008a26:	605a      	str	r2, [r3, #4]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008a28:	e027      	b.n	8008a7a <USBD_MSC_Setup+0x1de>
            USBD_CtlError(pdev, req);
 8008a2a:	6839      	ldr	r1, [r7, #0]
 8008a2c:	6878      	ldr	r0, [r7, #4]
 8008a2e:	f003 f8fe 	bl	800bc2e <USBD_CtlError>
            ret = USBD_FAIL;
 8008a32:	2303      	movs	r3, #3
 8008a34:	75fb      	strb	r3, [r7, #23]
          break;
 8008a36:	e020      	b.n	8008a7a <USBD_MSC_Setup+0x1de>

        case USB_REQ_CLEAR_FEATURE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a3e:	b2db      	uxtb	r3, r3
 8008a40:	2b03      	cmp	r3, #3
 8008a42:	d119      	bne.n	8008a78 <USBD_MSC_Setup+0x1dc>
          {
            if (req->wValue == USB_FEATURE_EP_HALT)
 8008a44:	683b      	ldr	r3, [r7, #0]
 8008a46:	885b      	ldrh	r3, [r3, #2]
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d115      	bne.n	8008a78 <USBD_MSC_Setup+0x1dc>
            {
              /* Flush the FIFO */
              (void)USBD_LL_FlushEP(pdev, (uint8_t)req->wIndex);
 8008a4c:	683b      	ldr	r3, [r7, #0]
 8008a4e:	889b      	ldrh	r3, [r3, #4]
 8008a50:	b2db      	uxtb	r3, r3
 8008a52:	4619      	mov	r1, r3
 8008a54:	6878      	ldr	r0, [r7, #4]
 8008a56:	f003 fd96 	bl	800c586 <USBD_LL_FlushEP>

              /* Handle BOT error */
              MSC_BOT_CplClrFeature(pdev, (uint8_t)req->wIndex);
 8008a5a:	683b      	ldr	r3, [r7, #0]
 8008a5c:	889b      	ldrh	r3, [r3, #4]
 8008a5e:	b2db      	uxtb	r3, r3
 8008a60:	4619      	mov	r1, r3
 8008a62:	6878      	ldr	r0, [r7, #4]
 8008a64:	f000 fb54 	bl	8009110 <MSC_BOT_CplClrFeature>
            }
          }
          break;
 8008a68:	e006      	b.n	8008a78 <USBD_MSC_Setup+0x1dc>

        default:
          USBD_CtlError(pdev, req);
 8008a6a:	6839      	ldr	r1, [r7, #0]
 8008a6c:	6878      	ldr	r0, [r7, #4]
 8008a6e:	f003 f8de 	bl	800bc2e <USBD_CtlError>
          ret = USBD_FAIL;
 8008a72:	2303      	movs	r3, #3
 8008a74:	75fb      	strb	r3, [r7, #23]
          break;
 8008a76:	e000      	b.n	8008a7a <USBD_MSC_Setup+0x1de>
          break;
 8008a78:	bf00      	nop
      }
      break;
 8008a7a:	e006      	b.n	8008a8a <USBD_MSC_Setup+0x1ee>

    default:
      USBD_CtlError(pdev, req);
 8008a7c:	6839      	ldr	r1, [r7, #0]
 8008a7e:	6878      	ldr	r0, [r7, #4]
 8008a80:	f003 f8d5 	bl	800bc2e <USBD_CtlError>
      ret = USBD_FAIL;
 8008a84:	2303      	movs	r3, #3
 8008a86:	75fb      	strb	r3, [r7, #23]
      break;
 8008a88:	bf00      	nop
  }

  return (uint8_t)ret;
 8008a8a:	7dfb      	ldrb	r3, [r7, #23]
}
 8008a8c:	4618      	mov	r0, r3
 8008a8e:	3718      	adds	r7, #24
 8008a90:	46bd      	mov	sp, r7
 8008a92:	bd80      	pop	{r7, pc}

08008a94 <USBD_MSC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
uint8_t USBD_MSC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008a94:	b580      	push	{r7, lr}
 8008a96:	b082      	sub	sp, #8
 8008a98:	af00      	add	r7, sp, #0
 8008a9a:	6078      	str	r0, [r7, #4]
 8008a9c:	460b      	mov	r3, r1
 8008a9e:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataIn(pdev, epnum);
 8008aa0:	78fb      	ldrb	r3, [r7, #3]
 8008aa2:	4619      	mov	r1, r3
 8008aa4:	6878      	ldr	r0, [r7, #4]
 8008aa6:	f000 f961 	bl	8008d6c <MSC_BOT_DataIn>

  return (uint8_t)USBD_OK;
 8008aaa:	2300      	movs	r3, #0
}
 8008aac:	4618      	mov	r0, r3
 8008aae:	3708      	adds	r7, #8
 8008ab0:	46bd      	mov	sp, r7
 8008ab2:	bd80      	pop	{r7, pc}

08008ab4 <USBD_MSC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
uint8_t USBD_MSC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008ab4:	b580      	push	{r7, lr}
 8008ab6:	b082      	sub	sp, #8
 8008ab8:	af00      	add	r7, sp, #0
 8008aba:	6078      	str	r0, [r7, #4]
 8008abc:	460b      	mov	r3, r1
 8008abe:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataOut(pdev, epnum);
 8008ac0:	78fb      	ldrb	r3, [r7, #3]
 8008ac2:	4619      	mov	r1, r3
 8008ac4:	6878      	ldr	r0, [r7, #4]
 8008ac6:	f000 f98d 	bl	8008de4 <MSC_BOT_DataOut>

  return (uint8_t)USBD_OK;
 8008aca:	2300      	movs	r3, #0
}
 8008acc:	4618      	mov	r0, r3
 8008ace:	3708      	adds	r7, #8
 8008ad0:	46bd      	mov	sp, r7
 8008ad2:	bd80      	pop	{r7, pc}

08008ad4 <USBD_MSC_GetHSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetHSCfgDesc(uint16_t *length)
{
 8008ad4:	b580      	push	{r7, lr}
 8008ad6:	b084      	sub	sp, #16
 8008ad8:	af00      	add	r7, sp, #0
 8008ada:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPIN_ADDR);
 8008adc:	2181      	movs	r1, #129	; 0x81
 8008ade:	4812      	ldr	r0, [pc, #72]	; (8008b28 <USBD_MSC_GetHSCfgDesc+0x54>)
 8008ae0:	f002 fa6d 	bl	800afbe <USBD_GetEpDesc>
 8008ae4:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPOUT_ADDR);
 8008ae6:	2101      	movs	r1, #1
 8008ae8:	480f      	ldr	r0, [pc, #60]	; (8008b28 <USBD_MSC_GetHSCfgDesc+0x54>)
 8008aea:	f002 fa68 	bl	800afbe <USBD_GetEpDesc>
 8008aee:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d006      	beq.n	8008b04 <USBD_MSC_GetHSCfgDesc+0x30>
  {
    pEpInDesc->wMaxPacketSize = MSC_MAX_HS_PACKET;
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	2200      	movs	r2, #0
 8008afa:	711a      	strb	r2, [r3, #4]
 8008afc:	2200      	movs	r2, #0
 8008afe:	f042 0202 	orr.w	r2, r2, #2
 8008b02:	715a      	strb	r2, [r3, #5]
  }

  if (pEpOutDesc != NULL)
 8008b04:	68bb      	ldr	r3, [r7, #8]
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d006      	beq.n	8008b18 <USBD_MSC_GetHSCfgDesc+0x44>
  {
    pEpOutDesc->wMaxPacketSize = MSC_MAX_HS_PACKET;
 8008b0a:	68bb      	ldr	r3, [r7, #8]
 8008b0c:	2200      	movs	r2, #0
 8008b0e:	711a      	strb	r2, [r3, #4]
 8008b10:	2200      	movs	r2, #0
 8008b12:	f042 0202 	orr.w	r2, r2, #2
 8008b16:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_MSC_CfgDesc);
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	2220      	movs	r2, #32
 8008b1c:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CfgDesc;
 8008b1e:	4b02      	ldr	r3, [pc, #8]	; (8008b28 <USBD_MSC_GetHSCfgDesc+0x54>)
}
 8008b20:	4618      	mov	r0, r3
 8008b22:	3710      	adds	r7, #16
 8008b24:	46bd      	mov	sp, r7
 8008b26:	bd80      	pop	{r7, pc}
 8008b28:	20000048 	.word	0x20000048

08008b2c <USBD_MSC_GetFSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetFSCfgDesc(uint16_t *length)
{
 8008b2c:	b580      	push	{r7, lr}
 8008b2e:	b084      	sub	sp, #16
 8008b30:	af00      	add	r7, sp, #0
 8008b32:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPIN_ADDR);
 8008b34:	2181      	movs	r1, #129	; 0x81
 8008b36:	4812      	ldr	r0, [pc, #72]	; (8008b80 <USBD_MSC_GetFSCfgDesc+0x54>)
 8008b38:	f002 fa41 	bl	800afbe <USBD_GetEpDesc>
 8008b3c:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPOUT_ADDR);
 8008b3e:	2101      	movs	r1, #1
 8008b40:	480f      	ldr	r0, [pc, #60]	; (8008b80 <USBD_MSC_GetFSCfgDesc+0x54>)
 8008b42:	f002 fa3c 	bl	800afbe <USBD_GetEpDesc>
 8008b46:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d006      	beq.n	8008b5c <USBD_MSC_GetFSCfgDesc+0x30>
  {
    pEpInDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	2200      	movs	r2, #0
 8008b52:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008b56:	711a      	strb	r2, [r3, #4]
 8008b58:	2200      	movs	r2, #0
 8008b5a:	715a      	strb	r2, [r3, #5]
  }

  if (pEpOutDesc != NULL)
 8008b5c:	68bb      	ldr	r3, [r7, #8]
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d006      	beq.n	8008b70 <USBD_MSC_GetFSCfgDesc+0x44>
  {
    pEpOutDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 8008b62:	68bb      	ldr	r3, [r7, #8]
 8008b64:	2200      	movs	r2, #0
 8008b66:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008b6a:	711a      	strb	r2, [r3, #4]
 8008b6c:	2200      	movs	r2, #0
 8008b6e:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_MSC_CfgDesc);
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	2220      	movs	r2, #32
 8008b74:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CfgDesc;
 8008b76:	4b02      	ldr	r3, [pc, #8]	; (8008b80 <USBD_MSC_GetFSCfgDesc+0x54>)
}
 8008b78:	4618      	mov	r0, r3
 8008b7a:	3710      	adds	r7, #16
 8008b7c:	46bd      	mov	sp, r7
 8008b7e:	bd80      	pop	{r7, pc}
 8008b80:	20000048 	.word	0x20000048

08008b84 <USBD_MSC_GetOtherSpeedCfgDesc>:
  *         return other speed configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008b84:	b580      	push	{r7, lr}
 8008b86:	b084      	sub	sp, #16
 8008b88:	af00      	add	r7, sp, #0
 8008b8a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPIN_ADDR);
 8008b8c:	2181      	movs	r1, #129	; 0x81
 8008b8e:	4812      	ldr	r0, [pc, #72]	; (8008bd8 <USBD_MSC_GetOtherSpeedCfgDesc+0x54>)
 8008b90:	f002 fa15 	bl	800afbe <USBD_GetEpDesc>
 8008b94:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPOUT_ADDR);
 8008b96:	2101      	movs	r1, #1
 8008b98:	480f      	ldr	r0, [pc, #60]	; (8008bd8 <USBD_MSC_GetOtherSpeedCfgDesc+0x54>)
 8008b9a:	f002 fa10 	bl	800afbe <USBD_GetEpDesc>
 8008b9e:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d006      	beq.n	8008bb4 <USBD_MSC_GetOtherSpeedCfgDesc+0x30>
  {
    pEpInDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	2200      	movs	r2, #0
 8008baa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008bae:	711a      	strb	r2, [r3, #4]
 8008bb0:	2200      	movs	r2, #0
 8008bb2:	715a      	strb	r2, [r3, #5]
  }

  if (pEpOutDesc != NULL)
 8008bb4:	68bb      	ldr	r3, [r7, #8]
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d006      	beq.n	8008bc8 <USBD_MSC_GetOtherSpeedCfgDesc+0x44>
  {
    pEpOutDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 8008bba:	68bb      	ldr	r3, [r7, #8]
 8008bbc:	2200      	movs	r2, #0
 8008bbe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008bc2:	711a      	strb	r2, [r3, #4]
 8008bc4:	2200      	movs	r2, #0
 8008bc6:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_MSC_CfgDesc);
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	2220      	movs	r2, #32
 8008bcc:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CfgDesc;
 8008bce:	4b02      	ldr	r3, [pc, #8]	; (8008bd8 <USBD_MSC_GetOtherSpeedCfgDesc+0x54>)
}
 8008bd0:	4618      	mov	r0, r3
 8008bd2:	3710      	adds	r7, #16
 8008bd4:	46bd      	mov	sp, r7
 8008bd6:	bd80      	pop	{r7, pc}
 8008bd8:	20000048 	.word	0x20000048

08008bdc <USBD_MSC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8008bdc:	b480      	push	{r7}
 8008bde:	b083      	sub	sp, #12
 8008be0:	af00      	add	r7, sp, #0
 8008be2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_DeviceQualifierDesc);
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	220a      	movs	r2, #10
 8008be8:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_DeviceQualifierDesc;
 8008bea:	4b03      	ldr	r3, [pc, #12]	; (8008bf8 <USBD_MSC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008bec:	4618      	mov	r0, r3
 8008bee:	370c      	adds	r7, #12
 8008bf0:	46bd      	mov	sp, r7
 8008bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bf6:	4770      	bx	lr
 8008bf8:	20000068 	.word	0x20000068

08008bfc <USBD_MSC_RegisterStorage>:
  * @brief  USBD_MSC_RegisterStorage
  * @param  fops: storage callback
  * @retval status
  */
uint8_t USBD_MSC_RegisterStorage(USBD_HandleTypeDef *pdev, USBD_StorageTypeDef *fops)
{
 8008bfc:	b480      	push	{r7}
 8008bfe:	b083      	sub	sp, #12
 8008c00:	af00      	add	r7, sp, #0
 8008c02:	6078      	str	r0, [r7, #4]
 8008c04:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8008c06:	683b      	ldr	r3, [r7, #0]
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d101      	bne.n	8008c10 <USBD_MSC_RegisterStorage+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8008c0c:	2303      	movs	r3, #3
 8008c0e:	e009      	b.n	8008c24 <USBD_MSC_RegisterStorage+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008c16:	687a      	ldr	r2, [r7, #4]
 8008c18:	33b0      	adds	r3, #176	; 0xb0
 8008c1a:	009b      	lsls	r3, r3, #2
 8008c1c:	4413      	add	r3, r2
 8008c1e:	683a      	ldr	r2, [r7, #0]
 8008c20:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8008c22:	2300      	movs	r3, #0
}
 8008c24:	4618      	mov	r0, r3
 8008c26:	370c      	adds	r7, #12
 8008c28:	46bd      	mov	sp, r7
 8008c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c2e:	4770      	bx	lr

08008c30 <MSC_BOT_Init>:
  *         Initialize the BOT Process
  * @param  pdev: device instance
  * @retval None
  */
void MSC_BOT_Init(USBD_HandleTypeDef *pdev)
{
 8008c30:	b580      	push	{r7, lr}
 8008c32:	b084      	sub	sp, #16
 8008c34:	af00      	add	r7, sp, #0
 8008c36:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	32b0      	adds	r2, #176	; 0xb0
 8008c42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c46:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d039      	beq.n	8008cc2 <MSC_BOT_Init+0x92>
  {
    return;
  }

  hmsc->bot_state = USBD_BOT_IDLE;
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	2200      	movs	r2, #0
 8008c52:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	2200      	movs	r2, #0
 8008c58:	725a      	strb	r2, [r3, #9]

  hmsc->scsi_sense_tail = 0U;
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008c60:	2200      	movs	r2, #0
 8008c62:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
  hmsc->scsi_sense_head = 0U;
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008c6c:	2200      	movs	r2, #0
 8008c6e:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
  hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008c78:	2200      	movs	r2, #0
 8008c7a:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62

  ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Init(0U);
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008c84:	687a      	ldr	r2, [r7, #4]
 8008c86:	33b0      	adds	r3, #176	; 0xb0
 8008c88:	009b      	lsls	r3, r3, #2
 8008c8a:	4413      	add	r3, r2
 8008c8c:	685b      	ldr	r3, [r3, #4]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	2000      	movs	r0, #0
 8008c92:	4798      	blx	r3

  (void)USBD_LL_FlushEP(pdev, MSCOutEpAdd);
 8008c94:	4b0d      	ldr	r3, [pc, #52]	; (8008ccc <MSC_BOT_Init+0x9c>)
 8008c96:	781b      	ldrb	r3, [r3, #0]
 8008c98:	4619      	mov	r1, r3
 8008c9a:	6878      	ldr	r0, [r7, #4]
 8008c9c:	f003 fc73 	bl	800c586 <USBD_LL_FlushEP>
  (void)USBD_LL_FlushEP(pdev, MSCInEpAdd);
 8008ca0:	4b0b      	ldr	r3, [pc, #44]	; (8008cd0 <MSC_BOT_Init+0xa0>)
 8008ca2:	781b      	ldrb	r3, [r3, #0]
 8008ca4:	4619      	mov	r1, r3
 8008ca6:	6878      	ldr	r0, [r7, #4]
 8008ca8:	f003 fc6d 	bl	800c586 <USBD_LL_FlushEP>

  /* Prepare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 8008cac:	4b07      	ldr	r3, [pc, #28]	; (8008ccc <MSC_BOT_Init+0x9c>)
 8008cae:	7819      	ldrb	r1, [r3, #0]
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 8008cb6:	3210      	adds	r2, #16
 8008cb8:	231f      	movs	r3, #31
 8008cba:	6878      	ldr	r0, [r7, #4]
 8008cbc:	f003 fd2c 	bl	800c718 <USBD_LL_PrepareReceive>
 8008cc0:	e000      	b.n	8008cc4 <MSC_BOT_Init+0x94>
    return;
 8008cc2:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 8008cc4:	3710      	adds	r7, #16
 8008cc6:	46bd      	mov	sp, r7
 8008cc8:	bd80      	pop	{r7, pc}
 8008cca:	bf00      	nop
 8008ccc:	20000073 	.word	0x20000073
 8008cd0:	20000072 	.word	0x20000072

08008cd4 <MSC_BOT_Reset>:
  *         Reset the BOT Machine
  * @param  pdev: device instance
  * @retval  None
  */
void MSC_BOT_Reset(USBD_HandleTypeDef *pdev)
{
 8008cd4:	b580      	push	{r7, lr}
 8008cd6:	b084      	sub	sp, #16
 8008cd8:	af00      	add	r7, sp, #0
 8008cda:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	32b0      	adds	r2, #176	; 0xb0
 8008ce6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008cea:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d01c      	beq.n	8008d2c <MSC_BOT_Reset+0x58>
  {
    return;
  }

  hmsc->bot_state  = USBD_BOT_IDLE;
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	2200      	movs	r2, #0
 8008cf6:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_RECOVERY;
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	2201      	movs	r2, #1
 8008cfc:	725a      	strb	r2, [r3, #9]

  (void)USBD_LL_ClearStallEP(pdev, MSCInEpAdd);
 8008cfe:	4b0d      	ldr	r3, [pc, #52]	; (8008d34 <MSC_BOT_Reset+0x60>)
 8008d00:	781b      	ldrb	r3, [r3, #0]
 8008d02:	4619      	mov	r1, r3
 8008d04:	6878      	ldr	r0, [r7, #4]
 8008d06:	f003 fc7c 	bl	800c602 <USBD_LL_ClearStallEP>
  (void)USBD_LL_ClearStallEP(pdev, MSCOutEpAdd);
 8008d0a:	4b0b      	ldr	r3, [pc, #44]	; (8008d38 <MSC_BOT_Reset+0x64>)
 8008d0c:	781b      	ldrb	r3, [r3, #0]
 8008d0e:	4619      	mov	r1, r3
 8008d10:	6878      	ldr	r0, [r7, #4]
 8008d12:	f003 fc76 	bl	800c602 <USBD_LL_ClearStallEP>

  /* Prepare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 8008d16:	4b08      	ldr	r3, [pc, #32]	; (8008d38 <MSC_BOT_Reset+0x64>)
 8008d18:	7819      	ldrb	r1, [r3, #0]
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 8008d20:	3210      	adds	r2, #16
 8008d22:	231f      	movs	r3, #31
 8008d24:	6878      	ldr	r0, [r7, #4]
 8008d26:	f003 fcf7 	bl	800c718 <USBD_LL_PrepareReceive>
 8008d2a:	e000      	b.n	8008d2e <MSC_BOT_Reset+0x5a>
    return;
 8008d2c:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 8008d2e:	3710      	adds	r7, #16
 8008d30:	46bd      	mov	sp, r7
 8008d32:	bd80      	pop	{r7, pc}
 8008d34:	20000072 	.word	0x20000072
 8008d38:	20000073 	.word	0x20000073

08008d3c <MSC_BOT_DeInit>:
  *         DeInitialize the BOT Machine
  * @param  pdev: device instance
  * @retval None
  */
void MSC_BOT_DeInit(USBD_HandleTypeDef  *pdev)
{
 8008d3c:	b480      	push	{r7}
 8008d3e:	b085      	sub	sp, #20
 8008d40:	af00      	add	r7, sp, #0
 8008d42:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	32b0      	adds	r2, #176	; 0xb0
 8008d4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d52:	60fb      	str	r3, [r7, #12]

  if (hmsc != NULL)
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d002      	beq.n	8008d60 <MSC_BOT_DeInit+0x24>
  {
    hmsc->bot_state = USBD_BOT_IDLE;
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	2200      	movs	r2, #0
 8008d5e:	721a      	strb	r2, [r3, #8]
  }
}
 8008d60:	bf00      	nop
 8008d62:	3714      	adds	r7, #20
 8008d64:	46bd      	mov	sp, r7
 8008d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d6a:	4770      	bx	lr

08008d6c <MSC_BOT_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval None
  */
void MSC_BOT_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008d6c:	b580      	push	{r7, lr}
 8008d6e:	b084      	sub	sp, #16
 8008d70:	af00      	add	r7, sp, #0
 8008d72:	6078      	str	r0, [r7, #4]
 8008d74:	460b      	mov	r3, r1
 8008d76:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	32b0      	adds	r2, #176	; 0xb0
 8008d82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d86:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d022      	beq.n	8008dd4 <MSC_BOT_DataIn+0x68>
  {
    return;
  }

  switch (hmsc->bot_state)
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	7a1b      	ldrb	r3, [r3, #8]
 8008d92:	2b02      	cmp	r3, #2
 8008d94:	d005      	beq.n	8008da2 <MSC_BOT_DataIn+0x36>
 8008d96:	2b02      	cmp	r3, #2
 8008d98:	db1e      	blt.n	8008dd8 <MSC_BOT_DataIn+0x6c>
 8008d9a:	3b03      	subs	r3, #3
 8008d9c:	2b01      	cmp	r3, #1
 8008d9e:	d81b      	bhi.n	8008dd8 <MSC_BOT_DataIn+0x6c>
 8008da0:	e013      	b.n	8008dca <MSC_BOT_DataIn+0x5e>
  {
    case USBD_BOT_DATA_IN:
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008da8:	7f59      	ldrb	r1, [r3, #29]
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008db0:	331f      	adds	r3, #31
 8008db2:	461a      	mov	r2, r3
 8008db4:	6878      	ldr	r0, [r7, #4]
 8008db6:	f000 f9e5 	bl	8009184 <SCSI_ProcessCmd>
 8008dba:	4603      	mov	r3, r0
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	da0d      	bge.n	8008ddc <MSC_BOT_DataIn+0x70>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8008dc0:	2101      	movs	r1, #1
 8008dc2:	6878      	ldr	r0, [r7, #4]
 8008dc4:	f000 f920 	bl	8009008 <MSC_BOT_SendCSW>
      }
      break;
 8008dc8:	e008      	b.n	8008ddc <MSC_BOT_DataIn+0x70>

    case USBD_BOT_SEND_DATA:
    case USBD_BOT_LAST_DATA_IN:
      MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8008dca:	2100      	movs	r1, #0
 8008dcc:	6878      	ldr	r0, [r7, #4]
 8008dce:	f000 f91b 	bl	8009008 <MSC_BOT_SendCSW>
      break;
 8008dd2:	e004      	b.n	8008dde <MSC_BOT_DataIn+0x72>
    return;
 8008dd4:	bf00      	nop
 8008dd6:	e002      	b.n	8008dde <MSC_BOT_DataIn+0x72>

    default:
      break;
 8008dd8:	bf00      	nop
 8008dda:	e000      	b.n	8008dde <MSC_BOT_DataIn+0x72>
      break;
 8008ddc:	bf00      	nop
  }
}
 8008dde:	3710      	adds	r7, #16
 8008de0:	46bd      	mov	sp, r7
 8008de2:	bd80      	pop	{r7, pc}

08008de4 <MSC_BOT_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval None
  */
void MSC_BOT_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008de4:	b580      	push	{r7, lr}
 8008de6:	b084      	sub	sp, #16
 8008de8:	af00      	add	r7, sp, #0
 8008dea:	6078      	str	r0, [r7, #4]
 8008dec:	460b      	mov	r3, r1
 8008dee:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	32b0      	adds	r2, #176	; 0xb0
 8008dfa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008dfe:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d01e      	beq.n	8008e44 <MSC_BOT_DataOut+0x60>
  {
    return;
  }

  switch (hmsc->bot_state)
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	7a1b      	ldrb	r3, [r3, #8]
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d002      	beq.n	8008e14 <MSC_BOT_DataOut+0x30>
 8008e0e:	2b01      	cmp	r3, #1
 8008e10:	d004      	beq.n	8008e1c <MSC_BOT_DataOut+0x38>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
      }
      break;

    default:
      break;
 8008e12:	e01a      	b.n	8008e4a <MSC_BOT_DataOut+0x66>
      MSC_BOT_CBW_Decode(pdev);
 8008e14:	6878      	ldr	r0, [r7, #4]
 8008e16:	f000 f81b 	bl	8008e50 <MSC_BOT_CBW_Decode>
      break;
 8008e1a:	e016      	b.n	8008e4a <MSC_BOT_DataOut+0x66>
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008e22:	7f59      	ldrb	r1, [r3, #29]
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008e2a:	331f      	adds	r3, #31
 8008e2c:	461a      	mov	r2, r3
 8008e2e:	6878      	ldr	r0, [r7, #4]
 8008e30:	f000 f9a8 	bl	8009184 <SCSI_ProcessCmd>
 8008e34:	4603      	mov	r3, r0
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	da06      	bge.n	8008e48 <MSC_BOT_DataOut+0x64>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8008e3a:	2101      	movs	r1, #1
 8008e3c:	6878      	ldr	r0, [r7, #4]
 8008e3e:	f000 f8e3 	bl	8009008 <MSC_BOT_SendCSW>
      break;
 8008e42:	e001      	b.n	8008e48 <MSC_BOT_DataOut+0x64>
    return;
 8008e44:	bf00      	nop
 8008e46:	e000      	b.n	8008e4a <MSC_BOT_DataOut+0x66>
      break;
 8008e48:	bf00      	nop
  }
}
 8008e4a:	3710      	adds	r7, #16
 8008e4c:	46bd      	mov	sp, r7
 8008e4e:	bd80      	pop	{r7, pc}

08008e50 <MSC_BOT_CBW_Decode>:
  *         Decode the CBW command and set the BOT state machine accordingly
  * @param  pdev: device instance
  * @retval None
  */
static void  MSC_BOT_CBW_Decode(USBD_HandleTypeDef *pdev)
{
 8008e50:	b580      	push	{r7, lr}
 8008e52:	b084      	sub	sp, #16
 8008e54:	af00      	add	r7, sp, #0
 8008e56:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	32b0      	adds	r2, #176	; 0xb0
 8008e62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e66:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	f000 8085 	beq.w	8008f7a <MSC_BOT_CBW_Decode+0x12a>
  {
    return;
  }

  hmsc->csw.dTag = hmsc->cbw.dTag;
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008e76:	695b      	ldr	r3, [r3, #20]
 8008e78:	68fa      	ldr	r2, [r7, #12]
 8008e7a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008e7e:	6353      	str	r3, [r2, #52]	; 0x34
  hmsc->csw.dDataResidue = hmsc->cbw.dDataLength;
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008e86:	699b      	ldr	r3, [r3, #24]
 8008e88:	68fa      	ldr	r2, [r7, #12]
 8008e8a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008e8e:	6393      	str	r3, [r2, #56]	; 0x38

  if ((USBD_LL_GetRxDataSize(pdev, MSCOutEpAdd) != USBD_BOT_CBW_LENGTH) ||
 8008e90:	4b3d      	ldr	r3, [pc, #244]	; (8008f88 <MSC_BOT_CBW_Decode+0x138>)
 8008e92:	781b      	ldrb	r3, [r3, #0]
 8008e94:	4619      	mov	r1, r3
 8008e96:	6878      	ldr	r0, [r7, #4]
 8008e98:	f003 fc5f 	bl	800c75a <USBD_LL_GetRxDataSize>
 8008e9c:	4603      	mov	r3, r0
 8008e9e:	2b1f      	cmp	r3, #31
 8008ea0:	d118      	bne.n	8008ed4 <MSC_BOT_CBW_Decode+0x84>
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008ea8:	691b      	ldr	r3, [r3, #16]
  if ((USBD_LL_GetRxDataSize(pdev, MSCOutEpAdd) != USBD_BOT_CBW_LENGTH) ||
 8008eaa:	4a38      	ldr	r2, [pc, #224]	; (8008f8c <MSC_BOT_CBW_Decode+0x13c>)
 8008eac:	4293      	cmp	r3, r2
 8008eae:	d111      	bne.n	8008ed4 <MSC_BOT_CBW_Decode+0x84>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008eb6:	7f5b      	ldrb	r3, [r3, #29]
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 8008eb8:	2b01      	cmp	r3, #1
 8008eba:	d80b      	bhi.n	8008ed4 <MSC_BOT_CBW_Decode+0x84>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008ec2:	7f9b      	ldrb	r3, [r3, #30]
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d005      	beq.n	8008ed4 <MSC_BOT_CBW_Decode+0x84>
      (hmsc->cbw.bCBLength > 16U))
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008ece:	7f9b      	ldrb	r3, [r3, #30]
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 8008ed0:	2b10      	cmp	r3, #16
 8008ed2:	d90f      	bls.n	8008ef4 <MSC_BOT_CBW_Decode+0xa4>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008eda:	7f59      	ldrb	r1, [r3, #29]
 8008edc:	2320      	movs	r3, #32
 8008ede:	2205      	movs	r2, #5
 8008ee0:	6878      	ldr	r0, [r7, #4]
 8008ee2:	f000 fe79 	bl	8009bd8 <SCSI_SenseCode>

    hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	2202      	movs	r2, #2
 8008eea:	725a      	strb	r2, [r3, #9]
    MSC_BOT_Abort(pdev);
 8008eec:	6878      	ldr	r0, [r7, #4]
 8008eee:	f000 f8cb 	bl	8009088 <MSC_BOT_Abort>
 8008ef2:	e045      	b.n	8008f80 <MSC_BOT_CBW_Decode+0x130>
  }
  else
  {
    if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008efa:	7f59      	ldrb	r1, [r3, #29]
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008f02:	331f      	adds	r3, #31
 8008f04:	461a      	mov	r2, r3
 8008f06:	6878      	ldr	r0, [r7, #4]
 8008f08:	f000 f93c 	bl	8009184 <SCSI_ProcessCmd>
 8008f0c:	4603      	mov	r3, r0
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	da0c      	bge.n	8008f2c <MSC_BOT_CBW_Decode+0xdc>
    {
      if (hmsc->bot_state == USBD_BOT_NO_DATA)
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	7a1b      	ldrb	r3, [r3, #8]
 8008f16:	2b05      	cmp	r3, #5
 8008f18:	d104      	bne.n	8008f24 <MSC_BOT_CBW_Decode+0xd4>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8008f1a:	2101      	movs	r1, #1
 8008f1c:	6878      	ldr	r0, [r7, #4]
 8008f1e:	f000 f873 	bl	8009008 <MSC_BOT_SendCSW>
 8008f22:	e02d      	b.n	8008f80 <MSC_BOT_CBW_Decode+0x130>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 8008f24:	6878      	ldr	r0, [r7, #4]
 8008f26:	f000 f8af 	bl	8009088 <MSC_BOT_Abort>
 8008f2a:	e029      	b.n	8008f80 <MSC_BOT_CBW_Decode+0x130>
      }
    }
    /* Burst xfer handled internally */
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	7a1b      	ldrb	r3, [r3, #8]
 8008f30:	2b02      	cmp	r3, #2
 8008f32:	d024      	beq.n	8008f7e <MSC_BOT_CBW_Decode+0x12e>
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	7a1b      	ldrb	r3, [r3, #8]
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 8008f38:	2b01      	cmp	r3, #1
 8008f3a:	d020      	beq.n	8008f7e <MSC_BOT_CBW_Decode+0x12e>
             (hmsc->bot_state != USBD_BOT_LAST_DATA_IN))
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	7a1b      	ldrb	r3, [r3, #8]
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 8008f40:	2b03      	cmp	r3, #3
 8008f42:	d01c      	beq.n	8008f7e <MSC_BOT_CBW_Decode+0x12e>
    {
      if (hmsc->bot_data_length > 0U)
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	68db      	ldr	r3, [r3, #12]
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d009      	beq.n	8008f60 <MSC_BOT_CBW_Decode+0x110>
      {
        MSC_BOT_SendData(pdev, hmsc->bot_data, hmsc->bot_data_length);
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	f103 0110 	add.w	r1, r3, #16
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	68db      	ldr	r3, [r3, #12]
 8008f56:	461a      	mov	r2, r3
 8008f58:	6878      	ldr	r0, [r7, #4]
 8008f5a:	f000 f819 	bl	8008f90 <MSC_BOT_SendData>
      if (hmsc->bot_data_length > 0U)
 8008f5e:	e00f      	b.n	8008f80 <MSC_BOT_CBW_Decode+0x130>
      }
      else if (hmsc->bot_data_length == 0U)
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	68db      	ldr	r3, [r3, #12]
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d104      	bne.n	8008f72 <MSC_BOT_CBW_Decode+0x122>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8008f68:	2100      	movs	r1, #0
 8008f6a:	6878      	ldr	r0, [r7, #4]
 8008f6c:	f000 f84c 	bl	8009008 <MSC_BOT_SendCSW>
      if (hmsc->bot_data_length > 0U)
 8008f70:	e006      	b.n	8008f80 <MSC_BOT_CBW_Decode+0x130>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 8008f72:	6878      	ldr	r0, [r7, #4]
 8008f74:	f000 f888 	bl	8009088 <MSC_BOT_Abort>
      if (hmsc->bot_data_length > 0U)
 8008f78:	e002      	b.n	8008f80 <MSC_BOT_CBW_Decode+0x130>
    return;
 8008f7a:	bf00      	nop
 8008f7c:	e000      	b.n	8008f80 <MSC_BOT_CBW_Decode+0x130>
      }
    }
    else
    {
      return;
 8008f7e:	bf00      	nop
    }
  }
}
 8008f80:	3710      	adds	r7, #16
 8008f82:	46bd      	mov	sp, r7
 8008f84:	bd80      	pop	{r7, pc}
 8008f86:	bf00      	nop
 8008f88:	20000073 	.word	0x20000073
 8008f8c:	43425355 	.word	0x43425355

08008f90 <MSC_BOT_SendData>:
  * @param  buf: pointer to data buffer
  * @param  len: Data Length
  * @retval None
  */
static void  MSC_BOT_SendData(USBD_HandleTypeDef *pdev, uint8_t *pbuf, uint32_t len)
{
 8008f90:	b580      	push	{r7, lr}
 8008f92:	b086      	sub	sp, #24
 8008f94:	af00      	add	r7, sp, #0
 8008f96:	60f8      	str	r0, [r7, #12]
 8008f98:	60b9      	str	r1, [r7, #8]
 8008f9a:	607a      	str	r2, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	32b0      	adds	r2, #176	; 0xb0
 8008fa6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008faa:	617b      	str	r3, [r7, #20]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8008fac:	697b      	ldr	r3, [r7, #20]
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d023      	beq.n	8008ffa <MSC_BOT_SendData+0x6a>
  {
    return;
  }

  length = MIN(hmsc->cbw.dDataLength, len);
 8008fb2:	697b      	ldr	r3, [r7, #20]
 8008fb4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008fb8:	699b      	ldr	r3, [r3, #24]
 8008fba:	687a      	ldr	r2, [r7, #4]
 8008fbc:	4293      	cmp	r3, r2
 8008fbe:	bf28      	it	cs
 8008fc0:	4613      	movcs	r3, r2
 8008fc2:	613b      	str	r3, [r7, #16]

  hmsc->csw.dDataResidue -= len;
 8008fc4:	697b      	ldr	r3, [r7, #20]
 8008fc6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008fca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	1ad3      	subs	r3, r2, r3
 8008fd0:	697a      	ldr	r2, [r7, #20]
 8008fd2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008fd6:	6393      	str	r3, [r2, #56]	; 0x38
  hmsc->csw.bStatus = USBD_CSW_CMD_PASSED;
 8008fd8:	697b      	ldr	r3, [r7, #20]
 8008fda:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008fde:	2200      	movs	r2, #0
 8008fe0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  hmsc->bot_state = USBD_BOT_SEND_DATA;
 8008fe4:	697b      	ldr	r3, [r7, #20]
 8008fe6:	2204      	movs	r2, #4
 8008fe8:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, pbuf, length);
 8008fea:	4b06      	ldr	r3, [pc, #24]	; (8009004 <MSC_BOT_SendData+0x74>)
 8008fec:	7819      	ldrb	r1, [r3, #0]
 8008fee:	693b      	ldr	r3, [r7, #16]
 8008ff0:	68ba      	ldr	r2, [r7, #8]
 8008ff2:	68f8      	ldr	r0, [r7, #12]
 8008ff4:	f003 fb6f 	bl	800c6d6 <USBD_LL_Transmit>
 8008ff8:	e000      	b.n	8008ffc <MSC_BOT_SendData+0x6c>
    return;
 8008ffa:	bf00      	nop
}
 8008ffc:	3718      	adds	r7, #24
 8008ffe:	46bd      	mov	sp, r7
 8009000:	bd80      	pop	{r7, pc}
 8009002:	bf00      	nop
 8009004:	20000072 	.word	0x20000072

08009008 <MSC_BOT_SendCSW>:
  * @param  pdev: device instance
  * @param  status : CSW status
  * @retval None
  */
void  MSC_BOT_SendCSW(USBD_HandleTypeDef *pdev, uint8_t CSW_Status)
{
 8009008:	b580      	push	{r7, lr}
 800900a:	b084      	sub	sp, #16
 800900c:	af00      	add	r7, sp, #0
 800900e:	6078      	str	r0, [r7, #4]
 8009010:	460b      	mov	r3, r1
 8009012:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	32b0      	adds	r2, #176	; 0xb0
 800901e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009022:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	2b00      	cmp	r3, #0
 8009028:	d024      	beq.n	8009074 <MSC_BOT_SendCSW+0x6c>
  {
    return;
  }

  hmsc->csw.dSignature = USBD_BOT_CSW_SIGNATURE;
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009030:	461a      	mov	r2, r3
 8009032:	4b12      	ldr	r3, [pc, #72]	; (800907c <MSC_BOT_SendCSW+0x74>)
 8009034:	6313      	str	r3, [r2, #48]	; 0x30
  hmsc->csw.bStatus = CSW_Status;
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800903c:	461a      	mov	r2, r3
 800903e:	78fb      	ldrb	r3, [r7, #3]
 8009040:	f882 303c 	strb.w	r3, [r2, #60]	; 0x3c
  hmsc->bot_state = USBD_BOT_IDLE;
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	2200      	movs	r2, #0
 8009048:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, (uint8_t *)&hmsc->csw,
 800904a:	4b0d      	ldr	r3, [pc, #52]	; (8009080 <MSC_BOT_SendCSW+0x78>)
 800904c:	7819      	ldrb	r1, [r3, #0]
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	f503 5281 	add.w	r2, r3, #4128	; 0x1020
 8009054:	3210      	adds	r2, #16
 8009056:	230d      	movs	r3, #13
 8009058:	6878      	ldr	r0, [r7, #4]
 800905a:	f003 fb3c 	bl	800c6d6 <USBD_LL_Transmit>
                         USBD_BOT_CSW_LENGTH);

  /* Prepare EP to Receive next Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 800905e:	4b09      	ldr	r3, [pc, #36]	; (8009084 <MSC_BOT_SendCSW+0x7c>)
 8009060:	7819      	ldrb	r1, [r3, #0]
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 8009068:	3210      	adds	r2, #16
 800906a:	231f      	movs	r3, #31
 800906c:	6878      	ldr	r0, [r7, #4]
 800906e:	f003 fb53 	bl	800c718 <USBD_LL_PrepareReceive>
 8009072:	e000      	b.n	8009076 <MSC_BOT_SendCSW+0x6e>
    return;
 8009074:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 8009076:	3710      	adds	r7, #16
 8009078:	46bd      	mov	sp, r7
 800907a:	bd80      	pop	{r7, pc}
 800907c:	53425355 	.word	0x53425355
 8009080:	20000072 	.word	0x20000072
 8009084:	20000073 	.word	0x20000073

08009088 <MSC_BOT_Abort>:
  * @param  pdev: device instance
  * @retval status
  */

static void  MSC_BOT_Abort(USBD_HandleTypeDef *pdev)
{
 8009088:	b580      	push	{r7, lr}
 800908a:	b084      	sub	sp, #16
 800908c:	af00      	add	r7, sp, #0
 800908e:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	32b0      	adds	r2, #176	; 0xb0
 800909a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800909e:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d02c      	beq.n	8009100 <MSC_BOT_Abort+0x78>
  {
    return;
  }

  if ((hmsc->cbw.bmFlags == 0U) &&
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80090ac:	7f1b      	ldrb	r3, [r3, #28]
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d10f      	bne.n	80090d2 <MSC_BOT_Abort+0x4a>
      (hmsc->cbw.dDataLength != 0U) &&
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80090b8:	699b      	ldr	r3, [r3, #24]
  if ((hmsc->cbw.bmFlags == 0U) &&
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d009      	beq.n	80090d2 <MSC_BOT_Abort+0x4a>
      (hmsc->bot_status == USBD_BOT_STATUS_NORMAL))
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	7a5b      	ldrb	r3, [r3, #9]
      (hmsc->cbw.dDataLength != 0U) &&
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d105      	bne.n	80090d2 <MSC_BOT_Abort+0x4a>
  {
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 80090c6:	4b10      	ldr	r3, [pc, #64]	; (8009108 <MSC_BOT_Abort+0x80>)
 80090c8:	781b      	ldrb	r3, [r3, #0]
 80090ca:	4619      	mov	r1, r3
 80090cc:	6878      	ldr	r0, [r7, #4]
 80090ce:	f003 fa79 	bl	800c5c4 <USBD_LL_StallEP>
  }

  (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
 80090d2:	4b0e      	ldr	r3, [pc, #56]	; (800910c <MSC_BOT_Abort+0x84>)
 80090d4:	781b      	ldrb	r3, [r3, #0]
 80090d6:	4619      	mov	r1, r3
 80090d8:	6878      	ldr	r0, [r7, #4]
 80090da:	f003 fa73 	bl	800c5c4 <USBD_LL_StallEP>

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR)
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	7a5b      	ldrb	r3, [r3, #9]
 80090e2:	2b02      	cmp	r3, #2
 80090e4:	d10d      	bne.n	8009102 <MSC_BOT_Abort+0x7a>
  {
    (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
 80090e6:	4b09      	ldr	r3, [pc, #36]	; (800910c <MSC_BOT_Abort+0x84>)
 80090e8:	781b      	ldrb	r3, [r3, #0]
 80090ea:	4619      	mov	r1, r3
 80090ec:	6878      	ldr	r0, [r7, #4]
 80090ee:	f003 fa69 	bl	800c5c4 <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 80090f2:	4b05      	ldr	r3, [pc, #20]	; (8009108 <MSC_BOT_Abort+0x80>)
 80090f4:	781b      	ldrb	r3, [r3, #0]
 80090f6:	4619      	mov	r1, r3
 80090f8:	6878      	ldr	r0, [r7, #4]
 80090fa:	f003 fa63 	bl	800c5c4 <USBD_LL_StallEP>
 80090fe:	e000      	b.n	8009102 <MSC_BOT_Abort+0x7a>
    return;
 8009100:	bf00      	nop
  }
}
 8009102:	3710      	adds	r7, #16
 8009104:	46bd      	mov	sp, r7
 8009106:	bd80      	pop	{r7, pc}
 8009108:	20000073 	.word	0x20000073
 800910c:	20000072 	.word	0x20000072

08009110 <MSC_BOT_CplClrFeature>:
  * @param  epnum: endpoint index
  * @retval None
  */

void  MSC_BOT_CplClrFeature(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009110:	b580      	push	{r7, lr}
 8009112:	b084      	sub	sp, #16
 8009114:	af00      	add	r7, sp, #0
 8009116:	6078      	str	r0, [r7, #4]
 8009118:	460b      	mov	r3, r1
 800911a:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	32b0      	adds	r2, #176	; 0xb0
 8009126:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800912a:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	2b00      	cmp	r3, #0
 8009130:	d01d      	beq.n	800916e <MSC_BOT_CplClrFeature+0x5e>
  {
    return;
  }

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR) /* Bad CBW Signature */
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	7a5b      	ldrb	r3, [r3, #9]
 8009136:	2b02      	cmp	r3, #2
 8009138:	d10c      	bne.n	8009154 <MSC_BOT_CplClrFeature+0x44>
  {
    (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
 800913a:	4b10      	ldr	r3, [pc, #64]	; (800917c <MSC_BOT_CplClrFeature+0x6c>)
 800913c:	781b      	ldrb	r3, [r3, #0]
 800913e:	4619      	mov	r1, r3
 8009140:	6878      	ldr	r0, [r7, #4]
 8009142:	f003 fa3f 	bl	800c5c4 <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 8009146:	4b0e      	ldr	r3, [pc, #56]	; (8009180 <MSC_BOT_CplClrFeature+0x70>)
 8009148:	781b      	ldrb	r3, [r3, #0]
 800914a:	4619      	mov	r1, r3
 800914c:	6878      	ldr	r0, [r7, #4]
 800914e:	f003 fa39 	bl	800c5c4 <USBD_LL_StallEP>
 8009152:	e00f      	b.n	8009174 <MSC_BOT_CplClrFeature+0x64>
  }
  else if (((epnum & 0x80U) == 0x80U) && (hmsc->bot_status != USBD_BOT_STATUS_RECOVERY))
 8009154:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009158:	2b00      	cmp	r3, #0
 800915a:	da0a      	bge.n	8009172 <MSC_BOT_CplClrFeature+0x62>
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	7a5b      	ldrb	r3, [r3, #9]
 8009160:	2b01      	cmp	r3, #1
 8009162:	d006      	beq.n	8009172 <MSC_BOT_CplClrFeature+0x62>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8009164:	2101      	movs	r1, #1
 8009166:	6878      	ldr	r0, [r7, #4]
 8009168:	f7ff ff4e 	bl	8009008 <MSC_BOT_SendCSW>
 800916c:	e002      	b.n	8009174 <MSC_BOT_CplClrFeature+0x64>
    return;
 800916e:	bf00      	nop
 8009170:	e000      	b.n	8009174 <MSC_BOT_CplClrFeature+0x64>
  }
  else
  {
    return;
 8009172:	bf00      	nop
  }
}
 8009174:	3710      	adds	r7, #16
 8009176:	46bd      	mov	sp, r7
 8009178:	bd80      	pop	{r7, pc}
 800917a:	bf00      	nop
 800917c:	20000072 	.word	0x20000072
 8009180:	20000073 	.word	0x20000073

08009184 <SCSI_ProcessCmd>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
int8_t SCSI_ProcessCmd(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *cmd)
{
 8009184:	b580      	push	{r7, lr}
 8009186:	b086      	sub	sp, #24
 8009188:	af00      	add	r7, sp, #0
 800918a:	60f8      	str	r0, [r7, #12]
 800918c:	460b      	mov	r3, r1
 800918e:	607a      	str	r2, [r7, #4]
 8009190:	72fb      	strb	r3, [r7, #11]
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	32b0      	adds	r2, #176	; 0xb0
 800919c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80091a0:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 80091a2:	693b      	ldr	r3, [r7, #16]
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d102      	bne.n	80091ae <SCSI_ProcessCmd+0x2a>
  {
    return -1;
 80091a8:	f04f 33ff 	mov.w	r3, #4294967295
 80091ac:	e168      	b.n	8009480 <SCSI_ProcessCmd+0x2fc>
  }

  switch (cmd[0])
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	781b      	ldrb	r3, [r3, #0]
 80091b2:	2baa      	cmp	r3, #170	; 0xaa
 80091b4:	f000 8144 	beq.w	8009440 <SCSI_ProcessCmd+0x2bc>
 80091b8:	2baa      	cmp	r3, #170	; 0xaa
 80091ba:	f300 8153 	bgt.w	8009464 <SCSI_ProcessCmd+0x2e0>
 80091be:	2ba8      	cmp	r3, #168	; 0xa8
 80091c0:	f000 812c 	beq.w	800941c <SCSI_ProcessCmd+0x298>
 80091c4:	2ba8      	cmp	r3, #168	; 0xa8
 80091c6:	f300 814d 	bgt.w	8009464 <SCSI_ProcessCmd+0x2e0>
 80091ca:	2b5a      	cmp	r3, #90	; 0x5a
 80091cc:	f300 80c0 	bgt.w	8009350 <SCSI_ProcessCmd+0x1cc>
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	f2c0 8147 	blt.w	8009464 <SCSI_ProcessCmd+0x2e0>
 80091d6:	2b5a      	cmp	r3, #90	; 0x5a
 80091d8:	f200 8144 	bhi.w	8009464 <SCSI_ProcessCmd+0x2e0>
 80091dc:	a201      	add	r2, pc, #4	; (adr r2, 80091e4 <SCSI_ProcessCmd+0x60>)
 80091de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091e2:	bf00      	nop
 80091e4:	08009357 	.word	0x08009357
 80091e8:	08009465 	.word	0x08009465
 80091ec:	08009465 	.word	0x08009465
 80091f0:	08009369 	.word	0x08009369
 80091f4:	08009465 	.word	0x08009465
 80091f8:	08009465 	.word	0x08009465
 80091fc:	08009465 	.word	0x08009465
 8009200:	08009465 	.word	0x08009465
 8009204:	08009465 	.word	0x08009465
 8009208:	08009465 	.word	0x08009465
 800920c:	08009465 	.word	0x08009465
 8009210:	08009465 	.word	0x08009465
 8009214:	08009465 	.word	0x08009465
 8009218:	08009465 	.word	0x08009465
 800921c:	08009465 	.word	0x08009465
 8009220:	08009465 	.word	0x08009465
 8009224:	08009465 	.word	0x08009465
 8009228:	08009465 	.word	0x08009465
 800922c:	0800937b 	.word	0x0800937b
 8009230:	08009465 	.word	0x08009465
 8009234:	08009465 	.word	0x08009465
 8009238:	08009465 	.word	0x08009465
 800923c:	08009465 	.word	0x08009465
 8009240:	08009465 	.word	0x08009465
 8009244:	08009465 	.word	0x08009465
 8009248:	08009465 	.word	0x08009465
 800924c:	080093b1 	.word	0x080093b1
 8009250:	0800938d 	.word	0x0800938d
 8009254:	08009465 	.word	0x08009465
 8009258:	08009465 	.word	0x08009465
 800925c:	0800939f 	.word	0x0800939f
 8009260:	08009465 	.word	0x08009465
 8009264:	08009465 	.word	0x08009465
 8009268:	08009465 	.word	0x08009465
 800926c:	08009465 	.word	0x08009465
 8009270:	080093d5 	.word	0x080093d5
 8009274:	08009465 	.word	0x08009465
 8009278:	080093e7 	.word	0x080093e7
 800927c:	08009465 	.word	0x08009465
 8009280:	08009465 	.word	0x08009465
 8009284:	0800940b 	.word	0x0800940b
 8009288:	08009465 	.word	0x08009465
 800928c:	0800942f 	.word	0x0800942f
 8009290:	08009465 	.word	0x08009465
 8009294:	08009465 	.word	0x08009465
 8009298:	08009465 	.word	0x08009465
 800929c:	08009465 	.word	0x08009465
 80092a0:	08009453 	.word	0x08009453
 80092a4:	08009465 	.word	0x08009465
 80092a8:	08009465 	.word	0x08009465
 80092ac:	08009465 	.word	0x08009465
 80092b0:	08009465 	.word	0x08009465
 80092b4:	08009465 	.word	0x08009465
 80092b8:	08009465 	.word	0x08009465
 80092bc:	08009465 	.word	0x08009465
 80092c0:	08009465 	.word	0x08009465
 80092c4:	08009465 	.word	0x08009465
 80092c8:	08009465 	.word	0x08009465
 80092cc:	08009465 	.word	0x08009465
 80092d0:	08009465 	.word	0x08009465
 80092d4:	08009465 	.word	0x08009465
 80092d8:	08009465 	.word	0x08009465
 80092dc:	08009465 	.word	0x08009465
 80092e0:	08009465 	.word	0x08009465
 80092e4:	08009465 	.word	0x08009465
 80092e8:	08009465 	.word	0x08009465
 80092ec:	08009465 	.word	0x08009465
 80092f0:	08009465 	.word	0x08009465
 80092f4:	08009465 	.word	0x08009465
 80092f8:	08009465 	.word	0x08009465
 80092fc:	08009465 	.word	0x08009465
 8009300:	08009465 	.word	0x08009465
 8009304:	08009465 	.word	0x08009465
 8009308:	08009465 	.word	0x08009465
 800930c:	08009465 	.word	0x08009465
 8009310:	08009465 	.word	0x08009465
 8009314:	08009465 	.word	0x08009465
 8009318:	08009465 	.word	0x08009465
 800931c:	08009465 	.word	0x08009465
 8009320:	08009465 	.word	0x08009465
 8009324:	08009465 	.word	0x08009465
 8009328:	08009465 	.word	0x08009465
 800932c:	08009465 	.word	0x08009465
 8009330:	08009465 	.word	0x08009465
 8009334:	08009465 	.word	0x08009465
 8009338:	08009465 	.word	0x08009465
 800933c:	08009465 	.word	0x08009465
 8009340:	08009465 	.word	0x08009465
 8009344:	08009465 	.word	0x08009465
 8009348:	08009465 	.word	0x08009465
 800934c:	080093c3 	.word	0x080093c3
 8009350:	2b9e      	cmp	r3, #158	; 0x9e
 8009352:	d051      	beq.n	80093f8 <SCSI_ProcessCmd+0x274>
 8009354:	e086      	b.n	8009464 <SCSI_ProcessCmd+0x2e0>
  {
    case SCSI_TEST_UNIT_READY:
      ret = SCSI_TestUnitReady(pdev, lun, cmd);
 8009356:	7afb      	ldrb	r3, [r7, #11]
 8009358:	687a      	ldr	r2, [r7, #4]
 800935a:	4619      	mov	r1, r3
 800935c:	68f8      	ldr	r0, [r7, #12]
 800935e:	f000 f893 	bl	8009488 <SCSI_TestUnitReady>
 8009362:	4603      	mov	r3, r0
 8009364:	75fb      	strb	r3, [r7, #23]
      break;
 8009366:	e089      	b.n	800947c <SCSI_ProcessCmd+0x2f8>

    case SCSI_REQUEST_SENSE:
      ret = SCSI_RequestSense(pdev, lun, cmd);
 8009368:	7afb      	ldrb	r3, [r7, #11]
 800936a:	687a      	ldr	r2, [r7, #4]
 800936c:	4619      	mov	r1, r3
 800936e:	68f8      	ldr	r0, [r7, #12]
 8009370:	f000 fb98 	bl	8009aa4 <SCSI_RequestSense>
 8009374:	4603      	mov	r3, r0
 8009376:	75fb      	strb	r3, [r7, #23]
      break;
 8009378:	e080      	b.n	800947c <SCSI_ProcessCmd+0x2f8>

    case SCSI_INQUIRY:
      ret = SCSI_Inquiry(pdev, lun, cmd);
 800937a:	7afb      	ldrb	r3, [r7, #11]
 800937c:	687a      	ldr	r2, [r7, #4]
 800937e:	4619      	mov	r1, r3
 8009380:	68f8      	ldr	r0, [r7, #12]
 8009382:	f000 f8df 	bl	8009544 <SCSI_Inquiry>
 8009386:	4603      	mov	r3, r0
 8009388:	75fb      	strb	r3, [r7, #23]
      break;
 800938a:	e077      	b.n	800947c <SCSI_ProcessCmd+0x2f8>

    case SCSI_START_STOP_UNIT:
      ret = SCSI_StartStopUnit(pdev, lun, cmd);
 800938c:	7afb      	ldrb	r3, [r7, #11]
 800938e:	687a      	ldr	r2, [r7, #4]
 8009390:	4619      	mov	r1, r3
 8009392:	68f8      	ldr	r0, [r7, #12]
 8009394:	f000 fc7c 	bl	8009c90 <SCSI_StartStopUnit>
 8009398:	4603      	mov	r3, r0
 800939a:	75fb      	strb	r3, [r7, #23]
      break;
 800939c:	e06e      	b.n	800947c <SCSI_ProcessCmd+0x2f8>

    case SCSI_ALLOW_MEDIUM_REMOVAL:
      ret = SCSI_AllowPreventRemovable(pdev, lun, cmd);
 800939e:	7afb      	ldrb	r3, [r7, #11]
 80093a0:	687a      	ldr	r2, [r7, #4]
 80093a2:	4619      	mov	r1, r3
 80093a4:	68f8      	ldr	r0, [r7, #12]
 80093a6:	f000 fcd0 	bl	8009d4a <SCSI_AllowPreventRemovable>
 80093aa:	4603      	mov	r3, r0
 80093ac:	75fb      	strb	r3, [r7, #23]
      break;
 80093ae:	e065      	b.n	800947c <SCSI_ProcessCmd+0x2f8>

    case SCSI_MODE_SENSE6:
      ret = SCSI_ModeSense6(pdev, lun, cmd);
 80093b0:	7afb      	ldrb	r3, [r7, #11]
 80093b2:	687a      	ldr	r2, [r7, #4]
 80093b4:	4619      	mov	r1, r3
 80093b6:	68f8      	ldr	r0, [r7, #12]
 80093b8:	f000 fb14 	bl	80099e4 <SCSI_ModeSense6>
 80093bc:	4603      	mov	r3, r0
 80093be:	75fb      	strb	r3, [r7, #23]
      break;
 80093c0:	e05c      	b.n	800947c <SCSI_ProcessCmd+0x2f8>

    case SCSI_MODE_SENSE10:
      ret = SCSI_ModeSense10(pdev, lun, cmd);
 80093c2:	7afb      	ldrb	r3, [r7, #11]
 80093c4:	687a      	ldr	r2, [r7, #4]
 80093c6:	4619      	mov	r1, r3
 80093c8:	68f8      	ldr	r0, [r7, #12]
 80093ca:	f000 fb3b 	bl	8009a44 <SCSI_ModeSense10>
 80093ce:	4603      	mov	r3, r0
 80093d0:	75fb      	strb	r3, [r7, #23]
      break;
 80093d2:	e053      	b.n	800947c <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ_FORMAT_CAPACITIES:
      ret = SCSI_ReadFormatCapacity(pdev, lun, cmd);
 80093d4:	7afb      	ldrb	r3, [r7, #11]
 80093d6:	687a      	ldr	r2, [r7, #4]
 80093d8:	4619      	mov	r1, r3
 80093da:	68f8      	ldr	r0, [r7, #12]
 80093dc:	f000 fa85 	bl	80098ea <SCSI_ReadFormatCapacity>
 80093e0:	4603      	mov	r3, r0
 80093e2:	75fb      	strb	r3, [r7, #23]
      break;
 80093e4:	e04a      	b.n	800947c <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ_CAPACITY10:
      ret = SCSI_ReadCapacity10(pdev, lun, cmd);
 80093e6:	7afb      	ldrb	r3, [r7, #11]
 80093e8:	687a      	ldr	r2, [r7, #4]
 80093ea:	4619      	mov	r1, r3
 80093ec:	68f8      	ldr	r0, [r7, #12]
 80093ee:	f000 f929 	bl	8009644 <SCSI_ReadCapacity10>
 80093f2:	4603      	mov	r3, r0
 80093f4:	75fb      	strb	r3, [r7, #23]
      break;
 80093f6:	e041      	b.n	800947c <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ_CAPACITY16:
      ret = SCSI_ReadCapacity16(pdev, lun, cmd);
 80093f8:	7afb      	ldrb	r3, [r7, #11]
 80093fa:	687a      	ldr	r2, [r7, #4]
 80093fc:	4619      	mov	r1, r3
 80093fe:	68f8      	ldr	r0, [r7, #12]
 8009400:	f000 f9af 	bl	8009762 <SCSI_ReadCapacity16>
 8009404:	4603      	mov	r3, r0
 8009406:	75fb      	strb	r3, [r7, #23]
      break;
 8009408:	e038      	b.n	800947c <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ10:
      ret = SCSI_Read10(pdev, lun, cmd);
 800940a:	7afb      	ldrb	r3, [r7, #11]
 800940c:	687a      	ldr	r2, [r7, #4]
 800940e:	4619      	mov	r1, r3
 8009410:	68f8      	ldr	r0, [r7, #12]
 8009412:	f000 fccb 	bl	8009dac <SCSI_Read10>
 8009416:	4603      	mov	r3, r0
 8009418:	75fb      	strb	r3, [r7, #23]
      break;
 800941a:	e02f      	b.n	800947c <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ12:
      ret = SCSI_Read12(pdev, lun, cmd);
 800941c:	7afb      	ldrb	r3, [r7, #11]
 800941e:	687a      	ldr	r2, [r7, #4]
 8009420:	4619      	mov	r1, r3
 8009422:	68f8      	ldr	r0, [r7, #12]
 8009424:	f000 fd79 	bl	8009f1a <SCSI_Read12>
 8009428:	4603      	mov	r3, r0
 800942a:	75fb      	strb	r3, [r7, #23]
      break;
 800942c:	e026      	b.n	800947c <SCSI_ProcessCmd+0x2f8>

    case SCSI_WRITE10:
      ret = SCSI_Write10(pdev, lun, cmd);
 800942e:	7afb      	ldrb	r3, [r7, #11]
 8009430:	687a      	ldr	r2, [r7, #4]
 8009432:	4619      	mov	r1, r3
 8009434:	68f8      	ldr	r0, [r7, #12]
 8009436:	f000 fe31 	bl	800a09c <SCSI_Write10>
 800943a:	4603      	mov	r3, r0
 800943c:	75fb      	strb	r3, [r7, #23]
      break;
 800943e:	e01d      	b.n	800947c <SCSI_ProcessCmd+0x2f8>

    case SCSI_WRITE12:
      ret = SCSI_Write12(pdev, lun, cmd);
 8009440:	7afb      	ldrb	r3, [r7, #11]
 8009442:	687a      	ldr	r2, [r7, #4]
 8009444:	4619      	mov	r1, r3
 8009446:	68f8      	ldr	r0, [r7, #12]
 8009448:	f000 ff0c 	bl	800a264 <SCSI_Write12>
 800944c:	4603      	mov	r3, r0
 800944e:	75fb      	strb	r3, [r7, #23]
      break;
 8009450:	e014      	b.n	800947c <SCSI_ProcessCmd+0x2f8>

    case SCSI_VERIFY10:
      ret = SCSI_Verify10(pdev, lun, cmd);
 8009452:	7afb      	ldrb	r3, [r7, #11]
 8009454:	687a      	ldr	r2, [r7, #4]
 8009456:	4619      	mov	r1, r3
 8009458:	68f8      	ldr	r0, [r7, #12]
 800945a:	f000 fff7 	bl	800a44c <SCSI_Verify10>
 800945e:	4603      	mov	r3, r0
 8009460:	75fb      	strb	r3, [r7, #23]
      break;
 8009462:	e00b      	b.n	800947c <SCSI_ProcessCmd+0x2f8>

    default:
      SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_CDB);
 8009464:	7af9      	ldrb	r1, [r7, #11]
 8009466:	2320      	movs	r3, #32
 8009468:	2205      	movs	r2, #5
 800946a:	68f8      	ldr	r0, [r7, #12]
 800946c:	f000 fbb4 	bl	8009bd8 <SCSI_SenseCode>
      hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 8009470:	693b      	ldr	r3, [r7, #16]
 8009472:	2202      	movs	r2, #2
 8009474:	725a      	strb	r2, [r3, #9]
      ret = -1;
 8009476:	23ff      	movs	r3, #255	; 0xff
 8009478:	75fb      	strb	r3, [r7, #23]
      break;
 800947a:	bf00      	nop
  }

  return ret;
 800947c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009480:	4618      	mov	r0, r3
 8009482:	3718      	adds	r7, #24
 8009484:	46bd      	mov	sp, r7
 8009486:	bd80      	pop	{r7, pc}

08009488 <SCSI_TestUnitReady>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_TestUnitReady(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8009488:	b580      	push	{r7, lr}
 800948a:	b086      	sub	sp, #24
 800948c:	af00      	add	r7, sp, #0
 800948e:	60f8      	str	r0, [r7, #12]
 8009490:	460b      	mov	r3, r1
 8009492:	607a      	str	r2, [r7, #4]
 8009494:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	32b0      	adds	r2, #176	; 0xb0
 80094a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80094a4:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 80094a6:	697b      	ldr	r3, [r7, #20]
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d102      	bne.n	80094b2 <SCSI_TestUnitReady+0x2a>
  {
    return -1;
 80094ac:	f04f 33ff 	mov.w	r3, #4294967295
 80094b0:	e043      	b.n	800953a <SCSI_TestUnitReady+0xb2>
  }

  /* case 9 : Hi > D0 */
  if (hmsc->cbw.dDataLength != 0U)
 80094b2:	697b      	ldr	r3, [r7, #20]
 80094b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80094b8:	699b      	ldr	r3, [r3, #24]
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d00b      	beq.n	80094d6 <SCSI_TestUnitReady+0x4e>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80094be:	697b      	ldr	r3, [r7, #20]
 80094c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80094c4:	7f59      	ldrb	r1, [r3, #29]
 80094c6:	2320      	movs	r3, #32
 80094c8:	2205      	movs	r2, #5
 80094ca:	68f8      	ldr	r0, [r7, #12]
 80094cc:	f000 fb84 	bl	8009bd8 <SCSI_SenseCode>

    return -1;
 80094d0:	f04f 33ff 	mov.w	r3, #4294967295
 80094d4:	e031      	b.n	800953a <SCSI_TestUnitReady+0xb2>
  }

  if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 80094d6:	697b      	ldr	r3, [r7, #20]
 80094d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80094dc:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 80094e0:	2b02      	cmp	r3, #2
 80094e2:	d10b      	bne.n	80094fc <SCSI_TestUnitReady+0x74>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80094e4:	7af9      	ldrb	r1, [r7, #11]
 80094e6:	233a      	movs	r3, #58	; 0x3a
 80094e8:	2202      	movs	r2, #2
 80094ea:	68f8      	ldr	r0, [r7, #12]
 80094ec:	f000 fb74 	bl	8009bd8 <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 80094f0:	697b      	ldr	r3, [r7, #20]
 80094f2:	2205      	movs	r2, #5
 80094f4:	721a      	strb	r2, [r3, #8]
    return -1;
 80094f6:	f04f 33ff 	mov.w	r3, #4294967295
 80094fa:	e01e      	b.n	800953a <SCSI_TestUnitReady+0xb2>
  }

  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 80094fc:	68fb      	ldr	r3, [r7, #12]
 80094fe:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009502:	68fa      	ldr	r2, [r7, #12]
 8009504:	33b0      	adds	r3, #176	; 0xb0
 8009506:	009b      	lsls	r3, r3, #2
 8009508:	4413      	add	r3, r2
 800950a:	685b      	ldr	r3, [r3, #4]
 800950c:	689b      	ldr	r3, [r3, #8]
 800950e:	7afa      	ldrb	r2, [r7, #11]
 8009510:	4610      	mov	r0, r2
 8009512:	4798      	blx	r3
 8009514:	4603      	mov	r3, r0
 8009516:	2b00      	cmp	r3, #0
 8009518:	d00b      	beq.n	8009532 <SCSI_TestUnitReady+0xaa>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800951a:	7af9      	ldrb	r1, [r7, #11]
 800951c:	233a      	movs	r3, #58	; 0x3a
 800951e:	2202      	movs	r2, #2
 8009520:	68f8      	ldr	r0, [r7, #12]
 8009522:	f000 fb59 	bl	8009bd8 <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 8009526:	697b      	ldr	r3, [r7, #20]
 8009528:	2205      	movs	r2, #5
 800952a:	721a      	strb	r2, [r3, #8]

    return -1;
 800952c:	f04f 33ff 	mov.w	r3, #4294967295
 8009530:	e003      	b.n	800953a <SCSI_TestUnitReady+0xb2>
  }
  hmsc->bot_data_length = 0U;
 8009532:	697b      	ldr	r3, [r7, #20]
 8009534:	2200      	movs	r2, #0
 8009536:	60da      	str	r2, [r3, #12]

  return 0;
 8009538:	2300      	movs	r3, #0
}
 800953a:	4618      	mov	r0, r3
 800953c:	3718      	adds	r7, #24
 800953e:	46bd      	mov	sp, r7
 8009540:	bd80      	pop	{r7, pc}
	...

08009544 <SCSI_Inquiry>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Inquiry(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8009544:	b580      	push	{r7, lr}
 8009546:	b088      	sub	sp, #32
 8009548:	af00      	add	r7, sp, #0
 800954a:	60f8      	str	r0, [r7, #12]
 800954c:	460b      	mov	r3, r1
 800954e:	607a      	str	r2, [r7, #4]
 8009550:	72fb      	strb	r3, [r7, #11]
  uint8_t *pPage;
  uint16_t len;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	32b0      	adds	r2, #176	; 0xb0
 800955c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009560:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 8009562:	69bb      	ldr	r3, [r7, #24]
 8009564:	2b00      	cmp	r3, #0
 8009566:	d102      	bne.n	800956e <SCSI_Inquiry+0x2a>
  {
    return -1;
 8009568:	f04f 33ff 	mov.w	r3, #4294967295
 800956c:	e062      	b.n	8009634 <SCSI_Inquiry+0xf0>
  }

  if (hmsc->cbw.dDataLength == 0U)
 800956e:	69bb      	ldr	r3, [r7, #24]
 8009570:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009574:	699b      	ldr	r3, [r3, #24]
 8009576:	2b00      	cmp	r3, #0
 8009578:	d10b      	bne.n	8009592 <SCSI_Inquiry+0x4e>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800957a:	69bb      	ldr	r3, [r7, #24]
 800957c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009580:	7f59      	ldrb	r1, [r3, #29]
 8009582:	2320      	movs	r3, #32
 8009584:	2205      	movs	r2, #5
 8009586:	68f8      	ldr	r0, [r7, #12]
 8009588:	f000 fb26 	bl	8009bd8 <SCSI_SenseCode>
    return -1;
 800958c:	f04f 33ff 	mov.w	r3, #4294967295
 8009590:	e050      	b.n	8009634 <SCSI_Inquiry+0xf0>
  }

  if ((params[1] & 0x01U) != 0U) /* Evpd is set */
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	3301      	adds	r3, #1
 8009596:	781b      	ldrb	r3, [r3, #0]
 8009598:	f003 0301 	and.w	r3, r3, #1
 800959c:	2b00      	cmp	r3, #0
 800959e:	d021      	beq.n	80095e4 <SCSI_Inquiry+0xa0>
  {
    if (params[2] == 0U) /* Request for Supported Vital Product Data Pages*/
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	3302      	adds	r3, #2
 80095a4:	781b      	ldrb	r3, [r3, #0]
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d105      	bne.n	80095b6 <SCSI_Inquiry+0x72>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page00_Inquiry_Data, LENGTH_INQUIRY_PAGE00);
 80095aa:	2206      	movs	r2, #6
 80095ac:	4923      	ldr	r1, [pc, #140]	; (800963c <SCSI_Inquiry+0xf8>)
 80095ae:	69b8      	ldr	r0, [r7, #24]
 80095b0:	f001 f8f8 	bl	800a7a4 <SCSI_UpdateBotData>
 80095b4:	e03d      	b.n	8009632 <SCSI_Inquiry+0xee>
    }
    else if (params[2] == 0x80U) /* Request for VPD page 0x80 Unit Serial Number */
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	3302      	adds	r3, #2
 80095ba:	781b      	ldrb	r3, [r3, #0]
 80095bc:	2b80      	cmp	r3, #128	; 0x80
 80095be:	d105      	bne.n	80095cc <SCSI_Inquiry+0x88>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page80_Inquiry_Data, LENGTH_INQUIRY_PAGE80);
 80095c0:	2208      	movs	r2, #8
 80095c2:	491f      	ldr	r1, [pc, #124]	; (8009640 <SCSI_Inquiry+0xfc>)
 80095c4:	69b8      	ldr	r0, [r7, #24]
 80095c6:	f001 f8ed 	bl	800a7a4 <SCSI_UpdateBotData>
 80095ca:	e032      	b.n	8009632 <SCSI_Inquiry+0xee>
    }
    else /* Request Not supported */
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST,
 80095cc:	69bb      	ldr	r3, [r7, #24]
 80095ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80095d2:	7f59      	ldrb	r1, [r3, #29]
 80095d4:	2324      	movs	r3, #36	; 0x24
 80095d6:	2205      	movs	r2, #5
 80095d8:	68f8      	ldr	r0, [r7, #12]
 80095da:	f000 fafd 	bl	8009bd8 <SCSI_SenseCode>
                     INVALID_FIELED_IN_COMMAND);

      return -1;
 80095de:	f04f 33ff 	mov.w	r3, #4294967295
 80095e2:	e027      	b.n	8009634 <SCSI_Inquiry+0xf0>
    }
  }
  else
  {

    pPage = (uint8_t *) & ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->pInquiry[lun * STANDARD_INQUIRY_DATA_LEN];
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80095ea:	68fa      	ldr	r2, [r7, #12]
 80095ec:	33b0      	adds	r3, #176	; 0xb0
 80095ee:	009b      	lsls	r3, r3, #2
 80095f0:	4413      	add	r3, r2
 80095f2:	685b      	ldr	r3, [r3, #4]
 80095f4:	69d9      	ldr	r1, [r3, #28]
 80095f6:	7afa      	ldrb	r2, [r7, #11]
 80095f8:	4613      	mov	r3, r2
 80095fa:	00db      	lsls	r3, r3, #3
 80095fc:	4413      	add	r3, r2
 80095fe:	009b      	lsls	r3, r3, #2
 8009600:	440b      	add	r3, r1
 8009602:	617b      	str	r3, [r7, #20]
    len = (uint16_t)pPage[4] + 5U;
 8009604:	697b      	ldr	r3, [r7, #20]
 8009606:	3304      	adds	r3, #4
 8009608:	781b      	ldrb	r3, [r3, #0]
 800960a:	b29b      	uxth	r3, r3
 800960c:	3305      	adds	r3, #5
 800960e:	83fb      	strh	r3, [r7, #30]

    if (params[4] <= len)
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	3304      	adds	r3, #4
 8009614:	781b      	ldrb	r3, [r3, #0]
 8009616:	b29b      	uxth	r3, r3
 8009618:	8bfa      	ldrh	r2, [r7, #30]
 800961a:	429a      	cmp	r2, r3
 800961c:	d303      	bcc.n	8009626 <SCSI_Inquiry+0xe2>
    {
      len = params[4];
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	3304      	adds	r3, #4
 8009622:	781b      	ldrb	r3, [r3, #0]
 8009624:	83fb      	strh	r3, [r7, #30]
    }

    (void)SCSI_UpdateBotData(hmsc, pPage, len);
 8009626:	8bfb      	ldrh	r3, [r7, #30]
 8009628:	461a      	mov	r2, r3
 800962a:	6979      	ldr	r1, [r7, #20]
 800962c:	69b8      	ldr	r0, [r7, #24]
 800962e:	f001 f8b9 	bl	800a7a4 <SCSI_UpdateBotData>
  }

  return 0;
 8009632:	2300      	movs	r3, #0
}
 8009634:	4618      	mov	r0, r3
 8009636:	3720      	adds	r7, #32
 8009638:	46bd      	mov	sp, r7
 800963a:	bd80      	pop	{r7, pc}
 800963c:	20000074 	.word	0x20000074
 8009640:	2000007c 	.word	0x2000007c

08009644 <SCSI_ReadCapacity10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadCapacity10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8009644:	b590      	push	{r4, r7, lr}
 8009646:	b087      	sub	sp, #28
 8009648:	af00      	add	r7, sp, #0
 800964a:	60f8      	str	r0, [r7, #12]
 800964c:	460b      	mov	r3, r1
 800964e:	607a      	str	r2, [r7, #4]
 8009650:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	32b0      	adds	r2, #176	; 0xb0
 800965c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009660:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8009662:	697b      	ldr	r3, [r7, #20]
 8009664:	2b00      	cmp	r3, #0
 8009666:	d102      	bne.n	800966e <SCSI_ReadCapacity10+0x2a>
  {
    return -1;
 8009668:	f04f 33ff 	mov.w	r3, #4294967295
 800966c:	e075      	b.n	800975a <SCSI_ReadCapacity10+0x116>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size);
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009674:	68fa      	ldr	r2, [r7, #12]
 8009676:	33b0      	adds	r3, #176	; 0xb0
 8009678:	009b      	lsls	r3, r3, #2
 800967a:	4413      	add	r3, r2
 800967c:	685b      	ldr	r3, [r3, #4]
 800967e:	685c      	ldr	r4, [r3, #4]
 8009680:	697b      	ldr	r3, [r7, #20]
 8009682:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 8009686:	3308      	adds	r3, #8
 8009688:	697a      	ldr	r2, [r7, #20]
 800968a:	f502 5283 	add.w	r2, r2, #4192	; 0x1060
 800968e:	3204      	adds	r2, #4
 8009690:	7af8      	ldrb	r0, [r7, #11]
 8009692:	4619      	mov	r1, r3
 8009694:	47a0      	blx	r4
 8009696:	4603      	mov	r3, r0
 8009698:	74fb      	strb	r3, [r7, #19]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 800969a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d106      	bne.n	80096b0 <SCSI_ReadCapacity10+0x6c>
 80096a2:	697b      	ldr	r3, [r7, #20]
 80096a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80096a8:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 80096ac:	2b02      	cmp	r3, #2
 80096ae:	d108      	bne.n	80096c2 <SCSI_ReadCapacity10+0x7e>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80096b0:	7af9      	ldrb	r1, [r7, #11]
 80096b2:	233a      	movs	r3, #58	; 0x3a
 80096b4:	2202      	movs	r2, #2
 80096b6:	68f8      	ldr	r0, [r7, #12]
 80096b8:	f000 fa8e 	bl	8009bd8 <SCSI_SenseCode>
    return -1;
 80096bc:	f04f 33ff 	mov.w	r3, #4294967295
 80096c0:	e04b      	b.n	800975a <SCSI_ReadCapacity10+0x116>
  }

  hmsc->bot_data[0] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 80096c2:	697b      	ldr	r3, [r7, #20]
 80096c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80096c8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80096ca:	3b01      	subs	r3, #1
 80096cc:	0e1b      	lsrs	r3, r3, #24
 80096ce:	b2da      	uxtb	r2, r3
 80096d0:	697b      	ldr	r3, [r7, #20]
 80096d2:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[1] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 80096d4:	697b      	ldr	r3, [r7, #20]
 80096d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80096da:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80096dc:	3b01      	subs	r3, #1
 80096de:	0c1b      	lsrs	r3, r3, #16
 80096e0:	b2da      	uxtb	r2, r3
 80096e2:	697b      	ldr	r3, [r7, #20]
 80096e4:	745a      	strb	r2, [r3, #17]
  hmsc->bot_data[2] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 80096e6:	697b      	ldr	r3, [r7, #20]
 80096e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80096ec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80096ee:	3b01      	subs	r3, #1
 80096f0:	0a1b      	lsrs	r3, r3, #8
 80096f2:	b2da      	uxtb	r2, r3
 80096f4:	697b      	ldr	r3, [r7, #20]
 80096f6:	749a      	strb	r2, [r3, #18]
  hmsc->bot_data[3] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 80096f8:	697b      	ldr	r3, [r7, #20]
 80096fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80096fe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009700:	b2db      	uxtb	r3, r3
 8009702:	3b01      	subs	r3, #1
 8009704:	b2da      	uxtb	r2, r3
 8009706:	697b      	ldr	r3, [r7, #20]
 8009708:	74da      	strb	r2, [r3, #19]

  hmsc->bot_data[4] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 800970a:	697b      	ldr	r3, [r7, #20]
 800970c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009710:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8009714:	161b      	asrs	r3, r3, #24
 8009716:	b2da      	uxtb	r2, r3
 8009718:	697b      	ldr	r3, [r7, #20]
 800971a:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 800971c:	697b      	ldr	r3, [r7, #20]
 800971e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009722:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8009726:	141b      	asrs	r3, r3, #16
 8009728:	b2da      	uxtb	r2, r3
 800972a:	697b      	ldr	r3, [r7, #20]
 800972c:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 800972e:	697b      	ldr	r3, [r7, #20]
 8009730:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009734:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8009738:	0a1b      	lsrs	r3, r3, #8
 800973a:	b29b      	uxth	r3, r3
 800973c:	b2da      	uxtb	r2, r3
 800973e:	697b      	ldr	r3, [r7, #20]
 8009740:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_size);
 8009742:	697b      	ldr	r3, [r7, #20]
 8009744:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009748:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800974c:	b2da      	uxtb	r2, r3
 800974e:	697b      	ldr	r3, [r7, #20]
 8009750:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data_length = 8U;
 8009752:	697b      	ldr	r3, [r7, #20]
 8009754:	2208      	movs	r2, #8
 8009756:	60da      	str	r2, [r3, #12]

  return 0;
 8009758:	2300      	movs	r3, #0

}
 800975a:	4618      	mov	r0, r3
 800975c:	371c      	adds	r7, #28
 800975e:	46bd      	mov	sp, r7
 8009760:	bd90      	pop	{r4, r7, pc}

08009762 <SCSI_ReadCapacity16>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadCapacity16(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8009762:	b590      	push	{r4, r7, lr}
 8009764:	b089      	sub	sp, #36	; 0x24
 8009766:	af00      	add	r7, sp, #0
 8009768:	60f8      	str	r0, [r7, #12]
 800976a:	460b      	mov	r3, r1
 800976c:	607a      	str	r2, [r7, #4]
 800976e:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint8_t idx;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	32b0      	adds	r2, #176	; 0xb0
 800977a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800977e:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 8009780:	69bb      	ldr	r3, [r7, #24]
 8009782:	2b00      	cmp	r3, #0
 8009784:	d102      	bne.n	800978c <SCSI_ReadCapacity16+0x2a>
  {
    return -1;
 8009786:	f04f 33ff 	mov.w	r3, #4294967295
 800978a:	e0aa      	b.n	80098e2 <SCSI_ReadCapacity16+0x180>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size);
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009792:	68fa      	ldr	r2, [r7, #12]
 8009794:	33b0      	adds	r3, #176	; 0xb0
 8009796:	009b      	lsls	r3, r3, #2
 8009798:	4413      	add	r3, r2
 800979a:	685b      	ldr	r3, [r3, #4]
 800979c:	685c      	ldr	r4, [r3, #4]
 800979e:	69bb      	ldr	r3, [r7, #24]
 80097a0:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 80097a4:	3308      	adds	r3, #8
 80097a6:	69ba      	ldr	r2, [r7, #24]
 80097a8:	f502 5283 	add.w	r2, r2, #4192	; 0x1060
 80097ac:	3204      	adds	r2, #4
 80097ae:	7af8      	ldrb	r0, [r7, #11]
 80097b0:	4619      	mov	r1, r3
 80097b2:	47a0      	blx	r4
 80097b4:	4603      	mov	r3, r0
 80097b6:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 80097b8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80097bc:	2b00      	cmp	r3, #0
 80097be:	d106      	bne.n	80097ce <SCSI_ReadCapacity16+0x6c>
 80097c0:	69bb      	ldr	r3, [r7, #24]
 80097c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80097c6:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 80097ca:	2b02      	cmp	r3, #2
 80097cc:	d108      	bne.n	80097e0 <SCSI_ReadCapacity16+0x7e>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80097ce:	7af9      	ldrb	r1, [r7, #11]
 80097d0:	233a      	movs	r3, #58	; 0x3a
 80097d2:	2202      	movs	r2, #2
 80097d4:	68f8      	ldr	r0, [r7, #12]
 80097d6:	f000 f9ff 	bl	8009bd8 <SCSI_SenseCode>
    return -1;
 80097da:	f04f 33ff 	mov.w	r3, #4294967295
 80097de:	e080      	b.n	80098e2 <SCSI_ReadCapacity16+0x180>
  }

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	330a      	adds	r3, #10
 80097e4:	781b      	ldrb	r3, [r3, #0]
 80097e6:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	330b      	adds	r3, #11
 80097ec:	781b      	ldrb	r3, [r3, #0]
 80097ee:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 80097f0:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	330c      	adds	r3, #12
 80097f6:	781b      	ldrb	r3, [r3, #0]
 80097f8:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 80097fa:	4313      	orrs	r3, r2
                          (uint32_t)params[13];
 80097fc:	687a      	ldr	r2, [r7, #4]
 80097fe:	320d      	adds	r2, #13
 8009800:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 8009802:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8009804:	69bb      	ldr	r3, [r7, #24]
 8009806:	60da      	str	r2, [r3, #12]

  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 8009808:	2300      	movs	r3, #0
 800980a:	77fb      	strb	r3, [r7, #31]
 800980c:	e007      	b.n	800981e <SCSI_ReadCapacity16+0xbc>
  {
    hmsc->bot_data[idx] = 0U;
 800980e:	7ffb      	ldrb	r3, [r7, #31]
 8009810:	69ba      	ldr	r2, [r7, #24]
 8009812:	4413      	add	r3, r2
 8009814:	2200      	movs	r2, #0
 8009816:	741a      	strb	r2, [r3, #16]
  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 8009818:	7ffb      	ldrb	r3, [r7, #31]
 800981a:	3301      	adds	r3, #1
 800981c:	77fb      	strb	r3, [r7, #31]
 800981e:	7ffa      	ldrb	r2, [r7, #31]
 8009820:	69bb      	ldr	r3, [r7, #24]
 8009822:	68db      	ldr	r3, [r3, #12]
 8009824:	429a      	cmp	r2, r3
 8009826:	d3f2      	bcc.n	800980e <SCSI_ReadCapacity16+0xac>
  }

  hmsc->bot_data[4] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 8009828:	69bb      	ldr	r3, [r7, #24]
 800982a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800982e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009830:	3b01      	subs	r3, #1
 8009832:	0e1b      	lsrs	r3, r3, #24
 8009834:	b2da      	uxtb	r2, r3
 8009836:	69bb      	ldr	r3, [r7, #24]
 8009838:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 800983a:	69bb      	ldr	r3, [r7, #24]
 800983c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009840:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009842:	3b01      	subs	r3, #1
 8009844:	0c1b      	lsrs	r3, r3, #16
 8009846:	b2da      	uxtb	r2, r3
 8009848:	69bb      	ldr	r3, [r7, #24]
 800984a:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 800984c:	69bb      	ldr	r3, [r7, #24]
 800984e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009852:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009854:	3b01      	subs	r3, #1
 8009856:	0a1b      	lsrs	r3, r3, #8
 8009858:	b2da      	uxtb	r2, r3
 800985a:	69bb      	ldr	r3, [r7, #24]
 800985c:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 800985e:	69bb      	ldr	r3, [r7, #24]
 8009860:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009864:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009866:	b2db      	uxtb	r3, r3
 8009868:	3b01      	subs	r3, #1
 800986a:	b2da      	uxtb	r2, r3
 800986c:	69bb      	ldr	r3, [r7, #24]
 800986e:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 8009870:	69bb      	ldr	r3, [r7, #24]
 8009872:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009876:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800987a:	161b      	asrs	r3, r3, #24
 800987c:	b2da      	uxtb	r2, r3
 800987e:	69bb      	ldr	r3, [r7, #24]
 8009880:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 8009882:	69bb      	ldr	r3, [r7, #24]
 8009884:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009888:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800988c:	141b      	asrs	r3, r3, #16
 800988e:	b2da      	uxtb	r2, r3
 8009890:	69bb      	ldr	r3, [r7, #24]
 8009892:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 8009894:	69bb      	ldr	r3, [r7, #24]
 8009896:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800989a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800989e:	0a1b      	lsrs	r3, r3, #8
 80098a0:	b29b      	uxth	r3, r3
 80098a2:	b2da      	uxtb	r2, r3
 80098a4:	69bb      	ldr	r3, [r7, #24]
 80098a6:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(hmsc->scsi_blk_size);
 80098a8:	69bb      	ldr	r3, [r7, #24]
 80098aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80098ae:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80098b2:	b2da      	uxtb	r2, r3
 80098b4:	69bb      	ldr	r3, [r7, #24]
 80098b6:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	330a      	adds	r3, #10
 80098bc:	781b      	ldrb	r3, [r3, #0]
 80098be:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	330b      	adds	r3, #11
 80098c4:	781b      	ldrb	r3, [r3, #0]
 80098c6:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 80098c8:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	330c      	adds	r3, #12
 80098ce:	781b      	ldrb	r3, [r3, #0]
 80098d0:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 80098d2:	4313      	orrs	r3, r2
                          (uint32_t)params[13];
 80098d4:	687a      	ldr	r2, [r7, #4]
 80098d6:	320d      	adds	r2, #13
 80098d8:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 80098da:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 80098dc:	69bb      	ldr	r3, [r7, #24]
 80098de:	60da      	str	r2, [r3, #12]

  return 0;
 80098e0:	2300      	movs	r3, #0
}
 80098e2:	4618      	mov	r0, r3
 80098e4:	3724      	adds	r7, #36	; 0x24
 80098e6:	46bd      	mov	sp, r7
 80098e8:	bd90      	pop	{r4, r7, pc}

080098ea <SCSI_ReadFormatCapacity>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadFormatCapacity(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80098ea:	b580      	push	{r7, lr}
 80098ec:	b088      	sub	sp, #32
 80098ee:	af00      	add	r7, sp, #0
 80098f0:	60f8      	str	r0, [r7, #12]
 80098f2:	460b      	mov	r3, r1
 80098f4:	607a      	str	r2, [r7, #4]
 80098f6:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint16_t blk_size;
  uint32_t blk_nbr;
  uint16_t i;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	32b0      	adds	r2, #176	; 0xb0
 8009902:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009906:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 8009908:	69bb      	ldr	r3, [r7, #24]
 800990a:	2b00      	cmp	r3, #0
 800990c:	d102      	bne.n	8009914 <SCSI_ReadFormatCapacity+0x2a>
  {
    return -1;
 800990e:	f04f 33ff 	mov.w	r3, #4294967295
 8009912:	e063      	b.n	80099dc <SCSI_ReadFormatCapacity+0xf2>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetCapacity(lun, &blk_nbr, &blk_size);
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800991a:	68fa      	ldr	r2, [r7, #12]
 800991c:	33b0      	adds	r3, #176	; 0xb0
 800991e:	009b      	lsls	r3, r3, #2
 8009920:	4413      	add	r3, r2
 8009922:	685b      	ldr	r3, [r3, #4]
 8009924:	685b      	ldr	r3, [r3, #4]
 8009926:	f107 0214 	add.w	r2, r7, #20
 800992a:	f107 0110 	add.w	r1, r7, #16
 800992e:	7af8      	ldrb	r0, [r7, #11]
 8009930:	4798      	blx	r3
 8009932:	4603      	mov	r3, r0
 8009934:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 8009936:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800993a:	2b00      	cmp	r3, #0
 800993c:	d106      	bne.n	800994c <SCSI_ReadFormatCapacity+0x62>
 800993e:	69bb      	ldr	r3, [r7, #24]
 8009940:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009944:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8009948:	2b02      	cmp	r3, #2
 800994a:	d108      	bne.n	800995e <SCSI_ReadFormatCapacity+0x74>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800994c:	7af9      	ldrb	r1, [r7, #11]
 800994e:	233a      	movs	r3, #58	; 0x3a
 8009950:	2202      	movs	r2, #2
 8009952:	68f8      	ldr	r0, [r7, #12]
 8009954:	f000 f940 	bl	8009bd8 <SCSI_SenseCode>
    return -1;
 8009958:	f04f 33ff 	mov.w	r3, #4294967295
 800995c:	e03e      	b.n	80099dc <SCSI_ReadFormatCapacity+0xf2>
  }

  for (i = 0U; i < 12U ; i++)
 800995e:	2300      	movs	r3, #0
 8009960:	83fb      	strh	r3, [r7, #30]
 8009962:	e007      	b.n	8009974 <SCSI_ReadFormatCapacity+0x8a>
  {
    hmsc->bot_data[i] = 0U;
 8009964:	8bfb      	ldrh	r3, [r7, #30]
 8009966:	69ba      	ldr	r2, [r7, #24]
 8009968:	4413      	add	r3, r2
 800996a:	2200      	movs	r2, #0
 800996c:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < 12U ; i++)
 800996e:	8bfb      	ldrh	r3, [r7, #30]
 8009970:	3301      	adds	r3, #1
 8009972:	83fb      	strh	r3, [r7, #30]
 8009974:	8bfb      	ldrh	r3, [r7, #30]
 8009976:	2b0b      	cmp	r3, #11
 8009978:	d9f4      	bls.n	8009964 <SCSI_ReadFormatCapacity+0x7a>
  }

  hmsc->bot_data[3] = 0x08U;
 800997a:	69bb      	ldr	r3, [r7, #24]
 800997c:	2208      	movs	r2, #8
 800997e:	74da      	strb	r2, [r3, #19]
  hmsc->bot_data[4] = (uint8_t)((blk_nbr - 1U) >> 24);
 8009980:	693b      	ldr	r3, [r7, #16]
 8009982:	3b01      	subs	r3, #1
 8009984:	0e1b      	lsrs	r3, r3, #24
 8009986:	b2da      	uxtb	r2, r3
 8009988:	69bb      	ldr	r3, [r7, #24]
 800998a:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((blk_nbr - 1U) >> 16);
 800998c:	693b      	ldr	r3, [r7, #16]
 800998e:	3b01      	subs	r3, #1
 8009990:	0c1b      	lsrs	r3, r3, #16
 8009992:	b2da      	uxtb	r2, r3
 8009994:	69bb      	ldr	r3, [r7, #24]
 8009996:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((blk_nbr - 1U) >>  8);
 8009998:	693b      	ldr	r3, [r7, #16]
 800999a:	3b01      	subs	r3, #1
 800999c:	0a1b      	lsrs	r3, r3, #8
 800999e:	b2da      	uxtb	r2, r3
 80099a0:	69bb      	ldr	r3, [r7, #24]
 80099a2:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(blk_nbr - 1U);
 80099a4:	693b      	ldr	r3, [r7, #16]
 80099a6:	b2db      	uxtb	r3, r3
 80099a8:	3b01      	subs	r3, #1
 80099aa:	b2da      	uxtb	r2, r3
 80099ac:	69bb      	ldr	r3, [r7, #24]
 80099ae:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = 0x02U;
 80099b0:	69bb      	ldr	r3, [r7, #24]
 80099b2:	2202      	movs	r2, #2
 80099b4:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(blk_size >>  16);
 80099b6:	8abb      	ldrh	r3, [r7, #20]
 80099b8:	141b      	asrs	r3, r3, #16
 80099ba:	b2da      	uxtb	r2, r3
 80099bc:	69bb      	ldr	r3, [r7, #24]
 80099be:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(blk_size >>  8);
 80099c0:	8abb      	ldrh	r3, [r7, #20]
 80099c2:	0a1b      	lsrs	r3, r3, #8
 80099c4:	b29b      	uxth	r3, r3
 80099c6:	b2da      	uxtb	r2, r3
 80099c8:	69bb      	ldr	r3, [r7, #24]
 80099ca:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(blk_size);
 80099cc:	8abb      	ldrh	r3, [r7, #20]
 80099ce:	b2da      	uxtb	r2, r3
 80099d0:	69bb      	ldr	r3, [r7, #24]
 80099d2:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = 12U;
 80099d4:	69bb      	ldr	r3, [r7, #24]
 80099d6:	220c      	movs	r2, #12
 80099d8:	60da      	str	r2, [r3, #12]

  return 0;
 80099da:	2300      	movs	r3, #0
}
 80099dc:	4618      	mov	r0, r3
 80099de:	3720      	adds	r7, #32
 80099e0:	46bd      	mov	sp, r7
 80099e2:	bd80      	pop	{r7, pc}

080099e4 <SCSI_ModeSense6>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ModeSense6(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80099e4:	b580      	push	{r7, lr}
 80099e6:	b086      	sub	sp, #24
 80099e8:	af00      	add	r7, sp, #0
 80099ea:	60f8      	str	r0, [r7, #12]
 80099ec:	460b      	mov	r3, r1
 80099ee:	607a      	str	r2, [r7, #4]
 80099f0:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80099f2:	68fb      	ldr	r3, [r7, #12]
 80099f4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	32b0      	adds	r2, #176	; 0xb0
 80099fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a00:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE6_LEN;
 8009a02:	2317      	movs	r3, #23
 8009a04:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 8009a06:	693b      	ldr	r3, [r7, #16]
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	d102      	bne.n	8009a12 <SCSI_ModeSense6+0x2e>
  {
    return -1;
 8009a0c:	f04f 33ff 	mov.w	r3, #4294967295
 8009a10:	e011      	b.n	8009a36 <SCSI_ModeSense6+0x52>
  }

  if (params[4] <= len)
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	3304      	adds	r3, #4
 8009a16:	781b      	ldrb	r3, [r3, #0]
 8009a18:	b29b      	uxth	r3, r3
 8009a1a:	8afa      	ldrh	r2, [r7, #22]
 8009a1c:	429a      	cmp	r2, r3
 8009a1e:	d303      	bcc.n	8009a28 <SCSI_ModeSense6+0x44>
  {
    len = params[4];
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	3304      	adds	r3, #4
 8009a24:	781b      	ldrb	r3, [r3, #0]
 8009a26:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense6_data, len);
 8009a28:	8afb      	ldrh	r3, [r7, #22]
 8009a2a:	461a      	mov	r2, r3
 8009a2c:	4904      	ldr	r1, [pc, #16]	; (8009a40 <SCSI_ModeSense6+0x5c>)
 8009a2e:	6938      	ldr	r0, [r7, #16]
 8009a30:	f000 feb8 	bl	800a7a4 <SCSI_UpdateBotData>

  return 0;
 8009a34:	2300      	movs	r3, #0
}
 8009a36:	4618      	mov	r0, r3
 8009a38:	3718      	adds	r7, #24
 8009a3a:	46bd      	mov	sp, r7
 8009a3c:	bd80      	pop	{r7, pc}
 8009a3e:	bf00      	nop
 8009a40:	20000084 	.word	0x20000084

08009a44 <SCSI_ModeSense10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ModeSense10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8009a44:	b580      	push	{r7, lr}
 8009a46:	b086      	sub	sp, #24
 8009a48:	af00      	add	r7, sp, #0
 8009a4a:	60f8      	str	r0, [r7, #12]
 8009a4c:	460b      	mov	r3, r1
 8009a4e:	607a      	str	r2, [r7, #4]
 8009a50:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009a52:	68fb      	ldr	r3, [r7, #12]
 8009a54:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009a58:	68fb      	ldr	r3, [r7, #12]
 8009a5a:	32b0      	adds	r2, #176	; 0xb0
 8009a5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a60:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE10_LEN;
 8009a62:	231b      	movs	r3, #27
 8009a64:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 8009a66:	693b      	ldr	r3, [r7, #16]
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	d102      	bne.n	8009a72 <SCSI_ModeSense10+0x2e>
  {
    return -1;
 8009a6c:	f04f 33ff 	mov.w	r3, #4294967295
 8009a70:	e011      	b.n	8009a96 <SCSI_ModeSense10+0x52>
  }

  if (params[8] <= len)
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	3308      	adds	r3, #8
 8009a76:	781b      	ldrb	r3, [r3, #0]
 8009a78:	b29b      	uxth	r3, r3
 8009a7a:	8afa      	ldrh	r2, [r7, #22]
 8009a7c:	429a      	cmp	r2, r3
 8009a7e:	d303      	bcc.n	8009a88 <SCSI_ModeSense10+0x44>
  {
    len = params[8];
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	3308      	adds	r3, #8
 8009a84:	781b      	ldrb	r3, [r3, #0]
 8009a86:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense10_data, len);
 8009a88:	8afb      	ldrh	r3, [r7, #22]
 8009a8a:	461a      	mov	r2, r3
 8009a8c:	4904      	ldr	r1, [pc, #16]	; (8009aa0 <SCSI_ModeSense10+0x5c>)
 8009a8e:	6938      	ldr	r0, [r7, #16]
 8009a90:	f000 fe88 	bl	800a7a4 <SCSI_UpdateBotData>

  return 0;
 8009a94:	2300      	movs	r3, #0
}
 8009a96:	4618      	mov	r0, r3
 8009a98:	3718      	adds	r7, #24
 8009a9a:	46bd      	mov	sp, r7
 8009a9c:	bd80      	pop	{r7, pc}
 8009a9e:	bf00      	nop
 8009aa0:	2000009c 	.word	0x2000009c

08009aa4 <SCSI_RequestSense>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_RequestSense(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8009aa4:	b580      	push	{r7, lr}
 8009aa6:	b086      	sub	sp, #24
 8009aa8:	af00      	add	r7, sp, #0
 8009aaa:	60f8      	str	r0, [r7, #12]
 8009aac:	460b      	mov	r3, r1
 8009aae:	607a      	str	r2, [r7, #4]
 8009ab0:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  uint8_t i;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009ab2:	68fb      	ldr	r3, [r7, #12]
 8009ab4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	32b0      	adds	r2, #176	; 0xb0
 8009abc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009ac0:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 8009ac2:	693b      	ldr	r3, [r7, #16]
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	d102      	bne.n	8009ace <SCSI_RequestSense+0x2a>
  {
    return -1;
 8009ac8:	f04f 33ff 	mov.w	r3, #4294967295
 8009acc:	e080      	b.n	8009bd0 <SCSI_RequestSense+0x12c>
  }

  if (hmsc->cbw.dDataLength == 0U)
 8009ace:	693b      	ldr	r3, [r7, #16]
 8009ad0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009ad4:	699b      	ldr	r3, [r3, #24]
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	d10b      	bne.n	8009af2 <SCSI_RequestSense+0x4e>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8009ada:	693b      	ldr	r3, [r7, #16]
 8009adc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009ae0:	7f59      	ldrb	r1, [r3, #29]
 8009ae2:	2320      	movs	r3, #32
 8009ae4:	2205      	movs	r2, #5
 8009ae6:	68f8      	ldr	r0, [r7, #12]
 8009ae8:	f000 f876 	bl	8009bd8 <SCSI_SenseCode>
    return -1;
 8009aec:	f04f 33ff 	mov.w	r3, #4294967295
 8009af0:	e06e      	b.n	8009bd0 <SCSI_RequestSense+0x12c>
  }

  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 8009af2:	2300      	movs	r3, #0
 8009af4:	75fb      	strb	r3, [r7, #23]
 8009af6:	e007      	b.n	8009b08 <SCSI_RequestSense+0x64>
  {
    hmsc->bot_data[i] = 0U;
 8009af8:	7dfb      	ldrb	r3, [r7, #23]
 8009afa:	693a      	ldr	r2, [r7, #16]
 8009afc:	4413      	add	r3, r2
 8009afe:	2200      	movs	r2, #0
 8009b00:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 8009b02:	7dfb      	ldrb	r3, [r7, #23]
 8009b04:	3301      	adds	r3, #1
 8009b06:	75fb      	strb	r3, [r7, #23]
 8009b08:	7dfb      	ldrb	r3, [r7, #23]
 8009b0a:	2b11      	cmp	r3, #17
 8009b0c:	d9f4      	bls.n	8009af8 <SCSI_RequestSense+0x54>
  }

  hmsc->bot_data[0] = 0x70U;
 8009b0e:	693b      	ldr	r3, [r7, #16]
 8009b10:	2270      	movs	r2, #112	; 0x70
 8009b12:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[7] = REQUEST_SENSE_DATA_LEN - 6U;
 8009b14:	693b      	ldr	r3, [r7, #16]
 8009b16:	220c      	movs	r2, #12
 8009b18:	75da      	strb	r2, [r3, #23]

  if ((hmsc->scsi_sense_head != hmsc->scsi_sense_tail))
 8009b1a:	693b      	ldr	r3, [r7, #16]
 8009b1c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009b20:	f893 2060 	ldrb.w	r2, [r3, #96]	; 0x60
 8009b24:	693b      	ldr	r3, [r7, #16]
 8009b26:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009b2a:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8009b2e:	429a      	cmp	r2, r3
 8009b30:	d03f      	beq.n	8009bb2 <SCSI_RequestSense+0x10e>
  {
    hmsc->bot_data[2] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].Skey;
 8009b32:	693b      	ldr	r3, [r7, #16]
 8009b34:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009b38:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8009b3c:	461a      	mov	r2, r3
 8009b3e:	693b      	ldr	r3, [r7, #16]
 8009b40:	f502 7202 	add.w	r2, r2, #520	; 0x208
 8009b44:	f813 2032 	ldrb.w	r2, [r3, r2, lsl #3]
 8009b48:	693b      	ldr	r3, [r7, #16]
 8009b4a:	749a      	strb	r2, [r3, #18]
    hmsc->bot_data[12] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASC;
 8009b4c:	693b      	ldr	r3, [r7, #16]
 8009b4e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009b52:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8009b56:	693a      	ldr	r2, [r7, #16]
 8009b58:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8009b5c:	00db      	lsls	r3, r3, #3
 8009b5e:	4413      	add	r3, r2
 8009b60:	791a      	ldrb	r2, [r3, #4]
 8009b62:	693b      	ldr	r3, [r7, #16]
 8009b64:	771a      	strb	r2, [r3, #28]
    hmsc->bot_data[13] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASCQ;
 8009b66:	693b      	ldr	r3, [r7, #16]
 8009b68:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009b6c:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8009b70:	693a      	ldr	r2, [r7, #16]
 8009b72:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8009b76:	00db      	lsls	r3, r3, #3
 8009b78:	4413      	add	r3, r2
 8009b7a:	795a      	ldrb	r2, [r3, #5]
 8009b7c:	693b      	ldr	r3, [r7, #16]
 8009b7e:	775a      	strb	r2, [r3, #29]
    hmsc->scsi_sense_head++;
 8009b80:	693b      	ldr	r3, [r7, #16]
 8009b82:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009b86:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8009b8a:	3301      	adds	r3, #1
 8009b8c:	b2da      	uxtb	r2, r3
 8009b8e:	693b      	ldr	r3, [r7, #16]
 8009b90:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009b94:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

    if (hmsc->scsi_sense_head == SENSE_LIST_DEEPTH)
 8009b98:	693b      	ldr	r3, [r7, #16]
 8009b9a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009b9e:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8009ba2:	2b04      	cmp	r3, #4
 8009ba4:	d105      	bne.n	8009bb2 <SCSI_RequestSense+0x10e>
    {
      hmsc->scsi_sense_head = 0U;
 8009ba6:	693b      	ldr	r3, [r7, #16]
 8009ba8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009bac:	2200      	movs	r2, #0
 8009bae:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
    }
  }

  hmsc->bot_data_length = REQUEST_SENSE_DATA_LEN;
 8009bb2:	693b      	ldr	r3, [r7, #16]
 8009bb4:	2212      	movs	r2, #18
 8009bb6:	60da      	str	r2, [r3, #12]

  if (params[4] <= REQUEST_SENSE_DATA_LEN)
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	3304      	adds	r3, #4
 8009bbc:	781b      	ldrb	r3, [r3, #0]
 8009bbe:	2b12      	cmp	r3, #18
 8009bc0:	d805      	bhi.n	8009bce <SCSI_RequestSense+0x12a>
  {
    hmsc->bot_data_length = params[4];
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	3304      	adds	r3, #4
 8009bc6:	781b      	ldrb	r3, [r3, #0]
 8009bc8:	461a      	mov	r2, r3
 8009bca:	693b      	ldr	r3, [r7, #16]
 8009bcc:	60da      	str	r2, [r3, #12]
  }

  return 0;
 8009bce:	2300      	movs	r3, #0
}
 8009bd0:	4618      	mov	r0, r3
 8009bd2:	3718      	adds	r7, #24
 8009bd4:	46bd      	mov	sp, r7
 8009bd6:	bd80      	pop	{r7, pc}

08009bd8 <SCSI_SenseCode>:
  * @param  ASC: Additional Sense Code
  * @retval none

  */
void SCSI_SenseCode(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t sKey, uint8_t ASC)
{
 8009bd8:	b480      	push	{r7}
 8009bda:	b085      	sub	sp, #20
 8009bdc:	af00      	add	r7, sp, #0
 8009bde:	6078      	str	r0, [r7, #4]
 8009be0:	4608      	mov	r0, r1
 8009be2:	4611      	mov	r1, r2
 8009be4:	461a      	mov	r2, r3
 8009be6:	4603      	mov	r3, r0
 8009be8:	70fb      	strb	r3, [r7, #3]
 8009bea:	460b      	mov	r3, r1
 8009bec:	70bb      	strb	r3, [r7, #2]
 8009bee:	4613      	mov	r3, r2
 8009bf0:	707b      	strb	r3, [r7, #1]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	32b0      	adds	r2, #176	; 0xb0
 8009bfc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c00:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	d03d      	beq.n	8009c84 <SCSI_SenseCode+0xac>
  {
    return;
  }

  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey = sKey;
 8009c08:	68fb      	ldr	r3, [r7, #12]
 8009c0a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009c0e:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8009c12:	461a      	mov	r2, r3
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	f502 7202 	add.w	r2, r2, #520	; 0x208
 8009c1a:	78b9      	ldrb	r1, [r7, #2]
 8009c1c:	f803 1032 	strb.w	r1, [r3, r2, lsl #3]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASC = ASC;
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009c26:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8009c2a:	68fa      	ldr	r2, [r7, #12]
 8009c2c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8009c30:	00db      	lsls	r3, r3, #3
 8009c32:	4413      	add	r3, r2
 8009c34:	787a      	ldrb	r2, [r7, #1]
 8009c36:	711a      	strb	r2, [r3, #4]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASCQ = 0U;
 8009c38:	68fb      	ldr	r3, [r7, #12]
 8009c3a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009c3e:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8009c42:	68fa      	ldr	r2, [r7, #12]
 8009c44:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8009c48:	00db      	lsls	r3, r3, #3
 8009c4a:	4413      	add	r3, r2
 8009c4c:	2200      	movs	r2, #0
 8009c4e:	715a      	strb	r2, [r3, #5]
  hmsc->scsi_sense_tail++;
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009c56:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8009c5a:	3301      	adds	r3, #1
 8009c5c:	b2da      	uxtb	r2, r3
 8009c5e:	68fb      	ldr	r3, [r7, #12]
 8009c60:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009c64:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 8009c68:	68fb      	ldr	r3, [r7, #12]
 8009c6a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009c6e:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8009c72:	2b04      	cmp	r3, #4
 8009c74:	d107      	bne.n	8009c86 <SCSI_SenseCode+0xae>
  {
    hmsc->scsi_sense_tail = 0U;
 8009c76:	68fb      	ldr	r3, [r7, #12]
 8009c78:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009c7c:	2200      	movs	r2, #0
 8009c7e:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
 8009c82:	e000      	b.n	8009c86 <SCSI_SenseCode+0xae>
    return;
 8009c84:	bf00      	nop
  }
}
 8009c86:	3714      	adds	r7, #20
 8009c88:	46bd      	mov	sp, r7
 8009c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c8e:	4770      	bx	lr

08009c90 <SCSI_StartStopUnit>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_StartStopUnit(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8009c90:	b580      	push	{r7, lr}
 8009c92:	b086      	sub	sp, #24
 8009c94:	af00      	add	r7, sp, #0
 8009c96:	60f8      	str	r0, [r7, #12]
 8009c98:	460b      	mov	r3, r1
 8009c9a:	607a      	str	r2, [r7, #4]
 8009c9c:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	32b0      	adds	r2, #176	; 0xb0
 8009ca8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009cac:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8009cae:	697b      	ldr	r3, [r7, #20]
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	d102      	bne.n	8009cba <SCSI_StartStopUnit+0x2a>
  {
    return -1;
 8009cb4:	f04f 33ff 	mov.w	r3, #4294967295
 8009cb8:	e043      	b.n	8009d42 <SCSI_StartStopUnit+0xb2>
  }

  if ((hmsc->scsi_medium_state == SCSI_MEDIUM_LOCKED) && ((params[4] & 0x3U) == 2U))
 8009cba:	697b      	ldr	r3, [r7, #20]
 8009cbc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009cc0:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8009cc4:	2b01      	cmp	r3, #1
 8009cc6:	d10f      	bne.n	8009ce8 <SCSI_StartStopUnit+0x58>
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	3304      	adds	r3, #4
 8009ccc:	781b      	ldrb	r3, [r3, #0]
 8009cce:	f003 0303 	and.w	r3, r3, #3
 8009cd2:	2b02      	cmp	r3, #2
 8009cd4:	d108      	bne.n	8009ce8 <SCSI_StartStopUnit+0x58>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 8009cd6:	7af9      	ldrb	r1, [r7, #11]
 8009cd8:	2324      	movs	r3, #36	; 0x24
 8009cda:	2205      	movs	r2, #5
 8009cdc:	68f8      	ldr	r0, [r7, #12]
 8009cde:	f7ff ff7b 	bl	8009bd8 <SCSI_SenseCode>

    return -1;
 8009ce2:	f04f 33ff 	mov.w	r3, #4294967295
 8009ce6:	e02c      	b.n	8009d42 <SCSI_StartStopUnit+0xb2>
  }

  if ((params[4] & 0x3U) == 0x1U) /* START=1 */
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	3304      	adds	r3, #4
 8009cec:	781b      	ldrb	r3, [r3, #0]
 8009cee:	f003 0303 	and.w	r3, r3, #3
 8009cf2:	2b01      	cmp	r3, #1
 8009cf4:	d106      	bne.n	8009d04 <SCSI_StartStopUnit+0x74>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 8009cf6:	697b      	ldr	r3, [r7, #20]
 8009cf8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009cfc:	2200      	movs	r2, #0
 8009cfe:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
 8009d02:	e01a      	b.n	8009d3a <SCSI_StartStopUnit+0xaa>
  }
  else if ((params[4] & 0x3U) == 0x2U) /* START=0 and LOEJ Load Eject=1 */
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	3304      	adds	r3, #4
 8009d08:	781b      	ldrb	r3, [r3, #0]
 8009d0a:	f003 0303 	and.w	r3, r3, #3
 8009d0e:	2b02      	cmp	r3, #2
 8009d10:	d106      	bne.n	8009d20 <SCSI_StartStopUnit+0x90>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_EJECTED;
 8009d12:	697b      	ldr	r3, [r7, #20]
 8009d14:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009d18:	2202      	movs	r2, #2
 8009d1a:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
 8009d1e:	e00c      	b.n	8009d3a <SCSI_StartStopUnit+0xaa>
  }
  else if ((params[4] & 0x3U) == 0x3U) /* START=1 and LOEJ Load Eject=1 */
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	3304      	adds	r3, #4
 8009d24:	781b      	ldrb	r3, [r3, #0]
 8009d26:	f003 0303 	and.w	r3, r3, #3
 8009d2a:	2b03      	cmp	r3, #3
 8009d2c:	d105      	bne.n	8009d3a <SCSI_StartStopUnit+0xaa>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 8009d2e:	697b      	ldr	r3, [r7, #20]
 8009d30:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009d34:	2200      	movs	r2, #0
 8009d36:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
  }
  else
  {
    /* .. */
  }
  hmsc->bot_data_length = 0U;
 8009d3a:	697b      	ldr	r3, [r7, #20]
 8009d3c:	2200      	movs	r2, #0
 8009d3e:	60da      	str	r2, [r3, #12]

  return 0;
 8009d40:	2300      	movs	r3, #0
}
 8009d42:	4618      	mov	r0, r3
 8009d44:	3718      	adds	r7, #24
 8009d46:	46bd      	mov	sp, r7
 8009d48:	bd80      	pop	{r7, pc}

08009d4a <SCSI_AllowPreventRemovable>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_AllowPreventRemovable(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8009d4a:	b480      	push	{r7}
 8009d4c:	b087      	sub	sp, #28
 8009d4e:	af00      	add	r7, sp, #0
 8009d50:	60f8      	str	r0, [r7, #12]
 8009d52:	460b      	mov	r3, r1
 8009d54:	607a      	str	r2, [r7, #4]
 8009d56:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	32b0      	adds	r2, #176	; 0xb0
 8009d62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d66:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8009d68:	697b      	ldr	r3, [r7, #20]
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	d102      	bne.n	8009d74 <SCSI_AllowPreventRemovable+0x2a>
  {
    return -1;
 8009d6e:	f04f 33ff 	mov.w	r3, #4294967295
 8009d72:	e015      	b.n	8009da0 <SCSI_AllowPreventRemovable+0x56>
  }

  if (params[4] == 0U)
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	3304      	adds	r3, #4
 8009d78:	781b      	ldrb	r3, [r3, #0]
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	d106      	bne.n	8009d8c <SCSI_AllowPreventRemovable+0x42>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 8009d7e:	697b      	ldr	r3, [r7, #20]
 8009d80:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009d84:	2200      	movs	r2, #0
 8009d86:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
 8009d8a:	e005      	b.n	8009d98 <SCSI_AllowPreventRemovable+0x4e>
  }
  else
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_LOCKED;
 8009d8c:	697b      	ldr	r3, [r7, #20]
 8009d8e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009d92:	2201      	movs	r2, #1
 8009d94:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
  }

  hmsc->bot_data_length = 0U;
 8009d98:	697b      	ldr	r3, [r7, #20]
 8009d9a:	2200      	movs	r2, #0
 8009d9c:	60da      	str	r2, [r3, #12]

  return 0;
 8009d9e:	2300      	movs	r3, #0
}
 8009da0:	4618      	mov	r0, r3
 8009da2:	371c      	adds	r7, #28
 8009da4:	46bd      	mov	sp, r7
 8009da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009daa:	4770      	bx	lr

08009dac <SCSI_Read10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Read10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8009dac:	b580      	push	{r7, lr}
 8009dae:	b086      	sub	sp, #24
 8009db0:	af00      	add	r7, sp, #0
 8009db2:	60f8      	str	r0, [r7, #12]
 8009db4:	460b      	mov	r3, r1
 8009db6:	607a      	str	r2, [r7, #4]
 8009db8:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009dba:	68fb      	ldr	r3, [r7, #12]
 8009dbc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009dc0:	68fb      	ldr	r3, [r7, #12]
 8009dc2:	32b0      	adds	r2, #176	; 0xb0
 8009dc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009dc8:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8009dca:	697b      	ldr	r3, [r7, #20]
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	d102      	bne.n	8009dd6 <SCSI_Read10+0x2a>
  {
    return -1;
 8009dd0:	f04f 33ff 	mov.w	r3, #4294967295
 8009dd4:	e09d      	b.n	8009f12 <SCSI_Read10+0x166>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8009dd6:	697b      	ldr	r3, [r7, #20]
 8009dd8:	7a1b      	ldrb	r3, [r3, #8]
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	f040 808f 	bne.w	8009efe <SCSI_Read10+0x152>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 8009de0:	697b      	ldr	r3, [r7, #20]
 8009de2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009de6:	7f1b      	ldrb	r3, [r3, #28]
 8009de8:	b25b      	sxtb	r3, r3
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	db0b      	blt.n	8009e06 <SCSI_Read10+0x5a>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8009dee:	697b      	ldr	r3, [r7, #20]
 8009df0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009df4:	7f59      	ldrb	r1, [r3, #29]
 8009df6:	2320      	movs	r3, #32
 8009df8:	2205      	movs	r2, #5
 8009dfa:	68f8      	ldr	r0, [r7, #12]
 8009dfc:	f7ff feec 	bl	8009bd8 <SCSI_SenseCode>
      return -1;
 8009e00:	f04f 33ff 	mov.w	r3, #4294967295
 8009e04:	e085      	b.n	8009f12 <SCSI_Read10+0x166>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 8009e06:	697b      	ldr	r3, [r7, #20]
 8009e08:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009e0c:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8009e10:	2b02      	cmp	r3, #2
 8009e12:	d108      	bne.n	8009e26 <SCSI_Read10+0x7a>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8009e14:	7af9      	ldrb	r1, [r7, #11]
 8009e16:	233a      	movs	r3, #58	; 0x3a
 8009e18:	2202      	movs	r2, #2
 8009e1a:	68f8      	ldr	r0, [r7, #12]
 8009e1c:	f7ff fedc 	bl	8009bd8 <SCSI_SenseCode>

      return -1;
 8009e20:	f04f 33ff 	mov.w	r3, #4294967295
 8009e24:	e075      	b.n	8009f12 <SCSI_Read10+0x166>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 8009e26:	68fb      	ldr	r3, [r7, #12]
 8009e28:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009e2c:	68fa      	ldr	r2, [r7, #12]
 8009e2e:	33b0      	adds	r3, #176	; 0xb0
 8009e30:	009b      	lsls	r3, r3, #2
 8009e32:	4413      	add	r3, r2
 8009e34:	685b      	ldr	r3, [r3, #4]
 8009e36:	689b      	ldr	r3, [r3, #8]
 8009e38:	7afa      	ldrb	r2, [r7, #11]
 8009e3a:	4610      	mov	r0, r2
 8009e3c:	4798      	blx	r3
 8009e3e:	4603      	mov	r3, r0
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	d008      	beq.n	8009e56 <SCSI_Read10+0xaa>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8009e44:	7af9      	ldrb	r1, [r7, #11]
 8009e46:	233a      	movs	r3, #58	; 0x3a
 8009e48:	2202      	movs	r2, #2
 8009e4a:	68f8      	ldr	r0, [r7, #12]
 8009e4c:	f7ff fec4 	bl	8009bd8 <SCSI_SenseCode>
      return -1;
 8009e50:	f04f 33ff 	mov.w	r3, #4294967295
 8009e54:	e05d      	b.n	8009f12 <SCSI_Read10+0x166>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	3302      	adds	r3, #2
 8009e5a:	781b      	ldrb	r3, [r3, #0]
 8009e5c:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	3303      	adds	r3, #3
 8009e62:	781b      	ldrb	r3, [r3, #0]
 8009e64:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8009e66:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	3304      	adds	r3, #4
 8009e6c:	781b      	ldrb	r3, [r3, #0]
 8009e6e:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8009e70:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8009e72:	687a      	ldr	r2, [r7, #4]
 8009e74:	3205      	adds	r2, #5
 8009e76:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 8009e78:	4313      	orrs	r3, r2
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8009e7a:	697a      	ldr	r2, [r7, #20]
 8009e7c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8009e80:	66d3      	str	r3, [r2, #108]	; 0x6c

    hmsc->scsi_blk_len = ((uint32_t)params[7] <<  8) | (uint32_t)params[8];
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	3307      	adds	r3, #7
 8009e86:	781b      	ldrb	r3, [r3, #0]
 8009e88:	021b      	lsls	r3, r3, #8
 8009e8a:	687a      	ldr	r2, [r7, #4]
 8009e8c:	3208      	adds	r2, #8
 8009e8e:	7812      	ldrb	r2, [r2, #0]
 8009e90:	4313      	orrs	r3, r2
 8009e92:	697a      	ldr	r2, [r7, #20]
 8009e94:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8009e98:	6713      	str	r3, [r2, #112]	; 0x70

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8009e9a:	697b      	ldr	r3, [r7, #20]
 8009e9c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009ea0:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8009ea2:	697b      	ldr	r3, [r7, #20]
 8009ea4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009ea8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009eaa:	7af9      	ldrb	r1, [r7, #11]
 8009eac:	68f8      	ldr	r0, [r7, #12]
 8009eae:	f000 fb0c 	bl	800a4ca <SCSI_CheckAddressRange>
 8009eb2:	4603      	mov	r3, r0
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	da02      	bge.n	8009ebe <SCSI_Read10+0x112>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8009eb8:	f04f 33ff 	mov.w	r3, #4294967295
 8009ebc:	e029      	b.n	8009f12 <SCSI_Read10+0x166>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 8009ebe:	697b      	ldr	r3, [r7, #20]
 8009ec0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009ec4:	699a      	ldr	r2, [r3, #24]
 8009ec6:	697b      	ldr	r3, [r7, #20]
 8009ec8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009ecc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009ece:	6979      	ldr	r1, [r7, #20]
 8009ed0:	f501 5180 	add.w	r1, r1, #4096	; 0x1000
 8009ed4:	f8b1 1064 	ldrh.w	r1, [r1, #100]	; 0x64
 8009ed8:	fb01 f303 	mul.w	r3, r1, r3
 8009edc:	429a      	cmp	r2, r3
 8009ede:	d00b      	beq.n	8009ef8 <SCSI_Read10+0x14c>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8009ee0:	697b      	ldr	r3, [r7, #20]
 8009ee2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009ee6:	7f59      	ldrb	r1, [r3, #29]
 8009ee8:	2320      	movs	r3, #32
 8009eea:	2205      	movs	r2, #5
 8009eec:	68f8      	ldr	r0, [r7, #12]
 8009eee:	f7ff fe73 	bl	8009bd8 <SCSI_SenseCode>
      return -1;
 8009ef2:	f04f 33ff 	mov.w	r3, #4294967295
 8009ef6:	e00c      	b.n	8009f12 <SCSI_Read10+0x166>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 8009ef8:	697b      	ldr	r3, [r7, #20]
 8009efa:	2202      	movs	r2, #2
 8009efc:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 8009efe:	697b      	ldr	r3, [r7, #20]
 8009f00:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8009f04:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 8009f06:	7afb      	ldrb	r3, [r7, #11]
 8009f08:	4619      	mov	r1, r3
 8009f0a:	68f8      	ldr	r0, [r7, #12]
 8009f0c:	f000 fb0a 	bl	800a524 <SCSI_ProcessRead>
 8009f10:	4603      	mov	r3, r0
}
 8009f12:	4618      	mov	r0, r3
 8009f14:	3718      	adds	r7, #24
 8009f16:	46bd      	mov	sp, r7
 8009f18:	bd80      	pop	{r7, pc}

08009f1a <SCSI_Read12>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Read12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8009f1a:	b580      	push	{r7, lr}
 8009f1c:	b086      	sub	sp, #24
 8009f1e:	af00      	add	r7, sp, #0
 8009f20:	60f8      	str	r0, [r7, #12]
 8009f22:	460b      	mov	r3, r1
 8009f24:	607a      	str	r2, [r7, #4]
 8009f26:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009f2e:	68fb      	ldr	r3, [r7, #12]
 8009f30:	32b0      	adds	r2, #176	; 0xb0
 8009f32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009f36:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8009f38:	697b      	ldr	r3, [r7, #20]
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	d102      	bne.n	8009f44 <SCSI_Read12+0x2a>
  {
    return -1;
 8009f3e:	f04f 33ff 	mov.w	r3, #4294967295
 8009f42:	e0a7      	b.n	800a094 <SCSI_Read12+0x17a>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8009f44:	697b      	ldr	r3, [r7, #20]
 8009f46:	7a1b      	ldrb	r3, [r3, #8]
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	f040 8099 	bne.w	800a080 <SCSI_Read12+0x166>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 8009f4e:	697b      	ldr	r3, [r7, #20]
 8009f50:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009f54:	7f1b      	ldrb	r3, [r3, #28]
 8009f56:	b25b      	sxtb	r3, r3
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	db0b      	blt.n	8009f74 <SCSI_Read12+0x5a>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8009f5c:	697b      	ldr	r3, [r7, #20]
 8009f5e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009f62:	7f59      	ldrb	r1, [r3, #29]
 8009f64:	2320      	movs	r3, #32
 8009f66:	2205      	movs	r2, #5
 8009f68:	68f8      	ldr	r0, [r7, #12]
 8009f6a:	f7ff fe35 	bl	8009bd8 <SCSI_SenseCode>
      return -1;
 8009f6e:	f04f 33ff 	mov.w	r3, #4294967295
 8009f72:	e08f      	b.n	800a094 <SCSI_Read12+0x17a>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 8009f74:	697b      	ldr	r3, [r7, #20]
 8009f76:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009f7a:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8009f7e:	2b02      	cmp	r3, #2
 8009f80:	d108      	bne.n	8009f94 <SCSI_Read12+0x7a>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8009f82:	7af9      	ldrb	r1, [r7, #11]
 8009f84:	233a      	movs	r3, #58	; 0x3a
 8009f86:	2202      	movs	r2, #2
 8009f88:	68f8      	ldr	r0, [r7, #12]
 8009f8a:	f7ff fe25 	bl	8009bd8 <SCSI_SenseCode>
      return -1;
 8009f8e:	f04f 33ff 	mov.w	r3, #4294967295
 8009f92:	e07f      	b.n	800a094 <SCSI_Read12+0x17a>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009f9a:	68fa      	ldr	r2, [r7, #12]
 8009f9c:	33b0      	adds	r3, #176	; 0xb0
 8009f9e:	009b      	lsls	r3, r3, #2
 8009fa0:	4413      	add	r3, r2
 8009fa2:	685b      	ldr	r3, [r3, #4]
 8009fa4:	689b      	ldr	r3, [r3, #8]
 8009fa6:	7afa      	ldrb	r2, [r7, #11]
 8009fa8:	4610      	mov	r0, r2
 8009faa:	4798      	blx	r3
 8009fac:	4603      	mov	r3, r0
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	d008      	beq.n	8009fc4 <SCSI_Read12+0xaa>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8009fb2:	7af9      	ldrb	r1, [r7, #11]
 8009fb4:	233a      	movs	r3, #58	; 0x3a
 8009fb6:	2202      	movs	r2, #2
 8009fb8:	68f8      	ldr	r0, [r7, #12]
 8009fba:	f7ff fe0d 	bl	8009bd8 <SCSI_SenseCode>
      return -1;
 8009fbe:	f04f 33ff 	mov.w	r3, #4294967295
 8009fc2:	e067      	b.n	800a094 <SCSI_Read12+0x17a>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	3302      	adds	r3, #2
 8009fc8:	781b      	ldrb	r3, [r3, #0]
 8009fca:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	3303      	adds	r3, #3
 8009fd0:	781b      	ldrb	r3, [r3, #0]
 8009fd2:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8009fd4:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	3304      	adds	r3, #4
 8009fda:	781b      	ldrb	r3, [r3, #0]
 8009fdc:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8009fde:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8009fe0:	687a      	ldr	r2, [r7, #4]
 8009fe2:	3205      	adds	r2, #5
 8009fe4:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 8009fe6:	4313      	orrs	r3, r2
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8009fe8:	697a      	ldr	r2, [r7, #20]
 8009fea:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8009fee:	66d3      	str	r3, [r2, #108]	; 0x6c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	3306      	adds	r3, #6
 8009ff4:	781b      	ldrb	r3, [r3, #0]
 8009ff6:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	3307      	adds	r3, #7
 8009ffc:	781b      	ldrb	r3, [r3, #0]
 8009ffe:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800a000:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	3308      	adds	r3, #8
 800a006:	781b      	ldrb	r3, [r3, #0]
 800a008:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 800a00a:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 800a00c:	687a      	ldr	r2, [r7, #4]
 800a00e:	3209      	adds	r2, #9
 800a010:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 800a012:	4313      	orrs	r3, r2
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800a014:	697a      	ldr	r2, [r7, #20]
 800a016:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a01a:	6713      	str	r3, [r2, #112]	; 0x70

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800a01c:	697b      	ldr	r3, [r7, #20]
 800a01e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a022:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800a024:	697b      	ldr	r3, [r7, #20]
 800a026:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a02a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a02c:	7af9      	ldrb	r1, [r7, #11]
 800a02e:	68f8      	ldr	r0, [r7, #12]
 800a030:	f000 fa4b 	bl	800a4ca <SCSI_CheckAddressRange>
 800a034:	4603      	mov	r3, r0
 800a036:	2b00      	cmp	r3, #0
 800a038:	da02      	bge.n	800a040 <SCSI_Read12+0x126>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800a03a:	f04f 33ff 	mov.w	r3, #4294967295
 800a03e:	e029      	b.n	800a094 <SCSI_Read12+0x17a>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 800a040:	697b      	ldr	r3, [r7, #20]
 800a042:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a046:	699a      	ldr	r2, [r3, #24]
 800a048:	697b      	ldr	r3, [r7, #20]
 800a04a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a04e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a050:	6979      	ldr	r1, [r7, #20]
 800a052:	f501 5180 	add.w	r1, r1, #4096	; 0x1000
 800a056:	f8b1 1064 	ldrh.w	r1, [r1, #100]	; 0x64
 800a05a:	fb01 f303 	mul.w	r3, r1, r3
 800a05e:	429a      	cmp	r2, r3
 800a060:	d00b      	beq.n	800a07a <SCSI_Read12+0x160>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800a062:	697b      	ldr	r3, [r7, #20]
 800a064:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a068:	7f59      	ldrb	r1, [r3, #29]
 800a06a:	2320      	movs	r3, #32
 800a06c:	2205      	movs	r2, #5
 800a06e:	68f8      	ldr	r0, [r7, #12]
 800a070:	f7ff fdb2 	bl	8009bd8 <SCSI_SenseCode>
      return -1;
 800a074:	f04f 33ff 	mov.w	r3, #4294967295
 800a078:	e00c      	b.n	800a094 <SCSI_Read12+0x17a>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 800a07a:	697b      	ldr	r3, [r7, #20]
 800a07c:	2202      	movs	r2, #2
 800a07e:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 800a080:	697b      	ldr	r3, [r7, #20]
 800a082:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800a086:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 800a088:	7afb      	ldrb	r3, [r7, #11]
 800a08a:	4619      	mov	r1, r3
 800a08c:	68f8      	ldr	r0, [r7, #12]
 800a08e:	f000 fa49 	bl	800a524 <SCSI_ProcessRead>
 800a092:	4603      	mov	r3, r0
}
 800a094:	4618      	mov	r0, r3
 800a096:	3718      	adds	r7, #24
 800a098:	46bd      	mov	sp, r7
 800a09a:	bd80      	pop	{r7, pc}

0800a09c <SCSI_Write10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Write10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800a09c:	b580      	push	{r7, lr}
 800a09e:	b086      	sub	sp, #24
 800a0a0:	af00      	add	r7, sp, #0
 800a0a2:	60f8      	str	r0, [r7, #12]
 800a0a4:	460b      	mov	r3, r1
 800a0a6:	607a      	str	r2, [r7, #4]
 800a0a8:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a0aa:	68fb      	ldr	r3, [r7, #12]
 800a0ac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a0b0:	68fb      	ldr	r3, [r7, #12]
 800a0b2:	32b0      	adds	r2, #176	; 0xb0
 800a0b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a0b8:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc == NULL)
 800a0ba:	697b      	ldr	r3, [r7, #20]
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	d102      	bne.n	800a0c6 <SCSI_Write10+0x2a>
  {
    return -1;
 800a0c0:	f04f 33ff 	mov.w	r3, #4294967295
 800a0c4:	e0c7      	b.n	800a256 <SCSI_Write10+0x1ba>
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800a0c6:	697b      	ldr	r3, [r7, #20]
 800a0c8:	7a1b      	ldrb	r3, [r3, #8]
 800a0ca:	2b00      	cmp	r3, #0
 800a0cc:	f040 80bd 	bne.w	800a24a <SCSI_Write10+0x1ae>
  {
    if (hmsc->cbw.dDataLength == 0U)
 800a0d0:	697b      	ldr	r3, [r7, #20]
 800a0d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a0d6:	699b      	ldr	r3, [r3, #24]
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d10b      	bne.n	800a0f4 <SCSI_Write10+0x58>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800a0dc:	697b      	ldr	r3, [r7, #20]
 800a0de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a0e2:	7f59      	ldrb	r1, [r3, #29]
 800a0e4:	2320      	movs	r3, #32
 800a0e6:	2205      	movs	r2, #5
 800a0e8:	68f8      	ldr	r0, [r7, #12]
 800a0ea:	f7ff fd75 	bl	8009bd8 <SCSI_SenseCode>
      return -1;
 800a0ee:	f04f 33ff 	mov.w	r3, #4294967295
 800a0f2:	e0b0      	b.n	800a256 <SCSI_Write10+0x1ba>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 800a0f4:	697b      	ldr	r3, [r7, #20]
 800a0f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a0fa:	7f1b      	ldrb	r3, [r3, #28]
 800a0fc:	b25b      	sxtb	r3, r3
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	da0b      	bge.n	800a11a <SCSI_Write10+0x7e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800a102:	697b      	ldr	r3, [r7, #20]
 800a104:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a108:	7f59      	ldrb	r1, [r3, #29]
 800a10a:	2320      	movs	r3, #32
 800a10c:	2205      	movs	r2, #5
 800a10e:	68f8      	ldr	r0, [r7, #12]
 800a110:	f7ff fd62 	bl	8009bd8 <SCSI_SenseCode>
      return -1;
 800a114:	f04f 33ff 	mov.w	r3, #4294967295
 800a118:	e09d      	b.n	800a256 <SCSI_Write10+0x1ba>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 800a11a:	68fb      	ldr	r3, [r7, #12]
 800a11c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a120:	68fa      	ldr	r2, [r7, #12]
 800a122:	33b0      	adds	r3, #176	; 0xb0
 800a124:	009b      	lsls	r3, r3, #2
 800a126:	4413      	add	r3, r2
 800a128:	685b      	ldr	r3, [r3, #4]
 800a12a:	689b      	ldr	r3, [r3, #8]
 800a12c:	7afa      	ldrb	r2, [r7, #11]
 800a12e:	4610      	mov	r0, r2
 800a130:	4798      	blx	r3
 800a132:	4603      	mov	r3, r0
 800a134:	2b00      	cmp	r3, #0
 800a136:	d008      	beq.n	800a14a <SCSI_Write10+0xae>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800a138:	7af9      	ldrb	r1, [r7, #11]
 800a13a:	233a      	movs	r3, #58	; 0x3a
 800a13c:	2202      	movs	r2, #2
 800a13e:	68f8      	ldr	r0, [r7, #12]
 800a140:	f7ff fd4a 	bl	8009bd8 <SCSI_SenseCode>
      return -1;
 800a144:	f04f 33ff 	mov.w	r3, #4294967295
 800a148:	e085      	b.n	800a256 <SCSI_Write10+0x1ba>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsWriteProtected(lun) != 0)
 800a14a:	68fb      	ldr	r3, [r7, #12]
 800a14c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a150:	68fa      	ldr	r2, [r7, #12]
 800a152:	33b0      	adds	r3, #176	; 0xb0
 800a154:	009b      	lsls	r3, r3, #2
 800a156:	4413      	add	r3, r2
 800a158:	685b      	ldr	r3, [r3, #4]
 800a15a:	68db      	ldr	r3, [r3, #12]
 800a15c:	7afa      	ldrb	r2, [r7, #11]
 800a15e:	4610      	mov	r0, r2
 800a160:	4798      	blx	r3
 800a162:	4603      	mov	r3, r0
 800a164:	2b00      	cmp	r3, #0
 800a166:	d008      	beq.n	800a17a <SCSI_Write10+0xde>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 800a168:	7af9      	ldrb	r1, [r7, #11]
 800a16a:	2327      	movs	r3, #39	; 0x27
 800a16c:	2202      	movs	r2, #2
 800a16e:	68f8      	ldr	r0, [r7, #12]
 800a170:	f7ff fd32 	bl	8009bd8 <SCSI_SenseCode>
      return -1;
 800a174:	f04f 33ff 	mov.w	r3, #4294967295
 800a178:	e06d      	b.n	800a256 <SCSI_Write10+0x1ba>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	3302      	adds	r3, #2
 800a17e:	781b      	ldrb	r3, [r3, #0]
 800a180:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	3303      	adds	r3, #3
 800a186:	781b      	ldrb	r3, [r3, #0]
 800a188:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800a18a:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	3304      	adds	r3, #4
 800a190:	781b      	ldrb	r3, [r3, #0]
 800a192:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800a194:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 800a196:	687a      	ldr	r2, [r7, #4]
 800a198:	3205      	adds	r2, #5
 800a19a:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 800a19c:	4313      	orrs	r3, r2
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800a19e:	697a      	ldr	r2, [r7, #20]
 800a1a0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a1a4:	66d3      	str	r3, [r2, #108]	; 0x6c

    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	3307      	adds	r3, #7
 800a1aa:	781b      	ldrb	r3, [r3, #0]
 800a1ac:	021b      	lsls	r3, r3, #8
                         (uint32_t)params[8];
 800a1ae:	687a      	ldr	r2, [r7, #4]
 800a1b0:	3208      	adds	r2, #8
 800a1b2:	7812      	ldrb	r2, [r2, #0]
    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 800a1b4:	4313      	orrs	r3, r2
 800a1b6:	697a      	ldr	r2, [r7, #20]
 800a1b8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a1bc:	6713      	str	r3, [r2, #112]	; 0x70

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800a1be:	697b      	ldr	r3, [r7, #20]
 800a1c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a1c4:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800a1c6:	697b      	ldr	r3, [r7, #20]
 800a1c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a1cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a1ce:	7af9      	ldrb	r1, [r7, #11]
 800a1d0:	68f8      	ldr	r0, [r7, #12]
 800a1d2:	f000 f97a 	bl	800a4ca <SCSI_CheckAddressRange>
 800a1d6:	4603      	mov	r3, r0
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	da02      	bge.n	800a1e2 <SCSI_Write10+0x146>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800a1dc:	f04f 33ff 	mov.w	r3, #4294967295
 800a1e0:	e039      	b.n	800a256 <SCSI_Write10+0x1ba>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800a1e2:	697b      	ldr	r3, [r7, #20]
 800a1e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a1e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a1ea:	697a      	ldr	r2, [r7, #20]
 800a1ec:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a1f0:	f8b2 2064 	ldrh.w	r2, [r2, #100]	; 0x64
 800a1f4:	fb02 f303 	mul.w	r3, r2, r3
 800a1f8:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 800a1fa:	697b      	ldr	r3, [r7, #20]
 800a1fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a200:	699b      	ldr	r3, [r3, #24]
 800a202:	693a      	ldr	r2, [r7, #16]
 800a204:	429a      	cmp	r2, r3
 800a206:	d00b      	beq.n	800a220 <SCSI_Write10+0x184>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800a208:	697b      	ldr	r3, [r7, #20]
 800a20a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a20e:	7f59      	ldrb	r1, [r3, #29]
 800a210:	2320      	movs	r3, #32
 800a212:	2205      	movs	r2, #5
 800a214:	68f8      	ldr	r0, [r7, #12]
 800a216:	f7ff fcdf 	bl	8009bd8 <SCSI_SenseCode>
      return -1;
 800a21a:	f04f 33ff 	mov.w	r3, #4294967295
 800a21e:	e01a      	b.n	800a256 <SCSI_Write10+0x1ba>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 800a220:	693b      	ldr	r3, [r7, #16]
 800a222:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a226:	bf28      	it	cs
 800a228:	f44f 5380 	movcs.w	r3, #4096	; 0x1000
 800a22c:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 800a22e:	697b      	ldr	r3, [r7, #20]
 800a230:	2201      	movs	r2, #1
 800a232:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
 800a234:	4b0a      	ldr	r3, [pc, #40]	; (800a260 <SCSI_Write10+0x1c4>)
 800a236:	7819      	ldrb	r1, [r3, #0]
 800a238:	697b      	ldr	r3, [r7, #20]
 800a23a:	f103 0210 	add.w	r2, r3, #16
 800a23e:	693b      	ldr	r3, [r7, #16]
 800a240:	68f8      	ldr	r0, [r7, #12]
 800a242:	f002 fa69 	bl	800c718 <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 800a246:	2300      	movs	r3, #0
 800a248:	e005      	b.n	800a256 <SCSI_Write10+0x1ba>
    return SCSI_ProcessWrite(pdev, lun);
 800a24a:	7afb      	ldrb	r3, [r7, #11]
 800a24c:	4619      	mov	r1, r3
 800a24e:	68f8      	ldr	r0, [r7, #12]
 800a250:	f000 f9fe 	bl	800a650 <SCSI_ProcessWrite>
 800a254:	4603      	mov	r3, r0
}
 800a256:	4618      	mov	r0, r3
 800a258:	3718      	adds	r7, #24
 800a25a:	46bd      	mov	sp, r7
 800a25c:	bd80      	pop	{r7, pc}
 800a25e:	bf00      	nop
 800a260:	20000073 	.word	0x20000073

0800a264 <SCSI_Write12>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Write12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800a264:	b580      	push	{r7, lr}
 800a266:	b086      	sub	sp, #24
 800a268:	af00      	add	r7, sp, #0
 800a26a:	60f8      	str	r0, [r7, #12]
 800a26c:	460b      	mov	r3, r1
 800a26e:	607a      	str	r2, [r7, #4]
 800a270:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a272:	68fb      	ldr	r3, [r7, #12]
 800a274:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a278:	68fb      	ldr	r3, [r7, #12]
 800a27a:	32b0      	adds	r2, #176	; 0xb0
 800a27c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a280:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc == NULL)
 800a282:	697b      	ldr	r3, [r7, #20]
 800a284:	2b00      	cmp	r3, #0
 800a286:	d102      	bne.n	800a28e <SCSI_Write12+0x2a>
  {
    return -1;
 800a288:	f04f 33ff 	mov.w	r3, #4294967295
 800a28c:	e0d7      	b.n	800a43e <SCSI_Write12+0x1da>
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800a28e:	697b      	ldr	r3, [r7, #20]
 800a290:	7a1b      	ldrb	r3, [r3, #8]
 800a292:	2b00      	cmp	r3, #0
 800a294:	f040 80cd 	bne.w	800a432 <SCSI_Write12+0x1ce>
  {
    if (hmsc->cbw.dDataLength == 0U)
 800a298:	697b      	ldr	r3, [r7, #20]
 800a29a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a29e:	699b      	ldr	r3, [r3, #24]
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	d10b      	bne.n	800a2bc <SCSI_Write12+0x58>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800a2a4:	697b      	ldr	r3, [r7, #20]
 800a2a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a2aa:	7f59      	ldrb	r1, [r3, #29]
 800a2ac:	2320      	movs	r3, #32
 800a2ae:	2205      	movs	r2, #5
 800a2b0:	68f8      	ldr	r0, [r7, #12]
 800a2b2:	f7ff fc91 	bl	8009bd8 <SCSI_SenseCode>
      return -1;
 800a2b6:	f04f 33ff 	mov.w	r3, #4294967295
 800a2ba:	e0c0      	b.n	800a43e <SCSI_Write12+0x1da>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 800a2bc:	697b      	ldr	r3, [r7, #20]
 800a2be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a2c2:	7f1b      	ldrb	r3, [r3, #28]
 800a2c4:	b25b      	sxtb	r3, r3
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	da0b      	bge.n	800a2e2 <SCSI_Write12+0x7e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800a2ca:	697b      	ldr	r3, [r7, #20]
 800a2cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a2d0:	7f59      	ldrb	r1, [r3, #29]
 800a2d2:	2320      	movs	r3, #32
 800a2d4:	2205      	movs	r2, #5
 800a2d6:	68f8      	ldr	r0, [r7, #12]
 800a2d8:	f7ff fc7e 	bl	8009bd8 <SCSI_SenseCode>
      return -1;
 800a2dc:	f04f 33ff 	mov.w	r3, #4294967295
 800a2e0:	e0ad      	b.n	800a43e <SCSI_Write12+0x1da>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 800a2e2:	68fb      	ldr	r3, [r7, #12]
 800a2e4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a2e8:	68fa      	ldr	r2, [r7, #12]
 800a2ea:	33b0      	adds	r3, #176	; 0xb0
 800a2ec:	009b      	lsls	r3, r3, #2
 800a2ee:	4413      	add	r3, r2
 800a2f0:	685b      	ldr	r3, [r3, #4]
 800a2f2:	689b      	ldr	r3, [r3, #8]
 800a2f4:	7afa      	ldrb	r2, [r7, #11]
 800a2f6:	4610      	mov	r0, r2
 800a2f8:	4798      	blx	r3
 800a2fa:	4603      	mov	r3, r0
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	d00b      	beq.n	800a318 <SCSI_Write12+0xb4>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800a300:	7af9      	ldrb	r1, [r7, #11]
 800a302:	233a      	movs	r3, #58	; 0x3a
 800a304:	2202      	movs	r2, #2
 800a306:	68f8      	ldr	r0, [r7, #12]
 800a308:	f7ff fc66 	bl	8009bd8 <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 800a30c:	697b      	ldr	r3, [r7, #20]
 800a30e:	2205      	movs	r2, #5
 800a310:	721a      	strb	r2, [r3, #8]
      return -1;
 800a312:	f04f 33ff 	mov.w	r3, #4294967295
 800a316:	e092      	b.n	800a43e <SCSI_Write12+0x1da>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsWriteProtected(lun) != 0)
 800a318:	68fb      	ldr	r3, [r7, #12]
 800a31a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a31e:	68fa      	ldr	r2, [r7, #12]
 800a320:	33b0      	adds	r3, #176	; 0xb0
 800a322:	009b      	lsls	r3, r3, #2
 800a324:	4413      	add	r3, r2
 800a326:	685b      	ldr	r3, [r3, #4]
 800a328:	68db      	ldr	r3, [r3, #12]
 800a32a:	7afa      	ldrb	r2, [r7, #11]
 800a32c:	4610      	mov	r0, r2
 800a32e:	4798      	blx	r3
 800a330:	4603      	mov	r3, r0
 800a332:	2b00      	cmp	r3, #0
 800a334:	d00b      	beq.n	800a34e <SCSI_Write12+0xea>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 800a336:	7af9      	ldrb	r1, [r7, #11]
 800a338:	2327      	movs	r3, #39	; 0x27
 800a33a:	2202      	movs	r2, #2
 800a33c:	68f8      	ldr	r0, [r7, #12]
 800a33e:	f7ff fc4b 	bl	8009bd8 <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 800a342:	697b      	ldr	r3, [r7, #20]
 800a344:	2205      	movs	r2, #5
 800a346:	721a      	strb	r2, [r3, #8]
      return -1;
 800a348:	f04f 33ff 	mov.w	r3, #4294967295
 800a34c:	e077      	b.n	800a43e <SCSI_Write12+0x1da>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	3302      	adds	r3, #2
 800a352:	781b      	ldrb	r3, [r3, #0]
 800a354:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	3303      	adds	r3, #3
 800a35a:	781b      	ldrb	r3, [r3, #0]
 800a35c:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800a35e:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	3304      	adds	r3, #4
 800a364:	781b      	ldrb	r3, [r3, #0]
 800a366:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800a368:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 800a36a:	687a      	ldr	r2, [r7, #4]
 800a36c:	3205      	adds	r2, #5
 800a36e:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 800a370:	4313      	orrs	r3, r2
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800a372:	697a      	ldr	r2, [r7, #20]
 800a374:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a378:	66d3      	str	r3, [r2, #108]	; 0x6c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	3306      	adds	r3, #6
 800a37e:	781b      	ldrb	r3, [r3, #0]
 800a380:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	3307      	adds	r3, #7
 800a386:	781b      	ldrb	r3, [r3, #0]
 800a388:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800a38a:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	3308      	adds	r3, #8
 800a390:	781b      	ldrb	r3, [r3, #0]
 800a392:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 800a394:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 800a396:	687a      	ldr	r2, [r7, #4]
 800a398:	3209      	adds	r2, #9
 800a39a:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 800a39c:	4313      	orrs	r3, r2
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800a39e:	697a      	ldr	r2, [r7, #20]
 800a3a0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a3a4:	6713      	str	r3, [r2, #112]	; 0x70

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800a3a6:	697b      	ldr	r3, [r7, #20]
 800a3a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a3ac:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800a3ae:	697b      	ldr	r3, [r7, #20]
 800a3b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a3b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a3b6:	7af9      	ldrb	r1, [r7, #11]
 800a3b8:	68f8      	ldr	r0, [r7, #12]
 800a3ba:	f000 f886 	bl	800a4ca <SCSI_CheckAddressRange>
 800a3be:	4603      	mov	r3, r0
 800a3c0:	2b00      	cmp	r3, #0
 800a3c2:	da02      	bge.n	800a3ca <SCSI_Write12+0x166>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800a3c4:	f04f 33ff 	mov.w	r3, #4294967295
 800a3c8:	e039      	b.n	800a43e <SCSI_Write12+0x1da>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800a3ca:	697b      	ldr	r3, [r7, #20]
 800a3cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a3d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a3d2:	697a      	ldr	r2, [r7, #20]
 800a3d4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a3d8:	f8b2 2064 	ldrh.w	r2, [r2, #100]	; 0x64
 800a3dc:	fb02 f303 	mul.w	r3, r2, r3
 800a3e0:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 800a3e2:	697b      	ldr	r3, [r7, #20]
 800a3e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a3e8:	699b      	ldr	r3, [r3, #24]
 800a3ea:	693a      	ldr	r2, [r7, #16]
 800a3ec:	429a      	cmp	r2, r3
 800a3ee:	d00b      	beq.n	800a408 <SCSI_Write12+0x1a4>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800a3f0:	697b      	ldr	r3, [r7, #20]
 800a3f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a3f6:	7f59      	ldrb	r1, [r3, #29]
 800a3f8:	2320      	movs	r3, #32
 800a3fa:	2205      	movs	r2, #5
 800a3fc:	68f8      	ldr	r0, [r7, #12]
 800a3fe:	f7ff fbeb 	bl	8009bd8 <SCSI_SenseCode>
      return -1;
 800a402:	f04f 33ff 	mov.w	r3, #4294967295
 800a406:	e01a      	b.n	800a43e <SCSI_Write12+0x1da>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 800a408:	693b      	ldr	r3, [r7, #16]
 800a40a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a40e:	bf28      	it	cs
 800a410:	f44f 5380 	movcs.w	r3, #4096	; 0x1000
 800a414:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 800a416:	697b      	ldr	r3, [r7, #20]
 800a418:	2201      	movs	r2, #1
 800a41a:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
 800a41c:	4b0a      	ldr	r3, [pc, #40]	; (800a448 <SCSI_Write12+0x1e4>)
 800a41e:	7819      	ldrb	r1, [r3, #0]
 800a420:	697b      	ldr	r3, [r7, #20]
 800a422:	f103 0210 	add.w	r2, r3, #16
 800a426:	693b      	ldr	r3, [r7, #16]
 800a428:	68f8      	ldr	r0, [r7, #12]
 800a42a:	f002 f975 	bl	800c718 <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 800a42e:	2300      	movs	r3, #0
 800a430:	e005      	b.n	800a43e <SCSI_Write12+0x1da>
    return SCSI_ProcessWrite(pdev, lun);
 800a432:	7afb      	ldrb	r3, [r7, #11]
 800a434:	4619      	mov	r1, r3
 800a436:	68f8      	ldr	r0, [r7, #12]
 800a438:	f000 f90a 	bl	800a650 <SCSI_ProcessWrite>
 800a43c:	4603      	mov	r3, r0
}
 800a43e:	4618      	mov	r0, r3
 800a440:	3718      	adds	r7, #24
 800a442:	46bd      	mov	sp, r7
 800a444:	bd80      	pop	{r7, pc}
 800a446:	bf00      	nop
 800a448:	20000073 	.word	0x20000073

0800a44c <SCSI_Verify10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Verify10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800a44c:	b580      	push	{r7, lr}
 800a44e:	b086      	sub	sp, #24
 800a450:	af00      	add	r7, sp, #0
 800a452:	60f8      	str	r0, [r7, #12]
 800a454:	460b      	mov	r3, r1
 800a456:	607a      	str	r2, [r7, #4]
 800a458:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a45a:	68fb      	ldr	r3, [r7, #12]
 800a45c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a460:	68fb      	ldr	r3, [r7, #12]
 800a462:	32b0      	adds	r2, #176	; 0xb0
 800a464:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a468:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800a46a:	697b      	ldr	r3, [r7, #20]
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	d102      	bne.n	800a476 <SCSI_Verify10+0x2a>
  {
    return -1;
 800a470:	f04f 33ff 	mov.w	r3, #4294967295
 800a474:	e025      	b.n	800a4c2 <SCSI_Verify10+0x76>
  }

  if ((params[1] & 0x02U) == 0x02U)
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	3301      	adds	r3, #1
 800a47a:	781b      	ldrb	r3, [r3, #0]
 800a47c:	f003 0302 	and.w	r3, r3, #2
 800a480:	2b00      	cmp	r3, #0
 800a482:	d008      	beq.n	800a496 <SCSI_Verify10+0x4a>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 800a484:	7af9      	ldrb	r1, [r7, #11]
 800a486:	2324      	movs	r3, #36	; 0x24
 800a488:	2205      	movs	r2, #5
 800a48a:	68f8      	ldr	r0, [r7, #12]
 800a48c:	f7ff fba4 	bl	8009bd8 <SCSI_SenseCode>
    return -1; /* Error, Verify Mode Not supported*/
 800a490:	f04f 33ff 	mov.w	r3, #4294967295
 800a494:	e015      	b.n	800a4c2 <SCSI_Verify10+0x76>
  }

  if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr, hmsc->scsi_blk_len) < 0)
 800a496:	697b      	ldr	r3, [r7, #20]
 800a498:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a49c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800a49e:	697b      	ldr	r3, [r7, #20]
 800a4a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a4a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a4a6:	7af9      	ldrb	r1, [r7, #11]
 800a4a8:	68f8      	ldr	r0, [r7, #12]
 800a4aa:	f000 f80e 	bl	800a4ca <SCSI_CheckAddressRange>
 800a4ae:	4603      	mov	r3, r0
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	da02      	bge.n	800a4ba <SCSI_Verify10+0x6e>
  {
    return -1; /* error */
 800a4b4:	f04f 33ff 	mov.w	r3, #4294967295
 800a4b8:	e003      	b.n	800a4c2 <SCSI_Verify10+0x76>
  }

  hmsc->bot_data_length = 0U;
 800a4ba:	697b      	ldr	r3, [r7, #20]
 800a4bc:	2200      	movs	r2, #0
 800a4be:	60da      	str	r2, [r3, #12]

  return 0;
 800a4c0:	2300      	movs	r3, #0
}
 800a4c2:	4618      	mov	r0, r3
 800a4c4:	3718      	adds	r7, #24
 800a4c6:	46bd      	mov	sp, r7
 800a4c8:	bd80      	pop	{r7, pc}

0800a4ca <SCSI_CheckAddressRange>:
  * @param  blk_nbr: number of block to be processed
  * @retval status
  */
static int8_t SCSI_CheckAddressRange(USBD_HandleTypeDef *pdev, uint8_t lun,
                                     uint32_t blk_offset, uint32_t blk_nbr)
{
 800a4ca:	b580      	push	{r7, lr}
 800a4cc:	b086      	sub	sp, #24
 800a4ce:	af00      	add	r7, sp, #0
 800a4d0:	60f8      	str	r0, [r7, #12]
 800a4d2:	607a      	str	r2, [r7, #4]
 800a4d4:	603b      	str	r3, [r7, #0]
 800a4d6:	460b      	mov	r3, r1
 800a4d8:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a4da:	68fb      	ldr	r3, [r7, #12]
 800a4dc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a4e0:	68fb      	ldr	r3, [r7, #12]
 800a4e2:	32b0      	adds	r2, #176	; 0xb0
 800a4e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a4e8:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800a4ea:	697b      	ldr	r3, [r7, #20]
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	d102      	bne.n	800a4f6 <SCSI_CheckAddressRange+0x2c>
  {
    return -1;
 800a4f0:	f04f 33ff 	mov.w	r3, #4294967295
 800a4f4:	e012      	b.n	800a51c <SCSI_CheckAddressRange+0x52>
  }

  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr)
 800a4f6:	687a      	ldr	r2, [r7, #4]
 800a4f8:	683b      	ldr	r3, [r7, #0]
 800a4fa:	441a      	add	r2, r3
 800a4fc:	697b      	ldr	r3, [r7, #20]
 800a4fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a502:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a504:	429a      	cmp	r2, r3
 800a506:	d908      	bls.n	800a51a <SCSI_CheckAddressRange+0x50>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, ADDRESS_OUT_OF_RANGE);
 800a508:	7af9      	ldrb	r1, [r7, #11]
 800a50a:	2321      	movs	r3, #33	; 0x21
 800a50c:	2205      	movs	r2, #5
 800a50e:	68f8      	ldr	r0, [r7, #12]
 800a510:	f7ff fb62 	bl	8009bd8 <SCSI_SenseCode>
    return -1;
 800a514:	f04f 33ff 	mov.w	r3, #4294967295
 800a518:	e000      	b.n	800a51c <SCSI_CheckAddressRange+0x52>
  }

  return 0;
 800a51a:	2300      	movs	r3, #0
}
 800a51c:	4618      	mov	r0, r3
 800a51e:	3718      	adds	r7, #24
 800a520:	46bd      	mov	sp, r7
 800a522:	bd80      	pop	{r7, pc}

0800a524 <SCSI_ProcessRead>:
  *         Handle Read Process
  * @param  lun: Logical unit number
  * @retval status
  */
static int8_t SCSI_ProcessRead(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 800a524:	b590      	push	{r4, r7, lr}
 800a526:	b085      	sub	sp, #20
 800a528:	af00      	add	r7, sp, #0
 800a52a:	6078      	str	r0, [r7, #4]
 800a52c:	460b      	mov	r3, r1
 800a52e:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	32b0      	adds	r2, #176	; 0xb0
 800a53a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a53e:	60fb      	str	r3, [r7, #12]
  uint32_t len;

  if (hmsc == NULL)
 800a540:	68fb      	ldr	r3, [r7, #12]
 800a542:	2b00      	cmp	r3, #0
 800a544:	d102      	bne.n	800a54c <SCSI_ProcessRead+0x28>
  {
    return -1;
 800a546:	f04f 33ff 	mov.w	r3, #4294967295
 800a54a:	e07b      	b.n	800a644 <SCSI_ProcessRead+0x120>
  }

  len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800a54c:	68fb      	ldr	r3, [r7, #12]
 800a54e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a552:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a554:	68fa      	ldr	r2, [r7, #12]
 800a556:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a55a:	f8b2 2064 	ldrh.w	r2, [r2, #100]	; 0x64
 800a55e:	fb02 f303 	mul.w	r3, r2, r3
 800a562:	60bb      	str	r3, [r7, #8]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  len = MIN(len, MSC_MEDIA_PACKET);
 800a564:	68bb      	ldr	r3, [r7, #8]
 800a566:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a56a:	bf28      	it	cs
 800a56c:	f44f 5380 	movcs.w	r3, #4096	; 0x1000
 800a570:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Read(lun, hmsc->bot_data,
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a578:	687a      	ldr	r2, [r7, #4]
 800a57a:	33b0      	adds	r3, #176	; 0xb0
 800a57c:	009b      	lsls	r3, r3, #2
 800a57e:	4413      	add	r3, r2
 800a580:	685b      	ldr	r3, [r3, #4]
 800a582:	691c      	ldr	r4, [r3, #16]
 800a584:	68fb      	ldr	r3, [r7, #12]
 800a586:	f103 0110 	add.w	r1, r3, #16
 800a58a:	68fb      	ldr	r3, [r7, #12]
 800a58c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a590:	6eda      	ldr	r2, [r3, #108]	; 0x6c
                                                                    hmsc->scsi_blk_addr,
                                                                    (len / hmsc->scsi_blk_size)) < 0)
 800a592:	68fb      	ldr	r3, [r7, #12]
 800a594:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a598:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800a59c:	4618      	mov	r0, r3
 800a59e:	68bb      	ldr	r3, [r7, #8]
 800a5a0:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Read(lun, hmsc->bot_data,
 800a5a4:	b29b      	uxth	r3, r3
 800a5a6:	78f8      	ldrb	r0, [r7, #3]
 800a5a8:	47a0      	blx	r4
 800a5aa:	4603      	mov	r3, r0
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	da08      	bge.n	800a5c2 <SCSI_ProcessRead+0x9e>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, UNRECOVERED_READ_ERROR);
 800a5b0:	78f9      	ldrb	r1, [r7, #3]
 800a5b2:	2311      	movs	r3, #17
 800a5b4:	2204      	movs	r2, #4
 800a5b6:	6878      	ldr	r0, [r7, #4]
 800a5b8:	f7ff fb0e 	bl	8009bd8 <SCSI_SenseCode>
    return -1;
 800a5bc:	f04f 33ff 	mov.w	r3, #4294967295
 800a5c0:	e040      	b.n	800a644 <SCSI_ProcessRead+0x120>
  }

  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, hmsc->bot_data, len);
 800a5c2:	4b22      	ldr	r3, [pc, #136]	; (800a64c <SCSI_ProcessRead+0x128>)
 800a5c4:	7819      	ldrb	r1, [r3, #0]
 800a5c6:	68fb      	ldr	r3, [r7, #12]
 800a5c8:	f103 0210 	add.w	r2, r3, #16
 800a5cc:	68bb      	ldr	r3, [r7, #8]
 800a5ce:	6878      	ldr	r0, [r7, #4]
 800a5d0:	f002 f881 	bl	800c6d6 <USBD_LL_Transmit>

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 800a5d4:	68fb      	ldr	r3, [r7, #12]
 800a5d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a5da:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800a5dc:	68fb      	ldr	r3, [r7, #12]
 800a5de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a5e2:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800a5e6:	4619      	mov	r1, r3
 800a5e8:	68bb      	ldr	r3, [r7, #8]
 800a5ea:	fbb3 f3f1 	udiv	r3, r3, r1
 800a5ee:	4413      	add	r3, r2
 800a5f0:	68fa      	ldr	r2, [r7, #12]
 800a5f2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a5f6:	66d3      	str	r3, [r2, #108]	; 0x6c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 800a5f8:	68fb      	ldr	r3, [r7, #12]
 800a5fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a5fe:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800a600:	68fb      	ldr	r3, [r7, #12]
 800a602:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a606:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800a60a:	4619      	mov	r1, r3
 800a60c:	68bb      	ldr	r3, [r7, #8]
 800a60e:	fbb3 f3f1 	udiv	r3, r3, r1
 800a612:	1ad3      	subs	r3, r2, r3
 800a614:	68fa      	ldr	r2, [r7, #12]
 800a616:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a61a:	6713      	str	r3, [r2, #112]	; 0x70

  /* case 6 : Hi = Di */
  hmsc->csw.dDataResidue -= len;
 800a61c:	68fb      	ldr	r3, [r7, #12]
 800a61e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a622:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a624:	68bb      	ldr	r3, [r7, #8]
 800a626:	1ad3      	subs	r3, r2, r3
 800a628:	68fa      	ldr	r2, [r7, #12]
 800a62a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a62e:	6393      	str	r3, [r2, #56]	; 0x38

  if (hmsc->scsi_blk_len == 0U)
 800a630:	68fb      	ldr	r3, [r7, #12]
 800a632:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a636:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a638:	2b00      	cmp	r3, #0
 800a63a:	d102      	bne.n	800a642 <SCSI_ProcessRead+0x11e>
  {
    hmsc->bot_state = USBD_BOT_LAST_DATA_IN;
 800a63c:	68fb      	ldr	r3, [r7, #12]
 800a63e:	2203      	movs	r2, #3
 800a640:	721a      	strb	r2, [r3, #8]
  }

  return 0;
 800a642:	2300      	movs	r3, #0
}
 800a644:	4618      	mov	r0, r3
 800a646:	3714      	adds	r7, #20
 800a648:	46bd      	mov	sp, r7
 800a64a:	bd90      	pop	{r4, r7, pc}
 800a64c:	20000072 	.word	0x20000072

0800a650 <SCSI_ProcessWrite>:
  *         Handle Write Process
  * @param  lun: Logical unit number
  * @retval status
  */
static int8_t SCSI_ProcessWrite(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 800a650:	b590      	push	{r4, r7, lr}
 800a652:	b085      	sub	sp, #20
 800a654:	af00      	add	r7, sp, #0
 800a656:	6078      	str	r0, [r7, #4]
 800a658:	460b      	mov	r3, r1
 800a65a:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	32b0      	adds	r2, #176	; 0xb0
 800a666:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a66a:	60fb      	str	r3, [r7, #12]
  uint32_t len;

  if (hmsc == NULL)
 800a66c:	68fb      	ldr	r3, [r7, #12]
 800a66e:	2b00      	cmp	r3, #0
 800a670:	d102      	bne.n	800a678 <SCSI_ProcessWrite+0x28>
  {
    return -1;
 800a672:	f04f 33ff 	mov.w	r3, #4294967295
 800a676:	e08e      	b.n	800a796 <SCSI_ProcessWrite+0x146>
  }

  len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800a678:	68fb      	ldr	r3, [r7, #12]
 800a67a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a67e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a680:	68fa      	ldr	r2, [r7, #12]
 800a682:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a686:	f8b2 2064 	ldrh.w	r2, [r2, #100]	; 0x64
 800a68a:	fb02 f303 	mul.w	r3, r2, r3
 800a68e:	60bb      	str	r3, [r7, #8]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  len = MIN(len, MSC_MEDIA_PACKET);
 800a690:	68bb      	ldr	r3, [r7, #8]
 800a692:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a696:	bf28      	it	cs
 800a698:	f44f 5380 	movcs.w	r3, #4096	; 0x1000
 800a69c:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Write(lun, hmsc->bot_data,
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a6a4:	687a      	ldr	r2, [r7, #4]
 800a6a6:	33b0      	adds	r3, #176	; 0xb0
 800a6a8:	009b      	lsls	r3, r3, #2
 800a6aa:	4413      	add	r3, r2
 800a6ac:	685b      	ldr	r3, [r3, #4]
 800a6ae:	695c      	ldr	r4, [r3, #20]
 800a6b0:	68fb      	ldr	r3, [r7, #12]
 800a6b2:	f103 0110 	add.w	r1, r3, #16
 800a6b6:	68fb      	ldr	r3, [r7, #12]
 800a6b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a6bc:	6eda      	ldr	r2, [r3, #108]	; 0x6c
                                                                     hmsc->scsi_blk_addr,
                                                                     (len / hmsc->scsi_blk_size)) < 0)
 800a6be:	68fb      	ldr	r3, [r7, #12]
 800a6c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a6c4:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800a6c8:	4618      	mov	r0, r3
 800a6ca:	68bb      	ldr	r3, [r7, #8]
 800a6cc:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Write(lun, hmsc->bot_data,
 800a6d0:	b29b      	uxth	r3, r3
 800a6d2:	78f8      	ldrb	r0, [r7, #3]
 800a6d4:	47a0      	blx	r4
 800a6d6:	4603      	mov	r3, r0
 800a6d8:	2b00      	cmp	r3, #0
 800a6da:	da08      	bge.n	800a6ee <SCSI_ProcessWrite+0x9e>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, WRITE_FAULT);
 800a6dc:	78f9      	ldrb	r1, [r7, #3]
 800a6de:	2303      	movs	r3, #3
 800a6e0:	2204      	movs	r2, #4
 800a6e2:	6878      	ldr	r0, [r7, #4]
 800a6e4:	f7ff fa78 	bl	8009bd8 <SCSI_SenseCode>
    return -1;
 800a6e8:	f04f 33ff 	mov.w	r3, #4294967295
 800a6ec:	e053      	b.n	800a796 <SCSI_ProcessWrite+0x146>
  }

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 800a6ee:	68fb      	ldr	r3, [r7, #12]
 800a6f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a6f4:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800a6f6:	68fb      	ldr	r3, [r7, #12]
 800a6f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a6fc:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800a700:	4619      	mov	r1, r3
 800a702:	68bb      	ldr	r3, [r7, #8]
 800a704:	fbb3 f3f1 	udiv	r3, r3, r1
 800a708:	4413      	add	r3, r2
 800a70a:	68fa      	ldr	r2, [r7, #12]
 800a70c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a710:	66d3      	str	r3, [r2, #108]	; 0x6c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 800a712:	68fb      	ldr	r3, [r7, #12]
 800a714:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a718:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800a71a:	68fb      	ldr	r3, [r7, #12]
 800a71c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a720:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800a724:	4619      	mov	r1, r3
 800a726:	68bb      	ldr	r3, [r7, #8]
 800a728:	fbb3 f3f1 	udiv	r3, r3, r1
 800a72c:	1ad3      	subs	r3, r2, r3
 800a72e:	68fa      	ldr	r2, [r7, #12]
 800a730:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a734:	6713      	str	r3, [r2, #112]	; 0x70

  /* case 12 : Ho = Do */
  hmsc->csw.dDataResidue -= len;
 800a736:	68fb      	ldr	r3, [r7, #12]
 800a738:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a73c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a73e:	68bb      	ldr	r3, [r7, #8]
 800a740:	1ad3      	subs	r3, r2, r3
 800a742:	68fa      	ldr	r2, [r7, #12]
 800a744:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a748:	6393      	str	r3, [r2, #56]	; 0x38

  if (hmsc->scsi_blk_len == 0U)
 800a74a:	68fb      	ldr	r3, [r7, #12]
 800a74c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a750:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a752:	2b00      	cmp	r3, #0
 800a754:	d104      	bne.n	800a760 <SCSI_ProcessWrite+0x110>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 800a756:	2100      	movs	r1, #0
 800a758:	6878      	ldr	r0, [r7, #4]
 800a75a:	f7fe fc55 	bl	8009008 <MSC_BOT_SendCSW>
 800a75e:	e019      	b.n	800a794 <SCSI_ProcessWrite+0x144>
  }
  else
  {
    len = MIN((hmsc->scsi_blk_len * hmsc->scsi_blk_size), MSC_MEDIA_PACKET);
 800a760:	68fb      	ldr	r3, [r7, #12]
 800a762:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a766:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a768:	68fa      	ldr	r2, [r7, #12]
 800a76a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a76e:	f8b2 2064 	ldrh.w	r2, [r2, #100]	; 0x64
 800a772:	fb02 f303 	mul.w	r3, r2, r3
 800a776:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a77a:	bf28      	it	cs
 800a77c:	f44f 5380 	movcs.w	r3, #4096	; 0x1000
 800a780:	60bb      	str	r3, [r7, #8]

    /* Prepare EP to Receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
 800a782:	4b07      	ldr	r3, [pc, #28]	; (800a7a0 <SCSI_ProcessWrite+0x150>)
 800a784:	7819      	ldrb	r1, [r3, #0]
 800a786:	68fb      	ldr	r3, [r7, #12]
 800a788:	f103 0210 	add.w	r2, r3, #16
 800a78c:	68bb      	ldr	r3, [r7, #8]
 800a78e:	6878      	ldr	r0, [r7, #4]
 800a790:	f001 ffc2 	bl	800c718 <USBD_LL_PrepareReceive>
  }

  return 0;
 800a794:	2300      	movs	r3, #0
}
 800a796:	4618      	mov	r0, r3
 800a798:	3714      	adds	r7, #20
 800a79a:	46bd      	mov	sp, r7
 800a79c:	bd90      	pop	{r4, r7, pc}
 800a79e:	bf00      	nop
 800a7a0:	20000073 	.word	0x20000073

0800a7a4 <SCSI_UpdateBotData>:
  * @param  length: Data length
  * @retval status
  */
static int8_t SCSI_UpdateBotData(USBD_MSC_BOT_HandleTypeDef *hmsc,
                                 uint8_t *pBuff, uint16_t length)
{
 800a7a4:	b480      	push	{r7}
 800a7a6:	b087      	sub	sp, #28
 800a7a8:	af00      	add	r7, sp, #0
 800a7aa:	60f8      	str	r0, [r7, #12]
 800a7ac:	60b9      	str	r1, [r7, #8]
 800a7ae:	4613      	mov	r3, r2
 800a7b0:	80fb      	strh	r3, [r7, #6]
  uint16_t len = length;
 800a7b2:	88fb      	ldrh	r3, [r7, #6]
 800a7b4:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 800a7b6:	68fb      	ldr	r3, [r7, #12]
 800a7b8:	2b00      	cmp	r3, #0
 800a7ba:	d102      	bne.n	800a7c2 <SCSI_UpdateBotData+0x1e>
  {
    return -1;
 800a7bc:	f04f 33ff 	mov.w	r3, #4294967295
 800a7c0:	e013      	b.n	800a7ea <SCSI_UpdateBotData+0x46>
  }

  hmsc->bot_data_length = len;
 800a7c2:	8afa      	ldrh	r2, [r7, #22]
 800a7c4:	68fb      	ldr	r3, [r7, #12]
 800a7c6:	60da      	str	r2, [r3, #12]

  while (len != 0U)
 800a7c8:	e00b      	b.n	800a7e2 <SCSI_UpdateBotData+0x3e>
  {
    len--;
 800a7ca:	8afb      	ldrh	r3, [r7, #22]
 800a7cc:	3b01      	subs	r3, #1
 800a7ce:	82fb      	strh	r3, [r7, #22]
    hmsc->bot_data[len] = pBuff[len];
 800a7d0:	8afb      	ldrh	r3, [r7, #22]
 800a7d2:	68ba      	ldr	r2, [r7, #8]
 800a7d4:	441a      	add	r2, r3
 800a7d6:	8afb      	ldrh	r3, [r7, #22]
 800a7d8:	7811      	ldrb	r1, [r2, #0]
 800a7da:	68fa      	ldr	r2, [r7, #12]
 800a7dc:	4413      	add	r3, r2
 800a7de:	460a      	mov	r2, r1
 800a7e0:	741a      	strb	r2, [r3, #16]
  while (len != 0U)
 800a7e2:	8afb      	ldrh	r3, [r7, #22]
 800a7e4:	2b00      	cmp	r3, #0
 800a7e6:	d1f0      	bne.n	800a7ca <SCSI_UpdateBotData+0x26>
  }

  return 0;
 800a7e8:	2300      	movs	r3, #0
}
 800a7ea:	4618      	mov	r0, r3
 800a7ec:	371c      	adds	r7, #28
 800a7ee:	46bd      	mov	sp, r7
 800a7f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7f4:	4770      	bx	lr

0800a7f6 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800a7f6:	b580      	push	{r7, lr}
 800a7f8:	b086      	sub	sp, #24
 800a7fa:	af00      	add	r7, sp, #0
 800a7fc:	60f8      	str	r0, [r7, #12]
 800a7fe:	60b9      	str	r1, [r7, #8]
 800a800:	4613      	mov	r3, r2
 800a802:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800a804:	68fb      	ldr	r3, [r7, #12]
 800a806:	2b00      	cmp	r3, #0
 800a808:	d101      	bne.n	800a80e <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800a80a:	2303      	movs	r3, #3
 800a80c:	e01f      	b.n	800a84e <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800a80e:	68fb      	ldr	r3, [r7, #12]
 800a810:	2200      	movs	r2, #0
 800a812:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800a816:	68fb      	ldr	r3, [r7, #12]
 800a818:	2200      	movs	r2, #0
 800a81a:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800a81e:	68fb      	ldr	r3, [r7, #12]
 800a820:	2200      	movs	r2, #0
 800a822:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800a826:	68bb      	ldr	r3, [r7, #8]
 800a828:	2b00      	cmp	r3, #0
 800a82a:	d003      	beq.n	800a834 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800a82c:	68fb      	ldr	r3, [r7, #12]
 800a82e:	68ba      	ldr	r2, [r7, #8]
 800a830:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a834:	68fb      	ldr	r3, [r7, #12]
 800a836:	2201      	movs	r2, #1
 800a838:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800a83c:	68fb      	ldr	r3, [r7, #12]
 800a83e:	79fa      	ldrb	r2, [r7, #7]
 800a840:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800a842:	68f8      	ldr	r0, [r7, #12]
 800a844:	f001 fdd8 	bl	800c3f8 <USBD_LL_Init>
 800a848:	4603      	mov	r3, r0
 800a84a:	75fb      	strb	r3, [r7, #23]

  return ret;
 800a84c:	7dfb      	ldrb	r3, [r7, #23]
}
 800a84e:	4618      	mov	r0, r3
 800a850:	3718      	adds	r7, #24
 800a852:	46bd      	mov	sp, r7
 800a854:	bd80      	pop	{r7, pc}

0800a856 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800a856:	b580      	push	{r7, lr}
 800a858:	b084      	sub	sp, #16
 800a85a:	af00      	add	r7, sp, #0
 800a85c:	6078      	str	r0, [r7, #4]
 800a85e:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a860:	2300      	movs	r3, #0
 800a862:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800a864:	683b      	ldr	r3, [r7, #0]
 800a866:	2b00      	cmp	r3, #0
 800a868:	d101      	bne.n	800a86e <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800a86a:	2303      	movs	r3, #3
 800a86c:	e025      	b.n	800a8ba <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	683a      	ldr	r2, [r7, #0]
 800a872:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	32ae      	adds	r2, #174	; 0xae
 800a880:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a884:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a886:	2b00      	cmp	r3, #0
 800a888:	d00f      	beq.n	800a8aa <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	32ae      	adds	r2, #174	; 0xae
 800a894:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a898:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a89a:	f107 020e 	add.w	r2, r7, #14
 800a89e:	4610      	mov	r0, r2
 800a8a0:	4798      	blx	r3
 800a8a2:	4602      	mov	r2, r0
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800a8b0:	1c5a      	adds	r2, r3, #1
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800a8b8:	2300      	movs	r3, #0
}
 800a8ba:	4618      	mov	r0, r3
 800a8bc:	3710      	adds	r7, #16
 800a8be:	46bd      	mov	sp, r7
 800a8c0:	bd80      	pop	{r7, pc}

0800a8c2 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800a8c2:	b580      	push	{r7, lr}
 800a8c4:	b082      	sub	sp, #8
 800a8c6:	af00      	add	r7, sp, #0
 800a8c8:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800a8ca:	6878      	ldr	r0, [r7, #4]
 800a8cc:	f001 fde0 	bl	800c490 <USBD_LL_Start>
 800a8d0:	4603      	mov	r3, r0
}
 800a8d2:	4618      	mov	r0, r3
 800a8d4:	3708      	adds	r7, #8
 800a8d6:	46bd      	mov	sp, r7
 800a8d8:	bd80      	pop	{r7, pc}

0800a8da <USBD_Stop>:
  *         Stop the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Stop(USBD_HandleTypeDef *pdev)
{
 800a8da:	b580      	push	{r7, lr}
 800a8dc:	b082      	sub	sp, #8
 800a8de:	af00      	add	r7, sp, #0
 800a8e0:	6078      	str	r0, [r7, #4]
  /* Disconnect USB Device */
  (void)USBD_LL_Stop(pdev);
 800a8e2:	6878      	ldr	r0, [r7, #4]
 800a8e4:	f001 fdef 	bl	800c4c6 <USBD_LL_Stop>
  }

  /* Reset the class ID */
  pdev->classId = 0U;
#else
  if (pdev->pClass[0] != NULL)
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	d009      	beq.n	800a906 <USBD_Stop+0x2c>
  {
    (void)pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config);
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a8f8:	685b      	ldr	r3, [r3, #4]
 800a8fa:	687a      	ldr	r2, [r7, #4]
 800a8fc:	6852      	ldr	r2, [r2, #4]
 800a8fe:	b2d2      	uxtb	r2, r2
 800a900:	4611      	mov	r1, r2
 800a902:	6878      	ldr	r0, [r7, #4]
 800a904:	4798      	blx	r3
  }
#endif /* USE_USBD_COMPOSITE */

  return USBD_OK;
 800a906:	2300      	movs	r3, #0
}
 800a908:	4618      	mov	r0, r3
 800a90a:	3708      	adds	r7, #8
 800a90c:	46bd      	mov	sp, r7
 800a90e:	bd80      	pop	{r7, pc}

0800a910 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800a910:	b480      	push	{r7}
 800a912:	b083      	sub	sp, #12
 800a914:	af00      	add	r7, sp, #0
 800a916:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a918:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800a91a:	4618      	mov	r0, r3
 800a91c:	370c      	adds	r7, #12
 800a91e:	46bd      	mov	sp, r7
 800a920:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a924:	4770      	bx	lr

0800a926 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a926:	b580      	push	{r7, lr}
 800a928:	b084      	sub	sp, #16
 800a92a:	af00      	add	r7, sp, #0
 800a92c:	6078      	str	r0, [r7, #4]
 800a92e:	460b      	mov	r3, r1
 800a930:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800a932:	2300      	movs	r3, #0
 800a934:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a93c:	2b00      	cmp	r3, #0
 800a93e:	d009      	beq.n	800a954 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a946:	681b      	ldr	r3, [r3, #0]
 800a948:	78fa      	ldrb	r2, [r7, #3]
 800a94a:	4611      	mov	r1, r2
 800a94c:	6878      	ldr	r0, [r7, #4]
 800a94e:	4798      	blx	r3
 800a950:	4603      	mov	r3, r0
 800a952:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a954:	7bfb      	ldrb	r3, [r7, #15]
}
 800a956:	4618      	mov	r0, r3
 800a958:	3710      	adds	r7, #16
 800a95a:	46bd      	mov	sp, r7
 800a95c:	bd80      	pop	{r7, pc}

0800a95e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a95e:	b580      	push	{r7, lr}
 800a960:	b084      	sub	sp, #16
 800a962:	af00      	add	r7, sp, #0
 800a964:	6078      	str	r0, [r7, #4]
 800a966:	460b      	mov	r3, r1
 800a968:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800a96a:	2300      	movs	r3, #0
 800a96c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a974:	685b      	ldr	r3, [r3, #4]
 800a976:	78fa      	ldrb	r2, [r7, #3]
 800a978:	4611      	mov	r1, r2
 800a97a:	6878      	ldr	r0, [r7, #4]
 800a97c:	4798      	blx	r3
 800a97e:	4603      	mov	r3, r0
 800a980:	2b00      	cmp	r3, #0
 800a982:	d001      	beq.n	800a988 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800a984:	2303      	movs	r3, #3
 800a986:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a988:	7bfb      	ldrb	r3, [r7, #15]
}
 800a98a:	4618      	mov	r0, r3
 800a98c:	3710      	adds	r7, #16
 800a98e:	46bd      	mov	sp, r7
 800a990:	bd80      	pop	{r7, pc}

0800a992 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800a992:	b580      	push	{r7, lr}
 800a994:	b084      	sub	sp, #16
 800a996:	af00      	add	r7, sp, #0
 800a998:	6078      	str	r0, [r7, #4]
 800a99a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a9a2:	6839      	ldr	r1, [r7, #0]
 800a9a4:	4618      	mov	r0, r3
 800a9a6:	f001 f908 	bl	800bbba <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	2201      	movs	r2, #1
 800a9ae:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800a9b8:	461a      	mov	r2, r3
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a9c6:	f003 031f 	and.w	r3, r3, #31
 800a9ca:	2b02      	cmp	r3, #2
 800a9cc:	d01a      	beq.n	800aa04 <USBD_LL_SetupStage+0x72>
 800a9ce:	2b02      	cmp	r3, #2
 800a9d0:	d822      	bhi.n	800aa18 <USBD_LL_SetupStage+0x86>
 800a9d2:	2b00      	cmp	r3, #0
 800a9d4:	d002      	beq.n	800a9dc <USBD_LL_SetupStage+0x4a>
 800a9d6:	2b01      	cmp	r3, #1
 800a9d8:	d00a      	beq.n	800a9f0 <USBD_LL_SetupStage+0x5e>
 800a9da:	e01d      	b.n	800aa18 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a9e2:	4619      	mov	r1, r3
 800a9e4:	6878      	ldr	r0, [r7, #4]
 800a9e6:	f000 fb5f 	bl	800b0a8 <USBD_StdDevReq>
 800a9ea:	4603      	mov	r3, r0
 800a9ec:	73fb      	strb	r3, [r7, #15]
      break;
 800a9ee:	e020      	b.n	800aa32 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a9f6:	4619      	mov	r1, r3
 800a9f8:	6878      	ldr	r0, [r7, #4]
 800a9fa:	f000 fbc7 	bl	800b18c <USBD_StdItfReq>
 800a9fe:	4603      	mov	r3, r0
 800aa00:	73fb      	strb	r3, [r7, #15]
      break;
 800aa02:	e016      	b.n	800aa32 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800aa0a:	4619      	mov	r1, r3
 800aa0c:	6878      	ldr	r0, [r7, #4]
 800aa0e:	f000 fc29 	bl	800b264 <USBD_StdEPReq>
 800aa12:	4603      	mov	r3, r0
 800aa14:	73fb      	strb	r3, [r7, #15]
      break;
 800aa16:	e00c      	b.n	800aa32 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800aa1e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800aa22:	b2db      	uxtb	r3, r3
 800aa24:	4619      	mov	r1, r3
 800aa26:	6878      	ldr	r0, [r7, #4]
 800aa28:	f001 fdcc 	bl	800c5c4 <USBD_LL_StallEP>
 800aa2c:	4603      	mov	r3, r0
 800aa2e:	73fb      	strb	r3, [r7, #15]
      break;
 800aa30:	bf00      	nop
  }

  return ret;
 800aa32:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa34:	4618      	mov	r0, r3
 800aa36:	3710      	adds	r7, #16
 800aa38:	46bd      	mov	sp, r7
 800aa3a:	bd80      	pop	{r7, pc}

0800aa3c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800aa3c:	b580      	push	{r7, lr}
 800aa3e:	b086      	sub	sp, #24
 800aa40:	af00      	add	r7, sp, #0
 800aa42:	60f8      	str	r0, [r7, #12]
 800aa44:	460b      	mov	r3, r1
 800aa46:	607a      	str	r2, [r7, #4]
 800aa48:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800aa4a:	2300      	movs	r3, #0
 800aa4c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800aa4e:	7afb      	ldrb	r3, [r7, #11]
 800aa50:	2b00      	cmp	r3, #0
 800aa52:	d16e      	bne.n	800ab32 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800aa54:	68fb      	ldr	r3, [r7, #12]
 800aa56:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800aa5a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800aa5c:	68fb      	ldr	r3, [r7, #12]
 800aa5e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800aa62:	2b03      	cmp	r3, #3
 800aa64:	f040 8098 	bne.w	800ab98 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800aa68:	693b      	ldr	r3, [r7, #16]
 800aa6a:	689a      	ldr	r2, [r3, #8]
 800aa6c:	693b      	ldr	r3, [r7, #16]
 800aa6e:	68db      	ldr	r3, [r3, #12]
 800aa70:	429a      	cmp	r2, r3
 800aa72:	d913      	bls.n	800aa9c <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800aa74:	693b      	ldr	r3, [r7, #16]
 800aa76:	689a      	ldr	r2, [r3, #8]
 800aa78:	693b      	ldr	r3, [r7, #16]
 800aa7a:	68db      	ldr	r3, [r3, #12]
 800aa7c:	1ad2      	subs	r2, r2, r3
 800aa7e:	693b      	ldr	r3, [r7, #16]
 800aa80:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800aa82:	693b      	ldr	r3, [r7, #16]
 800aa84:	68da      	ldr	r2, [r3, #12]
 800aa86:	693b      	ldr	r3, [r7, #16]
 800aa88:	689b      	ldr	r3, [r3, #8]
 800aa8a:	4293      	cmp	r3, r2
 800aa8c:	bf28      	it	cs
 800aa8e:	4613      	movcs	r3, r2
 800aa90:	461a      	mov	r2, r3
 800aa92:	6879      	ldr	r1, [r7, #4]
 800aa94:	68f8      	ldr	r0, [r7, #12]
 800aa96:	f001 f967 	bl	800bd68 <USBD_CtlContinueRx>
 800aa9a:	e07d      	b.n	800ab98 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800aa9c:	68fb      	ldr	r3, [r7, #12]
 800aa9e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800aaa2:	f003 031f 	and.w	r3, r3, #31
 800aaa6:	2b02      	cmp	r3, #2
 800aaa8:	d014      	beq.n	800aad4 <USBD_LL_DataOutStage+0x98>
 800aaaa:	2b02      	cmp	r3, #2
 800aaac:	d81d      	bhi.n	800aaea <USBD_LL_DataOutStage+0xae>
 800aaae:	2b00      	cmp	r3, #0
 800aab0:	d002      	beq.n	800aab8 <USBD_LL_DataOutStage+0x7c>
 800aab2:	2b01      	cmp	r3, #1
 800aab4:	d003      	beq.n	800aabe <USBD_LL_DataOutStage+0x82>
 800aab6:	e018      	b.n	800aaea <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800aab8:	2300      	movs	r3, #0
 800aaba:	75bb      	strb	r3, [r7, #22]
            break;
 800aabc:	e018      	b.n	800aaf0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800aabe:	68fb      	ldr	r3, [r7, #12]
 800aac0:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800aac4:	b2db      	uxtb	r3, r3
 800aac6:	4619      	mov	r1, r3
 800aac8:	68f8      	ldr	r0, [r7, #12]
 800aaca:	f000 fa5e 	bl	800af8a <USBD_CoreFindIF>
 800aace:	4603      	mov	r3, r0
 800aad0:	75bb      	strb	r3, [r7, #22]
            break;
 800aad2:	e00d      	b.n	800aaf0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800aad4:	68fb      	ldr	r3, [r7, #12]
 800aad6:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800aada:	b2db      	uxtb	r3, r3
 800aadc:	4619      	mov	r1, r3
 800aade:	68f8      	ldr	r0, [r7, #12]
 800aae0:	f000 fa60 	bl	800afa4 <USBD_CoreFindEP>
 800aae4:	4603      	mov	r3, r0
 800aae6:	75bb      	strb	r3, [r7, #22]
            break;
 800aae8:	e002      	b.n	800aaf0 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800aaea:	2300      	movs	r3, #0
 800aaec:	75bb      	strb	r3, [r7, #22]
            break;
 800aaee:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800aaf0:	7dbb      	ldrb	r3, [r7, #22]
 800aaf2:	2b00      	cmp	r3, #0
 800aaf4:	d119      	bne.n	800ab2a <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aaf6:	68fb      	ldr	r3, [r7, #12]
 800aaf8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aafc:	b2db      	uxtb	r3, r3
 800aafe:	2b03      	cmp	r3, #3
 800ab00:	d113      	bne.n	800ab2a <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800ab02:	7dba      	ldrb	r2, [r7, #22]
 800ab04:	68fb      	ldr	r3, [r7, #12]
 800ab06:	32ae      	adds	r2, #174	; 0xae
 800ab08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab0c:	691b      	ldr	r3, [r3, #16]
 800ab0e:	2b00      	cmp	r3, #0
 800ab10:	d00b      	beq.n	800ab2a <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800ab12:	7dba      	ldrb	r2, [r7, #22]
 800ab14:	68fb      	ldr	r3, [r7, #12]
 800ab16:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800ab1a:	7dba      	ldrb	r2, [r7, #22]
 800ab1c:	68fb      	ldr	r3, [r7, #12]
 800ab1e:	32ae      	adds	r2, #174	; 0xae
 800ab20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab24:	691b      	ldr	r3, [r3, #16]
 800ab26:	68f8      	ldr	r0, [r7, #12]
 800ab28:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800ab2a:	68f8      	ldr	r0, [r7, #12]
 800ab2c:	f001 f92d 	bl	800bd8a <USBD_CtlSendStatus>
 800ab30:	e032      	b.n	800ab98 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800ab32:	7afb      	ldrb	r3, [r7, #11]
 800ab34:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ab38:	b2db      	uxtb	r3, r3
 800ab3a:	4619      	mov	r1, r3
 800ab3c:	68f8      	ldr	r0, [r7, #12]
 800ab3e:	f000 fa31 	bl	800afa4 <USBD_CoreFindEP>
 800ab42:	4603      	mov	r3, r0
 800ab44:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ab46:	7dbb      	ldrb	r3, [r7, #22]
 800ab48:	2bff      	cmp	r3, #255	; 0xff
 800ab4a:	d025      	beq.n	800ab98 <USBD_LL_DataOutStage+0x15c>
 800ab4c:	7dbb      	ldrb	r3, [r7, #22]
 800ab4e:	2b00      	cmp	r3, #0
 800ab50:	d122      	bne.n	800ab98 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ab52:	68fb      	ldr	r3, [r7, #12]
 800ab54:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ab58:	b2db      	uxtb	r3, r3
 800ab5a:	2b03      	cmp	r3, #3
 800ab5c:	d117      	bne.n	800ab8e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800ab5e:	7dba      	ldrb	r2, [r7, #22]
 800ab60:	68fb      	ldr	r3, [r7, #12]
 800ab62:	32ae      	adds	r2, #174	; 0xae
 800ab64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab68:	699b      	ldr	r3, [r3, #24]
 800ab6a:	2b00      	cmp	r3, #0
 800ab6c:	d00f      	beq.n	800ab8e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800ab6e:	7dba      	ldrb	r2, [r7, #22]
 800ab70:	68fb      	ldr	r3, [r7, #12]
 800ab72:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800ab76:	7dba      	ldrb	r2, [r7, #22]
 800ab78:	68fb      	ldr	r3, [r7, #12]
 800ab7a:	32ae      	adds	r2, #174	; 0xae
 800ab7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab80:	699b      	ldr	r3, [r3, #24]
 800ab82:	7afa      	ldrb	r2, [r7, #11]
 800ab84:	4611      	mov	r1, r2
 800ab86:	68f8      	ldr	r0, [r7, #12]
 800ab88:	4798      	blx	r3
 800ab8a:	4603      	mov	r3, r0
 800ab8c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800ab8e:	7dfb      	ldrb	r3, [r7, #23]
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	d001      	beq.n	800ab98 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800ab94:	7dfb      	ldrb	r3, [r7, #23]
 800ab96:	e000      	b.n	800ab9a <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800ab98:	2300      	movs	r3, #0
}
 800ab9a:	4618      	mov	r0, r3
 800ab9c:	3718      	adds	r7, #24
 800ab9e:	46bd      	mov	sp, r7
 800aba0:	bd80      	pop	{r7, pc}

0800aba2 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800aba2:	b580      	push	{r7, lr}
 800aba4:	b086      	sub	sp, #24
 800aba6:	af00      	add	r7, sp, #0
 800aba8:	60f8      	str	r0, [r7, #12]
 800abaa:	460b      	mov	r3, r1
 800abac:	607a      	str	r2, [r7, #4]
 800abae:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800abb0:	7afb      	ldrb	r3, [r7, #11]
 800abb2:	2b00      	cmp	r3, #0
 800abb4:	d16f      	bne.n	800ac96 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800abb6:	68fb      	ldr	r3, [r7, #12]
 800abb8:	3314      	adds	r3, #20
 800abba:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800abbc:	68fb      	ldr	r3, [r7, #12]
 800abbe:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800abc2:	2b02      	cmp	r3, #2
 800abc4:	d15a      	bne.n	800ac7c <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800abc6:	693b      	ldr	r3, [r7, #16]
 800abc8:	689a      	ldr	r2, [r3, #8]
 800abca:	693b      	ldr	r3, [r7, #16]
 800abcc:	68db      	ldr	r3, [r3, #12]
 800abce:	429a      	cmp	r2, r3
 800abd0:	d914      	bls.n	800abfc <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800abd2:	693b      	ldr	r3, [r7, #16]
 800abd4:	689a      	ldr	r2, [r3, #8]
 800abd6:	693b      	ldr	r3, [r7, #16]
 800abd8:	68db      	ldr	r3, [r3, #12]
 800abda:	1ad2      	subs	r2, r2, r3
 800abdc:	693b      	ldr	r3, [r7, #16]
 800abde:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800abe0:	693b      	ldr	r3, [r7, #16]
 800abe2:	689b      	ldr	r3, [r3, #8]
 800abe4:	461a      	mov	r2, r3
 800abe6:	6879      	ldr	r1, [r7, #4]
 800abe8:	68f8      	ldr	r0, [r7, #12]
 800abea:	f001 f8ac 	bl	800bd46 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800abee:	2300      	movs	r3, #0
 800abf0:	2200      	movs	r2, #0
 800abf2:	2100      	movs	r1, #0
 800abf4:	68f8      	ldr	r0, [r7, #12]
 800abf6:	f001 fd8f 	bl	800c718 <USBD_LL_PrepareReceive>
 800abfa:	e03f      	b.n	800ac7c <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800abfc:	693b      	ldr	r3, [r7, #16]
 800abfe:	68da      	ldr	r2, [r3, #12]
 800ac00:	693b      	ldr	r3, [r7, #16]
 800ac02:	689b      	ldr	r3, [r3, #8]
 800ac04:	429a      	cmp	r2, r3
 800ac06:	d11c      	bne.n	800ac42 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800ac08:	693b      	ldr	r3, [r7, #16]
 800ac0a:	685a      	ldr	r2, [r3, #4]
 800ac0c:	693b      	ldr	r3, [r7, #16]
 800ac0e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800ac10:	429a      	cmp	r2, r3
 800ac12:	d316      	bcc.n	800ac42 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800ac14:	693b      	ldr	r3, [r7, #16]
 800ac16:	685a      	ldr	r2, [r3, #4]
 800ac18:	68fb      	ldr	r3, [r7, #12]
 800ac1a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800ac1e:	429a      	cmp	r2, r3
 800ac20:	d20f      	bcs.n	800ac42 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800ac22:	2200      	movs	r2, #0
 800ac24:	2100      	movs	r1, #0
 800ac26:	68f8      	ldr	r0, [r7, #12]
 800ac28:	f001 f88d 	bl	800bd46 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800ac2c:	68fb      	ldr	r3, [r7, #12]
 800ac2e:	2200      	movs	r2, #0
 800ac30:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ac34:	2300      	movs	r3, #0
 800ac36:	2200      	movs	r2, #0
 800ac38:	2100      	movs	r1, #0
 800ac3a:	68f8      	ldr	r0, [r7, #12]
 800ac3c:	f001 fd6c 	bl	800c718 <USBD_LL_PrepareReceive>
 800ac40:	e01c      	b.n	800ac7c <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ac42:	68fb      	ldr	r3, [r7, #12]
 800ac44:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ac48:	b2db      	uxtb	r3, r3
 800ac4a:	2b03      	cmp	r3, #3
 800ac4c:	d10f      	bne.n	800ac6e <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800ac4e:	68fb      	ldr	r3, [r7, #12]
 800ac50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ac54:	68db      	ldr	r3, [r3, #12]
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	d009      	beq.n	800ac6e <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800ac5a:	68fb      	ldr	r3, [r7, #12]
 800ac5c:	2200      	movs	r2, #0
 800ac5e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800ac62:	68fb      	ldr	r3, [r7, #12]
 800ac64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ac68:	68db      	ldr	r3, [r3, #12]
 800ac6a:	68f8      	ldr	r0, [r7, #12]
 800ac6c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800ac6e:	2180      	movs	r1, #128	; 0x80
 800ac70:	68f8      	ldr	r0, [r7, #12]
 800ac72:	f001 fca7 	bl	800c5c4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800ac76:	68f8      	ldr	r0, [r7, #12]
 800ac78:	f001 f89a 	bl	800bdb0 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800ac7c:	68fb      	ldr	r3, [r7, #12]
 800ac7e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800ac82:	2b00      	cmp	r3, #0
 800ac84:	d03a      	beq.n	800acfc <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800ac86:	68f8      	ldr	r0, [r7, #12]
 800ac88:	f7ff fe42 	bl	800a910 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800ac8c:	68fb      	ldr	r3, [r7, #12]
 800ac8e:	2200      	movs	r2, #0
 800ac90:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800ac94:	e032      	b.n	800acfc <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800ac96:	7afb      	ldrb	r3, [r7, #11]
 800ac98:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800ac9c:	b2db      	uxtb	r3, r3
 800ac9e:	4619      	mov	r1, r3
 800aca0:	68f8      	ldr	r0, [r7, #12]
 800aca2:	f000 f97f 	bl	800afa4 <USBD_CoreFindEP>
 800aca6:	4603      	mov	r3, r0
 800aca8:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800acaa:	7dfb      	ldrb	r3, [r7, #23]
 800acac:	2bff      	cmp	r3, #255	; 0xff
 800acae:	d025      	beq.n	800acfc <USBD_LL_DataInStage+0x15a>
 800acb0:	7dfb      	ldrb	r3, [r7, #23]
 800acb2:	2b00      	cmp	r3, #0
 800acb4:	d122      	bne.n	800acfc <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800acb6:	68fb      	ldr	r3, [r7, #12]
 800acb8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800acbc:	b2db      	uxtb	r3, r3
 800acbe:	2b03      	cmp	r3, #3
 800acc0:	d11c      	bne.n	800acfc <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800acc2:	7dfa      	ldrb	r2, [r7, #23]
 800acc4:	68fb      	ldr	r3, [r7, #12]
 800acc6:	32ae      	adds	r2, #174	; 0xae
 800acc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800accc:	695b      	ldr	r3, [r3, #20]
 800acce:	2b00      	cmp	r3, #0
 800acd0:	d014      	beq.n	800acfc <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800acd2:	7dfa      	ldrb	r2, [r7, #23]
 800acd4:	68fb      	ldr	r3, [r7, #12]
 800acd6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800acda:	7dfa      	ldrb	r2, [r7, #23]
 800acdc:	68fb      	ldr	r3, [r7, #12]
 800acde:	32ae      	adds	r2, #174	; 0xae
 800ace0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ace4:	695b      	ldr	r3, [r3, #20]
 800ace6:	7afa      	ldrb	r2, [r7, #11]
 800ace8:	4611      	mov	r1, r2
 800acea:	68f8      	ldr	r0, [r7, #12]
 800acec:	4798      	blx	r3
 800acee:	4603      	mov	r3, r0
 800acf0:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800acf2:	7dbb      	ldrb	r3, [r7, #22]
 800acf4:	2b00      	cmp	r3, #0
 800acf6:	d001      	beq.n	800acfc <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800acf8:	7dbb      	ldrb	r3, [r7, #22]
 800acfa:	e000      	b.n	800acfe <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800acfc:	2300      	movs	r3, #0
}
 800acfe:	4618      	mov	r0, r3
 800ad00:	3718      	adds	r7, #24
 800ad02:	46bd      	mov	sp, r7
 800ad04:	bd80      	pop	{r7, pc}

0800ad06 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800ad06:	b580      	push	{r7, lr}
 800ad08:	b084      	sub	sp, #16
 800ad0a:	af00      	add	r7, sp, #0
 800ad0c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800ad0e:	2300      	movs	r3, #0
 800ad10:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	2201      	movs	r2, #1
 800ad16:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	2200      	movs	r2, #0
 800ad1e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	2200      	movs	r2, #0
 800ad26:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	2200      	movs	r2, #0
 800ad2c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	2200      	movs	r2, #0
 800ad34:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ad3e:	2b00      	cmp	r3, #0
 800ad40:	d014      	beq.n	800ad6c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ad48:	685b      	ldr	r3, [r3, #4]
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	d00e      	beq.n	800ad6c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ad54:	685b      	ldr	r3, [r3, #4]
 800ad56:	687a      	ldr	r2, [r7, #4]
 800ad58:	6852      	ldr	r2, [r2, #4]
 800ad5a:	b2d2      	uxtb	r2, r2
 800ad5c:	4611      	mov	r1, r2
 800ad5e:	6878      	ldr	r0, [r7, #4]
 800ad60:	4798      	blx	r3
 800ad62:	4603      	mov	r3, r0
 800ad64:	2b00      	cmp	r3, #0
 800ad66:	d001      	beq.n	800ad6c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800ad68:	2303      	movs	r3, #3
 800ad6a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ad6c:	2340      	movs	r3, #64	; 0x40
 800ad6e:	2200      	movs	r2, #0
 800ad70:	2100      	movs	r1, #0
 800ad72:	6878      	ldr	r0, [r7, #4]
 800ad74:	f001 fbc2 	bl	800c4fc <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	2201      	movs	r2, #1
 800ad7c:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	2240      	movs	r2, #64	; 0x40
 800ad84:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ad88:	2340      	movs	r3, #64	; 0x40
 800ad8a:	2200      	movs	r2, #0
 800ad8c:	2180      	movs	r1, #128	; 0x80
 800ad8e:	6878      	ldr	r0, [r7, #4]
 800ad90:	f001 fbb4 	bl	800c4fc <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	2201      	movs	r2, #1
 800ad98:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	2240      	movs	r2, #64	; 0x40
 800ad9e:	621a      	str	r2, [r3, #32]

  return ret;
 800ada0:	7bfb      	ldrb	r3, [r7, #15]
}
 800ada2:	4618      	mov	r0, r3
 800ada4:	3710      	adds	r7, #16
 800ada6:	46bd      	mov	sp, r7
 800ada8:	bd80      	pop	{r7, pc}

0800adaa <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800adaa:	b480      	push	{r7}
 800adac:	b083      	sub	sp, #12
 800adae:	af00      	add	r7, sp, #0
 800adb0:	6078      	str	r0, [r7, #4]
 800adb2:	460b      	mov	r3, r1
 800adb4:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	78fa      	ldrb	r2, [r7, #3]
 800adba:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800adbc:	2300      	movs	r3, #0
}
 800adbe:	4618      	mov	r0, r3
 800adc0:	370c      	adds	r7, #12
 800adc2:	46bd      	mov	sp, r7
 800adc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adc8:	4770      	bx	lr

0800adca <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800adca:	b480      	push	{r7}
 800adcc:	b083      	sub	sp, #12
 800adce:	af00      	add	r7, sp, #0
 800add0:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800add8:	b2da      	uxtb	r2, r3
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	2204      	movs	r2, #4
 800ade4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800ade8:	2300      	movs	r3, #0
}
 800adea:	4618      	mov	r0, r3
 800adec:	370c      	adds	r7, #12
 800adee:	46bd      	mov	sp, r7
 800adf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adf4:	4770      	bx	lr

0800adf6 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800adf6:	b480      	push	{r7}
 800adf8:	b083      	sub	sp, #12
 800adfa:	af00      	add	r7, sp, #0
 800adfc:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ae04:	b2db      	uxtb	r3, r3
 800ae06:	2b04      	cmp	r3, #4
 800ae08:	d106      	bne.n	800ae18 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800ae10:	b2da      	uxtb	r2, r3
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800ae18:	2300      	movs	r3, #0
}
 800ae1a:	4618      	mov	r0, r3
 800ae1c:	370c      	adds	r7, #12
 800ae1e:	46bd      	mov	sp, r7
 800ae20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae24:	4770      	bx	lr

0800ae26 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800ae26:	b580      	push	{r7, lr}
 800ae28:	b082      	sub	sp, #8
 800ae2a:	af00      	add	r7, sp, #0
 800ae2c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ae34:	b2db      	uxtb	r3, r3
 800ae36:	2b03      	cmp	r3, #3
 800ae38:	d110      	bne.n	800ae5c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ae40:	2b00      	cmp	r3, #0
 800ae42:	d00b      	beq.n	800ae5c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ae4a:	69db      	ldr	r3, [r3, #28]
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	d005      	beq.n	800ae5c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ae56:	69db      	ldr	r3, [r3, #28]
 800ae58:	6878      	ldr	r0, [r7, #4]
 800ae5a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800ae5c:	2300      	movs	r3, #0
}
 800ae5e:	4618      	mov	r0, r3
 800ae60:	3708      	adds	r7, #8
 800ae62:	46bd      	mov	sp, r7
 800ae64:	bd80      	pop	{r7, pc}

0800ae66 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800ae66:	b580      	push	{r7, lr}
 800ae68:	b082      	sub	sp, #8
 800ae6a:	af00      	add	r7, sp, #0
 800ae6c:	6078      	str	r0, [r7, #4]
 800ae6e:	460b      	mov	r3, r1
 800ae70:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	32ae      	adds	r2, #174	; 0xae
 800ae7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae80:	2b00      	cmp	r3, #0
 800ae82:	d101      	bne.n	800ae88 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800ae84:	2303      	movs	r3, #3
 800ae86:	e01c      	b.n	800aec2 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ae8e:	b2db      	uxtb	r3, r3
 800ae90:	2b03      	cmp	r3, #3
 800ae92:	d115      	bne.n	800aec0 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	32ae      	adds	r2, #174	; 0xae
 800ae9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aea2:	6a1b      	ldr	r3, [r3, #32]
 800aea4:	2b00      	cmp	r3, #0
 800aea6:	d00b      	beq.n	800aec0 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	32ae      	adds	r2, #174	; 0xae
 800aeb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aeb6:	6a1b      	ldr	r3, [r3, #32]
 800aeb8:	78fa      	ldrb	r2, [r7, #3]
 800aeba:	4611      	mov	r1, r2
 800aebc:	6878      	ldr	r0, [r7, #4]
 800aebe:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800aec0:	2300      	movs	r3, #0
}
 800aec2:	4618      	mov	r0, r3
 800aec4:	3708      	adds	r7, #8
 800aec6:	46bd      	mov	sp, r7
 800aec8:	bd80      	pop	{r7, pc}

0800aeca <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800aeca:	b580      	push	{r7, lr}
 800aecc:	b082      	sub	sp, #8
 800aece:	af00      	add	r7, sp, #0
 800aed0:	6078      	str	r0, [r7, #4]
 800aed2:	460b      	mov	r3, r1
 800aed4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	32ae      	adds	r2, #174	; 0xae
 800aee0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aee4:	2b00      	cmp	r3, #0
 800aee6:	d101      	bne.n	800aeec <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800aee8:	2303      	movs	r3, #3
 800aeea:	e01c      	b.n	800af26 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aef2:	b2db      	uxtb	r3, r3
 800aef4:	2b03      	cmp	r3, #3
 800aef6:	d115      	bne.n	800af24 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	32ae      	adds	r2, #174	; 0xae
 800af02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af08:	2b00      	cmp	r3, #0
 800af0a:	d00b      	beq.n	800af24 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	32ae      	adds	r2, #174	; 0xae
 800af16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af1c:	78fa      	ldrb	r2, [r7, #3]
 800af1e:	4611      	mov	r1, r2
 800af20:	6878      	ldr	r0, [r7, #4]
 800af22:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800af24:	2300      	movs	r3, #0
}
 800af26:	4618      	mov	r0, r3
 800af28:	3708      	adds	r7, #8
 800af2a:	46bd      	mov	sp, r7
 800af2c:	bd80      	pop	{r7, pc}

0800af2e <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800af2e:	b480      	push	{r7}
 800af30:	b083      	sub	sp, #12
 800af32:	af00      	add	r7, sp, #0
 800af34:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800af36:	2300      	movs	r3, #0
}
 800af38:	4618      	mov	r0, r3
 800af3a:	370c      	adds	r7, #12
 800af3c:	46bd      	mov	sp, r7
 800af3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af42:	4770      	bx	lr

0800af44 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800af44:	b580      	push	{r7, lr}
 800af46:	b084      	sub	sp, #16
 800af48:	af00      	add	r7, sp, #0
 800af4a:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800af4c:	2300      	movs	r3, #0
 800af4e:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	2201      	movs	r2, #1
 800af54:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800af5e:	2b00      	cmp	r3, #0
 800af60:	d00e      	beq.n	800af80 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800af68:	685b      	ldr	r3, [r3, #4]
 800af6a:	687a      	ldr	r2, [r7, #4]
 800af6c:	6852      	ldr	r2, [r2, #4]
 800af6e:	b2d2      	uxtb	r2, r2
 800af70:	4611      	mov	r1, r2
 800af72:	6878      	ldr	r0, [r7, #4]
 800af74:	4798      	blx	r3
 800af76:	4603      	mov	r3, r0
 800af78:	2b00      	cmp	r3, #0
 800af7a:	d001      	beq.n	800af80 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800af7c:	2303      	movs	r3, #3
 800af7e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800af80:	7bfb      	ldrb	r3, [r7, #15]
}
 800af82:	4618      	mov	r0, r3
 800af84:	3710      	adds	r7, #16
 800af86:	46bd      	mov	sp, r7
 800af88:	bd80      	pop	{r7, pc}

0800af8a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800af8a:	b480      	push	{r7}
 800af8c:	b083      	sub	sp, #12
 800af8e:	af00      	add	r7, sp, #0
 800af90:	6078      	str	r0, [r7, #4]
 800af92:	460b      	mov	r3, r1
 800af94:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800af96:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800af98:	4618      	mov	r0, r3
 800af9a:	370c      	adds	r7, #12
 800af9c:	46bd      	mov	sp, r7
 800af9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afa2:	4770      	bx	lr

0800afa4 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800afa4:	b480      	push	{r7}
 800afa6:	b083      	sub	sp, #12
 800afa8:	af00      	add	r7, sp, #0
 800afaa:	6078      	str	r0, [r7, #4]
 800afac:	460b      	mov	r3, r1
 800afae:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800afb0:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800afb2:	4618      	mov	r0, r3
 800afb4:	370c      	adds	r7, #12
 800afb6:	46bd      	mov	sp, r7
 800afb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afbc:	4770      	bx	lr

0800afbe <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800afbe:	b580      	push	{r7, lr}
 800afc0:	b086      	sub	sp, #24
 800afc2:	af00      	add	r7, sp, #0
 800afc4:	6078      	str	r0, [r7, #4]
 800afc6:	460b      	mov	r3, r1
 800afc8:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800afd2:	2300      	movs	r3, #0
 800afd4:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800afd6:	68fb      	ldr	r3, [r7, #12]
 800afd8:	885b      	ldrh	r3, [r3, #2]
 800afda:	b29a      	uxth	r2, r3
 800afdc:	68fb      	ldr	r3, [r7, #12]
 800afde:	781b      	ldrb	r3, [r3, #0]
 800afe0:	b29b      	uxth	r3, r3
 800afe2:	429a      	cmp	r2, r3
 800afe4:	d920      	bls.n	800b028 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800afe6:	68fb      	ldr	r3, [r7, #12]
 800afe8:	781b      	ldrb	r3, [r3, #0]
 800afea:	b29b      	uxth	r3, r3
 800afec:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800afee:	e013      	b.n	800b018 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800aff0:	f107 030a 	add.w	r3, r7, #10
 800aff4:	4619      	mov	r1, r3
 800aff6:	6978      	ldr	r0, [r7, #20]
 800aff8:	f000 f81b 	bl	800b032 <USBD_GetNextDesc>
 800affc:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800affe:	697b      	ldr	r3, [r7, #20]
 800b000:	785b      	ldrb	r3, [r3, #1]
 800b002:	2b05      	cmp	r3, #5
 800b004:	d108      	bne.n	800b018 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800b006:	697b      	ldr	r3, [r7, #20]
 800b008:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800b00a:	693b      	ldr	r3, [r7, #16]
 800b00c:	789b      	ldrb	r3, [r3, #2]
 800b00e:	78fa      	ldrb	r2, [r7, #3]
 800b010:	429a      	cmp	r2, r3
 800b012:	d008      	beq.n	800b026 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800b014:	2300      	movs	r3, #0
 800b016:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800b018:	68fb      	ldr	r3, [r7, #12]
 800b01a:	885b      	ldrh	r3, [r3, #2]
 800b01c:	b29a      	uxth	r2, r3
 800b01e:	897b      	ldrh	r3, [r7, #10]
 800b020:	429a      	cmp	r2, r3
 800b022:	d8e5      	bhi.n	800aff0 <USBD_GetEpDesc+0x32>
 800b024:	e000      	b.n	800b028 <USBD_GetEpDesc+0x6a>
          break;
 800b026:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800b028:	693b      	ldr	r3, [r7, #16]
}
 800b02a:	4618      	mov	r0, r3
 800b02c:	3718      	adds	r7, #24
 800b02e:	46bd      	mov	sp, r7
 800b030:	bd80      	pop	{r7, pc}

0800b032 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800b032:	b480      	push	{r7}
 800b034:	b085      	sub	sp, #20
 800b036:	af00      	add	r7, sp, #0
 800b038:	6078      	str	r0, [r7, #4]
 800b03a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800b040:	683b      	ldr	r3, [r7, #0]
 800b042:	881a      	ldrh	r2, [r3, #0]
 800b044:	68fb      	ldr	r3, [r7, #12]
 800b046:	781b      	ldrb	r3, [r3, #0]
 800b048:	b29b      	uxth	r3, r3
 800b04a:	4413      	add	r3, r2
 800b04c:	b29a      	uxth	r2, r3
 800b04e:	683b      	ldr	r3, [r7, #0]
 800b050:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800b052:	68fb      	ldr	r3, [r7, #12]
 800b054:	781b      	ldrb	r3, [r3, #0]
 800b056:	461a      	mov	r2, r3
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	4413      	add	r3, r2
 800b05c:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800b05e:	68fb      	ldr	r3, [r7, #12]
}
 800b060:	4618      	mov	r0, r3
 800b062:	3714      	adds	r7, #20
 800b064:	46bd      	mov	sp, r7
 800b066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b06a:	4770      	bx	lr

0800b06c <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800b06c:	b480      	push	{r7}
 800b06e:	b087      	sub	sp, #28
 800b070:	af00      	add	r7, sp, #0
 800b072:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800b078:	697b      	ldr	r3, [r7, #20]
 800b07a:	781b      	ldrb	r3, [r3, #0]
 800b07c:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800b07e:	697b      	ldr	r3, [r7, #20]
 800b080:	3301      	adds	r3, #1
 800b082:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800b084:	697b      	ldr	r3, [r7, #20]
 800b086:	781b      	ldrb	r3, [r3, #0]
 800b088:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800b08a:	8a3b      	ldrh	r3, [r7, #16]
 800b08c:	021b      	lsls	r3, r3, #8
 800b08e:	b21a      	sxth	r2, r3
 800b090:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800b094:	4313      	orrs	r3, r2
 800b096:	b21b      	sxth	r3, r3
 800b098:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800b09a:	89fb      	ldrh	r3, [r7, #14]
}
 800b09c:	4618      	mov	r0, r3
 800b09e:	371c      	adds	r7, #28
 800b0a0:	46bd      	mov	sp, r7
 800b0a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0a6:	4770      	bx	lr

0800b0a8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b0a8:	b580      	push	{r7, lr}
 800b0aa:	b084      	sub	sp, #16
 800b0ac:	af00      	add	r7, sp, #0
 800b0ae:	6078      	str	r0, [r7, #4]
 800b0b0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b0b2:	2300      	movs	r3, #0
 800b0b4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b0b6:	683b      	ldr	r3, [r7, #0]
 800b0b8:	781b      	ldrb	r3, [r3, #0]
 800b0ba:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b0be:	2b40      	cmp	r3, #64	; 0x40
 800b0c0:	d005      	beq.n	800b0ce <USBD_StdDevReq+0x26>
 800b0c2:	2b40      	cmp	r3, #64	; 0x40
 800b0c4:	d857      	bhi.n	800b176 <USBD_StdDevReq+0xce>
 800b0c6:	2b00      	cmp	r3, #0
 800b0c8:	d00f      	beq.n	800b0ea <USBD_StdDevReq+0x42>
 800b0ca:	2b20      	cmp	r3, #32
 800b0cc:	d153      	bne.n	800b176 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	32ae      	adds	r2, #174	; 0xae
 800b0d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b0dc:	689b      	ldr	r3, [r3, #8]
 800b0de:	6839      	ldr	r1, [r7, #0]
 800b0e0:	6878      	ldr	r0, [r7, #4]
 800b0e2:	4798      	blx	r3
 800b0e4:	4603      	mov	r3, r0
 800b0e6:	73fb      	strb	r3, [r7, #15]
      break;
 800b0e8:	e04a      	b.n	800b180 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b0ea:	683b      	ldr	r3, [r7, #0]
 800b0ec:	785b      	ldrb	r3, [r3, #1]
 800b0ee:	2b09      	cmp	r3, #9
 800b0f0:	d83b      	bhi.n	800b16a <USBD_StdDevReq+0xc2>
 800b0f2:	a201      	add	r2, pc, #4	; (adr r2, 800b0f8 <USBD_StdDevReq+0x50>)
 800b0f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b0f8:	0800b14d 	.word	0x0800b14d
 800b0fc:	0800b161 	.word	0x0800b161
 800b100:	0800b16b 	.word	0x0800b16b
 800b104:	0800b157 	.word	0x0800b157
 800b108:	0800b16b 	.word	0x0800b16b
 800b10c:	0800b12b 	.word	0x0800b12b
 800b110:	0800b121 	.word	0x0800b121
 800b114:	0800b16b 	.word	0x0800b16b
 800b118:	0800b143 	.word	0x0800b143
 800b11c:	0800b135 	.word	0x0800b135
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800b120:	6839      	ldr	r1, [r7, #0]
 800b122:	6878      	ldr	r0, [r7, #4]
 800b124:	f000 fa3c 	bl	800b5a0 <USBD_GetDescriptor>
          break;
 800b128:	e024      	b.n	800b174 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800b12a:	6839      	ldr	r1, [r7, #0]
 800b12c:	6878      	ldr	r0, [r7, #4]
 800b12e:	f000 fba1 	bl	800b874 <USBD_SetAddress>
          break;
 800b132:	e01f      	b.n	800b174 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800b134:	6839      	ldr	r1, [r7, #0]
 800b136:	6878      	ldr	r0, [r7, #4]
 800b138:	f000 fbe0 	bl	800b8fc <USBD_SetConfig>
 800b13c:	4603      	mov	r3, r0
 800b13e:	73fb      	strb	r3, [r7, #15]
          break;
 800b140:	e018      	b.n	800b174 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800b142:	6839      	ldr	r1, [r7, #0]
 800b144:	6878      	ldr	r0, [r7, #4]
 800b146:	f000 fc83 	bl	800ba50 <USBD_GetConfig>
          break;
 800b14a:	e013      	b.n	800b174 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800b14c:	6839      	ldr	r1, [r7, #0]
 800b14e:	6878      	ldr	r0, [r7, #4]
 800b150:	f000 fcb4 	bl	800babc <USBD_GetStatus>
          break;
 800b154:	e00e      	b.n	800b174 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800b156:	6839      	ldr	r1, [r7, #0]
 800b158:	6878      	ldr	r0, [r7, #4]
 800b15a:	f000 fce3 	bl	800bb24 <USBD_SetFeature>
          break;
 800b15e:	e009      	b.n	800b174 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800b160:	6839      	ldr	r1, [r7, #0]
 800b162:	6878      	ldr	r0, [r7, #4]
 800b164:	f000 fd07 	bl	800bb76 <USBD_ClrFeature>
          break;
 800b168:	e004      	b.n	800b174 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800b16a:	6839      	ldr	r1, [r7, #0]
 800b16c:	6878      	ldr	r0, [r7, #4]
 800b16e:	f000 fd5e 	bl	800bc2e <USBD_CtlError>
          break;
 800b172:	bf00      	nop
      }
      break;
 800b174:	e004      	b.n	800b180 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800b176:	6839      	ldr	r1, [r7, #0]
 800b178:	6878      	ldr	r0, [r7, #4]
 800b17a:	f000 fd58 	bl	800bc2e <USBD_CtlError>
      break;
 800b17e:	bf00      	nop
  }

  return ret;
 800b180:	7bfb      	ldrb	r3, [r7, #15]
}
 800b182:	4618      	mov	r0, r3
 800b184:	3710      	adds	r7, #16
 800b186:	46bd      	mov	sp, r7
 800b188:	bd80      	pop	{r7, pc}
 800b18a:	bf00      	nop

0800b18c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b18c:	b580      	push	{r7, lr}
 800b18e:	b084      	sub	sp, #16
 800b190:	af00      	add	r7, sp, #0
 800b192:	6078      	str	r0, [r7, #4]
 800b194:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b196:	2300      	movs	r3, #0
 800b198:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b19a:	683b      	ldr	r3, [r7, #0]
 800b19c:	781b      	ldrb	r3, [r3, #0]
 800b19e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b1a2:	2b40      	cmp	r3, #64	; 0x40
 800b1a4:	d005      	beq.n	800b1b2 <USBD_StdItfReq+0x26>
 800b1a6:	2b40      	cmp	r3, #64	; 0x40
 800b1a8:	d852      	bhi.n	800b250 <USBD_StdItfReq+0xc4>
 800b1aa:	2b00      	cmp	r3, #0
 800b1ac:	d001      	beq.n	800b1b2 <USBD_StdItfReq+0x26>
 800b1ae:	2b20      	cmp	r3, #32
 800b1b0:	d14e      	bne.n	800b250 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b1b8:	b2db      	uxtb	r3, r3
 800b1ba:	3b01      	subs	r3, #1
 800b1bc:	2b02      	cmp	r3, #2
 800b1be:	d840      	bhi.n	800b242 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800b1c0:	683b      	ldr	r3, [r7, #0]
 800b1c2:	889b      	ldrh	r3, [r3, #4]
 800b1c4:	b2db      	uxtb	r3, r3
 800b1c6:	2b01      	cmp	r3, #1
 800b1c8:	d836      	bhi.n	800b238 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800b1ca:	683b      	ldr	r3, [r7, #0]
 800b1cc:	889b      	ldrh	r3, [r3, #4]
 800b1ce:	b2db      	uxtb	r3, r3
 800b1d0:	4619      	mov	r1, r3
 800b1d2:	6878      	ldr	r0, [r7, #4]
 800b1d4:	f7ff fed9 	bl	800af8a <USBD_CoreFindIF>
 800b1d8:	4603      	mov	r3, r0
 800b1da:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b1dc:	7bbb      	ldrb	r3, [r7, #14]
 800b1de:	2bff      	cmp	r3, #255	; 0xff
 800b1e0:	d01d      	beq.n	800b21e <USBD_StdItfReq+0x92>
 800b1e2:	7bbb      	ldrb	r3, [r7, #14]
 800b1e4:	2b00      	cmp	r3, #0
 800b1e6:	d11a      	bne.n	800b21e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800b1e8:	7bba      	ldrb	r2, [r7, #14]
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	32ae      	adds	r2, #174	; 0xae
 800b1ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b1f2:	689b      	ldr	r3, [r3, #8]
 800b1f4:	2b00      	cmp	r3, #0
 800b1f6:	d00f      	beq.n	800b218 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800b1f8:	7bba      	ldrb	r2, [r7, #14]
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800b200:	7bba      	ldrb	r2, [r7, #14]
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	32ae      	adds	r2, #174	; 0xae
 800b206:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b20a:	689b      	ldr	r3, [r3, #8]
 800b20c:	6839      	ldr	r1, [r7, #0]
 800b20e:	6878      	ldr	r0, [r7, #4]
 800b210:	4798      	blx	r3
 800b212:	4603      	mov	r3, r0
 800b214:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800b216:	e004      	b.n	800b222 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800b218:	2303      	movs	r3, #3
 800b21a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800b21c:	e001      	b.n	800b222 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800b21e:	2303      	movs	r3, #3
 800b220:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800b222:	683b      	ldr	r3, [r7, #0]
 800b224:	88db      	ldrh	r3, [r3, #6]
 800b226:	2b00      	cmp	r3, #0
 800b228:	d110      	bne.n	800b24c <USBD_StdItfReq+0xc0>
 800b22a:	7bfb      	ldrb	r3, [r7, #15]
 800b22c:	2b00      	cmp	r3, #0
 800b22e:	d10d      	bne.n	800b24c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800b230:	6878      	ldr	r0, [r7, #4]
 800b232:	f000 fdaa 	bl	800bd8a <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800b236:	e009      	b.n	800b24c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800b238:	6839      	ldr	r1, [r7, #0]
 800b23a:	6878      	ldr	r0, [r7, #4]
 800b23c:	f000 fcf7 	bl	800bc2e <USBD_CtlError>
          break;
 800b240:	e004      	b.n	800b24c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800b242:	6839      	ldr	r1, [r7, #0]
 800b244:	6878      	ldr	r0, [r7, #4]
 800b246:	f000 fcf2 	bl	800bc2e <USBD_CtlError>
          break;
 800b24a:	e000      	b.n	800b24e <USBD_StdItfReq+0xc2>
          break;
 800b24c:	bf00      	nop
      }
      break;
 800b24e:	e004      	b.n	800b25a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800b250:	6839      	ldr	r1, [r7, #0]
 800b252:	6878      	ldr	r0, [r7, #4]
 800b254:	f000 fceb 	bl	800bc2e <USBD_CtlError>
      break;
 800b258:	bf00      	nop
  }

  return ret;
 800b25a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b25c:	4618      	mov	r0, r3
 800b25e:	3710      	adds	r7, #16
 800b260:	46bd      	mov	sp, r7
 800b262:	bd80      	pop	{r7, pc}

0800b264 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b264:	b580      	push	{r7, lr}
 800b266:	b084      	sub	sp, #16
 800b268:	af00      	add	r7, sp, #0
 800b26a:	6078      	str	r0, [r7, #4]
 800b26c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800b26e:	2300      	movs	r3, #0
 800b270:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800b272:	683b      	ldr	r3, [r7, #0]
 800b274:	889b      	ldrh	r3, [r3, #4]
 800b276:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b278:	683b      	ldr	r3, [r7, #0]
 800b27a:	781b      	ldrb	r3, [r3, #0]
 800b27c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b280:	2b40      	cmp	r3, #64	; 0x40
 800b282:	d007      	beq.n	800b294 <USBD_StdEPReq+0x30>
 800b284:	2b40      	cmp	r3, #64	; 0x40
 800b286:	f200 817f 	bhi.w	800b588 <USBD_StdEPReq+0x324>
 800b28a:	2b00      	cmp	r3, #0
 800b28c:	d02a      	beq.n	800b2e4 <USBD_StdEPReq+0x80>
 800b28e:	2b20      	cmp	r3, #32
 800b290:	f040 817a 	bne.w	800b588 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800b294:	7bbb      	ldrb	r3, [r7, #14]
 800b296:	4619      	mov	r1, r3
 800b298:	6878      	ldr	r0, [r7, #4]
 800b29a:	f7ff fe83 	bl	800afa4 <USBD_CoreFindEP>
 800b29e:	4603      	mov	r3, r0
 800b2a0:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b2a2:	7b7b      	ldrb	r3, [r7, #13]
 800b2a4:	2bff      	cmp	r3, #255	; 0xff
 800b2a6:	f000 8174 	beq.w	800b592 <USBD_StdEPReq+0x32e>
 800b2aa:	7b7b      	ldrb	r3, [r7, #13]
 800b2ac:	2b00      	cmp	r3, #0
 800b2ae:	f040 8170 	bne.w	800b592 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800b2b2:	7b7a      	ldrb	r2, [r7, #13]
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800b2ba:	7b7a      	ldrb	r2, [r7, #13]
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	32ae      	adds	r2, #174	; 0xae
 800b2c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b2c4:	689b      	ldr	r3, [r3, #8]
 800b2c6:	2b00      	cmp	r3, #0
 800b2c8:	f000 8163 	beq.w	800b592 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800b2cc:	7b7a      	ldrb	r2, [r7, #13]
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	32ae      	adds	r2, #174	; 0xae
 800b2d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b2d6:	689b      	ldr	r3, [r3, #8]
 800b2d8:	6839      	ldr	r1, [r7, #0]
 800b2da:	6878      	ldr	r0, [r7, #4]
 800b2dc:	4798      	blx	r3
 800b2de:	4603      	mov	r3, r0
 800b2e0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800b2e2:	e156      	b.n	800b592 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b2e4:	683b      	ldr	r3, [r7, #0]
 800b2e6:	785b      	ldrb	r3, [r3, #1]
 800b2e8:	2b03      	cmp	r3, #3
 800b2ea:	d008      	beq.n	800b2fe <USBD_StdEPReq+0x9a>
 800b2ec:	2b03      	cmp	r3, #3
 800b2ee:	f300 8145 	bgt.w	800b57c <USBD_StdEPReq+0x318>
 800b2f2:	2b00      	cmp	r3, #0
 800b2f4:	f000 809b 	beq.w	800b42e <USBD_StdEPReq+0x1ca>
 800b2f8:	2b01      	cmp	r3, #1
 800b2fa:	d03c      	beq.n	800b376 <USBD_StdEPReq+0x112>
 800b2fc:	e13e      	b.n	800b57c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b304:	b2db      	uxtb	r3, r3
 800b306:	2b02      	cmp	r3, #2
 800b308:	d002      	beq.n	800b310 <USBD_StdEPReq+0xac>
 800b30a:	2b03      	cmp	r3, #3
 800b30c:	d016      	beq.n	800b33c <USBD_StdEPReq+0xd8>
 800b30e:	e02c      	b.n	800b36a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b310:	7bbb      	ldrb	r3, [r7, #14]
 800b312:	2b00      	cmp	r3, #0
 800b314:	d00d      	beq.n	800b332 <USBD_StdEPReq+0xce>
 800b316:	7bbb      	ldrb	r3, [r7, #14]
 800b318:	2b80      	cmp	r3, #128	; 0x80
 800b31a:	d00a      	beq.n	800b332 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800b31c:	7bbb      	ldrb	r3, [r7, #14]
 800b31e:	4619      	mov	r1, r3
 800b320:	6878      	ldr	r0, [r7, #4]
 800b322:	f001 f94f 	bl	800c5c4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b326:	2180      	movs	r1, #128	; 0x80
 800b328:	6878      	ldr	r0, [r7, #4]
 800b32a:	f001 f94b 	bl	800c5c4 <USBD_LL_StallEP>
 800b32e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b330:	e020      	b.n	800b374 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800b332:	6839      	ldr	r1, [r7, #0]
 800b334:	6878      	ldr	r0, [r7, #4]
 800b336:	f000 fc7a 	bl	800bc2e <USBD_CtlError>
              break;
 800b33a:	e01b      	b.n	800b374 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b33c:	683b      	ldr	r3, [r7, #0]
 800b33e:	885b      	ldrh	r3, [r3, #2]
 800b340:	2b00      	cmp	r3, #0
 800b342:	d10e      	bne.n	800b362 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800b344:	7bbb      	ldrb	r3, [r7, #14]
 800b346:	2b00      	cmp	r3, #0
 800b348:	d00b      	beq.n	800b362 <USBD_StdEPReq+0xfe>
 800b34a:	7bbb      	ldrb	r3, [r7, #14]
 800b34c:	2b80      	cmp	r3, #128	; 0x80
 800b34e:	d008      	beq.n	800b362 <USBD_StdEPReq+0xfe>
 800b350:	683b      	ldr	r3, [r7, #0]
 800b352:	88db      	ldrh	r3, [r3, #6]
 800b354:	2b00      	cmp	r3, #0
 800b356:	d104      	bne.n	800b362 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800b358:	7bbb      	ldrb	r3, [r7, #14]
 800b35a:	4619      	mov	r1, r3
 800b35c:	6878      	ldr	r0, [r7, #4]
 800b35e:	f001 f931 	bl	800c5c4 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800b362:	6878      	ldr	r0, [r7, #4]
 800b364:	f000 fd11 	bl	800bd8a <USBD_CtlSendStatus>

              break;
 800b368:	e004      	b.n	800b374 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800b36a:	6839      	ldr	r1, [r7, #0]
 800b36c:	6878      	ldr	r0, [r7, #4]
 800b36e:	f000 fc5e 	bl	800bc2e <USBD_CtlError>
              break;
 800b372:	bf00      	nop
          }
          break;
 800b374:	e107      	b.n	800b586 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b37c:	b2db      	uxtb	r3, r3
 800b37e:	2b02      	cmp	r3, #2
 800b380:	d002      	beq.n	800b388 <USBD_StdEPReq+0x124>
 800b382:	2b03      	cmp	r3, #3
 800b384:	d016      	beq.n	800b3b4 <USBD_StdEPReq+0x150>
 800b386:	e04b      	b.n	800b420 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b388:	7bbb      	ldrb	r3, [r7, #14]
 800b38a:	2b00      	cmp	r3, #0
 800b38c:	d00d      	beq.n	800b3aa <USBD_StdEPReq+0x146>
 800b38e:	7bbb      	ldrb	r3, [r7, #14]
 800b390:	2b80      	cmp	r3, #128	; 0x80
 800b392:	d00a      	beq.n	800b3aa <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800b394:	7bbb      	ldrb	r3, [r7, #14]
 800b396:	4619      	mov	r1, r3
 800b398:	6878      	ldr	r0, [r7, #4]
 800b39a:	f001 f913 	bl	800c5c4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b39e:	2180      	movs	r1, #128	; 0x80
 800b3a0:	6878      	ldr	r0, [r7, #4]
 800b3a2:	f001 f90f 	bl	800c5c4 <USBD_LL_StallEP>
 800b3a6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b3a8:	e040      	b.n	800b42c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800b3aa:	6839      	ldr	r1, [r7, #0]
 800b3ac:	6878      	ldr	r0, [r7, #4]
 800b3ae:	f000 fc3e 	bl	800bc2e <USBD_CtlError>
              break;
 800b3b2:	e03b      	b.n	800b42c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b3b4:	683b      	ldr	r3, [r7, #0]
 800b3b6:	885b      	ldrh	r3, [r3, #2]
 800b3b8:	2b00      	cmp	r3, #0
 800b3ba:	d136      	bne.n	800b42a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800b3bc:	7bbb      	ldrb	r3, [r7, #14]
 800b3be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b3c2:	2b00      	cmp	r3, #0
 800b3c4:	d004      	beq.n	800b3d0 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800b3c6:	7bbb      	ldrb	r3, [r7, #14]
 800b3c8:	4619      	mov	r1, r3
 800b3ca:	6878      	ldr	r0, [r7, #4]
 800b3cc:	f001 f919 	bl	800c602 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800b3d0:	6878      	ldr	r0, [r7, #4]
 800b3d2:	f000 fcda 	bl	800bd8a <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800b3d6:	7bbb      	ldrb	r3, [r7, #14]
 800b3d8:	4619      	mov	r1, r3
 800b3da:	6878      	ldr	r0, [r7, #4]
 800b3dc:	f7ff fde2 	bl	800afa4 <USBD_CoreFindEP>
 800b3e0:	4603      	mov	r3, r0
 800b3e2:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b3e4:	7b7b      	ldrb	r3, [r7, #13]
 800b3e6:	2bff      	cmp	r3, #255	; 0xff
 800b3e8:	d01f      	beq.n	800b42a <USBD_StdEPReq+0x1c6>
 800b3ea:	7b7b      	ldrb	r3, [r7, #13]
 800b3ec:	2b00      	cmp	r3, #0
 800b3ee:	d11c      	bne.n	800b42a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800b3f0:	7b7a      	ldrb	r2, [r7, #13]
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800b3f8:	7b7a      	ldrb	r2, [r7, #13]
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	32ae      	adds	r2, #174	; 0xae
 800b3fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b402:	689b      	ldr	r3, [r3, #8]
 800b404:	2b00      	cmp	r3, #0
 800b406:	d010      	beq.n	800b42a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800b408:	7b7a      	ldrb	r2, [r7, #13]
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	32ae      	adds	r2, #174	; 0xae
 800b40e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b412:	689b      	ldr	r3, [r3, #8]
 800b414:	6839      	ldr	r1, [r7, #0]
 800b416:	6878      	ldr	r0, [r7, #4]
 800b418:	4798      	blx	r3
 800b41a:	4603      	mov	r3, r0
 800b41c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800b41e:	e004      	b.n	800b42a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800b420:	6839      	ldr	r1, [r7, #0]
 800b422:	6878      	ldr	r0, [r7, #4]
 800b424:	f000 fc03 	bl	800bc2e <USBD_CtlError>
              break;
 800b428:	e000      	b.n	800b42c <USBD_StdEPReq+0x1c8>
              break;
 800b42a:	bf00      	nop
          }
          break;
 800b42c:	e0ab      	b.n	800b586 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b434:	b2db      	uxtb	r3, r3
 800b436:	2b02      	cmp	r3, #2
 800b438:	d002      	beq.n	800b440 <USBD_StdEPReq+0x1dc>
 800b43a:	2b03      	cmp	r3, #3
 800b43c:	d032      	beq.n	800b4a4 <USBD_StdEPReq+0x240>
 800b43e:	e097      	b.n	800b570 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b440:	7bbb      	ldrb	r3, [r7, #14]
 800b442:	2b00      	cmp	r3, #0
 800b444:	d007      	beq.n	800b456 <USBD_StdEPReq+0x1f2>
 800b446:	7bbb      	ldrb	r3, [r7, #14]
 800b448:	2b80      	cmp	r3, #128	; 0x80
 800b44a:	d004      	beq.n	800b456 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800b44c:	6839      	ldr	r1, [r7, #0]
 800b44e:	6878      	ldr	r0, [r7, #4]
 800b450:	f000 fbed 	bl	800bc2e <USBD_CtlError>
                break;
 800b454:	e091      	b.n	800b57a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b456:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b45a:	2b00      	cmp	r3, #0
 800b45c:	da0b      	bge.n	800b476 <USBD_StdEPReq+0x212>
 800b45e:	7bbb      	ldrb	r3, [r7, #14]
 800b460:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b464:	4613      	mov	r3, r2
 800b466:	009b      	lsls	r3, r3, #2
 800b468:	4413      	add	r3, r2
 800b46a:	009b      	lsls	r3, r3, #2
 800b46c:	3310      	adds	r3, #16
 800b46e:	687a      	ldr	r2, [r7, #4]
 800b470:	4413      	add	r3, r2
 800b472:	3304      	adds	r3, #4
 800b474:	e00b      	b.n	800b48e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b476:	7bbb      	ldrb	r3, [r7, #14]
 800b478:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b47c:	4613      	mov	r3, r2
 800b47e:	009b      	lsls	r3, r3, #2
 800b480:	4413      	add	r3, r2
 800b482:	009b      	lsls	r3, r3, #2
 800b484:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b488:	687a      	ldr	r2, [r7, #4]
 800b48a:	4413      	add	r3, r2
 800b48c:	3304      	adds	r3, #4
 800b48e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800b490:	68bb      	ldr	r3, [r7, #8]
 800b492:	2200      	movs	r2, #0
 800b494:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b496:	68bb      	ldr	r3, [r7, #8]
 800b498:	2202      	movs	r2, #2
 800b49a:	4619      	mov	r1, r3
 800b49c:	6878      	ldr	r0, [r7, #4]
 800b49e:	f000 fc37 	bl	800bd10 <USBD_CtlSendData>
              break;
 800b4a2:	e06a      	b.n	800b57a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800b4a4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b4a8:	2b00      	cmp	r3, #0
 800b4aa:	da11      	bge.n	800b4d0 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800b4ac:	7bbb      	ldrb	r3, [r7, #14]
 800b4ae:	f003 020f 	and.w	r2, r3, #15
 800b4b2:	6879      	ldr	r1, [r7, #4]
 800b4b4:	4613      	mov	r3, r2
 800b4b6:	009b      	lsls	r3, r3, #2
 800b4b8:	4413      	add	r3, r2
 800b4ba:	009b      	lsls	r3, r3, #2
 800b4bc:	440b      	add	r3, r1
 800b4be:	3324      	adds	r3, #36	; 0x24
 800b4c0:	881b      	ldrh	r3, [r3, #0]
 800b4c2:	2b00      	cmp	r3, #0
 800b4c4:	d117      	bne.n	800b4f6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800b4c6:	6839      	ldr	r1, [r7, #0]
 800b4c8:	6878      	ldr	r0, [r7, #4]
 800b4ca:	f000 fbb0 	bl	800bc2e <USBD_CtlError>
                  break;
 800b4ce:	e054      	b.n	800b57a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800b4d0:	7bbb      	ldrb	r3, [r7, #14]
 800b4d2:	f003 020f 	and.w	r2, r3, #15
 800b4d6:	6879      	ldr	r1, [r7, #4]
 800b4d8:	4613      	mov	r3, r2
 800b4da:	009b      	lsls	r3, r3, #2
 800b4dc:	4413      	add	r3, r2
 800b4de:	009b      	lsls	r3, r3, #2
 800b4e0:	440b      	add	r3, r1
 800b4e2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800b4e6:	881b      	ldrh	r3, [r3, #0]
 800b4e8:	2b00      	cmp	r3, #0
 800b4ea:	d104      	bne.n	800b4f6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800b4ec:	6839      	ldr	r1, [r7, #0]
 800b4ee:	6878      	ldr	r0, [r7, #4]
 800b4f0:	f000 fb9d 	bl	800bc2e <USBD_CtlError>
                  break;
 800b4f4:	e041      	b.n	800b57a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b4f6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b4fa:	2b00      	cmp	r3, #0
 800b4fc:	da0b      	bge.n	800b516 <USBD_StdEPReq+0x2b2>
 800b4fe:	7bbb      	ldrb	r3, [r7, #14]
 800b500:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b504:	4613      	mov	r3, r2
 800b506:	009b      	lsls	r3, r3, #2
 800b508:	4413      	add	r3, r2
 800b50a:	009b      	lsls	r3, r3, #2
 800b50c:	3310      	adds	r3, #16
 800b50e:	687a      	ldr	r2, [r7, #4]
 800b510:	4413      	add	r3, r2
 800b512:	3304      	adds	r3, #4
 800b514:	e00b      	b.n	800b52e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b516:	7bbb      	ldrb	r3, [r7, #14]
 800b518:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b51c:	4613      	mov	r3, r2
 800b51e:	009b      	lsls	r3, r3, #2
 800b520:	4413      	add	r3, r2
 800b522:	009b      	lsls	r3, r3, #2
 800b524:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b528:	687a      	ldr	r2, [r7, #4]
 800b52a:	4413      	add	r3, r2
 800b52c:	3304      	adds	r3, #4
 800b52e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800b530:	7bbb      	ldrb	r3, [r7, #14]
 800b532:	2b00      	cmp	r3, #0
 800b534:	d002      	beq.n	800b53c <USBD_StdEPReq+0x2d8>
 800b536:	7bbb      	ldrb	r3, [r7, #14]
 800b538:	2b80      	cmp	r3, #128	; 0x80
 800b53a:	d103      	bne.n	800b544 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800b53c:	68bb      	ldr	r3, [r7, #8]
 800b53e:	2200      	movs	r2, #0
 800b540:	601a      	str	r2, [r3, #0]
 800b542:	e00e      	b.n	800b562 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800b544:	7bbb      	ldrb	r3, [r7, #14]
 800b546:	4619      	mov	r1, r3
 800b548:	6878      	ldr	r0, [r7, #4]
 800b54a:	f001 f879 	bl	800c640 <USBD_LL_IsStallEP>
 800b54e:	4603      	mov	r3, r0
 800b550:	2b00      	cmp	r3, #0
 800b552:	d003      	beq.n	800b55c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800b554:	68bb      	ldr	r3, [r7, #8]
 800b556:	2201      	movs	r2, #1
 800b558:	601a      	str	r2, [r3, #0]
 800b55a:	e002      	b.n	800b562 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800b55c:	68bb      	ldr	r3, [r7, #8]
 800b55e:	2200      	movs	r2, #0
 800b560:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b562:	68bb      	ldr	r3, [r7, #8]
 800b564:	2202      	movs	r2, #2
 800b566:	4619      	mov	r1, r3
 800b568:	6878      	ldr	r0, [r7, #4]
 800b56a:	f000 fbd1 	bl	800bd10 <USBD_CtlSendData>
              break;
 800b56e:	e004      	b.n	800b57a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800b570:	6839      	ldr	r1, [r7, #0]
 800b572:	6878      	ldr	r0, [r7, #4]
 800b574:	f000 fb5b 	bl	800bc2e <USBD_CtlError>
              break;
 800b578:	bf00      	nop
          }
          break;
 800b57a:	e004      	b.n	800b586 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800b57c:	6839      	ldr	r1, [r7, #0]
 800b57e:	6878      	ldr	r0, [r7, #4]
 800b580:	f000 fb55 	bl	800bc2e <USBD_CtlError>
          break;
 800b584:	bf00      	nop
      }
      break;
 800b586:	e005      	b.n	800b594 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800b588:	6839      	ldr	r1, [r7, #0]
 800b58a:	6878      	ldr	r0, [r7, #4]
 800b58c:	f000 fb4f 	bl	800bc2e <USBD_CtlError>
      break;
 800b590:	e000      	b.n	800b594 <USBD_StdEPReq+0x330>
      break;
 800b592:	bf00      	nop
  }

  return ret;
 800b594:	7bfb      	ldrb	r3, [r7, #15]
}
 800b596:	4618      	mov	r0, r3
 800b598:	3710      	adds	r7, #16
 800b59a:	46bd      	mov	sp, r7
 800b59c:	bd80      	pop	{r7, pc}
	...

0800b5a0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b5a0:	b580      	push	{r7, lr}
 800b5a2:	b084      	sub	sp, #16
 800b5a4:	af00      	add	r7, sp, #0
 800b5a6:	6078      	str	r0, [r7, #4]
 800b5a8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b5aa:	2300      	movs	r3, #0
 800b5ac:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800b5ae:	2300      	movs	r3, #0
 800b5b0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800b5b2:	2300      	movs	r3, #0
 800b5b4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800b5b6:	683b      	ldr	r3, [r7, #0]
 800b5b8:	885b      	ldrh	r3, [r3, #2]
 800b5ba:	0a1b      	lsrs	r3, r3, #8
 800b5bc:	b29b      	uxth	r3, r3
 800b5be:	3b01      	subs	r3, #1
 800b5c0:	2b06      	cmp	r3, #6
 800b5c2:	f200 8128 	bhi.w	800b816 <USBD_GetDescriptor+0x276>
 800b5c6:	a201      	add	r2, pc, #4	; (adr r2, 800b5cc <USBD_GetDescriptor+0x2c>)
 800b5c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b5cc:	0800b5e9 	.word	0x0800b5e9
 800b5d0:	0800b601 	.word	0x0800b601
 800b5d4:	0800b641 	.word	0x0800b641
 800b5d8:	0800b817 	.word	0x0800b817
 800b5dc:	0800b817 	.word	0x0800b817
 800b5e0:	0800b7b7 	.word	0x0800b7b7
 800b5e4:	0800b7e3 	.word	0x0800b7e3
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b5ee:	681b      	ldr	r3, [r3, #0]
 800b5f0:	687a      	ldr	r2, [r7, #4]
 800b5f2:	7c12      	ldrb	r2, [r2, #16]
 800b5f4:	f107 0108 	add.w	r1, r7, #8
 800b5f8:	4610      	mov	r0, r2
 800b5fa:	4798      	blx	r3
 800b5fc:	60f8      	str	r0, [r7, #12]
      break;
 800b5fe:	e112      	b.n	800b826 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	7c1b      	ldrb	r3, [r3, #16]
 800b604:	2b00      	cmp	r3, #0
 800b606:	d10d      	bne.n	800b624 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b60e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b610:	f107 0208 	add.w	r2, r7, #8
 800b614:	4610      	mov	r0, r2
 800b616:	4798      	blx	r3
 800b618:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b61a:	68fb      	ldr	r3, [r7, #12]
 800b61c:	3301      	adds	r3, #1
 800b61e:	2202      	movs	r2, #2
 800b620:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800b622:	e100      	b.n	800b826 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b62a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b62c:	f107 0208 	add.w	r2, r7, #8
 800b630:	4610      	mov	r0, r2
 800b632:	4798      	blx	r3
 800b634:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b636:	68fb      	ldr	r3, [r7, #12]
 800b638:	3301      	adds	r3, #1
 800b63a:	2202      	movs	r2, #2
 800b63c:	701a      	strb	r2, [r3, #0]
      break;
 800b63e:	e0f2      	b.n	800b826 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800b640:	683b      	ldr	r3, [r7, #0]
 800b642:	885b      	ldrh	r3, [r3, #2]
 800b644:	b2db      	uxtb	r3, r3
 800b646:	2b05      	cmp	r3, #5
 800b648:	f200 80ac 	bhi.w	800b7a4 <USBD_GetDescriptor+0x204>
 800b64c:	a201      	add	r2, pc, #4	; (adr r2, 800b654 <USBD_GetDescriptor+0xb4>)
 800b64e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b652:	bf00      	nop
 800b654:	0800b66d 	.word	0x0800b66d
 800b658:	0800b6a1 	.word	0x0800b6a1
 800b65c:	0800b6d5 	.word	0x0800b6d5
 800b660:	0800b709 	.word	0x0800b709
 800b664:	0800b73d 	.word	0x0800b73d
 800b668:	0800b771 	.word	0x0800b771
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b672:	685b      	ldr	r3, [r3, #4]
 800b674:	2b00      	cmp	r3, #0
 800b676:	d00b      	beq.n	800b690 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b67e:	685b      	ldr	r3, [r3, #4]
 800b680:	687a      	ldr	r2, [r7, #4]
 800b682:	7c12      	ldrb	r2, [r2, #16]
 800b684:	f107 0108 	add.w	r1, r7, #8
 800b688:	4610      	mov	r0, r2
 800b68a:	4798      	blx	r3
 800b68c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b68e:	e091      	b.n	800b7b4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b690:	6839      	ldr	r1, [r7, #0]
 800b692:	6878      	ldr	r0, [r7, #4]
 800b694:	f000 facb 	bl	800bc2e <USBD_CtlError>
            err++;
 800b698:	7afb      	ldrb	r3, [r7, #11]
 800b69a:	3301      	adds	r3, #1
 800b69c:	72fb      	strb	r3, [r7, #11]
          break;
 800b69e:	e089      	b.n	800b7b4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b6a6:	689b      	ldr	r3, [r3, #8]
 800b6a8:	2b00      	cmp	r3, #0
 800b6aa:	d00b      	beq.n	800b6c4 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b6b2:	689b      	ldr	r3, [r3, #8]
 800b6b4:	687a      	ldr	r2, [r7, #4]
 800b6b6:	7c12      	ldrb	r2, [r2, #16]
 800b6b8:	f107 0108 	add.w	r1, r7, #8
 800b6bc:	4610      	mov	r0, r2
 800b6be:	4798      	blx	r3
 800b6c0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b6c2:	e077      	b.n	800b7b4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b6c4:	6839      	ldr	r1, [r7, #0]
 800b6c6:	6878      	ldr	r0, [r7, #4]
 800b6c8:	f000 fab1 	bl	800bc2e <USBD_CtlError>
            err++;
 800b6cc:	7afb      	ldrb	r3, [r7, #11]
 800b6ce:	3301      	adds	r3, #1
 800b6d0:	72fb      	strb	r3, [r7, #11]
          break;
 800b6d2:	e06f      	b.n	800b7b4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b6da:	68db      	ldr	r3, [r3, #12]
 800b6dc:	2b00      	cmp	r3, #0
 800b6de:	d00b      	beq.n	800b6f8 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b6e6:	68db      	ldr	r3, [r3, #12]
 800b6e8:	687a      	ldr	r2, [r7, #4]
 800b6ea:	7c12      	ldrb	r2, [r2, #16]
 800b6ec:	f107 0108 	add.w	r1, r7, #8
 800b6f0:	4610      	mov	r0, r2
 800b6f2:	4798      	blx	r3
 800b6f4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b6f6:	e05d      	b.n	800b7b4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b6f8:	6839      	ldr	r1, [r7, #0]
 800b6fa:	6878      	ldr	r0, [r7, #4]
 800b6fc:	f000 fa97 	bl	800bc2e <USBD_CtlError>
            err++;
 800b700:	7afb      	ldrb	r3, [r7, #11]
 800b702:	3301      	adds	r3, #1
 800b704:	72fb      	strb	r3, [r7, #11]
          break;
 800b706:	e055      	b.n	800b7b4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b70e:	691b      	ldr	r3, [r3, #16]
 800b710:	2b00      	cmp	r3, #0
 800b712:	d00b      	beq.n	800b72c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b71a:	691b      	ldr	r3, [r3, #16]
 800b71c:	687a      	ldr	r2, [r7, #4]
 800b71e:	7c12      	ldrb	r2, [r2, #16]
 800b720:	f107 0108 	add.w	r1, r7, #8
 800b724:	4610      	mov	r0, r2
 800b726:	4798      	blx	r3
 800b728:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b72a:	e043      	b.n	800b7b4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b72c:	6839      	ldr	r1, [r7, #0]
 800b72e:	6878      	ldr	r0, [r7, #4]
 800b730:	f000 fa7d 	bl	800bc2e <USBD_CtlError>
            err++;
 800b734:	7afb      	ldrb	r3, [r7, #11]
 800b736:	3301      	adds	r3, #1
 800b738:	72fb      	strb	r3, [r7, #11]
          break;
 800b73a:	e03b      	b.n	800b7b4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b742:	695b      	ldr	r3, [r3, #20]
 800b744:	2b00      	cmp	r3, #0
 800b746:	d00b      	beq.n	800b760 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b74e:	695b      	ldr	r3, [r3, #20]
 800b750:	687a      	ldr	r2, [r7, #4]
 800b752:	7c12      	ldrb	r2, [r2, #16]
 800b754:	f107 0108 	add.w	r1, r7, #8
 800b758:	4610      	mov	r0, r2
 800b75a:	4798      	blx	r3
 800b75c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b75e:	e029      	b.n	800b7b4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b760:	6839      	ldr	r1, [r7, #0]
 800b762:	6878      	ldr	r0, [r7, #4]
 800b764:	f000 fa63 	bl	800bc2e <USBD_CtlError>
            err++;
 800b768:	7afb      	ldrb	r3, [r7, #11]
 800b76a:	3301      	adds	r3, #1
 800b76c:	72fb      	strb	r3, [r7, #11]
          break;
 800b76e:	e021      	b.n	800b7b4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b776:	699b      	ldr	r3, [r3, #24]
 800b778:	2b00      	cmp	r3, #0
 800b77a:	d00b      	beq.n	800b794 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b782:	699b      	ldr	r3, [r3, #24]
 800b784:	687a      	ldr	r2, [r7, #4]
 800b786:	7c12      	ldrb	r2, [r2, #16]
 800b788:	f107 0108 	add.w	r1, r7, #8
 800b78c:	4610      	mov	r0, r2
 800b78e:	4798      	blx	r3
 800b790:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b792:	e00f      	b.n	800b7b4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b794:	6839      	ldr	r1, [r7, #0]
 800b796:	6878      	ldr	r0, [r7, #4]
 800b798:	f000 fa49 	bl	800bc2e <USBD_CtlError>
            err++;
 800b79c:	7afb      	ldrb	r3, [r7, #11]
 800b79e:	3301      	adds	r3, #1
 800b7a0:	72fb      	strb	r3, [r7, #11]
          break;
 800b7a2:	e007      	b.n	800b7b4 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800b7a4:	6839      	ldr	r1, [r7, #0]
 800b7a6:	6878      	ldr	r0, [r7, #4]
 800b7a8:	f000 fa41 	bl	800bc2e <USBD_CtlError>
          err++;
 800b7ac:	7afb      	ldrb	r3, [r7, #11]
 800b7ae:	3301      	adds	r3, #1
 800b7b0:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800b7b2:	bf00      	nop
      }
      break;
 800b7b4:	e037      	b.n	800b826 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	7c1b      	ldrb	r3, [r3, #16]
 800b7ba:	2b00      	cmp	r3, #0
 800b7bc:	d109      	bne.n	800b7d2 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b7c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b7c6:	f107 0208 	add.w	r2, r7, #8
 800b7ca:	4610      	mov	r0, r2
 800b7cc:	4798      	blx	r3
 800b7ce:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b7d0:	e029      	b.n	800b826 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800b7d2:	6839      	ldr	r1, [r7, #0]
 800b7d4:	6878      	ldr	r0, [r7, #4]
 800b7d6:	f000 fa2a 	bl	800bc2e <USBD_CtlError>
        err++;
 800b7da:	7afb      	ldrb	r3, [r7, #11]
 800b7dc:	3301      	adds	r3, #1
 800b7de:	72fb      	strb	r3, [r7, #11]
      break;
 800b7e0:	e021      	b.n	800b826 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	7c1b      	ldrb	r3, [r3, #16]
 800b7e6:	2b00      	cmp	r3, #0
 800b7e8:	d10d      	bne.n	800b806 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b7f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b7f2:	f107 0208 	add.w	r2, r7, #8
 800b7f6:	4610      	mov	r0, r2
 800b7f8:	4798      	blx	r3
 800b7fa:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800b7fc:	68fb      	ldr	r3, [r7, #12]
 800b7fe:	3301      	adds	r3, #1
 800b800:	2207      	movs	r2, #7
 800b802:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b804:	e00f      	b.n	800b826 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800b806:	6839      	ldr	r1, [r7, #0]
 800b808:	6878      	ldr	r0, [r7, #4]
 800b80a:	f000 fa10 	bl	800bc2e <USBD_CtlError>
        err++;
 800b80e:	7afb      	ldrb	r3, [r7, #11]
 800b810:	3301      	adds	r3, #1
 800b812:	72fb      	strb	r3, [r7, #11]
      break;
 800b814:	e007      	b.n	800b826 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800b816:	6839      	ldr	r1, [r7, #0]
 800b818:	6878      	ldr	r0, [r7, #4]
 800b81a:	f000 fa08 	bl	800bc2e <USBD_CtlError>
      err++;
 800b81e:	7afb      	ldrb	r3, [r7, #11]
 800b820:	3301      	adds	r3, #1
 800b822:	72fb      	strb	r3, [r7, #11]
      break;
 800b824:	bf00      	nop
  }

  if (err != 0U)
 800b826:	7afb      	ldrb	r3, [r7, #11]
 800b828:	2b00      	cmp	r3, #0
 800b82a:	d11e      	bne.n	800b86a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800b82c:	683b      	ldr	r3, [r7, #0]
 800b82e:	88db      	ldrh	r3, [r3, #6]
 800b830:	2b00      	cmp	r3, #0
 800b832:	d016      	beq.n	800b862 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800b834:	893b      	ldrh	r3, [r7, #8]
 800b836:	2b00      	cmp	r3, #0
 800b838:	d00e      	beq.n	800b858 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800b83a:	683b      	ldr	r3, [r7, #0]
 800b83c:	88da      	ldrh	r2, [r3, #6]
 800b83e:	893b      	ldrh	r3, [r7, #8]
 800b840:	4293      	cmp	r3, r2
 800b842:	bf28      	it	cs
 800b844:	4613      	movcs	r3, r2
 800b846:	b29b      	uxth	r3, r3
 800b848:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800b84a:	893b      	ldrh	r3, [r7, #8]
 800b84c:	461a      	mov	r2, r3
 800b84e:	68f9      	ldr	r1, [r7, #12]
 800b850:	6878      	ldr	r0, [r7, #4]
 800b852:	f000 fa5d 	bl	800bd10 <USBD_CtlSendData>
 800b856:	e009      	b.n	800b86c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800b858:	6839      	ldr	r1, [r7, #0]
 800b85a:	6878      	ldr	r0, [r7, #4]
 800b85c:	f000 f9e7 	bl	800bc2e <USBD_CtlError>
 800b860:	e004      	b.n	800b86c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800b862:	6878      	ldr	r0, [r7, #4]
 800b864:	f000 fa91 	bl	800bd8a <USBD_CtlSendStatus>
 800b868:	e000      	b.n	800b86c <USBD_GetDescriptor+0x2cc>
    return;
 800b86a:	bf00      	nop
  }
}
 800b86c:	3710      	adds	r7, #16
 800b86e:	46bd      	mov	sp, r7
 800b870:	bd80      	pop	{r7, pc}
 800b872:	bf00      	nop

0800b874 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b874:	b580      	push	{r7, lr}
 800b876:	b084      	sub	sp, #16
 800b878:	af00      	add	r7, sp, #0
 800b87a:	6078      	str	r0, [r7, #4]
 800b87c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800b87e:	683b      	ldr	r3, [r7, #0]
 800b880:	889b      	ldrh	r3, [r3, #4]
 800b882:	2b00      	cmp	r3, #0
 800b884:	d131      	bne.n	800b8ea <USBD_SetAddress+0x76>
 800b886:	683b      	ldr	r3, [r7, #0]
 800b888:	88db      	ldrh	r3, [r3, #6]
 800b88a:	2b00      	cmp	r3, #0
 800b88c:	d12d      	bne.n	800b8ea <USBD_SetAddress+0x76>
 800b88e:	683b      	ldr	r3, [r7, #0]
 800b890:	885b      	ldrh	r3, [r3, #2]
 800b892:	2b7f      	cmp	r3, #127	; 0x7f
 800b894:	d829      	bhi.n	800b8ea <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800b896:	683b      	ldr	r3, [r7, #0]
 800b898:	885b      	ldrh	r3, [r3, #2]
 800b89a:	b2db      	uxtb	r3, r3
 800b89c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b8a0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b8a8:	b2db      	uxtb	r3, r3
 800b8aa:	2b03      	cmp	r3, #3
 800b8ac:	d104      	bne.n	800b8b8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800b8ae:	6839      	ldr	r1, [r7, #0]
 800b8b0:	6878      	ldr	r0, [r7, #4]
 800b8b2:	f000 f9bc 	bl	800bc2e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b8b6:	e01d      	b.n	800b8f4 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	7bfa      	ldrb	r2, [r7, #15]
 800b8bc:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800b8c0:	7bfb      	ldrb	r3, [r7, #15]
 800b8c2:	4619      	mov	r1, r3
 800b8c4:	6878      	ldr	r0, [r7, #4]
 800b8c6:	f000 fee7 	bl	800c698 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800b8ca:	6878      	ldr	r0, [r7, #4]
 800b8cc:	f000 fa5d 	bl	800bd8a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800b8d0:	7bfb      	ldrb	r3, [r7, #15]
 800b8d2:	2b00      	cmp	r3, #0
 800b8d4:	d004      	beq.n	800b8e0 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	2202      	movs	r2, #2
 800b8da:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b8de:	e009      	b.n	800b8f4 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	2201      	movs	r2, #1
 800b8e4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b8e8:	e004      	b.n	800b8f4 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800b8ea:	6839      	ldr	r1, [r7, #0]
 800b8ec:	6878      	ldr	r0, [r7, #4]
 800b8ee:	f000 f99e 	bl	800bc2e <USBD_CtlError>
  }
}
 800b8f2:	bf00      	nop
 800b8f4:	bf00      	nop
 800b8f6:	3710      	adds	r7, #16
 800b8f8:	46bd      	mov	sp, r7
 800b8fa:	bd80      	pop	{r7, pc}

0800b8fc <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b8fc:	b580      	push	{r7, lr}
 800b8fe:	b084      	sub	sp, #16
 800b900:	af00      	add	r7, sp, #0
 800b902:	6078      	str	r0, [r7, #4]
 800b904:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b906:	2300      	movs	r3, #0
 800b908:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800b90a:	683b      	ldr	r3, [r7, #0]
 800b90c:	885b      	ldrh	r3, [r3, #2]
 800b90e:	b2da      	uxtb	r2, r3
 800b910:	4b4e      	ldr	r3, [pc, #312]	; (800ba4c <USBD_SetConfig+0x150>)
 800b912:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800b914:	4b4d      	ldr	r3, [pc, #308]	; (800ba4c <USBD_SetConfig+0x150>)
 800b916:	781b      	ldrb	r3, [r3, #0]
 800b918:	2b01      	cmp	r3, #1
 800b91a:	d905      	bls.n	800b928 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800b91c:	6839      	ldr	r1, [r7, #0]
 800b91e:	6878      	ldr	r0, [r7, #4]
 800b920:	f000 f985 	bl	800bc2e <USBD_CtlError>
    return USBD_FAIL;
 800b924:	2303      	movs	r3, #3
 800b926:	e08c      	b.n	800ba42 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b92e:	b2db      	uxtb	r3, r3
 800b930:	2b02      	cmp	r3, #2
 800b932:	d002      	beq.n	800b93a <USBD_SetConfig+0x3e>
 800b934:	2b03      	cmp	r3, #3
 800b936:	d029      	beq.n	800b98c <USBD_SetConfig+0x90>
 800b938:	e075      	b.n	800ba26 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800b93a:	4b44      	ldr	r3, [pc, #272]	; (800ba4c <USBD_SetConfig+0x150>)
 800b93c:	781b      	ldrb	r3, [r3, #0]
 800b93e:	2b00      	cmp	r3, #0
 800b940:	d020      	beq.n	800b984 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800b942:	4b42      	ldr	r3, [pc, #264]	; (800ba4c <USBD_SetConfig+0x150>)
 800b944:	781b      	ldrb	r3, [r3, #0]
 800b946:	461a      	mov	r2, r3
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b94c:	4b3f      	ldr	r3, [pc, #252]	; (800ba4c <USBD_SetConfig+0x150>)
 800b94e:	781b      	ldrb	r3, [r3, #0]
 800b950:	4619      	mov	r1, r3
 800b952:	6878      	ldr	r0, [r7, #4]
 800b954:	f7fe ffe7 	bl	800a926 <USBD_SetClassConfig>
 800b958:	4603      	mov	r3, r0
 800b95a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800b95c:	7bfb      	ldrb	r3, [r7, #15]
 800b95e:	2b00      	cmp	r3, #0
 800b960:	d008      	beq.n	800b974 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800b962:	6839      	ldr	r1, [r7, #0]
 800b964:	6878      	ldr	r0, [r7, #4]
 800b966:	f000 f962 	bl	800bc2e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	2202      	movs	r2, #2
 800b96e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b972:	e065      	b.n	800ba40 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800b974:	6878      	ldr	r0, [r7, #4]
 800b976:	f000 fa08 	bl	800bd8a <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	2203      	movs	r2, #3
 800b97e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800b982:	e05d      	b.n	800ba40 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800b984:	6878      	ldr	r0, [r7, #4]
 800b986:	f000 fa00 	bl	800bd8a <USBD_CtlSendStatus>
      break;
 800b98a:	e059      	b.n	800ba40 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800b98c:	4b2f      	ldr	r3, [pc, #188]	; (800ba4c <USBD_SetConfig+0x150>)
 800b98e:	781b      	ldrb	r3, [r3, #0]
 800b990:	2b00      	cmp	r3, #0
 800b992:	d112      	bne.n	800b9ba <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	2202      	movs	r2, #2
 800b998:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800b99c:	4b2b      	ldr	r3, [pc, #172]	; (800ba4c <USBD_SetConfig+0x150>)
 800b99e:	781b      	ldrb	r3, [r3, #0]
 800b9a0:	461a      	mov	r2, r3
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b9a6:	4b29      	ldr	r3, [pc, #164]	; (800ba4c <USBD_SetConfig+0x150>)
 800b9a8:	781b      	ldrb	r3, [r3, #0]
 800b9aa:	4619      	mov	r1, r3
 800b9ac:	6878      	ldr	r0, [r7, #4]
 800b9ae:	f7fe ffd6 	bl	800a95e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800b9b2:	6878      	ldr	r0, [r7, #4]
 800b9b4:	f000 f9e9 	bl	800bd8a <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b9b8:	e042      	b.n	800ba40 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800b9ba:	4b24      	ldr	r3, [pc, #144]	; (800ba4c <USBD_SetConfig+0x150>)
 800b9bc:	781b      	ldrb	r3, [r3, #0]
 800b9be:	461a      	mov	r2, r3
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	685b      	ldr	r3, [r3, #4]
 800b9c4:	429a      	cmp	r2, r3
 800b9c6:	d02a      	beq.n	800ba1e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	685b      	ldr	r3, [r3, #4]
 800b9cc:	b2db      	uxtb	r3, r3
 800b9ce:	4619      	mov	r1, r3
 800b9d0:	6878      	ldr	r0, [r7, #4]
 800b9d2:	f7fe ffc4 	bl	800a95e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800b9d6:	4b1d      	ldr	r3, [pc, #116]	; (800ba4c <USBD_SetConfig+0x150>)
 800b9d8:	781b      	ldrb	r3, [r3, #0]
 800b9da:	461a      	mov	r2, r3
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b9e0:	4b1a      	ldr	r3, [pc, #104]	; (800ba4c <USBD_SetConfig+0x150>)
 800b9e2:	781b      	ldrb	r3, [r3, #0]
 800b9e4:	4619      	mov	r1, r3
 800b9e6:	6878      	ldr	r0, [r7, #4]
 800b9e8:	f7fe ff9d 	bl	800a926 <USBD_SetClassConfig>
 800b9ec:	4603      	mov	r3, r0
 800b9ee:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800b9f0:	7bfb      	ldrb	r3, [r7, #15]
 800b9f2:	2b00      	cmp	r3, #0
 800b9f4:	d00f      	beq.n	800ba16 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800b9f6:	6839      	ldr	r1, [r7, #0]
 800b9f8:	6878      	ldr	r0, [r7, #4]
 800b9fa:	f000 f918 	bl	800bc2e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	685b      	ldr	r3, [r3, #4]
 800ba02:	b2db      	uxtb	r3, r3
 800ba04:	4619      	mov	r1, r3
 800ba06:	6878      	ldr	r0, [r7, #4]
 800ba08:	f7fe ffa9 	bl	800a95e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	2202      	movs	r2, #2
 800ba10:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800ba14:	e014      	b.n	800ba40 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800ba16:	6878      	ldr	r0, [r7, #4]
 800ba18:	f000 f9b7 	bl	800bd8a <USBD_CtlSendStatus>
      break;
 800ba1c:	e010      	b.n	800ba40 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800ba1e:	6878      	ldr	r0, [r7, #4]
 800ba20:	f000 f9b3 	bl	800bd8a <USBD_CtlSendStatus>
      break;
 800ba24:	e00c      	b.n	800ba40 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800ba26:	6839      	ldr	r1, [r7, #0]
 800ba28:	6878      	ldr	r0, [r7, #4]
 800ba2a:	f000 f900 	bl	800bc2e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800ba2e:	4b07      	ldr	r3, [pc, #28]	; (800ba4c <USBD_SetConfig+0x150>)
 800ba30:	781b      	ldrb	r3, [r3, #0]
 800ba32:	4619      	mov	r1, r3
 800ba34:	6878      	ldr	r0, [r7, #4]
 800ba36:	f7fe ff92 	bl	800a95e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800ba3a:	2303      	movs	r3, #3
 800ba3c:	73fb      	strb	r3, [r7, #15]
      break;
 800ba3e:	bf00      	nop
  }

  return ret;
 800ba40:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba42:	4618      	mov	r0, r3
 800ba44:	3710      	adds	r7, #16
 800ba46:	46bd      	mov	sp, r7
 800ba48:	bd80      	pop	{r7, pc}
 800ba4a:	bf00      	nop
 800ba4c:	2000128c 	.word	0x2000128c

0800ba50 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ba50:	b580      	push	{r7, lr}
 800ba52:	b082      	sub	sp, #8
 800ba54:	af00      	add	r7, sp, #0
 800ba56:	6078      	str	r0, [r7, #4]
 800ba58:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800ba5a:	683b      	ldr	r3, [r7, #0]
 800ba5c:	88db      	ldrh	r3, [r3, #6]
 800ba5e:	2b01      	cmp	r3, #1
 800ba60:	d004      	beq.n	800ba6c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800ba62:	6839      	ldr	r1, [r7, #0]
 800ba64:	6878      	ldr	r0, [r7, #4]
 800ba66:	f000 f8e2 	bl	800bc2e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800ba6a:	e023      	b.n	800bab4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ba72:	b2db      	uxtb	r3, r3
 800ba74:	2b02      	cmp	r3, #2
 800ba76:	dc02      	bgt.n	800ba7e <USBD_GetConfig+0x2e>
 800ba78:	2b00      	cmp	r3, #0
 800ba7a:	dc03      	bgt.n	800ba84 <USBD_GetConfig+0x34>
 800ba7c:	e015      	b.n	800baaa <USBD_GetConfig+0x5a>
 800ba7e:	2b03      	cmp	r3, #3
 800ba80:	d00b      	beq.n	800ba9a <USBD_GetConfig+0x4a>
 800ba82:	e012      	b.n	800baaa <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	2200      	movs	r2, #0
 800ba88:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	3308      	adds	r3, #8
 800ba8e:	2201      	movs	r2, #1
 800ba90:	4619      	mov	r1, r3
 800ba92:	6878      	ldr	r0, [r7, #4]
 800ba94:	f000 f93c 	bl	800bd10 <USBD_CtlSendData>
        break;
 800ba98:	e00c      	b.n	800bab4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	3304      	adds	r3, #4
 800ba9e:	2201      	movs	r2, #1
 800baa0:	4619      	mov	r1, r3
 800baa2:	6878      	ldr	r0, [r7, #4]
 800baa4:	f000 f934 	bl	800bd10 <USBD_CtlSendData>
        break;
 800baa8:	e004      	b.n	800bab4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800baaa:	6839      	ldr	r1, [r7, #0]
 800baac:	6878      	ldr	r0, [r7, #4]
 800baae:	f000 f8be 	bl	800bc2e <USBD_CtlError>
        break;
 800bab2:	bf00      	nop
}
 800bab4:	bf00      	nop
 800bab6:	3708      	adds	r7, #8
 800bab8:	46bd      	mov	sp, r7
 800baba:	bd80      	pop	{r7, pc}

0800babc <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800babc:	b580      	push	{r7, lr}
 800babe:	b082      	sub	sp, #8
 800bac0:	af00      	add	r7, sp, #0
 800bac2:	6078      	str	r0, [r7, #4]
 800bac4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bacc:	b2db      	uxtb	r3, r3
 800bace:	3b01      	subs	r3, #1
 800bad0:	2b02      	cmp	r3, #2
 800bad2:	d81e      	bhi.n	800bb12 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800bad4:	683b      	ldr	r3, [r7, #0]
 800bad6:	88db      	ldrh	r3, [r3, #6]
 800bad8:	2b02      	cmp	r3, #2
 800bada:	d004      	beq.n	800bae6 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800badc:	6839      	ldr	r1, [r7, #0]
 800bade:	6878      	ldr	r0, [r7, #4]
 800bae0:	f000 f8a5 	bl	800bc2e <USBD_CtlError>
        break;
 800bae4:	e01a      	b.n	800bb1c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	2201      	movs	r2, #1
 800baea:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800baf2:	2b00      	cmp	r3, #0
 800baf4:	d005      	beq.n	800bb02 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	68db      	ldr	r3, [r3, #12]
 800bafa:	f043 0202 	orr.w	r2, r3, #2
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	330c      	adds	r3, #12
 800bb06:	2202      	movs	r2, #2
 800bb08:	4619      	mov	r1, r3
 800bb0a:	6878      	ldr	r0, [r7, #4]
 800bb0c:	f000 f900 	bl	800bd10 <USBD_CtlSendData>
      break;
 800bb10:	e004      	b.n	800bb1c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800bb12:	6839      	ldr	r1, [r7, #0]
 800bb14:	6878      	ldr	r0, [r7, #4]
 800bb16:	f000 f88a 	bl	800bc2e <USBD_CtlError>
      break;
 800bb1a:	bf00      	nop
  }
}
 800bb1c:	bf00      	nop
 800bb1e:	3708      	adds	r7, #8
 800bb20:	46bd      	mov	sp, r7
 800bb22:	bd80      	pop	{r7, pc}

0800bb24 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bb24:	b580      	push	{r7, lr}
 800bb26:	b082      	sub	sp, #8
 800bb28:	af00      	add	r7, sp, #0
 800bb2a:	6078      	str	r0, [r7, #4]
 800bb2c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800bb2e:	683b      	ldr	r3, [r7, #0]
 800bb30:	885b      	ldrh	r3, [r3, #2]
 800bb32:	2b01      	cmp	r3, #1
 800bb34:	d107      	bne.n	800bb46 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	2201      	movs	r2, #1
 800bb3a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800bb3e:	6878      	ldr	r0, [r7, #4]
 800bb40:	f000 f923 	bl	800bd8a <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800bb44:	e013      	b.n	800bb6e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800bb46:	683b      	ldr	r3, [r7, #0]
 800bb48:	885b      	ldrh	r3, [r3, #2]
 800bb4a:	2b02      	cmp	r3, #2
 800bb4c:	d10b      	bne.n	800bb66 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800bb4e:	683b      	ldr	r3, [r7, #0]
 800bb50:	889b      	ldrh	r3, [r3, #4]
 800bb52:	0a1b      	lsrs	r3, r3, #8
 800bb54:	b29b      	uxth	r3, r3
 800bb56:	b2da      	uxtb	r2, r3
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800bb5e:	6878      	ldr	r0, [r7, #4]
 800bb60:	f000 f913 	bl	800bd8a <USBD_CtlSendStatus>
}
 800bb64:	e003      	b.n	800bb6e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800bb66:	6839      	ldr	r1, [r7, #0]
 800bb68:	6878      	ldr	r0, [r7, #4]
 800bb6a:	f000 f860 	bl	800bc2e <USBD_CtlError>
}
 800bb6e:	bf00      	nop
 800bb70:	3708      	adds	r7, #8
 800bb72:	46bd      	mov	sp, r7
 800bb74:	bd80      	pop	{r7, pc}

0800bb76 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bb76:	b580      	push	{r7, lr}
 800bb78:	b082      	sub	sp, #8
 800bb7a:	af00      	add	r7, sp, #0
 800bb7c:	6078      	str	r0, [r7, #4]
 800bb7e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bb86:	b2db      	uxtb	r3, r3
 800bb88:	3b01      	subs	r3, #1
 800bb8a:	2b02      	cmp	r3, #2
 800bb8c:	d80b      	bhi.n	800bba6 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800bb8e:	683b      	ldr	r3, [r7, #0]
 800bb90:	885b      	ldrh	r3, [r3, #2]
 800bb92:	2b01      	cmp	r3, #1
 800bb94:	d10c      	bne.n	800bbb0 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	2200      	movs	r2, #0
 800bb9a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800bb9e:	6878      	ldr	r0, [r7, #4]
 800bba0:	f000 f8f3 	bl	800bd8a <USBD_CtlSendStatus>
      }
      break;
 800bba4:	e004      	b.n	800bbb0 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800bba6:	6839      	ldr	r1, [r7, #0]
 800bba8:	6878      	ldr	r0, [r7, #4]
 800bbaa:	f000 f840 	bl	800bc2e <USBD_CtlError>
      break;
 800bbae:	e000      	b.n	800bbb2 <USBD_ClrFeature+0x3c>
      break;
 800bbb0:	bf00      	nop
  }
}
 800bbb2:	bf00      	nop
 800bbb4:	3708      	adds	r7, #8
 800bbb6:	46bd      	mov	sp, r7
 800bbb8:	bd80      	pop	{r7, pc}

0800bbba <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800bbba:	b580      	push	{r7, lr}
 800bbbc:	b084      	sub	sp, #16
 800bbbe:	af00      	add	r7, sp, #0
 800bbc0:	6078      	str	r0, [r7, #4]
 800bbc2:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800bbc4:	683b      	ldr	r3, [r7, #0]
 800bbc6:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800bbc8:	68fb      	ldr	r3, [r7, #12]
 800bbca:	781a      	ldrb	r2, [r3, #0]
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800bbd0:	68fb      	ldr	r3, [r7, #12]
 800bbd2:	3301      	adds	r3, #1
 800bbd4:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800bbd6:	68fb      	ldr	r3, [r7, #12]
 800bbd8:	781a      	ldrb	r2, [r3, #0]
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800bbde:	68fb      	ldr	r3, [r7, #12]
 800bbe0:	3301      	adds	r3, #1
 800bbe2:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800bbe4:	68f8      	ldr	r0, [r7, #12]
 800bbe6:	f7ff fa41 	bl	800b06c <SWAPBYTE>
 800bbea:	4603      	mov	r3, r0
 800bbec:	461a      	mov	r2, r3
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800bbf2:	68fb      	ldr	r3, [r7, #12]
 800bbf4:	3301      	adds	r3, #1
 800bbf6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800bbf8:	68fb      	ldr	r3, [r7, #12]
 800bbfa:	3301      	adds	r3, #1
 800bbfc:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800bbfe:	68f8      	ldr	r0, [r7, #12]
 800bc00:	f7ff fa34 	bl	800b06c <SWAPBYTE>
 800bc04:	4603      	mov	r3, r0
 800bc06:	461a      	mov	r2, r3
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800bc0c:	68fb      	ldr	r3, [r7, #12]
 800bc0e:	3301      	adds	r3, #1
 800bc10:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800bc12:	68fb      	ldr	r3, [r7, #12]
 800bc14:	3301      	adds	r3, #1
 800bc16:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800bc18:	68f8      	ldr	r0, [r7, #12]
 800bc1a:	f7ff fa27 	bl	800b06c <SWAPBYTE>
 800bc1e:	4603      	mov	r3, r0
 800bc20:	461a      	mov	r2, r3
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	80da      	strh	r2, [r3, #6]
}
 800bc26:	bf00      	nop
 800bc28:	3710      	adds	r7, #16
 800bc2a:	46bd      	mov	sp, r7
 800bc2c:	bd80      	pop	{r7, pc}

0800bc2e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bc2e:	b580      	push	{r7, lr}
 800bc30:	b082      	sub	sp, #8
 800bc32:	af00      	add	r7, sp, #0
 800bc34:	6078      	str	r0, [r7, #4]
 800bc36:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800bc38:	2180      	movs	r1, #128	; 0x80
 800bc3a:	6878      	ldr	r0, [r7, #4]
 800bc3c:	f000 fcc2 	bl	800c5c4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800bc40:	2100      	movs	r1, #0
 800bc42:	6878      	ldr	r0, [r7, #4]
 800bc44:	f000 fcbe 	bl	800c5c4 <USBD_LL_StallEP>
}
 800bc48:	bf00      	nop
 800bc4a:	3708      	adds	r7, #8
 800bc4c:	46bd      	mov	sp, r7
 800bc4e:	bd80      	pop	{r7, pc}

0800bc50 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800bc50:	b580      	push	{r7, lr}
 800bc52:	b086      	sub	sp, #24
 800bc54:	af00      	add	r7, sp, #0
 800bc56:	60f8      	str	r0, [r7, #12]
 800bc58:	60b9      	str	r1, [r7, #8]
 800bc5a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800bc5c:	2300      	movs	r3, #0
 800bc5e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800bc60:	68fb      	ldr	r3, [r7, #12]
 800bc62:	2b00      	cmp	r3, #0
 800bc64:	d036      	beq.n	800bcd4 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800bc66:	68fb      	ldr	r3, [r7, #12]
 800bc68:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800bc6a:	6938      	ldr	r0, [r7, #16]
 800bc6c:	f000 f836 	bl	800bcdc <USBD_GetLen>
 800bc70:	4603      	mov	r3, r0
 800bc72:	3301      	adds	r3, #1
 800bc74:	b29b      	uxth	r3, r3
 800bc76:	005b      	lsls	r3, r3, #1
 800bc78:	b29a      	uxth	r2, r3
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800bc7e:	7dfb      	ldrb	r3, [r7, #23]
 800bc80:	68ba      	ldr	r2, [r7, #8]
 800bc82:	4413      	add	r3, r2
 800bc84:	687a      	ldr	r2, [r7, #4]
 800bc86:	7812      	ldrb	r2, [r2, #0]
 800bc88:	701a      	strb	r2, [r3, #0]
  idx++;
 800bc8a:	7dfb      	ldrb	r3, [r7, #23]
 800bc8c:	3301      	adds	r3, #1
 800bc8e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800bc90:	7dfb      	ldrb	r3, [r7, #23]
 800bc92:	68ba      	ldr	r2, [r7, #8]
 800bc94:	4413      	add	r3, r2
 800bc96:	2203      	movs	r2, #3
 800bc98:	701a      	strb	r2, [r3, #0]
  idx++;
 800bc9a:	7dfb      	ldrb	r3, [r7, #23]
 800bc9c:	3301      	adds	r3, #1
 800bc9e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800bca0:	e013      	b.n	800bcca <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800bca2:	7dfb      	ldrb	r3, [r7, #23]
 800bca4:	68ba      	ldr	r2, [r7, #8]
 800bca6:	4413      	add	r3, r2
 800bca8:	693a      	ldr	r2, [r7, #16]
 800bcaa:	7812      	ldrb	r2, [r2, #0]
 800bcac:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800bcae:	693b      	ldr	r3, [r7, #16]
 800bcb0:	3301      	adds	r3, #1
 800bcb2:	613b      	str	r3, [r7, #16]
    idx++;
 800bcb4:	7dfb      	ldrb	r3, [r7, #23]
 800bcb6:	3301      	adds	r3, #1
 800bcb8:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800bcba:	7dfb      	ldrb	r3, [r7, #23]
 800bcbc:	68ba      	ldr	r2, [r7, #8]
 800bcbe:	4413      	add	r3, r2
 800bcc0:	2200      	movs	r2, #0
 800bcc2:	701a      	strb	r2, [r3, #0]
    idx++;
 800bcc4:	7dfb      	ldrb	r3, [r7, #23]
 800bcc6:	3301      	adds	r3, #1
 800bcc8:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800bcca:	693b      	ldr	r3, [r7, #16]
 800bccc:	781b      	ldrb	r3, [r3, #0]
 800bcce:	2b00      	cmp	r3, #0
 800bcd0:	d1e7      	bne.n	800bca2 <USBD_GetString+0x52>
 800bcd2:	e000      	b.n	800bcd6 <USBD_GetString+0x86>
    return;
 800bcd4:	bf00      	nop
  }
}
 800bcd6:	3718      	adds	r7, #24
 800bcd8:	46bd      	mov	sp, r7
 800bcda:	bd80      	pop	{r7, pc}

0800bcdc <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800bcdc:	b480      	push	{r7}
 800bcde:	b085      	sub	sp, #20
 800bce0:	af00      	add	r7, sp, #0
 800bce2:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800bce4:	2300      	movs	r3, #0
 800bce6:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800bcec:	e005      	b.n	800bcfa <USBD_GetLen+0x1e>
  {
    len++;
 800bcee:	7bfb      	ldrb	r3, [r7, #15]
 800bcf0:	3301      	adds	r3, #1
 800bcf2:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800bcf4:	68bb      	ldr	r3, [r7, #8]
 800bcf6:	3301      	adds	r3, #1
 800bcf8:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800bcfa:	68bb      	ldr	r3, [r7, #8]
 800bcfc:	781b      	ldrb	r3, [r3, #0]
 800bcfe:	2b00      	cmp	r3, #0
 800bd00:	d1f5      	bne.n	800bcee <USBD_GetLen+0x12>
  }

  return len;
 800bd02:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd04:	4618      	mov	r0, r3
 800bd06:	3714      	adds	r7, #20
 800bd08:	46bd      	mov	sp, r7
 800bd0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd0e:	4770      	bx	lr

0800bd10 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800bd10:	b580      	push	{r7, lr}
 800bd12:	b084      	sub	sp, #16
 800bd14:	af00      	add	r7, sp, #0
 800bd16:	60f8      	str	r0, [r7, #12]
 800bd18:	60b9      	str	r1, [r7, #8]
 800bd1a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800bd1c:	68fb      	ldr	r3, [r7, #12]
 800bd1e:	2202      	movs	r2, #2
 800bd20:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800bd24:	68fb      	ldr	r3, [r7, #12]
 800bd26:	687a      	ldr	r2, [r7, #4]
 800bd28:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800bd2a:	68fb      	ldr	r3, [r7, #12]
 800bd2c:	687a      	ldr	r2, [r7, #4]
 800bd2e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	68ba      	ldr	r2, [r7, #8]
 800bd34:	2100      	movs	r1, #0
 800bd36:	68f8      	ldr	r0, [r7, #12]
 800bd38:	f000 fccd 	bl	800c6d6 <USBD_LL_Transmit>

  return USBD_OK;
 800bd3c:	2300      	movs	r3, #0
}
 800bd3e:	4618      	mov	r0, r3
 800bd40:	3710      	adds	r7, #16
 800bd42:	46bd      	mov	sp, r7
 800bd44:	bd80      	pop	{r7, pc}

0800bd46 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800bd46:	b580      	push	{r7, lr}
 800bd48:	b084      	sub	sp, #16
 800bd4a:	af00      	add	r7, sp, #0
 800bd4c:	60f8      	str	r0, [r7, #12]
 800bd4e:	60b9      	str	r1, [r7, #8]
 800bd50:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	68ba      	ldr	r2, [r7, #8]
 800bd56:	2100      	movs	r1, #0
 800bd58:	68f8      	ldr	r0, [r7, #12]
 800bd5a:	f000 fcbc 	bl	800c6d6 <USBD_LL_Transmit>

  return USBD_OK;
 800bd5e:	2300      	movs	r3, #0
}
 800bd60:	4618      	mov	r0, r3
 800bd62:	3710      	adds	r7, #16
 800bd64:	46bd      	mov	sp, r7
 800bd66:	bd80      	pop	{r7, pc}

0800bd68 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800bd68:	b580      	push	{r7, lr}
 800bd6a:	b084      	sub	sp, #16
 800bd6c:	af00      	add	r7, sp, #0
 800bd6e:	60f8      	str	r0, [r7, #12]
 800bd70:	60b9      	str	r1, [r7, #8]
 800bd72:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	68ba      	ldr	r2, [r7, #8]
 800bd78:	2100      	movs	r1, #0
 800bd7a:	68f8      	ldr	r0, [r7, #12]
 800bd7c:	f000 fccc 	bl	800c718 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800bd80:	2300      	movs	r3, #0
}
 800bd82:	4618      	mov	r0, r3
 800bd84:	3710      	adds	r7, #16
 800bd86:	46bd      	mov	sp, r7
 800bd88:	bd80      	pop	{r7, pc}

0800bd8a <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800bd8a:	b580      	push	{r7, lr}
 800bd8c:	b082      	sub	sp, #8
 800bd8e:	af00      	add	r7, sp, #0
 800bd90:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	2204      	movs	r2, #4
 800bd96:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800bd9a:	2300      	movs	r3, #0
 800bd9c:	2200      	movs	r2, #0
 800bd9e:	2100      	movs	r1, #0
 800bda0:	6878      	ldr	r0, [r7, #4]
 800bda2:	f000 fc98 	bl	800c6d6 <USBD_LL_Transmit>

  return USBD_OK;
 800bda6:	2300      	movs	r3, #0
}
 800bda8:	4618      	mov	r0, r3
 800bdaa:	3708      	adds	r7, #8
 800bdac:	46bd      	mov	sp, r7
 800bdae:	bd80      	pop	{r7, pc}

0800bdb0 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800bdb0:	b580      	push	{r7, lr}
 800bdb2:	b082      	sub	sp, #8
 800bdb4:	af00      	add	r7, sp, #0
 800bdb6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	2205      	movs	r2, #5
 800bdbc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bdc0:	2300      	movs	r3, #0
 800bdc2:	2200      	movs	r2, #0
 800bdc4:	2100      	movs	r1, #0
 800bdc6:	6878      	ldr	r0, [r7, #4]
 800bdc8:	f000 fca6 	bl	800c718 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800bdcc:	2300      	movs	r3, #0
}
 800bdce:	4618      	mov	r0, r3
 800bdd0:	3708      	adds	r7, #8
 800bdd2:	46bd      	mov	sp, r7
 800bdd4:	bd80      	pop	{r7, pc}
	...

0800bdd8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800bdd8:	b580      	push	{r7, lr}
 800bdda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800bddc:	2200      	movs	r2, #0
 800bdde:	4912      	ldr	r1, [pc, #72]	; (800be28 <MX_USB_DEVICE_Init+0x50>)
 800bde0:	4812      	ldr	r0, [pc, #72]	; (800be2c <MX_USB_DEVICE_Init+0x54>)
 800bde2:	f7fe fd08 	bl	800a7f6 <USBD_Init>
 800bde6:	4603      	mov	r3, r0
 800bde8:	2b00      	cmp	r3, #0
 800bdea:	d001      	beq.n	800bdf0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800bdec:	f7f5 fd6c 	bl	80018c8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_MSC) != USBD_OK)
 800bdf0:	490f      	ldr	r1, [pc, #60]	; (800be30 <MX_USB_DEVICE_Init+0x58>)
 800bdf2:	480e      	ldr	r0, [pc, #56]	; (800be2c <MX_USB_DEVICE_Init+0x54>)
 800bdf4:	f7fe fd2f 	bl	800a856 <USBD_RegisterClass>
 800bdf8:	4603      	mov	r3, r0
 800bdfa:	2b00      	cmp	r3, #0
 800bdfc:	d001      	beq.n	800be02 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800bdfe:	f7f5 fd63 	bl	80018c8 <Error_Handler>
  }
  if (USBD_MSC_RegisterStorage(&hUsbDeviceFS, &USBD_Storage_Interface_fops_FS) != USBD_OK)
 800be02:	490c      	ldr	r1, [pc, #48]	; (800be34 <MX_USB_DEVICE_Init+0x5c>)
 800be04:	4809      	ldr	r0, [pc, #36]	; (800be2c <MX_USB_DEVICE_Init+0x54>)
 800be06:	f7fc fef9 	bl	8008bfc <USBD_MSC_RegisterStorage>
 800be0a:	4603      	mov	r3, r0
 800be0c:	2b00      	cmp	r3, #0
 800be0e:	d001      	beq.n	800be14 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800be10:	f7f5 fd5a 	bl	80018c8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800be14:	4805      	ldr	r0, [pc, #20]	; (800be2c <MX_USB_DEVICE_Init+0x54>)
 800be16:	f7fe fd54 	bl	800a8c2 <USBD_Start>
 800be1a:	4603      	mov	r3, r0
 800be1c:	2b00      	cmp	r3, #0
 800be1e:	d001      	beq.n	800be24 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800be20:	f7f5 fd52 	bl	80018c8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800be24:	bf00      	nop
 800be26:	bd80      	pop	{r7, pc}
 800be28:	200000b8 	.word	0x200000b8
 800be2c:	20001290 	.word	0x20001290
 800be30:	20000010 	.word	0x20000010
 800be34:	20000108 	.word	0x20000108

0800be38 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800be38:	b480      	push	{r7}
 800be3a:	b083      	sub	sp, #12
 800be3c:	af00      	add	r7, sp, #0
 800be3e:	4603      	mov	r3, r0
 800be40:	6039      	str	r1, [r7, #0]
 800be42:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800be44:	683b      	ldr	r3, [r7, #0]
 800be46:	2212      	movs	r2, #18
 800be48:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800be4a:	4b03      	ldr	r3, [pc, #12]	; (800be58 <USBD_FS_DeviceDescriptor+0x20>)
}
 800be4c:	4618      	mov	r0, r3
 800be4e:	370c      	adds	r7, #12
 800be50:	46bd      	mov	sp, r7
 800be52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be56:	4770      	bx	lr
 800be58:	200000d4 	.word	0x200000d4

0800be5c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800be5c:	b480      	push	{r7}
 800be5e:	b083      	sub	sp, #12
 800be60:	af00      	add	r7, sp, #0
 800be62:	4603      	mov	r3, r0
 800be64:	6039      	str	r1, [r7, #0]
 800be66:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800be68:	683b      	ldr	r3, [r7, #0]
 800be6a:	2204      	movs	r2, #4
 800be6c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800be6e:	4b03      	ldr	r3, [pc, #12]	; (800be7c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800be70:	4618      	mov	r0, r3
 800be72:	370c      	adds	r7, #12
 800be74:	46bd      	mov	sp, r7
 800be76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be7a:	4770      	bx	lr
 800be7c:	200000e8 	.word	0x200000e8

0800be80 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800be80:	b580      	push	{r7, lr}
 800be82:	b082      	sub	sp, #8
 800be84:	af00      	add	r7, sp, #0
 800be86:	4603      	mov	r3, r0
 800be88:	6039      	str	r1, [r7, #0]
 800be8a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800be8c:	79fb      	ldrb	r3, [r7, #7]
 800be8e:	2b00      	cmp	r3, #0
 800be90:	d105      	bne.n	800be9e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800be92:	683a      	ldr	r2, [r7, #0]
 800be94:	4907      	ldr	r1, [pc, #28]	; (800beb4 <USBD_FS_ProductStrDescriptor+0x34>)
 800be96:	4808      	ldr	r0, [pc, #32]	; (800beb8 <USBD_FS_ProductStrDescriptor+0x38>)
 800be98:	f7ff feda 	bl	800bc50 <USBD_GetString>
 800be9c:	e004      	b.n	800bea8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800be9e:	683a      	ldr	r2, [r7, #0]
 800bea0:	4904      	ldr	r1, [pc, #16]	; (800beb4 <USBD_FS_ProductStrDescriptor+0x34>)
 800bea2:	4805      	ldr	r0, [pc, #20]	; (800beb8 <USBD_FS_ProductStrDescriptor+0x38>)
 800bea4:	f7ff fed4 	bl	800bc50 <USBD_GetString>
  }
  return USBD_StrDesc;
 800bea8:	4b02      	ldr	r3, [pc, #8]	; (800beb4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800beaa:	4618      	mov	r0, r3
 800beac:	3708      	adds	r7, #8
 800beae:	46bd      	mov	sp, r7
 800beb0:	bd80      	pop	{r7, pc}
 800beb2:	bf00      	nop
 800beb4:	2000156c 	.word	0x2000156c
 800beb8:	0800c878 	.word	0x0800c878

0800bebc <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bebc:	b580      	push	{r7, lr}
 800bebe:	b082      	sub	sp, #8
 800bec0:	af00      	add	r7, sp, #0
 800bec2:	4603      	mov	r3, r0
 800bec4:	6039      	str	r1, [r7, #0]
 800bec6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800bec8:	683a      	ldr	r2, [r7, #0]
 800beca:	4904      	ldr	r1, [pc, #16]	; (800bedc <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800becc:	4804      	ldr	r0, [pc, #16]	; (800bee0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800bece:	f7ff febf 	bl	800bc50 <USBD_GetString>
  return USBD_StrDesc;
 800bed2:	4b02      	ldr	r3, [pc, #8]	; (800bedc <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800bed4:	4618      	mov	r0, r3
 800bed6:	3708      	adds	r7, #8
 800bed8:	46bd      	mov	sp, r7
 800beda:	bd80      	pop	{r7, pc}
 800bedc:	2000156c 	.word	0x2000156c
 800bee0:	0800c884 	.word	0x0800c884

0800bee4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bee4:	b580      	push	{r7, lr}
 800bee6:	b082      	sub	sp, #8
 800bee8:	af00      	add	r7, sp, #0
 800beea:	4603      	mov	r3, r0
 800beec:	6039      	str	r1, [r7, #0]
 800beee:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800bef0:	683b      	ldr	r3, [r7, #0]
 800bef2:	221a      	movs	r2, #26
 800bef4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800bef6:	f000 f843 	bl	800bf80 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800befa:	4b02      	ldr	r3, [pc, #8]	; (800bf04 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800befc:	4618      	mov	r0, r3
 800befe:	3708      	adds	r7, #8
 800bf00:	46bd      	mov	sp, r7
 800bf02:	bd80      	pop	{r7, pc}
 800bf04:	200000ec 	.word	0x200000ec

0800bf08 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bf08:	b580      	push	{r7, lr}
 800bf0a:	b082      	sub	sp, #8
 800bf0c:	af00      	add	r7, sp, #0
 800bf0e:	4603      	mov	r3, r0
 800bf10:	6039      	str	r1, [r7, #0]
 800bf12:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800bf14:	79fb      	ldrb	r3, [r7, #7]
 800bf16:	2b00      	cmp	r3, #0
 800bf18:	d105      	bne.n	800bf26 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800bf1a:	683a      	ldr	r2, [r7, #0]
 800bf1c:	4907      	ldr	r1, [pc, #28]	; (800bf3c <USBD_FS_ConfigStrDescriptor+0x34>)
 800bf1e:	4808      	ldr	r0, [pc, #32]	; (800bf40 <USBD_FS_ConfigStrDescriptor+0x38>)
 800bf20:	f7ff fe96 	bl	800bc50 <USBD_GetString>
 800bf24:	e004      	b.n	800bf30 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800bf26:	683a      	ldr	r2, [r7, #0]
 800bf28:	4904      	ldr	r1, [pc, #16]	; (800bf3c <USBD_FS_ConfigStrDescriptor+0x34>)
 800bf2a:	4805      	ldr	r0, [pc, #20]	; (800bf40 <USBD_FS_ConfigStrDescriptor+0x38>)
 800bf2c:	f7ff fe90 	bl	800bc50 <USBD_GetString>
  }
  return USBD_StrDesc;
 800bf30:	4b02      	ldr	r3, [pc, #8]	; (800bf3c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800bf32:	4618      	mov	r0, r3
 800bf34:	3708      	adds	r7, #8
 800bf36:	46bd      	mov	sp, r7
 800bf38:	bd80      	pop	{r7, pc}
 800bf3a:	bf00      	nop
 800bf3c:	2000156c 	.word	0x2000156c
 800bf40:	0800c898 	.word	0x0800c898

0800bf44 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bf44:	b580      	push	{r7, lr}
 800bf46:	b082      	sub	sp, #8
 800bf48:	af00      	add	r7, sp, #0
 800bf4a:	4603      	mov	r3, r0
 800bf4c:	6039      	str	r1, [r7, #0]
 800bf4e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800bf50:	79fb      	ldrb	r3, [r7, #7]
 800bf52:	2b00      	cmp	r3, #0
 800bf54:	d105      	bne.n	800bf62 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800bf56:	683a      	ldr	r2, [r7, #0]
 800bf58:	4907      	ldr	r1, [pc, #28]	; (800bf78 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800bf5a:	4808      	ldr	r0, [pc, #32]	; (800bf7c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800bf5c:	f7ff fe78 	bl	800bc50 <USBD_GetString>
 800bf60:	e004      	b.n	800bf6c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800bf62:	683a      	ldr	r2, [r7, #0]
 800bf64:	4904      	ldr	r1, [pc, #16]	; (800bf78 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800bf66:	4805      	ldr	r0, [pc, #20]	; (800bf7c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800bf68:	f7ff fe72 	bl	800bc50 <USBD_GetString>
  }
  return USBD_StrDesc;
 800bf6c:	4b02      	ldr	r3, [pc, #8]	; (800bf78 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800bf6e:	4618      	mov	r0, r3
 800bf70:	3708      	adds	r7, #8
 800bf72:	46bd      	mov	sp, r7
 800bf74:	bd80      	pop	{r7, pc}
 800bf76:	bf00      	nop
 800bf78:	2000156c 	.word	0x2000156c
 800bf7c:	0800c8a4 	.word	0x0800c8a4

0800bf80 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800bf80:	b580      	push	{r7, lr}
 800bf82:	b084      	sub	sp, #16
 800bf84:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800bf86:	4b0f      	ldr	r3, [pc, #60]	; (800bfc4 <Get_SerialNum+0x44>)
 800bf88:	681b      	ldr	r3, [r3, #0]
 800bf8a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800bf8c:	4b0e      	ldr	r3, [pc, #56]	; (800bfc8 <Get_SerialNum+0x48>)
 800bf8e:	681b      	ldr	r3, [r3, #0]
 800bf90:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800bf92:	4b0e      	ldr	r3, [pc, #56]	; (800bfcc <Get_SerialNum+0x4c>)
 800bf94:	681b      	ldr	r3, [r3, #0]
 800bf96:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800bf98:	68fa      	ldr	r2, [r7, #12]
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	4413      	add	r3, r2
 800bf9e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800bfa0:	68fb      	ldr	r3, [r7, #12]
 800bfa2:	2b00      	cmp	r3, #0
 800bfa4:	d009      	beq.n	800bfba <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800bfa6:	2208      	movs	r2, #8
 800bfa8:	4909      	ldr	r1, [pc, #36]	; (800bfd0 <Get_SerialNum+0x50>)
 800bfaa:	68f8      	ldr	r0, [r7, #12]
 800bfac:	f000 f814 	bl	800bfd8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800bfb0:	2204      	movs	r2, #4
 800bfb2:	4908      	ldr	r1, [pc, #32]	; (800bfd4 <Get_SerialNum+0x54>)
 800bfb4:	68b8      	ldr	r0, [r7, #8]
 800bfb6:	f000 f80f 	bl	800bfd8 <IntToUnicode>
  }
}
 800bfba:	bf00      	nop
 800bfbc:	3710      	adds	r7, #16
 800bfbe:	46bd      	mov	sp, r7
 800bfc0:	bd80      	pop	{r7, pc}
 800bfc2:	bf00      	nop
 800bfc4:	1fff7a10 	.word	0x1fff7a10
 800bfc8:	1fff7a14 	.word	0x1fff7a14
 800bfcc:	1fff7a18 	.word	0x1fff7a18
 800bfd0:	200000ee 	.word	0x200000ee
 800bfd4:	200000fe 	.word	0x200000fe

0800bfd8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800bfd8:	b480      	push	{r7}
 800bfda:	b087      	sub	sp, #28
 800bfdc:	af00      	add	r7, sp, #0
 800bfde:	60f8      	str	r0, [r7, #12]
 800bfe0:	60b9      	str	r1, [r7, #8]
 800bfe2:	4613      	mov	r3, r2
 800bfe4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800bfe6:	2300      	movs	r3, #0
 800bfe8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800bfea:	2300      	movs	r3, #0
 800bfec:	75fb      	strb	r3, [r7, #23]
 800bfee:	e027      	b.n	800c040 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800bff0:	68fb      	ldr	r3, [r7, #12]
 800bff2:	0f1b      	lsrs	r3, r3, #28
 800bff4:	2b09      	cmp	r3, #9
 800bff6:	d80b      	bhi.n	800c010 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800bff8:	68fb      	ldr	r3, [r7, #12]
 800bffa:	0f1b      	lsrs	r3, r3, #28
 800bffc:	b2da      	uxtb	r2, r3
 800bffe:	7dfb      	ldrb	r3, [r7, #23]
 800c000:	005b      	lsls	r3, r3, #1
 800c002:	4619      	mov	r1, r3
 800c004:	68bb      	ldr	r3, [r7, #8]
 800c006:	440b      	add	r3, r1
 800c008:	3230      	adds	r2, #48	; 0x30
 800c00a:	b2d2      	uxtb	r2, r2
 800c00c:	701a      	strb	r2, [r3, #0]
 800c00e:	e00a      	b.n	800c026 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800c010:	68fb      	ldr	r3, [r7, #12]
 800c012:	0f1b      	lsrs	r3, r3, #28
 800c014:	b2da      	uxtb	r2, r3
 800c016:	7dfb      	ldrb	r3, [r7, #23]
 800c018:	005b      	lsls	r3, r3, #1
 800c01a:	4619      	mov	r1, r3
 800c01c:	68bb      	ldr	r3, [r7, #8]
 800c01e:	440b      	add	r3, r1
 800c020:	3237      	adds	r2, #55	; 0x37
 800c022:	b2d2      	uxtb	r2, r2
 800c024:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800c026:	68fb      	ldr	r3, [r7, #12]
 800c028:	011b      	lsls	r3, r3, #4
 800c02a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800c02c:	7dfb      	ldrb	r3, [r7, #23]
 800c02e:	005b      	lsls	r3, r3, #1
 800c030:	3301      	adds	r3, #1
 800c032:	68ba      	ldr	r2, [r7, #8]
 800c034:	4413      	add	r3, r2
 800c036:	2200      	movs	r2, #0
 800c038:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800c03a:	7dfb      	ldrb	r3, [r7, #23]
 800c03c:	3301      	adds	r3, #1
 800c03e:	75fb      	strb	r3, [r7, #23]
 800c040:	7dfa      	ldrb	r2, [r7, #23]
 800c042:	79fb      	ldrb	r3, [r7, #7]
 800c044:	429a      	cmp	r2, r3
 800c046:	d3d3      	bcc.n	800bff0 <IntToUnicode+0x18>
  }
}
 800c048:	bf00      	nop
 800c04a:	bf00      	nop
 800c04c:	371c      	adds	r7, #28
 800c04e:	46bd      	mov	sp, r7
 800c050:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c054:	4770      	bx	lr

0800c056 <STORAGE_Init_FS>:
  * @brief  Initializes the storage unit (medium) over USB FS IP
  * @param  lun: Logical unit number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Init_FS(uint8_t lun)
{
 800c056:	b480      	push	{r7}
 800c058:	b083      	sub	sp, #12
 800c05a:	af00      	add	r7, sp, #0
 800c05c:	4603      	mov	r3, r0
 800c05e:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 2 */
 UNUSED(lun);

  return (USBD_OK);
 800c060:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 800c062:	4618      	mov	r0, r3
 800c064:	370c      	adds	r7, #12
 800c066:	46bd      	mov	sp, r7
 800c068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c06c:	4770      	bx	lr

0800c06e <STORAGE_GetCapacity_FS>:
  * @param  block_num: Number of total block number.
  * @param  block_size: Block size.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_GetCapacity_FS(uint8_t lun, uint32_t *block_num, uint16_t *block_size)
{
 800c06e:	b480      	push	{r7}
 800c070:	b085      	sub	sp, #20
 800c072:	af00      	add	r7, sp, #0
 800c074:	4603      	mov	r3, r0
 800c076:	60b9      	str	r1, [r7, #8]
 800c078:	607a      	str	r2, [r7, #4]
 800c07a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 3 */
  UNUSED(lun);

  *block_num  = W25Q_SECTORS;
 800c07c:	68bb      	ldr	r3, [r7, #8]
 800c07e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800c082:	601a      	str	r2, [r3, #0]
  *block_size = W25Q_SECTOR_SIZE;
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800c08a:	801a      	strh	r2, [r3, #0]
  return (USBD_OK);
 800c08c:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800c08e:	4618      	mov	r0, r3
 800c090:	3714      	adds	r7, #20
 800c092:	46bd      	mov	sp, r7
 800c094:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c098:	4770      	bx	lr

0800c09a <STORAGE_IsReady_FS>:
  * @brief   Checks whether the medium is ready.
  * @param  lun:  Logical unit number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsReady_FS(uint8_t lun)
{
 800c09a:	b480      	push	{r7}
 800c09c:	b083      	sub	sp, #12
 800c09e:	af00      	add	r7, sp, #0
 800c0a0:	4603      	mov	r3, r0
 800c0a2:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 4 */
  UNUSED(lun);
  /*if(W25Q_Busy()){
    return (USBD_FAIL);
  }*/
  return (USBD_OK);
 800c0a4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800c0a6:	4618      	mov	r0, r3
 800c0a8:	370c      	adds	r7, #12
 800c0aa:	46bd      	mov	sp, r7
 800c0ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0b0:	4770      	bx	lr

0800c0b2 <STORAGE_IsWriteProtected_FS>:
  * @brief  Checks whether the medium is write protected.
  * @param  lun: Logical unit number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsWriteProtected_FS(uint8_t lun)
{
 800c0b2:	b480      	push	{r7}
 800c0b4:	b083      	sub	sp, #12
 800c0b6:	af00      	add	r7, sp, #0
 800c0b8:	4603      	mov	r3, r0
 800c0ba:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 5 */
  UNUSED(lun);

  return (USBD_OK);
 800c0bc:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800c0be:	4618      	mov	r0, r3
 800c0c0:	370c      	adds	r7, #12
 800c0c2:	46bd      	mov	sp, r7
 800c0c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0c8:	4770      	bx	lr

0800c0ca <STORAGE_Read_FS>:
  * @param  blk_addr: Logical block address.
  * @param  blk_len: Blocks number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Read_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 800c0ca:	b580      	push	{r7, lr}
 800c0cc:	b086      	sub	sp, #24
 800c0ce:	af00      	add	r7, sp, #0
 800c0d0:	60b9      	str	r1, [r7, #8]
 800c0d2:	607a      	str	r2, [r7, #4]
 800c0d4:	461a      	mov	r2, r3
 800c0d6:	4603      	mov	r3, r0
 800c0d8:	73fb      	strb	r3, [r7, #15]
 800c0da:	4613      	mov	r3, r2
 800c0dc:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 6 */
  UNUSED(lun);
  uint16_t i = 0;
 800c0de:	2300      	movs	r3, #0
 800c0e0:	82fb      	strh	r3, [r7, #22]
  while(i != blk_len){
 800c0e2:	e00f      	b.n	800c104 <STORAGE_Read_FS+0x3a>
	W25Q_Read_Sector(&buf[W25Q_SECTOR_SIZE * i], blk_addr + i);
 800c0e4:	8afb      	ldrh	r3, [r7, #22]
 800c0e6:	031b      	lsls	r3, r3, #12
 800c0e8:	461a      	mov	r2, r3
 800c0ea:	68bb      	ldr	r3, [r7, #8]
 800c0ec:	1898      	adds	r0, r3, r2
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	b29a      	uxth	r2, r3
 800c0f2:	8afb      	ldrh	r3, [r7, #22]
 800c0f4:	4413      	add	r3, r2
 800c0f6:	b29b      	uxth	r3, r3
 800c0f8:	4619      	mov	r1, r3
 800c0fa:	f7f5 f90e 	bl	800131a <W25Q_Read_Sector>
    i++;
 800c0fe:	8afb      	ldrh	r3, [r7, #22]
 800c100:	3301      	adds	r3, #1
 800c102:	82fb      	strh	r3, [r7, #22]
  while(i != blk_len){
 800c104:	8afa      	ldrh	r2, [r7, #22]
 800c106:	89bb      	ldrh	r3, [r7, #12]
 800c108:	429a      	cmp	r2, r3
 800c10a:	d1eb      	bne.n	800c0e4 <STORAGE_Read_FS+0x1a>
  }

  return (USBD_OK);
 800c10c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800c10e:	4618      	mov	r0, r3
 800c110:	3718      	adds	r7, #24
 800c112:	46bd      	mov	sp, r7
 800c114:	bd80      	pop	{r7, pc}

0800c116 <STORAGE_Write_FS>:
  * @param  blk_addr: Logical block address.
  * @param  blk_len: Blocks number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Write_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 800c116:	b580      	push	{r7, lr}
 800c118:	b086      	sub	sp, #24
 800c11a:	af00      	add	r7, sp, #0
 800c11c:	60b9      	str	r1, [r7, #8]
 800c11e:	607a      	str	r2, [r7, #4]
 800c120:	461a      	mov	r2, r3
 800c122:	4603      	mov	r3, r0
 800c124:	73fb      	strb	r3, [r7, #15]
 800c126:	4613      	mov	r3, r2
 800c128:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 7 */
  UNUSED(lun);

  uint16_t i = 0;
 800c12a:	2300      	movs	r3, #0
 800c12c:	82fb      	strh	r3, [r7, #22]
  while(i != blk_len){
 800c12e:	e015      	b.n	800c15c <STORAGE_Write_FS+0x46>
    W25Q_Erase_Sector(blk_addr + i);
 800c130:	8afa      	ldrh	r2, [r7, #22]
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	4413      	add	r3, r2
 800c136:	4618      	mov	r0, r3
 800c138:	f7f5 f86d 	bl	8001216 <W25Q_Erase_Sector>
	W25Q_Write_Sector(&buf[W25Q_SECTOR_SIZE * i], blk_addr + i);
 800c13c:	8afb      	ldrh	r3, [r7, #22]
 800c13e:	031b      	lsls	r3, r3, #12
 800c140:	461a      	mov	r2, r3
 800c142:	68bb      	ldr	r3, [r7, #8]
 800c144:	1898      	adds	r0, r3, r2
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	b29a      	uxth	r2, r3
 800c14a:	8afb      	ldrh	r3, [r7, #22]
 800c14c:	4413      	add	r3, r2
 800c14e:	b29b      	uxth	r3, r3
 800c150:	4619      	mov	r1, r3
 800c152:	f7f5 f895 	bl	8001280 <W25Q_Write_Sector>
    i++;
 800c156:	8afb      	ldrh	r3, [r7, #22]
 800c158:	3301      	adds	r3, #1
 800c15a:	82fb      	strh	r3, [r7, #22]
  while(i != blk_len){
 800c15c:	8afa      	ldrh	r2, [r7, #22]
 800c15e:	89bb      	ldrh	r3, [r7, #12]
 800c160:	429a      	cmp	r2, r3
 800c162:	d1e5      	bne.n	800c130 <STORAGE_Write_FS+0x1a>
  }

  return (USBD_OK);
 800c164:	2300      	movs	r3, #0
  /* USER CODE END 7 */
}
 800c166:	4618      	mov	r0, r3
 800c168:	3718      	adds	r7, #24
 800c16a:	46bd      	mov	sp, r7
 800c16c:	bd80      	pop	{r7, pc}

0800c16e <STORAGE_GetMaxLun_FS>:
  * @brief  Returns the Max Supported LUNs.
  * @param  None
  * @retval Lun(s) number.
  */
int8_t STORAGE_GetMaxLun_FS(void)
{
 800c16e:	b480      	push	{r7}
 800c170:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  return (STORAGE_LUN_NBR - 1);
 800c172:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 800c174:	4618      	mov	r0, r3
 800c176:	46bd      	mov	sp, r7
 800c178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c17c:	4770      	bx	lr
	...

0800c180 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800c180:	b580      	push	{r7, lr}
 800c182:	b08a      	sub	sp, #40	; 0x28
 800c184:	af00      	add	r7, sp, #0
 800c186:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c188:	f107 0314 	add.w	r3, r7, #20
 800c18c:	2200      	movs	r2, #0
 800c18e:	601a      	str	r2, [r3, #0]
 800c190:	605a      	str	r2, [r3, #4]
 800c192:	609a      	str	r2, [r3, #8]
 800c194:	60da      	str	r2, [r3, #12]
 800c196:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	681b      	ldr	r3, [r3, #0]
 800c19c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c1a0:	d13a      	bne.n	800c218 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c1a2:	2300      	movs	r3, #0
 800c1a4:	613b      	str	r3, [r7, #16]
 800c1a6:	4b1e      	ldr	r3, [pc, #120]	; (800c220 <HAL_PCD_MspInit+0xa0>)
 800c1a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c1aa:	4a1d      	ldr	r2, [pc, #116]	; (800c220 <HAL_PCD_MspInit+0xa0>)
 800c1ac:	f043 0301 	orr.w	r3, r3, #1
 800c1b0:	6313      	str	r3, [r2, #48]	; 0x30
 800c1b2:	4b1b      	ldr	r3, [pc, #108]	; (800c220 <HAL_PCD_MspInit+0xa0>)
 800c1b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c1b6:	f003 0301 	and.w	r3, r3, #1
 800c1ba:	613b      	str	r3, [r7, #16]
 800c1bc:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800c1be:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800c1c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c1c4:	2302      	movs	r3, #2
 800c1c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c1c8:	2300      	movs	r3, #0
 800c1ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c1cc:	2303      	movs	r3, #3
 800c1ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800c1d0:	230a      	movs	r3, #10
 800c1d2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c1d4:	f107 0314 	add.w	r3, r7, #20
 800c1d8:	4619      	mov	r1, r3
 800c1da:	4812      	ldr	r0, [pc, #72]	; (800c224 <HAL_PCD_MspInit+0xa4>)
 800c1dc:	f7f6 fb18 	bl	8002810 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800c1e0:	4b0f      	ldr	r3, [pc, #60]	; (800c220 <HAL_PCD_MspInit+0xa0>)
 800c1e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c1e4:	4a0e      	ldr	r2, [pc, #56]	; (800c220 <HAL_PCD_MspInit+0xa0>)
 800c1e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c1ea:	6353      	str	r3, [r2, #52]	; 0x34
 800c1ec:	2300      	movs	r3, #0
 800c1ee:	60fb      	str	r3, [r7, #12]
 800c1f0:	4b0b      	ldr	r3, [pc, #44]	; (800c220 <HAL_PCD_MspInit+0xa0>)
 800c1f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c1f4:	4a0a      	ldr	r2, [pc, #40]	; (800c220 <HAL_PCD_MspInit+0xa0>)
 800c1f6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800c1fa:	6453      	str	r3, [r2, #68]	; 0x44
 800c1fc:	4b08      	ldr	r3, [pc, #32]	; (800c220 <HAL_PCD_MspInit+0xa0>)
 800c1fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c200:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c204:	60fb      	str	r3, [r7, #12]
 800c206:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800c208:	2200      	movs	r2, #0
 800c20a:	2100      	movs	r1, #0
 800c20c:	2043      	movs	r0, #67	; 0x43
 800c20e:	f7f5 febc 	bl	8001f8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800c212:	2043      	movs	r0, #67	; 0x43
 800c214:	f7f5 fed5 	bl	8001fc2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800c218:	bf00      	nop
 800c21a:	3728      	adds	r7, #40	; 0x28
 800c21c:	46bd      	mov	sp, r7
 800c21e:	bd80      	pop	{r7, pc}
 800c220:	40023800 	.word	0x40023800
 800c224:	40020000 	.word	0x40020000

0800c228 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c228:	b580      	push	{r7, lr}
 800c22a:	b082      	sub	sp, #8
 800c22c:	af00      	add	r7, sp, #0
 800c22e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800c23c:	4619      	mov	r1, r3
 800c23e:	4610      	mov	r0, r2
 800c240:	f7fe fba7 	bl	800a992 <USBD_LL_SetupStage>
}
 800c244:	bf00      	nop
 800c246:	3708      	adds	r7, #8
 800c248:	46bd      	mov	sp, r7
 800c24a:	bd80      	pop	{r7, pc}

0800c24c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c24c:	b580      	push	{r7, lr}
 800c24e:	b082      	sub	sp, #8
 800c250:	af00      	add	r7, sp, #0
 800c252:	6078      	str	r0, [r7, #4]
 800c254:	460b      	mov	r3, r1
 800c256:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800c25e:	78fa      	ldrb	r2, [r7, #3]
 800c260:	6879      	ldr	r1, [r7, #4]
 800c262:	4613      	mov	r3, r2
 800c264:	00db      	lsls	r3, r3, #3
 800c266:	4413      	add	r3, r2
 800c268:	009b      	lsls	r3, r3, #2
 800c26a:	440b      	add	r3, r1
 800c26c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800c270:	681a      	ldr	r2, [r3, #0]
 800c272:	78fb      	ldrb	r3, [r7, #3]
 800c274:	4619      	mov	r1, r3
 800c276:	f7fe fbe1 	bl	800aa3c <USBD_LL_DataOutStage>
}
 800c27a:	bf00      	nop
 800c27c:	3708      	adds	r7, #8
 800c27e:	46bd      	mov	sp, r7
 800c280:	bd80      	pop	{r7, pc}

0800c282 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c282:	b580      	push	{r7, lr}
 800c284:	b082      	sub	sp, #8
 800c286:	af00      	add	r7, sp, #0
 800c288:	6078      	str	r0, [r7, #4]
 800c28a:	460b      	mov	r3, r1
 800c28c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800c294:	78fa      	ldrb	r2, [r7, #3]
 800c296:	6879      	ldr	r1, [r7, #4]
 800c298:	4613      	mov	r3, r2
 800c29a:	00db      	lsls	r3, r3, #3
 800c29c:	4413      	add	r3, r2
 800c29e:	009b      	lsls	r3, r3, #2
 800c2a0:	440b      	add	r3, r1
 800c2a2:	334c      	adds	r3, #76	; 0x4c
 800c2a4:	681a      	ldr	r2, [r3, #0]
 800c2a6:	78fb      	ldrb	r3, [r7, #3]
 800c2a8:	4619      	mov	r1, r3
 800c2aa:	f7fe fc7a 	bl	800aba2 <USBD_LL_DataInStage>
}
 800c2ae:	bf00      	nop
 800c2b0:	3708      	adds	r7, #8
 800c2b2:	46bd      	mov	sp, r7
 800c2b4:	bd80      	pop	{r7, pc}

0800c2b6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c2b6:	b580      	push	{r7, lr}
 800c2b8:	b082      	sub	sp, #8
 800c2ba:	af00      	add	r7, sp, #0
 800c2bc:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c2c4:	4618      	mov	r0, r3
 800c2c6:	f7fe fdae 	bl	800ae26 <USBD_LL_SOF>
}
 800c2ca:	bf00      	nop
 800c2cc:	3708      	adds	r7, #8
 800c2ce:	46bd      	mov	sp, r7
 800c2d0:	bd80      	pop	{r7, pc}

0800c2d2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c2d2:	b580      	push	{r7, lr}
 800c2d4:	b084      	sub	sp, #16
 800c2d6:	af00      	add	r7, sp, #0
 800c2d8:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800c2da:	2301      	movs	r3, #1
 800c2dc:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	68db      	ldr	r3, [r3, #12]
 800c2e2:	2b02      	cmp	r3, #2
 800c2e4:	d001      	beq.n	800c2ea <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800c2e6:	f7f5 faef 	bl	80018c8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c2f0:	7bfa      	ldrb	r2, [r7, #15]
 800c2f2:	4611      	mov	r1, r2
 800c2f4:	4618      	mov	r0, r3
 800c2f6:	f7fe fd58 	bl	800adaa <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c300:	4618      	mov	r0, r3
 800c302:	f7fe fd00 	bl	800ad06 <USBD_LL_Reset>
}
 800c306:	bf00      	nop
 800c308:	3710      	adds	r7, #16
 800c30a:	46bd      	mov	sp, r7
 800c30c:	bd80      	pop	{r7, pc}
	...

0800c310 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c310:	b580      	push	{r7, lr}
 800c312:	b082      	sub	sp, #8
 800c314:	af00      	add	r7, sp, #0
 800c316:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c31e:	4618      	mov	r0, r3
 800c320:	f7fe fd53 	bl	800adca <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	681b      	ldr	r3, [r3, #0]
 800c328:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c32c:	681b      	ldr	r3, [r3, #0]
 800c32e:	687a      	ldr	r2, [r7, #4]
 800c330:	6812      	ldr	r2, [r2, #0]
 800c332:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800c336:	f043 0301 	orr.w	r3, r3, #1
 800c33a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	6a1b      	ldr	r3, [r3, #32]
 800c340:	2b00      	cmp	r3, #0
 800c342:	d005      	beq.n	800c350 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c344:	4b04      	ldr	r3, [pc, #16]	; (800c358 <HAL_PCD_SuspendCallback+0x48>)
 800c346:	691b      	ldr	r3, [r3, #16]
 800c348:	4a03      	ldr	r2, [pc, #12]	; (800c358 <HAL_PCD_SuspendCallback+0x48>)
 800c34a:	f043 0306 	orr.w	r3, r3, #6
 800c34e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800c350:	bf00      	nop
 800c352:	3708      	adds	r7, #8
 800c354:	46bd      	mov	sp, r7
 800c356:	bd80      	pop	{r7, pc}
 800c358:	e000ed00 	.word	0xe000ed00

0800c35c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c35c:	b580      	push	{r7, lr}
 800c35e:	b082      	sub	sp, #8
 800c360:	af00      	add	r7, sp, #0
 800c362:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c36a:	4618      	mov	r0, r3
 800c36c:	f7fe fd43 	bl	800adf6 <USBD_LL_Resume>
}
 800c370:	bf00      	nop
 800c372:	3708      	adds	r7, #8
 800c374:	46bd      	mov	sp, r7
 800c376:	bd80      	pop	{r7, pc}

0800c378 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c378:	b580      	push	{r7, lr}
 800c37a:	b082      	sub	sp, #8
 800c37c:	af00      	add	r7, sp, #0
 800c37e:	6078      	str	r0, [r7, #4]
 800c380:	460b      	mov	r3, r1
 800c382:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c38a:	78fa      	ldrb	r2, [r7, #3]
 800c38c:	4611      	mov	r1, r2
 800c38e:	4618      	mov	r0, r3
 800c390:	f7fe fd9b 	bl	800aeca <USBD_LL_IsoOUTIncomplete>
}
 800c394:	bf00      	nop
 800c396:	3708      	adds	r7, #8
 800c398:	46bd      	mov	sp, r7
 800c39a:	bd80      	pop	{r7, pc}

0800c39c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c39c:	b580      	push	{r7, lr}
 800c39e:	b082      	sub	sp, #8
 800c3a0:	af00      	add	r7, sp, #0
 800c3a2:	6078      	str	r0, [r7, #4]
 800c3a4:	460b      	mov	r3, r1
 800c3a6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c3ae:	78fa      	ldrb	r2, [r7, #3]
 800c3b0:	4611      	mov	r1, r2
 800c3b2:	4618      	mov	r0, r3
 800c3b4:	f7fe fd57 	bl	800ae66 <USBD_LL_IsoINIncomplete>
}
 800c3b8:	bf00      	nop
 800c3ba:	3708      	adds	r7, #8
 800c3bc:	46bd      	mov	sp, r7
 800c3be:	bd80      	pop	{r7, pc}

0800c3c0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c3c0:	b580      	push	{r7, lr}
 800c3c2:	b082      	sub	sp, #8
 800c3c4:	af00      	add	r7, sp, #0
 800c3c6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c3ce:	4618      	mov	r0, r3
 800c3d0:	f7fe fdad 	bl	800af2e <USBD_LL_DevConnected>
}
 800c3d4:	bf00      	nop
 800c3d6:	3708      	adds	r7, #8
 800c3d8:	46bd      	mov	sp, r7
 800c3da:	bd80      	pop	{r7, pc}

0800c3dc <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c3dc:	b580      	push	{r7, lr}
 800c3de:	b082      	sub	sp, #8
 800c3e0:	af00      	add	r7, sp, #0
 800c3e2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c3ea:	4618      	mov	r0, r3
 800c3ec:	f7fe fdaa 	bl	800af44 <USBD_LL_DevDisconnected>
}
 800c3f0:	bf00      	nop
 800c3f2:	3708      	adds	r7, #8
 800c3f4:	46bd      	mov	sp, r7
 800c3f6:	bd80      	pop	{r7, pc}

0800c3f8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800c3f8:	b580      	push	{r7, lr}
 800c3fa:	b082      	sub	sp, #8
 800c3fc:	af00      	add	r7, sp, #0
 800c3fe:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	781b      	ldrb	r3, [r3, #0]
 800c404:	2b00      	cmp	r3, #0
 800c406:	d13c      	bne.n	800c482 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800c408:	4a20      	ldr	r2, [pc, #128]	; (800c48c <USBD_LL_Init+0x94>)
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	4a1e      	ldr	r2, [pc, #120]	; (800c48c <USBD_LL_Init+0x94>)
 800c414:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800c418:	4b1c      	ldr	r3, [pc, #112]	; (800c48c <USBD_LL_Init+0x94>)
 800c41a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800c41e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800c420:	4b1a      	ldr	r3, [pc, #104]	; (800c48c <USBD_LL_Init+0x94>)
 800c422:	2204      	movs	r2, #4
 800c424:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800c426:	4b19      	ldr	r3, [pc, #100]	; (800c48c <USBD_LL_Init+0x94>)
 800c428:	2202      	movs	r2, #2
 800c42a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800c42c:	4b17      	ldr	r3, [pc, #92]	; (800c48c <USBD_LL_Init+0x94>)
 800c42e:	2200      	movs	r2, #0
 800c430:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800c432:	4b16      	ldr	r3, [pc, #88]	; (800c48c <USBD_LL_Init+0x94>)
 800c434:	2202      	movs	r2, #2
 800c436:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800c438:	4b14      	ldr	r3, [pc, #80]	; (800c48c <USBD_LL_Init+0x94>)
 800c43a:	2200      	movs	r2, #0
 800c43c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800c43e:	4b13      	ldr	r3, [pc, #76]	; (800c48c <USBD_LL_Init+0x94>)
 800c440:	2200      	movs	r2, #0
 800c442:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800c444:	4b11      	ldr	r3, [pc, #68]	; (800c48c <USBD_LL_Init+0x94>)
 800c446:	2200      	movs	r2, #0
 800c448:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800c44a:	4b10      	ldr	r3, [pc, #64]	; (800c48c <USBD_LL_Init+0x94>)
 800c44c:	2200      	movs	r2, #0
 800c44e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800c450:	4b0e      	ldr	r3, [pc, #56]	; (800c48c <USBD_LL_Init+0x94>)
 800c452:	2200      	movs	r2, #0
 800c454:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800c456:	480d      	ldr	r0, [pc, #52]	; (800c48c <USBD_LL_Init+0x94>)
 800c458:	f7f6 fba8 	bl	8002bac <HAL_PCD_Init>
 800c45c:	4603      	mov	r3, r0
 800c45e:	2b00      	cmp	r3, #0
 800c460:	d001      	beq.n	800c466 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800c462:	f7f5 fa31 	bl	80018c8 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800c466:	2180      	movs	r1, #128	; 0x80
 800c468:	4808      	ldr	r0, [pc, #32]	; (800c48c <USBD_LL_Init+0x94>)
 800c46a:	f7f7 fe66 	bl	800413a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800c46e:	2240      	movs	r2, #64	; 0x40
 800c470:	2100      	movs	r1, #0
 800c472:	4806      	ldr	r0, [pc, #24]	; (800c48c <USBD_LL_Init+0x94>)
 800c474:	f7f7 fe1a 	bl	80040ac <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800c478:	2280      	movs	r2, #128	; 0x80
 800c47a:	2101      	movs	r1, #1
 800c47c:	4803      	ldr	r0, [pc, #12]	; (800c48c <USBD_LL_Init+0x94>)
 800c47e:	f7f7 fe15 	bl	80040ac <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800c482:	2300      	movs	r3, #0
}
 800c484:	4618      	mov	r0, r3
 800c486:	3708      	adds	r7, #8
 800c488:	46bd      	mov	sp, r7
 800c48a:	bd80      	pop	{r7, pc}
 800c48c:	2000176c 	.word	0x2000176c

0800c490 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800c490:	b580      	push	{r7, lr}
 800c492:	b084      	sub	sp, #16
 800c494:	af00      	add	r7, sp, #0
 800c496:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c498:	2300      	movs	r3, #0
 800c49a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c49c:	2300      	movs	r3, #0
 800c49e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c4a6:	4618      	mov	r0, r3
 800c4a8:	f7f6 fc9d 	bl	8002de6 <HAL_PCD_Start>
 800c4ac:	4603      	mov	r3, r0
 800c4ae:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c4b0:	7bfb      	ldrb	r3, [r7, #15]
 800c4b2:	4618      	mov	r0, r3
 800c4b4:	f000 f97c 	bl	800c7b0 <USBD_Get_USB_Status>
 800c4b8:	4603      	mov	r3, r0
 800c4ba:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c4bc:	7bbb      	ldrb	r3, [r7, #14]
}
 800c4be:	4618      	mov	r0, r3
 800c4c0:	3710      	adds	r7, #16
 800c4c2:	46bd      	mov	sp, r7
 800c4c4:	bd80      	pop	{r7, pc}

0800c4c6 <USBD_LL_Stop>:
  * @brief  Stops the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Stop(USBD_HandleTypeDef *pdev)
{
 800c4c6:	b580      	push	{r7, lr}
 800c4c8:	b084      	sub	sp, #16
 800c4ca:	af00      	add	r7, sp, #0
 800c4cc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c4ce:	2300      	movs	r3, #0
 800c4d0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c4d2:	2300      	movs	r3, #0
 800c4d4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Stop(pdev->pData);
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c4dc:	4618      	mov	r0, r3
 800c4de:	f7f6 fcb5 	bl	8002e4c <HAL_PCD_Stop>
 800c4e2:	4603      	mov	r3, r0
 800c4e4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c4e6:	7bfb      	ldrb	r3, [r7, #15]
 800c4e8:	4618      	mov	r0, r3
 800c4ea:	f000 f961 	bl	800c7b0 <USBD_Get_USB_Status>
 800c4ee:	4603      	mov	r3, r0
 800c4f0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c4f2:	7bbb      	ldrb	r3, [r7, #14]
}
 800c4f4:	4618      	mov	r0, r3
 800c4f6:	3710      	adds	r7, #16
 800c4f8:	46bd      	mov	sp, r7
 800c4fa:	bd80      	pop	{r7, pc}

0800c4fc <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800c4fc:	b580      	push	{r7, lr}
 800c4fe:	b084      	sub	sp, #16
 800c500:	af00      	add	r7, sp, #0
 800c502:	6078      	str	r0, [r7, #4]
 800c504:	4608      	mov	r0, r1
 800c506:	4611      	mov	r1, r2
 800c508:	461a      	mov	r2, r3
 800c50a:	4603      	mov	r3, r0
 800c50c:	70fb      	strb	r3, [r7, #3]
 800c50e:	460b      	mov	r3, r1
 800c510:	70bb      	strb	r3, [r7, #2]
 800c512:	4613      	mov	r3, r2
 800c514:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c516:	2300      	movs	r3, #0
 800c518:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c51a:	2300      	movs	r3, #0
 800c51c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800c524:	78bb      	ldrb	r3, [r7, #2]
 800c526:	883a      	ldrh	r2, [r7, #0]
 800c528:	78f9      	ldrb	r1, [r7, #3]
 800c52a:	f7f7 f98c 	bl	8003846 <HAL_PCD_EP_Open>
 800c52e:	4603      	mov	r3, r0
 800c530:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c532:	7bfb      	ldrb	r3, [r7, #15]
 800c534:	4618      	mov	r0, r3
 800c536:	f000 f93b 	bl	800c7b0 <USBD_Get_USB_Status>
 800c53a:	4603      	mov	r3, r0
 800c53c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c53e:	7bbb      	ldrb	r3, [r7, #14]
}
 800c540:	4618      	mov	r0, r3
 800c542:	3710      	adds	r7, #16
 800c544:	46bd      	mov	sp, r7
 800c546:	bd80      	pop	{r7, pc}

0800c548 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c548:	b580      	push	{r7, lr}
 800c54a:	b084      	sub	sp, #16
 800c54c:	af00      	add	r7, sp, #0
 800c54e:	6078      	str	r0, [r7, #4]
 800c550:	460b      	mov	r3, r1
 800c552:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c554:	2300      	movs	r3, #0
 800c556:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c558:	2300      	movs	r3, #0
 800c55a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c562:	78fa      	ldrb	r2, [r7, #3]
 800c564:	4611      	mov	r1, r2
 800c566:	4618      	mov	r0, r3
 800c568:	f7f7 f9d5 	bl	8003916 <HAL_PCD_EP_Close>
 800c56c:	4603      	mov	r3, r0
 800c56e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c570:	7bfb      	ldrb	r3, [r7, #15]
 800c572:	4618      	mov	r0, r3
 800c574:	f000 f91c 	bl	800c7b0 <USBD_Get_USB_Status>
 800c578:	4603      	mov	r3, r0
 800c57a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c57c:	7bbb      	ldrb	r3, [r7, #14]
}
 800c57e:	4618      	mov	r0, r3
 800c580:	3710      	adds	r7, #16
 800c582:	46bd      	mov	sp, r7
 800c584:	bd80      	pop	{r7, pc}

0800c586 <USBD_LL_FlushEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_FlushEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c586:	b580      	push	{r7, lr}
 800c588:	b084      	sub	sp, #16
 800c58a:	af00      	add	r7, sp, #0
 800c58c:	6078      	str	r0, [r7, #4]
 800c58e:	460b      	mov	r3, r1
 800c590:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c592:	2300      	movs	r3, #0
 800c594:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c596:	2300      	movs	r3, #0
 800c598:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c5a0:	78fa      	ldrb	r2, [r7, #3]
 800c5a2:	4611      	mov	r1, r2
 800c5a4:	4618      	mov	r0, r3
 800c5a6:	f7f7 fb98 	bl	8003cda <HAL_PCD_EP_Flush>
 800c5aa:	4603      	mov	r3, r0
 800c5ac:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c5ae:	7bfb      	ldrb	r3, [r7, #15]
 800c5b0:	4618      	mov	r0, r3
 800c5b2:	f000 f8fd 	bl	800c7b0 <USBD_Get_USB_Status>
 800c5b6:	4603      	mov	r3, r0
 800c5b8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c5ba:	7bbb      	ldrb	r3, [r7, #14]
}
 800c5bc:	4618      	mov	r0, r3
 800c5be:	3710      	adds	r7, #16
 800c5c0:	46bd      	mov	sp, r7
 800c5c2:	bd80      	pop	{r7, pc}

0800c5c4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c5c4:	b580      	push	{r7, lr}
 800c5c6:	b084      	sub	sp, #16
 800c5c8:	af00      	add	r7, sp, #0
 800c5ca:	6078      	str	r0, [r7, #4]
 800c5cc:	460b      	mov	r3, r1
 800c5ce:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c5d0:	2300      	movs	r3, #0
 800c5d2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c5d4:	2300      	movs	r3, #0
 800c5d6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c5de:	78fa      	ldrb	r2, [r7, #3]
 800c5e0:	4611      	mov	r1, r2
 800c5e2:	4618      	mov	r0, r3
 800c5e4:	f7f7 fa8e 	bl	8003b04 <HAL_PCD_EP_SetStall>
 800c5e8:	4603      	mov	r3, r0
 800c5ea:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c5ec:	7bfb      	ldrb	r3, [r7, #15]
 800c5ee:	4618      	mov	r0, r3
 800c5f0:	f000 f8de 	bl	800c7b0 <USBD_Get_USB_Status>
 800c5f4:	4603      	mov	r3, r0
 800c5f6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c5f8:	7bbb      	ldrb	r3, [r7, #14]
}
 800c5fa:	4618      	mov	r0, r3
 800c5fc:	3710      	adds	r7, #16
 800c5fe:	46bd      	mov	sp, r7
 800c600:	bd80      	pop	{r7, pc}

0800c602 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c602:	b580      	push	{r7, lr}
 800c604:	b084      	sub	sp, #16
 800c606:	af00      	add	r7, sp, #0
 800c608:	6078      	str	r0, [r7, #4]
 800c60a:	460b      	mov	r3, r1
 800c60c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c60e:	2300      	movs	r3, #0
 800c610:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c612:	2300      	movs	r3, #0
 800c614:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c61c:	78fa      	ldrb	r2, [r7, #3]
 800c61e:	4611      	mov	r1, r2
 800c620:	4618      	mov	r0, r3
 800c622:	f7f7 fad3 	bl	8003bcc <HAL_PCD_EP_ClrStall>
 800c626:	4603      	mov	r3, r0
 800c628:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c62a:	7bfb      	ldrb	r3, [r7, #15]
 800c62c:	4618      	mov	r0, r3
 800c62e:	f000 f8bf 	bl	800c7b0 <USBD_Get_USB_Status>
 800c632:	4603      	mov	r3, r0
 800c634:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c636:	7bbb      	ldrb	r3, [r7, #14]
}
 800c638:	4618      	mov	r0, r3
 800c63a:	3710      	adds	r7, #16
 800c63c:	46bd      	mov	sp, r7
 800c63e:	bd80      	pop	{r7, pc}

0800c640 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c640:	b480      	push	{r7}
 800c642:	b085      	sub	sp, #20
 800c644:	af00      	add	r7, sp, #0
 800c646:	6078      	str	r0, [r7, #4]
 800c648:	460b      	mov	r3, r1
 800c64a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c652:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800c654:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c658:	2b00      	cmp	r3, #0
 800c65a:	da0b      	bge.n	800c674 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800c65c:	78fb      	ldrb	r3, [r7, #3]
 800c65e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c662:	68f9      	ldr	r1, [r7, #12]
 800c664:	4613      	mov	r3, r2
 800c666:	00db      	lsls	r3, r3, #3
 800c668:	4413      	add	r3, r2
 800c66a:	009b      	lsls	r3, r3, #2
 800c66c:	440b      	add	r3, r1
 800c66e:	333e      	adds	r3, #62	; 0x3e
 800c670:	781b      	ldrb	r3, [r3, #0]
 800c672:	e00b      	b.n	800c68c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800c674:	78fb      	ldrb	r3, [r7, #3]
 800c676:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c67a:	68f9      	ldr	r1, [r7, #12]
 800c67c:	4613      	mov	r3, r2
 800c67e:	00db      	lsls	r3, r3, #3
 800c680:	4413      	add	r3, r2
 800c682:	009b      	lsls	r3, r3, #2
 800c684:	440b      	add	r3, r1
 800c686:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800c68a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800c68c:	4618      	mov	r0, r3
 800c68e:	3714      	adds	r7, #20
 800c690:	46bd      	mov	sp, r7
 800c692:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c696:	4770      	bx	lr

0800c698 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800c698:	b580      	push	{r7, lr}
 800c69a:	b084      	sub	sp, #16
 800c69c:	af00      	add	r7, sp, #0
 800c69e:	6078      	str	r0, [r7, #4]
 800c6a0:	460b      	mov	r3, r1
 800c6a2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c6a4:	2300      	movs	r3, #0
 800c6a6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c6a8:	2300      	movs	r3, #0
 800c6aa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c6b2:	78fa      	ldrb	r2, [r7, #3]
 800c6b4:	4611      	mov	r1, r2
 800c6b6:	4618      	mov	r0, r3
 800c6b8:	f7f7 f8a0 	bl	80037fc <HAL_PCD_SetAddress>
 800c6bc:	4603      	mov	r3, r0
 800c6be:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c6c0:	7bfb      	ldrb	r3, [r7, #15]
 800c6c2:	4618      	mov	r0, r3
 800c6c4:	f000 f874 	bl	800c7b0 <USBD_Get_USB_Status>
 800c6c8:	4603      	mov	r3, r0
 800c6ca:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c6cc:	7bbb      	ldrb	r3, [r7, #14]
}
 800c6ce:	4618      	mov	r0, r3
 800c6d0:	3710      	adds	r7, #16
 800c6d2:	46bd      	mov	sp, r7
 800c6d4:	bd80      	pop	{r7, pc}

0800c6d6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c6d6:	b580      	push	{r7, lr}
 800c6d8:	b086      	sub	sp, #24
 800c6da:	af00      	add	r7, sp, #0
 800c6dc:	60f8      	str	r0, [r7, #12]
 800c6de:	607a      	str	r2, [r7, #4]
 800c6e0:	603b      	str	r3, [r7, #0]
 800c6e2:	460b      	mov	r3, r1
 800c6e4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c6e6:	2300      	movs	r3, #0
 800c6e8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c6ea:	2300      	movs	r3, #0
 800c6ec:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800c6ee:	68fb      	ldr	r3, [r7, #12]
 800c6f0:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800c6f4:	7af9      	ldrb	r1, [r7, #11]
 800c6f6:	683b      	ldr	r3, [r7, #0]
 800c6f8:	687a      	ldr	r2, [r7, #4]
 800c6fa:	f7f7 f9b9 	bl	8003a70 <HAL_PCD_EP_Transmit>
 800c6fe:	4603      	mov	r3, r0
 800c700:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c702:	7dfb      	ldrb	r3, [r7, #23]
 800c704:	4618      	mov	r0, r3
 800c706:	f000 f853 	bl	800c7b0 <USBD_Get_USB_Status>
 800c70a:	4603      	mov	r3, r0
 800c70c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c70e:	7dbb      	ldrb	r3, [r7, #22]
}
 800c710:	4618      	mov	r0, r3
 800c712:	3718      	adds	r7, #24
 800c714:	46bd      	mov	sp, r7
 800c716:	bd80      	pop	{r7, pc}

0800c718 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c718:	b580      	push	{r7, lr}
 800c71a:	b086      	sub	sp, #24
 800c71c:	af00      	add	r7, sp, #0
 800c71e:	60f8      	str	r0, [r7, #12]
 800c720:	607a      	str	r2, [r7, #4]
 800c722:	603b      	str	r3, [r7, #0]
 800c724:	460b      	mov	r3, r1
 800c726:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c728:	2300      	movs	r3, #0
 800c72a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c72c:	2300      	movs	r3, #0
 800c72e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800c730:	68fb      	ldr	r3, [r7, #12]
 800c732:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800c736:	7af9      	ldrb	r1, [r7, #11]
 800c738:	683b      	ldr	r3, [r7, #0]
 800c73a:	687a      	ldr	r2, [r7, #4]
 800c73c:	f7f7 f935 	bl	80039aa <HAL_PCD_EP_Receive>
 800c740:	4603      	mov	r3, r0
 800c742:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c744:	7dfb      	ldrb	r3, [r7, #23]
 800c746:	4618      	mov	r0, r3
 800c748:	f000 f832 	bl	800c7b0 <USBD_Get_USB_Status>
 800c74c:	4603      	mov	r3, r0
 800c74e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c750:	7dbb      	ldrb	r3, [r7, #22]
}
 800c752:	4618      	mov	r0, r3
 800c754:	3718      	adds	r7, #24
 800c756:	46bd      	mov	sp, r7
 800c758:	bd80      	pop	{r7, pc}

0800c75a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c75a:	b580      	push	{r7, lr}
 800c75c:	b082      	sub	sp, #8
 800c75e:	af00      	add	r7, sp, #0
 800c760:	6078      	str	r0, [r7, #4]
 800c762:	460b      	mov	r3, r1
 800c764:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c76c:	78fa      	ldrb	r2, [r7, #3]
 800c76e:	4611      	mov	r1, r2
 800c770:	4618      	mov	r0, r3
 800c772:	f7f7 f965 	bl	8003a40 <HAL_PCD_EP_GetRxCount>
 800c776:	4603      	mov	r3, r0
}
 800c778:	4618      	mov	r0, r3
 800c77a:	3708      	adds	r7, #8
 800c77c:	46bd      	mov	sp, r7
 800c77e:	bd80      	pop	{r7, pc}

0800c780 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800c780:	b480      	push	{r7}
 800c782:	b083      	sub	sp, #12
 800c784:	af00      	add	r7, sp, #0
 800c786:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_MSC_BOT_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800c788:	4b03      	ldr	r3, [pc, #12]	; (800c798 <USBD_static_malloc+0x18>)
}
 800c78a:	4618      	mov	r0, r3
 800c78c:	370c      	adds	r7, #12
 800c78e:	46bd      	mov	sp, r7
 800c790:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c794:	4770      	bx	lr
 800c796:	bf00      	nop
 800c798:	20001c78 	.word	0x20001c78

0800c79c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800c79c:	b480      	push	{r7}
 800c79e:	b083      	sub	sp, #12
 800c7a0:	af00      	add	r7, sp, #0
 800c7a2:	6078      	str	r0, [r7, #4]

}
 800c7a4:	bf00      	nop
 800c7a6:	370c      	adds	r7, #12
 800c7a8:	46bd      	mov	sp, r7
 800c7aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7ae:	4770      	bx	lr

0800c7b0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800c7b0:	b480      	push	{r7}
 800c7b2:	b085      	sub	sp, #20
 800c7b4:	af00      	add	r7, sp, #0
 800c7b6:	4603      	mov	r3, r0
 800c7b8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c7ba:	2300      	movs	r3, #0
 800c7bc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800c7be:	79fb      	ldrb	r3, [r7, #7]
 800c7c0:	2b03      	cmp	r3, #3
 800c7c2:	d817      	bhi.n	800c7f4 <USBD_Get_USB_Status+0x44>
 800c7c4:	a201      	add	r2, pc, #4	; (adr r2, 800c7cc <USBD_Get_USB_Status+0x1c>)
 800c7c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c7ca:	bf00      	nop
 800c7cc:	0800c7dd 	.word	0x0800c7dd
 800c7d0:	0800c7e3 	.word	0x0800c7e3
 800c7d4:	0800c7e9 	.word	0x0800c7e9
 800c7d8:	0800c7ef 	.word	0x0800c7ef
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800c7dc:	2300      	movs	r3, #0
 800c7de:	73fb      	strb	r3, [r7, #15]
    break;
 800c7e0:	e00b      	b.n	800c7fa <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c7e2:	2303      	movs	r3, #3
 800c7e4:	73fb      	strb	r3, [r7, #15]
    break;
 800c7e6:	e008      	b.n	800c7fa <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c7e8:	2301      	movs	r3, #1
 800c7ea:	73fb      	strb	r3, [r7, #15]
    break;
 800c7ec:	e005      	b.n	800c7fa <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c7ee:	2303      	movs	r3, #3
 800c7f0:	73fb      	strb	r3, [r7, #15]
    break;
 800c7f2:	e002      	b.n	800c7fa <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800c7f4:	2303      	movs	r3, #3
 800c7f6:	73fb      	strb	r3, [r7, #15]
    break;
 800c7f8:	bf00      	nop
  }
  return usb_status;
 800c7fa:	7bfb      	ldrb	r3, [r7, #15]
}
 800c7fc:	4618      	mov	r0, r3
 800c7fe:	3714      	adds	r7, #20
 800c800:	46bd      	mov	sp, r7
 800c802:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c806:	4770      	bx	lr

0800c808 <__libc_init_array>:
 800c808:	b570      	push	{r4, r5, r6, lr}
 800c80a:	4d0d      	ldr	r5, [pc, #52]	; (800c840 <__libc_init_array+0x38>)
 800c80c:	4c0d      	ldr	r4, [pc, #52]	; (800c844 <__libc_init_array+0x3c>)
 800c80e:	1b64      	subs	r4, r4, r5
 800c810:	10a4      	asrs	r4, r4, #2
 800c812:	2600      	movs	r6, #0
 800c814:	42a6      	cmp	r6, r4
 800c816:	d109      	bne.n	800c82c <__libc_init_array+0x24>
 800c818:	4d0b      	ldr	r5, [pc, #44]	; (800c848 <__libc_init_array+0x40>)
 800c81a:	4c0c      	ldr	r4, [pc, #48]	; (800c84c <__libc_init_array+0x44>)
 800c81c:	f000 f820 	bl	800c860 <_init>
 800c820:	1b64      	subs	r4, r4, r5
 800c822:	10a4      	asrs	r4, r4, #2
 800c824:	2600      	movs	r6, #0
 800c826:	42a6      	cmp	r6, r4
 800c828:	d105      	bne.n	800c836 <__libc_init_array+0x2e>
 800c82a:	bd70      	pop	{r4, r5, r6, pc}
 800c82c:	f855 3b04 	ldr.w	r3, [r5], #4
 800c830:	4798      	blx	r3
 800c832:	3601      	adds	r6, #1
 800c834:	e7ee      	b.n	800c814 <__libc_init_array+0xc>
 800c836:	f855 3b04 	ldr.w	r3, [r5], #4
 800c83a:	4798      	blx	r3
 800c83c:	3601      	adds	r6, #1
 800c83e:	e7f2      	b.n	800c826 <__libc_init_array+0x1e>
 800c840:	0800c8f8 	.word	0x0800c8f8
 800c844:	0800c8f8 	.word	0x0800c8f8
 800c848:	0800c8f8 	.word	0x0800c8f8
 800c84c:	0800c8fc 	.word	0x0800c8fc

0800c850 <memset>:
 800c850:	4402      	add	r2, r0
 800c852:	4603      	mov	r3, r0
 800c854:	4293      	cmp	r3, r2
 800c856:	d100      	bne.n	800c85a <memset+0xa>
 800c858:	4770      	bx	lr
 800c85a:	f803 1b01 	strb.w	r1, [r3], #1
 800c85e:	e7f9      	b.n	800c854 <memset+0x4>

0800c860 <_init>:
 800c860:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c862:	bf00      	nop
 800c864:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c866:	bc08      	pop	{r3}
 800c868:	469e      	mov	lr, r3
 800c86a:	4770      	bx	lr

0800c86c <_fini>:
 800c86c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c86e:	bf00      	nop
 800c870:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c872:	bc08      	pop	{r3}
 800c874:	469e      	mov	lr, r3
 800c876:	4770      	bx	lr
