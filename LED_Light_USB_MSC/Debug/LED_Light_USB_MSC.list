
LED_Light_USB_MSC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c3c4  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  0800c558  0800c558  0001c558  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c5d0  0800c5d0  00020128  2**0
                  CONTENTS
  4 .ARM          00000008  0800c5d0  0800c5d0  0001c5d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c5d8  0800c5d8  00020128  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c5d8  0800c5d8  0001c5d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c5dc  0800c5dc  0001c5dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000128  20000000  0800c5e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002bbc  20000128  0800c708  00020128  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002ce4  0800c708  00022ce4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020128  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b0f3  00000000  00000000  00020158  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004940  00000000  00000000  0003b24b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001710  00000000  00000000  0003fb90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000014d0  00000000  00000000  000412a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001bdeb  00000000  00000000  00042770  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ebe5  00000000  00000000  0005e55b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00092385  00000000  00000000  0007d140  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0010f4c5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005d08  00000000  00000000  0010f518  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000128 	.word	0x20000128
 80001b0:	00000000 	.word	0x00000000
 80001b4:	0800c540 	.word	0x0800c540

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	2000012c 	.word	0x2000012c
 80001d0:	0800c540 	.word	0x0800c540

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b974 	b.w	80004d4 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9d08      	ldr	r5, [sp, #32]
 800020a:	4604      	mov	r4, r0
 800020c:	468e      	mov	lr, r1
 800020e:	2b00      	cmp	r3, #0
 8000210:	d14d      	bne.n	80002ae <__udivmoddi4+0xaa>
 8000212:	428a      	cmp	r2, r1
 8000214:	4694      	mov	ip, r2
 8000216:	d969      	bls.n	80002ec <__udivmoddi4+0xe8>
 8000218:	fab2 f282 	clz	r2, r2
 800021c:	b152      	cbz	r2, 8000234 <__udivmoddi4+0x30>
 800021e:	fa01 f302 	lsl.w	r3, r1, r2
 8000222:	f1c2 0120 	rsb	r1, r2, #32
 8000226:	fa20 f101 	lsr.w	r1, r0, r1
 800022a:	fa0c fc02 	lsl.w	ip, ip, r2
 800022e:	ea41 0e03 	orr.w	lr, r1, r3
 8000232:	4094      	lsls	r4, r2
 8000234:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000238:	0c21      	lsrs	r1, r4, #16
 800023a:	fbbe f6f8 	udiv	r6, lr, r8
 800023e:	fa1f f78c 	uxth.w	r7, ip
 8000242:	fb08 e316 	mls	r3, r8, r6, lr
 8000246:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024a:	fb06 f107 	mul.w	r1, r6, r7
 800024e:	4299      	cmp	r1, r3
 8000250:	d90a      	bls.n	8000268 <__udivmoddi4+0x64>
 8000252:	eb1c 0303 	adds.w	r3, ip, r3
 8000256:	f106 30ff 	add.w	r0, r6, #4294967295
 800025a:	f080 811f 	bcs.w	800049c <__udivmoddi4+0x298>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 811c 	bls.w	800049c <__udivmoddi4+0x298>
 8000264:	3e02      	subs	r6, #2
 8000266:	4463      	add	r3, ip
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000270:	fb08 3310 	mls	r3, r8, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 f707 	mul.w	r7, r0, r7
 800027c:	42a7      	cmp	r7, r4
 800027e:	d90a      	bls.n	8000296 <__udivmoddi4+0x92>
 8000280:	eb1c 0404 	adds.w	r4, ip, r4
 8000284:	f100 33ff 	add.w	r3, r0, #4294967295
 8000288:	f080 810a 	bcs.w	80004a0 <__udivmoddi4+0x29c>
 800028c:	42a7      	cmp	r7, r4
 800028e:	f240 8107 	bls.w	80004a0 <__udivmoddi4+0x29c>
 8000292:	4464      	add	r4, ip
 8000294:	3802      	subs	r0, #2
 8000296:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029a:	1be4      	subs	r4, r4, r7
 800029c:	2600      	movs	r6, #0
 800029e:	b11d      	cbz	r5, 80002a8 <__udivmoddi4+0xa4>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c5 4300 	strd	r4, r3, [r5]
 80002a8:	4631      	mov	r1, r6
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d909      	bls.n	80002c6 <__udivmoddi4+0xc2>
 80002b2:	2d00      	cmp	r5, #0
 80002b4:	f000 80ef 	beq.w	8000496 <__udivmoddi4+0x292>
 80002b8:	2600      	movs	r6, #0
 80002ba:	e9c5 0100 	strd	r0, r1, [r5]
 80002be:	4630      	mov	r0, r6
 80002c0:	4631      	mov	r1, r6
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	fab3 f683 	clz	r6, r3
 80002ca:	2e00      	cmp	r6, #0
 80002cc:	d14a      	bne.n	8000364 <__udivmoddi4+0x160>
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d302      	bcc.n	80002d8 <__udivmoddi4+0xd4>
 80002d2:	4282      	cmp	r2, r0
 80002d4:	f200 80f9 	bhi.w	80004ca <__udivmoddi4+0x2c6>
 80002d8:	1a84      	subs	r4, r0, r2
 80002da:	eb61 0303 	sbc.w	r3, r1, r3
 80002de:	2001      	movs	r0, #1
 80002e0:	469e      	mov	lr, r3
 80002e2:	2d00      	cmp	r5, #0
 80002e4:	d0e0      	beq.n	80002a8 <__udivmoddi4+0xa4>
 80002e6:	e9c5 4e00 	strd	r4, lr, [r5]
 80002ea:	e7dd      	b.n	80002a8 <__udivmoddi4+0xa4>
 80002ec:	b902      	cbnz	r2, 80002f0 <__udivmoddi4+0xec>
 80002ee:	deff      	udf	#255	; 0xff
 80002f0:	fab2 f282 	clz	r2, r2
 80002f4:	2a00      	cmp	r2, #0
 80002f6:	f040 8092 	bne.w	800041e <__udivmoddi4+0x21a>
 80002fa:	eba1 010c 	sub.w	r1, r1, ip
 80002fe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000302:	fa1f fe8c 	uxth.w	lr, ip
 8000306:	2601      	movs	r6, #1
 8000308:	0c20      	lsrs	r0, r4, #16
 800030a:	fbb1 f3f7 	udiv	r3, r1, r7
 800030e:	fb07 1113 	mls	r1, r7, r3, r1
 8000312:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000316:	fb0e f003 	mul.w	r0, lr, r3
 800031a:	4288      	cmp	r0, r1
 800031c:	d908      	bls.n	8000330 <__udivmoddi4+0x12c>
 800031e:	eb1c 0101 	adds.w	r1, ip, r1
 8000322:	f103 38ff 	add.w	r8, r3, #4294967295
 8000326:	d202      	bcs.n	800032e <__udivmoddi4+0x12a>
 8000328:	4288      	cmp	r0, r1
 800032a:	f200 80cb 	bhi.w	80004c4 <__udivmoddi4+0x2c0>
 800032e:	4643      	mov	r3, r8
 8000330:	1a09      	subs	r1, r1, r0
 8000332:	b2a4      	uxth	r4, r4
 8000334:	fbb1 f0f7 	udiv	r0, r1, r7
 8000338:	fb07 1110 	mls	r1, r7, r0, r1
 800033c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000340:	fb0e fe00 	mul.w	lr, lr, r0
 8000344:	45a6      	cmp	lr, r4
 8000346:	d908      	bls.n	800035a <__udivmoddi4+0x156>
 8000348:	eb1c 0404 	adds.w	r4, ip, r4
 800034c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000350:	d202      	bcs.n	8000358 <__udivmoddi4+0x154>
 8000352:	45a6      	cmp	lr, r4
 8000354:	f200 80bb 	bhi.w	80004ce <__udivmoddi4+0x2ca>
 8000358:	4608      	mov	r0, r1
 800035a:	eba4 040e 	sub.w	r4, r4, lr
 800035e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000362:	e79c      	b.n	800029e <__udivmoddi4+0x9a>
 8000364:	f1c6 0720 	rsb	r7, r6, #32
 8000368:	40b3      	lsls	r3, r6
 800036a:	fa22 fc07 	lsr.w	ip, r2, r7
 800036e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000372:	fa20 f407 	lsr.w	r4, r0, r7
 8000376:	fa01 f306 	lsl.w	r3, r1, r6
 800037a:	431c      	orrs	r4, r3
 800037c:	40f9      	lsrs	r1, r7
 800037e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000382:	fa00 f306 	lsl.w	r3, r0, r6
 8000386:	fbb1 f8f9 	udiv	r8, r1, r9
 800038a:	0c20      	lsrs	r0, r4, #16
 800038c:	fa1f fe8c 	uxth.w	lr, ip
 8000390:	fb09 1118 	mls	r1, r9, r8, r1
 8000394:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000398:	fb08 f00e 	mul.w	r0, r8, lr
 800039c:	4288      	cmp	r0, r1
 800039e:	fa02 f206 	lsl.w	r2, r2, r6
 80003a2:	d90b      	bls.n	80003bc <__udivmoddi4+0x1b8>
 80003a4:	eb1c 0101 	adds.w	r1, ip, r1
 80003a8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003ac:	f080 8088 	bcs.w	80004c0 <__udivmoddi4+0x2bc>
 80003b0:	4288      	cmp	r0, r1
 80003b2:	f240 8085 	bls.w	80004c0 <__udivmoddi4+0x2bc>
 80003b6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ba:	4461      	add	r1, ip
 80003bc:	1a09      	subs	r1, r1, r0
 80003be:	b2a4      	uxth	r4, r4
 80003c0:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c4:	fb09 1110 	mls	r1, r9, r0, r1
 80003c8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003cc:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d0:	458e      	cmp	lr, r1
 80003d2:	d908      	bls.n	80003e6 <__udivmoddi4+0x1e2>
 80003d4:	eb1c 0101 	adds.w	r1, ip, r1
 80003d8:	f100 34ff 	add.w	r4, r0, #4294967295
 80003dc:	d26c      	bcs.n	80004b8 <__udivmoddi4+0x2b4>
 80003de:	458e      	cmp	lr, r1
 80003e0:	d96a      	bls.n	80004b8 <__udivmoddi4+0x2b4>
 80003e2:	3802      	subs	r0, #2
 80003e4:	4461      	add	r1, ip
 80003e6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ea:	fba0 9402 	umull	r9, r4, r0, r2
 80003ee:	eba1 010e 	sub.w	r1, r1, lr
 80003f2:	42a1      	cmp	r1, r4
 80003f4:	46c8      	mov	r8, r9
 80003f6:	46a6      	mov	lr, r4
 80003f8:	d356      	bcc.n	80004a8 <__udivmoddi4+0x2a4>
 80003fa:	d053      	beq.n	80004a4 <__udivmoddi4+0x2a0>
 80003fc:	b15d      	cbz	r5, 8000416 <__udivmoddi4+0x212>
 80003fe:	ebb3 0208 	subs.w	r2, r3, r8
 8000402:	eb61 010e 	sbc.w	r1, r1, lr
 8000406:	fa01 f707 	lsl.w	r7, r1, r7
 800040a:	fa22 f306 	lsr.w	r3, r2, r6
 800040e:	40f1      	lsrs	r1, r6
 8000410:	431f      	orrs	r7, r3
 8000412:	e9c5 7100 	strd	r7, r1, [r5]
 8000416:	2600      	movs	r6, #0
 8000418:	4631      	mov	r1, r6
 800041a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041e:	f1c2 0320 	rsb	r3, r2, #32
 8000422:	40d8      	lsrs	r0, r3
 8000424:	fa0c fc02 	lsl.w	ip, ip, r2
 8000428:	fa21 f303 	lsr.w	r3, r1, r3
 800042c:	4091      	lsls	r1, r2
 800042e:	4301      	orrs	r1, r0
 8000430:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000434:	fa1f fe8c 	uxth.w	lr, ip
 8000438:	fbb3 f0f7 	udiv	r0, r3, r7
 800043c:	fb07 3610 	mls	r6, r7, r0, r3
 8000440:	0c0b      	lsrs	r3, r1, #16
 8000442:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000446:	fb00 f60e 	mul.w	r6, r0, lr
 800044a:	429e      	cmp	r6, r3
 800044c:	fa04 f402 	lsl.w	r4, r4, r2
 8000450:	d908      	bls.n	8000464 <__udivmoddi4+0x260>
 8000452:	eb1c 0303 	adds.w	r3, ip, r3
 8000456:	f100 38ff 	add.w	r8, r0, #4294967295
 800045a:	d22f      	bcs.n	80004bc <__udivmoddi4+0x2b8>
 800045c:	429e      	cmp	r6, r3
 800045e:	d92d      	bls.n	80004bc <__udivmoddi4+0x2b8>
 8000460:	3802      	subs	r0, #2
 8000462:	4463      	add	r3, ip
 8000464:	1b9b      	subs	r3, r3, r6
 8000466:	b289      	uxth	r1, r1
 8000468:	fbb3 f6f7 	udiv	r6, r3, r7
 800046c:	fb07 3316 	mls	r3, r7, r6, r3
 8000470:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000474:	fb06 f30e 	mul.w	r3, r6, lr
 8000478:	428b      	cmp	r3, r1
 800047a:	d908      	bls.n	800048e <__udivmoddi4+0x28a>
 800047c:	eb1c 0101 	adds.w	r1, ip, r1
 8000480:	f106 38ff 	add.w	r8, r6, #4294967295
 8000484:	d216      	bcs.n	80004b4 <__udivmoddi4+0x2b0>
 8000486:	428b      	cmp	r3, r1
 8000488:	d914      	bls.n	80004b4 <__udivmoddi4+0x2b0>
 800048a:	3e02      	subs	r6, #2
 800048c:	4461      	add	r1, ip
 800048e:	1ac9      	subs	r1, r1, r3
 8000490:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000494:	e738      	b.n	8000308 <__udivmoddi4+0x104>
 8000496:	462e      	mov	r6, r5
 8000498:	4628      	mov	r0, r5
 800049a:	e705      	b.n	80002a8 <__udivmoddi4+0xa4>
 800049c:	4606      	mov	r6, r0
 800049e:	e6e3      	b.n	8000268 <__udivmoddi4+0x64>
 80004a0:	4618      	mov	r0, r3
 80004a2:	e6f8      	b.n	8000296 <__udivmoddi4+0x92>
 80004a4:	454b      	cmp	r3, r9
 80004a6:	d2a9      	bcs.n	80003fc <__udivmoddi4+0x1f8>
 80004a8:	ebb9 0802 	subs.w	r8, r9, r2
 80004ac:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b0:	3801      	subs	r0, #1
 80004b2:	e7a3      	b.n	80003fc <__udivmoddi4+0x1f8>
 80004b4:	4646      	mov	r6, r8
 80004b6:	e7ea      	b.n	800048e <__udivmoddi4+0x28a>
 80004b8:	4620      	mov	r0, r4
 80004ba:	e794      	b.n	80003e6 <__udivmoddi4+0x1e2>
 80004bc:	4640      	mov	r0, r8
 80004be:	e7d1      	b.n	8000464 <__udivmoddi4+0x260>
 80004c0:	46d0      	mov	r8, sl
 80004c2:	e77b      	b.n	80003bc <__udivmoddi4+0x1b8>
 80004c4:	3b02      	subs	r3, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	e732      	b.n	8000330 <__udivmoddi4+0x12c>
 80004ca:	4630      	mov	r0, r6
 80004cc:	e709      	b.n	80002e2 <__udivmoddi4+0xde>
 80004ce:	4464      	add	r4, ip
 80004d0:	3802      	subs	r0, #2
 80004d2:	e742      	b.n	800035a <__udivmoddi4+0x156>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <Animation_PWM_Pulse_Interrupt>:
void Animation_Timer_Error_Interrupt(){
	HAL_TIM_PWM_Stop_IT(&htim1, TIM_CHANNEL_1);
	animation_i = 0;
	animation_busy = 0;
}
void Animation_PWM_Pulse_Interrupt(){
 80004d8:	b580      	push	{r7, lr}
 80004da:	af00      	add	r7, sp, #0
	if(animation_i < ((animation_data_config.image_size * 8) + animation_data_config.stop_pulses)){
 80004dc:	4b2b      	ldr	r3, [pc, #172]	; (800058c <Animation_PWM_Pulse_Interrupt+0xb4>)
 80004de:	68db      	ldr	r3, [r3, #12]
 80004e0:	00db      	lsls	r3, r3, #3
 80004e2:	4a2a      	ldr	r2, [pc, #168]	; (800058c <Animation_PWM_Pulse_Interrupt+0xb4>)
 80004e4:	88d2      	ldrh	r2, [r2, #6]
 80004e6:	441a      	add	r2, r3
 80004e8:	4b29      	ldr	r3, [pc, #164]	; (8000590 <Animation_PWM_Pulse_Interrupt+0xb8>)
 80004ea:	681b      	ldr	r3, [r3, #0]
 80004ec:	429a      	cmp	r2, r3
 80004ee:	d944      	bls.n	800057a <Animation_PWM_Pulse_Interrupt+0xa2>
		if((animation_i + 1) >= ((animation_data_config.image_size * 8) + 1)){
 80004f0:	4b27      	ldr	r3, [pc, #156]	; (8000590 <Animation_PWM_Pulse_Interrupt+0xb8>)
 80004f2:	681b      	ldr	r3, [r3, #0]
 80004f4:	1c5a      	adds	r2, r3, #1
 80004f6:	4b25      	ldr	r3, [pc, #148]	; (800058c <Animation_PWM_Pulse_Interrupt+0xb4>)
 80004f8:	68db      	ldr	r3, [r3, #12]
 80004fa:	00db      	lsls	r3, r3, #3
 80004fc:	3301      	adds	r3, #1
 80004fe:	429a      	cmp	r2, r3
 8000500:	d304      	bcc.n	800050c <Animation_PWM_Pulse_Interrupt+0x34>
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 8000502:	4b24      	ldr	r3, [pc, #144]	; (8000594 <Animation_PWM_Pulse_Interrupt+0xbc>)
 8000504:	681b      	ldr	r3, [r3, #0]
 8000506:	2200      	movs	r2, #0
 8000508:	635a      	str	r2, [r3, #52]	; 0x34
 800050a:	e030      	b.n	800056e <Animation_PWM_Pulse_Interrupt+0x96>
		}else{
			switch(animation_mode){
 800050c:	4b22      	ldr	r3, [pc, #136]	; (8000598 <Animation_PWM_Pulse_Interrupt+0xc0>)
 800050e:	781b      	ldrb	r3, [r3, #0]
 8000510:	2b00      	cmp	r3, #0
 8000512:	d002      	beq.n	800051a <Animation_PWM_Pulse_Interrupt+0x42>
 8000514:	2b01      	cmp	r3, #1
 8000516:	d017      	beq.n	8000548 <Animation_PWM_Pulse_Interrupt+0x70>
 8000518:	e029      	b.n	800056e <Animation_PWM_Pulse_Interrupt+0x96>
				case ANIMATION_MODE_COLOR:
					Animation_Set_Bit((uint8_t)(((uint32_t)animation_color >> ((uint32_t)animation_i % 24)) & (uint32_t)1));
 800051a:	4b20      	ldr	r3, [pc, #128]	; (800059c <Animation_PWM_Pulse_Interrupt+0xc4>)
 800051c:	6818      	ldr	r0, [r3, #0]
 800051e:	4b1c      	ldr	r3, [pc, #112]	; (8000590 <Animation_PWM_Pulse_Interrupt+0xb8>)
 8000520:	6819      	ldr	r1, [r3, #0]
 8000522:	4b1f      	ldr	r3, [pc, #124]	; (80005a0 <Animation_PWM_Pulse_Interrupt+0xc8>)
 8000524:	fba3 2301 	umull	r2, r3, r3, r1
 8000528:	091a      	lsrs	r2, r3, #4
 800052a:	4613      	mov	r3, r2
 800052c:	005b      	lsls	r3, r3, #1
 800052e:	4413      	add	r3, r2
 8000530:	00db      	lsls	r3, r3, #3
 8000532:	1aca      	subs	r2, r1, r3
 8000534:	fa20 f302 	lsr.w	r3, r0, r2
 8000538:	b2db      	uxtb	r3, r3
 800053a:	f003 0301 	and.w	r3, r3, #1
 800053e:	b2db      	uxtb	r3, r3
 8000540:	4618      	mov	r0, r3
 8000542:	f000 f83d 	bl	80005c0 <Animation_Set_Bit>
				break;
 8000546:	e012      	b.n	800056e <Animation_PWM_Pulse_Interrupt+0x96>
				case ANIMATION_MODE_IMAGE:
					Animation_Set_Bit(Animation_Data_Get_Bit(animation_image, animation_i / 8, animation_i % 8));
 8000548:	4b16      	ldr	r3, [pc, #88]	; (80005a4 <Animation_PWM_Pulse_Interrupt+0xcc>)
 800054a:	8818      	ldrh	r0, [r3, #0]
 800054c:	4b10      	ldr	r3, [pc, #64]	; (8000590 <Animation_PWM_Pulse_Interrupt+0xb8>)
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	08d9      	lsrs	r1, r3, #3
 8000552:	4b0f      	ldr	r3, [pc, #60]	; (8000590 <Animation_PWM_Pulse_Interrupt+0xb8>)
 8000554:	681b      	ldr	r3, [r3, #0]
 8000556:	b2db      	uxtb	r3, r3
 8000558:	f003 0307 	and.w	r3, r3, #7
 800055c:	b2db      	uxtb	r3, r3
 800055e:	461a      	mov	r2, r3
 8000560:	f000 f964 	bl	800082c <Animation_Data_Get_Bit>
 8000564:	4603      	mov	r3, r0
 8000566:	4618      	mov	r0, r3
 8000568:	f000 f82a 	bl	80005c0 <Animation_Set_Bit>
				break;
 800056c:	bf00      	nop
			}
		}
		animation_i++;
 800056e:	4b08      	ldr	r3, [pc, #32]	; (8000590 <Animation_PWM_Pulse_Interrupt+0xb8>)
 8000570:	681b      	ldr	r3, [r3, #0]
 8000572:	3301      	adds	r3, #1
 8000574:	4a06      	ldr	r2, [pc, #24]	; (8000590 <Animation_PWM_Pulse_Interrupt+0xb8>)
 8000576:	6013      	str	r3, [r2, #0]
	}else{
		HAL_TIM_PWM_Stop_IT(&htim1, TIM_CHANNEL_1);
		animation_busy = 0;
	}
}
 8000578:	e006      	b.n	8000588 <Animation_PWM_Pulse_Interrupt+0xb0>
		HAL_TIM_PWM_Stop_IT(&htim1, TIM_CHANNEL_1);
 800057a:	2100      	movs	r1, #0
 800057c:	4805      	ldr	r0, [pc, #20]	; (8000594 <Animation_PWM_Pulse_Interrupt+0xbc>)
 800057e:	f005 fbbb 	bl	8005cf8 <HAL_TIM_PWM_Stop_IT>
		animation_busy = 0;
 8000582:	4b09      	ldr	r3, [pc, #36]	; (80005a8 <Animation_PWM_Pulse_Interrupt+0xd0>)
 8000584:	2200      	movs	r2, #0
 8000586:	701a      	strb	r2, [r3, #0]
}
 8000588:	bf00      	nop
 800058a:	bd80      	pop	{r7, pc}
 800058c:	20000154 	.word	0x20000154
 8000590:	20000150 	.word	0x20000150
 8000594:	20001234 	.word	0x20001234
 8000598:	20000145 	.word	0x20000145
 800059c:	20000148 	.word	0x20000148
 80005a0:	aaaaaaab 	.word	0xaaaaaaab
 80005a4:	2000014c 	.word	0x2000014c
 80005a8:	20000144 	.word	0x20000144

080005ac <Animation_Busy>:

uint8_t Animation_Busy(){
 80005ac:	b580      	push	{r7, lr}
 80005ae:	af00      	add	r7, sp, #0
	Animation_Data_Buffer();
 80005b0:	f000 fa44 	bl	8000a3c <Animation_Data_Buffer>
	return animation_busy;
 80005b4:	4b01      	ldr	r3, [pc, #4]	; (80005bc <Animation_Busy+0x10>)
 80005b6:	781b      	ldrb	r3, [r3, #0]
}
 80005b8:	4618      	mov	r0, r3
 80005ba:	bd80      	pop	{r7, pc}
 80005bc:	20000144 	.word	0x20000144

080005c0 <Animation_Set_Bit>:
void Animation_Set_Bit(uint8_t bit){
 80005c0:	b480      	push	{r7}
 80005c2:	b083      	sub	sp, #12
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	4603      	mov	r3, r0
 80005c8:	71fb      	strb	r3, [r7, #7]
	if(bit){
 80005ca:	79fb      	ldrb	r3, [r7, #7]
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d005      	beq.n	80005dc <Animation_Set_Bit+0x1c>
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, animation_data_config.bit_1);
 80005d0:	4b08      	ldr	r3, [pc, #32]	; (80005f4 <Animation_Set_Bit+0x34>)
 80005d2:	791a      	ldrb	r2, [r3, #4]
 80005d4:	4b08      	ldr	r3, [pc, #32]	; (80005f8 <Animation_Set_Bit+0x38>)
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	635a      	str	r2, [r3, #52]	; 0x34
	}else{
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, animation_data_config.bit_0);
	}
}
 80005da:	e004      	b.n	80005e6 <Animation_Set_Bit+0x26>
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, animation_data_config.bit_0);
 80005dc:	4b05      	ldr	r3, [pc, #20]	; (80005f4 <Animation_Set_Bit+0x34>)
 80005de:	78da      	ldrb	r2, [r3, #3]
 80005e0:	4b05      	ldr	r3, [pc, #20]	; (80005f8 <Animation_Set_Bit+0x38>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	635a      	str	r2, [r3, #52]	; 0x34
}
 80005e6:	bf00      	nop
 80005e8:	370c      	adds	r7, #12
 80005ea:	46bd      	mov	sp, r7
 80005ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f0:	4770      	bx	lr
 80005f2:	bf00      	nop
 80005f4:	20000154 	.word	0x20000154
 80005f8:	20001234 	.word	0x20001234

080005fc <Animation_Display_Color>:
void Animation_Stop(){
	HAL_TIM_PWM_Stop_IT(&htim1, TIM_CHANNEL_1);
	animation_i = 0;
	animation_busy = 0;
}
void Animation_Display_Color(uint32_t color){
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b082      	sub	sp, #8
 8000600:	af00      	add	r7, sp, #0
 8000602:	6078      	str	r0, [r7, #4]
	if(animation_data_config.image_size){
 8000604:	4b10      	ldr	r3, [pc, #64]	; (8000648 <Animation_Display_Color+0x4c>)
 8000606:	68db      	ldr	r3, [r3, #12]
 8000608:	2b00      	cmp	r3, #0
 800060a:	d018      	beq.n	800063e <Animation_Display_Color+0x42>
		animation_busy = 1;
 800060c:	4b0f      	ldr	r3, [pc, #60]	; (800064c <Animation_Display_Color+0x50>)
 800060e:	2201      	movs	r2, #1
 8000610:	701a      	strb	r2, [r3, #0]
		animation_i = 0;
 8000612:	4b0f      	ldr	r3, [pc, #60]	; (8000650 <Animation_Display_Color+0x54>)
 8000614:	2200      	movs	r2, #0
 8000616:	601a      	str	r2, [r3, #0]
		animation_color = color;
 8000618:	4a0e      	ldr	r2, [pc, #56]	; (8000654 <Animation_Display_Color+0x58>)
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	6013      	str	r3, [r2, #0]
		animation_mode = ANIMATION_MODE_COLOR;
 800061e:	4b0e      	ldr	r3, [pc, #56]	; (8000658 <Animation_Display_Color+0x5c>)
 8000620:	2200      	movs	r2, #0
 8000622:	701a      	strb	r2, [r3, #0]

		HAL_TIM_PWM_PulseFinishedCallback(&htim1);
 8000624:	480d      	ldr	r0, [pc, #52]	; (800065c <Animation_Display_Color+0x60>)
 8000626:	f000 fb2d 	bl	8000c84 <HAL_TIM_PWM_PulseFinishedCallback>
		HAL_TIM_PWM_Start_IT(&htim1, TIM_CHANNEL_1);
 800062a:	2100      	movs	r1, #0
 800062c:	480b      	ldr	r0, [pc, #44]	; (800065c <Animation_Display_Color+0x60>)
 800062e:	f005 fa65 	bl	8005afc <HAL_TIM_PWM_Start_IT>
		while(Animation_Busy());
 8000632:	bf00      	nop
 8000634:	f7ff ffba 	bl	80005ac <Animation_Busy>
 8000638:	4603      	mov	r3, r0
 800063a:	2b00      	cmp	r3, #0
 800063c:	d1fa      	bne.n	8000634 <Animation_Display_Color+0x38>
	}
}
 800063e:	bf00      	nop
 8000640:	3708      	adds	r7, #8
 8000642:	46bd      	mov	sp, r7
 8000644:	bd80      	pop	{r7, pc}
 8000646:	bf00      	nop
 8000648:	20000154 	.word	0x20000154
 800064c:	20000144 	.word	0x20000144
 8000650:	20000150 	.word	0x20000150
 8000654:	20000148 	.word	0x20000148
 8000658:	20000145 	.word	0x20000145
 800065c:	20001234 	.word	0x20001234

08000660 <Animation_Display_Image>:
void Animation_Display_Image(uint16_t image){
 8000660:	b580      	push	{r7, lr}
 8000662:	b082      	sub	sp, #8
 8000664:	af00      	add	r7, sp, #0
 8000666:	4603      	mov	r3, r0
 8000668:	80fb      	strh	r3, [r7, #6]
	if((image < animation_data_config.images) && animation_data_config.image_size){
 800066a:	88fa      	ldrh	r2, [r7, #6]
 800066c:	4b14      	ldr	r3, [pc, #80]	; (80006c0 <Animation_Display_Image+0x60>)
 800066e:	689b      	ldr	r3, [r3, #8]
 8000670:	429a      	cmp	r2, r3
 8000672:	d220      	bcs.n	80006b6 <Animation_Display_Image+0x56>
 8000674:	4b12      	ldr	r3, [pc, #72]	; (80006c0 <Animation_Display_Image+0x60>)
 8000676:	68db      	ldr	r3, [r3, #12]
 8000678:	2b00      	cmp	r3, #0
 800067a:	d01c      	beq.n	80006b6 <Animation_Display_Image+0x56>
		animation_busy = 1;
 800067c:	4b11      	ldr	r3, [pc, #68]	; (80006c4 <Animation_Display_Image+0x64>)
 800067e:	2201      	movs	r2, #1
 8000680:	701a      	strb	r2, [r3, #0]
		animation_image = image;
 8000682:	4a11      	ldr	r2, [pc, #68]	; (80006c8 <Animation_Display_Image+0x68>)
 8000684:	88fb      	ldrh	r3, [r7, #6]
 8000686:	8013      	strh	r3, [r2, #0]
		animation_i = 0;
 8000688:	4b10      	ldr	r3, [pc, #64]	; (80006cc <Animation_Display_Image+0x6c>)
 800068a:	2200      	movs	r2, #0
 800068c:	601a      	str	r2, [r3, #0]
		animation_mode = ANIMATION_MODE_IMAGE;
 800068e:	4b10      	ldr	r3, [pc, #64]	; (80006d0 <Animation_Display_Image+0x70>)
 8000690:	2201      	movs	r2, #1
 8000692:	701a      	strb	r2, [r3, #0]

		Animation_Data_Prefetch(image);
 8000694:	88fb      	ldrh	r3, [r7, #6]
 8000696:	4618      	mov	r0, r3
 8000698:	f000 f846 	bl	8000728 <Animation_Data_Prefetch>
		HAL_TIM_PWM_PulseFinishedCallback(&htim1);
 800069c:	480d      	ldr	r0, [pc, #52]	; (80006d4 <Animation_Display_Image+0x74>)
 800069e:	f000 faf1 	bl	8000c84 <HAL_TIM_PWM_PulseFinishedCallback>
		HAL_TIM_PWM_Start_IT(&htim1, TIM_CHANNEL_1);
 80006a2:	2100      	movs	r1, #0
 80006a4:	480b      	ldr	r0, [pc, #44]	; (80006d4 <Animation_Display_Image+0x74>)
 80006a6:	f005 fa29 	bl	8005afc <HAL_TIM_PWM_Start_IT>
		while(Animation_Busy());
 80006aa:	bf00      	nop
 80006ac:	f7ff ff7e 	bl	80005ac <Animation_Busy>
 80006b0:	4603      	mov	r3, r0
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d1fa      	bne.n	80006ac <Animation_Display_Image+0x4c>
	}
}
 80006b6:	bf00      	nop
 80006b8:	3708      	adds	r7, #8
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bd80      	pop	{r7, pc}
 80006be:	bf00      	nop
 80006c0:	20000154 	.word	0x20000154
 80006c4:	20000144 	.word	0x20000144
 80006c8:	2000014c 	.word	0x2000014c
 80006cc:	20000150 	.word	0x20000150
 80006d0:	20000145 	.word	0x20000145
 80006d4:	20001234 	.word	0x20001234

080006d8 <Animation_Init>:
void Animation_Init(){
 80006d8:	b580      	push	{r7, lr}
 80006da:	af00      	add	r7, sp, #0
	Animation_Data_Init();
 80006dc:	f000 f8e2 	bl	80008a4 <Animation_Data_Init>

	if(animation_data_config.images && animation_data_config.image_size){
 80006e0:	4b0f      	ldr	r3, [pc, #60]	; (8000720 <Animation_Init+0x48>)
 80006e2:	689b      	ldr	r3, [r3, #8]
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d018      	beq.n	800071a <Animation_Init+0x42>
 80006e8:	4b0d      	ldr	r3, [pc, #52]	; (8000720 <Animation_Init+0x48>)
 80006ea:	68db      	ldr	r3, [r3, #12]
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d014      	beq.n	800071a <Animation_Init+0x42>
		htim1.Init.Prescaler = animation_data_config.clkdiv;
 80006f0:	4b0b      	ldr	r3, [pc, #44]	; (8000720 <Animation_Init+0x48>)
 80006f2:	881b      	ldrh	r3, [r3, #0]
 80006f4:	461a      	mov	r2, r3
 80006f6:	4b0b      	ldr	r3, [pc, #44]	; (8000724 <Animation_Init+0x4c>)
 80006f8:	605a      	str	r2, [r3, #4]
		htim1.Init.Period = animation_data_config.pulse;
 80006fa:	4b09      	ldr	r3, [pc, #36]	; (8000720 <Animation_Init+0x48>)
 80006fc:	789b      	ldrb	r3, [r3, #2]
 80006fe:	461a      	mov	r2, r3
 8000700:	4b08      	ldr	r3, [pc, #32]	; (8000724 <Animation_Init+0x4c>)
 8000702:	60da      	str	r2, [r3, #12]
		if(HAL_TIM_Base_Init(&htim1) != HAL_OK){Error_Handler();}
 8000704:	4807      	ldr	r0, [pc, #28]	; (8000724 <Animation_Init+0x4c>)
 8000706:	f005 f951 	bl	80059ac <HAL_TIM_Base_Init>
 800070a:	4603      	mov	r3, r0
 800070c:	2b00      	cmp	r3, #0
 800070e:	d001      	beq.n	8000714 <Animation_Init+0x3c>
 8000710:	f000 ff76 	bl	8001600 <Error_Handler>
		Animation_Display_Color(0);
 8000714:	2000      	movs	r0, #0
 8000716:	f7ff ff71 	bl	80005fc <Animation_Display_Color>
	}
}
 800071a:	bf00      	nop
 800071c:	bd80      	pop	{r7, pc}
 800071e:	bf00      	nop
 8000720:	20000154 	.word	0x20000154
 8000724:	20001234 	.word	0x20001234

08000728 <Animation_Data_Prefetch>:
static uint8_t animation_data[ANIMATION_DATA_BUFFER_SIZE];
static uint32_t animation_data_buffered = 0;
static uint8_t animation_data_buffering_rq = 0;
static uint16_t animation_data_buffering_image = 0;

void Animation_Data_Prefetch(uint16_t image){
 8000728:	b580      	push	{r7, lr}
 800072a:	b084      	sub	sp, #16
 800072c:	af00      	add	r7, sp, #0
 800072e:	4603      	mov	r3, r0
 8000730:	80fb      	strh	r3, [r7, #6]
	uint32_t data_size = 0;
 8000732:	2300      	movs	r3, #0
 8000734:	60fb      	str	r3, [r7, #12]
	if(animation_data_config.image_size < ANIMATION_DATA_BUFFER_SIZE){
 8000736:	4b11      	ldr	r3, [pc, #68]	; (800077c <Animation_Data_Prefetch+0x54>)
 8000738:	68db      	ldr	r3, [r3, #12]
 800073a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800073e:	d203      	bcs.n	8000748 <Animation_Data_Prefetch+0x20>
		data_size = animation_data_config.image_size;
 8000740:	4b0e      	ldr	r3, [pc, #56]	; (800077c <Animation_Data_Prefetch+0x54>)
 8000742:	68db      	ldr	r3, [r3, #12]
 8000744:	60fb      	str	r3, [r7, #12]
 8000746:	e002      	b.n	800074e <Animation_Data_Prefetch+0x26>
	}else{
		data_size = ANIMATION_DATA_BUFFER_SIZE;
 8000748:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800074c:	60fb      	str	r3, [r7, #12]
	}
	W25Q_Read(animation_data, ANIMATION_DATA_HEADER_SIZE + (animation_data_config.image_size * image), data_size);
 800074e:	4b0b      	ldr	r3, [pc, #44]	; (800077c <Animation_Data_Prefetch+0x54>)
 8000750:	68db      	ldr	r3, [r3, #12]
 8000752:	88fa      	ldrh	r2, [r7, #6]
 8000754:	fb02 f303 	mul.w	r3, r2, r3
 8000758:	3313      	adds	r3, #19
 800075a:	68fa      	ldr	r2, [r7, #12]
 800075c:	b292      	uxth	r2, r2
 800075e:	4619      	mov	r1, r3
 8000760:	4807      	ldr	r0, [pc, #28]	; (8000780 <Animation_Data_Prefetch+0x58>)
 8000762:	f000 fce7 	bl	8001134 <W25Q_Read>
	animation_data_buffered = data_size;
 8000766:	4a07      	ldr	r2, [pc, #28]	; (8000784 <Animation_Data_Prefetch+0x5c>)
 8000768:	68fb      	ldr	r3, [r7, #12]
 800076a:	6013      	str	r3, [r2, #0]
	animation_data_buffering_rq = 0;
 800076c:	4b06      	ldr	r3, [pc, #24]	; (8000788 <Animation_Data_Prefetch+0x60>)
 800076e:	2200      	movs	r2, #0
 8000770:	701a      	strb	r2, [r3, #0]
}
 8000772:	bf00      	nop
 8000774:	3710      	adds	r7, #16
 8000776:	46bd      	mov	sp, r7
 8000778:	bd80      	pop	{r7, pc}
 800077a:	bf00      	nop
 800077c:	20000154 	.word	0x20000154
 8000780:	20000164 	.word	0x20000164
 8000784:	20001164 	.word	0x20001164
 8000788:	20001168 	.word	0x20001168

0800078c <Animation_Data_Read>:
void Animation_Data_Read(uint16_t image){
 800078c:	b580      	push	{r7, lr}
 800078e:	b084      	sub	sp, #16
 8000790:	af00      	add	r7, sp, #0
 8000792:	4603      	mov	r3, r0
 8000794:	80fb      	strh	r3, [r7, #6]
	uint32_t data_size = 0;
 8000796:	2300      	movs	r3, #0
 8000798:	60fb      	str	r3, [r7, #12]
	if((animation_data_config.image_size - animation_data_buffered) < ANIMATION_DATA_BUFFER_SIZE_HALF){
 800079a:	4b20      	ldr	r3, [pc, #128]	; (800081c <Animation_Data_Read+0x90>)
 800079c:	68da      	ldr	r2, [r3, #12]
 800079e:	4b20      	ldr	r3, [pc, #128]	; (8000820 <Animation_Data_Read+0x94>)
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	1ad3      	subs	r3, r2, r3
 80007a4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80007a8:	d206      	bcs.n	80007b8 <Animation_Data_Read+0x2c>
		data_size = animation_data_config.image_size - animation_data_buffered;
 80007aa:	4b1c      	ldr	r3, [pc, #112]	; (800081c <Animation_Data_Read+0x90>)
 80007ac:	68da      	ldr	r2, [r3, #12]
 80007ae:	4b1c      	ldr	r3, [pc, #112]	; (8000820 <Animation_Data_Read+0x94>)
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	1ad3      	subs	r3, r2, r3
 80007b4:	60fb      	str	r3, [r7, #12]
 80007b6:	e002      	b.n	80007be <Animation_Data_Read+0x32>
	}else{
		data_size = ANIMATION_DATA_BUFFER_SIZE_HALF;
 80007b8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80007bc:	60fb      	str	r3, [r7, #12]
	}

	if(!(animation_data_buffered % ANIMATION_DATA_BUFFER_SIZE)){
 80007be:	4b18      	ldr	r3, [pc, #96]	; (8000820 <Animation_Data_Read+0x94>)
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d10f      	bne.n	80007ea <Animation_Data_Read+0x5e>
		//If requested byte 0 of buffer
		W25Q_Read_DMA(&animation_data[0], data_size, ANIMATION_DATA_HEADER_SIZE + (animation_data_config.image_size * image) + animation_data_buffered);
 80007ca:	68fb      	ldr	r3, [r7, #12]
 80007cc:	b299      	uxth	r1, r3
 80007ce:	4b13      	ldr	r3, [pc, #76]	; (800081c <Animation_Data_Read+0x90>)
 80007d0:	68db      	ldr	r3, [r3, #12]
 80007d2:	88fa      	ldrh	r2, [r7, #6]
 80007d4:	fb03 f202 	mul.w	r2, r3, r2
 80007d8:	4b11      	ldr	r3, [pc, #68]	; (8000820 <Animation_Data_Read+0x94>)
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	4413      	add	r3, r2
 80007de:	3313      	adds	r3, #19
 80007e0:	461a      	mov	r2, r3
 80007e2:	4810      	ldr	r0, [pc, #64]	; (8000824 <Animation_Data_Read+0x98>)
 80007e4:	f000 fc6e 	bl	80010c4 <W25Q_Read_DMA>
 80007e8:	e00e      	b.n	8000808 <Animation_Data_Read+0x7c>
	}else{
		//If requested middle right byte of buffer
		W25Q_Read_DMA(&animation_data[ANIMATION_DATA_BUFFER_SIZE_HALF], data_size, ANIMATION_DATA_HEADER_SIZE + (animation_data_config.image_size * image) + animation_data_buffered);
 80007ea:	68fb      	ldr	r3, [r7, #12]
 80007ec:	b299      	uxth	r1, r3
 80007ee:	4b0b      	ldr	r3, [pc, #44]	; (800081c <Animation_Data_Read+0x90>)
 80007f0:	68db      	ldr	r3, [r3, #12]
 80007f2:	88fa      	ldrh	r2, [r7, #6]
 80007f4:	fb03 f202 	mul.w	r2, r3, r2
 80007f8:	4b09      	ldr	r3, [pc, #36]	; (8000820 <Animation_Data_Read+0x94>)
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	4413      	add	r3, r2
 80007fe:	3313      	adds	r3, #19
 8000800:	461a      	mov	r2, r3
 8000802:	4809      	ldr	r0, [pc, #36]	; (8000828 <Animation_Data_Read+0x9c>)
 8000804:	f000 fc5e 	bl	80010c4 <W25Q_Read_DMA>
	}

	animation_data_buffered += data_size;
 8000808:	4b05      	ldr	r3, [pc, #20]	; (8000820 <Animation_Data_Read+0x94>)
 800080a:	681a      	ldr	r2, [r3, #0]
 800080c:	68fb      	ldr	r3, [r7, #12]
 800080e:	4413      	add	r3, r2
 8000810:	4a03      	ldr	r2, [pc, #12]	; (8000820 <Animation_Data_Read+0x94>)
 8000812:	6013      	str	r3, [r2, #0]
}
 8000814:	bf00      	nop
 8000816:	3710      	adds	r7, #16
 8000818:	46bd      	mov	sp, r7
 800081a:	bd80      	pop	{r7, pc}
 800081c:	20000154 	.word	0x20000154
 8000820:	20001164 	.word	0x20001164
 8000824:	20000164 	.word	0x20000164
 8000828:	20000964 	.word	0x20000964

0800082c <Animation_Data_Get_Bit>:
uint8_t Animation_Data_Get_Bit(uint16_t image, uint32_t byte, uint8_t bit){
 800082c:	b480      	push	{r7}
 800082e:	b083      	sub	sp, #12
 8000830:	af00      	add	r7, sp, #0
 8000832:	4603      	mov	r3, r0
 8000834:	6039      	str	r1, [r7, #0]
 8000836:	80fb      	strh	r3, [r7, #6]
 8000838:	4613      	mov	r3, r2
 800083a:	717b      	strb	r3, [r7, #5]
	if(byte && !(byte % ANIMATION_DATA_BUFFER_SIZE_HALF) && !bit){
 800083c:	683b      	ldr	r3, [r7, #0]
 800083e:	2b00      	cmp	r3, #0
 8000840:	d013      	beq.n	800086a <Animation_Data_Get_Bit+0x3e>
 8000842:	683b      	ldr	r3, [r7, #0]
 8000844:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000848:	2b00      	cmp	r3, #0
 800084a:	d10e      	bne.n	800086a <Animation_Data_Get_Bit+0x3e>
 800084c:	797b      	ldrb	r3, [r7, #5]
 800084e:	2b00      	cmp	r3, #0
 8000850:	d10b      	bne.n	800086a <Animation_Data_Get_Bit+0x3e>
		//If requested first bit of first byte from first or second half of buffer
		if(animation_data_buffered < animation_data_config.image_size){
 8000852:	4b0f      	ldr	r3, [pc, #60]	; (8000890 <Animation_Data_Get_Bit+0x64>)
 8000854:	68da      	ldr	r2, [r3, #12]
 8000856:	4b0f      	ldr	r3, [pc, #60]	; (8000894 <Animation_Data_Get_Bit+0x68>)
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	429a      	cmp	r2, r3
 800085c:	d905      	bls.n	800086a <Animation_Data_Get_Bit+0x3e>
			animation_data_buffering_image = image;
 800085e:	4a0e      	ldr	r2, [pc, #56]	; (8000898 <Animation_Data_Get_Bit+0x6c>)
 8000860:	88fb      	ldrh	r3, [r7, #6]
 8000862:	8013      	strh	r3, [r2, #0]
			animation_data_buffering_rq = 1;
 8000864:	4b0d      	ldr	r3, [pc, #52]	; (800089c <Animation_Data_Get_Bit+0x70>)
 8000866:	2201      	movs	r2, #1
 8000868:	701a      	strb	r2, [r3, #0]
		}
	}

	return (animation_data[byte % ANIMATION_DATA_BUFFER_SIZE] >> bit) & 1;
 800086a:	683b      	ldr	r3, [r7, #0]
 800086c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000870:	4a0b      	ldr	r2, [pc, #44]	; (80008a0 <Animation_Data_Get_Bit+0x74>)
 8000872:	5cd3      	ldrb	r3, [r2, r3]
 8000874:	461a      	mov	r2, r3
 8000876:	797b      	ldrb	r3, [r7, #5]
 8000878:	fa42 f303 	asr.w	r3, r2, r3
 800087c:	b2db      	uxtb	r3, r3
 800087e:	f003 0301 	and.w	r3, r3, #1
 8000882:	b2db      	uxtb	r3, r3
}
 8000884:	4618      	mov	r0, r3
 8000886:	370c      	adds	r7, #12
 8000888:	46bd      	mov	sp, r7
 800088a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088e:	4770      	bx	lr
 8000890:	20000154 	.word	0x20000154
 8000894:	20001164 	.word	0x20001164
 8000898:	2000116a 	.word	0x2000116a
 800089c:	20001168 	.word	0x20001168
 80008a0:	20000164 	.word	0x20000164

080008a4 <Animation_Data_Init>:
void Animation_Data_Init(){
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b086      	sub	sp, #24
 80008a8:	af00      	add	r7, sp, #0
	uint8_t data_error = 0;
 80008aa:	2300      	movs	r3, #0
 80008ac:	75fb      	strb	r3, [r7, #23]
	//Check size
	uint32_t data_size = 0;
 80008ae:	2300      	movs	r3, #0
 80008b0:	60bb      	str	r3, [r7, #8]
	W25Q_Read((uint8_t *)&data_size, 0, 4);
 80008b2:	f107 0308 	add.w	r3, r7, #8
 80008b6:	2204      	movs	r2, #4
 80008b8:	2100      	movs	r1, #0
 80008ba:	4618      	mov	r0, r3
 80008bc:	f000 fc3a 	bl	8001134 <W25Q_Read>
	if(data_size <= ANIMATION_DATA_MAX_SIZE){
 80008c0:	68bb      	ldr	r3, [r7, #8]
 80008c2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80008c6:	f200 8095 	bhi.w	80009f4 <Animation_Data_Init+0x150>
		//Read CRC
		uint32_t data_crc = 0;
 80008ca:	2300      	movs	r3, #0
 80008cc:	607b      	str	r3, [r7, #4]
		W25Q_Read((uint8_t *)&data_crc, data_size - 4, 4);
 80008ce:	68bb      	ldr	r3, [r7, #8]
 80008d0:	1f19      	subs	r1, r3, #4
 80008d2:	1d3b      	adds	r3, r7, #4
 80008d4:	2204      	movs	r2, #4
 80008d6:	4618      	mov	r0, r3
 80008d8:	f000 fc2c 	bl	8001134 <W25Q_Read>

		//Subtract CRC length
		data_size -= 4;
 80008dc:	68bb      	ldr	r3, [r7, #8]
 80008de:	3b04      	subs	r3, #4
 80008e0:	60bb      	str	r3, [r7, #8]
		//Calculate actual CRC
		uint32_t data_crc_actual = 0;
 80008e2:	2300      	movs	r3, #0
 80008e4:	60fb      	str	r3, [r7, #12]
		uint32_t i = 0;
 80008e6:	2300      	movs	r3, #0
 80008e8:	613b      	str	r3, [r7, #16]
		while(i != data_size){
 80008ea:	e038      	b.n	800095e <Animation_Data_Init+0xba>
			if((data_size - i) < ANIMATION_DATA_BUFFER_SIZE){
 80008ec:	68ba      	ldr	r2, [r7, #8]
 80008ee:	693b      	ldr	r3, [r7, #16]
 80008f0:	1ad3      	subs	r3, r2, r3
 80008f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80008f6:	d21b      	bcs.n	8000930 <Animation_Data_Init+0x8c>
				W25Q_Read(&animation_data[i], i, data_size - i);
 80008f8:	693b      	ldr	r3, [r7, #16]
 80008fa:	4a4d      	ldr	r2, [pc, #308]	; (8000a30 <Animation_Data_Init+0x18c>)
 80008fc:	1898      	adds	r0, r3, r2
 80008fe:	68bb      	ldr	r3, [r7, #8]
 8000900:	b29a      	uxth	r2, r3
 8000902:	693b      	ldr	r3, [r7, #16]
 8000904:	b29b      	uxth	r3, r3
 8000906:	1ad3      	subs	r3, r2, r3
 8000908:	b29b      	uxth	r3, r3
 800090a:	461a      	mov	r2, r3
 800090c:	6939      	ldr	r1, [r7, #16]
 800090e:	f000 fc11 	bl	8001134 <W25Q_Read>
				//!TBD
				data_crc_actual = HAL_CRC_Calculate(&hcrc, (uint32_t *)&animation_data[i], (data_size - i) / 4);
 8000912:	693b      	ldr	r3, [r7, #16]
 8000914:	4a46      	ldr	r2, [pc, #280]	; (8000a30 <Animation_Data_Init+0x18c>)
 8000916:	1899      	adds	r1, r3, r2
 8000918:	68ba      	ldr	r2, [r7, #8]
 800091a:	693b      	ldr	r3, [r7, #16]
 800091c:	1ad3      	subs	r3, r2, r3
 800091e:	089b      	lsrs	r3, r3, #2
 8000920:	461a      	mov	r2, r3
 8000922:	4844      	ldr	r0, [pc, #272]	; (8000a34 <Animation_Data_Init+0x190>)
 8000924:	f001 fa1f 	bl	8001d66 <HAL_CRC_Calculate>
 8000928:	60f8      	str	r0, [r7, #12]
				i += data_size - i;
 800092a:	68bb      	ldr	r3, [r7, #8]
 800092c:	613b      	str	r3, [r7, #16]
 800092e:	e016      	b.n	800095e <Animation_Data_Init+0xba>
			}else{
				W25Q_Read(&animation_data[i], i, ANIMATION_DATA_BUFFER_SIZE);
 8000930:	693b      	ldr	r3, [r7, #16]
 8000932:	4a3f      	ldr	r2, [pc, #252]	; (8000a30 <Animation_Data_Init+0x18c>)
 8000934:	4413      	add	r3, r2
 8000936:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800093a:	6939      	ldr	r1, [r7, #16]
 800093c:	4618      	mov	r0, r3
 800093e:	f000 fbf9 	bl	8001134 <W25Q_Read>
				//!TBD
				data_crc_actual = HAL_CRC_Calculate(&hcrc, (uint32_t *)&animation_data[i], ANIMATION_DATA_BUFFER_SIZE / 4);
 8000942:	693b      	ldr	r3, [r7, #16]
 8000944:	4a3a      	ldr	r2, [pc, #232]	; (8000a30 <Animation_Data_Init+0x18c>)
 8000946:	4413      	add	r3, r2
 8000948:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800094c:	4619      	mov	r1, r3
 800094e:	4839      	ldr	r0, [pc, #228]	; (8000a34 <Animation_Data_Init+0x190>)
 8000950:	f001 fa09 	bl	8001d66 <HAL_CRC_Calculate>
 8000954:	60f8      	str	r0, [r7, #12]
				i += ANIMATION_DATA_BUFFER_SIZE;
 8000956:	693b      	ldr	r3, [r7, #16]
 8000958:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800095c:	613b      	str	r3, [r7, #16]
		while(i != data_size){
 800095e:	68bb      	ldr	r3, [r7, #8]
 8000960:	693a      	ldr	r2, [r7, #16]
 8000962:	429a      	cmp	r2, r3
 8000964:	d1c2      	bne.n	80008ec <Animation_Data_Init+0x48>
		//Check CRC
		//!TBD
		//if(data_crc_actual == data_crc){
		if(1){
			//Read animation data configuration
			uint32_t data = 0;
 8000966:	2300      	movs	r3, #0
 8000968:	603b      	str	r3, [r7, #0]
			W25Q_Read((uint8_t *)&data, 4, 2);
 800096a:	463b      	mov	r3, r7
 800096c:	2202      	movs	r2, #2
 800096e:	2104      	movs	r1, #4
 8000970:	4618      	mov	r0, r3
 8000972:	f000 fbdf 	bl	8001134 <W25Q_Read>
			animation_data_config.clkdiv = *(uint16_t *)&data;
 8000976:	463b      	mov	r3, r7
 8000978:	881a      	ldrh	r2, [r3, #0]
 800097a:	4b2f      	ldr	r3, [pc, #188]	; (8000a38 <Animation_Data_Init+0x194>)
 800097c:	801a      	strh	r2, [r3, #0]
			W25Q_Read((uint8_t *)&data, 6, 1);
 800097e:	463b      	mov	r3, r7
 8000980:	2201      	movs	r2, #1
 8000982:	2106      	movs	r1, #6
 8000984:	4618      	mov	r0, r3
 8000986:	f000 fbd5 	bl	8001134 <W25Q_Read>
			animation_data_config.pulse = *(uint8_t *)&data;
 800098a:	463b      	mov	r3, r7
 800098c:	781a      	ldrb	r2, [r3, #0]
 800098e:	4b2a      	ldr	r3, [pc, #168]	; (8000a38 <Animation_Data_Init+0x194>)
 8000990:	709a      	strb	r2, [r3, #2]
			W25Q_Read((uint8_t *)&data, 7, 1);
 8000992:	463b      	mov	r3, r7
 8000994:	2201      	movs	r2, #1
 8000996:	2107      	movs	r1, #7
 8000998:	4618      	mov	r0, r3
 800099a:	f000 fbcb 	bl	8001134 <W25Q_Read>
			animation_data_config.bit_0 = *(uint8_t *)&data;
 800099e:	463b      	mov	r3, r7
 80009a0:	781a      	ldrb	r2, [r3, #0]
 80009a2:	4b25      	ldr	r3, [pc, #148]	; (8000a38 <Animation_Data_Init+0x194>)
 80009a4:	70da      	strb	r2, [r3, #3]
			W25Q_Read((uint8_t *)&data, 8, 1);
 80009a6:	463b      	mov	r3, r7
 80009a8:	2201      	movs	r2, #1
 80009aa:	2108      	movs	r1, #8
 80009ac:	4618      	mov	r0, r3
 80009ae:	f000 fbc1 	bl	8001134 <W25Q_Read>
			animation_data_config.bit_1 = *(uint8_t *)&data;
 80009b2:	463b      	mov	r3, r7
 80009b4:	781a      	ldrb	r2, [r3, #0]
 80009b6:	4b20      	ldr	r3, [pc, #128]	; (8000a38 <Animation_Data_Init+0x194>)
 80009b8:	711a      	strb	r2, [r3, #4]
			W25Q_Read((uint8_t *)&data, 9, 2);
 80009ba:	463b      	mov	r3, r7
 80009bc:	2202      	movs	r2, #2
 80009be:	2109      	movs	r1, #9
 80009c0:	4618      	mov	r0, r3
 80009c2:	f000 fbb7 	bl	8001134 <W25Q_Read>
			animation_data_config.stop_pulses = *(uint16_t *)&data;
 80009c6:	463b      	mov	r3, r7
 80009c8:	881a      	ldrh	r2, [r3, #0]
 80009ca:	4b1b      	ldr	r3, [pc, #108]	; (8000a38 <Animation_Data_Init+0x194>)
 80009cc:	80da      	strh	r2, [r3, #6]
			W25Q_Read((uint8_t *)&data, 11, 4);
 80009ce:	463b      	mov	r3, r7
 80009d0:	2204      	movs	r2, #4
 80009d2:	210b      	movs	r1, #11
 80009d4:	4618      	mov	r0, r3
 80009d6:	f000 fbad 	bl	8001134 <W25Q_Read>
			animation_data_config.images = *(uint32_t *)&data;
 80009da:	683b      	ldr	r3, [r7, #0]
 80009dc:	4a16      	ldr	r2, [pc, #88]	; (8000a38 <Animation_Data_Init+0x194>)
 80009de:	6093      	str	r3, [r2, #8]
			W25Q_Read((uint8_t *)&data, 15, 4);
 80009e0:	463b      	mov	r3, r7
 80009e2:	2204      	movs	r2, #4
 80009e4:	210f      	movs	r1, #15
 80009e6:	4618      	mov	r0, r3
 80009e8:	f000 fba4 	bl	8001134 <W25Q_Read>
			animation_data_config.image_size = *(uint32_t *)&data;
 80009ec:	683b      	ldr	r3, [r7, #0]
 80009ee:	4a12      	ldr	r2, [pc, #72]	; (8000a38 <Animation_Data_Init+0x194>)
 80009f0:	60d3      	str	r3, [r2, #12]
 80009f2:	e001      	b.n	80009f8 <Animation_Data_Init+0x154>
		}else{
			data_error = 1;
		}
	}else{
		data_error = 1;
 80009f4:	2301      	movs	r3, #1
 80009f6:	75fb      	strb	r3, [r7, #23]
	}

	//Reading correct data failed
	if(data_error){
 80009f8:	7dfb      	ldrb	r3, [r7, #23]
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d014      	beq.n	8000a28 <Animation_Data_Init+0x184>
		animation_data_config.clkdiv = 0;
 80009fe:	4b0e      	ldr	r3, [pc, #56]	; (8000a38 <Animation_Data_Init+0x194>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	801a      	strh	r2, [r3, #0]
		animation_data_config.pulse = 0;
 8000a04:	4b0c      	ldr	r3, [pc, #48]	; (8000a38 <Animation_Data_Init+0x194>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	709a      	strb	r2, [r3, #2]
		animation_data_config.bit_0 = 0;
 8000a0a:	4b0b      	ldr	r3, [pc, #44]	; (8000a38 <Animation_Data_Init+0x194>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	70da      	strb	r2, [r3, #3]
		animation_data_config.bit_1 = 0;
 8000a10:	4b09      	ldr	r3, [pc, #36]	; (8000a38 <Animation_Data_Init+0x194>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	711a      	strb	r2, [r3, #4]
		animation_data_config.stop_pulses = 0;
 8000a16:	4b08      	ldr	r3, [pc, #32]	; (8000a38 <Animation_Data_Init+0x194>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	80da      	strh	r2, [r3, #6]
		animation_data_config.images = 0;
 8000a1c:	4b06      	ldr	r3, [pc, #24]	; (8000a38 <Animation_Data_Init+0x194>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	609a      	str	r2, [r3, #8]
		animation_data_config.image_size = 0;
 8000a22:	4b05      	ldr	r3, [pc, #20]	; (8000a38 <Animation_Data_Init+0x194>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	60da      	str	r2, [r3, #12]
	}
}
 8000a28:	bf00      	nop
 8000a2a:	3718      	adds	r7, #24
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	bd80      	pop	{r7, pc}
 8000a30:	20000164 	.word	0x20000164
 8000a34:	20001174 	.word	0x20001174
 8000a38:	20000154 	.word	0x20000154

08000a3c <Animation_Data_Buffer>:

void Animation_Data_Buffer(){
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	af00      	add	r7, sp, #0
	if(animation_data_buffering_rq){
 8000a40:	4b06      	ldr	r3, [pc, #24]	; (8000a5c <Animation_Data_Buffer+0x20>)
 8000a42:	781b      	ldrb	r3, [r3, #0]
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d007      	beq.n	8000a58 <Animation_Data_Buffer+0x1c>
		animation_data_buffering_rq = 0;
 8000a48:	4b04      	ldr	r3, [pc, #16]	; (8000a5c <Animation_Data_Buffer+0x20>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	701a      	strb	r2, [r3, #0]
		Animation_Data_Read(animation_data_buffering_image);
 8000a4e:	4b04      	ldr	r3, [pc, #16]	; (8000a60 <Animation_Data_Buffer+0x24>)
 8000a50:	881b      	ldrh	r3, [r3, #0]
 8000a52:	4618      	mov	r0, r3
 8000a54:	f7ff fe9a 	bl	800078c <Animation_Data_Read>
	}
}
 8000a58:	bf00      	nop
 8000a5a:	bd80      	pop	{r7, pc}
 8000a5c:	20001168 	.word	0x20001168
 8000a60:	2000116a 	.word	0x2000116a

08000a64 <App_Init>:

#define FRAME_DELAY 33

uint32_t i = 0;

void App_Init(){
 8000a64:	b580      	push	{r7, lr}
 8000a66:	af00      	add	r7, sp, #0
	LED_Set(LED_ON);
 8000a68:	2001      	movs	r0, #1
 8000a6a:	f000 f91d 	bl	8000ca8 <LED_Set>
	USB_Init();
 8000a6e:	f000 f9bf 	bl	8000df0 <USB_Init>
	Button_Init();
 8000a72:	f000 f8c9 	bl	8000c08 <Button_Init>
	Animation_Init();
 8000a76:	f7ff fe2f 	bl	80006d8 <Animation_Init>
	LED_Set(LED_OFF);
 8000a7a:	2000      	movs	r0, #0
 8000a7c:	f000 f914 	bl	8000ca8 <LED_Set>
}
 8000a80:	bf00      	nop
 8000a82:	bd80      	pop	{r7, pc}

08000a84 <App_Loop>:
void App_Loop(){
 8000a84:	b580      	push	{r7, lr}
 8000a86:	af00      	add	r7, sp, #0
	if(!USB_Enabled() && USB_Det_State()){
 8000a88:	f000 f982 	bl	8000d90 <USB_Enabled>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d10e      	bne.n	8000ab0 <App_Loop+0x2c>
 8000a92:	f000 f971 	bl	8000d78 <USB_Det_State>
 8000a96:	4603      	mov	r3, r0
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d009      	beq.n	8000ab0 <App_Loop+0x2c>
		i = 0;
 8000a9c:	4b34      	ldr	r3, [pc, #208]	; (8000b70 <App_Loop+0xec>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	601a      	str	r2, [r3, #0]
		Animation_Display_Color(0);
 8000aa2:	2000      	movs	r0, #0
 8000aa4:	f7ff fdaa 	bl	80005fc <Animation_Display_Color>
		USB_Enable(1);
 8000aa8:	2001      	movs	r0, #1
 8000aaa:	f000 f97d 	bl	8000da8 <USB_Enable>
 8000aae:	e014      	b.n	8000ada <App_Loop+0x56>
	}else if(USB_Enabled() && !USB_Det_State()){
 8000ab0:	f000 f96e 	bl	8000d90 <USB_Enabled>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d00f      	beq.n	8000ada <App_Loop+0x56>
 8000aba:	f000 f95d 	bl	8000d78 <USB_Det_State>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d10a      	bne.n	8000ada <App_Loop+0x56>
		USB_Enable(0);
 8000ac4:	2000      	movs	r0, #0
 8000ac6:	f000 f96f 	bl	8000da8 <USB_Enable>
		LED_Set(LED_ON);
 8000aca:	2001      	movs	r0, #1
 8000acc:	f000 f8ec 	bl	8000ca8 <LED_Set>
		Animation_Init();
 8000ad0:	f7ff fe02 	bl	80006d8 <Animation_Init>
		LED_Set(LED_OFF);
 8000ad4:	2000      	movs	r0, #0
 8000ad6:	f000 f8e7 	bl	8000ca8 <LED_Set>
	}
	
	if(!USB_Enabled()){
 8000ada:	f000 f959 	bl	8000d90 <USB_Enabled>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d143      	bne.n	8000b6c <App_Loop+0xe8>
		if(!animation_data_config.images || !animation_data_config.image_size){
 8000ae4:	4b23      	ldr	r3, [pc, #140]	; (8000b74 <App_Loop+0xf0>)
 8000ae6:	689b      	ldr	r3, [r3, #8]
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d003      	beq.n	8000af4 <App_Loop+0x70>
 8000aec:	4b21      	ldr	r3, [pc, #132]	; (8000b74 <App_Loop+0xf0>)
 8000aee:	68db      	ldr	r3, [r3, #12]
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d10d      	bne.n	8000b10 <App_Loop+0x8c>
			LED_Set(1 - LED_State());
 8000af4:	f000 f8f8 	bl	8000ce8 <LED_State>
 8000af8:	4603      	mov	r3, r0
 8000afa:	f1c3 0301 	rsb	r3, r3, #1
 8000afe:	b2db      	uxtb	r3, r3
 8000b00:	4618      	mov	r0, r3
 8000b02:	f000 f8d1 	bl	8000ca8 <LED_Set>
			HAL_Delay(300);
 8000b06:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000b0a:	f000 ffdb 	bl	8001ac4 <HAL_Delay>
				Animation_Display_Color(0);
				HAL_Delay(100);
			}
		}
	}
}
 8000b0e:	e02d      	b.n	8000b6c <App_Loop+0xe8>
			if(LED_State()){
 8000b10:	f000 f8ea 	bl	8000ce8 <LED_State>
 8000b14:	4603      	mov	r3, r0
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d002      	beq.n	8000b20 <App_Loop+0x9c>
				LED_Set(LED_OFF);
 8000b1a:	2000      	movs	r0, #0
 8000b1c:	f000 f8c4 	bl	8000ca8 <LED_Set>
			if(!Button_State()){
 8000b20:	f000 f866 	bl	8000bf0 <Button_State>
 8000b24:	4603      	mov	r3, r0
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d117      	bne.n	8000b5a <App_Loop+0xd6>
				if(i == animation_data_config.images){
 8000b2a:	4b12      	ldr	r3, [pc, #72]	; (8000b74 <App_Loop+0xf0>)
 8000b2c:	689a      	ldr	r2, [r3, #8]
 8000b2e:	4b10      	ldr	r3, [pc, #64]	; (8000b70 <App_Loop+0xec>)
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	429a      	cmp	r2, r3
 8000b34:	d102      	bne.n	8000b3c <App_Loop+0xb8>
					i = 0;
 8000b36:	4b0e      	ldr	r3, [pc, #56]	; (8000b70 <App_Loop+0xec>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	601a      	str	r2, [r3, #0]
				Animation_Display_Image(i);
 8000b3c:	4b0c      	ldr	r3, [pc, #48]	; (8000b70 <App_Loop+0xec>)
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	b29b      	uxth	r3, r3
 8000b42:	4618      	mov	r0, r3
 8000b44:	f7ff fd8c 	bl	8000660 <Animation_Display_Image>
				HAL_Delay(FRAME_DELAY);
 8000b48:	2021      	movs	r0, #33	; 0x21
 8000b4a:	f000 ffbb 	bl	8001ac4 <HAL_Delay>
				i++;
 8000b4e:	4b08      	ldr	r3, [pc, #32]	; (8000b70 <App_Loop+0xec>)
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	3301      	adds	r3, #1
 8000b54:	4a06      	ldr	r2, [pc, #24]	; (8000b70 <App_Loop+0xec>)
 8000b56:	6013      	str	r3, [r2, #0]
}
 8000b58:	e008      	b.n	8000b6c <App_Loop+0xe8>
				i = 0;
 8000b5a:	4b05      	ldr	r3, [pc, #20]	; (8000b70 <App_Loop+0xec>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	601a      	str	r2, [r3, #0]
				Animation_Display_Color(0);
 8000b60:	2000      	movs	r0, #0
 8000b62:	f7ff fd4b 	bl	80005fc <Animation_Display_Color>
				HAL_Delay(100);
 8000b66:	2064      	movs	r0, #100	; 0x64
 8000b68:	f000 ffac 	bl	8001ac4 <HAL_Delay>
}
 8000b6c:	bf00      	nop
 8000b6e:	bd80      	pop	{r7, pc}
 8000b70:	2000116c 	.word	0x2000116c
 8000b74:	20000154 	.word	0x20000154

08000b78 <Button_Interrupt>:
#include "main.h"
#include "button.h"

static uint8_t button_state = 0;

void Button_Interrupt(){
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	af00      	add	r7, sp, #0
	button_state = Button_Debounce_Read();
 8000b7c:	f000 f808 	bl	8000b90 <Button_Debounce_Read>
 8000b80:	4603      	mov	r3, r0
 8000b82:	461a      	mov	r2, r3
 8000b84:	4b01      	ldr	r3, [pc, #4]	; (8000b8c <Button_Interrupt+0x14>)
 8000b86:	701a      	strb	r2, [r3, #0]
}
 8000b88:	bf00      	nop
 8000b8a:	bd80      	pop	{r7, pc}
 8000b8c:	20001170 	.word	0x20001170

08000b90 <Button_Debounce_Read>:

uint8_t Button_Debounce_Read(){
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b082      	sub	sp, #8
 8000b94:	af00      	add	r7, sp, #0
	uint8_t level;
	uint8_t d = 0;
 8000b96:	2300      	movs	r3, #0
 8000b98:	71bb      	strb	r3, [r7, #6]
	uint8_t i = 0;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	717b      	strb	r3, [r7, #5]
	while(d != 1){
 8000b9e:	e01d      	b.n	8000bdc <Button_Debounce_Read+0x4c>
		i = 0;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	717b      	strb	r3, [r7, #5]
		level = HAL_GPIO_ReadPin(BUTTON_GPIO_Port, BUTTON_Pin);
 8000ba4:	2101      	movs	r1, #1
 8000ba6:	4811      	ldr	r0, [pc, #68]	; (8000bec <Button_Debounce_Read+0x5c>)
 8000ba8:	f001 fe26 	bl	80027f8 <HAL_GPIO_ReadPin>
 8000bac:	4603      	mov	r3, r0
 8000bae:	71fb      	strb	r3, [r7, #7]
		while(i != BUTTON_DEBOUNCE_SAMPLES){
 8000bb0:	e011      	b.n	8000bd6 <Button_Debounce_Read+0x46>
			i++;
 8000bb2:	797b      	ldrb	r3, [r7, #5]
 8000bb4:	3301      	adds	r3, #1
 8000bb6:	717b      	strb	r3, [r7, #5]
			if(HAL_GPIO_ReadPin(BUTTON_GPIO_Port, BUTTON_Pin) != level){
 8000bb8:	2101      	movs	r1, #1
 8000bba:	480c      	ldr	r0, [pc, #48]	; (8000bec <Button_Debounce_Read+0x5c>)
 8000bbc:	f001 fe1c 	bl	80027f8 <HAL_GPIO_ReadPin>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	461a      	mov	r2, r3
 8000bc4:	79fb      	ldrb	r3, [r7, #7]
 8000bc6:	4293      	cmp	r3, r2
 8000bc8:	d000      	beq.n	8000bcc <Button_Debounce_Read+0x3c>
				break;
 8000bca:	e007      	b.n	8000bdc <Button_Debounce_Read+0x4c>
			}
			if(i == BUTTON_DEBOUNCE_SAMPLES){
 8000bcc:	797b      	ldrb	r3, [r7, #5]
 8000bce:	2b0a      	cmp	r3, #10
 8000bd0:	d101      	bne.n	8000bd6 <Button_Debounce_Read+0x46>
				d = 1;
 8000bd2:	2301      	movs	r3, #1
 8000bd4:	71bb      	strb	r3, [r7, #6]
		while(i != BUTTON_DEBOUNCE_SAMPLES){
 8000bd6:	797b      	ldrb	r3, [r7, #5]
 8000bd8:	2b0a      	cmp	r3, #10
 8000bda:	d1ea      	bne.n	8000bb2 <Button_Debounce_Read+0x22>
	while(d != 1){
 8000bdc:	79bb      	ldrb	r3, [r7, #6]
 8000bde:	2b01      	cmp	r3, #1
 8000be0:	d1de      	bne.n	8000ba0 <Button_Debounce_Read+0x10>
			}
		}
	}
	return level;
 8000be2:	79fb      	ldrb	r3, [r7, #7]
}
 8000be4:	4618      	mov	r0, r3
 8000be6:	3708      	adds	r7, #8
 8000be8:	46bd      	mov	sp, r7
 8000bea:	bd80      	pop	{r7, pc}
 8000bec:	40020000 	.word	0x40020000

08000bf0 <Button_State>:

uint8_t Button_State(){
 8000bf0:	b480      	push	{r7}
 8000bf2:	af00      	add	r7, sp, #0
	return button_state;
 8000bf4:	4b03      	ldr	r3, [pc, #12]	; (8000c04 <Button_State+0x14>)
 8000bf6:	781b      	ldrb	r3, [r3, #0]
}
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c00:	4770      	bx	lr
 8000c02:	bf00      	nop
 8000c04:	20001170 	.word	0x20001170

08000c08 <Button_Init>:
void Button_Init(){
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	af00      	add	r7, sp, #0
	Button_Interrupt();
 8000c0c:	f7ff ffb4 	bl	8000b78 <Button_Interrupt>
 8000c10:	bf00      	nop
 8000c12:	bd80      	pop	{r7, pc}

08000c14 <HAL_SPI_ErrorCallback>:
#include "button.h"
#include "animation.h"
#include "w25q.h"
#include "usb.h"

void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi){
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b082      	sub	sp, #8
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
	if(hspi->Instance == SPI1){
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	4a04      	ldr	r2, [pc, #16]	; (8000c34 <HAL_SPI_ErrorCallback+0x20>)
 8000c22:	4293      	cmp	r3, r2
 8000c24:	d101      	bne.n	8000c2a <HAL_SPI_ErrorCallback+0x16>
		W25Q_SPI_Error_Interrupt();
 8000c26:	f000 f8ed 	bl	8000e04 <W25Q_SPI_Error_Interrupt>
	}
}
 8000c2a:	bf00      	nop
 8000c2c:	3708      	adds	r7, #8
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	40013000 	.word	0x40013000

08000c38 <HAL_SPI_RxCpltCallback>:
void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi){
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b082      	sub	sp, #8
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
	if(hspi->Instance == SPI1){
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	4a04      	ldr	r2, [pc, #16]	; (8000c58 <HAL_SPI_RxCpltCallback+0x20>)
 8000c46:	4293      	cmp	r3, r2
 8000c48:	d101      	bne.n	8000c4e <HAL_SPI_RxCpltCallback+0x16>
		W25Q_SPI_Receive_DMA_Interrupt();
 8000c4a:	f000 f8e7 	bl	8000e1c <W25Q_SPI_Receive_DMA_Interrupt>
	}
}
 8000c4e:	bf00      	nop
 8000c50:	3708      	adds	r7, #8
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bd80      	pop	{r7, pc}
 8000c56:	bf00      	nop
 8000c58:	40013000 	.word	0x40013000

08000c5c <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b082      	sub	sp, #8
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	4603      	mov	r3, r0
 8000c64:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == BUTTON_Pin){
 8000c66:	88fb      	ldrh	r3, [r7, #6]
 8000c68:	2b01      	cmp	r3, #1
 8000c6a:	d102      	bne.n	8000c72 <HAL_GPIO_EXTI_Callback+0x16>
		Button_Interrupt();
 8000c6c:	f7ff ff84 	bl	8000b78 <Button_Interrupt>
	}
	else if(GPIO_Pin == USB_DET_Pin){
		USB_Det_Interrupt();
	}
}
 8000c70:	e004      	b.n	8000c7c <HAL_GPIO_EXTI_Callback+0x20>
	else if(GPIO_Pin == USB_DET_Pin){
 8000c72:	88fb      	ldrh	r3, [r7, #6]
 8000c74:	2b40      	cmp	r3, #64	; 0x40
 8000c76:	d101      	bne.n	8000c7c <HAL_GPIO_EXTI_Callback+0x20>
		USB_Det_Interrupt();
 8000c78:	f000 f842 	bl	8000d00 <USB_Det_Interrupt>
}
 8000c7c:	bf00      	nop
 8000c7e:	3708      	adds	r7, #8
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bd80      	pop	{r7, pc}

08000c84 <HAL_TIM_PWM_PulseFinishedCallback>:
void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim){
	if(htim->Instance == TIM1){
		Animation_Timer_Error_Interrupt();
	}
}
void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim){
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b082      	sub	sp, #8
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM1){
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	4a04      	ldr	r2, [pc, #16]	; (8000ca4 <HAL_TIM_PWM_PulseFinishedCallback+0x20>)
 8000c92:	4293      	cmp	r3, r2
 8000c94:	d101      	bne.n	8000c9a <HAL_TIM_PWM_PulseFinishedCallback+0x16>
		Animation_PWM_Pulse_Interrupt();
 8000c96:	f7ff fc1f 	bl	80004d8 <Animation_PWM_Pulse_Interrupt>
	}
}
 8000c9a:	bf00      	nop
 8000c9c:	3708      	adds	r7, #8
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bd80      	pop	{r7, pc}
 8000ca2:	bf00      	nop
 8000ca4:	40010000 	.word	0x40010000

08000ca8 <LED_Set>:
#include "main.h"
#include "led.h"

static uint8_t led_state = LED_OFF;

void LED_Set(uint8_t state){
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b082      	sub	sp, #8
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	4603      	mov	r3, r0
 8000cb0:	71fb      	strb	r3, [r7, #7]
	led_state = state;
 8000cb2:	4a0b      	ldr	r2, [pc, #44]	; (8000ce0 <LED_Set+0x38>)
 8000cb4:	79fb      	ldrb	r3, [r7, #7]
 8000cb6:	7013      	strb	r3, [r2, #0]
	if(state){
 8000cb8:	79fb      	ldrb	r3, [r7, #7]
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d006      	beq.n	8000ccc <LED_Set+0x24>
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000cc4:	4807      	ldr	r0, [pc, #28]	; (8000ce4 <LED_Set+0x3c>)
 8000cc6:	f001 fdaf 	bl	8002828 <HAL_GPIO_WritePin>
	}else{
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
	}
}
 8000cca:	e005      	b.n	8000cd8 <LED_Set+0x30>
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8000ccc:	2201      	movs	r2, #1
 8000cce:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000cd2:	4804      	ldr	r0, [pc, #16]	; (8000ce4 <LED_Set+0x3c>)
 8000cd4:	f001 fda8 	bl	8002828 <HAL_GPIO_WritePin>
}
 8000cd8:	bf00      	nop
 8000cda:	3708      	adds	r7, #8
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	bd80      	pop	{r7, pc}
 8000ce0:	20001171 	.word	0x20001171
 8000ce4:	40020800 	.word	0x40020800

08000ce8 <LED_State>:
uint8_t LED_State(){
 8000ce8:	b480      	push	{r7}
 8000cea:	af00      	add	r7, sp, #0
	return led_state;
 8000cec:	4b03      	ldr	r3, [pc, #12]	; (8000cfc <LED_State+0x14>)
 8000cee:	781b      	ldrb	r3, [r3, #0]
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf8:	4770      	bx	lr
 8000cfa:	bf00      	nop
 8000cfc:	20001171 	.word	0x20001171

08000d00 <USB_Det_Interrupt>:
extern USBD_HandleTypeDef hUsbDeviceFS;

static uint8_t usb_det_state = 0;
static uint8_t usb_enabled = 1;

void USB_Det_Interrupt(){
 8000d00:	b580      	push	{r7, lr}
 8000d02:	af00      	add	r7, sp, #0
	usb_det_state = USB_Det_Debounce_Read();
 8000d04:	f000 f808 	bl	8000d18 <USB_Det_Debounce_Read>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	461a      	mov	r2, r3
 8000d0c:	4b01      	ldr	r3, [pc, #4]	; (8000d14 <USB_Det_Interrupt+0x14>)
 8000d0e:	701a      	strb	r2, [r3, #0]
}
 8000d10:	bf00      	nop
 8000d12:	bd80      	pop	{r7, pc}
 8000d14:	20001172 	.word	0x20001172

08000d18 <USB_Det_Debounce_Read>:

uint8_t USB_Det_Debounce_Read(){
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b082      	sub	sp, #8
 8000d1c:	af00      	add	r7, sp, #0
	uint8_t level;
	uint8_t d = 0;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	71bb      	strb	r3, [r7, #6]
	uint8_t i = 0;
 8000d22:	2300      	movs	r3, #0
 8000d24:	717b      	strb	r3, [r7, #5]
	while(d != 1){
 8000d26:	e01d      	b.n	8000d64 <USB_Det_Debounce_Read+0x4c>
		i = 0;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	717b      	strb	r3, [r7, #5]
		level = HAL_GPIO_ReadPin(USB_DET_GPIO_Port, USB_DET_Pin);
 8000d2c:	2140      	movs	r1, #64	; 0x40
 8000d2e:	4811      	ldr	r0, [pc, #68]	; (8000d74 <USB_Det_Debounce_Read+0x5c>)
 8000d30:	f001 fd62 	bl	80027f8 <HAL_GPIO_ReadPin>
 8000d34:	4603      	mov	r3, r0
 8000d36:	71fb      	strb	r3, [r7, #7]
		while(i != USB_DET_DEBOUNCE_SAMPLES){
 8000d38:	e011      	b.n	8000d5e <USB_Det_Debounce_Read+0x46>
			i++;
 8000d3a:	797b      	ldrb	r3, [r7, #5]
 8000d3c:	3301      	adds	r3, #1
 8000d3e:	717b      	strb	r3, [r7, #5]
			if(HAL_GPIO_ReadPin(USB_DET_GPIO_Port, USB_DET_Pin) != level){
 8000d40:	2140      	movs	r1, #64	; 0x40
 8000d42:	480c      	ldr	r0, [pc, #48]	; (8000d74 <USB_Det_Debounce_Read+0x5c>)
 8000d44:	f001 fd58 	bl	80027f8 <HAL_GPIO_ReadPin>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	461a      	mov	r2, r3
 8000d4c:	79fb      	ldrb	r3, [r7, #7]
 8000d4e:	4293      	cmp	r3, r2
 8000d50:	d000      	beq.n	8000d54 <USB_Det_Debounce_Read+0x3c>
				break;
 8000d52:	e007      	b.n	8000d64 <USB_Det_Debounce_Read+0x4c>
			}
			if(i == USB_DET_DEBOUNCE_SAMPLES){
 8000d54:	797b      	ldrb	r3, [r7, #5]
 8000d56:	2b0a      	cmp	r3, #10
 8000d58:	d101      	bne.n	8000d5e <USB_Det_Debounce_Read+0x46>
				d = 1;
 8000d5a:	2301      	movs	r3, #1
 8000d5c:	71bb      	strb	r3, [r7, #6]
		while(i != USB_DET_DEBOUNCE_SAMPLES){
 8000d5e:	797b      	ldrb	r3, [r7, #5]
 8000d60:	2b0a      	cmp	r3, #10
 8000d62:	d1ea      	bne.n	8000d3a <USB_Det_Debounce_Read+0x22>
	while(d != 1){
 8000d64:	79bb      	ldrb	r3, [r7, #6]
 8000d66:	2b01      	cmp	r3, #1
 8000d68:	d1de      	bne.n	8000d28 <USB_Det_Debounce_Read+0x10>
			}
		}
	}
	return level;
 8000d6a:	79fb      	ldrb	r3, [r7, #7]
}
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	3708      	adds	r7, #8
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bd80      	pop	{r7, pc}
 8000d74:	40020400 	.word	0x40020400

08000d78 <USB_Det_State>:

uint8_t USB_Det_State(){
 8000d78:	b480      	push	{r7}
 8000d7a:	af00      	add	r7, sp, #0
	return usb_det_state;
 8000d7c:	4b03      	ldr	r3, [pc, #12]	; (8000d8c <USB_Det_State+0x14>)
 8000d7e:	781b      	ldrb	r3, [r3, #0]
}
 8000d80:	4618      	mov	r0, r3
 8000d82:	46bd      	mov	sp, r7
 8000d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d88:	4770      	bx	lr
 8000d8a:	bf00      	nop
 8000d8c:	20001172 	.word	0x20001172

08000d90 <USB_Enabled>:
uint8_t USB_Enabled(){
 8000d90:	b480      	push	{r7}
 8000d92:	af00      	add	r7, sp, #0
	return usb_enabled;
 8000d94:	4b03      	ldr	r3, [pc, #12]	; (8000da4 <USB_Enabled+0x14>)
 8000d96:	781b      	ldrb	r3, [r3, #0]
}
 8000d98:	4618      	mov	r0, r3
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da0:	4770      	bx	lr
 8000da2:	bf00      	nop
 8000da4:	20000000 	.word	0x20000000

08000da8 <USB_Enable>:
void USB_Enable(uint8_t enable){
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b082      	sub	sp, #8
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	4603      	mov	r3, r0
 8000db0:	71fb      	strb	r3, [r7, #7]
	if(enable){
 8000db2:	79fb      	ldrb	r3, [r7, #7]
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d008      	beq.n	8000dca <USB_Enable+0x22>
		if(USBD_Start(&hUsbDeviceFS) != USBD_OK){Error_Handler();}
 8000db8:	480b      	ldr	r0, [pc, #44]	; (8000de8 <USB_Enable+0x40>)
 8000dba:	f009 fbf2 	bl	800a5a2 <USBD_Start>
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d00a      	beq.n	8000dda <USB_Enable+0x32>
 8000dc4:	f000 fc1c 	bl	8001600 <Error_Handler>
 8000dc8:	e007      	b.n	8000dda <USB_Enable+0x32>
	}else{
		if(USBD_Stop(&hUsbDeviceFS) != USBD_OK){Error_Handler();}
 8000dca:	4807      	ldr	r0, [pc, #28]	; (8000de8 <USB_Enable+0x40>)
 8000dcc:	f009 fbf5 	bl	800a5ba <USBD_Stop>
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d001      	beq.n	8000dda <USB_Enable+0x32>
 8000dd6:	f000 fc13 	bl	8001600 <Error_Handler>
	}
	usb_enabled = enable;
 8000dda:	4a04      	ldr	r2, [pc, #16]	; (8000dec <USB_Enable+0x44>)
 8000ddc:	79fb      	ldrb	r3, [r7, #7]
 8000dde:	7013      	strb	r3, [r2, #0]
}
 8000de0:	bf00      	nop
 8000de2:	3708      	adds	r7, #8
 8000de4:	46bd      	mov	sp, r7
 8000de6:	bd80      	pop	{r7, pc}
 8000de8:	20001284 	.word	0x20001284
 8000dec:	20000000 	.word	0x20000000

08000df0 <USB_Init>:
void USB_Init(){
 8000df0:	b580      	push	{r7, lr}
 8000df2:	af00      	add	r7, sp, #0
	USB_Det_Interrupt();
 8000df4:	f7ff ff84 	bl	8000d00 <USB_Det_Interrupt>
	USB_Enable(0);
 8000df8:	2000      	movs	r0, #0
 8000dfa:	f7ff ffd5 	bl	8000da8 <USB_Enable>
 8000dfe:	bf00      	nop
 8000e00:	bd80      	pop	{r7, pc}
	...

08000e04 <W25Q_SPI_Error_Interrupt>:

extern SPI_HandleTypeDef hspi1;
uint8_t w25q_dma_busy = 0;

//Hardware
void W25Q_SPI_Error_Interrupt(){
 8000e04:	b580      	push	{r7, lr}
 8000e06:	af00      	add	r7, sp, #0
	W25Q_Set_CS(1);
 8000e08:	2001      	movs	r0, #1
 8000e0a:	f000 f84d 	bl	8000ea8 <W25Q_Set_CS>
	w25q_dma_busy = 0;
 8000e0e:	4b02      	ldr	r3, [pc, #8]	; (8000e18 <W25Q_SPI_Error_Interrupt+0x14>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	701a      	strb	r2, [r3, #0]
}
 8000e14:	bf00      	nop
 8000e16:	bd80      	pop	{r7, pc}
 8000e18:	20001173 	.word	0x20001173

08000e1c <W25Q_SPI_Receive_DMA_Interrupt>:
void W25Q_SPI_Receive_DMA_Interrupt(){
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	af00      	add	r7, sp, #0
	W25Q_Set_CS(1);
 8000e20:	2001      	movs	r0, #1
 8000e22:	f000 f841 	bl	8000ea8 <W25Q_Set_CS>
	w25q_dma_busy = 0;
 8000e26:	4b02      	ldr	r3, [pc, #8]	; (8000e30 <W25Q_SPI_Receive_DMA_Interrupt+0x14>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	701a      	strb	r2, [r3, #0]
}
 8000e2c:	bf00      	nop
 8000e2e:	bd80      	pop	{r7, pc}
 8000e30:	20001173 	.word	0x20001173

08000e34 <W25Q_SPI_Receive_DMA>:
void W25Q_SPI_Receive_DMA(uint8_t *data, uint16_t length){
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b082      	sub	sp, #8
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
 8000e3c:	460b      	mov	r3, r1
 8000e3e:	807b      	strh	r3, [r7, #2]
	HAL_SPI_Receive_DMA(&hspi1, data, length);
 8000e40:	887b      	ldrh	r3, [r7, #2]
 8000e42:	461a      	mov	r2, r3
 8000e44:	6879      	ldr	r1, [r7, #4]
 8000e46:	4803      	ldr	r0, [pc, #12]	; (8000e54 <W25Q_SPI_Receive_DMA+0x20>)
 8000e48:	f004 f8ac 	bl	8004fa4 <HAL_SPI_Receive_DMA>
}
 8000e4c:	bf00      	nop
 8000e4e:	3708      	adds	r7, #8
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bd80      	pop	{r7, pc}
 8000e54:	2000117c 	.word	0x2000117c

08000e58 <W25Q_SPI_Receive>:
void W25Q_SPI_Receive(uint8_t *data, uint16_t length){
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b082      	sub	sp, #8
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
 8000e60:	460b      	mov	r3, r1
 8000e62:	807b      	strh	r3, [r7, #2]
	HAL_SPI_Receive(&hspi1, data, length, W25Q_BLOCKING_TIMEOUT);
 8000e64:	887a      	ldrh	r2, [r7, #2]
 8000e66:	f242 7310 	movw	r3, #10000	; 0x2710
 8000e6a:	6879      	ldr	r1, [r7, #4]
 8000e6c:	4803      	ldr	r0, [pc, #12]	; (8000e7c <W25Q_SPI_Receive+0x24>)
 8000e6e:	f003 fde6 	bl	8004a3e <HAL_SPI_Receive>
}
 8000e72:	bf00      	nop
 8000e74:	3708      	adds	r7, #8
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd80      	pop	{r7, pc}
 8000e7a:	bf00      	nop
 8000e7c:	2000117c 	.word	0x2000117c

08000e80 <W25Q_SPI_Transmit>:
void W25Q_SPI_Transmit(uint8_t *data, uint16_t length){
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b082      	sub	sp, #8
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
 8000e88:	460b      	mov	r3, r1
 8000e8a:	807b      	strh	r3, [r7, #2]
	HAL_SPI_Transmit(&hspi1, data, length, W25Q_BLOCKING_TIMEOUT);
 8000e8c:	887a      	ldrh	r2, [r7, #2]
 8000e8e:	f242 7310 	movw	r3, #10000	; 0x2710
 8000e92:	6879      	ldr	r1, [r7, #4]
 8000e94:	4803      	ldr	r0, [pc, #12]	; (8000ea4 <W25Q_SPI_Transmit+0x24>)
 8000e96:	f003 fc96 	bl	80047c6 <HAL_SPI_Transmit>
}
 8000e9a:	bf00      	nop
 8000e9c:	3708      	adds	r7, #8
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}
 8000ea2:	bf00      	nop
 8000ea4:	2000117c 	.word	0x2000117c

08000ea8 <W25Q_Set_CS>:
void W25Q_Set_CS(uint8_t cs){
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b082      	sub	sp, #8
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	4603      	mov	r3, r0
 8000eb0:	71fb      	strb	r3, [r7, #7]
	if(!cs){
 8000eb2:	79fb      	ldrb	r3, [r7, #7]
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d105      	bne.n	8000ec4 <W25Q_Set_CS+0x1c>
		HAL_GPIO_WritePin(FLASH_CS_GPIO_Port, FLASH_CS_Pin, GPIO_PIN_RESET);
 8000eb8:	2200      	movs	r2, #0
 8000eba:	2110      	movs	r1, #16
 8000ebc:	4806      	ldr	r0, [pc, #24]	; (8000ed8 <W25Q_Set_CS+0x30>)
 8000ebe:	f001 fcb3 	bl	8002828 <HAL_GPIO_WritePin>
	}else{
		HAL_GPIO_WritePin(FLASH_CS_GPIO_Port, FLASH_CS_Pin, GPIO_PIN_SET);
	}
}
 8000ec2:	e004      	b.n	8000ece <W25Q_Set_CS+0x26>
		HAL_GPIO_WritePin(FLASH_CS_GPIO_Port, FLASH_CS_Pin, GPIO_PIN_SET);
 8000ec4:	2201      	movs	r2, #1
 8000ec6:	2110      	movs	r1, #16
 8000ec8:	4803      	ldr	r0, [pc, #12]	; (8000ed8 <W25Q_Set_CS+0x30>)
 8000eca:	f001 fcad 	bl	8002828 <HAL_GPIO_WritePin>
}
 8000ece:	bf00      	nop
 8000ed0:	3708      	adds	r7, #8
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	bf00      	nop
 8000ed8:	40020000 	.word	0x40020000

08000edc <W25Q_Write_Enable>:

//USB Side Commands
void W25Q_Write_Enable(uint8_t enable){
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b084      	sub	sp, #16
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	71fb      	strb	r3, [r7, #7]
	W25Q_Set_CS(0);
 8000ee6:	2000      	movs	r0, #0
 8000ee8:	f7ff ffde 	bl	8000ea8 <W25Q_Set_CS>
	uint8_t cmd = W25Q_CMD_WRIRE_ENABLE;
 8000eec:	2306      	movs	r3, #6
 8000eee:	73fb      	strb	r3, [r7, #15]
	if(!enable){
 8000ef0:	79fb      	ldrb	r3, [r7, #7]
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d101      	bne.n	8000efa <W25Q_Write_Enable+0x1e>
		cmd = W25Q_CMD_WRITE_DISABLE;
 8000ef6:	2304      	movs	r3, #4
 8000ef8:	73fb      	strb	r3, [r7, #15]
	}
	W25Q_SPI_Transmit(&cmd, 1);
 8000efa:	f107 030f 	add.w	r3, r7, #15
 8000efe:	2101      	movs	r1, #1
 8000f00:	4618      	mov	r0, r3
 8000f02:	f7ff ffbd 	bl	8000e80 <W25Q_SPI_Transmit>
	W25Q_Set_CS(1);
 8000f06:	2001      	movs	r0, #1
 8000f08:	f7ff ffce 	bl	8000ea8 <W25Q_Set_CS>
}
 8000f0c:	bf00      	nop
 8000f0e:	3710      	adds	r7, #16
 8000f10:	46bd      	mov	sp, r7
 8000f12:	bd80      	pop	{r7, pc}

08000f14 <W25Q_Busy>:
uint8_t W25Q_Busy(){
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b082      	sub	sp, #8
 8000f18:	af00      	add	r7, sp, #0
	W25Q_Set_CS(0);
 8000f1a:	2000      	movs	r0, #0
 8000f1c:	f7ff ffc4 	bl	8000ea8 <W25Q_Set_CS>
	uint8_t tmp = W25Q_CMD_READ_STATUS_R1;
 8000f20:	2305      	movs	r3, #5
 8000f22:	71fb      	strb	r3, [r7, #7]
	W25Q_SPI_Transmit(&tmp, 1);
 8000f24:	1dfb      	adds	r3, r7, #7
 8000f26:	2101      	movs	r1, #1
 8000f28:	4618      	mov	r0, r3
 8000f2a:	f7ff ffa9 	bl	8000e80 <W25Q_SPI_Transmit>
	W25Q_SPI_Receive(&tmp, 1);
 8000f2e:	1dfb      	adds	r3, r7, #7
 8000f30:	2101      	movs	r1, #1
 8000f32:	4618      	mov	r0, r3
 8000f34:	f7ff ff90 	bl	8000e58 <W25Q_SPI_Receive>
	W25Q_Set_CS(1);
 8000f38:	2001      	movs	r0, #1
 8000f3a:	f7ff ffb5 	bl	8000ea8 <W25Q_Set_CS>
	return (tmp & 1);
 8000f3e:	79fb      	ldrb	r3, [r7, #7]
 8000f40:	f003 0301 	and.w	r3, r3, #1
 8000f44:	b2db      	uxtb	r3, r3
}
 8000f46:	4618      	mov	r0, r3
 8000f48:	3708      	adds	r7, #8
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bd80      	pop	{r7, pc}

08000f4e <W25Q_Erase_Sector>:
void W25Q_Erase_Sector(uint32_t sector){
 8000f4e:	b580      	push	{r7, lr}
 8000f50:	b084      	sub	sp, #16
 8000f52:	af00      	add	r7, sp, #0
 8000f54:	6078      	str	r0, [r7, #4]
	while(W25Q_Busy());
 8000f56:	bf00      	nop
 8000f58:	f7ff ffdc 	bl	8000f14 <W25Q_Busy>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d1fa      	bne.n	8000f58 <W25Q_Erase_Sector+0xa>
	W25Q_Write_Enable(1);
 8000f62:	2001      	movs	r0, #1
 8000f64:	f7ff ffba 	bl	8000edc <W25Q_Write_Enable>
	while(W25Q_Busy());
 8000f68:	bf00      	nop
 8000f6a:	f7ff ffd3 	bl	8000f14 <W25Q_Busy>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d1fa      	bne.n	8000f6a <W25Q_Erase_Sector+0x1c>
	W25Q_Set_CS(0);
 8000f74:	2000      	movs	r0, #0
 8000f76:	f7ff ff97 	bl	8000ea8 <W25Q_Set_CS>
	uint8_t cmd = W25Q_CMD_SECTOR_ERASE;
 8000f7a:	2320      	movs	r3, #32
 8000f7c:	73fb      	strb	r3, [r7, #15]
	W25Q_SPI_Transmit(&cmd, 1);
 8000f7e:	f107 030f 	add.w	r3, r7, #15
 8000f82:	2101      	movs	r1, #1
 8000f84:	4618      	mov	r0, r3
 8000f86:	f7ff ff7b 	bl	8000e80 <W25Q_SPI_Transmit>
	uint32_t address = sector * W25Q_SECTOR_SIZE;
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	031b      	lsls	r3, r3, #12
 8000f8e:	60bb      	str	r3, [r7, #8]
	W25Q_SPI_Transmit((uint8_t *)&address, 3);
 8000f90:	f107 0308 	add.w	r3, r7, #8
 8000f94:	2103      	movs	r1, #3
 8000f96:	4618      	mov	r0, r3
 8000f98:	f7ff ff72 	bl	8000e80 <W25Q_SPI_Transmit>
	W25Q_Set_CS(1);
 8000f9c:	2001      	movs	r0, #1
 8000f9e:	f7ff ff83 	bl	8000ea8 <W25Q_Set_CS>
	while(W25Q_Busy());
 8000fa2:	bf00      	nop
 8000fa4:	f7ff ffb6 	bl	8000f14 <W25Q_Busy>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d1fa      	bne.n	8000fa4 <W25Q_Erase_Sector+0x56>
}
 8000fae:	bf00      	nop
 8000fb0:	bf00      	nop
 8000fb2:	3710      	adds	r7, #16
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bd80      	pop	{r7, pc}

08000fb8 <W25Q_Write_Sector>:
void W25Q_Write_Sector(uint8_t* data, uint16_t sector){
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b086      	sub	sp, #24
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
 8000fc0:	460b      	mov	r3, r1
 8000fc2:	807b      	strh	r3, [r7, #2]
	uint8_t cmd = W25Q_CMD_PAGE_PROGRAM;
 8000fc4:	2302      	movs	r3, #2
 8000fc6:	74fb      	strb	r3, [r7, #19]
	uint32_t address = sector * W25Q_SECTOR_SIZE;
 8000fc8:	887b      	ldrh	r3, [r7, #2]
 8000fca:	031b      	lsls	r3, r3, #12
 8000fcc:	60fb      	str	r3, [r7, #12]
	uint32_t i = 0;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	617b      	str	r3, [r7, #20]
	while(i != W25Q_SECTOR_SIZE / W25Q_PAGE_SIZE){
 8000fd2:	e030      	b.n	8001036 <W25Q_Write_Sector+0x7e>
		while(W25Q_Busy());
 8000fd4:	bf00      	nop
 8000fd6:	f7ff ff9d 	bl	8000f14 <W25Q_Busy>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d1fa      	bne.n	8000fd6 <W25Q_Write_Sector+0x1e>
		W25Q_Write_Enable(1);
 8000fe0:	2001      	movs	r0, #1
 8000fe2:	f7ff ff7b 	bl	8000edc <W25Q_Write_Enable>
		while(W25Q_Busy());
 8000fe6:	bf00      	nop
 8000fe8:	f7ff ff94 	bl	8000f14 <W25Q_Busy>
 8000fec:	4603      	mov	r3, r0
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d1fa      	bne.n	8000fe8 <W25Q_Write_Sector+0x30>
		W25Q_Set_CS(0);
 8000ff2:	2000      	movs	r0, #0
 8000ff4:	f7ff ff58 	bl	8000ea8 <W25Q_Set_CS>
		W25Q_SPI_Transmit(&cmd, 1);
 8000ff8:	f107 0313 	add.w	r3, r7, #19
 8000ffc:	2101      	movs	r1, #1
 8000ffe:	4618      	mov	r0, r3
 8001000:	f7ff ff3e 	bl	8000e80 <W25Q_SPI_Transmit>
		W25Q_SPI_Transmit((uint8_t *)&address, 3);
 8001004:	f107 030c 	add.w	r3, r7, #12
 8001008:	2103      	movs	r1, #3
 800100a:	4618      	mov	r0, r3
 800100c:	f7ff ff38 	bl	8000e80 <W25Q_SPI_Transmit>
		W25Q_SPI_Transmit(&data[W25Q_PAGE_SIZE * i], W25Q_PAGE_SIZE);
 8001010:	697b      	ldr	r3, [r7, #20]
 8001012:	021b      	lsls	r3, r3, #8
 8001014:	687a      	ldr	r2, [r7, #4]
 8001016:	4413      	add	r3, r2
 8001018:	f44f 7180 	mov.w	r1, #256	; 0x100
 800101c:	4618      	mov	r0, r3
 800101e:	f7ff ff2f 	bl	8000e80 <W25Q_SPI_Transmit>
		W25Q_Set_CS(1);
 8001022:	2001      	movs	r0, #1
 8001024:	f7ff ff40 	bl	8000ea8 <W25Q_Set_CS>
		address += W25Q_PAGE_SIZE;
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800102e:	60fb      	str	r3, [r7, #12]
		i++;
 8001030:	697b      	ldr	r3, [r7, #20]
 8001032:	3301      	adds	r3, #1
 8001034:	617b      	str	r3, [r7, #20]
	while(i != W25Q_SECTOR_SIZE / W25Q_PAGE_SIZE){
 8001036:	697b      	ldr	r3, [r7, #20]
 8001038:	2b10      	cmp	r3, #16
 800103a:	d1cb      	bne.n	8000fd4 <W25Q_Write_Sector+0x1c>
	}
	while(W25Q_Busy());
 800103c:	bf00      	nop
 800103e:	f7ff ff69 	bl	8000f14 <W25Q_Busy>
 8001042:	4603      	mov	r3, r0
 8001044:	2b00      	cmp	r3, #0
 8001046:	d1fa      	bne.n	800103e <W25Q_Write_Sector+0x86>
}
 8001048:	bf00      	nop
 800104a:	bf00      	nop
 800104c:	3718      	adds	r7, #24
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}

08001052 <W25Q_Read_Sector>:
void W25Q_Read_Sector(uint8_t *data, uint16_t sector){
 8001052:	b580      	push	{r7, lr}
 8001054:	b084      	sub	sp, #16
 8001056:	af00      	add	r7, sp, #0
 8001058:	6078      	str	r0, [r7, #4]
 800105a:	460b      	mov	r3, r1
 800105c:	807b      	strh	r3, [r7, #2]
	while(W25Q_Busy());
 800105e:	bf00      	nop
 8001060:	f7ff ff58 	bl	8000f14 <W25Q_Busy>
 8001064:	4603      	mov	r3, r0
 8001066:	2b00      	cmp	r3, #0
 8001068:	d1fa      	bne.n	8001060 <W25Q_Read_Sector+0xe>
	W25Q_Set_CS(0);
 800106a:	2000      	movs	r0, #0
 800106c:	f7ff ff1c 	bl	8000ea8 <W25Q_Set_CS>
	uint8_t cmd = W25Q_CMD_FAST_READ;
 8001070:	230b      	movs	r3, #11
 8001072:	73fb      	strb	r3, [r7, #15]
	W25Q_SPI_Transmit(&cmd, 1);
 8001074:	f107 030f 	add.w	r3, r7, #15
 8001078:	2101      	movs	r1, #1
 800107a:	4618      	mov	r0, r3
 800107c:	f7ff ff00 	bl	8000e80 <W25Q_SPI_Transmit>

	uint32_t address = sector * W25Q_SECTOR_SIZE;
 8001080:	887b      	ldrh	r3, [r7, #2]
 8001082:	031b      	lsls	r3, r3, #12
 8001084:	60bb      	str	r3, [r7, #8]
	address = ((address >> 16) & 0xff) | (address & 0xff00) | ((address << 16) & 0xff0000);
 8001086:	68bb      	ldr	r3, [r7, #8]
 8001088:	0c1b      	lsrs	r3, r3, #16
 800108a:	b2da      	uxtb	r2, r3
 800108c:	68bb      	ldr	r3, [r7, #8]
 800108e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8001092:	431a      	orrs	r2, r3
 8001094:	68bb      	ldr	r3, [r7, #8]
 8001096:	041b      	lsls	r3, r3, #16
 8001098:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800109c:	4313      	orrs	r3, r2
 800109e:	60bb      	str	r3, [r7, #8]
	W25Q_SPI_Transmit((uint8_t *)&address, 4);
 80010a0:	f107 0308 	add.w	r3, r7, #8
 80010a4:	2104      	movs	r1, #4
 80010a6:	4618      	mov	r0, r3
 80010a8:	f7ff feea 	bl	8000e80 <W25Q_SPI_Transmit>

	W25Q_SPI_Receive(data, W25Q_SECTOR_SIZE);
 80010ac:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80010b0:	6878      	ldr	r0, [r7, #4]
 80010b2:	f7ff fed1 	bl	8000e58 <W25Q_SPI_Receive>
 	W25Q_Set_CS(1);
 80010b6:	2001      	movs	r0, #1
 80010b8:	f7ff fef6 	bl	8000ea8 <W25Q_Set_CS>
}
 80010bc:	bf00      	nop
 80010be:	3710      	adds	r7, #16
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bd80      	pop	{r7, pc}

080010c4 <W25Q_Read_DMA>:
	W25Q_Set_CS(1);
	while(W25Q_Busy());
}

//App
void W25Q_Read_DMA(uint8_t *data, uint16_t length, uint32_t address){
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b086      	sub	sp, #24
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	60f8      	str	r0, [r7, #12]
 80010cc:	460b      	mov	r3, r1
 80010ce:	607a      	str	r2, [r7, #4]
 80010d0:	817b      	strh	r3, [r7, #10]
	while(w25q_dma_busy);
 80010d2:	bf00      	nop
 80010d4:	4b16      	ldr	r3, [pc, #88]	; (8001130 <W25Q_Read_DMA+0x6c>)
 80010d6:	781b      	ldrb	r3, [r3, #0]
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d1fb      	bne.n	80010d4 <W25Q_Read_DMA+0x10>
	w25q_dma_busy = 1;
 80010dc:	4b14      	ldr	r3, [pc, #80]	; (8001130 <W25Q_Read_DMA+0x6c>)
 80010de:	2201      	movs	r2, #1
 80010e0:	701a      	strb	r2, [r3, #0]
	W25Q_Set_CS(0);
 80010e2:	2000      	movs	r0, #0
 80010e4:	f7ff fee0 	bl	8000ea8 <W25Q_Set_CS>
	uint8_t cmd = W25Q_CMD_FAST_READ;
 80010e8:	230b      	movs	r3, #11
 80010ea:	75fb      	strb	r3, [r7, #23]
	W25Q_SPI_Transmit(&cmd, 1);
 80010ec:	f107 0317 	add.w	r3, r7, #23
 80010f0:	2101      	movs	r1, #1
 80010f2:	4618      	mov	r0, r3
 80010f4:	f7ff fec4 	bl	8000e80 <W25Q_SPI_Transmit>

	address = ((address >> 16) & 0xff) | (address & 0xff00) | ((address << 16) & 0xff0000);
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	0c1b      	lsrs	r3, r3, #16
 80010fc:	b2da      	uxtb	r2, r3
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8001104:	431a      	orrs	r2, r3
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	041b      	lsls	r3, r3, #16
 800110a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800110e:	4313      	orrs	r3, r2
 8001110:	607b      	str	r3, [r7, #4]
	W25Q_SPI_Transmit((uint8_t *)&address, 4);
 8001112:	1d3b      	adds	r3, r7, #4
 8001114:	2104      	movs	r1, #4
 8001116:	4618      	mov	r0, r3
 8001118:	f7ff feb2 	bl	8000e80 <W25Q_SPI_Transmit>

	W25Q_SPI_Receive_DMA(data, length);
 800111c:	897b      	ldrh	r3, [r7, #10]
 800111e:	4619      	mov	r1, r3
 8001120:	68f8      	ldr	r0, [r7, #12]
 8001122:	f7ff fe87 	bl	8000e34 <W25Q_SPI_Receive_DMA>
}
 8001126:	bf00      	nop
 8001128:	3718      	adds	r7, #24
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}
 800112e:	bf00      	nop
 8001130:	20001173 	.word	0x20001173

08001134 <W25Q_Read>:
void W25Q_Read(uint8_t *data, uint32_t address, uint16_t length){
 8001134:	b580      	push	{r7, lr}
 8001136:	b086      	sub	sp, #24
 8001138:	af00      	add	r7, sp, #0
 800113a:	60f8      	str	r0, [r7, #12]
 800113c:	60b9      	str	r1, [r7, #8]
 800113e:	4613      	mov	r3, r2
 8001140:	80fb      	strh	r3, [r7, #6]
	while(W25Q_Busy());
 8001142:	bf00      	nop
 8001144:	f7ff fee6 	bl	8000f14 <W25Q_Busy>
 8001148:	4603      	mov	r3, r0
 800114a:	2b00      	cmp	r3, #0
 800114c:	d1fa      	bne.n	8001144 <W25Q_Read+0x10>
	W25Q_Set_CS(0);
 800114e:	2000      	movs	r0, #0
 8001150:	f7ff feaa 	bl	8000ea8 <W25Q_Set_CS>
	uint8_t cmd = W25Q_CMD_FAST_READ;
 8001154:	230b      	movs	r3, #11
 8001156:	75fb      	strb	r3, [r7, #23]
	W25Q_SPI_Transmit(&cmd, 1);
 8001158:	f107 0317 	add.w	r3, r7, #23
 800115c:	2101      	movs	r1, #1
 800115e:	4618      	mov	r0, r3
 8001160:	f7ff fe8e 	bl	8000e80 <W25Q_SPI_Transmit>

	address = ((address >> 16) & 0xff) | (address & 0xff00) | ((address << 16) & 0xff0000);
 8001164:	68bb      	ldr	r3, [r7, #8]
 8001166:	0c1b      	lsrs	r3, r3, #16
 8001168:	b2da      	uxtb	r2, r3
 800116a:	68bb      	ldr	r3, [r7, #8]
 800116c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8001170:	431a      	orrs	r2, r3
 8001172:	68bb      	ldr	r3, [r7, #8]
 8001174:	041b      	lsls	r3, r3, #16
 8001176:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800117a:	4313      	orrs	r3, r2
 800117c:	60bb      	str	r3, [r7, #8]
	W25Q_SPI_Transmit((uint8_t *)&address, 4);
 800117e:	f107 0308 	add.w	r3, r7, #8
 8001182:	2104      	movs	r1, #4
 8001184:	4618      	mov	r0, r3
 8001186:	f7ff fe7b 	bl	8000e80 <W25Q_SPI_Transmit>

	W25Q_SPI_Receive(data, length);
 800118a:	88fb      	ldrh	r3, [r7, #6]
 800118c:	4619      	mov	r1, r3
 800118e:	68f8      	ldr	r0, [r7, #12]
 8001190:	f7ff fe62 	bl	8000e58 <W25Q_SPI_Receive>
 	W25Q_Set_CS(1);
 8001194:	2001      	movs	r0, #1
 8001196:	f7ff fe87 	bl	8000ea8 <W25Q_Set_CS>
}
 800119a:	bf00      	nop
 800119c:	3718      	adds	r7, #24
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}

080011a2 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011a2:	b580      	push	{r7, lr}
 80011a4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011a6:	f000 fc30 	bl	8001a0a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011aa:	f000 f811 	bl	80011d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011ae:	f000 f985 	bl	80014bc <MX_GPIO_Init>
  MX_DMA_Init();
 80011b2:	f000 f963 	bl	800147c <MX_DMA_Init>
  MX_TIM1_Init();
 80011b6:	f000 f8c1 	bl	800133c <MX_TIM1_Init>
  MX_CRC_Init();
 80011ba:	f000 f875 	bl	80012a8 <MX_CRC_Init>
  MX_SPI1_Init();
 80011be:	f000 f887 	bl	80012d0 <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 80011c2:	f00a fc79 	bl	800bab8 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  App_Init();
 80011c6:	f7ff fc4d 	bl	8000a64 <App_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    App_Loop();
 80011ca:	f7ff fc5b 	bl	8000a84 <App_Loop>
 80011ce:	e7fc      	b.n	80011ca <main+0x28>

080011d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b094      	sub	sp, #80	; 0x50
 80011d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011d6:	f107 0320 	add.w	r3, r7, #32
 80011da:	2230      	movs	r2, #48	; 0x30
 80011dc:	2100      	movs	r1, #0
 80011de:	4618      	mov	r0, r3
 80011e0:	f00b f9a6 	bl	800c530 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011e4:	f107 030c 	add.w	r3, r7, #12
 80011e8:	2200      	movs	r2, #0
 80011ea:	601a      	str	r2, [r3, #0]
 80011ec:	605a      	str	r2, [r3, #4]
 80011ee:	609a      	str	r2, [r3, #8]
 80011f0:	60da      	str	r2, [r3, #12]
 80011f2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80011f4:	2300      	movs	r3, #0
 80011f6:	60bb      	str	r3, [r7, #8]
 80011f8:	4b29      	ldr	r3, [pc, #164]	; (80012a0 <SystemClock_Config+0xd0>)
 80011fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011fc:	4a28      	ldr	r2, [pc, #160]	; (80012a0 <SystemClock_Config+0xd0>)
 80011fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001202:	6413      	str	r3, [r2, #64]	; 0x40
 8001204:	4b26      	ldr	r3, [pc, #152]	; (80012a0 <SystemClock_Config+0xd0>)
 8001206:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001208:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800120c:	60bb      	str	r3, [r7, #8]
 800120e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001210:	2300      	movs	r3, #0
 8001212:	607b      	str	r3, [r7, #4]
 8001214:	4b23      	ldr	r3, [pc, #140]	; (80012a4 <SystemClock_Config+0xd4>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800121c:	4a21      	ldr	r2, [pc, #132]	; (80012a4 <SystemClock_Config+0xd4>)
 800121e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001222:	6013      	str	r3, [r2, #0]
 8001224:	4b1f      	ldr	r3, [pc, #124]	; (80012a4 <SystemClock_Config+0xd4>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800122c:	607b      	str	r3, [r7, #4]
 800122e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001230:	2301      	movs	r3, #1
 8001232:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001234:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001238:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800123a:	2302      	movs	r3, #2
 800123c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800123e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001242:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001244:	2319      	movs	r3, #25
 8001246:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001248:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800124c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800124e:	2304      	movs	r3, #4
 8001250:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001252:	2307      	movs	r3, #7
 8001254:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001256:	f107 0320 	add.w	r3, r7, #32
 800125a:	4618      	mov	r0, r3
 800125c:	f002 fdfa 	bl	8003e54 <HAL_RCC_OscConfig>
 8001260:	4603      	mov	r3, r0
 8001262:	2b00      	cmp	r3, #0
 8001264:	d001      	beq.n	800126a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001266:	f000 f9cb 	bl	8001600 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800126a:	230f      	movs	r3, #15
 800126c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800126e:	2302      	movs	r3, #2
 8001270:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001272:	2300      	movs	r3, #0
 8001274:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001276:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800127a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800127c:	2300      	movs	r3, #0
 800127e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001280:	f107 030c 	add.w	r3, r7, #12
 8001284:	2102      	movs	r1, #2
 8001286:	4618      	mov	r0, r3
 8001288:	f003 f85c 	bl	8004344 <HAL_RCC_ClockConfig>
 800128c:	4603      	mov	r3, r0
 800128e:	2b00      	cmp	r3, #0
 8001290:	d001      	beq.n	8001296 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8001292:	f000 f9b5 	bl	8001600 <Error_Handler>
  }
}
 8001296:	bf00      	nop
 8001298:	3750      	adds	r7, #80	; 0x50
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}
 800129e:	bf00      	nop
 80012a0:	40023800 	.word	0x40023800
 80012a4:	40007000 	.word	0x40007000

080012a8 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80012ac:	4b06      	ldr	r3, [pc, #24]	; (80012c8 <MX_CRC_Init+0x20>)
 80012ae:	4a07      	ldr	r2, [pc, #28]	; (80012cc <MX_CRC_Init+0x24>)
 80012b0:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80012b2:	4805      	ldr	r0, [pc, #20]	; (80012c8 <MX_CRC_Init+0x20>)
 80012b4:	f000 fd3b 	bl	8001d2e <HAL_CRC_Init>
 80012b8:	4603      	mov	r3, r0
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d001      	beq.n	80012c2 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 80012be:	f000 f99f 	bl	8001600 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80012c2:	bf00      	nop
 80012c4:	bd80      	pop	{r7, pc}
 80012c6:	bf00      	nop
 80012c8:	20001174 	.word	0x20001174
 80012cc:	40023000 	.word	0x40023000

080012d0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80012d4:	4b17      	ldr	r3, [pc, #92]	; (8001334 <MX_SPI1_Init+0x64>)
 80012d6:	4a18      	ldr	r2, [pc, #96]	; (8001338 <MX_SPI1_Init+0x68>)
 80012d8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80012da:	4b16      	ldr	r3, [pc, #88]	; (8001334 <MX_SPI1_Init+0x64>)
 80012dc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80012e0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80012e2:	4b14      	ldr	r3, [pc, #80]	; (8001334 <MX_SPI1_Init+0x64>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80012e8:	4b12      	ldr	r3, [pc, #72]	; (8001334 <MX_SPI1_Init+0x64>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80012ee:	4b11      	ldr	r3, [pc, #68]	; (8001334 <MX_SPI1_Init+0x64>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80012f4:	4b0f      	ldr	r3, [pc, #60]	; (8001334 <MX_SPI1_Init+0x64>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80012fa:	4b0e      	ldr	r3, [pc, #56]	; (8001334 <MX_SPI1_Init+0x64>)
 80012fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001300:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001302:	4b0c      	ldr	r3, [pc, #48]	; (8001334 <MX_SPI1_Init+0x64>)
 8001304:	2200      	movs	r2, #0
 8001306:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001308:	4b0a      	ldr	r3, [pc, #40]	; (8001334 <MX_SPI1_Init+0x64>)
 800130a:	2200      	movs	r2, #0
 800130c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800130e:	4b09      	ldr	r3, [pc, #36]	; (8001334 <MX_SPI1_Init+0x64>)
 8001310:	2200      	movs	r2, #0
 8001312:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001314:	4b07      	ldr	r3, [pc, #28]	; (8001334 <MX_SPI1_Init+0x64>)
 8001316:	2200      	movs	r2, #0
 8001318:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800131a:	4b06      	ldr	r3, [pc, #24]	; (8001334 <MX_SPI1_Init+0x64>)
 800131c:	220a      	movs	r2, #10
 800131e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001320:	4804      	ldr	r0, [pc, #16]	; (8001334 <MX_SPI1_Init+0x64>)
 8001322:	f003 f9c7 	bl	80046b4 <HAL_SPI_Init>
 8001326:	4603      	mov	r3, r0
 8001328:	2b00      	cmp	r3, #0
 800132a:	d001      	beq.n	8001330 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800132c:	f000 f968 	bl	8001600 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001330:	bf00      	nop
 8001332:	bd80      	pop	{r7, pc}
 8001334:	2000117c 	.word	0x2000117c
 8001338:	40013000 	.word	0x40013000

0800133c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b096      	sub	sp, #88	; 0x58
 8001340:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001342:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001346:	2200      	movs	r2, #0
 8001348:	601a      	str	r2, [r3, #0]
 800134a:	605a      	str	r2, [r3, #4]
 800134c:	609a      	str	r2, [r3, #8]
 800134e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001350:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001354:	2200      	movs	r2, #0
 8001356:	601a      	str	r2, [r3, #0]
 8001358:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800135a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800135e:	2200      	movs	r2, #0
 8001360:	601a      	str	r2, [r3, #0]
 8001362:	605a      	str	r2, [r3, #4]
 8001364:	609a      	str	r2, [r3, #8]
 8001366:	60da      	str	r2, [r3, #12]
 8001368:	611a      	str	r2, [r3, #16]
 800136a:	615a      	str	r2, [r3, #20]
 800136c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800136e:	1d3b      	adds	r3, r7, #4
 8001370:	2220      	movs	r2, #32
 8001372:	2100      	movs	r1, #0
 8001374:	4618      	mov	r0, r3
 8001376:	f00b f8db 	bl	800c530 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800137a:	4b3e      	ldr	r3, [pc, #248]	; (8001474 <MX_TIM1_Init+0x138>)
 800137c:	4a3e      	ldr	r2, [pc, #248]	; (8001478 <MX_TIM1_Init+0x13c>)
 800137e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 3;
 8001380:	4b3c      	ldr	r3, [pc, #240]	; (8001474 <MX_TIM1_Init+0x138>)
 8001382:	2203      	movs	r2, #3
 8001384:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001386:	4b3b      	ldr	r3, [pc, #236]	; (8001474 <MX_TIM1_Init+0x138>)
 8001388:	2200      	movs	r2, #0
 800138a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 104;
 800138c:	4b39      	ldr	r3, [pc, #228]	; (8001474 <MX_TIM1_Init+0x138>)
 800138e:	2268      	movs	r2, #104	; 0x68
 8001390:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001392:	4b38      	ldr	r3, [pc, #224]	; (8001474 <MX_TIM1_Init+0x138>)
 8001394:	2200      	movs	r2, #0
 8001396:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001398:	4b36      	ldr	r3, [pc, #216]	; (8001474 <MX_TIM1_Init+0x138>)
 800139a:	2200      	movs	r2, #0
 800139c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800139e:	4b35      	ldr	r3, [pc, #212]	; (8001474 <MX_TIM1_Init+0x138>)
 80013a0:	2280      	movs	r2, #128	; 0x80
 80013a2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80013a4:	4833      	ldr	r0, [pc, #204]	; (8001474 <MX_TIM1_Init+0x138>)
 80013a6:	f004 fb01 	bl	80059ac <HAL_TIM_Base_Init>
 80013aa:	4603      	mov	r3, r0
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d001      	beq.n	80013b4 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 80013b0:	f000 f926 	bl	8001600 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013b8:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80013ba:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80013be:	4619      	mov	r1, r3
 80013c0:	482c      	ldr	r0, [pc, #176]	; (8001474 <MX_TIM1_Init+0x138>)
 80013c2:	f004 ff15 	bl	80061f0 <HAL_TIM_ConfigClockSource>
 80013c6:	4603      	mov	r3, r0
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d001      	beq.n	80013d0 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 80013cc:	f000 f918 	bl	8001600 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80013d0:	4828      	ldr	r0, [pc, #160]	; (8001474 <MX_TIM1_Init+0x138>)
 80013d2:	f004 fb3a 	bl	8005a4a <HAL_TIM_PWM_Init>
 80013d6:	4603      	mov	r3, r0
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d001      	beq.n	80013e0 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 80013dc:	f000 f910 	bl	8001600 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013e0:	2300      	movs	r3, #0
 80013e2:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013e4:	2300      	movs	r3, #0
 80013e6:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80013e8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80013ec:	4619      	mov	r1, r3
 80013ee:	4821      	ldr	r0, [pc, #132]	; (8001474 <MX_TIM1_Init+0x138>)
 80013f0:	f005 faba 	bl	8006968 <HAL_TIMEx_MasterConfigSynchronization>
 80013f4:	4603      	mov	r3, r0
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d001      	beq.n	80013fe <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 80013fa:	f000 f901 	bl	8001600 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80013fe:	2360      	movs	r3, #96	; 0x60
 8001400:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001402:	2300      	movs	r3, #0
 8001404:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001406:	2300      	movs	r3, #0
 8001408:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800140a:	2300      	movs	r3, #0
 800140c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800140e:	2300      	movs	r3, #0
 8001410:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001412:	2300      	movs	r3, #0
 8001414:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001416:	2300      	movs	r3, #0
 8001418:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800141a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800141e:	2200      	movs	r2, #0
 8001420:	4619      	mov	r1, r3
 8001422:	4814      	ldr	r0, [pc, #80]	; (8001474 <MX_TIM1_Init+0x138>)
 8001424:	f004 fe22 	bl	800606c <HAL_TIM_PWM_ConfigChannel>
 8001428:	4603      	mov	r3, r0
 800142a:	2b00      	cmp	r3, #0
 800142c:	d001      	beq.n	8001432 <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 800142e:	f000 f8e7 	bl	8001600 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001432:	2300      	movs	r3, #0
 8001434:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001436:	2300      	movs	r3, #0
 8001438:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800143a:	2300      	movs	r3, #0
 800143c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800143e:	2300      	movs	r3, #0
 8001440:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001442:	2300      	movs	r3, #0
 8001444:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001446:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800144a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800144c:	2300      	movs	r3, #0
 800144e:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001450:	1d3b      	adds	r3, r7, #4
 8001452:	4619      	mov	r1, r3
 8001454:	4807      	ldr	r0, [pc, #28]	; (8001474 <MX_TIM1_Init+0x138>)
 8001456:	f005 faf5 	bl	8006a44 <HAL_TIMEx_ConfigBreakDeadTime>
 800145a:	4603      	mov	r3, r0
 800145c:	2b00      	cmp	r3, #0
 800145e:	d001      	beq.n	8001464 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8001460:	f000 f8ce 	bl	8001600 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001464:	4803      	ldr	r0, [pc, #12]	; (8001474 <MX_TIM1_Init+0x138>)
 8001466:	f000 f9dd 	bl	8001824 <HAL_TIM_MspPostInit>

}
 800146a:	bf00      	nop
 800146c:	3758      	adds	r7, #88	; 0x58
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}
 8001472:	bf00      	nop
 8001474:	20001234 	.word	0x20001234
 8001478:	40010000 	.word	0x40010000

0800147c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b082      	sub	sp, #8
 8001480:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001482:	2300      	movs	r3, #0
 8001484:	607b      	str	r3, [r7, #4]
 8001486:	4b0c      	ldr	r3, [pc, #48]	; (80014b8 <MX_DMA_Init+0x3c>)
 8001488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800148a:	4a0b      	ldr	r2, [pc, #44]	; (80014b8 <MX_DMA_Init+0x3c>)
 800148c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001490:	6313      	str	r3, [r2, #48]	; 0x30
 8001492:	4b09      	ldr	r3, [pc, #36]	; (80014b8 <MX_DMA_Init+0x3c>)
 8001494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001496:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800149a:	607b      	str	r3, [r7, #4]
 800149c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800149e:	2200      	movs	r2, #0
 80014a0:	2100      	movs	r1, #0
 80014a2:	2038      	movs	r0, #56	; 0x38
 80014a4:	f000 fc0d 	bl	8001cc2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80014a8:	2038      	movs	r0, #56	; 0x38
 80014aa:	f000 fc26 	bl	8001cfa <HAL_NVIC_EnableIRQ>

}
 80014ae:	bf00      	nop
 80014b0:	3708      	adds	r7, #8
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}
 80014b6:	bf00      	nop
 80014b8:	40023800 	.word	0x40023800

080014bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b08a      	sub	sp, #40	; 0x28
 80014c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014c2:	f107 0314 	add.w	r3, r7, #20
 80014c6:	2200      	movs	r2, #0
 80014c8:	601a      	str	r2, [r3, #0]
 80014ca:	605a      	str	r2, [r3, #4]
 80014cc:	609a      	str	r2, [r3, #8]
 80014ce:	60da      	str	r2, [r3, #12]
 80014d0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014d2:	2300      	movs	r3, #0
 80014d4:	613b      	str	r3, [r7, #16]
 80014d6:	4b46      	ldr	r3, [pc, #280]	; (80015f0 <MX_GPIO_Init+0x134>)
 80014d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014da:	4a45      	ldr	r2, [pc, #276]	; (80015f0 <MX_GPIO_Init+0x134>)
 80014dc:	f043 0304 	orr.w	r3, r3, #4
 80014e0:	6313      	str	r3, [r2, #48]	; 0x30
 80014e2:	4b43      	ldr	r3, [pc, #268]	; (80015f0 <MX_GPIO_Init+0x134>)
 80014e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e6:	f003 0304 	and.w	r3, r3, #4
 80014ea:	613b      	str	r3, [r7, #16]
 80014ec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80014ee:	2300      	movs	r3, #0
 80014f0:	60fb      	str	r3, [r7, #12]
 80014f2:	4b3f      	ldr	r3, [pc, #252]	; (80015f0 <MX_GPIO_Init+0x134>)
 80014f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f6:	4a3e      	ldr	r2, [pc, #248]	; (80015f0 <MX_GPIO_Init+0x134>)
 80014f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014fc:	6313      	str	r3, [r2, #48]	; 0x30
 80014fe:	4b3c      	ldr	r3, [pc, #240]	; (80015f0 <MX_GPIO_Init+0x134>)
 8001500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001502:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001506:	60fb      	str	r3, [r7, #12]
 8001508:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800150a:	2300      	movs	r3, #0
 800150c:	60bb      	str	r3, [r7, #8]
 800150e:	4b38      	ldr	r3, [pc, #224]	; (80015f0 <MX_GPIO_Init+0x134>)
 8001510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001512:	4a37      	ldr	r2, [pc, #220]	; (80015f0 <MX_GPIO_Init+0x134>)
 8001514:	f043 0301 	orr.w	r3, r3, #1
 8001518:	6313      	str	r3, [r2, #48]	; 0x30
 800151a:	4b35      	ldr	r3, [pc, #212]	; (80015f0 <MX_GPIO_Init+0x134>)
 800151c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800151e:	f003 0301 	and.w	r3, r3, #1
 8001522:	60bb      	str	r3, [r7, #8]
 8001524:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001526:	2300      	movs	r3, #0
 8001528:	607b      	str	r3, [r7, #4]
 800152a:	4b31      	ldr	r3, [pc, #196]	; (80015f0 <MX_GPIO_Init+0x134>)
 800152c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800152e:	4a30      	ldr	r2, [pc, #192]	; (80015f0 <MX_GPIO_Init+0x134>)
 8001530:	f043 0302 	orr.w	r3, r3, #2
 8001534:	6313      	str	r3, [r2, #48]	; 0x30
 8001536:	4b2e      	ldr	r3, [pc, #184]	; (80015f0 <MX_GPIO_Init+0x134>)
 8001538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800153a:	f003 0302 	and.w	r3, r3, #2
 800153e:	607b      	str	r3, [r7, #4]
 8001540:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8001542:	2201      	movs	r2, #1
 8001544:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001548:	482a      	ldr	r0, [pc, #168]	; (80015f4 <MX_GPIO_Init+0x138>)
 800154a:	f001 f96d 	bl	8002828 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FLASH_CS_GPIO_Port, FLASH_CS_Pin, GPIO_PIN_SET);
 800154e:	2201      	movs	r2, #1
 8001550:	2110      	movs	r1, #16
 8001552:	4829      	ldr	r0, [pc, #164]	; (80015f8 <MX_GPIO_Init+0x13c>)
 8001554:	f001 f968 	bl	8002828 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8001558:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800155c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800155e:	2301      	movs	r3, #1
 8001560:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001562:	2301      	movs	r3, #1
 8001564:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001566:	2300      	movs	r3, #0
 8001568:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800156a:	f107 0314 	add.w	r3, r7, #20
 800156e:	4619      	mov	r1, r3
 8001570:	4820      	ldr	r0, [pc, #128]	; (80015f4 <MX_GPIO_Init+0x138>)
 8001572:	f000 ffbd 	bl	80024f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 8001576:	2301      	movs	r3, #1
 8001578:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800157a:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 800157e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001580:	2301      	movs	r3, #1
 8001582:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 8001584:	f107 0314 	add.w	r3, r7, #20
 8001588:	4619      	mov	r1, r3
 800158a:	481b      	ldr	r0, [pc, #108]	; (80015f8 <MX_GPIO_Init+0x13c>)
 800158c:	f000 ffb0 	bl	80024f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : FLASH_CS_Pin */
  GPIO_InitStruct.Pin = FLASH_CS_Pin;
 8001590:	2310      	movs	r3, #16
 8001592:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001594:	2301      	movs	r3, #1
 8001596:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001598:	2301      	movs	r3, #1
 800159a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800159c:	2303      	movs	r3, #3
 800159e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(FLASH_CS_GPIO_Port, &GPIO_InitStruct);
 80015a0:	f107 0314 	add.w	r3, r7, #20
 80015a4:	4619      	mov	r1, r3
 80015a6:	4814      	ldr	r0, [pc, #80]	; (80015f8 <MX_GPIO_Init+0x13c>)
 80015a8:	f000 ffa2 	bl	80024f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_DET_Pin */
  GPIO_InitStruct.Pin = USB_DET_Pin;
 80015ac:	2340      	movs	r3, #64	; 0x40
 80015ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80015b0:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 80015b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80015b6:	2302      	movs	r3, #2
 80015b8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USB_DET_GPIO_Port, &GPIO_InitStruct);
 80015ba:	f107 0314 	add.w	r3, r7, #20
 80015be:	4619      	mov	r1, r3
 80015c0:	480e      	ldr	r0, [pc, #56]	; (80015fc <MX_GPIO_Init+0x140>)
 80015c2:	f000 ff95 	bl	80024f0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 1, 0);
 80015c6:	2200      	movs	r2, #0
 80015c8:	2101      	movs	r1, #1
 80015ca:	2006      	movs	r0, #6
 80015cc:	f000 fb79 	bl	8001cc2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80015d0:	2006      	movs	r0, #6
 80015d2:	f000 fb92 	bl	8001cfa <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 1, 0);
 80015d6:	2200      	movs	r2, #0
 80015d8:	2101      	movs	r1, #1
 80015da:	2017      	movs	r0, #23
 80015dc:	f000 fb71 	bl	8001cc2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80015e0:	2017      	movs	r0, #23
 80015e2:	f000 fb8a 	bl	8001cfa <HAL_NVIC_EnableIRQ>

}
 80015e6:	bf00      	nop
 80015e8:	3728      	adds	r7, #40	; 0x28
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}
 80015ee:	bf00      	nop
 80015f0:	40023800 	.word	0x40023800
 80015f4:	40020800 	.word	0x40020800
 80015f8:	40020000 	.word	0x40020000
 80015fc:	40020400 	.word	0x40020400

08001600 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001600:	b480      	push	{r7}
 8001602:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001604:	b672      	cpsid	i
}
 8001606:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001608:	e7fe      	b.n	8001608 <Error_Handler+0x8>
	...

0800160c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800160c:	b480      	push	{r7}
 800160e:	b083      	sub	sp, #12
 8001610:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001612:	2300      	movs	r3, #0
 8001614:	607b      	str	r3, [r7, #4]
 8001616:	4b10      	ldr	r3, [pc, #64]	; (8001658 <HAL_MspInit+0x4c>)
 8001618:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800161a:	4a0f      	ldr	r2, [pc, #60]	; (8001658 <HAL_MspInit+0x4c>)
 800161c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001620:	6453      	str	r3, [r2, #68]	; 0x44
 8001622:	4b0d      	ldr	r3, [pc, #52]	; (8001658 <HAL_MspInit+0x4c>)
 8001624:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001626:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800162a:	607b      	str	r3, [r7, #4]
 800162c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800162e:	2300      	movs	r3, #0
 8001630:	603b      	str	r3, [r7, #0]
 8001632:	4b09      	ldr	r3, [pc, #36]	; (8001658 <HAL_MspInit+0x4c>)
 8001634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001636:	4a08      	ldr	r2, [pc, #32]	; (8001658 <HAL_MspInit+0x4c>)
 8001638:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800163c:	6413      	str	r3, [r2, #64]	; 0x40
 800163e:	4b06      	ldr	r3, [pc, #24]	; (8001658 <HAL_MspInit+0x4c>)
 8001640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001642:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001646:	603b      	str	r3, [r7, #0]
 8001648:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800164a:	bf00      	nop
 800164c:	370c      	adds	r7, #12
 800164e:	46bd      	mov	sp, r7
 8001650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001654:	4770      	bx	lr
 8001656:	bf00      	nop
 8001658:	40023800 	.word	0x40023800

0800165c <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 800165c:	b480      	push	{r7}
 800165e:	b085      	sub	sp, #20
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	4a0b      	ldr	r2, [pc, #44]	; (8001698 <HAL_CRC_MspInit+0x3c>)
 800166a:	4293      	cmp	r3, r2
 800166c:	d10d      	bne.n	800168a <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800166e:	2300      	movs	r3, #0
 8001670:	60fb      	str	r3, [r7, #12]
 8001672:	4b0a      	ldr	r3, [pc, #40]	; (800169c <HAL_CRC_MspInit+0x40>)
 8001674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001676:	4a09      	ldr	r2, [pc, #36]	; (800169c <HAL_CRC_MspInit+0x40>)
 8001678:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800167c:	6313      	str	r3, [r2, #48]	; 0x30
 800167e:	4b07      	ldr	r3, [pc, #28]	; (800169c <HAL_CRC_MspInit+0x40>)
 8001680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001682:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001686:	60fb      	str	r3, [r7, #12]
 8001688:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 800168a:	bf00      	nop
 800168c:	3714      	adds	r7, #20
 800168e:	46bd      	mov	sp, r7
 8001690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001694:	4770      	bx	lr
 8001696:	bf00      	nop
 8001698:	40023000 	.word	0x40023000
 800169c:	40023800 	.word	0x40023800

080016a0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b08a      	sub	sp, #40	; 0x28
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016a8:	f107 0314 	add.w	r3, r7, #20
 80016ac:	2200      	movs	r2, #0
 80016ae:	601a      	str	r2, [r3, #0]
 80016b0:	605a      	str	r2, [r3, #4]
 80016b2:	609a      	str	r2, [r3, #8]
 80016b4:	60da      	str	r2, [r3, #12]
 80016b6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	4a34      	ldr	r2, [pc, #208]	; (8001790 <HAL_SPI_MspInit+0xf0>)
 80016be:	4293      	cmp	r3, r2
 80016c0:	d161      	bne.n	8001786 <HAL_SPI_MspInit+0xe6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80016c2:	2300      	movs	r3, #0
 80016c4:	613b      	str	r3, [r7, #16]
 80016c6:	4b33      	ldr	r3, [pc, #204]	; (8001794 <HAL_SPI_MspInit+0xf4>)
 80016c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016ca:	4a32      	ldr	r2, [pc, #200]	; (8001794 <HAL_SPI_MspInit+0xf4>)
 80016cc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80016d0:	6453      	str	r3, [r2, #68]	; 0x44
 80016d2:	4b30      	ldr	r3, [pc, #192]	; (8001794 <HAL_SPI_MspInit+0xf4>)
 80016d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016d6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80016da:	613b      	str	r3, [r7, #16]
 80016dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016de:	2300      	movs	r3, #0
 80016e0:	60fb      	str	r3, [r7, #12]
 80016e2:	4b2c      	ldr	r3, [pc, #176]	; (8001794 <HAL_SPI_MspInit+0xf4>)
 80016e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016e6:	4a2b      	ldr	r2, [pc, #172]	; (8001794 <HAL_SPI_MspInit+0xf4>)
 80016e8:	f043 0301 	orr.w	r3, r3, #1
 80016ec:	6313      	str	r3, [r2, #48]	; 0x30
 80016ee:	4b29      	ldr	r3, [pc, #164]	; (8001794 <HAL_SPI_MspInit+0xf4>)
 80016f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016f2:	f003 0301 	and.w	r3, r3, #1
 80016f6:	60fb      	str	r3, [r7, #12]
 80016f8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = FLASH_SCK_Pin|FLASH_MISO_Pin|FLASH_MOSI_Pin;
 80016fa:	23e0      	movs	r3, #224	; 0xe0
 80016fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016fe:	2302      	movs	r3, #2
 8001700:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001702:	2301      	movs	r3, #1
 8001704:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001706:	2303      	movs	r3, #3
 8001708:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800170a:	2305      	movs	r3, #5
 800170c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800170e:	f107 0314 	add.w	r3, r7, #20
 8001712:	4619      	mov	r1, r3
 8001714:	4820      	ldr	r0, [pc, #128]	; (8001798 <HAL_SPI_MspInit+0xf8>)
 8001716:	f000 feeb 	bl	80024f0 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream0;
 800171a:	4b20      	ldr	r3, [pc, #128]	; (800179c <HAL_SPI_MspInit+0xfc>)
 800171c:	4a20      	ldr	r2, [pc, #128]	; (80017a0 <HAL_SPI_MspInit+0x100>)
 800171e:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 8001720:	4b1e      	ldr	r3, [pc, #120]	; (800179c <HAL_SPI_MspInit+0xfc>)
 8001722:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8001726:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001728:	4b1c      	ldr	r3, [pc, #112]	; (800179c <HAL_SPI_MspInit+0xfc>)
 800172a:	2200      	movs	r2, #0
 800172c:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800172e:	4b1b      	ldr	r3, [pc, #108]	; (800179c <HAL_SPI_MspInit+0xfc>)
 8001730:	2200      	movs	r2, #0
 8001732:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001734:	4b19      	ldr	r3, [pc, #100]	; (800179c <HAL_SPI_MspInit+0xfc>)
 8001736:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800173a:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800173c:	4b17      	ldr	r3, [pc, #92]	; (800179c <HAL_SPI_MspInit+0xfc>)
 800173e:	2200      	movs	r2, #0
 8001740:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001742:	4b16      	ldr	r3, [pc, #88]	; (800179c <HAL_SPI_MspInit+0xfc>)
 8001744:	2200      	movs	r2, #0
 8001746:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8001748:	4b14      	ldr	r3, [pc, #80]	; (800179c <HAL_SPI_MspInit+0xfc>)
 800174a:	2200      	movs	r2, #0
 800174c:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800174e:	4b13      	ldr	r3, [pc, #76]	; (800179c <HAL_SPI_MspInit+0xfc>)
 8001750:	2200      	movs	r2, #0
 8001752:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001754:	4b11      	ldr	r3, [pc, #68]	; (800179c <HAL_SPI_MspInit+0xfc>)
 8001756:	2200      	movs	r2, #0
 8001758:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 800175a:	4810      	ldr	r0, [pc, #64]	; (800179c <HAL_SPI_MspInit+0xfc>)
 800175c:	f000 fb36 	bl	8001dcc <HAL_DMA_Init>
 8001760:	4603      	mov	r3, r0
 8001762:	2b00      	cmp	r3, #0
 8001764:	d001      	beq.n	800176a <HAL_SPI_MspInit+0xca>
    {
      Error_Handler();
 8001766:	f7ff ff4b 	bl	8001600 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	4a0b      	ldr	r2, [pc, #44]	; (800179c <HAL_SPI_MspInit+0xfc>)
 800176e:	64da      	str	r2, [r3, #76]	; 0x4c
 8001770:	4a0a      	ldr	r2, [pc, #40]	; (800179c <HAL_SPI_MspInit+0xfc>)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8001776:	2200      	movs	r2, #0
 8001778:	2100      	movs	r1, #0
 800177a:	2023      	movs	r0, #35	; 0x23
 800177c:	f000 faa1 	bl	8001cc2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8001780:	2023      	movs	r0, #35	; 0x23
 8001782:	f000 faba 	bl	8001cfa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001786:	bf00      	nop
 8001788:	3728      	adds	r7, #40	; 0x28
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}
 800178e:	bf00      	nop
 8001790:	40013000 	.word	0x40013000
 8001794:	40023800 	.word	0x40023800
 8001798:	40020000 	.word	0x40020000
 800179c:	200011d4 	.word	0x200011d4
 80017a0:	40026410 	.word	0x40026410

080017a4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b084      	sub	sp, #16
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	4a1a      	ldr	r2, [pc, #104]	; (800181c <HAL_TIM_Base_MspInit+0x78>)
 80017b2:	4293      	cmp	r3, r2
 80017b4:	d12d      	bne.n	8001812 <HAL_TIM_Base_MspInit+0x6e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80017b6:	2300      	movs	r3, #0
 80017b8:	60fb      	str	r3, [r7, #12]
 80017ba:	4b19      	ldr	r3, [pc, #100]	; (8001820 <HAL_TIM_Base_MspInit+0x7c>)
 80017bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017be:	4a18      	ldr	r2, [pc, #96]	; (8001820 <HAL_TIM_Base_MspInit+0x7c>)
 80017c0:	f043 0301 	orr.w	r3, r3, #1
 80017c4:	6453      	str	r3, [r2, #68]	; 0x44
 80017c6:	4b16      	ldr	r3, [pc, #88]	; (8001820 <HAL_TIM_Base_MspInit+0x7c>)
 80017c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017ca:	f003 0301 	and.w	r3, r3, #1
 80017ce:	60fb      	str	r3, [r7, #12]
 80017d0:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 80017d2:	2200      	movs	r2, #0
 80017d4:	2100      	movs	r1, #0
 80017d6:	2018      	movs	r0, #24
 80017d8:	f000 fa73 	bl	8001cc2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 80017dc:	2018      	movs	r0, #24
 80017de:	f000 fa8c 	bl	8001cfa <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80017e2:	2200      	movs	r2, #0
 80017e4:	2100      	movs	r1, #0
 80017e6:	2019      	movs	r0, #25
 80017e8:	f000 fa6b 	bl	8001cc2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80017ec:	2019      	movs	r0, #25
 80017ee:	f000 fa84 	bl	8001cfa <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 80017f2:	2200      	movs	r2, #0
 80017f4:	2100      	movs	r1, #0
 80017f6:	201a      	movs	r0, #26
 80017f8:	f000 fa63 	bl	8001cc2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 80017fc:	201a      	movs	r0, #26
 80017fe:	f000 fa7c 	bl	8001cfa <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8001802:	2200      	movs	r2, #0
 8001804:	2100      	movs	r1, #0
 8001806:	201b      	movs	r0, #27
 8001808:	f000 fa5b 	bl	8001cc2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 800180c:	201b      	movs	r0, #27
 800180e:	f000 fa74 	bl	8001cfa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001812:	bf00      	nop
 8001814:	3710      	adds	r7, #16
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}
 800181a:	bf00      	nop
 800181c:	40010000 	.word	0x40010000
 8001820:	40023800 	.word	0x40023800

08001824 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b088      	sub	sp, #32
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800182c:	f107 030c 	add.w	r3, r7, #12
 8001830:	2200      	movs	r2, #0
 8001832:	601a      	str	r2, [r3, #0]
 8001834:	605a      	str	r2, [r3, #4]
 8001836:	609a      	str	r2, [r3, #8]
 8001838:	60da      	str	r2, [r3, #12]
 800183a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	4a12      	ldr	r2, [pc, #72]	; (800188c <HAL_TIM_MspPostInit+0x68>)
 8001842:	4293      	cmp	r3, r2
 8001844:	d11e      	bne.n	8001884 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001846:	2300      	movs	r3, #0
 8001848:	60bb      	str	r3, [r7, #8]
 800184a:	4b11      	ldr	r3, [pc, #68]	; (8001890 <HAL_TIM_MspPostInit+0x6c>)
 800184c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800184e:	4a10      	ldr	r2, [pc, #64]	; (8001890 <HAL_TIM_MspPostInit+0x6c>)
 8001850:	f043 0301 	orr.w	r3, r3, #1
 8001854:	6313      	str	r3, [r2, #48]	; 0x30
 8001856:	4b0e      	ldr	r3, [pc, #56]	; (8001890 <HAL_TIM_MspPostInit+0x6c>)
 8001858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800185a:	f003 0301 	and.w	r3, r3, #1
 800185e:	60bb      	str	r3, [r7, #8]
 8001860:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = LED_STRIPE_Pin;
 8001862:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001866:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001868:	2302      	movs	r3, #2
 800186a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800186c:	2302      	movs	r3, #2
 800186e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001870:	2303      	movs	r3, #3
 8001872:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001874:	2301      	movs	r3, #1
 8001876:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(LED_STRIPE_GPIO_Port, &GPIO_InitStruct);
 8001878:	f107 030c 	add.w	r3, r7, #12
 800187c:	4619      	mov	r1, r3
 800187e:	4805      	ldr	r0, [pc, #20]	; (8001894 <HAL_TIM_MspPostInit+0x70>)
 8001880:	f000 fe36 	bl	80024f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001884:	bf00      	nop
 8001886:	3720      	adds	r7, #32
 8001888:	46bd      	mov	sp, r7
 800188a:	bd80      	pop	{r7, pc}
 800188c:	40010000 	.word	0x40010000
 8001890:	40023800 	.word	0x40023800
 8001894:	40020000 	.word	0x40020000

08001898 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001898:	b480      	push	{r7}
 800189a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800189c:	e7fe      	b.n	800189c <NMI_Handler+0x4>

0800189e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800189e:	b480      	push	{r7}
 80018a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018a2:	e7fe      	b.n	80018a2 <HardFault_Handler+0x4>

080018a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018a4:	b480      	push	{r7}
 80018a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018a8:	e7fe      	b.n	80018a8 <MemManage_Handler+0x4>

080018aa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018aa:	b480      	push	{r7}
 80018ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018ae:	e7fe      	b.n	80018ae <BusFault_Handler+0x4>

080018b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018b0:	b480      	push	{r7}
 80018b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018b4:	e7fe      	b.n	80018b4 <UsageFault_Handler+0x4>

080018b6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018b6:	b480      	push	{r7}
 80018b8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80018ba:	bf00      	nop
 80018bc:	46bd      	mov	sp, r7
 80018be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c2:	4770      	bx	lr

080018c4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018c4:	b480      	push	{r7}
 80018c6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018c8:	bf00      	nop
 80018ca:	46bd      	mov	sp, r7
 80018cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d0:	4770      	bx	lr

080018d2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018d2:	b480      	push	{r7}
 80018d4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018d6:	bf00      	nop
 80018d8:	46bd      	mov	sp, r7
 80018da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018de:	4770      	bx	lr

080018e0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018e4:	f000 f8ce 	bl	8001a84 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018e8:	bf00      	nop
 80018ea:	bd80      	pop	{r7, pc}

080018ec <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_Pin);
 80018f0:	2001      	movs	r0, #1
 80018f2:	f000 ffb3 	bl	800285c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80018f6:	bf00      	nop
 80018f8:	bd80      	pop	{r7, pc}

080018fa <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80018fa:	b580      	push	{r7, lr}
 80018fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USB_DET_Pin);
 80018fe:	2040      	movs	r0, #64	; 0x40
 8001900:	f000 ffac 	bl	800285c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001904:	bf00      	nop
 8001906:	bd80      	pop	{r7, pc}

08001908 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800190c:	4802      	ldr	r0, [pc, #8]	; (8001918 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 800190e:	f004 faa5 	bl	8005e5c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8001912:	bf00      	nop
 8001914:	bd80      	pop	{r7, pc}
 8001916:	bf00      	nop
 8001918:	20001234 	.word	0x20001234

0800191c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001920:	4802      	ldr	r0, [pc, #8]	; (800192c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001922:	f004 fa9b 	bl	8005e5c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001926:	bf00      	nop
 8001928:	bd80      	pop	{r7, pc}
 800192a:	bf00      	nop
 800192c:	20001234 	.word	0x20001234

08001930 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001934:	4802      	ldr	r0, [pc, #8]	; (8001940 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8001936:	f004 fa91 	bl	8005e5c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 800193a:	bf00      	nop
 800193c:	bd80      	pop	{r7, pc}
 800193e:	bf00      	nop
 8001940:	20001234 	.word	0x20001234

08001944 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001948:	4802      	ldr	r0, [pc, #8]	; (8001954 <TIM1_CC_IRQHandler+0x10>)
 800194a:	f004 fa87 	bl	8005e5c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 800194e:	bf00      	nop
 8001950:	bd80      	pop	{r7, pc}
 8001952:	bf00      	nop
 8001954:	20001234 	.word	0x20001234

08001958 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 800195c:	4802      	ldr	r0, [pc, #8]	; (8001968 <SPI1_IRQHandler+0x10>)
 800195e:	f003 fceb 	bl	8005338 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8001962:	bf00      	nop
 8001964:	bd80      	pop	{r7, pc}
 8001966:	bf00      	nop
 8001968:	2000117c 	.word	0x2000117c

0800196c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8001970:	4802      	ldr	r0, [pc, #8]	; (800197c <DMA2_Stream0_IRQHandler+0x10>)
 8001972:	f000 fb53 	bl	800201c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001976:	bf00      	nop
 8001978:	bd80      	pop	{r7, pc}
 800197a:	bf00      	nop
 800197c:	200011d4 	.word	0x200011d4

08001980 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001984:	4802      	ldr	r0, [pc, #8]	; (8001990 <OTG_FS_IRQHandler+0x10>)
 8001986:	f001 f90a 	bl	8002b9e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800198a:	bf00      	nop
 800198c:	bd80      	pop	{r7, pc}
 800198e:	bf00      	nop
 8001990:	20001760 	.word	0x20001760

08001994 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001994:	b480      	push	{r7}
 8001996:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001998:	4b06      	ldr	r3, [pc, #24]	; (80019b4 <SystemInit+0x20>)
 800199a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800199e:	4a05      	ldr	r2, [pc, #20]	; (80019b4 <SystemInit+0x20>)
 80019a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80019a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80019a8:	bf00      	nop
 80019aa:	46bd      	mov	sp, r7
 80019ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b0:	4770      	bx	lr
 80019b2:	bf00      	nop
 80019b4:	e000ed00 	.word	0xe000ed00

080019b8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80019b8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80019f0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80019bc:	480d      	ldr	r0, [pc, #52]	; (80019f4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80019be:	490e      	ldr	r1, [pc, #56]	; (80019f8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80019c0:	4a0e      	ldr	r2, [pc, #56]	; (80019fc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80019c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019c4:	e002      	b.n	80019cc <LoopCopyDataInit>

080019c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019ca:	3304      	adds	r3, #4

080019cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019d0:	d3f9      	bcc.n	80019c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019d2:	4a0b      	ldr	r2, [pc, #44]	; (8001a00 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80019d4:	4c0b      	ldr	r4, [pc, #44]	; (8001a04 <LoopFillZerobss+0x26>)
  movs r3, #0
 80019d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019d8:	e001      	b.n	80019de <LoopFillZerobss>

080019da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019dc:	3204      	adds	r2, #4

080019de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019e0:	d3fb      	bcc.n	80019da <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80019e2:	f7ff ffd7 	bl	8001994 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80019e6:	f00a fd7f 	bl	800c4e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80019ea:	f7ff fbda 	bl	80011a2 <main>
  bx  lr    
 80019ee:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80019f0:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80019f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019f8:	20000128 	.word	0x20000128
  ldr r2, =_sidata
 80019fc:	0800c5e0 	.word	0x0800c5e0
  ldr r2, =_sbss
 8001a00:	20000128 	.word	0x20000128
  ldr r4, =_ebss
 8001a04:	20002ce4 	.word	0x20002ce4

08001a08 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a08:	e7fe      	b.n	8001a08 <ADC_IRQHandler>

08001a0a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a0a:	b580      	push	{r7, lr}
 8001a0c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a0e:	2003      	movs	r0, #3
 8001a10:	f000 f94c 	bl	8001cac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a14:	200f      	movs	r0, #15
 8001a16:	f000 f805 	bl	8001a24 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a1a:	f7ff fdf7 	bl	800160c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a1e:	2300      	movs	r3, #0
}
 8001a20:	4618      	mov	r0, r3
 8001a22:	bd80      	pop	{r7, pc}

08001a24 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b082      	sub	sp, #8
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a2c:	4b12      	ldr	r3, [pc, #72]	; (8001a78 <HAL_InitTick+0x54>)
 8001a2e:	681a      	ldr	r2, [r3, #0]
 8001a30:	4b12      	ldr	r3, [pc, #72]	; (8001a7c <HAL_InitTick+0x58>)
 8001a32:	781b      	ldrb	r3, [r3, #0]
 8001a34:	4619      	mov	r1, r3
 8001a36:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a3a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a42:	4618      	mov	r0, r3
 8001a44:	f000 f967 	bl	8001d16 <HAL_SYSTICK_Config>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d001      	beq.n	8001a52 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a4e:	2301      	movs	r3, #1
 8001a50:	e00e      	b.n	8001a70 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	2b0f      	cmp	r3, #15
 8001a56:	d80a      	bhi.n	8001a6e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a58:	2200      	movs	r2, #0
 8001a5a:	6879      	ldr	r1, [r7, #4]
 8001a5c:	f04f 30ff 	mov.w	r0, #4294967295
 8001a60:	f000 f92f 	bl	8001cc2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a64:	4a06      	ldr	r2, [pc, #24]	; (8001a80 <HAL_InitTick+0x5c>)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	e000      	b.n	8001a70 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a6e:	2301      	movs	r3, #1
}
 8001a70:	4618      	mov	r0, r3
 8001a72:	3708      	adds	r7, #8
 8001a74:	46bd      	mov	sp, r7
 8001a76:	bd80      	pop	{r7, pc}
 8001a78:	20000004 	.word	0x20000004
 8001a7c:	2000000c 	.word	0x2000000c
 8001a80:	20000008 	.word	0x20000008

08001a84 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a84:	b480      	push	{r7}
 8001a86:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a88:	4b06      	ldr	r3, [pc, #24]	; (8001aa4 <HAL_IncTick+0x20>)
 8001a8a:	781b      	ldrb	r3, [r3, #0]
 8001a8c:	461a      	mov	r2, r3
 8001a8e:	4b06      	ldr	r3, [pc, #24]	; (8001aa8 <HAL_IncTick+0x24>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	4413      	add	r3, r2
 8001a94:	4a04      	ldr	r2, [pc, #16]	; (8001aa8 <HAL_IncTick+0x24>)
 8001a96:	6013      	str	r3, [r2, #0]
}
 8001a98:	bf00      	nop
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa0:	4770      	bx	lr
 8001aa2:	bf00      	nop
 8001aa4:	2000000c 	.word	0x2000000c
 8001aa8:	2000127c 	.word	0x2000127c

08001aac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001aac:	b480      	push	{r7}
 8001aae:	af00      	add	r7, sp, #0
  return uwTick;
 8001ab0:	4b03      	ldr	r3, [pc, #12]	; (8001ac0 <HAL_GetTick+0x14>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
}
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abc:	4770      	bx	lr
 8001abe:	bf00      	nop
 8001ac0:	2000127c 	.word	0x2000127c

08001ac4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b084      	sub	sp, #16
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001acc:	f7ff ffee 	bl	8001aac <HAL_GetTick>
 8001ad0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001adc:	d005      	beq.n	8001aea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ade:	4b0a      	ldr	r3, [pc, #40]	; (8001b08 <HAL_Delay+0x44>)
 8001ae0:	781b      	ldrb	r3, [r3, #0]
 8001ae2:	461a      	mov	r2, r3
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	4413      	add	r3, r2
 8001ae8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001aea:	bf00      	nop
 8001aec:	f7ff ffde 	bl	8001aac <HAL_GetTick>
 8001af0:	4602      	mov	r2, r0
 8001af2:	68bb      	ldr	r3, [r7, #8]
 8001af4:	1ad3      	subs	r3, r2, r3
 8001af6:	68fa      	ldr	r2, [r7, #12]
 8001af8:	429a      	cmp	r2, r3
 8001afa:	d8f7      	bhi.n	8001aec <HAL_Delay+0x28>
  {
  }
}
 8001afc:	bf00      	nop
 8001afe:	bf00      	nop
 8001b00:	3710      	adds	r7, #16
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bd80      	pop	{r7, pc}
 8001b06:	bf00      	nop
 8001b08:	2000000c 	.word	0x2000000c

08001b0c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	b085      	sub	sp, #20
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	f003 0307 	and.w	r3, r3, #7
 8001b1a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b1c:	4b0c      	ldr	r3, [pc, #48]	; (8001b50 <__NVIC_SetPriorityGrouping+0x44>)
 8001b1e:	68db      	ldr	r3, [r3, #12]
 8001b20:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b22:	68ba      	ldr	r2, [r7, #8]
 8001b24:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b28:	4013      	ands	r3, r2
 8001b2a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b30:	68bb      	ldr	r3, [r7, #8]
 8001b32:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b34:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b3c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b3e:	4a04      	ldr	r2, [pc, #16]	; (8001b50 <__NVIC_SetPriorityGrouping+0x44>)
 8001b40:	68bb      	ldr	r3, [r7, #8]
 8001b42:	60d3      	str	r3, [r2, #12]
}
 8001b44:	bf00      	nop
 8001b46:	3714      	adds	r7, #20
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4e:	4770      	bx	lr
 8001b50:	e000ed00 	.word	0xe000ed00

08001b54 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b54:	b480      	push	{r7}
 8001b56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b58:	4b04      	ldr	r3, [pc, #16]	; (8001b6c <__NVIC_GetPriorityGrouping+0x18>)
 8001b5a:	68db      	ldr	r3, [r3, #12]
 8001b5c:	0a1b      	lsrs	r3, r3, #8
 8001b5e:	f003 0307 	and.w	r3, r3, #7
}
 8001b62:	4618      	mov	r0, r3
 8001b64:	46bd      	mov	sp, r7
 8001b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6a:	4770      	bx	lr
 8001b6c:	e000ed00 	.word	0xe000ed00

08001b70 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b70:	b480      	push	{r7}
 8001b72:	b083      	sub	sp, #12
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	4603      	mov	r3, r0
 8001b78:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	db0b      	blt.n	8001b9a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b82:	79fb      	ldrb	r3, [r7, #7]
 8001b84:	f003 021f 	and.w	r2, r3, #31
 8001b88:	4907      	ldr	r1, [pc, #28]	; (8001ba8 <__NVIC_EnableIRQ+0x38>)
 8001b8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b8e:	095b      	lsrs	r3, r3, #5
 8001b90:	2001      	movs	r0, #1
 8001b92:	fa00 f202 	lsl.w	r2, r0, r2
 8001b96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001b9a:	bf00      	nop
 8001b9c:	370c      	adds	r7, #12
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba4:	4770      	bx	lr
 8001ba6:	bf00      	nop
 8001ba8:	e000e100 	.word	0xe000e100

08001bac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001bac:	b480      	push	{r7}
 8001bae:	b083      	sub	sp, #12
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	6039      	str	r1, [r7, #0]
 8001bb6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	db0a      	blt.n	8001bd6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	b2da      	uxtb	r2, r3
 8001bc4:	490c      	ldr	r1, [pc, #48]	; (8001bf8 <__NVIC_SetPriority+0x4c>)
 8001bc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bca:	0112      	lsls	r2, r2, #4
 8001bcc:	b2d2      	uxtb	r2, r2
 8001bce:	440b      	add	r3, r1
 8001bd0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001bd4:	e00a      	b.n	8001bec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	b2da      	uxtb	r2, r3
 8001bda:	4908      	ldr	r1, [pc, #32]	; (8001bfc <__NVIC_SetPriority+0x50>)
 8001bdc:	79fb      	ldrb	r3, [r7, #7]
 8001bde:	f003 030f 	and.w	r3, r3, #15
 8001be2:	3b04      	subs	r3, #4
 8001be4:	0112      	lsls	r2, r2, #4
 8001be6:	b2d2      	uxtb	r2, r2
 8001be8:	440b      	add	r3, r1
 8001bea:	761a      	strb	r2, [r3, #24]
}
 8001bec:	bf00      	nop
 8001bee:	370c      	adds	r7, #12
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf6:	4770      	bx	lr
 8001bf8:	e000e100 	.word	0xe000e100
 8001bfc:	e000ed00 	.word	0xe000ed00

08001c00 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c00:	b480      	push	{r7}
 8001c02:	b089      	sub	sp, #36	; 0x24
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	60f8      	str	r0, [r7, #12]
 8001c08:	60b9      	str	r1, [r7, #8]
 8001c0a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	f003 0307 	and.w	r3, r3, #7
 8001c12:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c14:	69fb      	ldr	r3, [r7, #28]
 8001c16:	f1c3 0307 	rsb	r3, r3, #7
 8001c1a:	2b04      	cmp	r3, #4
 8001c1c:	bf28      	it	cs
 8001c1e:	2304      	movcs	r3, #4
 8001c20:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c22:	69fb      	ldr	r3, [r7, #28]
 8001c24:	3304      	adds	r3, #4
 8001c26:	2b06      	cmp	r3, #6
 8001c28:	d902      	bls.n	8001c30 <NVIC_EncodePriority+0x30>
 8001c2a:	69fb      	ldr	r3, [r7, #28]
 8001c2c:	3b03      	subs	r3, #3
 8001c2e:	e000      	b.n	8001c32 <NVIC_EncodePriority+0x32>
 8001c30:	2300      	movs	r3, #0
 8001c32:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c34:	f04f 32ff 	mov.w	r2, #4294967295
 8001c38:	69bb      	ldr	r3, [r7, #24]
 8001c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c3e:	43da      	mvns	r2, r3
 8001c40:	68bb      	ldr	r3, [r7, #8]
 8001c42:	401a      	ands	r2, r3
 8001c44:	697b      	ldr	r3, [r7, #20]
 8001c46:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c48:	f04f 31ff 	mov.w	r1, #4294967295
 8001c4c:	697b      	ldr	r3, [r7, #20]
 8001c4e:	fa01 f303 	lsl.w	r3, r1, r3
 8001c52:	43d9      	mvns	r1, r3
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c58:	4313      	orrs	r3, r2
         );
}
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	3724      	adds	r7, #36	; 0x24
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c64:	4770      	bx	lr
	...

08001c68 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b082      	sub	sp, #8
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	3b01      	subs	r3, #1
 8001c74:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c78:	d301      	bcc.n	8001c7e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c7a:	2301      	movs	r3, #1
 8001c7c:	e00f      	b.n	8001c9e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c7e:	4a0a      	ldr	r2, [pc, #40]	; (8001ca8 <SysTick_Config+0x40>)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	3b01      	subs	r3, #1
 8001c84:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c86:	210f      	movs	r1, #15
 8001c88:	f04f 30ff 	mov.w	r0, #4294967295
 8001c8c:	f7ff ff8e 	bl	8001bac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c90:	4b05      	ldr	r3, [pc, #20]	; (8001ca8 <SysTick_Config+0x40>)
 8001c92:	2200      	movs	r2, #0
 8001c94:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c96:	4b04      	ldr	r3, [pc, #16]	; (8001ca8 <SysTick_Config+0x40>)
 8001c98:	2207      	movs	r2, #7
 8001c9a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c9c:	2300      	movs	r3, #0
}
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	3708      	adds	r7, #8
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bd80      	pop	{r7, pc}
 8001ca6:	bf00      	nop
 8001ca8:	e000e010 	.word	0xe000e010

08001cac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b082      	sub	sp, #8
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001cb4:	6878      	ldr	r0, [r7, #4]
 8001cb6:	f7ff ff29 	bl	8001b0c <__NVIC_SetPriorityGrouping>
}
 8001cba:	bf00      	nop
 8001cbc:	3708      	adds	r7, #8
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd80      	pop	{r7, pc}

08001cc2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001cc2:	b580      	push	{r7, lr}
 8001cc4:	b086      	sub	sp, #24
 8001cc6:	af00      	add	r7, sp, #0
 8001cc8:	4603      	mov	r3, r0
 8001cca:	60b9      	str	r1, [r7, #8]
 8001ccc:	607a      	str	r2, [r7, #4]
 8001cce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001cd4:	f7ff ff3e 	bl	8001b54 <__NVIC_GetPriorityGrouping>
 8001cd8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001cda:	687a      	ldr	r2, [r7, #4]
 8001cdc:	68b9      	ldr	r1, [r7, #8]
 8001cde:	6978      	ldr	r0, [r7, #20]
 8001ce0:	f7ff ff8e 	bl	8001c00 <NVIC_EncodePriority>
 8001ce4:	4602      	mov	r2, r0
 8001ce6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cea:	4611      	mov	r1, r2
 8001cec:	4618      	mov	r0, r3
 8001cee:	f7ff ff5d 	bl	8001bac <__NVIC_SetPriority>
}
 8001cf2:	bf00      	nop
 8001cf4:	3718      	adds	r7, #24
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bd80      	pop	{r7, pc}

08001cfa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cfa:	b580      	push	{r7, lr}
 8001cfc:	b082      	sub	sp, #8
 8001cfe:	af00      	add	r7, sp, #0
 8001d00:	4603      	mov	r3, r0
 8001d02:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d08:	4618      	mov	r0, r3
 8001d0a:	f7ff ff31 	bl	8001b70 <__NVIC_EnableIRQ>
}
 8001d0e:	bf00      	nop
 8001d10:	3708      	adds	r7, #8
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd80      	pop	{r7, pc}

08001d16 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d16:	b580      	push	{r7, lr}
 8001d18:	b082      	sub	sp, #8
 8001d1a:	af00      	add	r7, sp, #0
 8001d1c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d1e:	6878      	ldr	r0, [r7, #4]
 8001d20:	f7ff ffa2 	bl	8001c68 <SysTick_Config>
 8001d24:	4603      	mov	r3, r0
}
 8001d26:	4618      	mov	r0, r3
 8001d28:	3708      	adds	r7, #8
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bd80      	pop	{r7, pc}

08001d2e <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001d2e:	b580      	push	{r7, lr}
 8001d30:	b082      	sub	sp, #8
 8001d32:	af00      	add	r7, sp, #0
 8001d34:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d101      	bne.n	8001d40 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8001d3c:	2301      	movs	r3, #1
 8001d3e:	e00e      	b.n	8001d5e <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	795b      	ldrb	r3, [r3, #5]
 8001d44:	b2db      	uxtb	r3, r3
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d105      	bne.n	8001d56 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001d50:	6878      	ldr	r0, [r7, #4]
 8001d52:	f7ff fc83 	bl	800165c <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	2201      	movs	r2, #1
 8001d5a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001d5c:	2300      	movs	r3, #0
}
 8001d5e:	4618      	mov	r0, r3
 8001d60:	3708      	adds	r7, #8
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd80      	pop	{r7, pc}

08001d66 <HAL_CRC_Calculate>:
  * @param  pBuffer pointer to the input data buffer.
  * @param  BufferLength input data buffer length (number of uint32_t words).
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 8001d66:	b480      	push	{r7}
 8001d68:	b087      	sub	sp, #28
 8001d6a:	af00      	add	r7, sp, #0
 8001d6c:	60f8      	str	r0, [r7, #12]
 8001d6e:	60b9      	str	r1, [r7, #8]
 8001d70:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 8001d72:	2300      	movs	r3, #0
 8001d74:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	2202      	movs	r2, #2
 8001d7a:	715a      	strb	r2, [r3, #5]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	689a      	ldr	r2, [r3, #8]
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f042 0201 	orr.w	r2, r2, #1
 8001d8a:	609a      	str	r2, [r3, #8]

  /* Enter 32-bit input data to the CRC calculator */
  for (index = 0U; index < BufferLength; index++)
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	617b      	str	r3, [r7, #20]
 8001d90:	e00a      	b.n	8001da8 <HAL_CRC_Calculate+0x42>
  {
    hcrc->Instance->DR = pBuffer[index];
 8001d92:	697b      	ldr	r3, [r7, #20]
 8001d94:	009b      	lsls	r3, r3, #2
 8001d96:	68ba      	ldr	r2, [r7, #8]
 8001d98:	441a      	add	r2, r3
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	6812      	ldr	r2, [r2, #0]
 8001da0:	601a      	str	r2, [r3, #0]
  for (index = 0U; index < BufferLength; index++)
 8001da2:	697b      	ldr	r3, [r7, #20]
 8001da4:	3301      	adds	r3, #1
 8001da6:	617b      	str	r3, [r7, #20]
 8001da8:	697a      	ldr	r2, [r7, #20]
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	429a      	cmp	r2, r3
 8001dae:	d3f0      	bcc.n	8001d92 <HAL_CRC_Calculate+0x2c>
  }
  temp = hcrc->Instance->DR;
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	2201      	movs	r2, #1
 8001dbc:	715a      	strb	r2, [r3, #5]

  /* Return the CRC computed value */
  return temp;
 8001dbe:	693b      	ldr	r3, [r7, #16]
}
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	371c      	adds	r7, #28
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dca:	4770      	bx	lr

08001dcc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b086      	sub	sp, #24
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001dd8:	f7ff fe68 	bl	8001aac <HAL_GetTick>
 8001ddc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d101      	bne.n	8001de8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001de4:	2301      	movs	r3, #1
 8001de6:	e099      	b.n	8001f1c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2202      	movs	r2, #2
 8001dec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	2200      	movs	r2, #0
 8001df4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	681a      	ldr	r2, [r3, #0]
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f022 0201 	bic.w	r2, r2, #1
 8001e06:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e08:	e00f      	b.n	8001e2a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001e0a:	f7ff fe4f 	bl	8001aac <HAL_GetTick>
 8001e0e:	4602      	mov	r2, r0
 8001e10:	693b      	ldr	r3, [r7, #16]
 8001e12:	1ad3      	subs	r3, r2, r3
 8001e14:	2b05      	cmp	r3, #5
 8001e16:	d908      	bls.n	8001e2a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2220      	movs	r2, #32
 8001e1c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	2203      	movs	r2, #3
 8001e22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001e26:	2303      	movs	r3, #3
 8001e28:	e078      	b.n	8001f1c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f003 0301 	and.w	r3, r3, #1
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d1e8      	bne.n	8001e0a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001e40:	697a      	ldr	r2, [r7, #20]
 8001e42:	4b38      	ldr	r3, [pc, #224]	; (8001f24 <HAL_DMA_Init+0x158>)
 8001e44:	4013      	ands	r3, r2
 8001e46:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	685a      	ldr	r2, [r3, #4]
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	689b      	ldr	r3, [r3, #8]
 8001e50:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001e56:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	691b      	ldr	r3, [r3, #16]
 8001e5c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e62:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	699b      	ldr	r3, [r3, #24]
 8001e68:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e6e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	6a1b      	ldr	r3, [r3, #32]
 8001e74:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001e76:	697a      	ldr	r2, [r7, #20]
 8001e78:	4313      	orrs	r3, r2
 8001e7a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e80:	2b04      	cmp	r3, #4
 8001e82:	d107      	bne.n	8001e94 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e8c:	4313      	orrs	r3, r2
 8001e8e:	697a      	ldr	r2, [r7, #20]
 8001e90:	4313      	orrs	r3, r2
 8001e92:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	697a      	ldr	r2, [r7, #20]
 8001e9a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	695b      	ldr	r3, [r3, #20]
 8001ea2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001ea4:	697b      	ldr	r3, [r7, #20]
 8001ea6:	f023 0307 	bic.w	r3, r3, #7
 8001eaa:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eb0:	697a      	ldr	r2, [r7, #20]
 8001eb2:	4313      	orrs	r3, r2
 8001eb4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eba:	2b04      	cmp	r3, #4
 8001ebc:	d117      	bne.n	8001eee <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ec2:	697a      	ldr	r2, [r7, #20]
 8001ec4:	4313      	orrs	r3, r2
 8001ec6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d00e      	beq.n	8001eee <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001ed0:	6878      	ldr	r0, [r7, #4]
 8001ed2:	f000 fa91 	bl	80023f8 <DMA_CheckFifoParam>
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d008      	beq.n	8001eee <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	2240      	movs	r2, #64	; 0x40
 8001ee0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	2201      	movs	r2, #1
 8001ee6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001eea:	2301      	movs	r3, #1
 8001eec:	e016      	b.n	8001f1c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	697a      	ldr	r2, [r7, #20]
 8001ef4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001ef6:	6878      	ldr	r0, [r7, #4]
 8001ef8:	f000 fa48 	bl	800238c <DMA_CalcBaseAndBitshift>
 8001efc:	4603      	mov	r3, r0
 8001efe:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f04:	223f      	movs	r2, #63	; 0x3f
 8001f06:	409a      	lsls	r2, r3
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	2200      	movs	r2, #0
 8001f10:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	2201      	movs	r2, #1
 8001f16:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001f1a:	2300      	movs	r3, #0
}
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	3718      	adds	r7, #24
 8001f20:	46bd      	mov	sp, r7
 8001f22:	bd80      	pop	{r7, pc}
 8001f24:	f010803f 	.word	0xf010803f

08001f28 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b086      	sub	sp, #24
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	60f8      	str	r0, [r7, #12]
 8001f30:	60b9      	str	r1, [r7, #8]
 8001f32:	607a      	str	r2, [r7, #4]
 8001f34:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001f36:	2300      	movs	r3, #0
 8001f38:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f3e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001f46:	2b01      	cmp	r3, #1
 8001f48:	d101      	bne.n	8001f4e <HAL_DMA_Start_IT+0x26>
 8001f4a:	2302      	movs	r3, #2
 8001f4c:	e040      	b.n	8001fd0 <HAL_DMA_Start_IT+0xa8>
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	2201      	movs	r2, #1
 8001f52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001f5c:	b2db      	uxtb	r3, r3
 8001f5e:	2b01      	cmp	r3, #1
 8001f60:	d12f      	bne.n	8001fc2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	2202      	movs	r2, #2
 8001f66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	687a      	ldr	r2, [r7, #4]
 8001f74:	68b9      	ldr	r1, [r7, #8]
 8001f76:	68f8      	ldr	r0, [r7, #12]
 8001f78:	f000 f9da 	bl	8002330 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f80:	223f      	movs	r2, #63	; 0x3f
 8001f82:	409a      	lsls	r2, r3
 8001f84:	693b      	ldr	r3, [r7, #16]
 8001f86:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	681a      	ldr	r2, [r3, #0]
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f042 0216 	orr.w	r2, r2, #22
 8001f96:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d007      	beq.n	8001fb0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	681a      	ldr	r2, [r3, #0]
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f042 0208 	orr.w	r2, r2, #8
 8001fae:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	681a      	ldr	r2, [r3, #0]
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f042 0201 	orr.w	r2, r2, #1
 8001fbe:	601a      	str	r2, [r3, #0]
 8001fc0:	e005      	b.n	8001fce <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001fca:	2302      	movs	r3, #2
 8001fcc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001fce:	7dfb      	ldrb	r3, [r7, #23]
}
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	3718      	adds	r7, #24
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	bd80      	pop	{r7, pc}

08001fd8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	b083      	sub	sp, #12
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001fe6:	b2db      	uxtb	r3, r3
 8001fe8:	2b02      	cmp	r3, #2
 8001fea:	d004      	beq.n	8001ff6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	2280      	movs	r2, #128	; 0x80
 8001ff0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	e00c      	b.n	8002010 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	2205      	movs	r2, #5
 8001ffa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	681a      	ldr	r2, [r3, #0]
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f022 0201 	bic.w	r2, r2, #1
 800200c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800200e:	2300      	movs	r3, #0
}
 8002010:	4618      	mov	r0, r3
 8002012:	370c      	adds	r7, #12
 8002014:	46bd      	mov	sp, r7
 8002016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201a:	4770      	bx	lr

0800201c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b086      	sub	sp, #24
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002024:	2300      	movs	r3, #0
 8002026:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002028:	4b8e      	ldr	r3, [pc, #568]	; (8002264 <HAL_DMA_IRQHandler+0x248>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	4a8e      	ldr	r2, [pc, #568]	; (8002268 <HAL_DMA_IRQHandler+0x24c>)
 800202e:	fba2 2303 	umull	r2, r3, r2, r3
 8002032:	0a9b      	lsrs	r3, r3, #10
 8002034:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800203a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800203c:	693b      	ldr	r3, [r7, #16]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002046:	2208      	movs	r2, #8
 8002048:	409a      	lsls	r2, r3
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	4013      	ands	r3, r2
 800204e:	2b00      	cmp	r3, #0
 8002050:	d01a      	beq.n	8002088 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f003 0304 	and.w	r3, r3, #4
 800205c:	2b00      	cmp	r3, #0
 800205e:	d013      	beq.n	8002088 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	681a      	ldr	r2, [r3, #0]
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f022 0204 	bic.w	r2, r2, #4
 800206e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002074:	2208      	movs	r2, #8
 8002076:	409a      	lsls	r2, r3
 8002078:	693b      	ldr	r3, [r7, #16]
 800207a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002080:	f043 0201 	orr.w	r2, r3, #1
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800208c:	2201      	movs	r2, #1
 800208e:	409a      	lsls	r2, r3
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	4013      	ands	r3, r2
 8002094:	2b00      	cmp	r3, #0
 8002096:	d012      	beq.n	80020be <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	695b      	ldr	r3, [r3, #20]
 800209e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d00b      	beq.n	80020be <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020aa:	2201      	movs	r2, #1
 80020ac:	409a      	lsls	r2, r3
 80020ae:	693b      	ldr	r3, [r7, #16]
 80020b0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020b6:	f043 0202 	orr.w	r2, r3, #2
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020c2:	2204      	movs	r2, #4
 80020c4:	409a      	lsls	r2, r3
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	4013      	ands	r3, r2
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d012      	beq.n	80020f4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f003 0302 	and.w	r3, r3, #2
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d00b      	beq.n	80020f4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020e0:	2204      	movs	r2, #4
 80020e2:	409a      	lsls	r2, r3
 80020e4:	693b      	ldr	r3, [r7, #16]
 80020e6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020ec:	f043 0204 	orr.w	r2, r3, #4
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020f8:	2210      	movs	r2, #16
 80020fa:	409a      	lsls	r2, r3
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	4013      	ands	r3, r2
 8002100:	2b00      	cmp	r3, #0
 8002102:	d043      	beq.n	800218c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f003 0308 	and.w	r3, r3, #8
 800210e:	2b00      	cmp	r3, #0
 8002110:	d03c      	beq.n	800218c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002116:	2210      	movs	r2, #16
 8002118:	409a      	lsls	r2, r3
 800211a:	693b      	ldr	r3, [r7, #16]
 800211c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002128:	2b00      	cmp	r3, #0
 800212a:	d018      	beq.n	800215e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002136:	2b00      	cmp	r3, #0
 8002138:	d108      	bne.n	800214c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800213e:	2b00      	cmp	r3, #0
 8002140:	d024      	beq.n	800218c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002146:	6878      	ldr	r0, [r7, #4]
 8002148:	4798      	blx	r3
 800214a:	e01f      	b.n	800218c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002150:	2b00      	cmp	r3, #0
 8002152:	d01b      	beq.n	800218c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002158:	6878      	ldr	r0, [r7, #4]
 800215a:	4798      	blx	r3
 800215c:	e016      	b.n	800218c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002168:	2b00      	cmp	r3, #0
 800216a:	d107      	bne.n	800217c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	681a      	ldr	r2, [r3, #0]
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f022 0208 	bic.w	r2, r2, #8
 800217a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002180:	2b00      	cmp	r3, #0
 8002182:	d003      	beq.n	800218c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002188:	6878      	ldr	r0, [r7, #4]
 800218a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002190:	2220      	movs	r2, #32
 8002192:	409a      	lsls	r2, r3
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	4013      	ands	r3, r2
 8002198:	2b00      	cmp	r3, #0
 800219a:	f000 808f 	beq.w	80022bc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f003 0310 	and.w	r3, r3, #16
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	f000 8087 	beq.w	80022bc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021b2:	2220      	movs	r2, #32
 80021b4:	409a      	lsls	r2, r3
 80021b6:	693b      	ldr	r3, [r7, #16]
 80021b8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80021c0:	b2db      	uxtb	r3, r3
 80021c2:	2b05      	cmp	r3, #5
 80021c4:	d136      	bne.n	8002234 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	681a      	ldr	r2, [r3, #0]
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f022 0216 	bic.w	r2, r2, #22
 80021d4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	695a      	ldr	r2, [r3, #20]
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80021e4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d103      	bne.n	80021f6 <HAL_DMA_IRQHandler+0x1da>
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d007      	beq.n	8002206 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	681a      	ldr	r2, [r3, #0]
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f022 0208 	bic.w	r2, r2, #8
 8002204:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800220a:	223f      	movs	r2, #63	; 0x3f
 800220c:	409a      	lsls	r2, r3
 800220e:	693b      	ldr	r3, [r7, #16]
 8002210:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	2201      	movs	r2, #1
 8002216:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	2200      	movs	r2, #0
 800221e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002226:	2b00      	cmp	r3, #0
 8002228:	d07e      	beq.n	8002328 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800222e:	6878      	ldr	r0, [r7, #4]
 8002230:	4798      	blx	r3
        }
        return;
 8002232:	e079      	b.n	8002328 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800223e:	2b00      	cmp	r3, #0
 8002240:	d01d      	beq.n	800227e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800224c:	2b00      	cmp	r3, #0
 800224e:	d10d      	bne.n	800226c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002254:	2b00      	cmp	r3, #0
 8002256:	d031      	beq.n	80022bc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800225c:	6878      	ldr	r0, [r7, #4]
 800225e:	4798      	blx	r3
 8002260:	e02c      	b.n	80022bc <HAL_DMA_IRQHandler+0x2a0>
 8002262:	bf00      	nop
 8002264:	20000004 	.word	0x20000004
 8002268:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002270:	2b00      	cmp	r3, #0
 8002272:	d023      	beq.n	80022bc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002278:	6878      	ldr	r0, [r7, #4]
 800227a:	4798      	blx	r3
 800227c:	e01e      	b.n	80022bc <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002288:	2b00      	cmp	r3, #0
 800228a:	d10f      	bne.n	80022ac <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	681a      	ldr	r2, [r3, #0]
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f022 0210 	bic.w	r2, r2, #16
 800229a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2201      	movs	r2, #1
 80022a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2200      	movs	r2, #0
 80022a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d003      	beq.n	80022bc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022b8:	6878      	ldr	r0, [r7, #4]
 80022ba:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d032      	beq.n	800232a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022c8:	f003 0301 	and.w	r3, r3, #1
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d022      	beq.n	8002316 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	2205      	movs	r2, #5
 80022d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	681a      	ldr	r2, [r3, #0]
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f022 0201 	bic.w	r2, r2, #1
 80022e6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80022e8:	68bb      	ldr	r3, [r7, #8]
 80022ea:	3301      	adds	r3, #1
 80022ec:	60bb      	str	r3, [r7, #8]
 80022ee:	697a      	ldr	r2, [r7, #20]
 80022f0:	429a      	cmp	r2, r3
 80022f2:	d307      	bcc.n	8002304 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f003 0301 	and.w	r3, r3, #1
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d1f2      	bne.n	80022e8 <HAL_DMA_IRQHandler+0x2cc>
 8002302:	e000      	b.n	8002306 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002304:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	2201      	movs	r2, #1
 800230a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	2200      	movs	r2, #0
 8002312:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800231a:	2b00      	cmp	r3, #0
 800231c:	d005      	beq.n	800232a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002322:	6878      	ldr	r0, [r7, #4]
 8002324:	4798      	blx	r3
 8002326:	e000      	b.n	800232a <HAL_DMA_IRQHandler+0x30e>
        return;
 8002328:	bf00      	nop
    }
  }
}
 800232a:	3718      	adds	r7, #24
 800232c:	46bd      	mov	sp, r7
 800232e:	bd80      	pop	{r7, pc}

08002330 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002330:	b480      	push	{r7}
 8002332:	b085      	sub	sp, #20
 8002334:	af00      	add	r7, sp, #0
 8002336:	60f8      	str	r0, [r7, #12]
 8002338:	60b9      	str	r1, [r7, #8]
 800233a:	607a      	str	r2, [r7, #4]
 800233c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	681a      	ldr	r2, [r3, #0]
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800234c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	683a      	ldr	r2, [r7, #0]
 8002354:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	689b      	ldr	r3, [r3, #8]
 800235a:	2b40      	cmp	r3, #64	; 0x40
 800235c:	d108      	bne.n	8002370 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	687a      	ldr	r2, [r7, #4]
 8002364:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	68ba      	ldr	r2, [r7, #8]
 800236c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800236e:	e007      	b.n	8002380 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	68ba      	ldr	r2, [r7, #8]
 8002376:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	687a      	ldr	r2, [r7, #4]
 800237e:	60da      	str	r2, [r3, #12]
}
 8002380:	bf00      	nop
 8002382:	3714      	adds	r7, #20
 8002384:	46bd      	mov	sp, r7
 8002386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238a:	4770      	bx	lr

0800238c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800238c:	b480      	push	{r7}
 800238e:	b085      	sub	sp, #20
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	b2db      	uxtb	r3, r3
 800239a:	3b10      	subs	r3, #16
 800239c:	4a14      	ldr	r2, [pc, #80]	; (80023f0 <DMA_CalcBaseAndBitshift+0x64>)
 800239e:	fba2 2303 	umull	r2, r3, r2, r3
 80023a2:	091b      	lsrs	r3, r3, #4
 80023a4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80023a6:	4a13      	ldr	r2, [pc, #76]	; (80023f4 <DMA_CalcBaseAndBitshift+0x68>)
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	4413      	add	r3, r2
 80023ac:	781b      	ldrb	r3, [r3, #0]
 80023ae:	461a      	mov	r2, r3
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	2b03      	cmp	r3, #3
 80023b8:	d909      	bls.n	80023ce <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80023c2:	f023 0303 	bic.w	r3, r3, #3
 80023c6:	1d1a      	adds	r2, r3, #4
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	659a      	str	r2, [r3, #88]	; 0x58
 80023cc:	e007      	b.n	80023de <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80023d6:	f023 0303 	bic.w	r3, r3, #3
 80023da:	687a      	ldr	r2, [r7, #4]
 80023dc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80023e2:	4618      	mov	r0, r3
 80023e4:	3714      	adds	r7, #20
 80023e6:	46bd      	mov	sp, r7
 80023e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ec:	4770      	bx	lr
 80023ee:	bf00      	nop
 80023f0:	aaaaaaab 	.word	0xaaaaaaab
 80023f4:	0800c5a4 	.word	0x0800c5a4

080023f8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80023f8:	b480      	push	{r7}
 80023fa:	b085      	sub	sp, #20
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002400:	2300      	movs	r3, #0
 8002402:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002408:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	699b      	ldr	r3, [r3, #24]
 800240e:	2b00      	cmp	r3, #0
 8002410:	d11f      	bne.n	8002452 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002412:	68bb      	ldr	r3, [r7, #8]
 8002414:	2b03      	cmp	r3, #3
 8002416:	d856      	bhi.n	80024c6 <DMA_CheckFifoParam+0xce>
 8002418:	a201      	add	r2, pc, #4	; (adr r2, 8002420 <DMA_CheckFifoParam+0x28>)
 800241a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800241e:	bf00      	nop
 8002420:	08002431 	.word	0x08002431
 8002424:	08002443 	.word	0x08002443
 8002428:	08002431 	.word	0x08002431
 800242c:	080024c7 	.word	0x080024c7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002434:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002438:	2b00      	cmp	r3, #0
 800243a:	d046      	beq.n	80024ca <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800243c:	2301      	movs	r3, #1
 800243e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002440:	e043      	b.n	80024ca <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002446:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800244a:	d140      	bne.n	80024ce <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800244c:	2301      	movs	r3, #1
 800244e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002450:	e03d      	b.n	80024ce <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	699b      	ldr	r3, [r3, #24]
 8002456:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800245a:	d121      	bne.n	80024a0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800245c:	68bb      	ldr	r3, [r7, #8]
 800245e:	2b03      	cmp	r3, #3
 8002460:	d837      	bhi.n	80024d2 <DMA_CheckFifoParam+0xda>
 8002462:	a201      	add	r2, pc, #4	; (adr r2, 8002468 <DMA_CheckFifoParam+0x70>)
 8002464:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002468:	08002479 	.word	0x08002479
 800246c:	0800247f 	.word	0x0800247f
 8002470:	08002479 	.word	0x08002479
 8002474:	08002491 	.word	0x08002491
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002478:	2301      	movs	r3, #1
 800247a:	73fb      	strb	r3, [r7, #15]
      break;
 800247c:	e030      	b.n	80024e0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002482:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002486:	2b00      	cmp	r3, #0
 8002488:	d025      	beq.n	80024d6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800248a:	2301      	movs	r3, #1
 800248c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800248e:	e022      	b.n	80024d6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002494:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002498:	d11f      	bne.n	80024da <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800249a:	2301      	movs	r3, #1
 800249c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800249e:	e01c      	b.n	80024da <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80024a0:	68bb      	ldr	r3, [r7, #8]
 80024a2:	2b02      	cmp	r3, #2
 80024a4:	d903      	bls.n	80024ae <DMA_CheckFifoParam+0xb6>
 80024a6:	68bb      	ldr	r3, [r7, #8]
 80024a8:	2b03      	cmp	r3, #3
 80024aa:	d003      	beq.n	80024b4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80024ac:	e018      	b.n	80024e0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80024ae:	2301      	movs	r3, #1
 80024b0:	73fb      	strb	r3, [r7, #15]
      break;
 80024b2:	e015      	b.n	80024e0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024b8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d00e      	beq.n	80024de <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80024c0:	2301      	movs	r3, #1
 80024c2:	73fb      	strb	r3, [r7, #15]
      break;
 80024c4:	e00b      	b.n	80024de <DMA_CheckFifoParam+0xe6>
      break;
 80024c6:	bf00      	nop
 80024c8:	e00a      	b.n	80024e0 <DMA_CheckFifoParam+0xe8>
      break;
 80024ca:	bf00      	nop
 80024cc:	e008      	b.n	80024e0 <DMA_CheckFifoParam+0xe8>
      break;
 80024ce:	bf00      	nop
 80024d0:	e006      	b.n	80024e0 <DMA_CheckFifoParam+0xe8>
      break;
 80024d2:	bf00      	nop
 80024d4:	e004      	b.n	80024e0 <DMA_CheckFifoParam+0xe8>
      break;
 80024d6:	bf00      	nop
 80024d8:	e002      	b.n	80024e0 <DMA_CheckFifoParam+0xe8>
      break;   
 80024da:	bf00      	nop
 80024dc:	e000      	b.n	80024e0 <DMA_CheckFifoParam+0xe8>
      break;
 80024de:	bf00      	nop
    }
  } 
  
  return status; 
 80024e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80024e2:	4618      	mov	r0, r3
 80024e4:	3714      	adds	r7, #20
 80024e6:	46bd      	mov	sp, r7
 80024e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ec:	4770      	bx	lr
 80024ee:	bf00      	nop

080024f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80024f0:	b480      	push	{r7}
 80024f2:	b089      	sub	sp, #36	; 0x24
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
 80024f8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80024fa:	2300      	movs	r3, #0
 80024fc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80024fe:	2300      	movs	r3, #0
 8002500:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002502:	2300      	movs	r3, #0
 8002504:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002506:	2300      	movs	r3, #0
 8002508:	61fb      	str	r3, [r7, #28]
 800250a:	e159      	b.n	80027c0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800250c:	2201      	movs	r2, #1
 800250e:	69fb      	ldr	r3, [r7, #28]
 8002510:	fa02 f303 	lsl.w	r3, r2, r3
 8002514:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	697a      	ldr	r2, [r7, #20]
 800251c:	4013      	ands	r3, r2
 800251e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002520:	693a      	ldr	r2, [r7, #16]
 8002522:	697b      	ldr	r3, [r7, #20]
 8002524:	429a      	cmp	r2, r3
 8002526:	f040 8148 	bne.w	80027ba <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	685b      	ldr	r3, [r3, #4]
 800252e:	f003 0303 	and.w	r3, r3, #3
 8002532:	2b01      	cmp	r3, #1
 8002534:	d005      	beq.n	8002542 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	685b      	ldr	r3, [r3, #4]
 800253a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800253e:	2b02      	cmp	r3, #2
 8002540:	d130      	bne.n	80025a4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	689b      	ldr	r3, [r3, #8]
 8002546:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002548:	69fb      	ldr	r3, [r7, #28]
 800254a:	005b      	lsls	r3, r3, #1
 800254c:	2203      	movs	r2, #3
 800254e:	fa02 f303 	lsl.w	r3, r2, r3
 8002552:	43db      	mvns	r3, r3
 8002554:	69ba      	ldr	r2, [r7, #24]
 8002556:	4013      	ands	r3, r2
 8002558:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	68da      	ldr	r2, [r3, #12]
 800255e:	69fb      	ldr	r3, [r7, #28]
 8002560:	005b      	lsls	r3, r3, #1
 8002562:	fa02 f303 	lsl.w	r3, r2, r3
 8002566:	69ba      	ldr	r2, [r7, #24]
 8002568:	4313      	orrs	r3, r2
 800256a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	69ba      	ldr	r2, [r7, #24]
 8002570:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	685b      	ldr	r3, [r3, #4]
 8002576:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002578:	2201      	movs	r2, #1
 800257a:	69fb      	ldr	r3, [r7, #28]
 800257c:	fa02 f303 	lsl.w	r3, r2, r3
 8002580:	43db      	mvns	r3, r3
 8002582:	69ba      	ldr	r2, [r7, #24]
 8002584:	4013      	ands	r3, r2
 8002586:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	685b      	ldr	r3, [r3, #4]
 800258c:	091b      	lsrs	r3, r3, #4
 800258e:	f003 0201 	and.w	r2, r3, #1
 8002592:	69fb      	ldr	r3, [r7, #28]
 8002594:	fa02 f303 	lsl.w	r3, r2, r3
 8002598:	69ba      	ldr	r2, [r7, #24]
 800259a:	4313      	orrs	r3, r2
 800259c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	69ba      	ldr	r2, [r7, #24]
 80025a2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	685b      	ldr	r3, [r3, #4]
 80025a8:	f003 0303 	and.w	r3, r3, #3
 80025ac:	2b03      	cmp	r3, #3
 80025ae:	d017      	beq.n	80025e0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	68db      	ldr	r3, [r3, #12]
 80025b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80025b6:	69fb      	ldr	r3, [r7, #28]
 80025b8:	005b      	lsls	r3, r3, #1
 80025ba:	2203      	movs	r2, #3
 80025bc:	fa02 f303 	lsl.w	r3, r2, r3
 80025c0:	43db      	mvns	r3, r3
 80025c2:	69ba      	ldr	r2, [r7, #24]
 80025c4:	4013      	ands	r3, r2
 80025c6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	689a      	ldr	r2, [r3, #8]
 80025cc:	69fb      	ldr	r3, [r7, #28]
 80025ce:	005b      	lsls	r3, r3, #1
 80025d0:	fa02 f303 	lsl.w	r3, r2, r3
 80025d4:	69ba      	ldr	r2, [r7, #24]
 80025d6:	4313      	orrs	r3, r2
 80025d8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	69ba      	ldr	r2, [r7, #24]
 80025de:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	f003 0303 	and.w	r3, r3, #3
 80025e8:	2b02      	cmp	r3, #2
 80025ea:	d123      	bne.n	8002634 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80025ec:	69fb      	ldr	r3, [r7, #28]
 80025ee:	08da      	lsrs	r2, r3, #3
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	3208      	adds	r2, #8
 80025f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80025fa:	69fb      	ldr	r3, [r7, #28]
 80025fc:	f003 0307 	and.w	r3, r3, #7
 8002600:	009b      	lsls	r3, r3, #2
 8002602:	220f      	movs	r2, #15
 8002604:	fa02 f303 	lsl.w	r3, r2, r3
 8002608:	43db      	mvns	r3, r3
 800260a:	69ba      	ldr	r2, [r7, #24]
 800260c:	4013      	ands	r3, r2
 800260e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	691a      	ldr	r2, [r3, #16]
 8002614:	69fb      	ldr	r3, [r7, #28]
 8002616:	f003 0307 	and.w	r3, r3, #7
 800261a:	009b      	lsls	r3, r3, #2
 800261c:	fa02 f303 	lsl.w	r3, r2, r3
 8002620:	69ba      	ldr	r2, [r7, #24]
 8002622:	4313      	orrs	r3, r2
 8002624:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002626:	69fb      	ldr	r3, [r7, #28]
 8002628:	08da      	lsrs	r2, r3, #3
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	3208      	adds	r2, #8
 800262e:	69b9      	ldr	r1, [r7, #24]
 8002630:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800263a:	69fb      	ldr	r3, [r7, #28]
 800263c:	005b      	lsls	r3, r3, #1
 800263e:	2203      	movs	r2, #3
 8002640:	fa02 f303 	lsl.w	r3, r2, r3
 8002644:	43db      	mvns	r3, r3
 8002646:	69ba      	ldr	r2, [r7, #24]
 8002648:	4013      	ands	r3, r2
 800264a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	685b      	ldr	r3, [r3, #4]
 8002650:	f003 0203 	and.w	r2, r3, #3
 8002654:	69fb      	ldr	r3, [r7, #28]
 8002656:	005b      	lsls	r3, r3, #1
 8002658:	fa02 f303 	lsl.w	r3, r2, r3
 800265c:	69ba      	ldr	r2, [r7, #24]
 800265e:	4313      	orrs	r3, r2
 8002660:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	69ba      	ldr	r2, [r7, #24]
 8002666:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	685b      	ldr	r3, [r3, #4]
 800266c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002670:	2b00      	cmp	r3, #0
 8002672:	f000 80a2 	beq.w	80027ba <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002676:	2300      	movs	r3, #0
 8002678:	60fb      	str	r3, [r7, #12]
 800267a:	4b57      	ldr	r3, [pc, #348]	; (80027d8 <HAL_GPIO_Init+0x2e8>)
 800267c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800267e:	4a56      	ldr	r2, [pc, #344]	; (80027d8 <HAL_GPIO_Init+0x2e8>)
 8002680:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002684:	6453      	str	r3, [r2, #68]	; 0x44
 8002686:	4b54      	ldr	r3, [pc, #336]	; (80027d8 <HAL_GPIO_Init+0x2e8>)
 8002688:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800268a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800268e:	60fb      	str	r3, [r7, #12]
 8002690:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002692:	4a52      	ldr	r2, [pc, #328]	; (80027dc <HAL_GPIO_Init+0x2ec>)
 8002694:	69fb      	ldr	r3, [r7, #28]
 8002696:	089b      	lsrs	r3, r3, #2
 8002698:	3302      	adds	r3, #2
 800269a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800269e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80026a0:	69fb      	ldr	r3, [r7, #28]
 80026a2:	f003 0303 	and.w	r3, r3, #3
 80026a6:	009b      	lsls	r3, r3, #2
 80026a8:	220f      	movs	r2, #15
 80026aa:	fa02 f303 	lsl.w	r3, r2, r3
 80026ae:	43db      	mvns	r3, r3
 80026b0:	69ba      	ldr	r2, [r7, #24]
 80026b2:	4013      	ands	r3, r2
 80026b4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	4a49      	ldr	r2, [pc, #292]	; (80027e0 <HAL_GPIO_Init+0x2f0>)
 80026ba:	4293      	cmp	r3, r2
 80026bc:	d019      	beq.n	80026f2 <HAL_GPIO_Init+0x202>
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	4a48      	ldr	r2, [pc, #288]	; (80027e4 <HAL_GPIO_Init+0x2f4>)
 80026c2:	4293      	cmp	r3, r2
 80026c4:	d013      	beq.n	80026ee <HAL_GPIO_Init+0x1fe>
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	4a47      	ldr	r2, [pc, #284]	; (80027e8 <HAL_GPIO_Init+0x2f8>)
 80026ca:	4293      	cmp	r3, r2
 80026cc:	d00d      	beq.n	80026ea <HAL_GPIO_Init+0x1fa>
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	4a46      	ldr	r2, [pc, #280]	; (80027ec <HAL_GPIO_Init+0x2fc>)
 80026d2:	4293      	cmp	r3, r2
 80026d4:	d007      	beq.n	80026e6 <HAL_GPIO_Init+0x1f6>
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	4a45      	ldr	r2, [pc, #276]	; (80027f0 <HAL_GPIO_Init+0x300>)
 80026da:	4293      	cmp	r3, r2
 80026dc:	d101      	bne.n	80026e2 <HAL_GPIO_Init+0x1f2>
 80026de:	2304      	movs	r3, #4
 80026e0:	e008      	b.n	80026f4 <HAL_GPIO_Init+0x204>
 80026e2:	2307      	movs	r3, #7
 80026e4:	e006      	b.n	80026f4 <HAL_GPIO_Init+0x204>
 80026e6:	2303      	movs	r3, #3
 80026e8:	e004      	b.n	80026f4 <HAL_GPIO_Init+0x204>
 80026ea:	2302      	movs	r3, #2
 80026ec:	e002      	b.n	80026f4 <HAL_GPIO_Init+0x204>
 80026ee:	2301      	movs	r3, #1
 80026f0:	e000      	b.n	80026f4 <HAL_GPIO_Init+0x204>
 80026f2:	2300      	movs	r3, #0
 80026f4:	69fa      	ldr	r2, [r7, #28]
 80026f6:	f002 0203 	and.w	r2, r2, #3
 80026fa:	0092      	lsls	r2, r2, #2
 80026fc:	4093      	lsls	r3, r2
 80026fe:	69ba      	ldr	r2, [r7, #24]
 8002700:	4313      	orrs	r3, r2
 8002702:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002704:	4935      	ldr	r1, [pc, #212]	; (80027dc <HAL_GPIO_Init+0x2ec>)
 8002706:	69fb      	ldr	r3, [r7, #28]
 8002708:	089b      	lsrs	r3, r3, #2
 800270a:	3302      	adds	r3, #2
 800270c:	69ba      	ldr	r2, [r7, #24]
 800270e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002712:	4b38      	ldr	r3, [pc, #224]	; (80027f4 <HAL_GPIO_Init+0x304>)
 8002714:	689b      	ldr	r3, [r3, #8]
 8002716:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002718:	693b      	ldr	r3, [r7, #16]
 800271a:	43db      	mvns	r3, r3
 800271c:	69ba      	ldr	r2, [r7, #24]
 800271e:	4013      	ands	r3, r2
 8002720:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	685b      	ldr	r3, [r3, #4]
 8002726:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800272a:	2b00      	cmp	r3, #0
 800272c:	d003      	beq.n	8002736 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800272e:	69ba      	ldr	r2, [r7, #24]
 8002730:	693b      	ldr	r3, [r7, #16]
 8002732:	4313      	orrs	r3, r2
 8002734:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002736:	4a2f      	ldr	r2, [pc, #188]	; (80027f4 <HAL_GPIO_Init+0x304>)
 8002738:	69bb      	ldr	r3, [r7, #24]
 800273a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800273c:	4b2d      	ldr	r3, [pc, #180]	; (80027f4 <HAL_GPIO_Init+0x304>)
 800273e:	68db      	ldr	r3, [r3, #12]
 8002740:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002742:	693b      	ldr	r3, [r7, #16]
 8002744:	43db      	mvns	r3, r3
 8002746:	69ba      	ldr	r2, [r7, #24]
 8002748:	4013      	ands	r3, r2
 800274a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002754:	2b00      	cmp	r3, #0
 8002756:	d003      	beq.n	8002760 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002758:	69ba      	ldr	r2, [r7, #24]
 800275a:	693b      	ldr	r3, [r7, #16]
 800275c:	4313      	orrs	r3, r2
 800275e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002760:	4a24      	ldr	r2, [pc, #144]	; (80027f4 <HAL_GPIO_Init+0x304>)
 8002762:	69bb      	ldr	r3, [r7, #24]
 8002764:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002766:	4b23      	ldr	r3, [pc, #140]	; (80027f4 <HAL_GPIO_Init+0x304>)
 8002768:	685b      	ldr	r3, [r3, #4]
 800276a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800276c:	693b      	ldr	r3, [r7, #16]
 800276e:	43db      	mvns	r3, r3
 8002770:	69ba      	ldr	r2, [r7, #24]
 8002772:	4013      	ands	r3, r2
 8002774:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	685b      	ldr	r3, [r3, #4]
 800277a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800277e:	2b00      	cmp	r3, #0
 8002780:	d003      	beq.n	800278a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002782:	69ba      	ldr	r2, [r7, #24]
 8002784:	693b      	ldr	r3, [r7, #16]
 8002786:	4313      	orrs	r3, r2
 8002788:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800278a:	4a1a      	ldr	r2, [pc, #104]	; (80027f4 <HAL_GPIO_Init+0x304>)
 800278c:	69bb      	ldr	r3, [r7, #24]
 800278e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002790:	4b18      	ldr	r3, [pc, #96]	; (80027f4 <HAL_GPIO_Init+0x304>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002796:	693b      	ldr	r3, [r7, #16]
 8002798:	43db      	mvns	r3, r3
 800279a:	69ba      	ldr	r2, [r7, #24]
 800279c:	4013      	ands	r3, r2
 800279e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d003      	beq.n	80027b4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80027ac:	69ba      	ldr	r2, [r7, #24]
 80027ae:	693b      	ldr	r3, [r7, #16]
 80027b0:	4313      	orrs	r3, r2
 80027b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80027b4:	4a0f      	ldr	r2, [pc, #60]	; (80027f4 <HAL_GPIO_Init+0x304>)
 80027b6:	69bb      	ldr	r3, [r7, #24]
 80027b8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80027ba:	69fb      	ldr	r3, [r7, #28]
 80027bc:	3301      	adds	r3, #1
 80027be:	61fb      	str	r3, [r7, #28]
 80027c0:	69fb      	ldr	r3, [r7, #28]
 80027c2:	2b0f      	cmp	r3, #15
 80027c4:	f67f aea2 	bls.w	800250c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80027c8:	bf00      	nop
 80027ca:	bf00      	nop
 80027cc:	3724      	adds	r7, #36	; 0x24
 80027ce:	46bd      	mov	sp, r7
 80027d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d4:	4770      	bx	lr
 80027d6:	bf00      	nop
 80027d8:	40023800 	.word	0x40023800
 80027dc:	40013800 	.word	0x40013800
 80027e0:	40020000 	.word	0x40020000
 80027e4:	40020400 	.word	0x40020400
 80027e8:	40020800 	.word	0x40020800
 80027ec:	40020c00 	.word	0x40020c00
 80027f0:	40021000 	.word	0x40021000
 80027f4:	40013c00 	.word	0x40013c00

080027f8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80027f8:	b480      	push	{r7}
 80027fa:	b085      	sub	sp, #20
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
 8002800:	460b      	mov	r3, r1
 8002802:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	691a      	ldr	r2, [r3, #16]
 8002808:	887b      	ldrh	r3, [r7, #2]
 800280a:	4013      	ands	r3, r2
 800280c:	2b00      	cmp	r3, #0
 800280e:	d002      	beq.n	8002816 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002810:	2301      	movs	r3, #1
 8002812:	73fb      	strb	r3, [r7, #15]
 8002814:	e001      	b.n	800281a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002816:	2300      	movs	r3, #0
 8002818:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800281a:	7bfb      	ldrb	r3, [r7, #15]
}
 800281c:	4618      	mov	r0, r3
 800281e:	3714      	adds	r7, #20
 8002820:	46bd      	mov	sp, r7
 8002822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002826:	4770      	bx	lr

08002828 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002828:	b480      	push	{r7}
 800282a:	b083      	sub	sp, #12
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
 8002830:	460b      	mov	r3, r1
 8002832:	807b      	strh	r3, [r7, #2]
 8002834:	4613      	mov	r3, r2
 8002836:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002838:	787b      	ldrb	r3, [r7, #1]
 800283a:	2b00      	cmp	r3, #0
 800283c:	d003      	beq.n	8002846 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800283e:	887a      	ldrh	r2, [r7, #2]
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002844:	e003      	b.n	800284e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002846:	887b      	ldrh	r3, [r7, #2]
 8002848:	041a      	lsls	r2, r3, #16
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	619a      	str	r2, [r3, #24]
}
 800284e:	bf00      	nop
 8002850:	370c      	adds	r7, #12
 8002852:	46bd      	mov	sp, r7
 8002854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002858:	4770      	bx	lr
	...

0800285c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b082      	sub	sp, #8
 8002860:	af00      	add	r7, sp, #0
 8002862:	4603      	mov	r3, r0
 8002864:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002866:	4b08      	ldr	r3, [pc, #32]	; (8002888 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002868:	695a      	ldr	r2, [r3, #20]
 800286a:	88fb      	ldrh	r3, [r7, #6]
 800286c:	4013      	ands	r3, r2
 800286e:	2b00      	cmp	r3, #0
 8002870:	d006      	beq.n	8002880 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002872:	4a05      	ldr	r2, [pc, #20]	; (8002888 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002874:	88fb      	ldrh	r3, [r7, #6]
 8002876:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002878:	88fb      	ldrh	r3, [r7, #6]
 800287a:	4618      	mov	r0, r3
 800287c:	f7fe f9ee 	bl	8000c5c <HAL_GPIO_EXTI_Callback>
  }
}
 8002880:	bf00      	nop
 8002882:	3708      	adds	r7, #8
 8002884:	46bd      	mov	sp, r7
 8002886:	bd80      	pop	{r7, pc}
 8002888:	40013c00 	.word	0x40013c00

0800288c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800288c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800288e:	b08f      	sub	sp, #60	; 0x3c
 8002890:	af0a      	add	r7, sp, #40	; 0x28
 8002892:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2b00      	cmp	r3, #0
 8002898:	d101      	bne.n	800289e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800289a:	2301      	movs	r3, #1
 800289c:	e10f      	b.n	8002abe <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80028aa:	b2db      	uxtb	r3, r3
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d106      	bne.n	80028be <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2200      	movs	r2, #0
 80028b4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80028b8:	6878      	ldr	r0, [r7, #4]
 80028ba:	f009 fad1 	bl	800be60 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	2203      	movs	r2, #3
 80028c2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80028c6:	68bb      	ldr	r3, [r7, #8]
 80028c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d102      	bne.n	80028d8 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	2200      	movs	r2, #0
 80028d6:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	4618      	mov	r0, r3
 80028de:	f004 fa2c 	bl	8006d3a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	603b      	str	r3, [r7, #0]
 80028e8:	687e      	ldr	r6, [r7, #4]
 80028ea:	466d      	mov	r5, sp
 80028ec:	f106 0410 	add.w	r4, r6, #16
 80028f0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80028f2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80028f4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80028f6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80028f8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80028fc:	e885 0003 	stmia.w	r5, {r0, r1}
 8002900:	1d33      	adds	r3, r6, #4
 8002902:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002904:	6838      	ldr	r0, [r7, #0]
 8002906:	f004 f903 	bl	8006b10 <USB_CoreInit>
 800290a:	4603      	mov	r3, r0
 800290c:	2b00      	cmp	r3, #0
 800290e:	d005      	beq.n	800291c <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2202      	movs	r2, #2
 8002914:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002918:	2301      	movs	r3, #1
 800291a:	e0d0      	b.n	8002abe <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	2100      	movs	r1, #0
 8002922:	4618      	mov	r0, r3
 8002924:	f004 fa1a 	bl	8006d5c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002928:	2300      	movs	r3, #0
 800292a:	73fb      	strb	r3, [r7, #15]
 800292c:	e04a      	b.n	80029c4 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800292e:	7bfa      	ldrb	r2, [r7, #15]
 8002930:	6879      	ldr	r1, [r7, #4]
 8002932:	4613      	mov	r3, r2
 8002934:	00db      	lsls	r3, r3, #3
 8002936:	4413      	add	r3, r2
 8002938:	009b      	lsls	r3, r3, #2
 800293a:	440b      	add	r3, r1
 800293c:	333d      	adds	r3, #61	; 0x3d
 800293e:	2201      	movs	r2, #1
 8002940:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002942:	7bfa      	ldrb	r2, [r7, #15]
 8002944:	6879      	ldr	r1, [r7, #4]
 8002946:	4613      	mov	r3, r2
 8002948:	00db      	lsls	r3, r3, #3
 800294a:	4413      	add	r3, r2
 800294c:	009b      	lsls	r3, r3, #2
 800294e:	440b      	add	r3, r1
 8002950:	333c      	adds	r3, #60	; 0x3c
 8002952:	7bfa      	ldrb	r2, [r7, #15]
 8002954:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002956:	7bfa      	ldrb	r2, [r7, #15]
 8002958:	7bfb      	ldrb	r3, [r7, #15]
 800295a:	b298      	uxth	r0, r3
 800295c:	6879      	ldr	r1, [r7, #4]
 800295e:	4613      	mov	r3, r2
 8002960:	00db      	lsls	r3, r3, #3
 8002962:	4413      	add	r3, r2
 8002964:	009b      	lsls	r3, r3, #2
 8002966:	440b      	add	r3, r1
 8002968:	3344      	adds	r3, #68	; 0x44
 800296a:	4602      	mov	r2, r0
 800296c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800296e:	7bfa      	ldrb	r2, [r7, #15]
 8002970:	6879      	ldr	r1, [r7, #4]
 8002972:	4613      	mov	r3, r2
 8002974:	00db      	lsls	r3, r3, #3
 8002976:	4413      	add	r3, r2
 8002978:	009b      	lsls	r3, r3, #2
 800297a:	440b      	add	r3, r1
 800297c:	3340      	adds	r3, #64	; 0x40
 800297e:	2200      	movs	r2, #0
 8002980:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002982:	7bfa      	ldrb	r2, [r7, #15]
 8002984:	6879      	ldr	r1, [r7, #4]
 8002986:	4613      	mov	r3, r2
 8002988:	00db      	lsls	r3, r3, #3
 800298a:	4413      	add	r3, r2
 800298c:	009b      	lsls	r3, r3, #2
 800298e:	440b      	add	r3, r1
 8002990:	3348      	adds	r3, #72	; 0x48
 8002992:	2200      	movs	r2, #0
 8002994:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002996:	7bfa      	ldrb	r2, [r7, #15]
 8002998:	6879      	ldr	r1, [r7, #4]
 800299a:	4613      	mov	r3, r2
 800299c:	00db      	lsls	r3, r3, #3
 800299e:	4413      	add	r3, r2
 80029a0:	009b      	lsls	r3, r3, #2
 80029a2:	440b      	add	r3, r1
 80029a4:	334c      	adds	r3, #76	; 0x4c
 80029a6:	2200      	movs	r2, #0
 80029a8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80029aa:	7bfa      	ldrb	r2, [r7, #15]
 80029ac:	6879      	ldr	r1, [r7, #4]
 80029ae:	4613      	mov	r3, r2
 80029b0:	00db      	lsls	r3, r3, #3
 80029b2:	4413      	add	r3, r2
 80029b4:	009b      	lsls	r3, r3, #2
 80029b6:	440b      	add	r3, r1
 80029b8:	3354      	adds	r3, #84	; 0x54
 80029ba:	2200      	movs	r2, #0
 80029bc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80029be:	7bfb      	ldrb	r3, [r7, #15]
 80029c0:	3301      	adds	r3, #1
 80029c2:	73fb      	strb	r3, [r7, #15]
 80029c4:	7bfa      	ldrb	r2, [r7, #15]
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	685b      	ldr	r3, [r3, #4]
 80029ca:	429a      	cmp	r2, r3
 80029cc:	d3af      	bcc.n	800292e <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80029ce:	2300      	movs	r3, #0
 80029d0:	73fb      	strb	r3, [r7, #15]
 80029d2:	e044      	b.n	8002a5e <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80029d4:	7bfa      	ldrb	r2, [r7, #15]
 80029d6:	6879      	ldr	r1, [r7, #4]
 80029d8:	4613      	mov	r3, r2
 80029da:	00db      	lsls	r3, r3, #3
 80029dc:	4413      	add	r3, r2
 80029de:	009b      	lsls	r3, r3, #2
 80029e0:	440b      	add	r3, r1
 80029e2:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80029e6:	2200      	movs	r2, #0
 80029e8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80029ea:	7bfa      	ldrb	r2, [r7, #15]
 80029ec:	6879      	ldr	r1, [r7, #4]
 80029ee:	4613      	mov	r3, r2
 80029f0:	00db      	lsls	r3, r3, #3
 80029f2:	4413      	add	r3, r2
 80029f4:	009b      	lsls	r3, r3, #2
 80029f6:	440b      	add	r3, r1
 80029f8:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80029fc:	7bfa      	ldrb	r2, [r7, #15]
 80029fe:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002a00:	7bfa      	ldrb	r2, [r7, #15]
 8002a02:	6879      	ldr	r1, [r7, #4]
 8002a04:	4613      	mov	r3, r2
 8002a06:	00db      	lsls	r3, r3, #3
 8002a08:	4413      	add	r3, r2
 8002a0a:	009b      	lsls	r3, r3, #2
 8002a0c:	440b      	add	r3, r1
 8002a0e:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002a12:	2200      	movs	r2, #0
 8002a14:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002a16:	7bfa      	ldrb	r2, [r7, #15]
 8002a18:	6879      	ldr	r1, [r7, #4]
 8002a1a:	4613      	mov	r3, r2
 8002a1c:	00db      	lsls	r3, r3, #3
 8002a1e:	4413      	add	r3, r2
 8002a20:	009b      	lsls	r3, r3, #2
 8002a22:	440b      	add	r3, r1
 8002a24:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002a28:	2200      	movs	r2, #0
 8002a2a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002a2c:	7bfa      	ldrb	r2, [r7, #15]
 8002a2e:	6879      	ldr	r1, [r7, #4]
 8002a30:	4613      	mov	r3, r2
 8002a32:	00db      	lsls	r3, r3, #3
 8002a34:	4413      	add	r3, r2
 8002a36:	009b      	lsls	r3, r3, #2
 8002a38:	440b      	add	r3, r1
 8002a3a:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002a3e:	2200      	movs	r2, #0
 8002a40:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002a42:	7bfa      	ldrb	r2, [r7, #15]
 8002a44:	6879      	ldr	r1, [r7, #4]
 8002a46:	4613      	mov	r3, r2
 8002a48:	00db      	lsls	r3, r3, #3
 8002a4a:	4413      	add	r3, r2
 8002a4c:	009b      	lsls	r3, r3, #2
 8002a4e:	440b      	add	r3, r1
 8002a50:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002a54:	2200      	movs	r2, #0
 8002a56:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a58:	7bfb      	ldrb	r3, [r7, #15]
 8002a5a:	3301      	adds	r3, #1
 8002a5c:	73fb      	strb	r3, [r7, #15]
 8002a5e:	7bfa      	ldrb	r2, [r7, #15]
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	685b      	ldr	r3, [r3, #4]
 8002a64:	429a      	cmp	r2, r3
 8002a66:	d3b5      	bcc.n	80029d4 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	603b      	str	r3, [r7, #0]
 8002a6e:	687e      	ldr	r6, [r7, #4]
 8002a70:	466d      	mov	r5, sp
 8002a72:	f106 0410 	add.w	r4, r6, #16
 8002a76:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a78:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a7a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a7c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a7e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002a82:	e885 0003 	stmia.w	r5, {r0, r1}
 8002a86:	1d33      	adds	r3, r6, #4
 8002a88:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002a8a:	6838      	ldr	r0, [r7, #0]
 8002a8c:	f004 f9b2 	bl	8006df4 <USB_DevInit>
 8002a90:	4603      	mov	r3, r0
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d005      	beq.n	8002aa2 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	2202      	movs	r2, #2
 8002a9a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	e00d      	b.n	8002abe <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	2201      	movs	r2, #1
 8002aae:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	f005 fb01 	bl	80080be <USB_DevDisconnect>

  return HAL_OK;
 8002abc:	2300      	movs	r3, #0
}
 8002abe:	4618      	mov	r0, r3
 8002ac0:	3714      	adds	r7, #20
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002ac6 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002ac6:	b580      	push	{r7, lr}
 8002ac8:	b084      	sub	sp, #16
 8002aca:	af00      	add	r7, sp, #0
 8002acc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002ada:	2b01      	cmp	r3, #1
 8002adc:	d101      	bne.n	8002ae2 <HAL_PCD_Start+0x1c>
 8002ade:	2302      	movs	r3, #2
 8002ae0:	e020      	b.n	8002b24 <HAL_PCD_Start+0x5e>
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	2201      	movs	r2, #1
 8002ae6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002aee:	2b01      	cmp	r3, #1
 8002af0:	d109      	bne.n	8002b06 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002af6:	2b01      	cmp	r3, #1
 8002af8:	d005      	beq.n	8002b06 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002afe:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	f004 f904 	bl	8006d18 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	4618      	mov	r0, r3
 8002b16:	f005 fab1 	bl	800807c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002b22:	2300      	movs	r3, #0
}
 8002b24:	4618      	mov	r0, r3
 8002b26:	3710      	adds	r7, #16
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	bd80      	pop	{r7, pc}

08002b2c <HAL_PCD_Stop>:
  * @brief  Stop the USB device.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Stop(PCD_HandleTypeDef *hpcd)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b084      	sub	sp, #16
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002b40:	2b01      	cmp	r3, #1
 8002b42:	d101      	bne.n	8002b48 <HAL_PCD_Stop+0x1c>
 8002b44:	2302      	movs	r3, #2
 8002b46:	e026      	b.n	8002b96 <HAL_PCD_Stop+0x6a>
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2201      	movs	r2, #1
 8002b4c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  __HAL_PCD_DISABLE(hpcd);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	4618      	mov	r0, r3
 8002b56:	f004 f8f0 	bl	8006d3a <USB_DisableGlobalInt>
  (void)USB_DevDisconnect(hpcd->Instance);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	4618      	mov	r0, r3
 8002b60:	f005 faad 	bl	80080be <USB_DevDisconnect>

  (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	2110      	movs	r1, #16
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	f004 faa6 	bl	80070bc <USB_FlushTxFifo>

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b74:	2b01      	cmp	r3, #1
 8002b76:	d109      	bne.n	8002b8c <HAL_PCD_Stop+0x60>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002b7c:	2b01      	cmp	r3, #1
 8002b7e:	d005      	beq.n	8002b8c <HAL_PCD_Stop+0x60>
  {
    /* Disable USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b84:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_UNLOCK(hpcd);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2200      	movs	r2, #0
 8002b90:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002b94:	2300      	movs	r3, #0
}
 8002b96:	4618      	mov	r0, r3
 8002b98:	3710      	adds	r7, #16
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	bd80      	pop	{r7, pc}

08002b9e <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002b9e:	b590      	push	{r4, r7, lr}
 8002ba0:	b08d      	sub	sp, #52	; 0x34
 8002ba2:	af00      	add	r7, sp, #0
 8002ba4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002bac:	6a3b      	ldr	r3, [r7, #32]
 8002bae:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	f005 fb36 	bl	8008226 <USB_GetMode>
 8002bba:	4603      	mov	r3, r0
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	f040 848a 	bne.w	80034d6 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	f005 fa9a 	bl	8008100 <USB_ReadInterrupts>
 8002bcc:	4603      	mov	r3, r0
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	f000 8480 	beq.w	80034d4 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002bd4:	69fb      	ldr	r3, [r7, #28]
 8002bd6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002bda:	689b      	ldr	r3, [r3, #8]
 8002bdc:	0a1b      	lsrs	r3, r3, #8
 8002bde:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	4618      	mov	r0, r3
 8002bee:	f005 fa87 	bl	8008100 <USB_ReadInterrupts>
 8002bf2:	4603      	mov	r3, r0
 8002bf4:	f003 0302 	and.w	r3, r3, #2
 8002bf8:	2b02      	cmp	r3, #2
 8002bfa:	d107      	bne.n	8002c0c <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	695a      	ldr	r2, [r3, #20]
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f002 0202 	and.w	r2, r2, #2
 8002c0a:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	4618      	mov	r0, r3
 8002c12:	f005 fa75 	bl	8008100 <USB_ReadInterrupts>
 8002c16:	4603      	mov	r3, r0
 8002c18:	f003 0310 	and.w	r3, r3, #16
 8002c1c:	2b10      	cmp	r3, #16
 8002c1e:	d161      	bne.n	8002ce4 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	699a      	ldr	r2, [r3, #24]
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f022 0210 	bic.w	r2, r2, #16
 8002c2e:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002c30:	6a3b      	ldr	r3, [r7, #32]
 8002c32:	6a1b      	ldr	r3, [r3, #32]
 8002c34:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002c36:	69bb      	ldr	r3, [r7, #24]
 8002c38:	f003 020f 	and.w	r2, r3, #15
 8002c3c:	4613      	mov	r3, r2
 8002c3e:	00db      	lsls	r3, r3, #3
 8002c40:	4413      	add	r3, r2
 8002c42:	009b      	lsls	r3, r3, #2
 8002c44:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002c48:	687a      	ldr	r2, [r7, #4]
 8002c4a:	4413      	add	r3, r2
 8002c4c:	3304      	adds	r3, #4
 8002c4e:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002c50:	69bb      	ldr	r3, [r7, #24]
 8002c52:	0c5b      	lsrs	r3, r3, #17
 8002c54:	f003 030f 	and.w	r3, r3, #15
 8002c58:	2b02      	cmp	r3, #2
 8002c5a:	d124      	bne.n	8002ca6 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002c5c:	69ba      	ldr	r2, [r7, #24]
 8002c5e:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002c62:	4013      	ands	r3, r2
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d035      	beq.n	8002cd4 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002c68:	697b      	ldr	r3, [r7, #20]
 8002c6a:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002c6c:	69bb      	ldr	r3, [r7, #24]
 8002c6e:	091b      	lsrs	r3, r3, #4
 8002c70:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002c72:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002c76:	b29b      	uxth	r3, r3
 8002c78:	461a      	mov	r2, r3
 8002c7a:	6a38      	ldr	r0, [r7, #32]
 8002c7c:	f005 f8ac 	bl	8007dd8 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002c80:	697b      	ldr	r3, [r7, #20]
 8002c82:	691a      	ldr	r2, [r3, #16]
 8002c84:	69bb      	ldr	r3, [r7, #24]
 8002c86:	091b      	lsrs	r3, r3, #4
 8002c88:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002c8c:	441a      	add	r2, r3
 8002c8e:	697b      	ldr	r3, [r7, #20]
 8002c90:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002c92:	697b      	ldr	r3, [r7, #20]
 8002c94:	6a1a      	ldr	r2, [r3, #32]
 8002c96:	69bb      	ldr	r3, [r7, #24]
 8002c98:	091b      	lsrs	r3, r3, #4
 8002c9a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002c9e:	441a      	add	r2, r3
 8002ca0:	697b      	ldr	r3, [r7, #20]
 8002ca2:	621a      	str	r2, [r3, #32]
 8002ca4:	e016      	b.n	8002cd4 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002ca6:	69bb      	ldr	r3, [r7, #24]
 8002ca8:	0c5b      	lsrs	r3, r3, #17
 8002caa:	f003 030f 	and.w	r3, r3, #15
 8002cae:	2b06      	cmp	r3, #6
 8002cb0:	d110      	bne.n	8002cd4 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002cb8:	2208      	movs	r2, #8
 8002cba:	4619      	mov	r1, r3
 8002cbc:	6a38      	ldr	r0, [r7, #32]
 8002cbe:	f005 f88b 	bl	8007dd8 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002cc2:	697b      	ldr	r3, [r7, #20]
 8002cc4:	6a1a      	ldr	r2, [r3, #32]
 8002cc6:	69bb      	ldr	r3, [r7, #24]
 8002cc8:	091b      	lsrs	r3, r3, #4
 8002cca:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002cce:	441a      	add	r2, r3
 8002cd0:	697b      	ldr	r3, [r7, #20]
 8002cd2:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	699a      	ldr	r2, [r3, #24]
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f042 0210 	orr.w	r2, r2, #16
 8002ce2:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	4618      	mov	r0, r3
 8002cea:	f005 fa09 	bl	8008100 <USB_ReadInterrupts>
 8002cee:	4603      	mov	r3, r0
 8002cf0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002cf4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002cf8:	f040 80a7 	bne.w	8002e4a <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4618      	mov	r0, r3
 8002d06:	f005 fa0e 	bl	8008126 <USB_ReadDevAllOutEpInterrupt>
 8002d0a:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002d0c:	e099      	b.n	8002e42 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002d0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d10:	f003 0301 	and.w	r3, r3, #1
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	f000 808e 	beq.w	8002e36 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d20:	b2d2      	uxtb	r2, r2
 8002d22:	4611      	mov	r1, r2
 8002d24:	4618      	mov	r0, r3
 8002d26:	f005 fa32 	bl	800818e <USB_ReadDevOutEPInterrupt>
 8002d2a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002d2c:	693b      	ldr	r3, [r7, #16]
 8002d2e:	f003 0301 	and.w	r3, r3, #1
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d00c      	beq.n	8002d50 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d38:	015a      	lsls	r2, r3, #5
 8002d3a:	69fb      	ldr	r3, [r7, #28]
 8002d3c:	4413      	add	r3, r2
 8002d3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d42:	461a      	mov	r2, r3
 8002d44:	2301      	movs	r3, #1
 8002d46:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002d48:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002d4a:	6878      	ldr	r0, [r7, #4]
 8002d4c:	f000 fef0 	bl	8003b30 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002d50:	693b      	ldr	r3, [r7, #16]
 8002d52:	f003 0308 	and.w	r3, r3, #8
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d00c      	beq.n	8002d74 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d5c:	015a      	lsls	r2, r3, #5
 8002d5e:	69fb      	ldr	r3, [r7, #28]
 8002d60:	4413      	add	r3, r2
 8002d62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d66:	461a      	mov	r2, r3
 8002d68:	2308      	movs	r3, #8
 8002d6a:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002d6c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002d6e:	6878      	ldr	r0, [r7, #4]
 8002d70:	f000 ffc6 	bl	8003d00 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002d74:	693b      	ldr	r3, [r7, #16]
 8002d76:	f003 0310 	and.w	r3, r3, #16
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d008      	beq.n	8002d90 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d80:	015a      	lsls	r2, r3, #5
 8002d82:	69fb      	ldr	r3, [r7, #28]
 8002d84:	4413      	add	r3, r2
 8002d86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d8a:	461a      	mov	r2, r3
 8002d8c:	2310      	movs	r3, #16
 8002d8e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002d90:	693b      	ldr	r3, [r7, #16]
 8002d92:	f003 0302 	and.w	r3, r3, #2
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d030      	beq.n	8002dfc <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002d9a:	6a3b      	ldr	r3, [r7, #32]
 8002d9c:	695b      	ldr	r3, [r3, #20]
 8002d9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002da2:	2b80      	cmp	r3, #128	; 0x80
 8002da4:	d109      	bne.n	8002dba <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002da6:	69fb      	ldr	r3, [r7, #28]
 8002da8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002dac:	685b      	ldr	r3, [r3, #4]
 8002dae:	69fa      	ldr	r2, [r7, #28]
 8002db0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002db4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002db8:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002dba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002dbc:	4613      	mov	r3, r2
 8002dbe:	00db      	lsls	r3, r3, #3
 8002dc0:	4413      	add	r3, r2
 8002dc2:	009b      	lsls	r3, r3, #2
 8002dc4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002dc8:	687a      	ldr	r2, [r7, #4]
 8002dca:	4413      	add	r3, r2
 8002dcc:	3304      	adds	r3, #4
 8002dce:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002dd0:	697b      	ldr	r3, [r7, #20]
 8002dd2:	78db      	ldrb	r3, [r3, #3]
 8002dd4:	2b01      	cmp	r3, #1
 8002dd6:	d108      	bne.n	8002dea <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002dd8:	697b      	ldr	r3, [r7, #20]
 8002dda:	2200      	movs	r2, #0
 8002ddc:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002de0:	b2db      	uxtb	r3, r3
 8002de2:	4619      	mov	r1, r3
 8002de4:	6878      	ldr	r0, [r7, #4]
 8002de6:	f009 f937 	bl	800c058 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dec:	015a      	lsls	r2, r3, #5
 8002dee:	69fb      	ldr	r3, [r7, #28]
 8002df0:	4413      	add	r3, r2
 8002df2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002df6:	461a      	mov	r2, r3
 8002df8:	2302      	movs	r3, #2
 8002dfa:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002dfc:	693b      	ldr	r3, [r7, #16]
 8002dfe:	f003 0320 	and.w	r3, r3, #32
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d008      	beq.n	8002e18 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e08:	015a      	lsls	r2, r3, #5
 8002e0a:	69fb      	ldr	r3, [r7, #28]
 8002e0c:	4413      	add	r3, r2
 8002e0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e12:	461a      	mov	r2, r3
 8002e14:	2320      	movs	r3, #32
 8002e16:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002e18:	693b      	ldr	r3, [r7, #16]
 8002e1a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d009      	beq.n	8002e36 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e24:	015a      	lsls	r2, r3, #5
 8002e26:	69fb      	ldr	r3, [r7, #28]
 8002e28:	4413      	add	r3, r2
 8002e2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e2e:	461a      	mov	r2, r3
 8002e30:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002e34:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e38:	3301      	adds	r3, #1
 8002e3a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002e3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e3e:	085b      	lsrs	r3, r3, #1
 8002e40:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002e42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	f47f af62 	bne.w	8002d0e <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	4618      	mov	r0, r3
 8002e50:	f005 f956 	bl	8008100 <USB_ReadInterrupts>
 8002e54:	4603      	mov	r3, r0
 8002e56:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e5a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002e5e:	f040 80db 	bne.w	8003018 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	4618      	mov	r0, r3
 8002e68:	f005 f977 	bl	800815a <USB_ReadDevAllInEpInterrupt>
 8002e6c:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002e6e:	2300      	movs	r3, #0
 8002e70:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002e72:	e0cd      	b.n	8003010 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002e74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e76:	f003 0301 	and.w	r3, r3, #1
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	f000 80c2 	beq.w	8003004 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e86:	b2d2      	uxtb	r2, r2
 8002e88:	4611      	mov	r1, r2
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	f005 f99d 	bl	80081ca <USB_ReadDevInEPInterrupt>
 8002e90:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002e92:	693b      	ldr	r3, [r7, #16]
 8002e94:	f003 0301 	and.w	r3, r3, #1
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d057      	beq.n	8002f4c <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e9e:	f003 030f 	and.w	r3, r3, #15
 8002ea2:	2201      	movs	r2, #1
 8002ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea8:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002eaa:	69fb      	ldr	r3, [r7, #28]
 8002eac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002eb0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	43db      	mvns	r3, r3
 8002eb6:	69f9      	ldr	r1, [r7, #28]
 8002eb8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002ebc:	4013      	ands	r3, r2
 8002ebe:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ec2:	015a      	lsls	r2, r3, #5
 8002ec4:	69fb      	ldr	r3, [r7, #28]
 8002ec6:	4413      	add	r3, r2
 8002ec8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002ecc:	461a      	mov	r2, r3
 8002ece:	2301      	movs	r3, #1
 8002ed0:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	691b      	ldr	r3, [r3, #16]
 8002ed6:	2b01      	cmp	r3, #1
 8002ed8:	d132      	bne.n	8002f40 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002eda:	6879      	ldr	r1, [r7, #4]
 8002edc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ede:	4613      	mov	r3, r2
 8002ee0:	00db      	lsls	r3, r3, #3
 8002ee2:	4413      	add	r3, r2
 8002ee4:	009b      	lsls	r3, r3, #2
 8002ee6:	440b      	add	r3, r1
 8002ee8:	334c      	adds	r3, #76	; 0x4c
 8002eea:	6819      	ldr	r1, [r3, #0]
 8002eec:	6878      	ldr	r0, [r7, #4]
 8002eee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ef0:	4613      	mov	r3, r2
 8002ef2:	00db      	lsls	r3, r3, #3
 8002ef4:	4413      	add	r3, r2
 8002ef6:	009b      	lsls	r3, r3, #2
 8002ef8:	4403      	add	r3, r0
 8002efa:	3348      	adds	r3, #72	; 0x48
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	4419      	add	r1, r3
 8002f00:	6878      	ldr	r0, [r7, #4]
 8002f02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f04:	4613      	mov	r3, r2
 8002f06:	00db      	lsls	r3, r3, #3
 8002f08:	4413      	add	r3, r2
 8002f0a:	009b      	lsls	r3, r3, #2
 8002f0c:	4403      	add	r3, r0
 8002f0e:	334c      	adds	r3, #76	; 0x4c
 8002f10:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d113      	bne.n	8002f40 <HAL_PCD_IRQHandler+0x3a2>
 8002f18:	6879      	ldr	r1, [r7, #4]
 8002f1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f1c:	4613      	mov	r3, r2
 8002f1e:	00db      	lsls	r3, r3, #3
 8002f20:	4413      	add	r3, r2
 8002f22:	009b      	lsls	r3, r3, #2
 8002f24:	440b      	add	r3, r1
 8002f26:	3354      	adds	r3, #84	; 0x54
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d108      	bne.n	8002f40 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6818      	ldr	r0, [r3, #0]
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002f38:	461a      	mov	r2, r3
 8002f3a:	2101      	movs	r1, #1
 8002f3c:	f005 f9a4 	bl	8008288 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f42:	b2db      	uxtb	r3, r3
 8002f44:	4619      	mov	r1, r3
 8002f46:	6878      	ldr	r0, [r7, #4]
 8002f48:	f009 f80b 	bl	800bf62 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002f4c:	693b      	ldr	r3, [r7, #16]
 8002f4e:	f003 0308 	and.w	r3, r3, #8
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d008      	beq.n	8002f68 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f58:	015a      	lsls	r2, r3, #5
 8002f5a:	69fb      	ldr	r3, [r7, #28]
 8002f5c:	4413      	add	r3, r2
 8002f5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002f62:	461a      	mov	r2, r3
 8002f64:	2308      	movs	r3, #8
 8002f66:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002f68:	693b      	ldr	r3, [r7, #16]
 8002f6a:	f003 0310 	and.w	r3, r3, #16
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d008      	beq.n	8002f84 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f74:	015a      	lsls	r2, r3, #5
 8002f76:	69fb      	ldr	r3, [r7, #28]
 8002f78:	4413      	add	r3, r2
 8002f7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002f7e:	461a      	mov	r2, r3
 8002f80:	2310      	movs	r3, #16
 8002f82:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002f84:	693b      	ldr	r3, [r7, #16]
 8002f86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d008      	beq.n	8002fa0 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f90:	015a      	lsls	r2, r3, #5
 8002f92:	69fb      	ldr	r3, [r7, #28]
 8002f94:	4413      	add	r3, r2
 8002f96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002f9a:	461a      	mov	r2, r3
 8002f9c:	2340      	movs	r3, #64	; 0x40
 8002f9e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002fa0:	693b      	ldr	r3, [r7, #16]
 8002fa2:	f003 0302 	and.w	r3, r3, #2
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d023      	beq.n	8002ff2 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002faa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002fac:	6a38      	ldr	r0, [r7, #32]
 8002fae:	f004 f885 	bl	80070bc <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002fb2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fb4:	4613      	mov	r3, r2
 8002fb6:	00db      	lsls	r3, r3, #3
 8002fb8:	4413      	add	r3, r2
 8002fba:	009b      	lsls	r3, r3, #2
 8002fbc:	3338      	adds	r3, #56	; 0x38
 8002fbe:	687a      	ldr	r2, [r7, #4]
 8002fc0:	4413      	add	r3, r2
 8002fc2:	3304      	adds	r3, #4
 8002fc4:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002fc6:	697b      	ldr	r3, [r7, #20]
 8002fc8:	78db      	ldrb	r3, [r3, #3]
 8002fca:	2b01      	cmp	r3, #1
 8002fcc:	d108      	bne.n	8002fe0 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8002fce:	697b      	ldr	r3, [r7, #20]
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fd6:	b2db      	uxtb	r3, r3
 8002fd8:	4619      	mov	r1, r3
 8002fda:	6878      	ldr	r0, [r7, #4]
 8002fdc:	f009 f84e 	bl	800c07c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fe2:	015a      	lsls	r2, r3, #5
 8002fe4:	69fb      	ldr	r3, [r7, #28]
 8002fe6:	4413      	add	r3, r2
 8002fe8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002fec:	461a      	mov	r2, r3
 8002fee:	2302      	movs	r3, #2
 8002ff0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002ff2:	693b      	ldr	r3, [r7, #16]
 8002ff4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d003      	beq.n	8003004 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002ffc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002ffe:	6878      	ldr	r0, [r7, #4]
 8003000:	f000 fd08 	bl	8003a14 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003006:	3301      	adds	r3, #1
 8003008:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800300a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800300c:	085b      	lsrs	r3, r3, #1
 800300e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003010:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003012:	2b00      	cmp	r3, #0
 8003014:	f47f af2e 	bne.w	8002e74 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	4618      	mov	r0, r3
 800301e:	f005 f86f 	bl	8008100 <USB_ReadInterrupts>
 8003022:	4603      	mov	r3, r0
 8003024:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003028:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800302c:	d122      	bne.n	8003074 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800302e:	69fb      	ldr	r3, [r7, #28]
 8003030:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003034:	685b      	ldr	r3, [r3, #4]
 8003036:	69fa      	ldr	r2, [r7, #28]
 8003038:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800303c:	f023 0301 	bic.w	r3, r3, #1
 8003040:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8003048:	2b01      	cmp	r3, #1
 800304a:	d108      	bne.n	800305e <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2200      	movs	r2, #0
 8003050:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003054:	2100      	movs	r1, #0
 8003056:	6878      	ldr	r0, [r7, #4]
 8003058:	f000 fef0 	bl	8003e3c <HAL_PCDEx_LPM_Callback>
 800305c:	e002      	b.n	8003064 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800305e:	6878      	ldr	r0, [r7, #4]
 8003060:	f008 ffec 	bl	800c03c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	695a      	ldr	r2, [r3, #20]
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8003072:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4618      	mov	r0, r3
 800307a:	f005 f841 	bl	8008100 <USB_ReadInterrupts>
 800307e:	4603      	mov	r3, r0
 8003080:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003084:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003088:	d112      	bne.n	80030b0 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800308a:	69fb      	ldr	r3, [r7, #28]
 800308c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003090:	689b      	ldr	r3, [r3, #8]
 8003092:	f003 0301 	and.w	r3, r3, #1
 8003096:	2b01      	cmp	r3, #1
 8003098:	d102      	bne.n	80030a0 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800309a:	6878      	ldr	r0, [r7, #4]
 800309c:	f008 ffa8 	bl	800bff0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	695a      	ldr	r2, [r3, #20]
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80030ae:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	4618      	mov	r0, r3
 80030b6:	f005 f823 	bl	8008100 <USB_ReadInterrupts>
 80030ba:	4603      	mov	r3, r0
 80030bc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80030c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030c4:	f040 80b7 	bne.w	8003236 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80030c8:	69fb      	ldr	r3, [r7, #28]
 80030ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80030ce:	685b      	ldr	r3, [r3, #4]
 80030d0:	69fa      	ldr	r2, [r7, #28]
 80030d2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80030d6:	f023 0301 	bic.w	r3, r3, #1
 80030da:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	2110      	movs	r1, #16
 80030e2:	4618      	mov	r0, r3
 80030e4:	f003 ffea 	bl	80070bc <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80030e8:	2300      	movs	r3, #0
 80030ea:	62fb      	str	r3, [r7, #44]	; 0x2c
 80030ec:	e046      	b.n	800317c <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80030ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030f0:	015a      	lsls	r2, r3, #5
 80030f2:	69fb      	ldr	r3, [r7, #28]
 80030f4:	4413      	add	r3, r2
 80030f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80030fa:	461a      	mov	r2, r3
 80030fc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003100:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003102:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003104:	015a      	lsls	r2, r3, #5
 8003106:	69fb      	ldr	r3, [r7, #28]
 8003108:	4413      	add	r3, r2
 800310a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003112:	0151      	lsls	r1, r2, #5
 8003114:	69fa      	ldr	r2, [r7, #28]
 8003116:	440a      	add	r2, r1
 8003118:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800311c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003120:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003122:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003124:	015a      	lsls	r2, r3, #5
 8003126:	69fb      	ldr	r3, [r7, #28]
 8003128:	4413      	add	r3, r2
 800312a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800312e:	461a      	mov	r2, r3
 8003130:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003134:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003136:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003138:	015a      	lsls	r2, r3, #5
 800313a:	69fb      	ldr	r3, [r7, #28]
 800313c:	4413      	add	r3, r2
 800313e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003146:	0151      	lsls	r1, r2, #5
 8003148:	69fa      	ldr	r2, [r7, #28]
 800314a:	440a      	add	r2, r1
 800314c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003150:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003154:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003156:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003158:	015a      	lsls	r2, r3, #5
 800315a:	69fb      	ldr	r3, [r7, #28]
 800315c:	4413      	add	r3, r2
 800315e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003166:	0151      	lsls	r1, r2, #5
 8003168:	69fa      	ldr	r2, [r7, #28]
 800316a:	440a      	add	r2, r1
 800316c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003170:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003174:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003176:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003178:	3301      	adds	r3, #1
 800317a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	685b      	ldr	r3, [r3, #4]
 8003180:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003182:	429a      	cmp	r2, r3
 8003184:	d3b3      	bcc.n	80030ee <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003186:	69fb      	ldr	r3, [r7, #28]
 8003188:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800318c:	69db      	ldr	r3, [r3, #28]
 800318e:	69fa      	ldr	r2, [r7, #28]
 8003190:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003194:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8003198:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d016      	beq.n	80031d0 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80031a2:	69fb      	ldr	r3, [r7, #28]
 80031a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80031a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80031ac:	69fa      	ldr	r2, [r7, #28]
 80031ae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80031b2:	f043 030b 	orr.w	r3, r3, #11
 80031b6:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80031ba:	69fb      	ldr	r3, [r7, #28]
 80031bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80031c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031c2:	69fa      	ldr	r2, [r7, #28]
 80031c4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80031c8:	f043 030b 	orr.w	r3, r3, #11
 80031cc:	6453      	str	r3, [r2, #68]	; 0x44
 80031ce:	e015      	b.n	80031fc <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80031d0:	69fb      	ldr	r3, [r7, #28]
 80031d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80031d6:	695b      	ldr	r3, [r3, #20]
 80031d8:	69fa      	ldr	r2, [r7, #28]
 80031da:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80031de:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80031e2:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80031e6:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80031e8:	69fb      	ldr	r3, [r7, #28]
 80031ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80031ee:	691b      	ldr	r3, [r3, #16]
 80031f0:	69fa      	ldr	r2, [r7, #28]
 80031f2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80031f6:	f043 030b 	orr.w	r3, r3, #11
 80031fa:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80031fc:	69fb      	ldr	r3, [r7, #28]
 80031fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	69fa      	ldr	r2, [r7, #28]
 8003206:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800320a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800320e:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6818      	ldr	r0, [r3, #0]
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	691b      	ldr	r3, [r3, #16]
 8003218:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003220:	461a      	mov	r2, r3
 8003222:	f005 f831 	bl	8008288 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	695a      	ldr	r2, [r3, #20]
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003234:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	4618      	mov	r0, r3
 800323c:	f004 ff60 	bl	8008100 <USB_ReadInterrupts>
 8003240:	4603      	mov	r3, r0
 8003242:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003246:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800324a:	d124      	bne.n	8003296 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	4618      	mov	r0, r3
 8003252:	f004 fff6 	bl	8008242 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	4618      	mov	r0, r3
 800325c:	f003 ffab 	bl	80071b6 <USB_GetDevSpeed>
 8003260:	4603      	mov	r3, r0
 8003262:	461a      	mov	r2, r3
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681c      	ldr	r4, [r3, #0]
 800326c:	f001 fa16 	bl	800469c <HAL_RCC_GetHCLKFreq>
 8003270:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003276:	b2db      	uxtb	r3, r3
 8003278:	461a      	mov	r2, r3
 800327a:	4620      	mov	r0, r4
 800327c:	f003 fcaa 	bl	8006bd4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003280:	6878      	ldr	r0, [r7, #4]
 8003282:	f008 fe96 	bl	800bfb2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	695a      	ldr	r2, [r3, #20]
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8003294:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	4618      	mov	r0, r3
 800329c:	f004 ff30 	bl	8008100 <USB_ReadInterrupts>
 80032a0:	4603      	mov	r3, r0
 80032a2:	f003 0308 	and.w	r3, r3, #8
 80032a6:	2b08      	cmp	r3, #8
 80032a8:	d10a      	bne.n	80032c0 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80032aa:	6878      	ldr	r0, [r7, #4]
 80032ac:	f008 fe73 	bl	800bf96 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	695a      	ldr	r2, [r3, #20]
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f002 0208 	and.w	r2, r2, #8
 80032be:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	4618      	mov	r0, r3
 80032c6:	f004 ff1b 	bl	8008100 <USB_ReadInterrupts>
 80032ca:	4603      	mov	r3, r0
 80032cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032d0:	2b80      	cmp	r3, #128	; 0x80
 80032d2:	d122      	bne.n	800331a <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80032d4:	6a3b      	ldr	r3, [r7, #32]
 80032d6:	699b      	ldr	r3, [r3, #24]
 80032d8:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80032dc:	6a3b      	ldr	r3, [r7, #32]
 80032de:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80032e0:	2301      	movs	r3, #1
 80032e2:	627b      	str	r3, [r7, #36]	; 0x24
 80032e4:	e014      	b.n	8003310 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80032e6:	6879      	ldr	r1, [r7, #4]
 80032e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032ea:	4613      	mov	r3, r2
 80032ec:	00db      	lsls	r3, r3, #3
 80032ee:	4413      	add	r3, r2
 80032f0:	009b      	lsls	r3, r3, #2
 80032f2:	440b      	add	r3, r1
 80032f4:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80032f8:	781b      	ldrb	r3, [r3, #0]
 80032fa:	2b01      	cmp	r3, #1
 80032fc:	d105      	bne.n	800330a <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80032fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003300:	b2db      	uxtb	r3, r3
 8003302:	4619      	mov	r1, r3
 8003304:	6878      	ldr	r0, [r7, #4]
 8003306:	f000 fb27 	bl	8003958 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800330a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800330c:	3301      	adds	r3, #1
 800330e:	627b      	str	r3, [r7, #36]	; 0x24
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	685b      	ldr	r3, [r3, #4]
 8003314:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003316:	429a      	cmp	r2, r3
 8003318:	d3e5      	bcc.n	80032e6 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	4618      	mov	r0, r3
 8003320:	f004 feee 	bl	8008100 <USB_ReadInterrupts>
 8003324:	4603      	mov	r3, r0
 8003326:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800332a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800332e:	d13b      	bne.n	80033a8 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003330:	2301      	movs	r3, #1
 8003332:	627b      	str	r3, [r7, #36]	; 0x24
 8003334:	e02b      	b.n	800338e <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003338:	015a      	lsls	r2, r3, #5
 800333a:	69fb      	ldr	r3, [r7, #28]
 800333c:	4413      	add	r3, r2
 800333e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003346:	6879      	ldr	r1, [r7, #4]
 8003348:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800334a:	4613      	mov	r3, r2
 800334c:	00db      	lsls	r3, r3, #3
 800334e:	4413      	add	r3, r2
 8003350:	009b      	lsls	r3, r3, #2
 8003352:	440b      	add	r3, r1
 8003354:	3340      	adds	r3, #64	; 0x40
 8003356:	781b      	ldrb	r3, [r3, #0]
 8003358:	2b01      	cmp	r3, #1
 800335a:	d115      	bne.n	8003388 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800335c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800335e:	2b00      	cmp	r3, #0
 8003360:	da12      	bge.n	8003388 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003362:	6879      	ldr	r1, [r7, #4]
 8003364:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003366:	4613      	mov	r3, r2
 8003368:	00db      	lsls	r3, r3, #3
 800336a:	4413      	add	r3, r2
 800336c:	009b      	lsls	r3, r3, #2
 800336e:	440b      	add	r3, r1
 8003370:	333f      	adds	r3, #63	; 0x3f
 8003372:	2201      	movs	r2, #1
 8003374:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8003376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003378:	b2db      	uxtb	r3, r3
 800337a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800337e:	b2db      	uxtb	r3, r3
 8003380:	4619      	mov	r1, r3
 8003382:	6878      	ldr	r0, [r7, #4]
 8003384:	f000 fae8 	bl	8003958 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800338a:	3301      	adds	r3, #1
 800338c:	627b      	str	r3, [r7, #36]	; 0x24
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	685b      	ldr	r3, [r3, #4]
 8003392:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003394:	429a      	cmp	r2, r3
 8003396:	d3ce      	bcc.n	8003336 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	695a      	ldr	r2, [r3, #20]
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80033a6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	4618      	mov	r0, r3
 80033ae:	f004 fea7 	bl	8008100 <USB_ReadInterrupts>
 80033b2:	4603      	mov	r3, r0
 80033b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80033b8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80033bc:	d155      	bne.n	800346a <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80033be:	2301      	movs	r3, #1
 80033c0:	627b      	str	r3, [r7, #36]	; 0x24
 80033c2:	e045      	b.n	8003450 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80033c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033c6:	015a      	lsls	r2, r3, #5
 80033c8:	69fb      	ldr	r3, [r7, #28]
 80033ca:	4413      	add	r3, r2
 80033cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80033d4:	6879      	ldr	r1, [r7, #4]
 80033d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033d8:	4613      	mov	r3, r2
 80033da:	00db      	lsls	r3, r3, #3
 80033dc:	4413      	add	r3, r2
 80033de:	009b      	lsls	r3, r3, #2
 80033e0:	440b      	add	r3, r1
 80033e2:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80033e6:	781b      	ldrb	r3, [r3, #0]
 80033e8:	2b01      	cmp	r3, #1
 80033ea:	d12e      	bne.n	800344a <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80033ec:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	da2b      	bge.n	800344a <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80033f2:	69bb      	ldr	r3, [r7, #24]
 80033f4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 80033fe:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003402:	429a      	cmp	r2, r3
 8003404:	d121      	bne.n	800344a <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8003406:	6879      	ldr	r1, [r7, #4]
 8003408:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800340a:	4613      	mov	r3, r2
 800340c:	00db      	lsls	r3, r3, #3
 800340e:	4413      	add	r3, r2
 8003410:	009b      	lsls	r3, r3, #2
 8003412:	440b      	add	r3, r1
 8003414:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003418:	2201      	movs	r2, #1
 800341a:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800341c:	6a3b      	ldr	r3, [r7, #32]
 800341e:	699b      	ldr	r3, [r3, #24]
 8003420:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003424:	6a3b      	ldr	r3, [r7, #32]
 8003426:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8003428:	6a3b      	ldr	r3, [r7, #32]
 800342a:	695b      	ldr	r3, [r3, #20]
 800342c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003430:	2b00      	cmp	r3, #0
 8003432:	d10a      	bne.n	800344a <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8003434:	69fb      	ldr	r3, [r7, #28]
 8003436:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800343a:	685b      	ldr	r3, [r3, #4]
 800343c:	69fa      	ldr	r2, [r7, #28]
 800343e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003442:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003446:	6053      	str	r3, [r2, #4]
            break;
 8003448:	e007      	b.n	800345a <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800344a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800344c:	3301      	adds	r3, #1
 800344e:	627b      	str	r3, [r7, #36]	; 0x24
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	685b      	ldr	r3, [r3, #4]
 8003454:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003456:	429a      	cmp	r2, r3
 8003458:	d3b4      	bcc.n	80033c4 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	695a      	ldr	r2, [r3, #20]
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003468:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	4618      	mov	r0, r3
 8003470:	f004 fe46 	bl	8008100 <USB_ReadInterrupts>
 8003474:	4603      	mov	r3, r0
 8003476:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800347a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800347e:	d10a      	bne.n	8003496 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003480:	6878      	ldr	r0, [r7, #4]
 8003482:	f008 fe0d 	bl	800c0a0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	695a      	ldr	r2, [r3, #20]
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003494:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	4618      	mov	r0, r3
 800349c:	f004 fe30 	bl	8008100 <USB_ReadInterrupts>
 80034a0:	4603      	mov	r3, r0
 80034a2:	f003 0304 	and.w	r3, r3, #4
 80034a6:	2b04      	cmp	r3, #4
 80034a8:	d115      	bne.n	80034d6 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	685b      	ldr	r3, [r3, #4]
 80034b0:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80034b2:	69bb      	ldr	r3, [r7, #24]
 80034b4:	f003 0304 	and.w	r3, r3, #4
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d002      	beq.n	80034c2 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80034bc:	6878      	ldr	r0, [r7, #4]
 80034be:	f008 fdfd 	bl	800c0bc <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	6859      	ldr	r1, [r3, #4]
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	69ba      	ldr	r2, [r7, #24]
 80034ce:	430a      	orrs	r2, r1
 80034d0:	605a      	str	r2, [r3, #4]
 80034d2:	e000      	b.n	80034d6 <HAL_PCD_IRQHandler+0x938>
      return;
 80034d4:	bf00      	nop
    }
  }
}
 80034d6:	3734      	adds	r7, #52	; 0x34
 80034d8:	46bd      	mov	sp, r7
 80034da:	bd90      	pop	{r4, r7, pc}

080034dc <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	b082      	sub	sp, #8
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
 80034e4:	460b      	mov	r3, r1
 80034e6:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80034ee:	2b01      	cmp	r3, #1
 80034f0:	d101      	bne.n	80034f6 <HAL_PCD_SetAddress+0x1a>
 80034f2:	2302      	movs	r3, #2
 80034f4:	e013      	b.n	800351e <HAL_PCD_SetAddress+0x42>
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	2201      	movs	r2, #1
 80034fa:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	78fa      	ldrb	r2, [r7, #3]
 8003502:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	78fa      	ldrb	r2, [r7, #3]
 800350c:	4611      	mov	r1, r2
 800350e:	4618      	mov	r0, r3
 8003510:	f004 fd8e 	bl	8008030 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2200      	movs	r2, #0
 8003518:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800351c:	2300      	movs	r3, #0
}
 800351e:	4618      	mov	r0, r3
 8003520:	3708      	adds	r7, #8
 8003522:	46bd      	mov	sp, r7
 8003524:	bd80      	pop	{r7, pc}

08003526 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003526:	b580      	push	{r7, lr}
 8003528:	b084      	sub	sp, #16
 800352a:	af00      	add	r7, sp, #0
 800352c:	6078      	str	r0, [r7, #4]
 800352e:	4608      	mov	r0, r1
 8003530:	4611      	mov	r1, r2
 8003532:	461a      	mov	r2, r3
 8003534:	4603      	mov	r3, r0
 8003536:	70fb      	strb	r3, [r7, #3]
 8003538:	460b      	mov	r3, r1
 800353a:	803b      	strh	r3, [r7, #0]
 800353c:	4613      	mov	r3, r2
 800353e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003540:	2300      	movs	r3, #0
 8003542:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003544:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003548:	2b00      	cmp	r3, #0
 800354a:	da0f      	bge.n	800356c <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800354c:	78fb      	ldrb	r3, [r7, #3]
 800354e:	f003 020f 	and.w	r2, r3, #15
 8003552:	4613      	mov	r3, r2
 8003554:	00db      	lsls	r3, r3, #3
 8003556:	4413      	add	r3, r2
 8003558:	009b      	lsls	r3, r3, #2
 800355a:	3338      	adds	r3, #56	; 0x38
 800355c:	687a      	ldr	r2, [r7, #4]
 800355e:	4413      	add	r3, r2
 8003560:	3304      	adds	r3, #4
 8003562:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	2201      	movs	r2, #1
 8003568:	705a      	strb	r2, [r3, #1]
 800356a:	e00f      	b.n	800358c <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800356c:	78fb      	ldrb	r3, [r7, #3]
 800356e:	f003 020f 	and.w	r2, r3, #15
 8003572:	4613      	mov	r3, r2
 8003574:	00db      	lsls	r3, r3, #3
 8003576:	4413      	add	r3, r2
 8003578:	009b      	lsls	r3, r3, #2
 800357a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800357e:	687a      	ldr	r2, [r7, #4]
 8003580:	4413      	add	r3, r2
 8003582:	3304      	adds	r3, #4
 8003584:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	2200      	movs	r2, #0
 800358a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800358c:	78fb      	ldrb	r3, [r7, #3]
 800358e:	f003 030f 	and.w	r3, r3, #15
 8003592:	b2da      	uxtb	r2, r3
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003598:	883a      	ldrh	r2, [r7, #0]
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	78ba      	ldrb	r2, [r7, #2]
 80035a2:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	785b      	ldrb	r3, [r3, #1]
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d004      	beq.n	80035b6 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	781b      	ldrb	r3, [r3, #0]
 80035b0:	b29a      	uxth	r2, r3
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80035b6:	78bb      	ldrb	r3, [r7, #2]
 80035b8:	2b02      	cmp	r3, #2
 80035ba:	d102      	bne.n	80035c2 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	2200      	movs	r2, #0
 80035c0:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80035c8:	2b01      	cmp	r3, #1
 80035ca:	d101      	bne.n	80035d0 <HAL_PCD_EP_Open+0xaa>
 80035cc:	2302      	movs	r3, #2
 80035ce:	e00e      	b.n	80035ee <HAL_PCD_EP_Open+0xc8>
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2201      	movs	r2, #1
 80035d4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	68f9      	ldr	r1, [r7, #12]
 80035de:	4618      	mov	r0, r3
 80035e0:	f003 fe0e 	bl	8007200 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2200      	movs	r2, #0
 80035e8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 80035ec:	7afb      	ldrb	r3, [r7, #11]
}
 80035ee:	4618      	mov	r0, r3
 80035f0:	3710      	adds	r7, #16
 80035f2:	46bd      	mov	sp, r7
 80035f4:	bd80      	pop	{r7, pc}

080035f6 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80035f6:	b580      	push	{r7, lr}
 80035f8:	b084      	sub	sp, #16
 80035fa:	af00      	add	r7, sp, #0
 80035fc:	6078      	str	r0, [r7, #4]
 80035fe:	460b      	mov	r3, r1
 8003600:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003602:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003606:	2b00      	cmp	r3, #0
 8003608:	da0f      	bge.n	800362a <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800360a:	78fb      	ldrb	r3, [r7, #3]
 800360c:	f003 020f 	and.w	r2, r3, #15
 8003610:	4613      	mov	r3, r2
 8003612:	00db      	lsls	r3, r3, #3
 8003614:	4413      	add	r3, r2
 8003616:	009b      	lsls	r3, r3, #2
 8003618:	3338      	adds	r3, #56	; 0x38
 800361a:	687a      	ldr	r2, [r7, #4]
 800361c:	4413      	add	r3, r2
 800361e:	3304      	adds	r3, #4
 8003620:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	2201      	movs	r2, #1
 8003626:	705a      	strb	r2, [r3, #1]
 8003628:	e00f      	b.n	800364a <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800362a:	78fb      	ldrb	r3, [r7, #3]
 800362c:	f003 020f 	and.w	r2, r3, #15
 8003630:	4613      	mov	r3, r2
 8003632:	00db      	lsls	r3, r3, #3
 8003634:	4413      	add	r3, r2
 8003636:	009b      	lsls	r3, r3, #2
 8003638:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800363c:	687a      	ldr	r2, [r7, #4]
 800363e:	4413      	add	r3, r2
 8003640:	3304      	adds	r3, #4
 8003642:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	2200      	movs	r2, #0
 8003648:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800364a:	78fb      	ldrb	r3, [r7, #3]
 800364c:	f003 030f 	and.w	r3, r3, #15
 8003650:	b2da      	uxtb	r2, r3
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800365c:	2b01      	cmp	r3, #1
 800365e:	d101      	bne.n	8003664 <HAL_PCD_EP_Close+0x6e>
 8003660:	2302      	movs	r3, #2
 8003662:	e00e      	b.n	8003682 <HAL_PCD_EP_Close+0x8c>
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2201      	movs	r2, #1
 8003668:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	68f9      	ldr	r1, [r7, #12]
 8003672:	4618      	mov	r0, r3
 8003674:	f003 fe4c 	bl	8007310 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2200      	movs	r2, #0
 800367c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8003680:	2300      	movs	r3, #0
}
 8003682:	4618      	mov	r0, r3
 8003684:	3710      	adds	r7, #16
 8003686:	46bd      	mov	sp, r7
 8003688:	bd80      	pop	{r7, pc}

0800368a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800368a:	b580      	push	{r7, lr}
 800368c:	b086      	sub	sp, #24
 800368e:	af00      	add	r7, sp, #0
 8003690:	60f8      	str	r0, [r7, #12]
 8003692:	607a      	str	r2, [r7, #4]
 8003694:	603b      	str	r3, [r7, #0]
 8003696:	460b      	mov	r3, r1
 8003698:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800369a:	7afb      	ldrb	r3, [r7, #11]
 800369c:	f003 020f 	and.w	r2, r3, #15
 80036a0:	4613      	mov	r3, r2
 80036a2:	00db      	lsls	r3, r3, #3
 80036a4:	4413      	add	r3, r2
 80036a6:	009b      	lsls	r3, r3, #2
 80036a8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80036ac:	68fa      	ldr	r2, [r7, #12]
 80036ae:	4413      	add	r3, r2
 80036b0:	3304      	adds	r3, #4
 80036b2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80036b4:	697b      	ldr	r3, [r7, #20]
 80036b6:	687a      	ldr	r2, [r7, #4]
 80036b8:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80036ba:	697b      	ldr	r3, [r7, #20]
 80036bc:	683a      	ldr	r2, [r7, #0]
 80036be:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80036c0:	697b      	ldr	r3, [r7, #20]
 80036c2:	2200      	movs	r2, #0
 80036c4:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 80036c6:	697b      	ldr	r3, [r7, #20]
 80036c8:	2200      	movs	r2, #0
 80036ca:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80036cc:	7afb      	ldrb	r3, [r7, #11]
 80036ce:	f003 030f 	and.w	r3, r3, #15
 80036d2:	b2da      	uxtb	r2, r3
 80036d4:	697b      	ldr	r3, [r7, #20]
 80036d6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	691b      	ldr	r3, [r3, #16]
 80036dc:	2b01      	cmp	r3, #1
 80036de:	d102      	bne.n	80036e6 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80036e0:	687a      	ldr	r2, [r7, #4]
 80036e2:	697b      	ldr	r3, [r7, #20]
 80036e4:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80036e6:	7afb      	ldrb	r3, [r7, #11]
 80036e8:	f003 030f 	and.w	r3, r3, #15
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d109      	bne.n	8003704 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	6818      	ldr	r0, [r3, #0]
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	691b      	ldr	r3, [r3, #16]
 80036f8:	b2db      	uxtb	r3, r3
 80036fa:	461a      	mov	r2, r3
 80036fc:	6979      	ldr	r1, [r7, #20]
 80036fe:	f004 f92b 	bl	8007958 <USB_EP0StartXfer>
 8003702:	e008      	b.n	8003716 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	6818      	ldr	r0, [r3, #0]
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	691b      	ldr	r3, [r3, #16]
 800370c:	b2db      	uxtb	r3, r3
 800370e:	461a      	mov	r2, r3
 8003710:	6979      	ldr	r1, [r7, #20]
 8003712:	f003 fed9 	bl	80074c8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003716:	2300      	movs	r3, #0
}
 8003718:	4618      	mov	r0, r3
 800371a:	3718      	adds	r7, #24
 800371c:	46bd      	mov	sp, r7
 800371e:	bd80      	pop	{r7, pc}

08003720 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003720:	b480      	push	{r7}
 8003722:	b083      	sub	sp, #12
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
 8003728:	460b      	mov	r3, r1
 800372a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800372c:	78fb      	ldrb	r3, [r7, #3]
 800372e:	f003 020f 	and.w	r2, r3, #15
 8003732:	6879      	ldr	r1, [r7, #4]
 8003734:	4613      	mov	r3, r2
 8003736:	00db      	lsls	r3, r3, #3
 8003738:	4413      	add	r3, r2
 800373a:	009b      	lsls	r3, r3, #2
 800373c:	440b      	add	r3, r1
 800373e:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8003742:	681b      	ldr	r3, [r3, #0]
}
 8003744:	4618      	mov	r0, r3
 8003746:	370c      	adds	r7, #12
 8003748:	46bd      	mov	sp, r7
 800374a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374e:	4770      	bx	lr

08003750 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003750:	b580      	push	{r7, lr}
 8003752:	b086      	sub	sp, #24
 8003754:	af00      	add	r7, sp, #0
 8003756:	60f8      	str	r0, [r7, #12]
 8003758:	607a      	str	r2, [r7, #4]
 800375a:	603b      	str	r3, [r7, #0]
 800375c:	460b      	mov	r3, r1
 800375e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003760:	7afb      	ldrb	r3, [r7, #11]
 8003762:	f003 020f 	and.w	r2, r3, #15
 8003766:	4613      	mov	r3, r2
 8003768:	00db      	lsls	r3, r3, #3
 800376a:	4413      	add	r3, r2
 800376c:	009b      	lsls	r3, r3, #2
 800376e:	3338      	adds	r3, #56	; 0x38
 8003770:	68fa      	ldr	r2, [r7, #12]
 8003772:	4413      	add	r3, r2
 8003774:	3304      	adds	r3, #4
 8003776:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003778:	697b      	ldr	r3, [r7, #20]
 800377a:	687a      	ldr	r2, [r7, #4]
 800377c:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800377e:	697b      	ldr	r3, [r7, #20]
 8003780:	683a      	ldr	r2, [r7, #0]
 8003782:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003784:	697b      	ldr	r3, [r7, #20]
 8003786:	2200      	movs	r2, #0
 8003788:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 800378a:	697b      	ldr	r3, [r7, #20]
 800378c:	2201      	movs	r2, #1
 800378e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003790:	7afb      	ldrb	r3, [r7, #11]
 8003792:	f003 030f 	and.w	r3, r3, #15
 8003796:	b2da      	uxtb	r2, r3
 8003798:	697b      	ldr	r3, [r7, #20]
 800379a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	691b      	ldr	r3, [r3, #16]
 80037a0:	2b01      	cmp	r3, #1
 80037a2:	d102      	bne.n	80037aa <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80037a4:	687a      	ldr	r2, [r7, #4]
 80037a6:	697b      	ldr	r3, [r7, #20]
 80037a8:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80037aa:	7afb      	ldrb	r3, [r7, #11]
 80037ac:	f003 030f 	and.w	r3, r3, #15
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d109      	bne.n	80037c8 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	6818      	ldr	r0, [r3, #0]
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	691b      	ldr	r3, [r3, #16]
 80037bc:	b2db      	uxtb	r3, r3
 80037be:	461a      	mov	r2, r3
 80037c0:	6979      	ldr	r1, [r7, #20]
 80037c2:	f004 f8c9 	bl	8007958 <USB_EP0StartXfer>
 80037c6:	e008      	b.n	80037da <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	6818      	ldr	r0, [r3, #0]
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	691b      	ldr	r3, [r3, #16]
 80037d0:	b2db      	uxtb	r3, r3
 80037d2:	461a      	mov	r2, r3
 80037d4:	6979      	ldr	r1, [r7, #20]
 80037d6:	f003 fe77 	bl	80074c8 <USB_EPStartXfer>
  }

  return HAL_OK;
 80037da:	2300      	movs	r3, #0
}
 80037dc:	4618      	mov	r0, r3
 80037de:	3718      	adds	r7, #24
 80037e0:	46bd      	mov	sp, r7
 80037e2:	bd80      	pop	{r7, pc}

080037e4 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b084      	sub	sp, #16
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
 80037ec:	460b      	mov	r3, r1
 80037ee:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80037f0:	78fb      	ldrb	r3, [r7, #3]
 80037f2:	f003 020f 	and.w	r2, r3, #15
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	685b      	ldr	r3, [r3, #4]
 80037fa:	429a      	cmp	r2, r3
 80037fc:	d901      	bls.n	8003802 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80037fe:	2301      	movs	r3, #1
 8003800:	e050      	b.n	80038a4 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003802:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003806:	2b00      	cmp	r3, #0
 8003808:	da0f      	bge.n	800382a <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800380a:	78fb      	ldrb	r3, [r7, #3]
 800380c:	f003 020f 	and.w	r2, r3, #15
 8003810:	4613      	mov	r3, r2
 8003812:	00db      	lsls	r3, r3, #3
 8003814:	4413      	add	r3, r2
 8003816:	009b      	lsls	r3, r3, #2
 8003818:	3338      	adds	r3, #56	; 0x38
 800381a:	687a      	ldr	r2, [r7, #4]
 800381c:	4413      	add	r3, r2
 800381e:	3304      	adds	r3, #4
 8003820:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	2201      	movs	r2, #1
 8003826:	705a      	strb	r2, [r3, #1]
 8003828:	e00d      	b.n	8003846 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800382a:	78fa      	ldrb	r2, [r7, #3]
 800382c:	4613      	mov	r3, r2
 800382e:	00db      	lsls	r3, r3, #3
 8003830:	4413      	add	r3, r2
 8003832:	009b      	lsls	r3, r3, #2
 8003834:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003838:	687a      	ldr	r2, [r7, #4]
 800383a:	4413      	add	r3, r2
 800383c:	3304      	adds	r3, #4
 800383e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	2200      	movs	r2, #0
 8003844:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	2201      	movs	r2, #1
 800384a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800384c:	78fb      	ldrb	r3, [r7, #3]
 800384e:	f003 030f 	and.w	r3, r3, #15
 8003852:	b2da      	uxtb	r2, r3
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800385e:	2b01      	cmp	r3, #1
 8003860:	d101      	bne.n	8003866 <HAL_PCD_EP_SetStall+0x82>
 8003862:	2302      	movs	r3, #2
 8003864:	e01e      	b.n	80038a4 <HAL_PCD_EP_SetStall+0xc0>
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	2201      	movs	r2, #1
 800386a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	68f9      	ldr	r1, [r7, #12]
 8003874:	4618      	mov	r0, r3
 8003876:	f004 fb07 	bl	8007e88 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800387a:	78fb      	ldrb	r3, [r7, #3]
 800387c:	f003 030f 	and.w	r3, r3, #15
 8003880:	2b00      	cmp	r3, #0
 8003882:	d10a      	bne.n	800389a <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6818      	ldr	r0, [r3, #0]
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	691b      	ldr	r3, [r3, #16]
 800388c:	b2d9      	uxtb	r1, r3
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003894:	461a      	mov	r2, r3
 8003896:	f004 fcf7 	bl	8008288 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	2200      	movs	r2, #0
 800389e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80038a2:	2300      	movs	r3, #0
}
 80038a4:	4618      	mov	r0, r3
 80038a6:	3710      	adds	r7, #16
 80038a8:	46bd      	mov	sp, r7
 80038aa:	bd80      	pop	{r7, pc}

080038ac <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b084      	sub	sp, #16
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
 80038b4:	460b      	mov	r3, r1
 80038b6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80038b8:	78fb      	ldrb	r3, [r7, #3]
 80038ba:	f003 020f 	and.w	r2, r3, #15
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	685b      	ldr	r3, [r3, #4]
 80038c2:	429a      	cmp	r2, r3
 80038c4:	d901      	bls.n	80038ca <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80038c6:	2301      	movs	r3, #1
 80038c8:	e042      	b.n	8003950 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80038ca:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	da0f      	bge.n	80038f2 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80038d2:	78fb      	ldrb	r3, [r7, #3]
 80038d4:	f003 020f 	and.w	r2, r3, #15
 80038d8:	4613      	mov	r3, r2
 80038da:	00db      	lsls	r3, r3, #3
 80038dc:	4413      	add	r3, r2
 80038de:	009b      	lsls	r3, r3, #2
 80038e0:	3338      	adds	r3, #56	; 0x38
 80038e2:	687a      	ldr	r2, [r7, #4]
 80038e4:	4413      	add	r3, r2
 80038e6:	3304      	adds	r3, #4
 80038e8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	2201      	movs	r2, #1
 80038ee:	705a      	strb	r2, [r3, #1]
 80038f0:	e00f      	b.n	8003912 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80038f2:	78fb      	ldrb	r3, [r7, #3]
 80038f4:	f003 020f 	and.w	r2, r3, #15
 80038f8:	4613      	mov	r3, r2
 80038fa:	00db      	lsls	r3, r3, #3
 80038fc:	4413      	add	r3, r2
 80038fe:	009b      	lsls	r3, r3, #2
 8003900:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003904:	687a      	ldr	r2, [r7, #4]
 8003906:	4413      	add	r3, r2
 8003908:	3304      	adds	r3, #4
 800390a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	2200      	movs	r2, #0
 8003910:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	2200      	movs	r2, #0
 8003916:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003918:	78fb      	ldrb	r3, [r7, #3]
 800391a:	f003 030f 	and.w	r3, r3, #15
 800391e:	b2da      	uxtb	r2, r3
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800392a:	2b01      	cmp	r3, #1
 800392c:	d101      	bne.n	8003932 <HAL_PCD_EP_ClrStall+0x86>
 800392e:	2302      	movs	r3, #2
 8003930:	e00e      	b.n	8003950 <HAL_PCD_EP_ClrStall+0xa4>
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	2201      	movs	r2, #1
 8003936:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	68f9      	ldr	r1, [r7, #12]
 8003940:	4618      	mov	r0, r3
 8003942:	f004 fb0f 	bl	8007f64 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	2200      	movs	r2, #0
 800394a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800394e:	2300      	movs	r3, #0
}
 8003950:	4618      	mov	r0, r3
 8003952:	3710      	adds	r7, #16
 8003954:	46bd      	mov	sp, r7
 8003956:	bd80      	pop	{r7, pc}

08003958 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003958:	b580      	push	{r7, lr}
 800395a:	b084      	sub	sp, #16
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
 8003960:	460b      	mov	r3, r1
 8003962:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003964:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003968:	2b00      	cmp	r3, #0
 800396a:	da0c      	bge.n	8003986 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800396c:	78fb      	ldrb	r3, [r7, #3]
 800396e:	f003 020f 	and.w	r2, r3, #15
 8003972:	4613      	mov	r3, r2
 8003974:	00db      	lsls	r3, r3, #3
 8003976:	4413      	add	r3, r2
 8003978:	009b      	lsls	r3, r3, #2
 800397a:	3338      	adds	r3, #56	; 0x38
 800397c:	687a      	ldr	r2, [r7, #4]
 800397e:	4413      	add	r3, r2
 8003980:	3304      	adds	r3, #4
 8003982:	60fb      	str	r3, [r7, #12]
 8003984:	e00c      	b.n	80039a0 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003986:	78fb      	ldrb	r3, [r7, #3]
 8003988:	f003 020f 	and.w	r2, r3, #15
 800398c:	4613      	mov	r3, r2
 800398e:	00db      	lsls	r3, r3, #3
 8003990:	4413      	add	r3, r2
 8003992:	009b      	lsls	r3, r3, #2
 8003994:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003998:	687a      	ldr	r2, [r7, #4]
 800399a:	4413      	add	r3, r2
 800399c:	3304      	adds	r3, #4
 800399e:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	68f9      	ldr	r1, [r7, #12]
 80039a6:	4618      	mov	r0, r3
 80039a8:	f004 f92e 	bl	8007c08 <USB_EPStopXfer>
 80039ac:	4603      	mov	r3, r0
 80039ae:	72fb      	strb	r3, [r7, #11]

  return ret;
 80039b0:	7afb      	ldrb	r3, [r7, #11]
}
 80039b2:	4618      	mov	r0, r3
 80039b4:	3710      	adds	r7, #16
 80039b6:	46bd      	mov	sp, r7
 80039b8:	bd80      	pop	{r7, pc}

080039ba <HAL_PCD_EP_Flush>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Flush(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80039ba:	b580      	push	{r7, lr}
 80039bc:	b082      	sub	sp, #8
 80039be:	af00      	add	r7, sp, #0
 80039c0:	6078      	str	r0, [r7, #4]
 80039c2:	460b      	mov	r3, r1
 80039c4:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80039cc:	2b01      	cmp	r3, #1
 80039ce:	d101      	bne.n	80039d4 <HAL_PCD_EP_Flush+0x1a>
 80039d0:	2302      	movs	r3, #2
 80039d2:	e01b      	b.n	8003a0c <HAL_PCD_EP_Flush+0x52>
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2201      	movs	r2, #1
 80039d8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((ep_addr & 0x80U) == 0x80U)
 80039dc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	da09      	bge.n	80039f8 <HAL_PCD_EP_Flush+0x3e>
  {
    (void)USB_FlushTxFifo(hpcd->Instance, (uint32_t)ep_addr & EP_ADDR_MSK);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681a      	ldr	r2, [r3, #0]
 80039e8:	78fb      	ldrb	r3, [r7, #3]
 80039ea:	f003 030f 	and.w	r3, r3, #15
 80039ee:	4619      	mov	r1, r3
 80039f0:	4610      	mov	r0, r2
 80039f2:	f003 fb63 	bl	80070bc <USB_FlushTxFifo>
 80039f6:	e004      	b.n	8003a02 <HAL_PCD_EP_Flush+0x48>
  }
  else
  {
    (void)USB_FlushRxFifo(hpcd->Instance);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	4618      	mov	r0, r3
 80039fe:	f003 fb91 	bl	8007124 <USB_FlushRxFifo>
  }

  __HAL_UNLOCK(hpcd);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	2200      	movs	r2, #0
 8003a06:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003a0a:	2300      	movs	r3, #0
}
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	3708      	adds	r7, #8
 8003a10:	46bd      	mov	sp, r7
 8003a12:	bd80      	pop	{r7, pc}

08003a14 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	b08a      	sub	sp, #40	; 0x28
 8003a18:	af02      	add	r7, sp, #8
 8003a1a:	6078      	str	r0, [r7, #4]
 8003a1c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a24:	697b      	ldr	r3, [r7, #20]
 8003a26:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003a28:	683a      	ldr	r2, [r7, #0]
 8003a2a:	4613      	mov	r3, r2
 8003a2c:	00db      	lsls	r3, r3, #3
 8003a2e:	4413      	add	r3, r2
 8003a30:	009b      	lsls	r3, r3, #2
 8003a32:	3338      	adds	r3, #56	; 0x38
 8003a34:	687a      	ldr	r2, [r7, #4]
 8003a36:	4413      	add	r3, r2
 8003a38:	3304      	adds	r3, #4
 8003a3a:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	6a1a      	ldr	r2, [r3, #32]
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	699b      	ldr	r3, [r3, #24]
 8003a44:	429a      	cmp	r2, r3
 8003a46:	d901      	bls.n	8003a4c <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003a48:	2301      	movs	r3, #1
 8003a4a:	e06c      	b.n	8003b26 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	699a      	ldr	r2, [r3, #24]
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	6a1b      	ldr	r3, [r3, #32]
 8003a54:	1ad3      	subs	r3, r2, r3
 8003a56:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	68db      	ldr	r3, [r3, #12]
 8003a5c:	69fa      	ldr	r2, [r7, #28]
 8003a5e:	429a      	cmp	r2, r3
 8003a60:	d902      	bls.n	8003a68 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	68db      	ldr	r3, [r3, #12]
 8003a66:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003a68:	69fb      	ldr	r3, [r7, #28]
 8003a6a:	3303      	adds	r3, #3
 8003a6c:	089b      	lsrs	r3, r3, #2
 8003a6e:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003a70:	e02b      	b.n	8003aca <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	699a      	ldr	r2, [r3, #24]
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	6a1b      	ldr	r3, [r3, #32]
 8003a7a:	1ad3      	subs	r3, r2, r3
 8003a7c:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	68db      	ldr	r3, [r3, #12]
 8003a82:	69fa      	ldr	r2, [r7, #28]
 8003a84:	429a      	cmp	r2, r3
 8003a86:	d902      	bls.n	8003a8e <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	68db      	ldr	r3, [r3, #12]
 8003a8c:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003a8e:	69fb      	ldr	r3, [r7, #28]
 8003a90:	3303      	adds	r3, #3
 8003a92:	089b      	lsrs	r3, r3, #2
 8003a94:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	6919      	ldr	r1, [r3, #16]
 8003a9a:	683b      	ldr	r3, [r7, #0]
 8003a9c:	b2da      	uxtb	r2, r3
 8003a9e:	69fb      	ldr	r3, [r7, #28]
 8003aa0:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003aa6:	b2db      	uxtb	r3, r3
 8003aa8:	9300      	str	r3, [sp, #0]
 8003aaa:	4603      	mov	r3, r0
 8003aac:	6978      	ldr	r0, [r7, #20]
 8003aae:	f004 f955 	bl	8007d5c <USB_WritePacket>

    ep->xfer_buff  += len;
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	691a      	ldr	r2, [r3, #16]
 8003ab6:	69fb      	ldr	r3, [r7, #28]
 8003ab8:	441a      	add	r2, r3
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	6a1a      	ldr	r2, [r3, #32]
 8003ac2:	69fb      	ldr	r3, [r7, #28]
 8003ac4:	441a      	add	r2, r3
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003aca:	683b      	ldr	r3, [r7, #0]
 8003acc:	015a      	lsls	r2, r3, #5
 8003ace:	693b      	ldr	r3, [r7, #16]
 8003ad0:	4413      	add	r3, r2
 8003ad2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ad6:	699b      	ldr	r3, [r3, #24]
 8003ad8:	b29b      	uxth	r3, r3
 8003ada:	69ba      	ldr	r2, [r7, #24]
 8003adc:	429a      	cmp	r2, r3
 8003ade:	d809      	bhi.n	8003af4 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	6a1a      	ldr	r2, [r3, #32]
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003ae8:	429a      	cmp	r2, r3
 8003aea:	d203      	bcs.n	8003af4 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	699b      	ldr	r3, [r3, #24]
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d1be      	bne.n	8003a72 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	699a      	ldr	r2, [r3, #24]
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	6a1b      	ldr	r3, [r3, #32]
 8003afc:	429a      	cmp	r2, r3
 8003afe:	d811      	bhi.n	8003b24 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	f003 030f 	and.w	r3, r3, #15
 8003b06:	2201      	movs	r2, #1
 8003b08:	fa02 f303 	lsl.w	r3, r2, r3
 8003b0c:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003b0e:	693b      	ldr	r3, [r7, #16]
 8003b10:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b14:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003b16:	68bb      	ldr	r3, [r7, #8]
 8003b18:	43db      	mvns	r3, r3
 8003b1a:	6939      	ldr	r1, [r7, #16]
 8003b1c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003b20:	4013      	ands	r3, r2
 8003b22:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003b24:	2300      	movs	r3, #0
}
 8003b26:	4618      	mov	r0, r3
 8003b28:	3720      	adds	r7, #32
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	bd80      	pop	{r7, pc}
	...

08003b30 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003b30:	b580      	push	{r7, lr}
 8003b32:	b088      	sub	sp, #32
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
 8003b38:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b40:	69fb      	ldr	r3, [r7, #28]
 8003b42:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003b44:	69fb      	ldr	r3, [r7, #28]
 8003b46:	333c      	adds	r3, #60	; 0x3c
 8003b48:	3304      	adds	r3, #4
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003b4e:	683b      	ldr	r3, [r7, #0]
 8003b50:	015a      	lsls	r2, r3, #5
 8003b52:	69bb      	ldr	r3, [r7, #24]
 8003b54:	4413      	add	r3, r2
 8003b56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b5a:	689b      	ldr	r3, [r3, #8]
 8003b5c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	691b      	ldr	r3, [r3, #16]
 8003b62:	2b01      	cmp	r3, #1
 8003b64:	d17b      	bne.n	8003c5e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003b66:	693b      	ldr	r3, [r7, #16]
 8003b68:	f003 0308 	and.w	r3, r3, #8
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d015      	beq.n	8003b9c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003b70:	697b      	ldr	r3, [r7, #20]
 8003b72:	4a61      	ldr	r2, [pc, #388]	; (8003cf8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003b74:	4293      	cmp	r3, r2
 8003b76:	f240 80b9 	bls.w	8003cec <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003b7a:	693b      	ldr	r3, [r7, #16]
 8003b7c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	f000 80b3 	beq.w	8003cec <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	015a      	lsls	r2, r3, #5
 8003b8a:	69bb      	ldr	r3, [r7, #24]
 8003b8c:	4413      	add	r3, r2
 8003b8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b92:	461a      	mov	r2, r3
 8003b94:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003b98:	6093      	str	r3, [r2, #8]
 8003b9a:	e0a7      	b.n	8003cec <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003b9c:	693b      	ldr	r3, [r7, #16]
 8003b9e:	f003 0320 	and.w	r3, r3, #32
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d009      	beq.n	8003bba <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003ba6:	683b      	ldr	r3, [r7, #0]
 8003ba8:	015a      	lsls	r2, r3, #5
 8003baa:	69bb      	ldr	r3, [r7, #24]
 8003bac:	4413      	add	r3, r2
 8003bae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bb2:	461a      	mov	r2, r3
 8003bb4:	2320      	movs	r3, #32
 8003bb6:	6093      	str	r3, [r2, #8]
 8003bb8:	e098      	b.n	8003cec <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003bba:	693b      	ldr	r3, [r7, #16]
 8003bbc:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	f040 8093 	bne.w	8003cec <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003bc6:	697b      	ldr	r3, [r7, #20]
 8003bc8:	4a4b      	ldr	r2, [pc, #300]	; (8003cf8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003bca:	4293      	cmp	r3, r2
 8003bcc:	d90f      	bls.n	8003bee <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003bce:	693b      	ldr	r3, [r7, #16]
 8003bd0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d00a      	beq.n	8003bee <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	015a      	lsls	r2, r3, #5
 8003bdc:	69bb      	ldr	r3, [r7, #24]
 8003bde:	4413      	add	r3, r2
 8003be0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003be4:	461a      	mov	r2, r3
 8003be6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003bea:	6093      	str	r3, [r2, #8]
 8003bec:	e07e      	b.n	8003cec <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8003bee:	683a      	ldr	r2, [r7, #0]
 8003bf0:	4613      	mov	r3, r2
 8003bf2:	00db      	lsls	r3, r3, #3
 8003bf4:	4413      	add	r3, r2
 8003bf6:	009b      	lsls	r3, r3, #2
 8003bf8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003bfc:	687a      	ldr	r2, [r7, #4]
 8003bfe:	4413      	add	r3, r2
 8003c00:	3304      	adds	r3, #4
 8003c02:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	69da      	ldr	r2, [r3, #28]
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	0159      	lsls	r1, r3, #5
 8003c0c:	69bb      	ldr	r3, [r7, #24]
 8003c0e:	440b      	add	r3, r1
 8003c10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c14:	691b      	ldr	r3, [r3, #16]
 8003c16:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c1a:	1ad2      	subs	r2, r2, r3
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d114      	bne.n	8003c50 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	699b      	ldr	r3, [r3, #24]
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d109      	bne.n	8003c42 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6818      	ldr	r0, [r3, #0]
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003c38:	461a      	mov	r2, r3
 8003c3a:	2101      	movs	r1, #1
 8003c3c:	f004 fb24 	bl	8008288 <USB_EP0_OutStart>
 8003c40:	e006      	b.n	8003c50 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	691a      	ldr	r2, [r3, #16]
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	6a1b      	ldr	r3, [r3, #32]
 8003c4a:	441a      	add	r2, r3
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003c50:	683b      	ldr	r3, [r7, #0]
 8003c52:	b2db      	uxtb	r3, r3
 8003c54:	4619      	mov	r1, r3
 8003c56:	6878      	ldr	r0, [r7, #4]
 8003c58:	f008 f968 	bl	800bf2c <HAL_PCD_DataOutStageCallback>
 8003c5c:	e046      	b.n	8003cec <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003c5e:	697b      	ldr	r3, [r7, #20]
 8003c60:	4a26      	ldr	r2, [pc, #152]	; (8003cfc <PCD_EP_OutXfrComplete_int+0x1cc>)
 8003c62:	4293      	cmp	r3, r2
 8003c64:	d124      	bne.n	8003cb0 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003c66:	693b      	ldr	r3, [r7, #16]
 8003c68:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d00a      	beq.n	8003c86 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	015a      	lsls	r2, r3, #5
 8003c74:	69bb      	ldr	r3, [r7, #24]
 8003c76:	4413      	add	r3, r2
 8003c78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c7c:	461a      	mov	r2, r3
 8003c7e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003c82:	6093      	str	r3, [r2, #8]
 8003c84:	e032      	b.n	8003cec <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003c86:	693b      	ldr	r3, [r7, #16]
 8003c88:	f003 0320 	and.w	r3, r3, #32
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d008      	beq.n	8003ca2 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003c90:	683b      	ldr	r3, [r7, #0]
 8003c92:	015a      	lsls	r2, r3, #5
 8003c94:	69bb      	ldr	r3, [r7, #24]
 8003c96:	4413      	add	r3, r2
 8003c98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c9c:	461a      	mov	r2, r3
 8003c9e:	2320      	movs	r3, #32
 8003ca0:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003ca2:	683b      	ldr	r3, [r7, #0]
 8003ca4:	b2db      	uxtb	r3, r3
 8003ca6:	4619      	mov	r1, r3
 8003ca8:	6878      	ldr	r0, [r7, #4]
 8003caa:	f008 f93f 	bl	800bf2c <HAL_PCD_DataOutStageCallback>
 8003cae:	e01d      	b.n	8003cec <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003cb0:	683b      	ldr	r3, [r7, #0]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d114      	bne.n	8003ce0 <PCD_EP_OutXfrComplete_int+0x1b0>
 8003cb6:	6879      	ldr	r1, [r7, #4]
 8003cb8:	683a      	ldr	r2, [r7, #0]
 8003cba:	4613      	mov	r3, r2
 8003cbc:	00db      	lsls	r3, r3, #3
 8003cbe:	4413      	add	r3, r2
 8003cc0:	009b      	lsls	r3, r3, #2
 8003cc2:	440b      	add	r3, r1
 8003cc4:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d108      	bne.n	8003ce0 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6818      	ldr	r0, [r3, #0]
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003cd8:	461a      	mov	r2, r3
 8003cda:	2100      	movs	r1, #0
 8003cdc:	f004 fad4 	bl	8008288 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003ce0:	683b      	ldr	r3, [r7, #0]
 8003ce2:	b2db      	uxtb	r3, r3
 8003ce4:	4619      	mov	r1, r3
 8003ce6:	6878      	ldr	r0, [r7, #4]
 8003ce8:	f008 f920 	bl	800bf2c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003cec:	2300      	movs	r3, #0
}
 8003cee:	4618      	mov	r0, r3
 8003cf0:	3720      	adds	r7, #32
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	bd80      	pop	{r7, pc}
 8003cf6:	bf00      	nop
 8003cf8:	4f54300a 	.word	0x4f54300a
 8003cfc:	4f54310a 	.word	0x4f54310a

08003d00 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b086      	sub	sp, #24
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
 8003d08:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d10:	697b      	ldr	r3, [r7, #20]
 8003d12:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003d14:	697b      	ldr	r3, [r7, #20]
 8003d16:	333c      	adds	r3, #60	; 0x3c
 8003d18:	3304      	adds	r3, #4
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	015a      	lsls	r2, r3, #5
 8003d22:	693b      	ldr	r3, [r7, #16]
 8003d24:	4413      	add	r3, r2
 8003d26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d2a:	689b      	ldr	r3, [r3, #8]
 8003d2c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	4a15      	ldr	r2, [pc, #84]	; (8003d88 <PCD_EP_OutSetupPacket_int+0x88>)
 8003d32:	4293      	cmp	r3, r2
 8003d34:	d90e      	bls.n	8003d54 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003d36:	68bb      	ldr	r3, [r7, #8]
 8003d38:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d009      	beq.n	8003d54 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	015a      	lsls	r2, r3, #5
 8003d44:	693b      	ldr	r3, [r7, #16]
 8003d46:	4413      	add	r3, r2
 8003d48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d4c:	461a      	mov	r2, r3
 8003d4e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003d52:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003d54:	6878      	ldr	r0, [r7, #4]
 8003d56:	f008 f8d7 	bl	800bf08 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	4a0a      	ldr	r2, [pc, #40]	; (8003d88 <PCD_EP_OutSetupPacket_int+0x88>)
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	d90c      	bls.n	8003d7c <PCD_EP_OutSetupPacket_int+0x7c>
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	691b      	ldr	r3, [r3, #16]
 8003d66:	2b01      	cmp	r3, #1
 8003d68:	d108      	bne.n	8003d7c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6818      	ldr	r0, [r3, #0]
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003d74:	461a      	mov	r2, r3
 8003d76:	2101      	movs	r1, #1
 8003d78:	f004 fa86 	bl	8008288 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003d7c:	2300      	movs	r3, #0
}
 8003d7e:	4618      	mov	r0, r3
 8003d80:	3718      	adds	r7, #24
 8003d82:	46bd      	mov	sp, r7
 8003d84:	bd80      	pop	{r7, pc}
 8003d86:	bf00      	nop
 8003d88:	4f54300a 	.word	0x4f54300a

08003d8c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003d8c:	b480      	push	{r7}
 8003d8e:	b085      	sub	sp, #20
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
 8003d94:	460b      	mov	r3, r1
 8003d96:	70fb      	strb	r3, [r7, #3]
 8003d98:	4613      	mov	r3, r2
 8003d9a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003da2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003da4:	78fb      	ldrb	r3, [r7, #3]
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d107      	bne.n	8003dba <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003daa:	883b      	ldrh	r3, [r7, #0]
 8003dac:	0419      	lsls	r1, r3, #16
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	68ba      	ldr	r2, [r7, #8]
 8003db4:	430a      	orrs	r2, r1
 8003db6:	629a      	str	r2, [r3, #40]	; 0x28
 8003db8:	e028      	b.n	8003e0c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dc0:	0c1b      	lsrs	r3, r3, #16
 8003dc2:	68ba      	ldr	r2, [r7, #8]
 8003dc4:	4413      	add	r3, r2
 8003dc6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003dc8:	2300      	movs	r3, #0
 8003dca:	73fb      	strb	r3, [r7, #15]
 8003dcc:	e00d      	b.n	8003dea <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681a      	ldr	r2, [r3, #0]
 8003dd2:	7bfb      	ldrb	r3, [r7, #15]
 8003dd4:	3340      	adds	r3, #64	; 0x40
 8003dd6:	009b      	lsls	r3, r3, #2
 8003dd8:	4413      	add	r3, r2
 8003dda:	685b      	ldr	r3, [r3, #4]
 8003ddc:	0c1b      	lsrs	r3, r3, #16
 8003dde:	68ba      	ldr	r2, [r7, #8]
 8003de0:	4413      	add	r3, r2
 8003de2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003de4:	7bfb      	ldrb	r3, [r7, #15]
 8003de6:	3301      	adds	r3, #1
 8003de8:	73fb      	strb	r3, [r7, #15]
 8003dea:	7bfa      	ldrb	r2, [r7, #15]
 8003dec:	78fb      	ldrb	r3, [r7, #3]
 8003dee:	3b01      	subs	r3, #1
 8003df0:	429a      	cmp	r2, r3
 8003df2:	d3ec      	bcc.n	8003dce <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003df4:	883b      	ldrh	r3, [r7, #0]
 8003df6:	0418      	lsls	r0, r3, #16
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6819      	ldr	r1, [r3, #0]
 8003dfc:	78fb      	ldrb	r3, [r7, #3]
 8003dfe:	3b01      	subs	r3, #1
 8003e00:	68ba      	ldr	r2, [r7, #8]
 8003e02:	4302      	orrs	r2, r0
 8003e04:	3340      	adds	r3, #64	; 0x40
 8003e06:	009b      	lsls	r3, r3, #2
 8003e08:	440b      	add	r3, r1
 8003e0a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003e0c:	2300      	movs	r3, #0
}
 8003e0e:	4618      	mov	r0, r3
 8003e10:	3714      	adds	r7, #20
 8003e12:	46bd      	mov	sp, r7
 8003e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e18:	4770      	bx	lr

08003e1a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003e1a:	b480      	push	{r7}
 8003e1c:	b083      	sub	sp, #12
 8003e1e:	af00      	add	r7, sp, #0
 8003e20:	6078      	str	r0, [r7, #4]
 8003e22:	460b      	mov	r3, r1
 8003e24:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	887a      	ldrh	r2, [r7, #2]
 8003e2c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003e2e:	2300      	movs	r3, #0
}
 8003e30:	4618      	mov	r0, r3
 8003e32:	370c      	adds	r7, #12
 8003e34:	46bd      	mov	sp, r7
 8003e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3a:	4770      	bx	lr

08003e3c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003e3c:	b480      	push	{r7}
 8003e3e:	b083      	sub	sp, #12
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
 8003e44:	460b      	mov	r3, r1
 8003e46:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003e48:	bf00      	nop
 8003e4a:	370c      	adds	r7, #12
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e52:	4770      	bx	lr

08003e54 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	b086      	sub	sp, #24
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d101      	bne.n	8003e66 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003e62:	2301      	movs	r3, #1
 8003e64:	e267      	b.n	8004336 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f003 0301 	and.w	r3, r3, #1
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d075      	beq.n	8003f5e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003e72:	4b88      	ldr	r3, [pc, #544]	; (8004094 <HAL_RCC_OscConfig+0x240>)
 8003e74:	689b      	ldr	r3, [r3, #8]
 8003e76:	f003 030c 	and.w	r3, r3, #12
 8003e7a:	2b04      	cmp	r3, #4
 8003e7c:	d00c      	beq.n	8003e98 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003e7e:	4b85      	ldr	r3, [pc, #532]	; (8004094 <HAL_RCC_OscConfig+0x240>)
 8003e80:	689b      	ldr	r3, [r3, #8]
 8003e82:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003e86:	2b08      	cmp	r3, #8
 8003e88:	d112      	bne.n	8003eb0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003e8a:	4b82      	ldr	r3, [pc, #520]	; (8004094 <HAL_RCC_OscConfig+0x240>)
 8003e8c:	685b      	ldr	r3, [r3, #4]
 8003e8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e92:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003e96:	d10b      	bne.n	8003eb0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e98:	4b7e      	ldr	r3, [pc, #504]	; (8004094 <HAL_RCC_OscConfig+0x240>)
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d05b      	beq.n	8003f5c <HAL_RCC_OscConfig+0x108>
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	685b      	ldr	r3, [r3, #4]
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d157      	bne.n	8003f5c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003eac:	2301      	movs	r3, #1
 8003eae:	e242      	b.n	8004336 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	685b      	ldr	r3, [r3, #4]
 8003eb4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003eb8:	d106      	bne.n	8003ec8 <HAL_RCC_OscConfig+0x74>
 8003eba:	4b76      	ldr	r3, [pc, #472]	; (8004094 <HAL_RCC_OscConfig+0x240>)
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	4a75      	ldr	r2, [pc, #468]	; (8004094 <HAL_RCC_OscConfig+0x240>)
 8003ec0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ec4:	6013      	str	r3, [r2, #0]
 8003ec6:	e01d      	b.n	8003f04 <HAL_RCC_OscConfig+0xb0>
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	685b      	ldr	r3, [r3, #4]
 8003ecc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003ed0:	d10c      	bne.n	8003eec <HAL_RCC_OscConfig+0x98>
 8003ed2:	4b70      	ldr	r3, [pc, #448]	; (8004094 <HAL_RCC_OscConfig+0x240>)
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	4a6f      	ldr	r2, [pc, #444]	; (8004094 <HAL_RCC_OscConfig+0x240>)
 8003ed8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003edc:	6013      	str	r3, [r2, #0]
 8003ede:	4b6d      	ldr	r3, [pc, #436]	; (8004094 <HAL_RCC_OscConfig+0x240>)
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	4a6c      	ldr	r2, [pc, #432]	; (8004094 <HAL_RCC_OscConfig+0x240>)
 8003ee4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ee8:	6013      	str	r3, [r2, #0]
 8003eea:	e00b      	b.n	8003f04 <HAL_RCC_OscConfig+0xb0>
 8003eec:	4b69      	ldr	r3, [pc, #420]	; (8004094 <HAL_RCC_OscConfig+0x240>)
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	4a68      	ldr	r2, [pc, #416]	; (8004094 <HAL_RCC_OscConfig+0x240>)
 8003ef2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ef6:	6013      	str	r3, [r2, #0]
 8003ef8:	4b66      	ldr	r3, [pc, #408]	; (8004094 <HAL_RCC_OscConfig+0x240>)
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	4a65      	ldr	r2, [pc, #404]	; (8004094 <HAL_RCC_OscConfig+0x240>)
 8003efe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003f02:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	685b      	ldr	r3, [r3, #4]
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d013      	beq.n	8003f34 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f0c:	f7fd fdce 	bl	8001aac <HAL_GetTick>
 8003f10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f12:	e008      	b.n	8003f26 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003f14:	f7fd fdca 	bl	8001aac <HAL_GetTick>
 8003f18:	4602      	mov	r2, r0
 8003f1a:	693b      	ldr	r3, [r7, #16]
 8003f1c:	1ad3      	subs	r3, r2, r3
 8003f1e:	2b64      	cmp	r3, #100	; 0x64
 8003f20:	d901      	bls.n	8003f26 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003f22:	2303      	movs	r3, #3
 8003f24:	e207      	b.n	8004336 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f26:	4b5b      	ldr	r3, [pc, #364]	; (8004094 <HAL_RCC_OscConfig+0x240>)
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d0f0      	beq.n	8003f14 <HAL_RCC_OscConfig+0xc0>
 8003f32:	e014      	b.n	8003f5e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f34:	f7fd fdba 	bl	8001aac <HAL_GetTick>
 8003f38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f3a:	e008      	b.n	8003f4e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003f3c:	f7fd fdb6 	bl	8001aac <HAL_GetTick>
 8003f40:	4602      	mov	r2, r0
 8003f42:	693b      	ldr	r3, [r7, #16]
 8003f44:	1ad3      	subs	r3, r2, r3
 8003f46:	2b64      	cmp	r3, #100	; 0x64
 8003f48:	d901      	bls.n	8003f4e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003f4a:	2303      	movs	r3, #3
 8003f4c:	e1f3      	b.n	8004336 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f4e:	4b51      	ldr	r3, [pc, #324]	; (8004094 <HAL_RCC_OscConfig+0x240>)
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d1f0      	bne.n	8003f3c <HAL_RCC_OscConfig+0xe8>
 8003f5a:	e000      	b.n	8003f5e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f5c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f003 0302 	and.w	r3, r3, #2
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d063      	beq.n	8004032 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003f6a:	4b4a      	ldr	r3, [pc, #296]	; (8004094 <HAL_RCC_OscConfig+0x240>)
 8003f6c:	689b      	ldr	r3, [r3, #8]
 8003f6e:	f003 030c 	and.w	r3, r3, #12
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d00b      	beq.n	8003f8e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003f76:	4b47      	ldr	r3, [pc, #284]	; (8004094 <HAL_RCC_OscConfig+0x240>)
 8003f78:	689b      	ldr	r3, [r3, #8]
 8003f7a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003f7e:	2b08      	cmp	r3, #8
 8003f80:	d11c      	bne.n	8003fbc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003f82:	4b44      	ldr	r3, [pc, #272]	; (8004094 <HAL_RCC_OscConfig+0x240>)
 8003f84:	685b      	ldr	r3, [r3, #4]
 8003f86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d116      	bne.n	8003fbc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f8e:	4b41      	ldr	r3, [pc, #260]	; (8004094 <HAL_RCC_OscConfig+0x240>)
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f003 0302 	and.w	r3, r3, #2
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d005      	beq.n	8003fa6 <HAL_RCC_OscConfig+0x152>
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	68db      	ldr	r3, [r3, #12]
 8003f9e:	2b01      	cmp	r3, #1
 8003fa0:	d001      	beq.n	8003fa6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003fa2:	2301      	movs	r3, #1
 8003fa4:	e1c7      	b.n	8004336 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003fa6:	4b3b      	ldr	r3, [pc, #236]	; (8004094 <HAL_RCC_OscConfig+0x240>)
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	691b      	ldr	r3, [r3, #16]
 8003fb2:	00db      	lsls	r3, r3, #3
 8003fb4:	4937      	ldr	r1, [pc, #220]	; (8004094 <HAL_RCC_OscConfig+0x240>)
 8003fb6:	4313      	orrs	r3, r2
 8003fb8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003fba:	e03a      	b.n	8004032 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	68db      	ldr	r3, [r3, #12]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d020      	beq.n	8004006 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003fc4:	4b34      	ldr	r3, [pc, #208]	; (8004098 <HAL_RCC_OscConfig+0x244>)
 8003fc6:	2201      	movs	r2, #1
 8003fc8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fca:	f7fd fd6f 	bl	8001aac <HAL_GetTick>
 8003fce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003fd0:	e008      	b.n	8003fe4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003fd2:	f7fd fd6b 	bl	8001aac <HAL_GetTick>
 8003fd6:	4602      	mov	r2, r0
 8003fd8:	693b      	ldr	r3, [r7, #16]
 8003fda:	1ad3      	subs	r3, r2, r3
 8003fdc:	2b02      	cmp	r3, #2
 8003fde:	d901      	bls.n	8003fe4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003fe0:	2303      	movs	r3, #3
 8003fe2:	e1a8      	b.n	8004336 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003fe4:	4b2b      	ldr	r3, [pc, #172]	; (8004094 <HAL_RCC_OscConfig+0x240>)
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f003 0302 	and.w	r3, r3, #2
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d0f0      	beq.n	8003fd2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ff0:	4b28      	ldr	r3, [pc, #160]	; (8004094 <HAL_RCC_OscConfig+0x240>)
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	691b      	ldr	r3, [r3, #16]
 8003ffc:	00db      	lsls	r3, r3, #3
 8003ffe:	4925      	ldr	r1, [pc, #148]	; (8004094 <HAL_RCC_OscConfig+0x240>)
 8004000:	4313      	orrs	r3, r2
 8004002:	600b      	str	r3, [r1, #0]
 8004004:	e015      	b.n	8004032 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004006:	4b24      	ldr	r3, [pc, #144]	; (8004098 <HAL_RCC_OscConfig+0x244>)
 8004008:	2200      	movs	r2, #0
 800400a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800400c:	f7fd fd4e 	bl	8001aac <HAL_GetTick>
 8004010:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004012:	e008      	b.n	8004026 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004014:	f7fd fd4a 	bl	8001aac <HAL_GetTick>
 8004018:	4602      	mov	r2, r0
 800401a:	693b      	ldr	r3, [r7, #16]
 800401c:	1ad3      	subs	r3, r2, r3
 800401e:	2b02      	cmp	r3, #2
 8004020:	d901      	bls.n	8004026 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004022:	2303      	movs	r3, #3
 8004024:	e187      	b.n	8004336 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004026:	4b1b      	ldr	r3, [pc, #108]	; (8004094 <HAL_RCC_OscConfig+0x240>)
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f003 0302 	and.w	r3, r3, #2
 800402e:	2b00      	cmp	r3, #0
 8004030:	d1f0      	bne.n	8004014 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f003 0308 	and.w	r3, r3, #8
 800403a:	2b00      	cmp	r3, #0
 800403c:	d036      	beq.n	80040ac <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	695b      	ldr	r3, [r3, #20]
 8004042:	2b00      	cmp	r3, #0
 8004044:	d016      	beq.n	8004074 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004046:	4b15      	ldr	r3, [pc, #84]	; (800409c <HAL_RCC_OscConfig+0x248>)
 8004048:	2201      	movs	r2, #1
 800404a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800404c:	f7fd fd2e 	bl	8001aac <HAL_GetTick>
 8004050:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004052:	e008      	b.n	8004066 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004054:	f7fd fd2a 	bl	8001aac <HAL_GetTick>
 8004058:	4602      	mov	r2, r0
 800405a:	693b      	ldr	r3, [r7, #16]
 800405c:	1ad3      	subs	r3, r2, r3
 800405e:	2b02      	cmp	r3, #2
 8004060:	d901      	bls.n	8004066 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004062:	2303      	movs	r3, #3
 8004064:	e167      	b.n	8004336 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004066:	4b0b      	ldr	r3, [pc, #44]	; (8004094 <HAL_RCC_OscConfig+0x240>)
 8004068:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800406a:	f003 0302 	and.w	r3, r3, #2
 800406e:	2b00      	cmp	r3, #0
 8004070:	d0f0      	beq.n	8004054 <HAL_RCC_OscConfig+0x200>
 8004072:	e01b      	b.n	80040ac <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004074:	4b09      	ldr	r3, [pc, #36]	; (800409c <HAL_RCC_OscConfig+0x248>)
 8004076:	2200      	movs	r2, #0
 8004078:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800407a:	f7fd fd17 	bl	8001aac <HAL_GetTick>
 800407e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004080:	e00e      	b.n	80040a0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004082:	f7fd fd13 	bl	8001aac <HAL_GetTick>
 8004086:	4602      	mov	r2, r0
 8004088:	693b      	ldr	r3, [r7, #16]
 800408a:	1ad3      	subs	r3, r2, r3
 800408c:	2b02      	cmp	r3, #2
 800408e:	d907      	bls.n	80040a0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004090:	2303      	movs	r3, #3
 8004092:	e150      	b.n	8004336 <HAL_RCC_OscConfig+0x4e2>
 8004094:	40023800 	.word	0x40023800
 8004098:	42470000 	.word	0x42470000
 800409c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80040a0:	4b88      	ldr	r3, [pc, #544]	; (80042c4 <HAL_RCC_OscConfig+0x470>)
 80040a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80040a4:	f003 0302 	and.w	r3, r3, #2
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d1ea      	bne.n	8004082 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f003 0304 	and.w	r3, r3, #4
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	f000 8097 	beq.w	80041e8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80040ba:	2300      	movs	r3, #0
 80040bc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80040be:	4b81      	ldr	r3, [pc, #516]	; (80042c4 <HAL_RCC_OscConfig+0x470>)
 80040c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d10f      	bne.n	80040ea <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80040ca:	2300      	movs	r3, #0
 80040cc:	60bb      	str	r3, [r7, #8]
 80040ce:	4b7d      	ldr	r3, [pc, #500]	; (80042c4 <HAL_RCC_OscConfig+0x470>)
 80040d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040d2:	4a7c      	ldr	r2, [pc, #496]	; (80042c4 <HAL_RCC_OscConfig+0x470>)
 80040d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040d8:	6413      	str	r3, [r2, #64]	; 0x40
 80040da:	4b7a      	ldr	r3, [pc, #488]	; (80042c4 <HAL_RCC_OscConfig+0x470>)
 80040dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040e2:	60bb      	str	r3, [r7, #8]
 80040e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80040e6:	2301      	movs	r3, #1
 80040e8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040ea:	4b77      	ldr	r3, [pc, #476]	; (80042c8 <HAL_RCC_OscConfig+0x474>)
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d118      	bne.n	8004128 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80040f6:	4b74      	ldr	r3, [pc, #464]	; (80042c8 <HAL_RCC_OscConfig+0x474>)
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	4a73      	ldr	r2, [pc, #460]	; (80042c8 <HAL_RCC_OscConfig+0x474>)
 80040fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004100:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004102:	f7fd fcd3 	bl	8001aac <HAL_GetTick>
 8004106:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004108:	e008      	b.n	800411c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800410a:	f7fd fccf 	bl	8001aac <HAL_GetTick>
 800410e:	4602      	mov	r2, r0
 8004110:	693b      	ldr	r3, [r7, #16]
 8004112:	1ad3      	subs	r3, r2, r3
 8004114:	2b02      	cmp	r3, #2
 8004116:	d901      	bls.n	800411c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004118:	2303      	movs	r3, #3
 800411a:	e10c      	b.n	8004336 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800411c:	4b6a      	ldr	r3, [pc, #424]	; (80042c8 <HAL_RCC_OscConfig+0x474>)
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004124:	2b00      	cmp	r3, #0
 8004126:	d0f0      	beq.n	800410a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	689b      	ldr	r3, [r3, #8]
 800412c:	2b01      	cmp	r3, #1
 800412e:	d106      	bne.n	800413e <HAL_RCC_OscConfig+0x2ea>
 8004130:	4b64      	ldr	r3, [pc, #400]	; (80042c4 <HAL_RCC_OscConfig+0x470>)
 8004132:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004134:	4a63      	ldr	r2, [pc, #396]	; (80042c4 <HAL_RCC_OscConfig+0x470>)
 8004136:	f043 0301 	orr.w	r3, r3, #1
 800413a:	6713      	str	r3, [r2, #112]	; 0x70
 800413c:	e01c      	b.n	8004178 <HAL_RCC_OscConfig+0x324>
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	689b      	ldr	r3, [r3, #8]
 8004142:	2b05      	cmp	r3, #5
 8004144:	d10c      	bne.n	8004160 <HAL_RCC_OscConfig+0x30c>
 8004146:	4b5f      	ldr	r3, [pc, #380]	; (80042c4 <HAL_RCC_OscConfig+0x470>)
 8004148:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800414a:	4a5e      	ldr	r2, [pc, #376]	; (80042c4 <HAL_RCC_OscConfig+0x470>)
 800414c:	f043 0304 	orr.w	r3, r3, #4
 8004150:	6713      	str	r3, [r2, #112]	; 0x70
 8004152:	4b5c      	ldr	r3, [pc, #368]	; (80042c4 <HAL_RCC_OscConfig+0x470>)
 8004154:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004156:	4a5b      	ldr	r2, [pc, #364]	; (80042c4 <HAL_RCC_OscConfig+0x470>)
 8004158:	f043 0301 	orr.w	r3, r3, #1
 800415c:	6713      	str	r3, [r2, #112]	; 0x70
 800415e:	e00b      	b.n	8004178 <HAL_RCC_OscConfig+0x324>
 8004160:	4b58      	ldr	r3, [pc, #352]	; (80042c4 <HAL_RCC_OscConfig+0x470>)
 8004162:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004164:	4a57      	ldr	r2, [pc, #348]	; (80042c4 <HAL_RCC_OscConfig+0x470>)
 8004166:	f023 0301 	bic.w	r3, r3, #1
 800416a:	6713      	str	r3, [r2, #112]	; 0x70
 800416c:	4b55      	ldr	r3, [pc, #340]	; (80042c4 <HAL_RCC_OscConfig+0x470>)
 800416e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004170:	4a54      	ldr	r2, [pc, #336]	; (80042c4 <HAL_RCC_OscConfig+0x470>)
 8004172:	f023 0304 	bic.w	r3, r3, #4
 8004176:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	689b      	ldr	r3, [r3, #8]
 800417c:	2b00      	cmp	r3, #0
 800417e:	d015      	beq.n	80041ac <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004180:	f7fd fc94 	bl	8001aac <HAL_GetTick>
 8004184:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004186:	e00a      	b.n	800419e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004188:	f7fd fc90 	bl	8001aac <HAL_GetTick>
 800418c:	4602      	mov	r2, r0
 800418e:	693b      	ldr	r3, [r7, #16]
 8004190:	1ad3      	subs	r3, r2, r3
 8004192:	f241 3288 	movw	r2, #5000	; 0x1388
 8004196:	4293      	cmp	r3, r2
 8004198:	d901      	bls.n	800419e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800419a:	2303      	movs	r3, #3
 800419c:	e0cb      	b.n	8004336 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800419e:	4b49      	ldr	r3, [pc, #292]	; (80042c4 <HAL_RCC_OscConfig+0x470>)
 80041a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041a2:	f003 0302 	and.w	r3, r3, #2
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d0ee      	beq.n	8004188 <HAL_RCC_OscConfig+0x334>
 80041aa:	e014      	b.n	80041d6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80041ac:	f7fd fc7e 	bl	8001aac <HAL_GetTick>
 80041b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80041b2:	e00a      	b.n	80041ca <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80041b4:	f7fd fc7a 	bl	8001aac <HAL_GetTick>
 80041b8:	4602      	mov	r2, r0
 80041ba:	693b      	ldr	r3, [r7, #16]
 80041bc:	1ad3      	subs	r3, r2, r3
 80041be:	f241 3288 	movw	r2, #5000	; 0x1388
 80041c2:	4293      	cmp	r3, r2
 80041c4:	d901      	bls.n	80041ca <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80041c6:	2303      	movs	r3, #3
 80041c8:	e0b5      	b.n	8004336 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80041ca:	4b3e      	ldr	r3, [pc, #248]	; (80042c4 <HAL_RCC_OscConfig+0x470>)
 80041cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041ce:	f003 0302 	and.w	r3, r3, #2
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d1ee      	bne.n	80041b4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80041d6:	7dfb      	ldrb	r3, [r7, #23]
 80041d8:	2b01      	cmp	r3, #1
 80041da:	d105      	bne.n	80041e8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80041dc:	4b39      	ldr	r3, [pc, #228]	; (80042c4 <HAL_RCC_OscConfig+0x470>)
 80041de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041e0:	4a38      	ldr	r2, [pc, #224]	; (80042c4 <HAL_RCC_OscConfig+0x470>)
 80041e2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80041e6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	699b      	ldr	r3, [r3, #24]
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	f000 80a1 	beq.w	8004334 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80041f2:	4b34      	ldr	r3, [pc, #208]	; (80042c4 <HAL_RCC_OscConfig+0x470>)
 80041f4:	689b      	ldr	r3, [r3, #8]
 80041f6:	f003 030c 	and.w	r3, r3, #12
 80041fa:	2b08      	cmp	r3, #8
 80041fc:	d05c      	beq.n	80042b8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	699b      	ldr	r3, [r3, #24]
 8004202:	2b02      	cmp	r3, #2
 8004204:	d141      	bne.n	800428a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004206:	4b31      	ldr	r3, [pc, #196]	; (80042cc <HAL_RCC_OscConfig+0x478>)
 8004208:	2200      	movs	r2, #0
 800420a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800420c:	f7fd fc4e 	bl	8001aac <HAL_GetTick>
 8004210:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004212:	e008      	b.n	8004226 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004214:	f7fd fc4a 	bl	8001aac <HAL_GetTick>
 8004218:	4602      	mov	r2, r0
 800421a:	693b      	ldr	r3, [r7, #16]
 800421c:	1ad3      	subs	r3, r2, r3
 800421e:	2b02      	cmp	r3, #2
 8004220:	d901      	bls.n	8004226 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004222:	2303      	movs	r3, #3
 8004224:	e087      	b.n	8004336 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004226:	4b27      	ldr	r3, [pc, #156]	; (80042c4 <HAL_RCC_OscConfig+0x470>)
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800422e:	2b00      	cmp	r3, #0
 8004230:	d1f0      	bne.n	8004214 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	69da      	ldr	r2, [r3, #28]
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6a1b      	ldr	r3, [r3, #32]
 800423a:	431a      	orrs	r2, r3
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004240:	019b      	lsls	r3, r3, #6
 8004242:	431a      	orrs	r2, r3
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004248:	085b      	lsrs	r3, r3, #1
 800424a:	3b01      	subs	r3, #1
 800424c:	041b      	lsls	r3, r3, #16
 800424e:	431a      	orrs	r2, r3
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004254:	061b      	lsls	r3, r3, #24
 8004256:	491b      	ldr	r1, [pc, #108]	; (80042c4 <HAL_RCC_OscConfig+0x470>)
 8004258:	4313      	orrs	r3, r2
 800425a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800425c:	4b1b      	ldr	r3, [pc, #108]	; (80042cc <HAL_RCC_OscConfig+0x478>)
 800425e:	2201      	movs	r2, #1
 8004260:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004262:	f7fd fc23 	bl	8001aac <HAL_GetTick>
 8004266:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004268:	e008      	b.n	800427c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800426a:	f7fd fc1f 	bl	8001aac <HAL_GetTick>
 800426e:	4602      	mov	r2, r0
 8004270:	693b      	ldr	r3, [r7, #16]
 8004272:	1ad3      	subs	r3, r2, r3
 8004274:	2b02      	cmp	r3, #2
 8004276:	d901      	bls.n	800427c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004278:	2303      	movs	r3, #3
 800427a:	e05c      	b.n	8004336 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800427c:	4b11      	ldr	r3, [pc, #68]	; (80042c4 <HAL_RCC_OscConfig+0x470>)
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004284:	2b00      	cmp	r3, #0
 8004286:	d0f0      	beq.n	800426a <HAL_RCC_OscConfig+0x416>
 8004288:	e054      	b.n	8004334 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800428a:	4b10      	ldr	r3, [pc, #64]	; (80042cc <HAL_RCC_OscConfig+0x478>)
 800428c:	2200      	movs	r2, #0
 800428e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004290:	f7fd fc0c 	bl	8001aac <HAL_GetTick>
 8004294:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004296:	e008      	b.n	80042aa <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004298:	f7fd fc08 	bl	8001aac <HAL_GetTick>
 800429c:	4602      	mov	r2, r0
 800429e:	693b      	ldr	r3, [r7, #16]
 80042a0:	1ad3      	subs	r3, r2, r3
 80042a2:	2b02      	cmp	r3, #2
 80042a4:	d901      	bls.n	80042aa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80042a6:	2303      	movs	r3, #3
 80042a8:	e045      	b.n	8004336 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042aa:	4b06      	ldr	r3, [pc, #24]	; (80042c4 <HAL_RCC_OscConfig+0x470>)
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d1f0      	bne.n	8004298 <HAL_RCC_OscConfig+0x444>
 80042b6:	e03d      	b.n	8004334 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	699b      	ldr	r3, [r3, #24]
 80042bc:	2b01      	cmp	r3, #1
 80042be:	d107      	bne.n	80042d0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80042c0:	2301      	movs	r3, #1
 80042c2:	e038      	b.n	8004336 <HAL_RCC_OscConfig+0x4e2>
 80042c4:	40023800 	.word	0x40023800
 80042c8:	40007000 	.word	0x40007000
 80042cc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80042d0:	4b1b      	ldr	r3, [pc, #108]	; (8004340 <HAL_RCC_OscConfig+0x4ec>)
 80042d2:	685b      	ldr	r3, [r3, #4]
 80042d4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	699b      	ldr	r3, [r3, #24]
 80042da:	2b01      	cmp	r3, #1
 80042dc:	d028      	beq.n	8004330 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80042e8:	429a      	cmp	r2, r3
 80042ea:	d121      	bne.n	8004330 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80042f6:	429a      	cmp	r2, r3
 80042f8:	d11a      	bne.n	8004330 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80042fa:	68fa      	ldr	r2, [r7, #12]
 80042fc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004300:	4013      	ands	r3, r2
 8004302:	687a      	ldr	r2, [r7, #4]
 8004304:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004306:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004308:	4293      	cmp	r3, r2
 800430a:	d111      	bne.n	8004330 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004316:	085b      	lsrs	r3, r3, #1
 8004318:	3b01      	subs	r3, #1
 800431a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800431c:	429a      	cmp	r2, r3
 800431e:	d107      	bne.n	8004330 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800432a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800432c:	429a      	cmp	r2, r3
 800432e:	d001      	beq.n	8004334 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004330:	2301      	movs	r3, #1
 8004332:	e000      	b.n	8004336 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004334:	2300      	movs	r3, #0
}
 8004336:	4618      	mov	r0, r3
 8004338:	3718      	adds	r7, #24
 800433a:	46bd      	mov	sp, r7
 800433c:	bd80      	pop	{r7, pc}
 800433e:	bf00      	nop
 8004340:	40023800 	.word	0x40023800

08004344 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004344:	b580      	push	{r7, lr}
 8004346:	b084      	sub	sp, #16
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]
 800434c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	2b00      	cmp	r3, #0
 8004352:	d101      	bne.n	8004358 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004354:	2301      	movs	r3, #1
 8004356:	e0cc      	b.n	80044f2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004358:	4b68      	ldr	r3, [pc, #416]	; (80044fc <HAL_RCC_ClockConfig+0x1b8>)
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f003 0307 	and.w	r3, r3, #7
 8004360:	683a      	ldr	r2, [r7, #0]
 8004362:	429a      	cmp	r2, r3
 8004364:	d90c      	bls.n	8004380 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004366:	4b65      	ldr	r3, [pc, #404]	; (80044fc <HAL_RCC_ClockConfig+0x1b8>)
 8004368:	683a      	ldr	r2, [r7, #0]
 800436a:	b2d2      	uxtb	r2, r2
 800436c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800436e:	4b63      	ldr	r3, [pc, #396]	; (80044fc <HAL_RCC_ClockConfig+0x1b8>)
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f003 0307 	and.w	r3, r3, #7
 8004376:	683a      	ldr	r2, [r7, #0]
 8004378:	429a      	cmp	r2, r3
 800437a:	d001      	beq.n	8004380 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800437c:	2301      	movs	r3, #1
 800437e:	e0b8      	b.n	80044f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f003 0302 	and.w	r3, r3, #2
 8004388:	2b00      	cmp	r3, #0
 800438a:	d020      	beq.n	80043ce <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f003 0304 	and.w	r3, r3, #4
 8004394:	2b00      	cmp	r3, #0
 8004396:	d005      	beq.n	80043a4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004398:	4b59      	ldr	r3, [pc, #356]	; (8004500 <HAL_RCC_ClockConfig+0x1bc>)
 800439a:	689b      	ldr	r3, [r3, #8]
 800439c:	4a58      	ldr	r2, [pc, #352]	; (8004500 <HAL_RCC_ClockConfig+0x1bc>)
 800439e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80043a2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f003 0308 	and.w	r3, r3, #8
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d005      	beq.n	80043bc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80043b0:	4b53      	ldr	r3, [pc, #332]	; (8004500 <HAL_RCC_ClockConfig+0x1bc>)
 80043b2:	689b      	ldr	r3, [r3, #8]
 80043b4:	4a52      	ldr	r2, [pc, #328]	; (8004500 <HAL_RCC_ClockConfig+0x1bc>)
 80043b6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80043ba:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80043bc:	4b50      	ldr	r3, [pc, #320]	; (8004500 <HAL_RCC_ClockConfig+0x1bc>)
 80043be:	689b      	ldr	r3, [r3, #8]
 80043c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	689b      	ldr	r3, [r3, #8]
 80043c8:	494d      	ldr	r1, [pc, #308]	; (8004500 <HAL_RCC_ClockConfig+0x1bc>)
 80043ca:	4313      	orrs	r3, r2
 80043cc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f003 0301 	and.w	r3, r3, #1
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d044      	beq.n	8004464 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	685b      	ldr	r3, [r3, #4]
 80043de:	2b01      	cmp	r3, #1
 80043e0:	d107      	bne.n	80043f2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043e2:	4b47      	ldr	r3, [pc, #284]	; (8004500 <HAL_RCC_ClockConfig+0x1bc>)
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d119      	bne.n	8004422 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80043ee:	2301      	movs	r3, #1
 80043f0:	e07f      	b.n	80044f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	685b      	ldr	r3, [r3, #4]
 80043f6:	2b02      	cmp	r3, #2
 80043f8:	d003      	beq.n	8004402 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80043fe:	2b03      	cmp	r3, #3
 8004400:	d107      	bne.n	8004412 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004402:	4b3f      	ldr	r3, [pc, #252]	; (8004500 <HAL_RCC_ClockConfig+0x1bc>)
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800440a:	2b00      	cmp	r3, #0
 800440c:	d109      	bne.n	8004422 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800440e:	2301      	movs	r3, #1
 8004410:	e06f      	b.n	80044f2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004412:	4b3b      	ldr	r3, [pc, #236]	; (8004500 <HAL_RCC_ClockConfig+0x1bc>)
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f003 0302 	and.w	r3, r3, #2
 800441a:	2b00      	cmp	r3, #0
 800441c:	d101      	bne.n	8004422 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800441e:	2301      	movs	r3, #1
 8004420:	e067      	b.n	80044f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004422:	4b37      	ldr	r3, [pc, #220]	; (8004500 <HAL_RCC_ClockConfig+0x1bc>)
 8004424:	689b      	ldr	r3, [r3, #8]
 8004426:	f023 0203 	bic.w	r2, r3, #3
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	685b      	ldr	r3, [r3, #4]
 800442e:	4934      	ldr	r1, [pc, #208]	; (8004500 <HAL_RCC_ClockConfig+0x1bc>)
 8004430:	4313      	orrs	r3, r2
 8004432:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004434:	f7fd fb3a 	bl	8001aac <HAL_GetTick>
 8004438:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800443a:	e00a      	b.n	8004452 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800443c:	f7fd fb36 	bl	8001aac <HAL_GetTick>
 8004440:	4602      	mov	r2, r0
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	1ad3      	subs	r3, r2, r3
 8004446:	f241 3288 	movw	r2, #5000	; 0x1388
 800444a:	4293      	cmp	r3, r2
 800444c:	d901      	bls.n	8004452 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800444e:	2303      	movs	r3, #3
 8004450:	e04f      	b.n	80044f2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004452:	4b2b      	ldr	r3, [pc, #172]	; (8004500 <HAL_RCC_ClockConfig+0x1bc>)
 8004454:	689b      	ldr	r3, [r3, #8]
 8004456:	f003 020c 	and.w	r2, r3, #12
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	685b      	ldr	r3, [r3, #4]
 800445e:	009b      	lsls	r3, r3, #2
 8004460:	429a      	cmp	r2, r3
 8004462:	d1eb      	bne.n	800443c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004464:	4b25      	ldr	r3, [pc, #148]	; (80044fc <HAL_RCC_ClockConfig+0x1b8>)
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f003 0307 	and.w	r3, r3, #7
 800446c:	683a      	ldr	r2, [r7, #0]
 800446e:	429a      	cmp	r2, r3
 8004470:	d20c      	bcs.n	800448c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004472:	4b22      	ldr	r3, [pc, #136]	; (80044fc <HAL_RCC_ClockConfig+0x1b8>)
 8004474:	683a      	ldr	r2, [r7, #0]
 8004476:	b2d2      	uxtb	r2, r2
 8004478:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800447a:	4b20      	ldr	r3, [pc, #128]	; (80044fc <HAL_RCC_ClockConfig+0x1b8>)
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f003 0307 	and.w	r3, r3, #7
 8004482:	683a      	ldr	r2, [r7, #0]
 8004484:	429a      	cmp	r2, r3
 8004486:	d001      	beq.n	800448c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004488:	2301      	movs	r3, #1
 800448a:	e032      	b.n	80044f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f003 0304 	and.w	r3, r3, #4
 8004494:	2b00      	cmp	r3, #0
 8004496:	d008      	beq.n	80044aa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004498:	4b19      	ldr	r3, [pc, #100]	; (8004500 <HAL_RCC_ClockConfig+0x1bc>)
 800449a:	689b      	ldr	r3, [r3, #8]
 800449c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	68db      	ldr	r3, [r3, #12]
 80044a4:	4916      	ldr	r1, [pc, #88]	; (8004500 <HAL_RCC_ClockConfig+0x1bc>)
 80044a6:	4313      	orrs	r3, r2
 80044a8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f003 0308 	and.w	r3, r3, #8
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d009      	beq.n	80044ca <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80044b6:	4b12      	ldr	r3, [pc, #72]	; (8004500 <HAL_RCC_ClockConfig+0x1bc>)
 80044b8:	689b      	ldr	r3, [r3, #8]
 80044ba:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	691b      	ldr	r3, [r3, #16]
 80044c2:	00db      	lsls	r3, r3, #3
 80044c4:	490e      	ldr	r1, [pc, #56]	; (8004500 <HAL_RCC_ClockConfig+0x1bc>)
 80044c6:	4313      	orrs	r3, r2
 80044c8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80044ca:	f000 f821 	bl	8004510 <HAL_RCC_GetSysClockFreq>
 80044ce:	4602      	mov	r2, r0
 80044d0:	4b0b      	ldr	r3, [pc, #44]	; (8004500 <HAL_RCC_ClockConfig+0x1bc>)
 80044d2:	689b      	ldr	r3, [r3, #8]
 80044d4:	091b      	lsrs	r3, r3, #4
 80044d6:	f003 030f 	and.w	r3, r3, #15
 80044da:	490a      	ldr	r1, [pc, #40]	; (8004504 <HAL_RCC_ClockConfig+0x1c0>)
 80044dc:	5ccb      	ldrb	r3, [r1, r3]
 80044de:	fa22 f303 	lsr.w	r3, r2, r3
 80044e2:	4a09      	ldr	r2, [pc, #36]	; (8004508 <HAL_RCC_ClockConfig+0x1c4>)
 80044e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80044e6:	4b09      	ldr	r3, [pc, #36]	; (800450c <HAL_RCC_ClockConfig+0x1c8>)
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	4618      	mov	r0, r3
 80044ec:	f7fd fa9a 	bl	8001a24 <HAL_InitTick>

  return HAL_OK;
 80044f0:	2300      	movs	r3, #0
}
 80044f2:	4618      	mov	r0, r3
 80044f4:	3710      	adds	r7, #16
 80044f6:	46bd      	mov	sp, r7
 80044f8:	bd80      	pop	{r7, pc}
 80044fa:	bf00      	nop
 80044fc:	40023c00 	.word	0x40023c00
 8004500:	40023800 	.word	0x40023800
 8004504:	0800c594 	.word	0x0800c594
 8004508:	20000004 	.word	0x20000004
 800450c:	20000008 	.word	0x20000008

08004510 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004510:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004514:	b090      	sub	sp, #64	; 0x40
 8004516:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004518:	2300      	movs	r3, #0
 800451a:	637b      	str	r3, [r7, #52]	; 0x34
 800451c:	2300      	movs	r3, #0
 800451e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004520:	2300      	movs	r3, #0
 8004522:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8004524:	2300      	movs	r3, #0
 8004526:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004528:	4b59      	ldr	r3, [pc, #356]	; (8004690 <HAL_RCC_GetSysClockFreq+0x180>)
 800452a:	689b      	ldr	r3, [r3, #8]
 800452c:	f003 030c 	and.w	r3, r3, #12
 8004530:	2b08      	cmp	r3, #8
 8004532:	d00d      	beq.n	8004550 <HAL_RCC_GetSysClockFreq+0x40>
 8004534:	2b08      	cmp	r3, #8
 8004536:	f200 80a1 	bhi.w	800467c <HAL_RCC_GetSysClockFreq+0x16c>
 800453a:	2b00      	cmp	r3, #0
 800453c:	d002      	beq.n	8004544 <HAL_RCC_GetSysClockFreq+0x34>
 800453e:	2b04      	cmp	r3, #4
 8004540:	d003      	beq.n	800454a <HAL_RCC_GetSysClockFreq+0x3a>
 8004542:	e09b      	b.n	800467c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004544:	4b53      	ldr	r3, [pc, #332]	; (8004694 <HAL_RCC_GetSysClockFreq+0x184>)
 8004546:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8004548:	e09b      	b.n	8004682 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800454a:	4b53      	ldr	r3, [pc, #332]	; (8004698 <HAL_RCC_GetSysClockFreq+0x188>)
 800454c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800454e:	e098      	b.n	8004682 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004550:	4b4f      	ldr	r3, [pc, #316]	; (8004690 <HAL_RCC_GetSysClockFreq+0x180>)
 8004552:	685b      	ldr	r3, [r3, #4]
 8004554:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004558:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800455a:	4b4d      	ldr	r3, [pc, #308]	; (8004690 <HAL_RCC_GetSysClockFreq+0x180>)
 800455c:	685b      	ldr	r3, [r3, #4]
 800455e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004562:	2b00      	cmp	r3, #0
 8004564:	d028      	beq.n	80045b8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004566:	4b4a      	ldr	r3, [pc, #296]	; (8004690 <HAL_RCC_GetSysClockFreq+0x180>)
 8004568:	685b      	ldr	r3, [r3, #4]
 800456a:	099b      	lsrs	r3, r3, #6
 800456c:	2200      	movs	r2, #0
 800456e:	623b      	str	r3, [r7, #32]
 8004570:	627a      	str	r2, [r7, #36]	; 0x24
 8004572:	6a3b      	ldr	r3, [r7, #32]
 8004574:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004578:	2100      	movs	r1, #0
 800457a:	4b47      	ldr	r3, [pc, #284]	; (8004698 <HAL_RCC_GetSysClockFreq+0x188>)
 800457c:	fb03 f201 	mul.w	r2, r3, r1
 8004580:	2300      	movs	r3, #0
 8004582:	fb00 f303 	mul.w	r3, r0, r3
 8004586:	4413      	add	r3, r2
 8004588:	4a43      	ldr	r2, [pc, #268]	; (8004698 <HAL_RCC_GetSysClockFreq+0x188>)
 800458a:	fba0 1202 	umull	r1, r2, r0, r2
 800458e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004590:	460a      	mov	r2, r1
 8004592:	62ba      	str	r2, [r7, #40]	; 0x28
 8004594:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004596:	4413      	add	r3, r2
 8004598:	62fb      	str	r3, [r7, #44]	; 0x2c
 800459a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800459c:	2200      	movs	r2, #0
 800459e:	61bb      	str	r3, [r7, #24]
 80045a0:	61fa      	str	r2, [r7, #28]
 80045a2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80045a6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80045aa:	f7fb fe13 	bl	80001d4 <__aeabi_uldivmod>
 80045ae:	4602      	mov	r2, r0
 80045b0:	460b      	mov	r3, r1
 80045b2:	4613      	mov	r3, r2
 80045b4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80045b6:	e053      	b.n	8004660 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80045b8:	4b35      	ldr	r3, [pc, #212]	; (8004690 <HAL_RCC_GetSysClockFreq+0x180>)
 80045ba:	685b      	ldr	r3, [r3, #4]
 80045bc:	099b      	lsrs	r3, r3, #6
 80045be:	2200      	movs	r2, #0
 80045c0:	613b      	str	r3, [r7, #16]
 80045c2:	617a      	str	r2, [r7, #20]
 80045c4:	693b      	ldr	r3, [r7, #16]
 80045c6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80045ca:	f04f 0b00 	mov.w	fp, #0
 80045ce:	4652      	mov	r2, sl
 80045d0:	465b      	mov	r3, fp
 80045d2:	f04f 0000 	mov.w	r0, #0
 80045d6:	f04f 0100 	mov.w	r1, #0
 80045da:	0159      	lsls	r1, r3, #5
 80045dc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80045e0:	0150      	lsls	r0, r2, #5
 80045e2:	4602      	mov	r2, r0
 80045e4:	460b      	mov	r3, r1
 80045e6:	ebb2 080a 	subs.w	r8, r2, sl
 80045ea:	eb63 090b 	sbc.w	r9, r3, fp
 80045ee:	f04f 0200 	mov.w	r2, #0
 80045f2:	f04f 0300 	mov.w	r3, #0
 80045f6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80045fa:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80045fe:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004602:	ebb2 0408 	subs.w	r4, r2, r8
 8004606:	eb63 0509 	sbc.w	r5, r3, r9
 800460a:	f04f 0200 	mov.w	r2, #0
 800460e:	f04f 0300 	mov.w	r3, #0
 8004612:	00eb      	lsls	r3, r5, #3
 8004614:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004618:	00e2      	lsls	r2, r4, #3
 800461a:	4614      	mov	r4, r2
 800461c:	461d      	mov	r5, r3
 800461e:	eb14 030a 	adds.w	r3, r4, sl
 8004622:	603b      	str	r3, [r7, #0]
 8004624:	eb45 030b 	adc.w	r3, r5, fp
 8004628:	607b      	str	r3, [r7, #4]
 800462a:	f04f 0200 	mov.w	r2, #0
 800462e:	f04f 0300 	mov.w	r3, #0
 8004632:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004636:	4629      	mov	r1, r5
 8004638:	028b      	lsls	r3, r1, #10
 800463a:	4621      	mov	r1, r4
 800463c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004640:	4621      	mov	r1, r4
 8004642:	028a      	lsls	r2, r1, #10
 8004644:	4610      	mov	r0, r2
 8004646:	4619      	mov	r1, r3
 8004648:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800464a:	2200      	movs	r2, #0
 800464c:	60bb      	str	r3, [r7, #8]
 800464e:	60fa      	str	r2, [r7, #12]
 8004650:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004654:	f7fb fdbe 	bl	80001d4 <__aeabi_uldivmod>
 8004658:	4602      	mov	r2, r0
 800465a:	460b      	mov	r3, r1
 800465c:	4613      	mov	r3, r2
 800465e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004660:	4b0b      	ldr	r3, [pc, #44]	; (8004690 <HAL_RCC_GetSysClockFreq+0x180>)
 8004662:	685b      	ldr	r3, [r3, #4]
 8004664:	0c1b      	lsrs	r3, r3, #16
 8004666:	f003 0303 	and.w	r3, r3, #3
 800466a:	3301      	adds	r3, #1
 800466c:	005b      	lsls	r3, r3, #1
 800466e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8004670:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004672:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004674:	fbb2 f3f3 	udiv	r3, r2, r3
 8004678:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800467a:	e002      	b.n	8004682 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800467c:	4b05      	ldr	r3, [pc, #20]	; (8004694 <HAL_RCC_GetSysClockFreq+0x184>)
 800467e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004680:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004682:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8004684:	4618      	mov	r0, r3
 8004686:	3740      	adds	r7, #64	; 0x40
 8004688:	46bd      	mov	sp, r7
 800468a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800468e:	bf00      	nop
 8004690:	40023800 	.word	0x40023800
 8004694:	00f42400 	.word	0x00f42400
 8004698:	017d7840 	.word	0x017d7840

0800469c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800469c:	b480      	push	{r7}
 800469e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80046a0:	4b03      	ldr	r3, [pc, #12]	; (80046b0 <HAL_RCC_GetHCLKFreq+0x14>)
 80046a2:	681b      	ldr	r3, [r3, #0]
}
 80046a4:	4618      	mov	r0, r3
 80046a6:	46bd      	mov	sp, r7
 80046a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ac:	4770      	bx	lr
 80046ae:	bf00      	nop
 80046b0:	20000004 	.word	0x20000004

080046b4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80046b4:	b580      	push	{r7, lr}
 80046b6:	b082      	sub	sp, #8
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d101      	bne.n	80046c6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80046c2:	2301      	movs	r3, #1
 80046c4:	e07b      	b.n	80047be <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d108      	bne.n	80046e0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	685b      	ldr	r3, [r3, #4]
 80046d2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80046d6:	d009      	beq.n	80046ec <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2200      	movs	r2, #0
 80046dc:	61da      	str	r2, [r3, #28]
 80046de:	e005      	b.n	80046ec <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2200      	movs	r2, #0
 80046e4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	2200      	movs	r2, #0
 80046ea:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2200      	movs	r2, #0
 80046f0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80046f8:	b2db      	uxtb	r3, r3
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d106      	bne.n	800470c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	2200      	movs	r2, #0
 8004702:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004706:	6878      	ldr	r0, [r7, #4]
 8004708:	f7fc ffca 	bl	80016a0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2202      	movs	r2, #2
 8004710:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	681a      	ldr	r2, [r3, #0]
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004722:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	685b      	ldr	r3, [r3, #4]
 8004728:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	689b      	ldr	r3, [r3, #8]
 8004730:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004734:	431a      	orrs	r2, r3
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	68db      	ldr	r3, [r3, #12]
 800473a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800473e:	431a      	orrs	r2, r3
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	691b      	ldr	r3, [r3, #16]
 8004744:	f003 0302 	and.w	r3, r3, #2
 8004748:	431a      	orrs	r2, r3
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	695b      	ldr	r3, [r3, #20]
 800474e:	f003 0301 	and.w	r3, r3, #1
 8004752:	431a      	orrs	r2, r3
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	699b      	ldr	r3, [r3, #24]
 8004758:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800475c:	431a      	orrs	r2, r3
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	69db      	ldr	r3, [r3, #28]
 8004762:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004766:	431a      	orrs	r2, r3
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	6a1b      	ldr	r3, [r3, #32]
 800476c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004770:	ea42 0103 	orr.w	r1, r2, r3
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004778:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	430a      	orrs	r2, r1
 8004782:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	699b      	ldr	r3, [r3, #24]
 8004788:	0c1b      	lsrs	r3, r3, #16
 800478a:	f003 0104 	and.w	r1, r3, #4
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004792:	f003 0210 	and.w	r2, r3, #16
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	430a      	orrs	r2, r1
 800479c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	69da      	ldr	r2, [r3, #28]
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80047ac:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	2200      	movs	r2, #0
 80047b2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2201      	movs	r2, #1
 80047b8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80047bc:	2300      	movs	r3, #0
}
 80047be:	4618      	mov	r0, r3
 80047c0:	3708      	adds	r7, #8
 80047c2:	46bd      	mov	sp, r7
 80047c4:	bd80      	pop	{r7, pc}

080047c6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80047c6:	b580      	push	{r7, lr}
 80047c8:	b088      	sub	sp, #32
 80047ca:	af00      	add	r7, sp, #0
 80047cc:	60f8      	str	r0, [r7, #12]
 80047ce:	60b9      	str	r1, [r7, #8]
 80047d0:	603b      	str	r3, [r7, #0]
 80047d2:	4613      	mov	r3, r2
 80047d4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80047d6:	2300      	movs	r3, #0
 80047d8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80047e0:	2b01      	cmp	r3, #1
 80047e2:	d101      	bne.n	80047e8 <HAL_SPI_Transmit+0x22>
 80047e4:	2302      	movs	r3, #2
 80047e6:	e126      	b.n	8004a36 <HAL_SPI_Transmit+0x270>
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	2201      	movs	r2, #1
 80047ec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80047f0:	f7fd f95c 	bl	8001aac <HAL_GetTick>
 80047f4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80047f6:	88fb      	ldrh	r3, [r7, #6]
 80047f8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004800:	b2db      	uxtb	r3, r3
 8004802:	2b01      	cmp	r3, #1
 8004804:	d002      	beq.n	800480c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004806:	2302      	movs	r3, #2
 8004808:	77fb      	strb	r3, [r7, #31]
    goto error;
 800480a:	e10b      	b.n	8004a24 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800480c:	68bb      	ldr	r3, [r7, #8]
 800480e:	2b00      	cmp	r3, #0
 8004810:	d002      	beq.n	8004818 <HAL_SPI_Transmit+0x52>
 8004812:	88fb      	ldrh	r3, [r7, #6]
 8004814:	2b00      	cmp	r3, #0
 8004816:	d102      	bne.n	800481e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004818:	2301      	movs	r3, #1
 800481a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800481c:	e102      	b.n	8004a24 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	2203      	movs	r2, #3
 8004822:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	2200      	movs	r2, #0
 800482a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	68ba      	ldr	r2, [r7, #8]
 8004830:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	88fa      	ldrh	r2, [r7, #6]
 8004836:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	88fa      	ldrh	r2, [r7, #6]
 800483c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	2200      	movs	r2, #0
 8004842:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	2200      	movs	r2, #0
 8004848:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	2200      	movs	r2, #0
 800484e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	2200      	movs	r2, #0
 8004854:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	2200      	movs	r2, #0
 800485a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	689b      	ldr	r3, [r3, #8]
 8004860:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004864:	d10f      	bne.n	8004886 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	681a      	ldr	r2, [r3, #0]
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004874:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	681a      	ldr	r2, [r3, #0]
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004884:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004890:	2b40      	cmp	r3, #64	; 0x40
 8004892:	d007      	beq.n	80048a4 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	681a      	ldr	r2, [r3, #0]
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80048a2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	68db      	ldr	r3, [r3, #12]
 80048a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80048ac:	d14b      	bne.n	8004946 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	685b      	ldr	r3, [r3, #4]
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d002      	beq.n	80048bc <HAL_SPI_Transmit+0xf6>
 80048b6:	8afb      	ldrh	r3, [r7, #22]
 80048b8:	2b01      	cmp	r3, #1
 80048ba:	d13e      	bne.n	800493a <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048c0:	881a      	ldrh	r2, [r3, #0]
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048cc:	1c9a      	adds	r2, r3, #2
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80048d6:	b29b      	uxth	r3, r3
 80048d8:	3b01      	subs	r3, #1
 80048da:	b29a      	uxth	r2, r3
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80048e0:	e02b      	b.n	800493a <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	689b      	ldr	r3, [r3, #8]
 80048e8:	f003 0302 	and.w	r3, r3, #2
 80048ec:	2b02      	cmp	r3, #2
 80048ee:	d112      	bne.n	8004916 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048f4:	881a      	ldrh	r2, [r3, #0]
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004900:	1c9a      	adds	r2, r3, #2
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800490a:	b29b      	uxth	r3, r3
 800490c:	3b01      	subs	r3, #1
 800490e:	b29a      	uxth	r2, r3
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	86da      	strh	r2, [r3, #54]	; 0x36
 8004914:	e011      	b.n	800493a <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004916:	f7fd f8c9 	bl	8001aac <HAL_GetTick>
 800491a:	4602      	mov	r2, r0
 800491c:	69bb      	ldr	r3, [r7, #24]
 800491e:	1ad3      	subs	r3, r2, r3
 8004920:	683a      	ldr	r2, [r7, #0]
 8004922:	429a      	cmp	r2, r3
 8004924:	d803      	bhi.n	800492e <HAL_SPI_Transmit+0x168>
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	f1b3 3fff 	cmp.w	r3, #4294967295
 800492c:	d102      	bne.n	8004934 <HAL_SPI_Transmit+0x16e>
 800492e:	683b      	ldr	r3, [r7, #0]
 8004930:	2b00      	cmp	r3, #0
 8004932:	d102      	bne.n	800493a <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8004934:	2303      	movs	r3, #3
 8004936:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004938:	e074      	b.n	8004a24 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800493e:	b29b      	uxth	r3, r3
 8004940:	2b00      	cmp	r3, #0
 8004942:	d1ce      	bne.n	80048e2 <HAL_SPI_Transmit+0x11c>
 8004944:	e04c      	b.n	80049e0 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	685b      	ldr	r3, [r3, #4]
 800494a:	2b00      	cmp	r3, #0
 800494c:	d002      	beq.n	8004954 <HAL_SPI_Transmit+0x18e>
 800494e:	8afb      	ldrh	r3, [r7, #22]
 8004950:	2b01      	cmp	r3, #1
 8004952:	d140      	bne.n	80049d6 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	330c      	adds	r3, #12
 800495e:	7812      	ldrb	r2, [r2, #0]
 8004960:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004966:	1c5a      	adds	r2, r3, #1
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004970:	b29b      	uxth	r3, r3
 8004972:	3b01      	subs	r3, #1
 8004974:	b29a      	uxth	r2, r3
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800497a:	e02c      	b.n	80049d6 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	689b      	ldr	r3, [r3, #8]
 8004982:	f003 0302 	and.w	r3, r3, #2
 8004986:	2b02      	cmp	r3, #2
 8004988:	d113      	bne.n	80049b2 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	330c      	adds	r3, #12
 8004994:	7812      	ldrb	r2, [r2, #0]
 8004996:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800499c:	1c5a      	adds	r2, r3, #1
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80049a6:	b29b      	uxth	r3, r3
 80049a8:	3b01      	subs	r3, #1
 80049aa:	b29a      	uxth	r2, r3
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	86da      	strh	r2, [r3, #54]	; 0x36
 80049b0:	e011      	b.n	80049d6 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80049b2:	f7fd f87b 	bl	8001aac <HAL_GetTick>
 80049b6:	4602      	mov	r2, r0
 80049b8:	69bb      	ldr	r3, [r7, #24]
 80049ba:	1ad3      	subs	r3, r2, r3
 80049bc:	683a      	ldr	r2, [r7, #0]
 80049be:	429a      	cmp	r2, r3
 80049c0:	d803      	bhi.n	80049ca <HAL_SPI_Transmit+0x204>
 80049c2:	683b      	ldr	r3, [r7, #0]
 80049c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049c8:	d102      	bne.n	80049d0 <HAL_SPI_Transmit+0x20a>
 80049ca:	683b      	ldr	r3, [r7, #0]
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d102      	bne.n	80049d6 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80049d0:	2303      	movs	r3, #3
 80049d2:	77fb      	strb	r3, [r7, #31]
          goto error;
 80049d4:	e026      	b.n	8004a24 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80049da:	b29b      	uxth	r3, r3
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d1cd      	bne.n	800497c <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80049e0:	69ba      	ldr	r2, [r7, #24]
 80049e2:	6839      	ldr	r1, [r7, #0]
 80049e4:	68f8      	ldr	r0, [r7, #12]
 80049e6:	f000 ff9f 	bl	8005928 <SPI_EndRxTxTransaction>
 80049ea:	4603      	mov	r3, r0
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d002      	beq.n	80049f6 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	2220      	movs	r2, #32
 80049f4:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	689b      	ldr	r3, [r3, #8]
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d10a      	bne.n	8004a14 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80049fe:	2300      	movs	r3, #0
 8004a00:	613b      	str	r3, [r7, #16]
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	68db      	ldr	r3, [r3, #12]
 8004a08:	613b      	str	r3, [r7, #16]
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	689b      	ldr	r3, [r3, #8]
 8004a10:	613b      	str	r3, [r7, #16]
 8004a12:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d002      	beq.n	8004a22 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8004a1c:	2301      	movs	r3, #1
 8004a1e:	77fb      	strb	r3, [r7, #31]
 8004a20:	e000      	b.n	8004a24 <HAL_SPI_Transmit+0x25e>
  }

error:
 8004a22:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	2201      	movs	r2, #1
 8004a28:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	2200      	movs	r2, #0
 8004a30:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004a34:	7ffb      	ldrb	r3, [r7, #31]
}
 8004a36:	4618      	mov	r0, r3
 8004a38:	3720      	adds	r7, #32
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	bd80      	pop	{r7, pc}

08004a3e <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a3e:	b580      	push	{r7, lr}
 8004a40:	b088      	sub	sp, #32
 8004a42:	af02      	add	r7, sp, #8
 8004a44:	60f8      	str	r0, [r7, #12]
 8004a46:	60b9      	str	r1, [r7, #8]
 8004a48:	603b      	str	r3, [r7, #0]
 8004a4a:	4613      	mov	r3, r2
 8004a4c:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004a4e:	2300      	movs	r3, #0
 8004a50:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	685b      	ldr	r3, [r3, #4]
 8004a56:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004a5a:	d112      	bne.n	8004a82 <HAL_SPI_Receive+0x44>
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	689b      	ldr	r3, [r3, #8]
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d10e      	bne.n	8004a82 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	2204      	movs	r2, #4
 8004a68:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004a6c:	88fa      	ldrh	r2, [r7, #6]
 8004a6e:	683b      	ldr	r3, [r7, #0]
 8004a70:	9300      	str	r3, [sp, #0]
 8004a72:	4613      	mov	r3, r2
 8004a74:	68ba      	ldr	r2, [r7, #8]
 8004a76:	68b9      	ldr	r1, [r7, #8]
 8004a78:	68f8      	ldr	r0, [r7, #12]
 8004a7a:	f000 f8f1 	bl	8004c60 <HAL_SPI_TransmitReceive>
 8004a7e:	4603      	mov	r3, r0
 8004a80:	e0ea      	b.n	8004c58 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004a88:	2b01      	cmp	r3, #1
 8004a8a:	d101      	bne.n	8004a90 <HAL_SPI_Receive+0x52>
 8004a8c:	2302      	movs	r3, #2
 8004a8e:	e0e3      	b.n	8004c58 <HAL_SPI_Receive+0x21a>
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	2201      	movs	r2, #1
 8004a94:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004a98:	f7fd f808 	bl	8001aac <HAL_GetTick>
 8004a9c:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004aa4:	b2db      	uxtb	r3, r3
 8004aa6:	2b01      	cmp	r3, #1
 8004aa8:	d002      	beq.n	8004ab0 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8004aaa:	2302      	movs	r3, #2
 8004aac:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004aae:	e0ca      	b.n	8004c46 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8004ab0:	68bb      	ldr	r3, [r7, #8]
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d002      	beq.n	8004abc <HAL_SPI_Receive+0x7e>
 8004ab6:	88fb      	ldrh	r3, [r7, #6]
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d102      	bne.n	8004ac2 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004abc:	2301      	movs	r3, #1
 8004abe:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004ac0:	e0c1      	b.n	8004c46 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	2204      	movs	r2, #4
 8004ac6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	2200      	movs	r2, #0
 8004ace:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	68ba      	ldr	r2, [r7, #8]
 8004ad4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	88fa      	ldrh	r2, [r7, #6]
 8004ada:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	88fa      	ldrh	r2, [r7, #6]
 8004ae0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	2200      	movs	r2, #0
 8004ae6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	2200      	movs	r2, #0
 8004aec:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	2200      	movs	r2, #0
 8004af2:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	2200      	movs	r2, #0
 8004af8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	2200      	movs	r2, #0
 8004afe:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	689b      	ldr	r3, [r3, #8]
 8004b04:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b08:	d10f      	bne.n	8004b2a <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	681a      	ldr	r2, [r3, #0]
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b18:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	681a      	ldr	r2, [r3, #0]
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004b28:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b34:	2b40      	cmp	r3, #64	; 0x40
 8004b36:	d007      	beq.n	8004b48 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	681a      	ldr	r2, [r3, #0]
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004b46:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	68db      	ldr	r3, [r3, #12]
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d162      	bne.n	8004c16 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004b50:	e02e      	b.n	8004bb0 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	689b      	ldr	r3, [r3, #8]
 8004b58:	f003 0301 	and.w	r3, r3, #1
 8004b5c:	2b01      	cmp	r3, #1
 8004b5e:	d115      	bne.n	8004b8c <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f103 020c 	add.w	r2, r3, #12
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b6c:	7812      	ldrb	r2, [r2, #0]
 8004b6e:	b2d2      	uxtb	r2, r2
 8004b70:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b76:	1c5a      	adds	r2, r3, #1
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b80:	b29b      	uxth	r3, r3
 8004b82:	3b01      	subs	r3, #1
 8004b84:	b29a      	uxth	r2, r3
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004b8a:	e011      	b.n	8004bb0 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004b8c:	f7fc ff8e 	bl	8001aac <HAL_GetTick>
 8004b90:	4602      	mov	r2, r0
 8004b92:	693b      	ldr	r3, [r7, #16]
 8004b94:	1ad3      	subs	r3, r2, r3
 8004b96:	683a      	ldr	r2, [r7, #0]
 8004b98:	429a      	cmp	r2, r3
 8004b9a:	d803      	bhi.n	8004ba4 <HAL_SPI_Receive+0x166>
 8004b9c:	683b      	ldr	r3, [r7, #0]
 8004b9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ba2:	d102      	bne.n	8004baa <HAL_SPI_Receive+0x16c>
 8004ba4:	683b      	ldr	r3, [r7, #0]
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d102      	bne.n	8004bb0 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8004baa:	2303      	movs	r3, #3
 8004bac:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004bae:	e04a      	b.n	8004c46 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004bb4:	b29b      	uxth	r3, r3
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d1cb      	bne.n	8004b52 <HAL_SPI_Receive+0x114>
 8004bba:	e031      	b.n	8004c20 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	689b      	ldr	r3, [r3, #8]
 8004bc2:	f003 0301 	and.w	r3, r3, #1
 8004bc6:	2b01      	cmp	r3, #1
 8004bc8:	d113      	bne.n	8004bf2 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	68da      	ldr	r2, [r3, #12]
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bd4:	b292      	uxth	r2, r2
 8004bd6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bdc:	1c9a      	adds	r2, r3, #2
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004be6:	b29b      	uxth	r3, r3
 8004be8:	3b01      	subs	r3, #1
 8004bea:	b29a      	uxth	r2, r3
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004bf0:	e011      	b.n	8004c16 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004bf2:	f7fc ff5b 	bl	8001aac <HAL_GetTick>
 8004bf6:	4602      	mov	r2, r0
 8004bf8:	693b      	ldr	r3, [r7, #16]
 8004bfa:	1ad3      	subs	r3, r2, r3
 8004bfc:	683a      	ldr	r2, [r7, #0]
 8004bfe:	429a      	cmp	r2, r3
 8004c00:	d803      	bhi.n	8004c0a <HAL_SPI_Receive+0x1cc>
 8004c02:	683b      	ldr	r3, [r7, #0]
 8004c04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c08:	d102      	bne.n	8004c10 <HAL_SPI_Receive+0x1d2>
 8004c0a:	683b      	ldr	r3, [r7, #0]
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d102      	bne.n	8004c16 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8004c10:	2303      	movs	r3, #3
 8004c12:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004c14:	e017      	b.n	8004c46 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c1a:	b29b      	uxth	r3, r3
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d1cd      	bne.n	8004bbc <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004c20:	693a      	ldr	r2, [r7, #16]
 8004c22:	6839      	ldr	r1, [r7, #0]
 8004c24:	68f8      	ldr	r0, [r7, #12]
 8004c26:	f000 fe19 	bl	800585c <SPI_EndRxTransaction>
 8004c2a:	4603      	mov	r3, r0
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d002      	beq.n	8004c36 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	2220      	movs	r2, #32
 8004c34:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d002      	beq.n	8004c44 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8004c3e:	2301      	movs	r3, #1
 8004c40:	75fb      	strb	r3, [r7, #23]
 8004c42:	e000      	b.n	8004c46 <HAL_SPI_Receive+0x208>
  }

error :
 8004c44:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	2201      	movs	r2, #1
 8004c4a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	2200      	movs	r2, #0
 8004c52:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004c56:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c58:	4618      	mov	r0, r3
 8004c5a:	3718      	adds	r7, #24
 8004c5c:	46bd      	mov	sp, r7
 8004c5e:	bd80      	pop	{r7, pc}

08004c60 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004c60:	b580      	push	{r7, lr}
 8004c62:	b08c      	sub	sp, #48	; 0x30
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	60f8      	str	r0, [r7, #12]
 8004c68:	60b9      	str	r1, [r7, #8]
 8004c6a:	607a      	str	r2, [r7, #4]
 8004c6c:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004c6e:	2301      	movs	r3, #1
 8004c70:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004c72:	2300      	movs	r3, #0
 8004c74:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004c7e:	2b01      	cmp	r3, #1
 8004c80:	d101      	bne.n	8004c86 <HAL_SPI_TransmitReceive+0x26>
 8004c82:	2302      	movs	r3, #2
 8004c84:	e18a      	b.n	8004f9c <HAL_SPI_TransmitReceive+0x33c>
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	2201      	movs	r2, #1
 8004c8a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004c8e:	f7fc ff0d 	bl	8001aac <HAL_GetTick>
 8004c92:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004c9a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	685b      	ldr	r3, [r3, #4]
 8004ca2:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004ca4:	887b      	ldrh	r3, [r7, #2]
 8004ca6:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004ca8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004cac:	2b01      	cmp	r3, #1
 8004cae:	d00f      	beq.n	8004cd0 <HAL_SPI_TransmitReceive+0x70>
 8004cb0:	69fb      	ldr	r3, [r7, #28]
 8004cb2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004cb6:	d107      	bne.n	8004cc8 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	689b      	ldr	r3, [r3, #8]
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d103      	bne.n	8004cc8 <HAL_SPI_TransmitReceive+0x68>
 8004cc0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004cc4:	2b04      	cmp	r3, #4
 8004cc6:	d003      	beq.n	8004cd0 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004cc8:	2302      	movs	r3, #2
 8004cca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004cce:	e15b      	b.n	8004f88 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004cd0:	68bb      	ldr	r3, [r7, #8]
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d005      	beq.n	8004ce2 <HAL_SPI_TransmitReceive+0x82>
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d002      	beq.n	8004ce2 <HAL_SPI_TransmitReceive+0x82>
 8004cdc:	887b      	ldrh	r3, [r7, #2]
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d103      	bne.n	8004cea <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004ce2:	2301      	movs	r3, #1
 8004ce4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004ce8:	e14e      	b.n	8004f88 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004cf0:	b2db      	uxtb	r3, r3
 8004cf2:	2b04      	cmp	r3, #4
 8004cf4:	d003      	beq.n	8004cfe <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	2205      	movs	r2, #5
 8004cfa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	2200      	movs	r2, #0
 8004d02:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	687a      	ldr	r2, [r7, #4]
 8004d08:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	887a      	ldrh	r2, [r7, #2]
 8004d0e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	887a      	ldrh	r2, [r7, #2]
 8004d14:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	68ba      	ldr	r2, [r7, #8]
 8004d1a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	887a      	ldrh	r2, [r7, #2]
 8004d20:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	887a      	ldrh	r2, [r7, #2]
 8004d26:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	2200      	movs	r2, #0
 8004d32:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d3e:	2b40      	cmp	r3, #64	; 0x40
 8004d40:	d007      	beq.n	8004d52 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	681a      	ldr	r2, [r3, #0]
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004d50:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	68db      	ldr	r3, [r3, #12]
 8004d56:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d5a:	d178      	bne.n	8004e4e <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	685b      	ldr	r3, [r3, #4]
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d002      	beq.n	8004d6a <HAL_SPI_TransmitReceive+0x10a>
 8004d64:	8b7b      	ldrh	r3, [r7, #26]
 8004d66:	2b01      	cmp	r3, #1
 8004d68:	d166      	bne.n	8004e38 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d6e:	881a      	ldrh	r2, [r3, #0]
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d7a:	1c9a      	adds	r2, r3, #2
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004d84:	b29b      	uxth	r3, r3
 8004d86:	3b01      	subs	r3, #1
 8004d88:	b29a      	uxth	r2, r3
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004d8e:	e053      	b.n	8004e38 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	689b      	ldr	r3, [r3, #8]
 8004d96:	f003 0302 	and.w	r3, r3, #2
 8004d9a:	2b02      	cmp	r3, #2
 8004d9c:	d11b      	bne.n	8004dd6 <HAL_SPI_TransmitReceive+0x176>
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004da2:	b29b      	uxth	r3, r3
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d016      	beq.n	8004dd6 <HAL_SPI_TransmitReceive+0x176>
 8004da8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004daa:	2b01      	cmp	r3, #1
 8004dac:	d113      	bne.n	8004dd6 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004db2:	881a      	ldrh	r2, [r3, #0]
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dbe:	1c9a      	adds	r2, r3, #2
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004dc8:	b29b      	uxth	r3, r3
 8004dca:	3b01      	subs	r3, #1
 8004dcc:	b29a      	uxth	r2, r3
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004dd2:	2300      	movs	r3, #0
 8004dd4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	689b      	ldr	r3, [r3, #8]
 8004ddc:	f003 0301 	and.w	r3, r3, #1
 8004de0:	2b01      	cmp	r3, #1
 8004de2:	d119      	bne.n	8004e18 <HAL_SPI_TransmitReceive+0x1b8>
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004de8:	b29b      	uxth	r3, r3
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d014      	beq.n	8004e18 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	68da      	ldr	r2, [r3, #12]
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004df8:	b292      	uxth	r2, r2
 8004dfa:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e00:	1c9a      	adds	r2, r3, #2
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e0a:	b29b      	uxth	r3, r3
 8004e0c:	3b01      	subs	r3, #1
 8004e0e:	b29a      	uxth	r2, r3
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004e14:	2301      	movs	r3, #1
 8004e16:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004e18:	f7fc fe48 	bl	8001aac <HAL_GetTick>
 8004e1c:	4602      	mov	r2, r0
 8004e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e20:	1ad3      	subs	r3, r2, r3
 8004e22:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004e24:	429a      	cmp	r2, r3
 8004e26:	d807      	bhi.n	8004e38 <HAL_SPI_TransmitReceive+0x1d8>
 8004e28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e2e:	d003      	beq.n	8004e38 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8004e30:	2303      	movs	r3, #3
 8004e32:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004e36:	e0a7      	b.n	8004f88 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e3c:	b29b      	uxth	r3, r3
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d1a6      	bne.n	8004d90 <HAL_SPI_TransmitReceive+0x130>
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e46:	b29b      	uxth	r3, r3
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d1a1      	bne.n	8004d90 <HAL_SPI_TransmitReceive+0x130>
 8004e4c:	e07c      	b.n	8004f48 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	685b      	ldr	r3, [r3, #4]
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d002      	beq.n	8004e5c <HAL_SPI_TransmitReceive+0x1fc>
 8004e56:	8b7b      	ldrh	r3, [r7, #26]
 8004e58:	2b01      	cmp	r3, #1
 8004e5a:	d16b      	bne.n	8004f34 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	330c      	adds	r3, #12
 8004e66:	7812      	ldrb	r2, [r2, #0]
 8004e68:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e6e:	1c5a      	adds	r2, r3, #1
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e78:	b29b      	uxth	r3, r3
 8004e7a:	3b01      	subs	r3, #1
 8004e7c:	b29a      	uxth	r2, r3
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004e82:	e057      	b.n	8004f34 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	689b      	ldr	r3, [r3, #8]
 8004e8a:	f003 0302 	and.w	r3, r3, #2
 8004e8e:	2b02      	cmp	r3, #2
 8004e90:	d11c      	bne.n	8004ecc <HAL_SPI_TransmitReceive+0x26c>
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e96:	b29b      	uxth	r3, r3
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d017      	beq.n	8004ecc <HAL_SPI_TransmitReceive+0x26c>
 8004e9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e9e:	2b01      	cmp	r3, #1
 8004ea0:	d114      	bne.n	8004ecc <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	330c      	adds	r3, #12
 8004eac:	7812      	ldrb	r2, [r2, #0]
 8004eae:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004eb4:	1c5a      	adds	r2, r3, #1
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004ebe:	b29b      	uxth	r3, r3
 8004ec0:	3b01      	subs	r3, #1
 8004ec2:	b29a      	uxth	r2, r3
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004ec8:	2300      	movs	r3, #0
 8004eca:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	689b      	ldr	r3, [r3, #8]
 8004ed2:	f003 0301 	and.w	r3, r3, #1
 8004ed6:	2b01      	cmp	r3, #1
 8004ed8:	d119      	bne.n	8004f0e <HAL_SPI_TransmitReceive+0x2ae>
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ede:	b29b      	uxth	r3, r3
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d014      	beq.n	8004f0e <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	68da      	ldr	r2, [r3, #12]
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004eee:	b2d2      	uxtb	r2, r2
 8004ef0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ef6:	1c5a      	adds	r2, r3, #1
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f00:	b29b      	uxth	r3, r3
 8004f02:	3b01      	subs	r3, #1
 8004f04:	b29a      	uxth	r2, r3
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004f0a:	2301      	movs	r3, #1
 8004f0c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004f0e:	f7fc fdcd 	bl	8001aac <HAL_GetTick>
 8004f12:	4602      	mov	r2, r0
 8004f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f16:	1ad3      	subs	r3, r2, r3
 8004f18:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004f1a:	429a      	cmp	r2, r3
 8004f1c:	d803      	bhi.n	8004f26 <HAL_SPI_TransmitReceive+0x2c6>
 8004f1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f24:	d102      	bne.n	8004f2c <HAL_SPI_TransmitReceive+0x2cc>
 8004f26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d103      	bne.n	8004f34 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8004f2c:	2303      	movs	r3, #3
 8004f2e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004f32:	e029      	b.n	8004f88 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004f38:	b29b      	uxth	r3, r3
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d1a2      	bne.n	8004e84 <HAL_SPI_TransmitReceive+0x224>
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f42:	b29b      	uxth	r3, r3
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d19d      	bne.n	8004e84 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004f48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f4a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004f4c:	68f8      	ldr	r0, [r7, #12]
 8004f4e:	f000 fceb 	bl	8005928 <SPI_EndRxTxTransaction>
 8004f52:	4603      	mov	r3, r0
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d006      	beq.n	8004f66 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8004f58:	2301      	movs	r3, #1
 8004f5a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	2220      	movs	r2, #32
 8004f62:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8004f64:	e010      	b.n	8004f88 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	689b      	ldr	r3, [r3, #8]
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d10b      	bne.n	8004f86 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004f6e:	2300      	movs	r3, #0
 8004f70:	617b      	str	r3, [r7, #20]
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	68db      	ldr	r3, [r3, #12]
 8004f78:	617b      	str	r3, [r7, #20]
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	689b      	ldr	r3, [r3, #8]
 8004f80:	617b      	str	r3, [r7, #20]
 8004f82:	697b      	ldr	r3, [r7, #20]
 8004f84:	e000      	b.n	8004f88 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8004f86:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	2201      	movs	r2, #1
 8004f8c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	2200      	movs	r2, #0
 8004f94:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004f98:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8004f9c:	4618      	mov	r0, r3
 8004f9e:	3730      	adds	r7, #48	; 0x30
 8004fa0:	46bd      	mov	sp, r7
 8004fa2:	bd80      	pop	{r7, pc}

08004fa4 <HAL_SPI_Receive_DMA>:
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8004fa4:	b580      	push	{r7, lr}
 8004fa6:	b086      	sub	sp, #24
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	60f8      	str	r0, [r7, #12]
 8004fac:	60b9      	str	r1, [r7, #8]
 8004fae:	4613      	mov	r3, r2
 8004fb0:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004fb2:	2300      	movs	r3, #0
 8004fb4:	75fb      	strb	r3, [r7, #23]

  /* Check rx dma handle */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	689b      	ldr	r3, [r3, #8]
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d110      	bne.n	8004fe0 <HAL_SPI_Receive_DMA+0x3c>
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	685b      	ldr	r3, [r3, #4]
 8004fc2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004fc6:	d10b      	bne.n	8004fe0 <HAL_SPI_Receive_DMA+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	2204      	movs	r2, #4
 8004fcc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    /* Check tx dma handle */
    assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 8004fd0:	88fb      	ldrh	r3, [r7, #6]
 8004fd2:	68ba      	ldr	r2, [r7, #8]
 8004fd4:	68b9      	ldr	r1, [r7, #8]
 8004fd6:	68f8      	ldr	r0, [r7, #12]
 8004fd8:	f000 f8ac 	bl	8005134 <HAL_SPI_TransmitReceive_DMA>
 8004fdc:	4603      	mov	r3, r0
 8004fde:	e09f      	b.n	8005120 <HAL_SPI_Receive_DMA+0x17c>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004fe6:	2b01      	cmp	r3, #1
 8004fe8:	d101      	bne.n	8004fee <HAL_SPI_Receive_DMA+0x4a>
 8004fea:	2302      	movs	r3, #2
 8004fec:	e098      	b.n	8005120 <HAL_SPI_Receive_DMA+0x17c>
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	2201      	movs	r2, #1
 8004ff2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004ffc:	b2db      	uxtb	r3, r3
 8004ffe:	2b01      	cmp	r3, #1
 8005000:	d002      	beq.n	8005008 <HAL_SPI_Receive_DMA+0x64>
  {
    errorcode = HAL_BUSY;
 8005002:	2302      	movs	r3, #2
 8005004:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005006:	e086      	b.n	8005116 <HAL_SPI_Receive_DMA+0x172>
  }

  if ((pData == NULL) || (Size == 0U))
 8005008:	68bb      	ldr	r3, [r7, #8]
 800500a:	2b00      	cmp	r3, #0
 800500c:	d002      	beq.n	8005014 <HAL_SPI_Receive_DMA+0x70>
 800500e:	88fb      	ldrh	r3, [r7, #6]
 8005010:	2b00      	cmp	r3, #0
 8005012:	d102      	bne.n	800501a <HAL_SPI_Receive_DMA+0x76>
  {
    errorcode = HAL_ERROR;
 8005014:	2301      	movs	r3, #1
 8005016:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005018:	e07d      	b.n	8005116 <HAL_SPI_Receive_DMA+0x172>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	2204      	movs	r2, #4
 800501e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	2200      	movs	r2, #0
 8005026:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	68ba      	ldr	r2, [r7, #8]
 800502c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	88fa      	ldrh	r2, [r7, #6]
 8005032:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	88fa      	ldrh	r2, [r7, #6]
 8005038:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	2200      	movs	r2, #0
 800503e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	2200      	movs	r2, #0
 8005044:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->TxXferSize  = 0U;
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	2200      	movs	r2, #0
 800504a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	2200      	movs	r2, #0
 8005050:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	689b      	ldr	r3, [r3, #8]
 8005056:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800505a:	d10f      	bne.n	800507c <HAL_SPI_Receive_DMA+0xd8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	681a      	ldr	r2, [r3, #0]
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800506a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	681a      	ldr	r2, [r3, #0]
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800507a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005080:	4a29      	ldr	r2, [pc, #164]	; (8005128 <HAL_SPI_Receive_DMA+0x184>)
 8005082:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005088:	4a28      	ldr	r2, [pc, #160]	; (800512c <HAL_SPI_Receive_DMA+0x188>)
 800508a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005090:	4a27      	ldr	r2, [pc, #156]	; (8005130 <HAL_SPI_Receive_DMA+0x18c>)
 8005092:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005098:	2200      	movs	r2, #0
 800509a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	330c      	adds	r3, #12
 80050a6:	4619      	mov	r1, r3
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050ac:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80050b2:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 80050b4:	f7fc ff38 	bl	8001f28 <HAL_DMA_Start_IT>
 80050b8:	4603      	mov	r3, r0
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d00c      	beq.n	80050d8 <HAL_SPI_Receive_DMA+0x134>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050c2:	f043 0210 	orr.w	r2, r3, #16
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 80050ca:	2301      	movs	r3, #1
 80050cc:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	2201      	movs	r2, #1
 80050d2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 80050d6:	e01e      	b.n	8005116 <HAL_SPI_Receive_DMA+0x172>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050e2:	2b40      	cmp	r3, #64	; 0x40
 80050e4:	d007      	beq.n	80050f6 <HAL_SPI_Receive_DMA+0x152>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	681a      	ldr	r2, [r3, #0]
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80050f4:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	685a      	ldr	r2, [r3, #4]
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f042 0220 	orr.w	r2, r2, #32
 8005104:	605a      	str	r2, [r3, #4]

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	685a      	ldr	r2, [r3, #4]
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	f042 0201 	orr.w	r2, r2, #1
 8005114:	605a      	str	r2, [r3, #4]

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	2200      	movs	r2, #0
 800511a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800511e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005120:	4618      	mov	r0, r3
 8005122:	3718      	adds	r7, #24
 8005124:	46bd      	mov	sp, r7
 8005126:	bd80      	pop	{r7, pc}
 8005128:	080056ad 	.word	0x080056ad
 800512c:	08005575 	.word	0x08005575
 8005130:	080056e5 	.word	0x080056e5

08005134 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8005134:	b580      	push	{r7, lr}
 8005136:	b086      	sub	sp, #24
 8005138:	af00      	add	r7, sp, #0
 800513a:	60f8      	str	r0, [r7, #12]
 800513c:	60b9      	str	r1, [r7, #8]
 800513e:	607a      	str	r2, [r7, #4]
 8005140:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005142:	2300      	movs	r3, #0
 8005144:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800514c:	2b01      	cmp	r3, #1
 800514e:	d101      	bne.n	8005154 <HAL_SPI_TransmitReceive_DMA+0x20>
 8005150:	2302      	movs	r3, #2
 8005152:	e0e3      	b.n	800531c <HAL_SPI_TransmitReceive_DMA+0x1e8>
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	2201      	movs	r2, #1
 8005158:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005162:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	685b      	ldr	r3, [r3, #4]
 8005168:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 800516a:	7dbb      	ldrb	r3, [r7, #22]
 800516c:	2b01      	cmp	r3, #1
 800516e:	d00d      	beq.n	800518c <HAL_SPI_TransmitReceive_DMA+0x58>
 8005170:	693b      	ldr	r3, [r7, #16]
 8005172:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005176:	d106      	bne.n	8005186 <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	689b      	ldr	r3, [r3, #8]
 800517c:	2b00      	cmp	r3, #0
 800517e:	d102      	bne.n	8005186 <HAL_SPI_TransmitReceive_DMA+0x52>
 8005180:	7dbb      	ldrb	r3, [r7, #22]
 8005182:	2b04      	cmp	r3, #4
 8005184:	d002      	beq.n	800518c <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 8005186:	2302      	movs	r3, #2
 8005188:	75fb      	strb	r3, [r7, #23]
    goto error;
 800518a:	e0c2      	b.n	8005312 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800518c:	68bb      	ldr	r3, [r7, #8]
 800518e:	2b00      	cmp	r3, #0
 8005190:	d005      	beq.n	800519e <HAL_SPI_TransmitReceive_DMA+0x6a>
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	2b00      	cmp	r3, #0
 8005196:	d002      	beq.n	800519e <HAL_SPI_TransmitReceive_DMA+0x6a>
 8005198:	887b      	ldrh	r3, [r7, #2]
 800519a:	2b00      	cmp	r3, #0
 800519c:	d102      	bne.n	80051a4 <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 800519e:	2301      	movs	r3, #1
 80051a0:	75fb      	strb	r3, [r7, #23]
    goto error;
 80051a2:	e0b6      	b.n	8005312 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80051aa:	b2db      	uxtb	r3, r3
 80051ac:	2b04      	cmp	r3, #4
 80051ae:	d003      	beq.n	80051b8 <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	2205      	movs	r2, #5
 80051b4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	2200      	movs	r2, #0
 80051bc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	68ba      	ldr	r2, [r7, #8]
 80051c2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	887a      	ldrh	r2, [r7, #2]
 80051c8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	887a      	ldrh	r2, [r7, #2]
 80051ce:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	687a      	ldr	r2, [r7, #4]
 80051d4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	887a      	ldrh	r2, [r7, #2]
 80051da:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	887a      	ldrh	r2, [r7, #2]
 80051e0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	2200      	movs	r2, #0
 80051e6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	2200      	movs	r2, #0
 80051ec:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80051f4:	b2db      	uxtb	r3, r3
 80051f6:	2b04      	cmp	r3, #4
 80051f8:	d108      	bne.n	800520c <HAL_SPI_TransmitReceive_DMA+0xd8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80051fe:	4a49      	ldr	r2, [pc, #292]	; (8005324 <HAL_SPI_TransmitReceive_DMA+0x1f0>)
 8005200:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005206:	4a48      	ldr	r2, [pc, #288]	; (8005328 <HAL_SPI_TransmitReceive_DMA+0x1f4>)
 8005208:	63da      	str	r2, [r3, #60]	; 0x3c
 800520a:	e007      	b.n	800521c <HAL_SPI_TransmitReceive_DMA+0xe8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005210:	4a46      	ldr	r2, [pc, #280]	; (800532c <HAL_SPI_TransmitReceive_DMA+0x1f8>)
 8005212:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005218:	4a45      	ldr	r2, [pc, #276]	; (8005330 <HAL_SPI_TransmitReceive_DMA+0x1fc>)
 800521a:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005220:	4a44      	ldr	r2, [pc, #272]	; (8005334 <HAL_SPI_TransmitReceive_DMA+0x200>)
 8005222:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005228:	2200      	movs	r2, #0
 800522a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	330c      	adds	r3, #12
 8005236:	4619      	mov	r1, r3
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800523c:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005242:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8005244:	f7fc fe70 	bl	8001f28 <HAL_DMA_Start_IT>
 8005248:	4603      	mov	r3, r0
 800524a:	2b00      	cmp	r3, #0
 800524c:	d00c      	beq.n	8005268 <HAL_SPI_TransmitReceive_DMA+0x134>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005252:	f043 0210 	orr.w	r2, r3, #16
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 800525a:	2301      	movs	r3, #1
 800525c:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	2201      	movs	r2, #1
 8005262:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8005266:	e054      	b.n	8005312 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	685a      	ldr	r2, [r3, #4]
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	f042 0201 	orr.w	r2, r2, #1
 8005276:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800527c:	2200      	movs	r2, #0
 800527e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005284:	2200      	movs	r2, #0
 8005286:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800528c:	2200      	movs	r2, #0
 800528e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005294:	2200      	movs	r2, #0
 8005296:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	6c98      	ldr	r0, [r3, #72]	; 0x48
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052a0:	4619      	mov	r1, r3
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	330c      	adds	r3, #12
 80052a8:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80052ae:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80052b0:	f7fc fe3a 	bl	8001f28 <HAL_DMA_Start_IT>
 80052b4:	4603      	mov	r3, r0
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d00c      	beq.n	80052d4 <HAL_SPI_TransmitReceive_DMA+0x1a0>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052be:	f043 0210 	orr.w	r2, r3, #16
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 80052c6:	2301      	movs	r3, #1
 80052c8:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	2201      	movs	r2, #1
 80052ce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 80052d2:	e01e      	b.n	8005312 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052de:	2b40      	cmp	r3, #64	; 0x40
 80052e0:	d007      	beq.n	80052f2 <HAL_SPI_TransmitReceive_DMA+0x1be>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	681a      	ldr	r2, [r3, #0]
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80052f0:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	685a      	ldr	r2, [r3, #4]
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f042 0220 	orr.w	r2, r2, #32
 8005300:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	685a      	ldr	r2, [r3, #4]
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	f042 0202 	orr.w	r2, r2, #2
 8005310:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	2200      	movs	r2, #0
 8005316:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800531a:	7dfb      	ldrb	r3, [r7, #23]
}
 800531c:	4618      	mov	r0, r3
 800531e:	3718      	adds	r7, #24
 8005320:	46bd      	mov	sp, r7
 8005322:	bd80      	pop	{r7, pc}
 8005324:	080056ad 	.word	0x080056ad
 8005328:	08005575 	.word	0x08005575
 800532c:	080056c9 	.word	0x080056c9
 8005330:	0800561d 	.word	0x0800561d
 8005334:	080056e5 	.word	0x080056e5

08005338 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8005338:	b580      	push	{r7, lr}
 800533a:	b088      	sub	sp, #32
 800533c:	af00      	add	r7, sp, #0
 800533e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	685b      	ldr	r3, [r3, #4]
 8005346:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	689b      	ldr	r3, [r3, #8]
 800534e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005350:	69bb      	ldr	r3, [r7, #24]
 8005352:	099b      	lsrs	r3, r3, #6
 8005354:	f003 0301 	and.w	r3, r3, #1
 8005358:	2b00      	cmp	r3, #0
 800535a:	d10f      	bne.n	800537c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800535c:	69bb      	ldr	r3, [r7, #24]
 800535e:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005362:	2b00      	cmp	r3, #0
 8005364:	d00a      	beq.n	800537c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005366:	69fb      	ldr	r3, [r7, #28]
 8005368:	099b      	lsrs	r3, r3, #6
 800536a:	f003 0301 	and.w	r3, r3, #1
 800536e:	2b00      	cmp	r3, #0
 8005370:	d004      	beq.n	800537c <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005376:	6878      	ldr	r0, [r7, #4]
 8005378:	4798      	blx	r3
    return;
 800537a:	e0d7      	b.n	800552c <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800537c:	69bb      	ldr	r3, [r7, #24]
 800537e:	085b      	lsrs	r3, r3, #1
 8005380:	f003 0301 	and.w	r3, r3, #1
 8005384:	2b00      	cmp	r3, #0
 8005386:	d00a      	beq.n	800539e <HAL_SPI_IRQHandler+0x66>
 8005388:	69fb      	ldr	r3, [r7, #28]
 800538a:	09db      	lsrs	r3, r3, #7
 800538c:	f003 0301 	and.w	r3, r3, #1
 8005390:	2b00      	cmp	r3, #0
 8005392:	d004      	beq.n	800539e <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005398:	6878      	ldr	r0, [r7, #4]
 800539a:	4798      	blx	r3
    return;
 800539c:	e0c6      	b.n	800552c <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800539e:	69bb      	ldr	r3, [r7, #24]
 80053a0:	095b      	lsrs	r3, r3, #5
 80053a2:	f003 0301 	and.w	r3, r3, #1
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d10c      	bne.n	80053c4 <HAL_SPI_IRQHandler+0x8c>
 80053aa:	69bb      	ldr	r3, [r7, #24]
 80053ac:	099b      	lsrs	r3, r3, #6
 80053ae:	f003 0301 	and.w	r3, r3, #1
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d106      	bne.n	80053c4 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80053b6:	69bb      	ldr	r3, [r7, #24]
 80053b8:	0a1b      	lsrs	r3, r3, #8
 80053ba:	f003 0301 	and.w	r3, r3, #1
 80053be:	2b00      	cmp	r3, #0
 80053c0:	f000 80b4 	beq.w	800552c <HAL_SPI_IRQHandler+0x1f4>
 80053c4:	69fb      	ldr	r3, [r7, #28]
 80053c6:	095b      	lsrs	r3, r3, #5
 80053c8:	f003 0301 	and.w	r3, r3, #1
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	f000 80ad 	beq.w	800552c <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80053d2:	69bb      	ldr	r3, [r7, #24]
 80053d4:	099b      	lsrs	r3, r3, #6
 80053d6:	f003 0301 	and.w	r3, r3, #1
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d023      	beq.n	8005426 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80053e4:	b2db      	uxtb	r3, r3
 80053e6:	2b03      	cmp	r3, #3
 80053e8:	d011      	beq.n	800540e <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053ee:	f043 0204 	orr.w	r2, r3, #4
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80053f6:	2300      	movs	r3, #0
 80053f8:	617b      	str	r3, [r7, #20]
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	68db      	ldr	r3, [r3, #12]
 8005400:	617b      	str	r3, [r7, #20]
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	689b      	ldr	r3, [r3, #8]
 8005408:	617b      	str	r3, [r7, #20]
 800540a:	697b      	ldr	r3, [r7, #20]
 800540c:	e00b      	b.n	8005426 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800540e:	2300      	movs	r3, #0
 8005410:	613b      	str	r3, [r7, #16]
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	68db      	ldr	r3, [r3, #12]
 8005418:	613b      	str	r3, [r7, #16]
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	689b      	ldr	r3, [r3, #8]
 8005420:	613b      	str	r3, [r7, #16]
 8005422:	693b      	ldr	r3, [r7, #16]
        return;
 8005424:	e082      	b.n	800552c <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8005426:	69bb      	ldr	r3, [r7, #24]
 8005428:	095b      	lsrs	r3, r3, #5
 800542a:	f003 0301 	and.w	r3, r3, #1
 800542e:	2b00      	cmp	r3, #0
 8005430:	d014      	beq.n	800545c <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005436:	f043 0201 	orr.w	r2, r3, #1
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800543e:	2300      	movs	r3, #0
 8005440:	60fb      	str	r3, [r7, #12]
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	689b      	ldr	r3, [r3, #8]
 8005448:	60fb      	str	r3, [r7, #12]
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	681a      	ldr	r2, [r3, #0]
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005458:	601a      	str	r2, [r3, #0]
 800545a:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800545c:	69bb      	ldr	r3, [r7, #24]
 800545e:	0a1b      	lsrs	r3, r3, #8
 8005460:	f003 0301 	and.w	r3, r3, #1
 8005464:	2b00      	cmp	r3, #0
 8005466:	d00c      	beq.n	8005482 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800546c:	f043 0208 	orr.w	r2, r3, #8
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8005474:	2300      	movs	r3, #0
 8005476:	60bb      	str	r3, [r7, #8]
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	689b      	ldr	r3, [r3, #8]
 800547e:	60bb      	str	r3, [r7, #8]
 8005480:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005486:	2b00      	cmp	r3, #0
 8005488:	d04f      	beq.n	800552a <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	685a      	ldr	r2, [r3, #4]
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005498:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	2201      	movs	r2, #1
 800549e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80054a2:	69fb      	ldr	r3, [r7, #28]
 80054a4:	f003 0302 	and.w	r3, r3, #2
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d104      	bne.n	80054b6 <HAL_SPI_IRQHandler+0x17e>
 80054ac:	69fb      	ldr	r3, [r7, #28]
 80054ae:	f003 0301 	and.w	r3, r3, #1
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d034      	beq.n	8005520 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	685a      	ldr	r2, [r3, #4]
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f022 0203 	bic.w	r2, r2, #3
 80054c4:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d011      	beq.n	80054f2 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80054d2:	4a18      	ldr	r2, [pc, #96]	; (8005534 <HAL_SPI_IRQHandler+0x1fc>)
 80054d4:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80054da:	4618      	mov	r0, r3
 80054dc:	f7fc fd7c 	bl	8001fd8 <HAL_DMA_Abort_IT>
 80054e0:	4603      	mov	r3, r0
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d005      	beq.n	80054f2 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054ea:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d016      	beq.n	8005528 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80054fe:	4a0d      	ldr	r2, [pc, #52]	; (8005534 <HAL_SPI_IRQHandler+0x1fc>)
 8005500:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005506:	4618      	mov	r0, r3
 8005508:	f7fc fd66 	bl	8001fd8 <HAL_DMA_Abort_IT>
 800550c:	4603      	mov	r3, r0
 800550e:	2b00      	cmp	r3, #0
 8005510:	d00a      	beq.n	8005528 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005516:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 800551e:	e003      	b.n	8005528 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8005520:	6878      	ldr	r0, [r7, #4]
 8005522:	f7fb fb77 	bl	8000c14 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8005526:	e000      	b.n	800552a <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8005528:	bf00      	nop
    return;
 800552a:	bf00      	nop
  }
}
 800552c:	3720      	adds	r7, #32
 800552e:	46bd      	mov	sp, r7
 8005530:	bd80      	pop	{r7, pc}
 8005532:	bf00      	nop
 8005534:	08005725 	.word	0x08005725

08005538 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005538:	b480      	push	{r7}
 800553a:	b083      	sub	sp, #12
 800553c:	af00      	add	r7, sp, #0
 800553e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8005540:	bf00      	nop
 8005542:	370c      	adds	r7, #12
 8005544:	46bd      	mov	sp, r7
 8005546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554a:	4770      	bx	lr

0800554c <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800554c:	b480      	push	{r7}
 800554e:	b083      	sub	sp, #12
 8005550:	af00      	add	r7, sp, #0
 8005552:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8005554:	bf00      	nop
 8005556:	370c      	adds	r7, #12
 8005558:	46bd      	mov	sp, r7
 800555a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555e:	4770      	bx	lr

08005560 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005560:	b480      	push	{r7}
 8005562:	b083      	sub	sp, #12
 8005564:	af00      	add	r7, sp, #0
 8005566:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8005568:	bf00      	nop
 800556a:	370c      	adds	r7, #12
 800556c:	46bd      	mov	sp, r7
 800556e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005572:	4770      	bx	lr

08005574 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005574:	b580      	push	{r7, lr}
 8005576:	b084      	sub	sp, #16
 8005578:	af00      	add	r7, sp, #0
 800557a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005580:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005582:	f7fc fa93 	bl	8001aac <HAL_GetTick>
 8005586:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005592:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005596:	d03b      	beq.n	8005610 <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	685a      	ldr	r2, [r3, #4]
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f022 0220 	bic.w	r2, r2, #32
 80055a6:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	689b      	ldr	r3, [r3, #8]
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d10d      	bne.n	80055cc <SPI_DMAReceiveCplt+0x58>
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	685b      	ldr	r3, [r3, #4]
 80055b4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80055b8:	d108      	bne.n	80055cc <SPI_DMAReceiveCplt+0x58>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	685a      	ldr	r2, [r3, #4]
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	f022 0203 	bic.w	r2, r2, #3
 80055c8:	605a      	str	r2, [r3, #4]
 80055ca:	e007      	b.n	80055dc <SPI_DMAReceiveCplt+0x68>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	685a      	ldr	r2, [r3, #4]
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	f022 0201 	bic.w	r2, r2, #1
 80055da:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80055dc:	68ba      	ldr	r2, [r7, #8]
 80055de:	2164      	movs	r1, #100	; 0x64
 80055e0:	68f8      	ldr	r0, [r7, #12]
 80055e2:	f000 f93b 	bl	800585c <SPI_EndRxTransaction>
 80055e6:	4603      	mov	r3, r0
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d002      	beq.n	80055f2 <SPI_DMAReceiveCplt+0x7e>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	2220      	movs	r2, #32
 80055f0:	655a      	str	r2, [r3, #84]	; 0x54
    }

    hspi->RxXferCount = 0U;
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	2200      	movs	r2, #0
 80055f6:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	2201      	movs	r2, #1
 80055fc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005604:	2b00      	cmp	r3, #0
 8005606:	d003      	beq.n	8005610 <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8005608:	68f8      	ldr	r0, [r7, #12]
 800560a:	f7fb fb03 	bl	8000c14 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800560e:	e002      	b.n	8005616 <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 8005610:	68f8      	ldr	r0, [r7, #12]
 8005612:	f7fb fb11 	bl	8000c38 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005616:	3710      	adds	r7, #16
 8005618:	46bd      	mov	sp, r7
 800561a:	bd80      	pop	{r7, pc}

0800561c <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800561c:	b580      	push	{r7, lr}
 800561e:	b084      	sub	sp, #16
 8005620:	af00      	add	r7, sp, #0
 8005622:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005628:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800562a:	f7fc fa3f 	bl	8001aac <HAL_GetTick>
 800562e:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800563a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800563e:	d02f      	beq.n	80056a0 <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	685a      	ldr	r2, [r3, #4]
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f022 0220 	bic.w	r2, r2, #32
 800564e:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8005650:	68ba      	ldr	r2, [r7, #8]
 8005652:	2164      	movs	r1, #100	; 0x64
 8005654:	68f8      	ldr	r0, [r7, #12]
 8005656:	f000 f967 	bl	8005928 <SPI_EndRxTxTransaction>
 800565a:	4603      	mov	r3, r0
 800565c:	2b00      	cmp	r3, #0
 800565e:	d005      	beq.n	800566c <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005664:	f043 0220 	orr.w	r2, r3, #32
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	685a      	ldr	r2, [r3, #4]
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	f022 0203 	bic.w	r2, r2, #3
 800567a:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	2200      	movs	r2, #0
 8005680:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->RxXferCount = 0U;
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	2200      	movs	r2, #0
 8005686:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	2201      	movs	r2, #1
 800568c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005694:	2b00      	cmp	r3, #0
 8005696:	d003      	beq.n	80056a0 <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8005698:	68f8      	ldr	r0, [r7, #12]
 800569a:	f7fb fabb 	bl	8000c14 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800569e:	e002      	b.n	80056a6 <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 80056a0:	68f8      	ldr	r0, [r7, #12]
 80056a2:	f7ff ff49 	bl	8005538 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80056a6:	3710      	adds	r7, #16
 80056a8:	46bd      	mov	sp, r7
 80056aa:	bd80      	pop	{r7, pc}

080056ac <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80056ac:	b580      	push	{r7, lr}
 80056ae:	b084      	sub	sp, #16
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056b8:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 80056ba:	68f8      	ldr	r0, [r7, #12]
 80056bc:	f7ff ff46 	bl	800554c <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80056c0:	bf00      	nop
 80056c2:	3710      	adds	r7, #16
 80056c4:	46bd      	mov	sp, r7
 80056c6:	bd80      	pop	{r7, pc}

080056c8 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80056c8:	b580      	push	{r7, lr}
 80056ca:	b084      	sub	sp, #16
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056d4:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 80056d6:	68f8      	ldr	r0, [r7, #12]
 80056d8:	f7ff ff42 	bl	8005560 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80056dc:	bf00      	nop
 80056de:	3710      	adds	r7, #16
 80056e0:	46bd      	mov	sp, r7
 80056e2:	bd80      	pop	{r7, pc}

080056e4 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 80056e4:	b580      	push	{r7, lr}
 80056e6:	b084      	sub	sp, #16
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056f0:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	685a      	ldr	r2, [r3, #4]
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	f022 0203 	bic.w	r2, r2, #3
 8005700:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005706:	f043 0210 	orr.w	r2, r3, #16
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	2201      	movs	r2, #1
 8005712:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8005716:	68f8      	ldr	r0, [r7, #12]
 8005718:	f7fb fa7c 	bl	8000c14 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800571c:	bf00      	nop
 800571e:	3710      	adds	r7, #16
 8005720:	46bd      	mov	sp, r7
 8005722:	bd80      	pop	{r7, pc}

08005724 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005724:	b580      	push	{r7, lr}
 8005726:	b084      	sub	sp, #16
 8005728:	af00      	add	r7, sp, #0
 800572a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005730:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	2200      	movs	r2, #0
 8005736:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	2200      	movs	r2, #0
 800573c:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800573e:	68f8      	ldr	r0, [r7, #12]
 8005740:	f7fb fa68 	bl	8000c14 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005744:	bf00      	nop
 8005746:	3710      	adds	r7, #16
 8005748:	46bd      	mov	sp, r7
 800574a:	bd80      	pop	{r7, pc}

0800574c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800574c:	b580      	push	{r7, lr}
 800574e:	b088      	sub	sp, #32
 8005750:	af00      	add	r7, sp, #0
 8005752:	60f8      	str	r0, [r7, #12]
 8005754:	60b9      	str	r1, [r7, #8]
 8005756:	603b      	str	r3, [r7, #0]
 8005758:	4613      	mov	r3, r2
 800575a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800575c:	f7fc f9a6 	bl	8001aac <HAL_GetTick>
 8005760:	4602      	mov	r2, r0
 8005762:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005764:	1a9b      	subs	r3, r3, r2
 8005766:	683a      	ldr	r2, [r7, #0]
 8005768:	4413      	add	r3, r2
 800576a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800576c:	f7fc f99e 	bl	8001aac <HAL_GetTick>
 8005770:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005772:	4b39      	ldr	r3, [pc, #228]	; (8005858 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	015b      	lsls	r3, r3, #5
 8005778:	0d1b      	lsrs	r3, r3, #20
 800577a:	69fa      	ldr	r2, [r7, #28]
 800577c:	fb02 f303 	mul.w	r3, r2, r3
 8005780:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005782:	e054      	b.n	800582e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005784:	683b      	ldr	r3, [r7, #0]
 8005786:	f1b3 3fff 	cmp.w	r3, #4294967295
 800578a:	d050      	beq.n	800582e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800578c:	f7fc f98e 	bl	8001aac <HAL_GetTick>
 8005790:	4602      	mov	r2, r0
 8005792:	69bb      	ldr	r3, [r7, #24]
 8005794:	1ad3      	subs	r3, r2, r3
 8005796:	69fa      	ldr	r2, [r7, #28]
 8005798:	429a      	cmp	r2, r3
 800579a:	d902      	bls.n	80057a2 <SPI_WaitFlagStateUntilTimeout+0x56>
 800579c:	69fb      	ldr	r3, [r7, #28]
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d13d      	bne.n	800581e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	685a      	ldr	r2, [r3, #4]
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80057b0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	685b      	ldr	r3, [r3, #4]
 80057b6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80057ba:	d111      	bne.n	80057e0 <SPI_WaitFlagStateUntilTimeout+0x94>
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	689b      	ldr	r3, [r3, #8]
 80057c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80057c4:	d004      	beq.n	80057d0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	689b      	ldr	r3, [r3, #8]
 80057ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80057ce:	d107      	bne.n	80057e0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	681a      	ldr	r2, [r3, #0]
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80057de:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80057e8:	d10f      	bne.n	800580a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	681a      	ldr	r2, [r3, #0]
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80057f8:	601a      	str	r2, [r3, #0]
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	681a      	ldr	r2, [r3, #0]
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005808:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	2201      	movs	r2, #1
 800580e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	2200      	movs	r2, #0
 8005816:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800581a:	2303      	movs	r3, #3
 800581c:	e017      	b.n	800584e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800581e:	697b      	ldr	r3, [r7, #20]
 8005820:	2b00      	cmp	r3, #0
 8005822:	d101      	bne.n	8005828 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005824:	2300      	movs	r3, #0
 8005826:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005828:	697b      	ldr	r3, [r7, #20]
 800582a:	3b01      	subs	r3, #1
 800582c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	689a      	ldr	r2, [r3, #8]
 8005834:	68bb      	ldr	r3, [r7, #8]
 8005836:	4013      	ands	r3, r2
 8005838:	68ba      	ldr	r2, [r7, #8]
 800583a:	429a      	cmp	r2, r3
 800583c:	bf0c      	ite	eq
 800583e:	2301      	moveq	r3, #1
 8005840:	2300      	movne	r3, #0
 8005842:	b2db      	uxtb	r3, r3
 8005844:	461a      	mov	r2, r3
 8005846:	79fb      	ldrb	r3, [r7, #7]
 8005848:	429a      	cmp	r2, r3
 800584a:	d19b      	bne.n	8005784 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800584c:	2300      	movs	r3, #0
}
 800584e:	4618      	mov	r0, r3
 8005850:	3720      	adds	r7, #32
 8005852:	46bd      	mov	sp, r7
 8005854:	bd80      	pop	{r7, pc}
 8005856:	bf00      	nop
 8005858:	20000004 	.word	0x20000004

0800585c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800585c:	b580      	push	{r7, lr}
 800585e:	b086      	sub	sp, #24
 8005860:	af02      	add	r7, sp, #8
 8005862:	60f8      	str	r0, [r7, #12]
 8005864:	60b9      	str	r1, [r7, #8]
 8005866:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	685b      	ldr	r3, [r3, #4]
 800586c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005870:	d111      	bne.n	8005896 <SPI_EndRxTransaction+0x3a>
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	689b      	ldr	r3, [r3, #8]
 8005876:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800587a:	d004      	beq.n	8005886 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	689b      	ldr	r3, [r3, #8]
 8005880:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005884:	d107      	bne.n	8005896 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	681a      	ldr	r2, [r3, #0]
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005894:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	685b      	ldr	r3, [r3, #4]
 800589a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800589e:	d12a      	bne.n	80058f6 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	689b      	ldr	r3, [r3, #8]
 80058a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80058a8:	d012      	beq.n	80058d0 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	9300      	str	r3, [sp, #0]
 80058ae:	68bb      	ldr	r3, [r7, #8]
 80058b0:	2200      	movs	r2, #0
 80058b2:	2180      	movs	r1, #128	; 0x80
 80058b4:	68f8      	ldr	r0, [r7, #12]
 80058b6:	f7ff ff49 	bl	800574c <SPI_WaitFlagStateUntilTimeout>
 80058ba:	4603      	mov	r3, r0
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d02d      	beq.n	800591c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058c4:	f043 0220 	orr.w	r2, r3, #32
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80058cc:	2303      	movs	r3, #3
 80058ce:	e026      	b.n	800591e <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	9300      	str	r3, [sp, #0]
 80058d4:	68bb      	ldr	r3, [r7, #8]
 80058d6:	2200      	movs	r2, #0
 80058d8:	2101      	movs	r1, #1
 80058da:	68f8      	ldr	r0, [r7, #12]
 80058dc:	f7ff ff36 	bl	800574c <SPI_WaitFlagStateUntilTimeout>
 80058e0:	4603      	mov	r3, r0
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d01a      	beq.n	800591c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058ea:	f043 0220 	orr.w	r2, r3, #32
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80058f2:	2303      	movs	r3, #3
 80058f4:	e013      	b.n	800591e <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	9300      	str	r3, [sp, #0]
 80058fa:	68bb      	ldr	r3, [r7, #8]
 80058fc:	2200      	movs	r2, #0
 80058fe:	2101      	movs	r1, #1
 8005900:	68f8      	ldr	r0, [r7, #12]
 8005902:	f7ff ff23 	bl	800574c <SPI_WaitFlagStateUntilTimeout>
 8005906:	4603      	mov	r3, r0
 8005908:	2b00      	cmp	r3, #0
 800590a:	d007      	beq.n	800591c <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005910:	f043 0220 	orr.w	r2, r3, #32
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005918:	2303      	movs	r3, #3
 800591a:	e000      	b.n	800591e <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800591c:	2300      	movs	r3, #0
}
 800591e:	4618      	mov	r0, r3
 8005920:	3710      	adds	r7, #16
 8005922:	46bd      	mov	sp, r7
 8005924:	bd80      	pop	{r7, pc}
	...

08005928 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005928:	b580      	push	{r7, lr}
 800592a:	b088      	sub	sp, #32
 800592c:	af02      	add	r7, sp, #8
 800592e:	60f8      	str	r0, [r7, #12]
 8005930:	60b9      	str	r1, [r7, #8]
 8005932:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005934:	4b1b      	ldr	r3, [pc, #108]	; (80059a4 <SPI_EndRxTxTransaction+0x7c>)
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	4a1b      	ldr	r2, [pc, #108]	; (80059a8 <SPI_EndRxTxTransaction+0x80>)
 800593a:	fba2 2303 	umull	r2, r3, r2, r3
 800593e:	0d5b      	lsrs	r3, r3, #21
 8005940:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005944:	fb02 f303 	mul.w	r3, r2, r3
 8005948:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	685b      	ldr	r3, [r3, #4]
 800594e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005952:	d112      	bne.n	800597a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	9300      	str	r3, [sp, #0]
 8005958:	68bb      	ldr	r3, [r7, #8]
 800595a:	2200      	movs	r2, #0
 800595c:	2180      	movs	r1, #128	; 0x80
 800595e:	68f8      	ldr	r0, [r7, #12]
 8005960:	f7ff fef4 	bl	800574c <SPI_WaitFlagStateUntilTimeout>
 8005964:	4603      	mov	r3, r0
 8005966:	2b00      	cmp	r3, #0
 8005968:	d016      	beq.n	8005998 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800596e:	f043 0220 	orr.w	r2, r3, #32
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005976:	2303      	movs	r3, #3
 8005978:	e00f      	b.n	800599a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800597a:	697b      	ldr	r3, [r7, #20]
 800597c:	2b00      	cmp	r3, #0
 800597e:	d00a      	beq.n	8005996 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8005980:	697b      	ldr	r3, [r7, #20]
 8005982:	3b01      	subs	r3, #1
 8005984:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	689b      	ldr	r3, [r3, #8]
 800598c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005990:	2b80      	cmp	r3, #128	; 0x80
 8005992:	d0f2      	beq.n	800597a <SPI_EndRxTxTransaction+0x52>
 8005994:	e000      	b.n	8005998 <SPI_EndRxTxTransaction+0x70>
        break;
 8005996:	bf00      	nop
  }

  return HAL_OK;
 8005998:	2300      	movs	r3, #0
}
 800599a:	4618      	mov	r0, r3
 800599c:	3718      	adds	r7, #24
 800599e:	46bd      	mov	sp, r7
 80059a0:	bd80      	pop	{r7, pc}
 80059a2:	bf00      	nop
 80059a4:	20000004 	.word	0x20000004
 80059a8:	165e9f81 	.word	0x165e9f81

080059ac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80059ac:	b580      	push	{r7, lr}
 80059ae:	b082      	sub	sp, #8
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d101      	bne.n	80059be <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80059ba:	2301      	movs	r3, #1
 80059bc:	e041      	b.n	8005a42 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059c4:	b2db      	uxtb	r3, r3
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d106      	bne.n	80059d8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	2200      	movs	r2, #0
 80059ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80059d2:	6878      	ldr	r0, [r7, #4]
 80059d4:	f7fb fee6 	bl	80017a4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	2202      	movs	r2, #2
 80059dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681a      	ldr	r2, [r3, #0]
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	3304      	adds	r3, #4
 80059e8:	4619      	mov	r1, r3
 80059ea:	4610      	mov	r0, r2
 80059ec:	f000 fcf0 	bl	80063d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	2201      	movs	r2, #1
 80059f4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	2201      	movs	r2, #1
 80059fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	2201      	movs	r2, #1
 8005a04:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	2201      	movs	r2, #1
 8005a0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	2201      	movs	r2, #1
 8005a14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	2201      	movs	r2, #1
 8005a1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	2201      	movs	r2, #1
 8005a24:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	2201      	movs	r2, #1
 8005a2c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	2201      	movs	r2, #1
 8005a34:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	2201      	movs	r2, #1
 8005a3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005a40:	2300      	movs	r3, #0
}
 8005a42:	4618      	mov	r0, r3
 8005a44:	3708      	adds	r7, #8
 8005a46:	46bd      	mov	sp, r7
 8005a48:	bd80      	pop	{r7, pc}

08005a4a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005a4a:	b580      	push	{r7, lr}
 8005a4c:	b082      	sub	sp, #8
 8005a4e:	af00      	add	r7, sp, #0
 8005a50:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d101      	bne.n	8005a5c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005a58:	2301      	movs	r3, #1
 8005a5a:	e041      	b.n	8005ae0 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a62:	b2db      	uxtb	r3, r3
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d106      	bne.n	8005a76 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	2200      	movs	r2, #0
 8005a6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005a70:	6878      	ldr	r0, [r7, #4]
 8005a72:	f000 f839 	bl	8005ae8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	2202      	movs	r2, #2
 8005a7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681a      	ldr	r2, [r3, #0]
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	3304      	adds	r3, #4
 8005a86:	4619      	mov	r1, r3
 8005a88:	4610      	mov	r0, r2
 8005a8a:	f000 fca1 	bl	80063d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	2201      	movs	r2, #1
 8005a92:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	2201      	movs	r2, #1
 8005a9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	2201      	movs	r2, #1
 8005aa2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	2201      	movs	r2, #1
 8005aaa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	2201      	movs	r2, #1
 8005ab2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	2201      	movs	r2, #1
 8005aba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	2201      	movs	r2, #1
 8005ac2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	2201      	movs	r2, #1
 8005aca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	2201      	movs	r2, #1
 8005ad2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	2201      	movs	r2, #1
 8005ada:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005ade:	2300      	movs	r3, #0
}
 8005ae0:	4618      	mov	r0, r3
 8005ae2:	3708      	adds	r7, #8
 8005ae4:	46bd      	mov	sp, r7
 8005ae6:	bd80      	pop	{r7, pc}

08005ae8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005ae8:	b480      	push	{r7}
 8005aea:	b083      	sub	sp, #12
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005af0:	bf00      	nop
 8005af2:	370c      	adds	r7, #12
 8005af4:	46bd      	mov	sp, r7
 8005af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afa:	4770      	bx	lr

08005afc <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005afc:	b580      	push	{r7, lr}
 8005afe:	b084      	sub	sp, #16
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	6078      	str	r0, [r7, #4]
 8005b04:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005b06:	2300      	movs	r3, #0
 8005b08:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005b0a:	683b      	ldr	r3, [r7, #0]
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d109      	bne.n	8005b24 <HAL_TIM_PWM_Start_IT+0x28>
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005b16:	b2db      	uxtb	r3, r3
 8005b18:	2b01      	cmp	r3, #1
 8005b1a:	bf14      	ite	ne
 8005b1c:	2301      	movne	r3, #1
 8005b1e:	2300      	moveq	r3, #0
 8005b20:	b2db      	uxtb	r3, r3
 8005b22:	e022      	b.n	8005b6a <HAL_TIM_PWM_Start_IT+0x6e>
 8005b24:	683b      	ldr	r3, [r7, #0]
 8005b26:	2b04      	cmp	r3, #4
 8005b28:	d109      	bne.n	8005b3e <HAL_TIM_PWM_Start_IT+0x42>
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005b30:	b2db      	uxtb	r3, r3
 8005b32:	2b01      	cmp	r3, #1
 8005b34:	bf14      	ite	ne
 8005b36:	2301      	movne	r3, #1
 8005b38:	2300      	moveq	r3, #0
 8005b3a:	b2db      	uxtb	r3, r3
 8005b3c:	e015      	b.n	8005b6a <HAL_TIM_PWM_Start_IT+0x6e>
 8005b3e:	683b      	ldr	r3, [r7, #0]
 8005b40:	2b08      	cmp	r3, #8
 8005b42:	d109      	bne.n	8005b58 <HAL_TIM_PWM_Start_IT+0x5c>
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005b4a:	b2db      	uxtb	r3, r3
 8005b4c:	2b01      	cmp	r3, #1
 8005b4e:	bf14      	ite	ne
 8005b50:	2301      	movne	r3, #1
 8005b52:	2300      	moveq	r3, #0
 8005b54:	b2db      	uxtb	r3, r3
 8005b56:	e008      	b.n	8005b6a <HAL_TIM_PWM_Start_IT+0x6e>
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005b5e:	b2db      	uxtb	r3, r3
 8005b60:	2b01      	cmp	r3, #1
 8005b62:	bf14      	ite	ne
 8005b64:	2301      	movne	r3, #1
 8005b66:	2300      	moveq	r3, #0
 8005b68:	b2db      	uxtb	r3, r3
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d001      	beq.n	8005b72 <HAL_TIM_PWM_Start_IT+0x76>
  {
    return HAL_ERROR;
 8005b6e:	2301      	movs	r3, #1
 8005b70:	e0b3      	b.n	8005cda <HAL_TIM_PWM_Start_IT+0x1de>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005b72:	683b      	ldr	r3, [r7, #0]
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d104      	bne.n	8005b82 <HAL_TIM_PWM_Start_IT+0x86>
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	2202      	movs	r2, #2
 8005b7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005b80:	e013      	b.n	8005baa <HAL_TIM_PWM_Start_IT+0xae>
 8005b82:	683b      	ldr	r3, [r7, #0]
 8005b84:	2b04      	cmp	r3, #4
 8005b86:	d104      	bne.n	8005b92 <HAL_TIM_PWM_Start_IT+0x96>
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	2202      	movs	r2, #2
 8005b8c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005b90:	e00b      	b.n	8005baa <HAL_TIM_PWM_Start_IT+0xae>
 8005b92:	683b      	ldr	r3, [r7, #0]
 8005b94:	2b08      	cmp	r3, #8
 8005b96:	d104      	bne.n	8005ba2 <HAL_TIM_PWM_Start_IT+0xa6>
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	2202      	movs	r2, #2
 8005b9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005ba0:	e003      	b.n	8005baa <HAL_TIM_PWM_Start_IT+0xae>
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	2202      	movs	r2, #2
 8005ba6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  switch (Channel)
 8005baa:	683b      	ldr	r3, [r7, #0]
 8005bac:	2b0c      	cmp	r3, #12
 8005bae:	d841      	bhi.n	8005c34 <HAL_TIM_PWM_Start_IT+0x138>
 8005bb0:	a201      	add	r2, pc, #4	; (adr r2, 8005bb8 <HAL_TIM_PWM_Start_IT+0xbc>)
 8005bb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bb6:	bf00      	nop
 8005bb8:	08005bed 	.word	0x08005bed
 8005bbc:	08005c35 	.word	0x08005c35
 8005bc0:	08005c35 	.word	0x08005c35
 8005bc4:	08005c35 	.word	0x08005c35
 8005bc8:	08005bff 	.word	0x08005bff
 8005bcc:	08005c35 	.word	0x08005c35
 8005bd0:	08005c35 	.word	0x08005c35
 8005bd4:	08005c35 	.word	0x08005c35
 8005bd8:	08005c11 	.word	0x08005c11
 8005bdc:	08005c35 	.word	0x08005c35
 8005be0:	08005c35 	.word	0x08005c35
 8005be4:	08005c35 	.word	0x08005c35
 8005be8:	08005c23 	.word	0x08005c23
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	68da      	ldr	r2, [r3, #12]
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	f042 0202 	orr.w	r2, r2, #2
 8005bfa:	60da      	str	r2, [r3, #12]
      break;
 8005bfc:	e01d      	b.n	8005c3a <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	68da      	ldr	r2, [r3, #12]
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	f042 0204 	orr.w	r2, r2, #4
 8005c0c:	60da      	str	r2, [r3, #12]
      break;
 8005c0e:	e014      	b.n	8005c3a <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	68da      	ldr	r2, [r3, #12]
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	f042 0208 	orr.w	r2, r2, #8
 8005c1e:	60da      	str	r2, [r3, #12]
      break;
 8005c20:	e00b      	b.n	8005c3a <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	68da      	ldr	r2, [r3, #12]
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	f042 0210 	orr.w	r2, r2, #16
 8005c30:	60da      	str	r2, [r3, #12]
      break;
 8005c32:	e002      	b.n	8005c3a <HAL_TIM_PWM_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 8005c34:	2301      	movs	r3, #1
 8005c36:	73fb      	strb	r3, [r7, #15]
      break;
 8005c38:	bf00      	nop
  }

  if (status == HAL_OK)
 8005c3a:	7bfb      	ldrb	r3, [r7, #15]
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d14b      	bne.n	8005cd8 <HAL_TIM_PWM_Start_IT+0x1dc>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	2201      	movs	r2, #1
 8005c46:	6839      	ldr	r1, [r7, #0]
 8005c48:	4618      	mov	r0, r3
 8005c4a:	f000 fe67 	bl	800691c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	4a24      	ldr	r2, [pc, #144]	; (8005ce4 <HAL_TIM_PWM_Start_IT+0x1e8>)
 8005c54:	4293      	cmp	r3, r2
 8005c56:	d107      	bne.n	8005c68 <HAL_TIM_PWM_Start_IT+0x16c>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005c66:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	4a1d      	ldr	r2, [pc, #116]	; (8005ce4 <HAL_TIM_PWM_Start_IT+0x1e8>)
 8005c6e:	4293      	cmp	r3, r2
 8005c70:	d018      	beq.n	8005ca4 <HAL_TIM_PWM_Start_IT+0x1a8>
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c7a:	d013      	beq.n	8005ca4 <HAL_TIM_PWM_Start_IT+0x1a8>
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	4a19      	ldr	r2, [pc, #100]	; (8005ce8 <HAL_TIM_PWM_Start_IT+0x1ec>)
 8005c82:	4293      	cmp	r3, r2
 8005c84:	d00e      	beq.n	8005ca4 <HAL_TIM_PWM_Start_IT+0x1a8>
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	4a18      	ldr	r2, [pc, #96]	; (8005cec <HAL_TIM_PWM_Start_IT+0x1f0>)
 8005c8c:	4293      	cmp	r3, r2
 8005c8e:	d009      	beq.n	8005ca4 <HAL_TIM_PWM_Start_IT+0x1a8>
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	4a16      	ldr	r2, [pc, #88]	; (8005cf0 <HAL_TIM_PWM_Start_IT+0x1f4>)
 8005c96:	4293      	cmp	r3, r2
 8005c98:	d004      	beq.n	8005ca4 <HAL_TIM_PWM_Start_IT+0x1a8>
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	4a15      	ldr	r2, [pc, #84]	; (8005cf4 <HAL_TIM_PWM_Start_IT+0x1f8>)
 8005ca0:	4293      	cmp	r3, r2
 8005ca2:	d111      	bne.n	8005cc8 <HAL_TIM_PWM_Start_IT+0x1cc>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	689b      	ldr	r3, [r3, #8]
 8005caa:	f003 0307 	and.w	r3, r3, #7
 8005cae:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005cb0:	68bb      	ldr	r3, [r7, #8]
 8005cb2:	2b06      	cmp	r3, #6
 8005cb4:	d010      	beq.n	8005cd8 <HAL_TIM_PWM_Start_IT+0x1dc>
      {
        __HAL_TIM_ENABLE(htim);
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	681a      	ldr	r2, [r3, #0]
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	f042 0201 	orr.w	r2, r2, #1
 8005cc4:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005cc6:	e007      	b.n	8005cd8 <HAL_TIM_PWM_Start_IT+0x1dc>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	681a      	ldr	r2, [r3, #0]
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	f042 0201 	orr.w	r2, r2, #1
 8005cd6:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8005cd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cda:	4618      	mov	r0, r3
 8005cdc:	3710      	adds	r7, #16
 8005cde:	46bd      	mov	sp, r7
 8005ce0:	bd80      	pop	{r7, pc}
 8005ce2:	bf00      	nop
 8005ce4:	40010000 	.word	0x40010000
 8005ce8:	40000400 	.word	0x40000400
 8005cec:	40000800 	.word	0x40000800
 8005cf0:	40000c00 	.word	0x40000c00
 8005cf4:	40014000 	.word	0x40014000

08005cf8 <HAL_TIM_PWM_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005cf8:	b580      	push	{r7, lr}
 8005cfa:	b084      	sub	sp, #16
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	6078      	str	r0, [r7, #4]
 8005d00:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005d02:	2300      	movs	r3, #0
 8005d04:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8005d06:	683b      	ldr	r3, [r7, #0]
 8005d08:	2b0c      	cmp	r3, #12
 8005d0a:	d841      	bhi.n	8005d90 <HAL_TIM_PWM_Stop_IT+0x98>
 8005d0c:	a201      	add	r2, pc, #4	; (adr r2, 8005d14 <HAL_TIM_PWM_Stop_IT+0x1c>)
 8005d0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d12:	bf00      	nop
 8005d14:	08005d49 	.word	0x08005d49
 8005d18:	08005d91 	.word	0x08005d91
 8005d1c:	08005d91 	.word	0x08005d91
 8005d20:	08005d91 	.word	0x08005d91
 8005d24:	08005d5b 	.word	0x08005d5b
 8005d28:	08005d91 	.word	0x08005d91
 8005d2c:	08005d91 	.word	0x08005d91
 8005d30:	08005d91 	.word	0x08005d91
 8005d34:	08005d6d 	.word	0x08005d6d
 8005d38:	08005d91 	.word	0x08005d91
 8005d3c:	08005d91 	.word	0x08005d91
 8005d40:	08005d91 	.word	0x08005d91
 8005d44:	08005d7f 	.word	0x08005d7f
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	68da      	ldr	r2, [r3, #12]
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	f022 0202 	bic.w	r2, r2, #2
 8005d56:	60da      	str	r2, [r3, #12]
      break;
 8005d58:	e01d      	b.n	8005d96 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	68da      	ldr	r2, [r3, #12]
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	f022 0204 	bic.w	r2, r2, #4
 8005d68:	60da      	str	r2, [r3, #12]
      break;
 8005d6a:	e014      	b.n	8005d96 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	68da      	ldr	r2, [r3, #12]
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	f022 0208 	bic.w	r2, r2, #8
 8005d7a:	60da      	str	r2, [r3, #12]
      break;
 8005d7c:	e00b      	b.n	8005d96 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	68da      	ldr	r2, [r3, #12]
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	f022 0210 	bic.w	r2, r2, #16
 8005d8c:	60da      	str	r2, [r3, #12]
      break;
 8005d8e:	e002      	b.n	8005d96 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 8005d90:	2301      	movs	r3, #1
 8005d92:	73fb      	strb	r3, [r7, #15]
      break;
 8005d94:	bf00      	nop
  }

  if (status == HAL_OK)
 8005d96:	7bfb      	ldrb	r3, [r7, #15]
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d157      	bne.n	8005e4c <HAL_TIM_PWM_Stop_IT+0x154>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	2200      	movs	r2, #0
 8005da2:	6839      	ldr	r1, [r7, #0]
 8005da4:	4618      	mov	r0, r3
 8005da6:	f000 fdb9 	bl	800691c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	4a2a      	ldr	r2, [pc, #168]	; (8005e58 <HAL_TIM_PWM_Stop_IT+0x160>)
 8005db0:	4293      	cmp	r3, r2
 8005db2:	d117      	bne.n	8005de4 <HAL_TIM_PWM_Stop_IT+0xec>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	6a1a      	ldr	r2, [r3, #32]
 8005dba:	f241 1311 	movw	r3, #4369	; 0x1111
 8005dbe:	4013      	ands	r3, r2
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d10f      	bne.n	8005de4 <HAL_TIM_PWM_Stop_IT+0xec>
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	6a1a      	ldr	r2, [r3, #32]
 8005dca:	f240 4344 	movw	r3, #1092	; 0x444
 8005dce:	4013      	ands	r3, r2
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d107      	bne.n	8005de4 <HAL_TIM_PWM_Stop_IT+0xec>
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005de2:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	6a1a      	ldr	r2, [r3, #32]
 8005dea:	f241 1311 	movw	r3, #4369	; 0x1111
 8005dee:	4013      	ands	r3, r2
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d10f      	bne.n	8005e14 <HAL_TIM_PWM_Stop_IT+0x11c>
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	6a1a      	ldr	r2, [r3, #32]
 8005dfa:	f240 4344 	movw	r3, #1092	; 0x444
 8005dfe:	4013      	ands	r3, r2
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d107      	bne.n	8005e14 <HAL_TIM_PWM_Stop_IT+0x11c>
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	681a      	ldr	r2, [r3, #0]
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	f022 0201 	bic.w	r2, r2, #1
 8005e12:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005e14:	683b      	ldr	r3, [r7, #0]
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d104      	bne.n	8005e24 <HAL_TIM_PWM_Stop_IT+0x12c>
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	2201      	movs	r2, #1
 8005e1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005e22:	e013      	b.n	8005e4c <HAL_TIM_PWM_Stop_IT+0x154>
 8005e24:	683b      	ldr	r3, [r7, #0]
 8005e26:	2b04      	cmp	r3, #4
 8005e28:	d104      	bne.n	8005e34 <HAL_TIM_PWM_Stop_IT+0x13c>
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	2201      	movs	r2, #1
 8005e2e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005e32:	e00b      	b.n	8005e4c <HAL_TIM_PWM_Stop_IT+0x154>
 8005e34:	683b      	ldr	r3, [r7, #0]
 8005e36:	2b08      	cmp	r3, #8
 8005e38:	d104      	bne.n	8005e44 <HAL_TIM_PWM_Stop_IT+0x14c>
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	2201      	movs	r2, #1
 8005e3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005e42:	e003      	b.n	8005e4c <HAL_TIM_PWM_Stop_IT+0x154>
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	2201      	movs	r2, #1
 8005e48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 8005e4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e4e:	4618      	mov	r0, r3
 8005e50:	3710      	adds	r7, #16
 8005e52:	46bd      	mov	sp, r7
 8005e54:	bd80      	pop	{r7, pc}
 8005e56:	bf00      	nop
 8005e58:	40010000 	.word	0x40010000

08005e5c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005e5c:	b580      	push	{r7, lr}
 8005e5e:	b082      	sub	sp, #8
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	691b      	ldr	r3, [r3, #16]
 8005e6a:	f003 0302 	and.w	r3, r3, #2
 8005e6e:	2b02      	cmp	r3, #2
 8005e70:	d122      	bne.n	8005eb8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	68db      	ldr	r3, [r3, #12]
 8005e78:	f003 0302 	and.w	r3, r3, #2
 8005e7c:	2b02      	cmp	r3, #2
 8005e7e:	d11b      	bne.n	8005eb8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	f06f 0202 	mvn.w	r2, #2
 8005e88:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	2201      	movs	r2, #1
 8005e8e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	699b      	ldr	r3, [r3, #24]
 8005e96:	f003 0303 	and.w	r3, r3, #3
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d003      	beq.n	8005ea6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005e9e:	6878      	ldr	r0, [r7, #4]
 8005ea0:	f000 fa81 	bl	80063a6 <HAL_TIM_IC_CaptureCallback>
 8005ea4:	e005      	b.n	8005eb2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ea6:	6878      	ldr	r0, [r7, #4]
 8005ea8:	f000 fa73 	bl	8006392 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005eac:	6878      	ldr	r0, [r7, #4]
 8005eae:	f7fa fee9 	bl	8000c84 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	2200      	movs	r2, #0
 8005eb6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	691b      	ldr	r3, [r3, #16]
 8005ebe:	f003 0304 	and.w	r3, r3, #4
 8005ec2:	2b04      	cmp	r3, #4
 8005ec4:	d122      	bne.n	8005f0c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	68db      	ldr	r3, [r3, #12]
 8005ecc:	f003 0304 	and.w	r3, r3, #4
 8005ed0:	2b04      	cmp	r3, #4
 8005ed2:	d11b      	bne.n	8005f0c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	f06f 0204 	mvn.w	r2, #4
 8005edc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	2202      	movs	r2, #2
 8005ee2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	699b      	ldr	r3, [r3, #24]
 8005eea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d003      	beq.n	8005efa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ef2:	6878      	ldr	r0, [r7, #4]
 8005ef4:	f000 fa57 	bl	80063a6 <HAL_TIM_IC_CaptureCallback>
 8005ef8:	e005      	b.n	8005f06 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005efa:	6878      	ldr	r0, [r7, #4]
 8005efc:	f000 fa49 	bl	8006392 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f00:	6878      	ldr	r0, [r7, #4]
 8005f02:	f7fa febf 	bl	8000c84 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	2200      	movs	r2, #0
 8005f0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	691b      	ldr	r3, [r3, #16]
 8005f12:	f003 0308 	and.w	r3, r3, #8
 8005f16:	2b08      	cmp	r3, #8
 8005f18:	d122      	bne.n	8005f60 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	68db      	ldr	r3, [r3, #12]
 8005f20:	f003 0308 	and.w	r3, r3, #8
 8005f24:	2b08      	cmp	r3, #8
 8005f26:	d11b      	bne.n	8005f60 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	f06f 0208 	mvn.w	r2, #8
 8005f30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	2204      	movs	r2, #4
 8005f36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	69db      	ldr	r3, [r3, #28]
 8005f3e:	f003 0303 	and.w	r3, r3, #3
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d003      	beq.n	8005f4e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f46:	6878      	ldr	r0, [r7, #4]
 8005f48:	f000 fa2d 	bl	80063a6 <HAL_TIM_IC_CaptureCallback>
 8005f4c:	e005      	b.n	8005f5a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f4e:	6878      	ldr	r0, [r7, #4]
 8005f50:	f000 fa1f 	bl	8006392 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f54:	6878      	ldr	r0, [r7, #4]
 8005f56:	f7fa fe95 	bl	8000c84 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	2200      	movs	r2, #0
 8005f5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	691b      	ldr	r3, [r3, #16]
 8005f66:	f003 0310 	and.w	r3, r3, #16
 8005f6a:	2b10      	cmp	r3, #16
 8005f6c:	d122      	bne.n	8005fb4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	68db      	ldr	r3, [r3, #12]
 8005f74:	f003 0310 	and.w	r3, r3, #16
 8005f78:	2b10      	cmp	r3, #16
 8005f7a:	d11b      	bne.n	8005fb4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	f06f 0210 	mvn.w	r2, #16
 8005f84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	2208      	movs	r2, #8
 8005f8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	69db      	ldr	r3, [r3, #28]
 8005f92:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d003      	beq.n	8005fa2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f9a:	6878      	ldr	r0, [r7, #4]
 8005f9c:	f000 fa03 	bl	80063a6 <HAL_TIM_IC_CaptureCallback>
 8005fa0:	e005      	b.n	8005fae <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005fa2:	6878      	ldr	r0, [r7, #4]
 8005fa4:	f000 f9f5 	bl	8006392 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005fa8:	6878      	ldr	r0, [r7, #4]
 8005faa:	f7fa fe6b 	bl	8000c84 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	2200      	movs	r2, #0
 8005fb2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	691b      	ldr	r3, [r3, #16]
 8005fba:	f003 0301 	and.w	r3, r3, #1
 8005fbe:	2b01      	cmp	r3, #1
 8005fc0:	d10e      	bne.n	8005fe0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	68db      	ldr	r3, [r3, #12]
 8005fc8:	f003 0301 	and.w	r3, r3, #1
 8005fcc:	2b01      	cmp	r3, #1
 8005fce:	d107      	bne.n	8005fe0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	f06f 0201 	mvn.w	r2, #1
 8005fd8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005fda:	6878      	ldr	r0, [r7, #4]
 8005fdc:	f000 f9cf 	bl	800637e <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	691b      	ldr	r3, [r3, #16]
 8005fe6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005fea:	2b80      	cmp	r3, #128	; 0x80
 8005fec:	d10e      	bne.n	800600c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	68db      	ldr	r3, [r3, #12]
 8005ff4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ff8:	2b80      	cmp	r3, #128	; 0x80
 8005ffa:	d107      	bne.n	800600c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006004:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006006:	6878      	ldr	r0, [r7, #4]
 8006008:	f000 fd78 	bl	8006afc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	691b      	ldr	r3, [r3, #16]
 8006012:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006016:	2b40      	cmp	r3, #64	; 0x40
 8006018:	d10e      	bne.n	8006038 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	68db      	ldr	r3, [r3, #12]
 8006020:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006024:	2b40      	cmp	r3, #64	; 0x40
 8006026:	d107      	bne.n	8006038 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006030:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006032:	6878      	ldr	r0, [r7, #4]
 8006034:	f000 f9c1 	bl	80063ba <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	691b      	ldr	r3, [r3, #16]
 800603e:	f003 0320 	and.w	r3, r3, #32
 8006042:	2b20      	cmp	r3, #32
 8006044:	d10e      	bne.n	8006064 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	68db      	ldr	r3, [r3, #12]
 800604c:	f003 0320 	and.w	r3, r3, #32
 8006050:	2b20      	cmp	r3, #32
 8006052:	d107      	bne.n	8006064 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	f06f 0220 	mvn.w	r2, #32
 800605c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800605e:	6878      	ldr	r0, [r7, #4]
 8006060:	f000 fd42 	bl	8006ae8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006064:	bf00      	nop
 8006066:	3708      	adds	r7, #8
 8006068:	46bd      	mov	sp, r7
 800606a:	bd80      	pop	{r7, pc}

0800606c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800606c:	b580      	push	{r7, lr}
 800606e:	b086      	sub	sp, #24
 8006070:	af00      	add	r7, sp, #0
 8006072:	60f8      	str	r0, [r7, #12]
 8006074:	60b9      	str	r1, [r7, #8]
 8006076:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006078:	2300      	movs	r3, #0
 800607a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006082:	2b01      	cmp	r3, #1
 8006084:	d101      	bne.n	800608a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006086:	2302      	movs	r3, #2
 8006088:	e0ae      	b.n	80061e8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	2201      	movs	r2, #1
 800608e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	2b0c      	cmp	r3, #12
 8006096:	f200 809f 	bhi.w	80061d8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800609a:	a201      	add	r2, pc, #4	; (adr r2, 80060a0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800609c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060a0:	080060d5 	.word	0x080060d5
 80060a4:	080061d9 	.word	0x080061d9
 80060a8:	080061d9 	.word	0x080061d9
 80060ac:	080061d9 	.word	0x080061d9
 80060b0:	08006115 	.word	0x08006115
 80060b4:	080061d9 	.word	0x080061d9
 80060b8:	080061d9 	.word	0x080061d9
 80060bc:	080061d9 	.word	0x080061d9
 80060c0:	08006157 	.word	0x08006157
 80060c4:	080061d9 	.word	0x080061d9
 80060c8:	080061d9 	.word	0x080061d9
 80060cc:	080061d9 	.word	0x080061d9
 80060d0:	08006197 	.word	0x08006197
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	68b9      	ldr	r1, [r7, #8]
 80060da:	4618      	mov	r0, r3
 80060dc:	f000 f9f8 	bl	80064d0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	699a      	ldr	r2, [r3, #24]
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	f042 0208 	orr.w	r2, r2, #8
 80060ee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	699a      	ldr	r2, [r3, #24]
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	f022 0204 	bic.w	r2, r2, #4
 80060fe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	6999      	ldr	r1, [r3, #24]
 8006106:	68bb      	ldr	r3, [r7, #8]
 8006108:	691a      	ldr	r2, [r3, #16]
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	430a      	orrs	r2, r1
 8006110:	619a      	str	r2, [r3, #24]
      break;
 8006112:	e064      	b.n	80061de <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	68b9      	ldr	r1, [r7, #8]
 800611a:	4618      	mov	r0, r3
 800611c:	f000 fa3e 	bl	800659c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	699a      	ldr	r2, [r3, #24]
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800612e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	699a      	ldr	r2, [r3, #24]
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800613e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	6999      	ldr	r1, [r3, #24]
 8006146:	68bb      	ldr	r3, [r7, #8]
 8006148:	691b      	ldr	r3, [r3, #16]
 800614a:	021a      	lsls	r2, r3, #8
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	430a      	orrs	r2, r1
 8006152:	619a      	str	r2, [r3, #24]
      break;
 8006154:	e043      	b.n	80061de <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	68b9      	ldr	r1, [r7, #8]
 800615c:	4618      	mov	r0, r3
 800615e:	f000 fa89 	bl	8006674 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	69da      	ldr	r2, [r3, #28]
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	f042 0208 	orr.w	r2, r2, #8
 8006170:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	69da      	ldr	r2, [r3, #28]
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	f022 0204 	bic.w	r2, r2, #4
 8006180:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	69d9      	ldr	r1, [r3, #28]
 8006188:	68bb      	ldr	r3, [r7, #8]
 800618a:	691a      	ldr	r2, [r3, #16]
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	430a      	orrs	r2, r1
 8006192:	61da      	str	r2, [r3, #28]
      break;
 8006194:	e023      	b.n	80061de <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	68b9      	ldr	r1, [r7, #8]
 800619c:	4618      	mov	r0, r3
 800619e:	f000 fad3 	bl	8006748 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	69da      	ldr	r2, [r3, #28]
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80061b0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	69da      	ldr	r2, [r3, #28]
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80061c0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	69d9      	ldr	r1, [r3, #28]
 80061c8:	68bb      	ldr	r3, [r7, #8]
 80061ca:	691b      	ldr	r3, [r3, #16]
 80061cc:	021a      	lsls	r2, r3, #8
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	430a      	orrs	r2, r1
 80061d4:	61da      	str	r2, [r3, #28]
      break;
 80061d6:	e002      	b.n	80061de <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80061d8:	2301      	movs	r3, #1
 80061da:	75fb      	strb	r3, [r7, #23]
      break;
 80061dc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	2200      	movs	r2, #0
 80061e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80061e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80061e8:	4618      	mov	r0, r3
 80061ea:	3718      	adds	r7, #24
 80061ec:	46bd      	mov	sp, r7
 80061ee:	bd80      	pop	{r7, pc}

080061f0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80061f0:	b580      	push	{r7, lr}
 80061f2:	b084      	sub	sp, #16
 80061f4:	af00      	add	r7, sp, #0
 80061f6:	6078      	str	r0, [r7, #4]
 80061f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80061fa:	2300      	movs	r3, #0
 80061fc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006204:	2b01      	cmp	r3, #1
 8006206:	d101      	bne.n	800620c <HAL_TIM_ConfigClockSource+0x1c>
 8006208:	2302      	movs	r3, #2
 800620a:	e0b4      	b.n	8006376 <HAL_TIM_ConfigClockSource+0x186>
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	2201      	movs	r2, #1
 8006210:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	2202      	movs	r2, #2
 8006218:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	689b      	ldr	r3, [r3, #8]
 8006222:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006224:	68bb      	ldr	r3, [r7, #8]
 8006226:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800622a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800622c:	68bb      	ldr	r3, [r7, #8]
 800622e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006232:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	68ba      	ldr	r2, [r7, #8]
 800623a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800623c:	683b      	ldr	r3, [r7, #0]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006244:	d03e      	beq.n	80062c4 <HAL_TIM_ConfigClockSource+0xd4>
 8006246:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800624a:	f200 8087 	bhi.w	800635c <HAL_TIM_ConfigClockSource+0x16c>
 800624e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006252:	f000 8086 	beq.w	8006362 <HAL_TIM_ConfigClockSource+0x172>
 8006256:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800625a:	d87f      	bhi.n	800635c <HAL_TIM_ConfigClockSource+0x16c>
 800625c:	2b70      	cmp	r3, #112	; 0x70
 800625e:	d01a      	beq.n	8006296 <HAL_TIM_ConfigClockSource+0xa6>
 8006260:	2b70      	cmp	r3, #112	; 0x70
 8006262:	d87b      	bhi.n	800635c <HAL_TIM_ConfigClockSource+0x16c>
 8006264:	2b60      	cmp	r3, #96	; 0x60
 8006266:	d050      	beq.n	800630a <HAL_TIM_ConfigClockSource+0x11a>
 8006268:	2b60      	cmp	r3, #96	; 0x60
 800626a:	d877      	bhi.n	800635c <HAL_TIM_ConfigClockSource+0x16c>
 800626c:	2b50      	cmp	r3, #80	; 0x50
 800626e:	d03c      	beq.n	80062ea <HAL_TIM_ConfigClockSource+0xfa>
 8006270:	2b50      	cmp	r3, #80	; 0x50
 8006272:	d873      	bhi.n	800635c <HAL_TIM_ConfigClockSource+0x16c>
 8006274:	2b40      	cmp	r3, #64	; 0x40
 8006276:	d058      	beq.n	800632a <HAL_TIM_ConfigClockSource+0x13a>
 8006278:	2b40      	cmp	r3, #64	; 0x40
 800627a:	d86f      	bhi.n	800635c <HAL_TIM_ConfigClockSource+0x16c>
 800627c:	2b30      	cmp	r3, #48	; 0x30
 800627e:	d064      	beq.n	800634a <HAL_TIM_ConfigClockSource+0x15a>
 8006280:	2b30      	cmp	r3, #48	; 0x30
 8006282:	d86b      	bhi.n	800635c <HAL_TIM_ConfigClockSource+0x16c>
 8006284:	2b20      	cmp	r3, #32
 8006286:	d060      	beq.n	800634a <HAL_TIM_ConfigClockSource+0x15a>
 8006288:	2b20      	cmp	r3, #32
 800628a:	d867      	bhi.n	800635c <HAL_TIM_ConfigClockSource+0x16c>
 800628c:	2b00      	cmp	r3, #0
 800628e:	d05c      	beq.n	800634a <HAL_TIM_ConfigClockSource+0x15a>
 8006290:	2b10      	cmp	r3, #16
 8006292:	d05a      	beq.n	800634a <HAL_TIM_ConfigClockSource+0x15a>
 8006294:	e062      	b.n	800635c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	6818      	ldr	r0, [r3, #0]
 800629a:	683b      	ldr	r3, [r7, #0]
 800629c:	6899      	ldr	r1, [r3, #8]
 800629e:	683b      	ldr	r3, [r7, #0]
 80062a0:	685a      	ldr	r2, [r3, #4]
 80062a2:	683b      	ldr	r3, [r7, #0]
 80062a4:	68db      	ldr	r3, [r3, #12]
 80062a6:	f000 fb19 	bl	80068dc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	689b      	ldr	r3, [r3, #8]
 80062b0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80062b2:	68bb      	ldr	r3, [r7, #8]
 80062b4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80062b8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	68ba      	ldr	r2, [r7, #8]
 80062c0:	609a      	str	r2, [r3, #8]
      break;
 80062c2:	e04f      	b.n	8006364 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	6818      	ldr	r0, [r3, #0]
 80062c8:	683b      	ldr	r3, [r7, #0]
 80062ca:	6899      	ldr	r1, [r3, #8]
 80062cc:	683b      	ldr	r3, [r7, #0]
 80062ce:	685a      	ldr	r2, [r3, #4]
 80062d0:	683b      	ldr	r3, [r7, #0]
 80062d2:	68db      	ldr	r3, [r3, #12]
 80062d4:	f000 fb02 	bl	80068dc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	689a      	ldr	r2, [r3, #8]
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80062e6:	609a      	str	r2, [r3, #8]
      break;
 80062e8:	e03c      	b.n	8006364 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	6818      	ldr	r0, [r3, #0]
 80062ee:	683b      	ldr	r3, [r7, #0]
 80062f0:	6859      	ldr	r1, [r3, #4]
 80062f2:	683b      	ldr	r3, [r7, #0]
 80062f4:	68db      	ldr	r3, [r3, #12]
 80062f6:	461a      	mov	r2, r3
 80062f8:	f000 fa76 	bl	80067e8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	2150      	movs	r1, #80	; 0x50
 8006302:	4618      	mov	r0, r3
 8006304:	f000 facf 	bl	80068a6 <TIM_ITRx_SetConfig>
      break;
 8006308:	e02c      	b.n	8006364 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	6818      	ldr	r0, [r3, #0]
 800630e:	683b      	ldr	r3, [r7, #0]
 8006310:	6859      	ldr	r1, [r3, #4]
 8006312:	683b      	ldr	r3, [r7, #0]
 8006314:	68db      	ldr	r3, [r3, #12]
 8006316:	461a      	mov	r2, r3
 8006318:	f000 fa95 	bl	8006846 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	2160      	movs	r1, #96	; 0x60
 8006322:	4618      	mov	r0, r3
 8006324:	f000 fabf 	bl	80068a6 <TIM_ITRx_SetConfig>
      break;
 8006328:	e01c      	b.n	8006364 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	6818      	ldr	r0, [r3, #0]
 800632e:	683b      	ldr	r3, [r7, #0]
 8006330:	6859      	ldr	r1, [r3, #4]
 8006332:	683b      	ldr	r3, [r7, #0]
 8006334:	68db      	ldr	r3, [r3, #12]
 8006336:	461a      	mov	r2, r3
 8006338:	f000 fa56 	bl	80067e8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	2140      	movs	r1, #64	; 0x40
 8006342:	4618      	mov	r0, r3
 8006344:	f000 faaf 	bl	80068a6 <TIM_ITRx_SetConfig>
      break;
 8006348:	e00c      	b.n	8006364 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681a      	ldr	r2, [r3, #0]
 800634e:	683b      	ldr	r3, [r7, #0]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	4619      	mov	r1, r3
 8006354:	4610      	mov	r0, r2
 8006356:	f000 faa6 	bl	80068a6 <TIM_ITRx_SetConfig>
      break;
 800635a:	e003      	b.n	8006364 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800635c:	2301      	movs	r3, #1
 800635e:	73fb      	strb	r3, [r7, #15]
      break;
 8006360:	e000      	b.n	8006364 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006362:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	2201      	movs	r2, #1
 8006368:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	2200      	movs	r2, #0
 8006370:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006374:	7bfb      	ldrb	r3, [r7, #15]
}
 8006376:	4618      	mov	r0, r3
 8006378:	3710      	adds	r7, #16
 800637a:	46bd      	mov	sp, r7
 800637c:	bd80      	pop	{r7, pc}

0800637e <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800637e:	b480      	push	{r7}
 8006380:	b083      	sub	sp, #12
 8006382:	af00      	add	r7, sp, #0
 8006384:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006386:	bf00      	nop
 8006388:	370c      	adds	r7, #12
 800638a:	46bd      	mov	sp, r7
 800638c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006390:	4770      	bx	lr

08006392 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006392:	b480      	push	{r7}
 8006394:	b083      	sub	sp, #12
 8006396:	af00      	add	r7, sp, #0
 8006398:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800639a:	bf00      	nop
 800639c:	370c      	adds	r7, #12
 800639e:	46bd      	mov	sp, r7
 80063a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a4:	4770      	bx	lr

080063a6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80063a6:	b480      	push	{r7}
 80063a8:	b083      	sub	sp, #12
 80063aa:	af00      	add	r7, sp, #0
 80063ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80063ae:	bf00      	nop
 80063b0:	370c      	adds	r7, #12
 80063b2:	46bd      	mov	sp, r7
 80063b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b8:	4770      	bx	lr

080063ba <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80063ba:	b480      	push	{r7}
 80063bc:	b083      	sub	sp, #12
 80063be:	af00      	add	r7, sp, #0
 80063c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80063c2:	bf00      	nop
 80063c4:	370c      	adds	r7, #12
 80063c6:	46bd      	mov	sp, r7
 80063c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063cc:	4770      	bx	lr
	...

080063d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80063d0:	b480      	push	{r7}
 80063d2:	b085      	sub	sp, #20
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	6078      	str	r0, [r7, #4]
 80063d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	4a34      	ldr	r2, [pc, #208]	; (80064b4 <TIM_Base_SetConfig+0xe4>)
 80063e4:	4293      	cmp	r3, r2
 80063e6:	d00f      	beq.n	8006408 <TIM_Base_SetConfig+0x38>
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80063ee:	d00b      	beq.n	8006408 <TIM_Base_SetConfig+0x38>
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	4a31      	ldr	r2, [pc, #196]	; (80064b8 <TIM_Base_SetConfig+0xe8>)
 80063f4:	4293      	cmp	r3, r2
 80063f6:	d007      	beq.n	8006408 <TIM_Base_SetConfig+0x38>
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	4a30      	ldr	r2, [pc, #192]	; (80064bc <TIM_Base_SetConfig+0xec>)
 80063fc:	4293      	cmp	r3, r2
 80063fe:	d003      	beq.n	8006408 <TIM_Base_SetConfig+0x38>
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	4a2f      	ldr	r2, [pc, #188]	; (80064c0 <TIM_Base_SetConfig+0xf0>)
 8006404:	4293      	cmp	r3, r2
 8006406:	d108      	bne.n	800641a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800640e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006410:	683b      	ldr	r3, [r7, #0]
 8006412:	685b      	ldr	r3, [r3, #4]
 8006414:	68fa      	ldr	r2, [r7, #12]
 8006416:	4313      	orrs	r3, r2
 8006418:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	4a25      	ldr	r2, [pc, #148]	; (80064b4 <TIM_Base_SetConfig+0xe4>)
 800641e:	4293      	cmp	r3, r2
 8006420:	d01b      	beq.n	800645a <TIM_Base_SetConfig+0x8a>
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006428:	d017      	beq.n	800645a <TIM_Base_SetConfig+0x8a>
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	4a22      	ldr	r2, [pc, #136]	; (80064b8 <TIM_Base_SetConfig+0xe8>)
 800642e:	4293      	cmp	r3, r2
 8006430:	d013      	beq.n	800645a <TIM_Base_SetConfig+0x8a>
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	4a21      	ldr	r2, [pc, #132]	; (80064bc <TIM_Base_SetConfig+0xec>)
 8006436:	4293      	cmp	r3, r2
 8006438:	d00f      	beq.n	800645a <TIM_Base_SetConfig+0x8a>
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	4a20      	ldr	r2, [pc, #128]	; (80064c0 <TIM_Base_SetConfig+0xf0>)
 800643e:	4293      	cmp	r3, r2
 8006440:	d00b      	beq.n	800645a <TIM_Base_SetConfig+0x8a>
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	4a1f      	ldr	r2, [pc, #124]	; (80064c4 <TIM_Base_SetConfig+0xf4>)
 8006446:	4293      	cmp	r3, r2
 8006448:	d007      	beq.n	800645a <TIM_Base_SetConfig+0x8a>
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	4a1e      	ldr	r2, [pc, #120]	; (80064c8 <TIM_Base_SetConfig+0xf8>)
 800644e:	4293      	cmp	r3, r2
 8006450:	d003      	beq.n	800645a <TIM_Base_SetConfig+0x8a>
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	4a1d      	ldr	r2, [pc, #116]	; (80064cc <TIM_Base_SetConfig+0xfc>)
 8006456:	4293      	cmp	r3, r2
 8006458:	d108      	bne.n	800646c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006460:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006462:	683b      	ldr	r3, [r7, #0]
 8006464:	68db      	ldr	r3, [r3, #12]
 8006466:	68fa      	ldr	r2, [r7, #12]
 8006468:	4313      	orrs	r3, r2
 800646a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006472:	683b      	ldr	r3, [r7, #0]
 8006474:	695b      	ldr	r3, [r3, #20]
 8006476:	4313      	orrs	r3, r2
 8006478:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	68fa      	ldr	r2, [r7, #12]
 800647e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006480:	683b      	ldr	r3, [r7, #0]
 8006482:	689a      	ldr	r2, [r3, #8]
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006488:	683b      	ldr	r3, [r7, #0]
 800648a:	681a      	ldr	r2, [r3, #0]
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	4a08      	ldr	r2, [pc, #32]	; (80064b4 <TIM_Base_SetConfig+0xe4>)
 8006494:	4293      	cmp	r3, r2
 8006496:	d103      	bne.n	80064a0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006498:	683b      	ldr	r3, [r7, #0]
 800649a:	691a      	ldr	r2, [r3, #16]
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	2201      	movs	r2, #1
 80064a4:	615a      	str	r2, [r3, #20]
}
 80064a6:	bf00      	nop
 80064a8:	3714      	adds	r7, #20
 80064aa:	46bd      	mov	sp, r7
 80064ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b0:	4770      	bx	lr
 80064b2:	bf00      	nop
 80064b4:	40010000 	.word	0x40010000
 80064b8:	40000400 	.word	0x40000400
 80064bc:	40000800 	.word	0x40000800
 80064c0:	40000c00 	.word	0x40000c00
 80064c4:	40014000 	.word	0x40014000
 80064c8:	40014400 	.word	0x40014400
 80064cc:	40014800 	.word	0x40014800

080064d0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80064d0:	b480      	push	{r7}
 80064d2:	b087      	sub	sp, #28
 80064d4:	af00      	add	r7, sp, #0
 80064d6:	6078      	str	r0, [r7, #4]
 80064d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	6a1b      	ldr	r3, [r3, #32]
 80064de:	f023 0201 	bic.w	r2, r3, #1
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	6a1b      	ldr	r3, [r3, #32]
 80064ea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	685b      	ldr	r3, [r3, #4]
 80064f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	699b      	ldr	r3, [r3, #24]
 80064f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	f023 0303 	bic.w	r3, r3, #3
 8006506:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006508:	683b      	ldr	r3, [r7, #0]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	68fa      	ldr	r2, [r7, #12]
 800650e:	4313      	orrs	r3, r2
 8006510:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006512:	697b      	ldr	r3, [r7, #20]
 8006514:	f023 0302 	bic.w	r3, r3, #2
 8006518:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800651a:	683b      	ldr	r3, [r7, #0]
 800651c:	689b      	ldr	r3, [r3, #8]
 800651e:	697a      	ldr	r2, [r7, #20]
 8006520:	4313      	orrs	r3, r2
 8006522:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	4a1c      	ldr	r2, [pc, #112]	; (8006598 <TIM_OC1_SetConfig+0xc8>)
 8006528:	4293      	cmp	r3, r2
 800652a:	d10c      	bne.n	8006546 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800652c:	697b      	ldr	r3, [r7, #20]
 800652e:	f023 0308 	bic.w	r3, r3, #8
 8006532:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006534:	683b      	ldr	r3, [r7, #0]
 8006536:	68db      	ldr	r3, [r3, #12]
 8006538:	697a      	ldr	r2, [r7, #20]
 800653a:	4313      	orrs	r3, r2
 800653c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800653e:	697b      	ldr	r3, [r7, #20]
 8006540:	f023 0304 	bic.w	r3, r3, #4
 8006544:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	4a13      	ldr	r2, [pc, #76]	; (8006598 <TIM_OC1_SetConfig+0xc8>)
 800654a:	4293      	cmp	r3, r2
 800654c:	d111      	bne.n	8006572 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800654e:	693b      	ldr	r3, [r7, #16]
 8006550:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006554:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006556:	693b      	ldr	r3, [r7, #16]
 8006558:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800655c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800655e:	683b      	ldr	r3, [r7, #0]
 8006560:	695b      	ldr	r3, [r3, #20]
 8006562:	693a      	ldr	r2, [r7, #16]
 8006564:	4313      	orrs	r3, r2
 8006566:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006568:	683b      	ldr	r3, [r7, #0]
 800656a:	699b      	ldr	r3, [r3, #24]
 800656c:	693a      	ldr	r2, [r7, #16]
 800656e:	4313      	orrs	r3, r2
 8006570:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	693a      	ldr	r2, [r7, #16]
 8006576:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	68fa      	ldr	r2, [r7, #12]
 800657c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800657e:	683b      	ldr	r3, [r7, #0]
 8006580:	685a      	ldr	r2, [r3, #4]
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	697a      	ldr	r2, [r7, #20]
 800658a:	621a      	str	r2, [r3, #32]
}
 800658c:	bf00      	nop
 800658e:	371c      	adds	r7, #28
 8006590:	46bd      	mov	sp, r7
 8006592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006596:	4770      	bx	lr
 8006598:	40010000 	.word	0x40010000

0800659c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800659c:	b480      	push	{r7}
 800659e:	b087      	sub	sp, #28
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	6078      	str	r0, [r7, #4]
 80065a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	6a1b      	ldr	r3, [r3, #32]
 80065aa:	f023 0210 	bic.w	r2, r3, #16
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	6a1b      	ldr	r3, [r3, #32]
 80065b6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	685b      	ldr	r3, [r3, #4]
 80065bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	699b      	ldr	r3, [r3, #24]
 80065c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80065ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80065d2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80065d4:	683b      	ldr	r3, [r7, #0]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	021b      	lsls	r3, r3, #8
 80065da:	68fa      	ldr	r2, [r7, #12]
 80065dc:	4313      	orrs	r3, r2
 80065de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80065e0:	697b      	ldr	r3, [r7, #20]
 80065e2:	f023 0320 	bic.w	r3, r3, #32
 80065e6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80065e8:	683b      	ldr	r3, [r7, #0]
 80065ea:	689b      	ldr	r3, [r3, #8]
 80065ec:	011b      	lsls	r3, r3, #4
 80065ee:	697a      	ldr	r2, [r7, #20]
 80065f0:	4313      	orrs	r3, r2
 80065f2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	4a1e      	ldr	r2, [pc, #120]	; (8006670 <TIM_OC2_SetConfig+0xd4>)
 80065f8:	4293      	cmp	r3, r2
 80065fa:	d10d      	bne.n	8006618 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80065fc:	697b      	ldr	r3, [r7, #20]
 80065fe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006602:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006604:	683b      	ldr	r3, [r7, #0]
 8006606:	68db      	ldr	r3, [r3, #12]
 8006608:	011b      	lsls	r3, r3, #4
 800660a:	697a      	ldr	r2, [r7, #20]
 800660c:	4313      	orrs	r3, r2
 800660e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006610:	697b      	ldr	r3, [r7, #20]
 8006612:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006616:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	4a15      	ldr	r2, [pc, #84]	; (8006670 <TIM_OC2_SetConfig+0xd4>)
 800661c:	4293      	cmp	r3, r2
 800661e:	d113      	bne.n	8006648 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006620:	693b      	ldr	r3, [r7, #16]
 8006622:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006626:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006628:	693b      	ldr	r3, [r7, #16]
 800662a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800662e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006630:	683b      	ldr	r3, [r7, #0]
 8006632:	695b      	ldr	r3, [r3, #20]
 8006634:	009b      	lsls	r3, r3, #2
 8006636:	693a      	ldr	r2, [r7, #16]
 8006638:	4313      	orrs	r3, r2
 800663a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800663c:	683b      	ldr	r3, [r7, #0]
 800663e:	699b      	ldr	r3, [r3, #24]
 8006640:	009b      	lsls	r3, r3, #2
 8006642:	693a      	ldr	r2, [r7, #16]
 8006644:	4313      	orrs	r3, r2
 8006646:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	693a      	ldr	r2, [r7, #16]
 800664c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	68fa      	ldr	r2, [r7, #12]
 8006652:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006654:	683b      	ldr	r3, [r7, #0]
 8006656:	685a      	ldr	r2, [r3, #4]
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	697a      	ldr	r2, [r7, #20]
 8006660:	621a      	str	r2, [r3, #32]
}
 8006662:	bf00      	nop
 8006664:	371c      	adds	r7, #28
 8006666:	46bd      	mov	sp, r7
 8006668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800666c:	4770      	bx	lr
 800666e:	bf00      	nop
 8006670:	40010000 	.word	0x40010000

08006674 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006674:	b480      	push	{r7}
 8006676:	b087      	sub	sp, #28
 8006678:	af00      	add	r7, sp, #0
 800667a:	6078      	str	r0, [r7, #4]
 800667c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	6a1b      	ldr	r3, [r3, #32]
 8006682:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	6a1b      	ldr	r3, [r3, #32]
 800668e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	685b      	ldr	r3, [r3, #4]
 8006694:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	69db      	ldr	r3, [r3, #28]
 800669a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	f023 0303 	bic.w	r3, r3, #3
 80066aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80066ac:	683b      	ldr	r3, [r7, #0]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	68fa      	ldr	r2, [r7, #12]
 80066b2:	4313      	orrs	r3, r2
 80066b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80066b6:	697b      	ldr	r3, [r7, #20]
 80066b8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80066bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80066be:	683b      	ldr	r3, [r7, #0]
 80066c0:	689b      	ldr	r3, [r3, #8]
 80066c2:	021b      	lsls	r3, r3, #8
 80066c4:	697a      	ldr	r2, [r7, #20]
 80066c6:	4313      	orrs	r3, r2
 80066c8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	4a1d      	ldr	r2, [pc, #116]	; (8006744 <TIM_OC3_SetConfig+0xd0>)
 80066ce:	4293      	cmp	r3, r2
 80066d0:	d10d      	bne.n	80066ee <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80066d2:	697b      	ldr	r3, [r7, #20]
 80066d4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80066d8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80066da:	683b      	ldr	r3, [r7, #0]
 80066dc:	68db      	ldr	r3, [r3, #12]
 80066de:	021b      	lsls	r3, r3, #8
 80066e0:	697a      	ldr	r2, [r7, #20]
 80066e2:	4313      	orrs	r3, r2
 80066e4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80066e6:	697b      	ldr	r3, [r7, #20]
 80066e8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80066ec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	4a14      	ldr	r2, [pc, #80]	; (8006744 <TIM_OC3_SetConfig+0xd0>)
 80066f2:	4293      	cmp	r3, r2
 80066f4:	d113      	bne.n	800671e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80066f6:	693b      	ldr	r3, [r7, #16]
 80066f8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80066fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80066fe:	693b      	ldr	r3, [r7, #16]
 8006700:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006704:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006706:	683b      	ldr	r3, [r7, #0]
 8006708:	695b      	ldr	r3, [r3, #20]
 800670a:	011b      	lsls	r3, r3, #4
 800670c:	693a      	ldr	r2, [r7, #16]
 800670e:	4313      	orrs	r3, r2
 8006710:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006712:	683b      	ldr	r3, [r7, #0]
 8006714:	699b      	ldr	r3, [r3, #24]
 8006716:	011b      	lsls	r3, r3, #4
 8006718:	693a      	ldr	r2, [r7, #16]
 800671a:	4313      	orrs	r3, r2
 800671c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	693a      	ldr	r2, [r7, #16]
 8006722:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	68fa      	ldr	r2, [r7, #12]
 8006728:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800672a:	683b      	ldr	r3, [r7, #0]
 800672c:	685a      	ldr	r2, [r3, #4]
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	697a      	ldr	r2, [r7, #20]
 8006736:	621a      	str	r2, [r3, #32]
}
 8006738:	bf00      	nop
 800673a:	371c      	adds	r7, #28
 800673c:	46bd      	mov	sp, r7
 800673e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006742:	4770      	bx	lr
 8006744:	40010000 	.word	0x40010000

08006748 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006748:	b480      	push	{r7}
 800674a:	b087      	sub	sp, #28
 800674c:	af00      	add	r7, sp, #0
 800674e:	6078      	str	r0, [r7, #4]
 8006750:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	6a1b      	ldr	r3, [r3, #32]
 8006756:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	6a1b      	ldr	r3, [r3, #32]
 8006762:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	685b      	ldr	r3, [r3, #4]
 8006768:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	69db      	ldr	r3, [r3, #28]
 800676e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006776:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800677e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006780:	683b      	ldr	r3, [r7, #0]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	021b      	lsls	r3, r3, #8
 8006786:	68fa      	ldr	r2, [r7, #12]
 8006788:	4313      	orrs	r3, r2
 800678a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800678c:	693b      	ldr	r3, [r7, #16]
 800678e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006792:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006794:	683b      	ldr	r3, [r7, #0]
 8006796:	689b      	ldr	r3, [r3, #8]
 8006798:	031b      	lsls	r3, r3, #12
 800679a:	693a      	ldr	r2, [r7, #16]
 800679c:	4313      	orrs	r3, r2
 800679e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	4a10      	ldr	r2, [pc, #64]	; (80067e4 <TIM_OC4_SetConfig+0x9c>)
 80067a4:	4293      	cmp	r3, r2
 80067a6:	d109      	bne.n	80067bc <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80067a8:	697b      	ldr	r3, [r7, #20]
 80067aa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80067ae:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80067b0:	683b      	ldr	r3, [r7, #0]
 80067b2:	695b      	ldr	r3, [r3, #20]
 80067b4:	019b      	lsls	r3, r3, #6
 80067b6:	697a      	ldr	r2, [r7, #20]
 80067b8:	4313      	orrs	r3, r2
 80067ba:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	697a      	ldr	r2, [r7, #20]
 80067c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	68fa      	ldr	r2, [r7, #12]
 80067c6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80067c8:	683b      	ldr	r3, [r7, #0]
 80067ca:	685a      	ldr	r2, [r3, #4]
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	693a      	ldr	r2, [r7, #16]
 80067d4:	621a      	str	r2, [r3, #32]
}
 80067d6:	bf00      	nop
 80067d8:	371c      	adds	r7, #28
 80067da:	46bd      	mov	sp, r7
 80067dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e0:	4770      	bx	lr
 80067e2:	bf00      	nop
 80067e4:	40010000 	.word	0x40010000

080067e8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80067e8:	b480      	push	{r7}
 80067ea:	b087      	sub	sp, #28
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	60f8      	str	r0, [r7, #12]
 80067f0:	60b9      	str	r1, [r7, #8]
 80067f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	6a1b      	ldr	r3, [r3, #32]
 80067f8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	6a1b      	ldr	r3, [r3, #32]
 80067fe:	f023 0201 	bic.w	r2, r3, #1
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	699b      	ldr	r3, [r3, #24]
 800680a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800680c:	693b      	ldr	r3, [r7, #16]
 800680e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006812:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	011b      	lsls	r3, r3, #4
 8006818:	693a      	ldr	r2, [r7, #16]
 800681a:	4313      	orrs	r3, r2
 800681c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800681e:	697b      	ldr	r3, [r7, #20]
 8006820:	f023 030a 	bic.w	r3, r3, #10
 8006824:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006826:	697a      	ldr	r2, [r7, #20]
 8006828:	68bb      	ldr	r3, [r7, #8]
 800682a:	4313      	orrs	r3, r2
 800682c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	693a      	ldr	r2, [r7, #16]
 8006832:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	697a      	ldr	r2, [r7, #20]
 8006838:	621a      	str	r2, [r3, #32]
}
 800683a:	bf00      	nop
 800683c:	371c      	adds	r7, #28
 800683e:	46bd      	mov	sp, r7
 8006840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006844:	4770      	bx	lr

08006846 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006846:	b480      	push	{r7}
 8006848:	b087      	sub	sp, #28
 800684a:	af00      	add	r7, sp, #0
 800684c:	60f8      	str	r0, [r7, #12]
 800684e:	60b9      	str	r1, [r7, #8]
 8006850:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	6a1b      	ldr	r3, [r3, #32]
 8006856:	f023 0210 	bic.w	r2, r3, #16
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	699b      	ldr	r3, [r3, #24]
 8006862:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	6a1b      	ldr	r3, [r3, #32]
 8006868:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800686a:	697b      	ldr	r3, [r7, #20]
 800686c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006870:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	031b      	lsls	r3, r3, #12
 8006876:	697a      	ldr	r2, [r7, #20]
 8006878:	4313      	orrs	r3, r2
 800687a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800687c:	693b      	ldr	r3, [r7, #16]
 800687e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006882:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006884:	68bb      	ldr	r3, [r7, #8]
 8006886:	011b      	lsls	r3, r3, #4
 8006888:	693a      	ldr	r2, [r7, #16]
 800688a:	4313      	orrs	r3, r2
 800688c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	697a      	ldr	r2, [r7, #20]
 8006892:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	693a      	ldr	r2, [r7, #16]
 8006898:	621a      	str	r2, [r3, #32]
}
 800689a:	bf00      	nop
 800689c:	371c      	adds	r7, #28
 800689e:	46bd      	mov	sp, r7
 80068a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a4:	4770      	bx	lr

080068a6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80068a6:	b480      	push	{r7}
 80068a8:	b085      	sub	sp, #20
 80068aa:	af00      	add	r7, sp, #0
 80068ac:	6078      	str	r0, [r7, #4]
 80068ae:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	689b      	ldr	r3, [r3, #8]
 80068b4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068bc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80068be:	683a      	ldr	r2, [r7, #0]
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	4313      	orrs	r3, r2
 80068c4:	f043 0307 	orr.w	r3, r3, #7
 80068c8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	68fa      	ldr	r2, [r7, #12]
 80068ce:	609a      	str	r2, [r3, #8]
}
 80068d0:	bf00      	nop
 80068d2:	3714      	adds	r7, #20
 80068d4:	46bd      	mov	sp, r7
 80068d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068da:	4770      	bx	lr

080068dc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80068dc:	b480      	push	{r7}
 80068de:	b087      	sub	sp, #28
 80068e0:	af00      	add	r7, sp, #0
 80068e2:	60f8      	str	r0, [r7, #12]
 80068e4:	60b9      	str	r1, [r7, #8]
 80068e6:	607a      	str	r2, [r7, #4]
 80068e8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	689b      	ldr	r3, [r3, #8]
 80068ee:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80068f0:	697b      	ldr	r3, [r7, #20]
 80068f2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80068f6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80068f8:	683b      	ldr	r3, [r7, #0]
 80068fa:	021a      	lsls	r2, r3, #8
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	431a      	orrs	r2, r3
 8006900:	68bb      	ldr	r3, [r7, #8]
 8006902:	4313      	orrs	r3, r2
 8006904:	697a      	ldr	r2, [r7, #20]
 8006906:	4313      	orrs	r3, r2
 8006908:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	697a      	ldr	r2, [r7, #20]
 800690e:	609a      	str	r2, [r3, #8]
}
 8006910:	bf00      	nop
 8006912:	371c      	adds	r7, #28
 8006914:	46bd      	mov	sp, r7
 8006916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800691a:	4770      	bx	lr

0800691c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800691c:	b480      	push	{r7}
 800691e:	b087      	sub	sp, #28
 8006920:	af00      	add	r7, sp, #0
 8006922:	60f8      	str	r0, [r7, #12]
 8006924:	60b9      	str	r1, [r7, #8]
 8006926:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006928:	68bb      	ldr	r3, [r7, #8]
 800692a:	f003 031f 	and.w	r3, r3, #31
 800692e:	2201      	movs	r2, #1
 8006930:	fa02 f303 	lsl.w	r3, r2, r3
 8006934:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	6a1a      	ldr	r2, [r3, #32]
 800693a:	697b      	ldr	r3, [r7, #20]
 800693c:	43db      	mvns	r3, r3
 800693e:	401a      	ands	r2, r3
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	6a1a      	ldr	r2, [r3, #32]
 8006948:	68bb      	ldr	r3, [r7, #8]
 800694a:	f003 031f 	and.w	r3, r3, #31
 800694e:	6879      	ldr	r1, [r7, #4]
 8006950:	fa01 f303 	lsl.w	r3, r1, r3
 8006954:	431a      	orrs	r2, r3
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	621a      	str	r2, [r3, #32]
}
 800695a:	bf00      	nop
 800695c:	371c      	adds	r7, #28
 800695e:	46bd      	mov	sp, r7
 8006960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006964:	4770      	bx	lr
	...

08006968 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006968:	b480      	push	{r7}
 800696a:	b085      	sub	sp, #20
 800696c:	af00      	add	r7, sp, #0
 800696e:	6078      	str	r0, [r7, #4]
 8006970:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006978:	2b01      	cmp	r3, #1
 800697a:	d101      	bne.n	8006980 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800697c:	2302      	movs	r3, #2
 800697e:	e050      	b.n	8006a22 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	2201      	movs	r2, #1
 8006984:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	2202      	movs	r2, #2
 800698c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	685b      	ldr	r3, [r3, #4]
 8006996:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	689b      	ldr	r3, [r3, #8]
 800699e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069a6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80069a8:	683b      	ldr	r3, [r7, #0]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	68fa      	ldr	r2, [r7, #12]
 80069ae:	4313      	orrs	r3, r2
 80069b0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	68fa      	ldr	r2, [r7, #12]
 80069b8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	4a1c      	ldr	r2, [pc, #112]	; (8006a30 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80069c0:	4293      	cmp	r3, r2
 80069c2:	d018      	beq.n	80069f6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80069cc:	d013      	beq.n	80069f6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	4a18      	ldr	r2, [pc, #96]	; (8006a34 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80069d4:	4293      	cmp	r3, r2
 80069d6:	d00e      	beq.n	80069f6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	4a16      	ldr	r2, [pc, #88]	; (8006a38 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80069de:	4293      	cmp	r3, r2
 80069e0:	d009      	beq.n	80069f6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	4a15      	ldr	r2, [pc, #84]	; (8006a3c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80069e8:	4293      	cmp	r3, r2
 80069ea:	d004      	beq.n	80069f6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	4a13      	ldr	r2, [pc, #76]	; (8006a40 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80069f2:	4293      	cmp	r3, r2
 80069f4:	d10c      	bne.n	8006a10 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80069f6:	68bb      	ldr	r3, [r7, #8]
 80069f8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80069fc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80069fe:	683b      	ldr	r3, [r7, #0]
 8006a00:	685b      	ldr	r3, [r3, #4]
 8006a02:	68ba      	ldr	r2, [r7, #8]
 8006a04:	4313      	orrs	r3, r2
 8006a06:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	68ba      	ldr	r2, [r7, #8]
 8006a0e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	2201      	movs	r2, #1
 8006a14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	2200      	movs	r2, #0
 8006a1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006a20:	2300      	movs	r3, #0
}
 8006a22:	4618      	mov	r0, r3
 8006a24:	3714      	adds	r7, #20
 8006a26:	46bd      	mov	sp, r7
 8006a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a2c:	4770      	bx	lr
 8006a2e:	bf00      	nop
 8006a30:	40010000 	.word	0x40010000
 8006a34:	40000400 	.word	0x40000400
 8006a38:	40000800 	.word	0x40000800
 8006a3c:	40000c00 	.word	0x40000c00
 8006a40:	40014000 	.word	0x40014000

08006a44 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006a44:	b480      	push	{r7}
 8006a46:	b085      	sub	sp, #20
 8006a48:	af00      	add	r7, sp, #0
 8006a4a:	6078      	str	r0, [r7, #4]
 8006a4c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006a4e:	2300      	movs	r3, #0
 8006a50:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006a58:	2b01      	cmp	r3, #1
 8006a5a:	d101      	bne.n	8006a60 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006a5c:	2302      	movs	r3, #2
 8006a5e:	e03d      	b.n	8006adc <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	2201      	movs	r2, #1
 8006a64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006a6e:	683b      	ldr	r3, [r7, #0]
 8006a70:	68db      	ldr	r3, [r3, #12]
 8006a72:	4313      	orrs	r3, r2
 8006a74:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006a7c:	683b      	ldr	r3, [r7, #0]
 8006a7e:	689b      	ldr	r3, [r3, #8]
 8006a80:	4313      	orrs	r3, r2
 8006a82:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006a8a:	683b      	ldr	r3, [r7, #0]
 8006a8c:	685b      	ldr	r3, [r3, #4]
 8006a8e:	4313      	orrs	r3, r2
 8006a90:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006a98:	683b      	ldr	r3, [r7, #0]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	4313      	orrs	r3, r2
 8006a9e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006aa6:	683b      	ldr	r3, [r7, #0]
 8006aa8:	691b      	ldr	r3, [r3, #16]
 8006aaa:	4313      	orrs	r3, r2
 8006aac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006ab4:	683b      	ldr	r3, [r7, #0]
 8006ab6:	695b      	ldr	r3, [r3, #20]
 8006ab8:	4313      	orrs	r3, r2
 8006aba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006ac2:	683b      	ldr	r3, [r7, #0]
 8006ac4:	69db      	ldr	r3, [r3, #28]
 8006ac6:	4313      	orrs	r3, r2
 8006ac8:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	68fa      	ldr	r2, [r7, #12]
 8006ad0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	2200      	movs	r2, #0
 8006ad6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006ada:	2300      	movs	r3, #0
}
 8006adc:	4618      	mov	r0, r3
 8006ade:	3714      	adds	r7, #20
 8006ae0:	46bd      	mov	sp, r7
 8006ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae6:	4770      	bx	lr

08006ae8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006ae8:	b480      	push	{r7}
 8006aea:	b083      	sub	sp, #12
 8006aec:	af00      	add	r7, sp, #0
 8006aee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006af0:	bf00      	nop
 8006af2:	370c      	adds	r7, #12
 8006af4:	46bd      	mov	sp, r7
 8006af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006afa:	4770      	bx	lr

08006afc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006afc:	b480      	push	{r7}
 8006afe:	b083      	sub	sp, #12
 8006b00:	af00      	add	r7, sp, #0
 8006b02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006b04:	bf00      	nop
 8006b06:	370c      	adds	r7, #12
 8006b08:	46bd      	mov	sp, r7
 8006b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b0e:	4770      	bx	lr

08006b10 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006b10:	b084      	sub	sp, #16
 8006b12:	b580      	push	{r7, lr}
 8006b14:	b084      	sub	sp, #16
 8006b16:	af00      	add	r7, sp, #0
 8006b18:	6078      	str	r0, [r7, #4]
 8006b1a:	f107 001c 	add.w	r0, r7, #28
 8006b1e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006b22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b24:	2b01      	cmp	r3, #1
 8006b26:	d122      	bne.n	8006b6e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b2c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	68db      	ldr	r3, [r3, #12]
 8006b38:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8006b3c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006b40:	687a      	ldr	r2, [r7, #4]
 8006b42:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	68db      	ldr	r3, [r3, #12]
 8006b48:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006b50:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b52:	2b01      	cmp	r3, #1
 8006b54:	d105      	bne.n	8006b62 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	68db      	ldr	r3, [r3, #12]
 8006b5a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006b62:	6878      	ldr	r0, [r7, #4]
 8006b64:	f001 fbee 	bl	8008344 <USB_CoreReset>
 8006b68:	4603      	mov	r3, r0
 8006b6a:	73fb      	strb	r3, [r7, #15]
 8006b6c:	e01a      	b.n	8006ba4 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	68db      	ldr	r3, [r3, #12]
 8006b72:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006b7a:	6878      	ldr	r0, [r7, #4]
 8006b7c:	f001 fbe2 	bl	8008344 <USB_CoreReset>
 8006b80:	4603      	mov	r3, r0
 8006b82:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006b84:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d106      	bne.n	8006b98 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b8e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	639a      	str	r2, [r3, #56]	; 0x38
 8006b96:	e005      	b.n	8006ba4 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b9c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006ba4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ba6:	2b01      	cmp	r3, #1
 8006ba8:	d10b      	bne.n	8006bc2 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	689b      	ldr	r3, [r3, #8]
 8006bae:	f043 0206 	orr.w	r2, r3, #6
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	689b      	ldr	r3, [r3, #8]
 8006bba:	f043 0220 	orr.w	r2, r3, #32
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006bc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bc4:	4618      	mov	r0, r3
 8006bc6:	3710      	adds	r7, #16
 8006bc8:	46bd      	mov	sp, r7
 8006bca:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006bce:	b004      	add	sp, #16
 8006bd0:	4770      	bx	lr
	...

08006bd4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8006bd4:	b480      	push	{r7}
 8006bd6:	b087      	sub	sp, #28
 8006bd8:	af00      	add	r7, sp, #0
 8006bda:	60f8      	str	r0, [r7, #12]
 8006bdc:	60b9      	str	r1, [r7, #8]
 8006bde:	4613      	mov	r3, r2
 8006be0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8006be2:	79fb      	ldrb	r3, [r7, #7]
 8006be4:	2b02      	cmp	r3, #2
 8006be6:	d165      	bne.n	8006cb4 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8006be8:	68bb      	ldr	r3, [r7, #8]
 8006bea:	4a41      	ldr	r2, [pc, #260]	; (8006cf0 <USB_SetTurnaroundTime+0x11c>)
 8006bec:	4293      	cmp	r3, r2
 8006bee:	d906      	bls.n	8006bfe <USB_SetTurnaroundTime+0x2a>
 8006bf0:	68bb      	ldr	r3, [r7, #8]
 8006bf2:	4a40      	ldr	r2, [pc, #256]	; (8006cf4 <USB_SetTurnaroundTime+0x120>)
 8006bf4:	4293      	cmp	r3, r2
 8006bf6:	d202      	bcs.n	8006bfe <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8006bf8:	230f      	movs	r3, #15
 8006bfa:	617b      	str	r3, [r7, #20]
 8006bfc:	e062      	b.n	8006cc4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8006bfe:	68bb      	ldr	r3, [r7, #8]
 8006c00:	4a3c      	ldr	r2, [pc, #240]	; (8006cf4 <USB_SetTurnaroundTime+0x120>)
 8006c02:	4293      	cmp	r3, r2
 8006c04:	d306      	bcc.n	8006c14 <USB_SetTurnaroundTime+0x40>
 8006c06:	68bb      	ldr	r3, [r7, #8]
 8006c08:	4a3b      	ldr	r2, [pc, #236]	; (8006cf8 <USB_SetTurnaroundTime+0x124>)
 8006c0a:	4293      	cmp	r3, r2
 8006c0c:	d202      	bcs.n	8006c14 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8006c0e:	230e      	movs	r3, #14
 8006c10:	617b      	str	r3, [r7, #20]
 8006c12:	e057      	b.n	8006cc4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8006c14:	68bb      	ldr	r3, [r7, #8]
 8006c16:	4a38      	ldr	r2, [pc, #224]	; (8006cf8 <USB_SetTurnaroundTime+0x124>)
 8006c18:	4293      	cmp	r3, r2
 8006c1a:	d306      	bcc.n	8006c2a <USB_SetTurnaroundTime+0x56>
 8006c1c:	68bb      	ldr	r3, [r7, #8]
 8006c1e:	4a37      	ldr	r2, [pc, #220]	; (8006cfc <USB_SetTurnaroundTime+0x128>)
 8006c20:	4293      	cmp	r3, r2
 8006c22:	d202      	bcs.n	8006c2a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8006c24:	230d      	movs	r3, #13
 8006c26:	617b      	str	r3, [r7, #20]
 8006c28:	e04c      	b.n	8006cc4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8006c2a:	68bb      	ldr	r3, [r7, #8]
 8006c2c:	4a33      	ldr	r2, [pc, #204]	; (8006cfc <USB_SetTurnaroundTime+0x128>)
 8006c2e:	4293      	cmp	r3, r2
 8006c30:	d306      	bcc.n	8006c40 <USB_SetTurnaroundTime+0x6c>
 8006c32:	68bb      	ldr	r3, [r7, #8]
 8006c34:	4a32      	ldr	r2, [pc, #200]	; (8006d00 <USB_SetTurnaroundTime+0x12c>)
 8006c36:	4293      	cmp	r3, r2
 8006c38:	d802      	bhi.n	8006c40 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8006c3a:	230c      	movs	r3, #12
 8006c3c:	617b      	str	r3, [r7, #20]
 8006c3e:	e041      	b.n	8006cc4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8006c40:	68bb      	ldr	r3, [r7, #8]
 8006c42:	4a2f      	ldr	r2, [pc, #188]	; (8006d00 <USB_SetTurnaroundTime+0x12c>)
 8006c44:	4293      	cmp	r3, r2
 8006c46:	d906      	bls.n	8006c56 <USB_SetTurnaroundTime+0x82>
 8006c48:	68bb      	ldr	r3, [r7, #8]
 8006c4a:	4a2e      	ldr	r2, [pc, #184]	; (8006d04 <USB_SetTurnaroundTime+0x130>)
 8006c4c:	4293      	cmp	r3, r2
 8006c4e:	d802      	bhi.n	8006c56 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8006c50:	230b      	movs	r3, #11
 8006c52:	617b      	str	r3, [r7, #20]
 8006c54:	e036      	b.n	8006cc4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8006c56:	68bb      	ldr	r3, [r7, #8]
 8006c58:	4a2a      	ldr	r2, [pc, #168]	; (8006d04 <USB_SetTurnaroundTime+0x130>)
 8006c5a:	4293      	cmp	r3, r2
 8006c5c:	d906      	bls.n	8006c6c <USB_SetTurnaroundTime+0x98>
 8006c5e:	68bb      	ldr	r3, [r7, #8]
 8006c60:	4a29      	ldr	r2, [pc, #164]	; (8006d08 <USB_SetTurnaroundTime+0x134>)
 8006c62:	4293      	cmp	r3, r2
 8006c64:	d802      	bhi.n	8006c6c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8006c66:	230a      	movs	r3, #10
 8006c68:	617b      	str	r3, [r7, #20]
 8006c6a:	e02b      	b.n	8006cc4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8006c6c:	68bb      	ldr	r3, [r7, #8]
 8006c6e:	4a26      	ldr	r2, [pc, #152]	; (8006d08 <USB_SetTurnaroundTime+0x134>)
 8006c70:	4293      	cmp	r3, r2
 8006c72:	d906      	bls.n	8006c82 <USB_SetTurnaroundTime+0xae>
 8006c74:	68bb      	ldr	r3, [r7, #8]
 8006c76:	4a25      	ldr	r2, [pc, #148]	; (8006d0c <USB_SetTurnaroundTime+0x138>)
 8006c78:	4293      	cmp	r3, r2
 8006c7a:	d202      	bcs.n	8006c82 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8006c7c:	2309      	movs	r3, #9
 8006c7e:	617b      	str	r3, [r7, #20]
 8006c80:	e020      	b.n	8006cc4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8006c82:	68bb      	ldr	r3, [r7, #8]
 8006c84:	4a21      	ldr	r2, [pc, #132]	; (8006d0c <USB_SetTurnaroundTime+0x138>)
 8006c86:	4293      	cmp	r3, r2
 8006c88:	d306      	bcc.n	8006c98 <USB_SetTurnaroundTime+0xc4>
 8006c8a:	68bb      	ldr	r3, [r7, #8]
 8006c8c:	4a20      	ldr	r2, [pc, #128]	; (8006d10 <USB_SetTurnaroundTime+0x13c>)
 8006c8e:	4293      	cmp	r3, r2
 8006c90:	d802      	bhi.n	8006c98 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8006c92:	2308      	movs	r3, #8
 8006c94:	617b      	str	r3, [r7, #20]
 8006c96:	e015      	b.n	8006cc4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8006c98:	68bb      	ldr	r3, [r7, #8]
 8006c9a:	4a1d      	ldr	r2, [pc, #116]	; (8006d10 <USB_SetTurnaroundTime+0x13c>)
 8006c9c:	4293      	cmp	r3, r2
 8006c9e:	d906      	bls.n	8006cae <USB_SetTurnaroundTime+0xda>
 8006ca0:	68bb      	ldr	r3, [r7, #8]
 8006ca2:	4a1c      	ldr	r2, [pc, #112]	; (8006d14 <USB_SetTurnaroundTime+0x140>)
 8006ca4:	4293      	cmp	r3, r2
 8006ca6:	d202      	bcs.n	8006cae <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8006ca8:	2307      	movs	r3, #7
 8006caa:	617b      	str	r3, [r7, #20]
 8006cac:	e00a      	b.n	8006cc4 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8006cae:	2306      	movs	r3, #6
 8006cb0:	617b      	str	r3, [r7, #20]
 8006cb2:	e007      	b.n	8006cc4 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8006cb4:	79fb      	ldrb	r3, [r7, #7]
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d102      	bne.n	8006cc0 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8006cba:	2309      	movs	r3, #9
 8006cbc:	617b      	str	r3, [r7, #20]
 8006cbe:	e001      	b.n	8006cc4 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8006cc0:	2309      	movs	r3, #9
 8006cc2:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	68db      	ldr	r3, [r3, #12]
 8006cc8:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	68da      	ldr	r2, [r3, #12]
 8006cd4:	697b      	ldr	r3, [r7, #20]
 8006cd6:	029b      	lsls	r3, r3, #10
 8006cd8:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8006cdc:	431a      	orrs	r2, r3
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006ce2:	2300      	movs	r3, #0
}
 8006ce4:	4618      	mov	r0, r3
 8006ce6:	371c      	adds	r7, #28
 8006ce8:	46bd      	mov	sp, r7
 8006cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cee:	4770      	bx	lr
 8006cf0:	00d8acbf 	.word	0x00d8acbf
 8006cf4:	00e4e1c0 	.word	0x00e4e1c0
 8006cf8:	00f42400 	.word	0x00f42400
 8006cfc:	01067380 	.word	0x01067380
 8006d00:	011a499f 	.word	0x011a499f
 8006d04:	01312cff 	.word	0x01312cff
 8006d08:	014ca43f 	.word	0x014ca43f
 8006d0c:	016e3600 	.word	0x016e3600
 8006d10:	01a6ab1f 	.word	0x01a6ab1f
 8006d14:	01e84800 	.word	0x01e84800

08006d18 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006d18:	b480      	push	{r7}
 8006d1a:	b083      	sub	sp, #12
 8006d1c:	af00      	add	r7, sp, #0
 8006d1e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	689b      	ldr	r3, [r3, #8]
 8006d24:	f043 0201 	orr.w	r2, r3, #1
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006d2c:	2300      	movs	r3, #0
}
 8006d2e:	4618      	mov	r0, r3
 8006d30:	370c      	adds	r7, #12
 8006d32:	46bd      	mov	sp, r7
 8006d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d38:	4770      	bx	lr

08006d3a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006d3a:	b480      	push	{r7}
 8006d3c:	b083      	sub	sp, #12
 8006d3e:	af00      	add	r7, sp, #0
 8006d40:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	689b      	ldr	r3, [r3, #8]
 8006d46:	f023 0201 	bic.w	r2, r3, #1
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006d4e:	2300      	movs	r3, #0
}
 8006d50:	4618      	mov	r0, r3
 8006d52:	370c      	adds	r7, #12
 8006d54:	46bd      	mov	sp, r7
 8006d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d5a:	4770      	bx	lr

08006d5c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006d5c:	b580      	push	{r7, lr}
 8006d5e:	b084      	sub	sp, #16
 8006d60:	af00      	add	r7, sp, #0
 8006d62:	6078      	str	r0, [r7, #4]
 8006d64:	460b      	mov	r3, r1
 8006d66:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006d68:	2300      	movs	r3, #0
 8006d6a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	68db      	ldr	r3, [r3, #12]
 8006d70:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006d78:	78fb      	ldrb	r3, [r7, #3]
 8006d7a:	2b01      	cmp	r3, #1
 8006d7c:	d115      	bne.n	8006daa <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	68db      	ldr	r3, [r3, #12]
 8006d82:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006d8a:	2001      	movs	r0, #1
 8006d8c:	f7fa fe9a 	bl	8001ac4 <HAL_Delay>
      ms++;
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	3301      	adds	r3, #1
 8006d94:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8006d96:	6878      	ldr	r0, [r7, #4]
 8006d98:	f001 fa45 	bl	8008226 <USB_GetMode>
 8006d9c:	4603      	mov	r3, r0
 8006d9e:	2b01      	cmp	r3, #1
 8006da0:	d01e      	beq.n	8006de0 <USB_SetCurrentMode+0x84>
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	2b31      	cmp	r3, #49	; 0x31
 8006da6:	d9f0      	bls.n	8006d8a <USB_SetCurrentMode+0x2e>
 8006da8:	e01a      	b.n	8006de0 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006daa:	78fb      	ldrb	r3, [r7, #3]
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d115      	bne.n	8006ddc <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	68db      	ldr	r3, [r3, #12]
 8006db4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006dbc:	2001      	movs	r0, #1
 8006dbe:	f7fa fe81 	bl	8001ac4 <HAL_Delay>
      ms++;
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	3301      	adds	r3, #1
 8006dc6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8006dc8:	6878      	ldr	r0, [r7, #4]
 8006dca:	f001 fa2c 	bl	8008226 <USB_GetMode>
 8006dce:	4603      	mov	r3, r0
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d005      	beq.n	8006de0 <USB_SetCurrentMode+0x84>
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	2b31      	cmp	r3, #49	; 0x31
 8006dd8:	d9f0      	bls.n	8006dbc <USB_SetCurrentMode+0x60>
 8006dda:	e001      	b.n	8006de0 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006ddc:	2301      	movs	r3, #1
 8006dde:	e005      	b.n	8006dec <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	2b32      	cmp	r3, #50	; 0x32
 8006de4:	d101      	bne.n	8006dea <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006de6:	2301      	movs	r3, #1
 8006de8:	e000      	b.n	8006dec <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006dea:	2300      	movs	r3, #0
}
 8006dec:	4618      	mov	r0, r3
 8006dee:	3710      	adds	r7, #16
 8006df0:	46bd      	mov	sp, r7
 8006df2:	bd80      	pop	{r7, pc}

08006df4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006df4:	b084      	sub	sp, #16
 8006df6:	b580      	push	{r7, lr}
 8006df8:	b086      	sub	sp, #24
 8006dfa:	af00      	add	r7, sp, #0
 8006dfc:	6078      	str	r0, [r7, #4]
 8006dfe:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006e02:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006e06:	2300      	movs	r3, #0
 8006e08:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006e0e:	2300      	movs	r3, #0
 8006e10:	613b      	str	r3, [r7, #16]
 8006e12:	e009      	b.n	8006e28 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006e14:	687a      	ldr	r2, [r7, #4]
 8006e16:	693b      	ldr	r3, [r7, #16]
 8006e18:	3340      	adds	r3, #64	; 0x40
 8006e1a:	009b      	lsls	r3, r3, #2
 8006e1c:	4413      	add	r3, r2
 8006e1e:	2200      	movs	r2, #0
 8006e20:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006e22:	693b      	ldr	r3, [r7, #16]
 8006e24:	3301      	adds	r3, #1
 8006e26:	613b      	str	r3, [r7, #16]
 8006e28:	693b      	ldr	r3, [r7, #16]
 8006e2a:	2b0e      	cmp	r3, #14
 8006e2c:	d9f2      	bls.n	8006e14 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006e2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d11c      	bne.n	8006e6e <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e3a:	685b      	ldr	r3, [r3, #4]
 8006e3c:	68fa      	ldr	r2, [r7, #12]
 8006e3e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006e42:	f043 0302 	orr.w	r3, r3, #2
 8006e46:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e4c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e58:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e64:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	639a      	str	r2, [r3, #56]	; 0x38
 8006e6c:	e00b      	b.n	8006e86 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e72:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e7e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006e8c:	461a      	mov	r2, r3
 8006e8e:	2300      	movs	r3, #0
 8006e90:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e98:	4619      	mov	r1, r3
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ea0:	461a      	mov	r2, r3
 8006ea2:	680b      	ldr	r3, [r1, #0]
 8006ea4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006ea6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ea8:	2b01      	cmp	r3, #1
 8006eaa:	d10c      	bne.n	8006ec6 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006eac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d104      	bne.n	8006ebc <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006eb2:	2100      	movs	r1, #0
 8006eb4:	6878      	ldr	r0, [r7, #4]
 8006eb6:	f000 f965 	bl	8007184 <USB_SetDevSpeed>
 8006eba:	e008      	b.n	8006ece <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006ebc:	2101      	movs	r1, #1
 8006ebe:	6878      	ldr	r0, [r7, #4]
 8006ec0:	f000 f960 	bl	8007184 <USB_SetDevSpeed>
 8006ec4:	e003      	b.n	8006ece <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006ec6:	2103      	movs	r1, #3
 8006ec8:	6878      	ldr	r0, [r7, #4]
 8006eca:	f000 f95b 	bl	8007184 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006ece:	2110      	movs	r1, #16
 8006ed0:	6878      	ldr	r0, [r7, #4]
 8006ed2:	f000 f8f3 	bl	80070bc <USB_FlushTxFifo>
 8006ed6:	4603      	mov	r3, r0
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d001      	beq.n	8006ee0 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8006edc:	2301      	movs	r3, #1
 8006ede:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006ee0:	6878      	ldr	r0, [r7, #4]
 8006ee2:	f000 f91f 	bl	8007124 <USB_FlushRxFifo>
 8006ee6:	4603      	mov	r3, r0
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d001      	beq.n	8006ef0 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8006eec:	2301      	movs	r3, #1
 8006eee:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ef6:	461a      	mov	r2, r3
 8006ef8:	2300      	movs	r3, #0
 8006efa:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f02:	461a      	mov	r2, r3
 8006f04:	2300      	movs	r3, #0
 8006f06:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f0e:	461a      	mov	r2, r3
 8006f10:	2300      	movs	r3, #0
 8006f12:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006f14:	2300      	movs	r3, #0
 8006f16:	613b      	str	r3, [r7, #16]
 8006f18:	e043      	b.n	8006fa2 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006f1a:	693b      	ldr	r3, [r7, #16]
 8006f1c:	015a      	lsls	r2, r3, #5
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	4413      	add	r3, r2
 8006f22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006f2c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006f30:	d118      	bne.n	8006f64 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8006f32:	693b      	ldr	r3, [r7, #16]
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d10a      	bne.n	8006f4e <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006f38:	693b      	ldr	r3, [r7, #16]
 8006f3a:	015a      	lsls	r2, r3, #5
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	4413      	add	r3, r2
 8006f40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f44:	461a      	mov	r2, r3
 8006f46:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006f4a:	6013      	str	r3, [r2, #0]
 8006f4c:	e013      	b.n	8006f76 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006f4e:	693b      	ldr	r3, [r7, #16]
 8006f50:	015a      	lsls	r2, r3, #5
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	4413      	add	r3, r2
 8006f56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f5a:	461a      	mov	r2, r3
 8006f5c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006f60:	6013      	str	r3, [r2, #0]
 8006f62:	e008      	b.n	8006f76 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006f64:	693b      	ldr	r3, [r7, #16]
 8006f66:	015a      	lsls	r2, r3, #5
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	4413      	add	r3, r2
 8006f6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f70:	461a      	mov	r2, r3
 8006f72:	2300      	movs	r3, #0
 8006f74:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006f76:	693b      	ldr	r3, [r7, #16]
 8006f78:	015a      	lsls	r2, r3, #5
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	4413      	add	r3, r2
 8006f7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f82:	461a      	mov	r2, r3
 8006f84:	2300      	movs	r3, #0
 8006f86:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006f88:	693b      	ldr	r3, [r7, #16]
 8006f8a:	015a      	lsls	r2, r3, #5
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	4413      	add	r3, r2
 8006f90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f94:	461a      	mov	r2, r3
 8006f96:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006f9a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006f9c:	693b      	ldr	r3, [r7, #16]
 8006f9e:	3301      	adds	r3, #1
 8006fa0:	613b      	str	r3, [r7, #16]
 8006fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fa4:	693a      	ldr	r2, [r7, #16]
 8006fa6:	429a      	cmp	r2, r3
 8006fa8:	d3b7      	bcc.n	8006f1a <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006faa:	2300      	movs	r3, #0
 8006fac:	613b      	str	r3, [r7, #16]
 8006fae:	e043      	b.n	8007038 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006fb0:	693b      	ldr	r3, [r7, #16]
 8006fb2:	015a      	lsls	r2, r3, #5
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	4413      	add	r3, r2
 8006fb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006fc2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006fc6:	d118      	bne.n	8006ffa <USB_DevInit+0x206>
    {
      if (i == 0U)
 8006fc8:	693b      	ldr	r3, [r7, #16]
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d10a      	bne.n	8006fe4 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006fce:	693b      	ldr	r3, [r7, #16]
 8006fd0:	015a      	lsls	r2, r3, #5
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	4413      	add	r3, r2
 8006fd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006fda:	461a      	mov	r2, r3
 8006fdc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006fe0:	6013      	str	r3, [r2, #0]
 8006fe2:	e013      	b.n	800700c <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006fe4:	693b      	ldr	r3, [r7, #16]
 8006fe6:	015a      	lsls	r2, r3, #5
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	4413      	add	r3, r2
 8006fec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ff0:	461a      	mov	r2, r3
 8006ff2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006ff6:	6013      	str	r3, [r2, #0]
 8006ff8:	e008      	b.n	800700c <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006ffa:	693b      	ldr	r3, [r7, #16]
 8006ffc:	015a      	lsls	r2, r3, #5
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	4413      	add	r3, r2
 8007002:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007006:	461a      	mov	r2, r3
 8007008:	2300      	movs	r3, #0
 800700a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800700c:	693b      	ldr	r3, [r7, #16]
 800700e:	015a      	lsls	r2, r3, #5
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	4413      	add	r3, r2
 8007014:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007018:	461a      	mov	r2, r3
 800701a:	2300      	movs	r3, #0
 800701c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800701e:	693b      	ldr	r3, [r7, #16]
 8007020:	015a      	lsls	r2, r3, #5
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	4413      	add	r3, r2
 8007026:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800702a:	461a      	mov	r2, r3
 800702c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007030:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007032:	693b      	ldr	r3, [r7, #16]
 8007034:	3301      	adds	r3, #1
 8007036:	613b      	str	r3, [r7, #16]
 8007038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800703a:	693a      	ldr	r2, [r7, #16]
 800703c:	429a      	cmp	r2, r3
 800703e:	d3b7      	bcc.n	8006fb0 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007046:	691b      	ldr	r3, [r3, #16]
 8007048:	68fa      	ldr	r2, [r7, #12]
 800704a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800704e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007052:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	2200      	movs	r2, #0
 8007058:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8007060:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007062:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007064:	2b00      	cmp	r3, #0
 8007066:	d105      	bne.n	8007074 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	699b      	ldr	r3, [r3, #24]
 800706c:	f043 0210 	orr.w	r2, r3, #16
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	699a      	ldr	r2, [r3, #24]
 8007078:	4b0f      	ldr	r3, [pc, #60]	; (80070b8 <USB_DevInit+0x2c4>)
 800707a:	4313      	orrs	r3, r2
 800707c:	687a      	ldr	r2, [r7, #4]
 800707e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007080:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007082:	2b00      	cmp	r3, #0
 8007084:	d005      	beq.n	8007092 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	699b      	ldr	r3, [r3, #24]
 800708a:	f043 0208 	orr.w	r2, r3, #8
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007092:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007094:	2b01      	cmp	r3, #1
 8007096:	d107      	bne.n	80070a8 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	699b      	ldr	r3, [r3, #24]
 800709c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80070a0:	f043 0304 	orr.w	r3, r3, #4
 80070a4:	687a      	ldr	r2, [r7, #4]
 80070a6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80070a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80070aa:	4618      	mov	r0, r3
 80070ac:	3718      	adds	r7, #24
 80070ae:	46bd      	mov	sp, r7
 80070b0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80070b4:	b004      	add	sp, #16
 80070b6:	4770      	bx	lr
 80070b8:	803c3800 	.word	0x803c3800

080070bc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80070bc:	b480      	push	{r7}
 80070be:	b085      	sub	sp, #20
 80070c0:	af00      	add	r7, sp, #0
 80070c2:	6078      	str	r0, [r7, #4]
 80070c4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80070c6:	2300      	movs	r3, #0
 80070c8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	3301      	adds	r3, #1
 80070ce:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	4a13      	ldr	r2, [pc, #76]	; (8007120 <USB_FlushTxFifo+0x64>)
 80070d4:	4293      	cmp	r3, r2
 80070d6:	d901      	bls.n	80070dc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80070d8:	2303      	movs	r3, #3
 80070da:	e01b      	b.n	8007114 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	691b      	ldr	r3, [r3, #16]
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	daf2      	bge.n	80070ca <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80070e4:	2300      	movs	r3, #0
 80070e6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80070e8:	683b      	ldr	r3, [r7, #0]
 80070ea:	019b      	lsls	r3, r3, #6
 80070ec:	f043 0220 	orr.w	r2, r3, #32
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	3301      	adds	r3, #1
 80070f8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	4a08      	ldr	r2, [pc, #32]	; (8007120 <USB_FlushTxFifo+0x64>)
 80070fe:	4293      	cmp	r3, r2
 8007100:	d901      	bls.n	8007106 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007102:	2303      	movs	r3, #3
 8007104:	e006      	b.n	8007114 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	691b      	ldr	r3, [r3, #16]
 800710a:	f003 0320 	and.w	r3, r3, #32
 800710e:	2b20      	cmp	r3, #32
 8007110:	d0f0      	beq.n	80070f4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007112:	2300      	movs	r3, #0
}
 8007114:	4618      	mov	r0, r3
 8007116:	3714      	adds	r7, #20
 8007118:	46bd      	mov	sp, r7
 800711a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800711e:	4770      	bx	lr
 8007120:	00030d40 	.word	0x00030d40

08007124 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007124:	b480      	push	{r7}
 8007126:	b085      	sub	sp, #20
 8007128:	af00      	add	r7, sp, #0
 800712a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800712c:	2300      	movs	r3, #0
 800712e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	3301      	adds	r3, #1
 8007134:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	4a11      	ldr	r2, [pc, #68]	; (8007180 <USB_FlushRxFifo+0x5c>)
 800713a:	4293      	cmp	r3, r2
 800713c:	d901      	bls.n	8007142 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800713e:	2303      	movs	r3, #3
 8007140:	e018      	b.n	8007174 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	691b      	ldr	r3, [r3, #16]
 8007146:	2b00      	cmp	r3, #0
 8007148:	daf2      	bge.n	8007130 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800714a:	2300      	movs	r3, #0
 800714c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	2210      	movs	r2, #16
 8007152:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	3301      	adds	r3, #1
 8007158:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	4a08      	ldr	r2, [pc, #32]	; (8007180 <USB_FlushRxFifo+0x5c>)
 800715e:	4293      	cmp	r3, r2
 8007160:	d901      	bls.n	8007166 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8007162:	2303      	movs	r3, #3
 8007164:	e006      	b.n	8007174 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	691b      	ldr	r3, [r3, #16]
 800716a:	f003 0310 	and.w	r3, r3, #16
 800716e:	2b10      	cmp	r3, #16
 8007170:	d0f0      	beq.n	8007154 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007172:	2300      	movs	r3, #0
}
 8007174:	4618      	mov	r0, r3
 8007176:	3714      	adds	r7, #20
 8007178:	46bd      	mov	sp, r7
 800717a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800717e:	4770      	bx	lr
 8007180:	00030d40 	.word	0x00030d40

08007184 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007184:	b480      	push	{r7}
 8007186:	b085      	sub	sp, #20
 8007188:	af00      	add	r7, sp, #0
 800718a:	6078      	str	r0, [r7, #4]
 800718c:	460b      	mov	r3, r1
 800718e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800719a:	681a      	ldr	r2, [r3, #0]
 800719c:	78fb      	ldrb	r3, [r7, #3]
 800719e:	68f9      	ldr	r1, [r7, #12]
 80071a0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80071a4:	4313      	orrs	r3, r2
 80071a6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80071a8:	2300      	movs	r3, #0
}
 80071aa:	4618      	mov	r0, r3
 80071ac:	3714      	adds	r7, #20
 80071ae:	46bd      	mov	sp, r7
 80071b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b4:	4770      	bx	lr

080071b6 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80071b6:	b480      	push	{r7}
 80071b8:	b087      	sub	sp, #28
 80071ba:	af00      	add	r7, sp, #0
 80071bc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80071c2:	693b      	ldr	r3, [r7, #16]
 80071c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80071c8:	689b      	ldr	r3, [r3, #8]
 80071ca:	f003 0306 	and.w	r3, r3, #6
 80071ce:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d102      	bne.n	80071dc <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80071d6:	2300      	movs	r3, #0
 80071d8:	75fb      	strb	r3, [r7, #23]
 80071da:	e00a      	b.n	80071f2 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	2b02      	cmp	r3, #2
 80071e0:	d002      	beq.n	80071e8 <USB_GetDevSpeed+0x32>
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	2b06      	cmp	r3, #6
 80071e6:	d102      	bne.n	80071ee <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80071e8:	2302      	movs	r3, #2
 80071ea:	75fb      	strb	r3, [r7, #23]
 80071ec:	e001      	b.n	80071f2 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80071ee:	230f      	movs	r3, #15
 80071f0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80071f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80071f4:	4618      	mov	r0, r3
 80071f6:	371c      	adds	r7, #28
 80071f8:	46bd      	mov	sp, r7
 80071fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071fe:	4770      	bx	lr

08007200 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007200:	b480      	push	{r7}
 8007202:	b085      	sub	sp, #20
 8007204:	af00      	add	r7, sp, #0
 8007206:	6078      	str	r0, [r7, #4]
 8007208:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800720e:	683b      	ldr	r3, [r7, #0]
 8007210:	781b      	ldrb	r3, [r3, #0]
 8007212:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007214:	683b      	ldr	r3, [r7, #0]
 8007216:	785b      	ldrb	r3, [r3, #1]
 8007218:	2b01      	cmp	r3, #1
 800721a:	d13a      	bne.n	8007292 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007222:	69da      	ldr	r2, [r3, #28]
 8007224:	683b      	ldr	r3, [r7, #0]
 8007226:	781b      	ldrb	r3, [r3, #0]
 8007228:	f003 030f 	and.w	r3, r3, #15
 800722c:	2101      	movs	r1, #1
 800722e:	fa01 f303 	lsl.w	r3, r1, r3
 8007232:	b29b      	uxth	r3, r3
 8007234:	68f9      	ldr	r1, [r7, #12]
 8007236:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800723a:	4313      	orrs	r3, r2
 800723c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800723e:	68bb      	ldr	r3, [r7, #8]
 8007240:	015a      	lsls	r2, r3, #5
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	4413      	add	r3, r2
 8007246:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007250:	2b00      	cmp	r3, #0
 8007252:	d155      	bne.n	8007300 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007254:	68bb      	ldr	r3, [r7, #8]
 8007256:	015a      	lsls	r2, r3, #5
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	4413      	add	r3, r2
 800725c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007260:	681a      	ldr	r2, [r3, #0]
 8007262:	683b      	ldr	r3, [r7, #0]
 8007264:	68db      	ldr	r3, [r3, #12]
 8007266:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800726a:	683b      	ldr	r3, [r7, #0]
 800726c:	791b      	ldrb	r3, [r3, #4]
 800726e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007270:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007272:	68bb      	ldr	r3, [r7, #8]
 8007274:	059b      	lsls	r3, r3, #22
 8007276:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007278:	4313      	orrs	r3, r2
 800727a:	68ba      	ldr	r2, [r7, #8]
 800727c:	0151      	lsls	r1, r2, #5
 800727e:	68fa      	ldr	r2, [r7, #12]
 8007280:	440a      	add	r2, r1
 8007282:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007286:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800728a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800728e:	6013      	str	r3, [r2, #0]
 8007290:	e036      	b.n	8007300 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007298:	69da      	ldr	r2, [r3, #28]
 800729a:	683b      	ldr	r3, [r7, #0]
 800729c:	781b      	ldrb	r3, [r3, #0]
 800729e:	f003 030f 	and.w	r3, r3, #15
 80072a2:	2101      	movs	r1, #1
 80072a4:	fa01 f303 	lsl.w	r3, r1, r3
 80072a8:	041b      	lsls	r3, r3, #16
 80072aa:	68f9      	ldr	r1, [r7, #12]
 80072ac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80072b0:	4313      	orrs	r3, r2
 80072b2:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80072b4:	68bb      	ldr	r3, [r7, #8]
 80072b6:	015a      	lsls	r2, r3, #5
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	4413      	add	r3, r2
 80072bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d11a      	bne.n	8007300 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80072ca:	68bb      	ldr	r3, [r7, #8]
 80072cc:	015a      	lsls	r2, r3, #5
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	4413      	add	r3, r2
 80072d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072d6:	681a      	ldr	r2, [r3, #0]
 80072d8:	683b      	ldr	r3, [r7, #0]
 80072da:	68db      	ldr	r3, [r3, #12]
 80072dc:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80072e0:	683b      	ldr	r3, [r7, #0]
 80072e2:	791b      	ldrb	r3, [r3, #4]
 80072e4:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80072e6:	430b      	orrs	r3, r1
 80072e8:	4313      	orrs	r3, r2
 80072ea:	68ba      	ldr	r2, [r7, #8]
 80072ec:	0151      	lsls	r1, r2, #5
 80072ee:	68fa      	ldr	r2, [r7, #12]
 80072f0:	440a      	add	r2, r1
 80072f2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80072f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80072fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80072fe:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8007300:	2300      	movs	r3, #0
}
 8007302:	4618      	mov	r0, r3
 8007304:	3714      	adds	r7, #20
 8007306:	46bd      	mov	sp, r7
 8007308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800730c:	4770      	bx	lr
	...

08007310 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007310:	b480      	push	{r7}
 8007312:	b085      	sub	sp, #20
 8007314:	af00      	add	r7, sp, #0
 8007316:	6078      	str	r0, [r7, #4]
 8007318:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800731e:	683b      	ldr	r3, [r7, #0]
 8007320:	781b      	ldrb	r3, [r3, #0]
 8007322:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8007324:	683b      	ldr	r3, [r7, #0]
 8007326:	785b      	ldrb	r3, [r3, #1]
 8007328:	2b01      	cmp	r3, #1
 800732a:	d161      	bne.n	80073f0 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800732c:	68bb      	ldr	r3, [r7, #8]
 800732e:	015a      	lsls	r2, r3, #5
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	4413      	add	r3, r2
 8007334:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800733e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007342:	d11f      	bne.n	8007384 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8007344:	68bb      	ldr	r3, [r7, #8]
 8007346:	015a      	lsls	r2, r3, #5
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	4413      	add	r3, r2
 800734c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	68ba      	ldr	r2, [r7, #8]
 8007354:	0151      	lsls	r1, r2, #5
 8007356:	68fa      	ldr	r2, [r7, #12]
 8007358:	440a      	add	r2, r1
 800735a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800735e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007362:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8007364:	68bb      	ldr	r3, [r7, #8]
 8007366:	015a      	lsls	r2, r3, #5
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	4413      	add	r3, r2
 800736c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	68ba      	ldr	r2, [r7, #8]
 8007374:	0151      	lsls	r1, r2, #5
 8007376:	68fa      	ldr	r2, [r7, #12]
 8007378:	440a      	add	r2, r1
 800737a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800737e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007382:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800738a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800738c:	683b      	ldr	r3, [r7, #0]
 800738e:	781b      	ldrb	r3, [r3, #0]
 8007390:	f003 030f 	and.w	r3, r3, #15
 8007394:	2101      	movs	r1, #1
 8007396:	fa01 f303 	lsl.w	r3, r1, r3
 800739a:	b29b      	uxth	r3, r3
 800739c:	43db      	mvns	r3, r3
 800739e:	68f9      	ldr	r1, [r7, #12]
 80073a0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80073a4:	4013      	ands	r3, r2
 80073a6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80073ae:	69da      	ldr	r2, [r3, #28]
 80073b0:	683b      	ldr	r3, [r7, #0]
 80073b2:	781b      	ldrb	r3, [r3, #0]
 80073b4:	f003 030f 	and.w	r3, r3, #15
 80073b8:	2101      	movs	r1, #1
 80073ba:	fa01 f303 	lsl.w	r3, r1, r3
 80073be:	b29b      	uxth	r3, r3
 80073c0:	43db      	mvns	r3, r3
 80073c2:	68f9      	ldr	r1, [r7, #12]
 80073c4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80073c8:	4013      	ands	r3, r2
 80073ca:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80073cc:	68bb      	ldr	r3, [r7, #8]
 80073ce:	015a      	lsls	r2, r3, #5
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	4413      	add	r3, r2
 80073d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073d8:	681a      	ldr	r2, [r3, #0]
 80073da:	68bb      	ldr	r3, [r7, #8]
 80073dc:	0159      	lsls	r1, r3, #5
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	440b      	add	r3, r1
 80073e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073e6:	4619      	mov	r1, r3
 80073e8:	4b35      	ldr	r3, [pc, #212]	; (80074c0 <USB_DeactivateEndpoint+0x1b0>)
 80073ea:	4013      	ands	r3, r2
 80073ec:	600b      	str	r3, [r1, #0]
 80073ee:	e060      	b.n	80074b2 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80073f0:	68bb      	ldr	r3, [r7, #8]
 80073f2:	015a      	lsls	r2, r3, #5
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	4413      	add	r3, r2
 80073f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007402:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007406:	d11f      	bne.n	8007448 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8007408:	68bb      	ldr	r3, [r7, #8]
 800740a:	015a      	lsls	r2, r3, #5
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	4413      	add	r3, r2
 8007410:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	68ba      	ldr	r2, [r7, #8]
 8007418:	0151      	lsls	r1, r2, #5
 800741a:	68fa      	ldr	r2, [r7, #12]
 800741c:	440a      	add	r2, r1
 800741e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007422:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007426:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8007428:	68bb      	ldr	r3, [r7, #8]
 800742a:	015a      	lsls	r2, r3, #5
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	4413      	add	r3, r2
 8007430:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	68ba      	ldr	r2, [r7, #8]
 8007438:	0151      	lsls	r1, r2, #5
 800743a:	68fa      	ldr	r2, [r7, #12]
 800743c:	440a      	add	r2, r1
 800743e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007442:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007446:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800744e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007450:	683b      	ldr	r3, [r7, #0]
 8007452:	781b      	ldrb	r3, [r3, #0]
 8007454:	f003 030f 	and.w	r3, r3, #15
 8007458:	2101      	movs	r1, #1
 800745a:	fa01 f303 	lsl.w	r3, r1, r3
 800745e:	041b      	lsls	r3, r3, #16
 8007460:	43db      	mvns	r3, r3
 8007462:	68f9      	ldr	r1, [r7, #12]
 8007464:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007468:	4013      	ands	r3, r2
 800746a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007472:	69da      	ldr	r2, [r3, #28]
 8007474:	683b      	ldr	r3, [r7, #0]
 8007476:	781b      	ldrb	r3, [r3, #0]
 8007478:	f003 030f 	and.w	r3, r3, #15
 800747c:	2101      	movs	r1, #1
 800747e:	fa01 f303 	lsl.w	r3, r1, r3
 8007482:	041b      	lsls	r3, r3, #16
 8007484:	43db      	mvns	r3, r3
 8007486:	68f9      	ldr	r1, [r7, #12]
 8007488:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800748c:	4013      	ands	r3, r2
 800748e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8007490:	68bb      	ldr	r3, [r7, #8]
 8007492:	015a      	lsls	r2, r3, #5
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	4413      	add	r3, r2
 8007498:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800749c:	681a      	ldr	r2, [r3, #0]
 800749e:	68bb      	ldr	r3, [r7, #8]
 80074a0:	0159      	lsls	r1, r3, #5
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	440b      	add	r3, r1
 80074a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074aa:	4619      	mov	r1, r3
 80074ac:	4b05      	ldr	r3, [pc, #20]	; (80074c4 <USB_DeactivateEndpoint+0x1b4>)
 80074ae:	4013      	ands	r3, r2
 80074b0:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80074b2:	2300      	movs	r3, #0
}
 80074b4:	4618      	mov	r0, r3
 80074b6:	3714      	adds	r7, #20
 80074b8:	46bd      	mov	sp, r7
 80074ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074be:	4770      	bx	lr
 80074c0:	ec337800 	.word	0xec337800
 80074c4:	eff37800 	.word	0xeff37800

080074c8 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80074c8:	b580      	push	{r7, lr}
 80074ca:	b08a      	sub	sp, #40	; 0x28
 80074cc:	af02      	add	r7, sp, #8
 80074ce:	60f8      	str	r0, [r7, #12]
 80074d0:	60b9      	str	r1, [r7, #8]
 80074d2:	4613      	mov	r3, r2
 80074d4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80074da:	68bb      	ldr	r3, [r7, #8]
 80074dc:	781b      	ldrb	r3, [r3, #0]
 80074de:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80074e0:	68bb      	ldr	r3, [r7, #8]
 80074e2:	785b      	ldrb	r3, [r3, #1]
 80074e4:	2b01      	cmp	r3, #1
 80074e6:	f040 815c 	bne.w	80077a2 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80074ea:	68bb      	ldr	r3, [r7, #8]
 80074ec:	699b      	ldr	r3, [r3, #24]
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d132      	bne.n	8007558 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80074f2:	69bb      	ldr	r3, [r7, #24]
 80074f4:	015a      	lsls	r2, r3, #5
 80074f6:	69fb      	ldr	r3, [r7, #28]
 80074f8:	4413      	add	r3, r2
 80074fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074fe:	691b      	ldr	r3, [r3, #16]
 8007500:	69ba      	ldr	r2, [r7, #24]
 8007502:	0151      	lsls	r1, r2, #5
 8007504:	69fa      	ldr	r2, [r7, #28]
 8007506:	440a      	add	r2, r1
 8007508:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800750c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007510:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007514:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007516:	69bb      	ldr	r3, [r7, #24]
 8007518:	015a      	lsls	r2, r3, #5
 800751a:	69fb      	ldr	r3, [r7, #28]
 800751c:	4413      	add	r3, r2
 800751e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007522:	691b      	ldr	r3, [r3, #16]
 8007524:	69ba      	ldr	r2, [r7, #24]
 8007526:	0151      	lsls	r1, r2, #5
 8007528:	69fa      	ldr	r2, [r7, #28]
 800752a:	440a      	add	r2, r1
 800752c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007530:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007534:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007536:	69bb      	ldr	r3, [r7, #24]
 8007538:	015a      	lsls	r2, r3, #5
 800753a:	69fb      	ldr	r3, [r7, #28]
 800753c:	4413      	add	r3, r2
 800753e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007542:	691b      	ldr	r3, [r3, #16]
 8007544:	69ba      	ldr	r2, [r7, #24]
 8007546:	0151      	lsls	r1, r2, #5
 8007548:	69fa      	ldr	r2, [r7, #28]
 800754a:	440a      	add	r2, r1
 800754c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007550:	0cdb      	lsrs	r3, r3, #19
 8007552:	04db      	lsls	r3, r3, #19
 8007554:	6113      	str	r3, [r2, #16]
 8007556:	e074      	b.n	8007642 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007558:	69bb      	ldr	r3, [r7, #24]
 800755a:	015a      	lsls	r2, r3, #5
 800755c:	69fb      	ldr	r3, [r7, #28]
 800755e:	4413      	add	r3, r2
 8007560:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007564:	691b      	ldr	r3, [r3, #16]
 8007566:	69ba      	ldr	r2, [r7, #24]
 8007568:	0151      	lsls	r1, r2, #5
 800756a:	69fa      	ldr	r2, [r7, #28]
 800756c:	440a      	add	r2, r1
 800756e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007572:	0cdb      	lsrs	r3, r3, #19
 8007574:	04db      	lsls	r3, r3, #19
 8007576:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007578:	69bb      	ldr	r3, [r7, #24]
 800757a:	015a      	lsls	r2, r3, #5
 800757c:	69fb      	ldr	r3, [r7, #28]
 800757e:	4413      	add	r3, r2
 8007580:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007584:	691b      	ldr	r3, [r3, #16]
 8007586:	69ba      	ldr	r2, [r7, #24]
 8007588:	0151      	lsls	r1, r2, #5
 800758a:	69fa      	ldr	r2, [r7, #28]
 800758c:	440a      	add	r2, r1
 800758e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007592:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007596:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800759a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800759c:	69bb      	ldr	r3, [r7, #24]
 800759e:	015a      	lsls	r2, r3, #5
 80075a0:	69fb      	ldr	r3, [r7, #28]
 80075a2:	4413      	add	r3, r2
 80075a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075a8:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80075aa:	68bb      	ldr	r3, [r7, #8]
 80075ac:	6999      	ldr	r1, [r3, #24]
 80075ae:	68bb      	ldr	r3, [r7, #8]
 80075b0:	68db      	ldr	r3, [r3, #12]
 80075b2:	440b      	add	r3, r1
 80075b4:	1e59      	subs	r1, r3, #1
 80075b6:	68bb      	ldr	r3, [r7, #8]
 80075b8:	68db      	ldr	r3, [r3, #12]
 80075ba:	fbb1 f3f3 	udiv	r3, r1, r3
 80075be:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80075c0:	4b9d      	ldr	r3, [pc, #628]	; (8007838 <USB_EPStartXfer+0x370>)
 80075c2:	400b      	ands	r3, r1
 80075c4:	69b9      	ldr	r1, [r7, #24]
 80075c6:	0148      	lsls	r0, r1, #5
 80075c8:	69f9      	ldr	r1, [r7, #28]
 80075ca:	4401      	add	r1, r0
 80075cc:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80075d0:	4313      	orrs	r3, r2
 80075d2:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80075d4:	69bb      	ldr	r3, [r7, #24]
 80075d6:	015a      	lsls	r2, r3, #5
 80075d8:	69fb      	ldr	r3, [r7, #28]
 80075da:	4413      	add	r3, r2
 80075dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075e0:	691a      	ldr	r2, [r3, #16]
 80075e2:	68bb      	ldr	r3, [r7, #8]
 80075e4:	699b      	ldr	r3, [r3, #24]
 80075e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80075ea:	69b9      	ldr	r1, [r7, #24]
 80075ec:	0148      	lsls	r0, r1, #5
 80075ee:	69f9      	ldr	r1, [r7, #28]
 80075f0:	4401      	add	r1, r0
 80075f2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80075f6:	4313      	orrs	r3, r2
 80075f8:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80075fa:	68bb      	ldr	r3, [r7, #8]
 80075fc:	791b      	ldrb	r3, [r3, #4]
 80075fe:	2b01      	cmp	r3, #1
 8007600:	d11f      	bne.n	8007642 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8007602:	69bb      	ldr	r3, [r7, #24]
 8007604:	015a      	lsls	r2, r3, #5
 8007606:	69fb      	ldr	r3, [r7, #28]
 8007608:	4413      	add	r3, r2
 800760a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800760e:	691b      	ldr	r3, [r3, #16]
 8007610:	69ba      	ldr	r2, [r7, #24]
 8007612:	0151      	lsls	r1, r2, #5
 8007614:	69fa      	ldr	r2, [r7, #28]
 8007616:	440a      	add	r2, r1
 8007618:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800761c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8007620:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8007622:	69bb      	ldr	r3, [r7, #24]
 8007624:	015a      	lsls	r2, r3, #5
 8007626:	69fb      	ldr	r3, [r7, #28]
 8007628:	4413      	add	r3, r2
 800762a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800762e:	691b      	ldr	r3, [r3, #16]
 8007630:	69ba      	ldr	r2, [r7, #24]
 8007632:	0151      	lsls	r1, r2, #5
 8007634:	69fa      	ldr	r2, [r7, #28]
 8007636:	440a      	add	r2, r1
 8007638:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800763c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007640:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8007642:	79fb      	ldrb	r3, [r7, #7]
 8007644:	2b01      	cmp	r3, #1
 8007646:	d14b      	bne.n	80076e0 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007648:	68bb      	ldr	r3, [r7, #8]
 800764a:	695b      	ldr	r3, [r3, #20]
 800764c:	2b00      	cmp	r3, #0
 800764e:	d009      	beq.n	8007664 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007650:	69bb      	ldr	r3, [r7, #24]
 8007652:	015a      	lsls	r2, r3, #5
 8007654:	69fb      	ldr	r3, [r7, #28]
 8007656:	4413      	add	r3, r2
 8007658:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800765c:	461a      	mov	r2, r3
 800765e:	68bb      	ldr	r3, [r7, #8]
 8007660:	695b      	ldr	r3, [r3, #20]
 8007662:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8007664:	68bb      	ldr	r3, [r7, #8]
 8007666:	791b      	ldrb	r3, [r3, #4]
 8007668:	2b01      	cmp	r3, #1
 800766a:	d128      	bne.n	80076be <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800766c:	69fb      	ldr	r3, [r7, #28]
 800766e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007672:	689b      	ldr	r3, [r3, #8]
 8007674:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007678:	2b00      	cmp	r3, #0
 800767a:	d110      	bne.n	800769e <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800767c:	69bb      	ldr	r3, [r7, #24]
 800767e:	015a      	lsls	r2, r3, #5
 8007680:	69fb      	ldr	r3, [r7, #28]
 8007682:	4413      	add	r3, r2
 8007684:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	69ba      	ldr	r2, [r7, #24]
 800768c:	0151      	lsls	r1, r2, #5
 800768e:	69fa      	ldr	r2, [r7, #28]
 8007690:	440a      	add	r2, r1
 8007692:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007696:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800769a:	6013      	str	r3, [r2, #0]
 800769c:	e00f      	b.n	80076be <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800769e:	69bb      	ldr	r3, [r7, #24]
 80076a0:	015a      	lsls	r2, r3, #5
 80076a2:	69fb      	ldr	r3, [r7, #28]
 80076a4:	4413      	add	r3, r2
 80076a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	69ba      	ldr	r2, [r7, #24]
 80076ae:	0151      	lsls	r1, r2, #5
 80076b0:	69fa      	ldr	r2, [r7, #28]
 80076b2:	440a      	add	r2, r1
 80076b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80076b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80076bc:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80076be:	69bb      	ldr	r3, [r7, #24]
 80076c0:	015a      	lsls	r2, r3, #5
 80076c2:	69fb      	ldr	r3, [r7, #28]
 80076c4:	4413      	add	r3, r2
 80076c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	69ba      	ldr	r2, [r7, #24]
 80076ce:	0151      	lsls	r1, r2, #5
 80076d0:	69fa      	ldr	r2, [r7, #28]
 80076d2:	440a      	add	r2, r1
 80076d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80076d8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80076dc:	6013      	str	r3, [r2, #0]
 80076de:	e133      	b.n	8007948 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80076e0:	69bb      	ldr	r3, [r7, #24]
 80076e2:	015a      	lsls	r2, r3, #5
 80076e4:	69fb      	ldr	r3, [r7, #28]
 80076e6:	4413      	add	r3, r2
 80076e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	69ba      	ldr	r2, [r7, #24]
 80076f0:	0151      	lsls	r1, r2, #5
 80076f2:	69fa      	ldr	r2, [r7, #28]
 80076f4:	440a      	add	r2, r1
 80076f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80076fa:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80076fe:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007700:	68bb      	ldr	r3, [r7, #8]
 8007702:	791b      	ldrb	r3, [r3, #4]
 8007704:	2b01      	cmp	r3, #1
 8007706:	d015      	beq.n	8007734 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8007708:	68bb      	ldr	r3, [r7, #8]
 800770a:	699b      	ldr	r3, [r3, #24]
 800770c:	2b00      	cmp	r3, #0
 800770e:	f000 811b 	beq.w	8007948 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007712:	69fb      	ldr	r3, [r7, #28]
 8007714:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007718:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800771a:	68bb      	ldr	r3, [r7, #8]
 800771c:	781b      	ldrb	r3, [r3, #0]
 800771e:	f003 030f 	and.w	r3, r3, #15
 8007722:	2101      	movs	r1, #1
 8007724:	fa01 f303 	lsl.w	r3, r1, r3
 8007728:	69f9      	ldr	r1, [r7, #28]
 800772a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800772e:	4313      	orrs	r3, r2
 8007730:	634b      	str	r3, [r1, #52]	; 0x34
 8007732:	e109      	b.n	8007948 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007734:	69fb      	ldr	r3, [r7, #28]
 8007736:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800773a:	689b      	ldr	r3, [r3, #8]
 800773c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007740:	2b00      	cmp	r3, #0
 8007742:	d110      	bne.n	8007766 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007744:	69bb      	ldr	r3, [r7, #24]
 8007746:	015a      	lsls	r2, r3, #5
 8007748:	69fb      	ldr	r3, [r7, #28]
 800774a:	4413      	add	r3, r2
 800774c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	69ba      	ldr	r2, [r7, #24]
 8007754:	0151      	lsls	r1, r2, #5
 8007756:	69fa      	ldr	r2, [r7, #28]
 8007758:	440a      	add	r2, r1
 800775a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800775e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007762:	6013      	str	r3, [r2, #0]
 8007764:	e00f      	b.n	8007786 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007766:	69bb      	ldr	r3, [r7, #24]
 8007768:	015a      	lsls	r2, r3, #5
 800776a:	69fb      	ldr	r3, [r7, #28]
 800776c:	4413      	add	r3, r2
 800776e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	69ba      	ldr	r2, [r7, #24]
 8007776:	0151      	lsls	r1, r2, #5
 8007778:	69fa      	ldr	r2, [r7, #28]
 800777a:	440a      	add	r2, r1
 800777c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007780:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007784:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8007786:	68bb      	ldr	r3, [r7, #8]
 8007788:	6919      	ldr	r1, [r3, #16]
 800778a:	68bb      	ldr	r3, [r7, #8]
 800778c:	781a      	ldrb	r2, [r3, #0]
 800778e:	68bb      	ldr	r3, [r7, #8]
 8007790:	699b      	ldr	r3, [r3, #24]
 8007792:	b298      	uxth	r0, r3
 8007794:	79fb      	ldrb	r3, [r7, #7]
 8007796:	9300      	str	r3, [sp, #0]
 8007798:	4603      	mov	r3, r0
 800779a:	68f8      	ldr	r0, [r7, #12]
 800779c:	f000 fade 	bl	8007d5c <USB_WritePacket>
 80077a0:	e0d2      	b.n	8007948 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80077a2:	69bb      	ldr	r3, [r7, #24]
 80077a4:	015a      	lsls	r2, r3, #5
 80077a6:	69fb      	ldr	r3, [r7, #28]
 80077a8:	4413      	add	r3, r2
 80077aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80077ae:	691b      	ldr	r3, [r3, #16]
 80077b0:	69ba      	ldr	r2, [r7, #24]
 80077b2:	0151      	lsls	r1, r2, #5
 80077b4:	69fa      	ldr	r2, [r7, #28]
 80077b6:	440a      	add	r2, r1
 80077b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80077bc:	0cdb      	lsrs	r3, r3, #19
 80077be:	04db      	lsls	r3, r3, #19
 80077c0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80077c2:	69bb      	ldr	r3, [r7, #24]
 80077c4:	015a      	lsls	r2, r3, #5
 80077c6:	69fb      	ldr	r3, [r7, #28]
 80077c8:	4413      	add	r3, r2
 80077ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80077ce:	691b      	ldr	r3, [r3, #16]
 80077d0:	69ba      	ldr	r2, [r7, #24]
 80077d2:	0151      	lsls	r1, r2, #5
 80077d4:	69fa      	ldr	r2, [r7, #28]
 80077d6:	440a      	add	r2, r1
 80077d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80077dc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80077e0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80077e4:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80077e6:	68bb      	ldr	r3, [r7, #8]
 80077e8:	699b      	ldr	r3, [r3, #24]
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d126      	bne.n	800783c <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80077ee:	69bb      	ldr	r3, [r7, #24]
 80077f0:	015a      	lsls	r2, r3, #5
 80077f2:	69fb      	ldr	r3, [r7, #28]
 80077f4:	4413      	add	r3, r2
 80077f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80077fa:	691a      	ldr	r2, [r3, #16]
 80077fc:	68bb      	ldr	r3, [r7, #8]
 80077fe:	68db      	ldr	r3, [r3, #12]
 8007800:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007804:	69b9      	ldr	r1, [r7, #24]
 8007806:	0148      	lsls	r0, r1, #5
 8007808:	69f9      	ldr	r1, [r7, #28]
 800780a:	4401      	add	r1, r0
 800780c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007810:	4313      	orrs	r3, r2
 8007812:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007814:	69bb      	ldr	r3, [r7, #24]
 8007816:	015a      	lsls	r2, r3, #5
 8007818:	69fb      	ldr	r3, [r7, #28]
 800781a:	4413      	add	r3, r2
 800781c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007820:	691b      	ldr	r3, [r3, #16]
 8007822:	69ba      	ldr	r2, [r7, #24]
 8007824:	0151      	lsls	r1, r2, #5
 8007826:	69fa      	ldr	r2, [r7, #28]
 8007828:	440a      	add	r2, r1
 800782a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800782e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007832:	6113      	str	r3, [r2, #16]
 8007834:	e03a      	b.n	80078ac <USB_EPStartXfer+0x3e4>
 8007836:	bf00      	nop
 8007838:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800783c:	68bb      	ldr	r3, [r7, #8]
 800783e:	699a      	ldr	r2, [r3, #24]
 8007840:	68bb      	ldr	r3, [r7, #8]
 8007842:	68db      	ldr	r3, [r3, #12]
 8007844:	4413      	add	r3, r2
 8007846:	1e5a      	subs	r2, r3, #1
 8007848:	68bb      	ldr	r3, [r7, #8]
 800784a:	68db      	ldr	r3, [r3, #12]
 800784c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007850:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8007852:	68bb      	ldr	r3, [r7, #8]
 8007854:	68db      	ldr	r3, [r3, #12]
 8007856:	8afa      	ldrh	r2, [r7, #22]
 8007858:	fb03 f202 	mul.w	r2, r3, r2
 800785c:	68bb      	ldr	r3, [r7, #8]
 800785e:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8007860:	69bb      	ldr	r3, [r7, #24]
 8007862:	015a      	lsls	r2, r3, #5
 8007864:	69fb      	ldr	r3, [r7, #28]
 8007866:	4413      	add	r3, r2
 8007868:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800786c:	691a      	ldr	r2, [r3, #16]
 800786e:	8afb      	ldrh	r3, [r7, #22]
 8007870:	04d9      	lsls	r1, r3, #19
 8007872:	4b38      	ldr	r3, [pc, #224]	; (8007954 <USB_EPStartXfer+0x48c>)
 8007874:	400b      	ands	r3, r1
 8007876:	69b9      	ldr	r1, [r7, #24]
 8007878:	0148      	lsls	r0, r1, #5
 800787a:	69f9      	ldr	r1, [r7, #28]
 800787c:	4401      	add	r1, r0
 800787e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007882:	4313      	orrs	r3, r2
 8007884:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8007886:	69bb      	ldr	r3, [r7, #24]
 8007888:	015a      	lsls	r2, r3, #5
 800788a:	69fb      	ldr	r3, [r7, #28]
 800788c:	4413      	add	r3, r2
 800788e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007892:	691a      	ldr	r2, [r3, #16]
 8007894:	68bb      	ldr	r3, [r7, #8]
 8007896:	69db      	ldr	r3, [r3, #28]
 8007898:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800789c:	69b9      	ldr	r1, [r7, #24]
 800789e:	0148      	lsls	r0, r1, #5
 80078a0:	69f9      	ldr	r1, [r7, #28]
 80078a2:	4401      	add	r1, r0
 80078a4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80078a8:	4313      	orrs	r3, r2
 80078aa:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80078ac:	79fb      	ldrb	r3, [r7, #7]
 80078ae:	2b01      	cmp	r3, #1
 80078b0:	d10d      	bne.n	80078ce <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80078b2:	68bb      	ldr	r3, [r7, #8]
 80078b4:	691b      	ldr	r3, [r3, #16]
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d009      	beq.n	80078ce <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80078ba:	68bb      	ldr	r3, [r7, #8]
 80078bc:	6919      	ldr	r1, [r3, #16]
 80078be:	69bb      	ldr	r3, [r7, #24]
 80078c0:	015a      	lsls	r2, r3, #5
 80078c2:	69fb      	ldr	r3, [r7, #28]
 80078c4:	4413      	add	r3, r2
 80078c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078ca:	460a      	mov	r2, r1
 80078cc:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80078ce:	68bb      	ldr	r3, [r7, #8]
 80078d0:	791b      	ldrb	r3, [r3, #4]
 80078d2:	2b01      	cmp	r3, #1
 80078d4:	d128      	bne.n	8007928 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80078d6:	69fb      	ldr	r3, [r7, #28]
 80078d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80078dc:	689b      	ldr	r3, [r3, #8]
 80078de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d110      	bne.n	8007908 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80078e6:	69bb      	ldr	r3, [r7, #24]
 80078e8:	015a      	lsls	r2, r3, #5
 80078ea:	69fb      	ldr	r3, [r7, #28]
 80078ec:	4413      	add	r3, r2
 80078ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	69ba      	ldr	r2, [r7, #24]
 80078f6:	0151      	lsls	r1, r2, #5
 80078f8:	69fa      	ldr	r2, [r7, #28]
 80078fa:	440a      	add	r2, r1
 80078fc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007900:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007904:	6013      	str	r3, [r2, #0]
 8007906:	e00f      	b.n	8007928 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8007908:	69bb      	ldr	r3, [r7, #24]
 800790a:	015a      	lsls	r2, r3, #5
 800790c:	69fb      	ldr	r3, [r7, #28]
 800790e:	4413      	add	r3, r2
 8007910:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	69ba      	ldr	r2, [r7, #24]
 8007918:	0151      	lsls	r1, r2, #5
 800791a:	69fa      	ldr	r2, [r7, #28]
 800791c:	440a      	add	r2, r1
 800791e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007922:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007926:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007928:	69bb      	ldr	r3, [r7, #24]
 800792a:	015a      	lsls	r2, r3, #5
 800792c:	69fb      	ldr	r3, [r7, #28]
 800792e:	4413      	add	r3, r2
 8007930:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	69ba      	ldr	r2, [r7, #24]
 8007938:	0151      	lsls	r1, r2, #5
 800793a:	69fa      	ldr	r2, [r7, #28]
 800793c:	440a      	add	r2, r1
 800793e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007942:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007946:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007948:	2300      	movs	r3, #0
}
 800794a:	4618      	mov	r0, r3
 800794c:	3720      	adds	r7, #32
 800794e:	46bd      	mov	sp, r7
 8007950:	bd80      	pop	{r7, pc}
 8007952:	bf00      	nop
 8007954:	1ff80000 	.word	0x1ff80000

08007958 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007958:	b480      	push	{r7}
 800795a:	b087      	sub	sp, #28
 800795c:	af00      	add	r7, sp, #0
 800795e:	60f8      	str	r0, [r7, #12]
 8007960:	60b9      	str	r1, [r7, #8]
 8007962:	4613      	mov	r3, r2
 8007964:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800796a:	68bb      	ldr	r3, [r7, #8]
 800796c:	781b      	ldrb	r3, [r3, #0]
 800796e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007970:	68bb      	ldr	r3, [r7, #8]
 8007972:	785b      	ldrb	r3, [r3, #1]
 8007974:	2b01      	cmp	r3, #1
 8007976:	f040 80ce 	bne.w	8007b16 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800797a:	68bb      	ldr	r3, [r7, #8]
 800797c:	699b      	ldr	r3, [r3, #24]
 800797e:	2b00      	cmp	r3, #0
 8007980:	d132      	bne.n	80079e8 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007982:	693b      	ldr	r3, [r7, #16]
 8007984:	015a      	lsls	r2, r3, #5
 8007986:	697b      	ldr	r3, [r7, #20]
 8007988:	4413      	add	r3, r2
 800798a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800798e:	691b      	ldr	r3, [r3, #16]
 8007990:	693a      	ldr	r2, [r7, #16]
 8007992:	0151      	lsls	r1, r2, #5
 8007994:	697a      	ldr	r2, [r7, #20]
 8007996:	440a      	add	r2, r1
 8007998:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800799c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80079a0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80079a4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80079a6:	693b      	ldr	r3, [r7, #16]
 80079a8:	015a      	lsls	r2, r3, #5
 80079aa:	697b      	ldr	r3, [r7, #20]
 80079ac:	4413      	add	r3, r2
 80079ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80079b2:	691b      	ldr	r3, [r3, #16]
 80079b4:	693a      	ldr	r2, [r7, #16]
 80079b6:	0151      	lsls	r1, r2, #5
 80079b8:	697a      	ldr	r2, [r7, #20]
 80079ba:	440a      	add	r2, r1
 80079bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80079c0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80079c4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80079c6:	693b      	ldr	r3, [r7, #16]
 80079c8:	015a      	lsls	r2, r3, #5
 80079ca:	697b      	ldr	r3, [r7, #20]
 80079cc:	4413      	add	r3, r2
 80079ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80079d2:	691b      	ldr	r3, [r3, #16]
 80079d4:	693a      	ldr	r2, [r7, #16]
 80079d6:	0151      	lsls	r1, r2, #5
 80079d8:	697a      	ldr	r2, [r7, #20]
 80079da:	440a      	add	r2, r1
 80079dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80079e0:	0cdb      	lsrs	r3, r3, #19
 80079e2:	04db      	lsls	r3, r3, #19
 80079e4:	6113      	str	r3, [r2, #16]
 80079e6:	e04e      	b.n	8007a86 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80079e8:	693b      	ldr	r3, [r7, #16]
 80079ea:	015a      	lsls	r2, r3, #5
 80079ec:	697b      	ldr	r3, [r7, #20]
 80079ee:	4413      	add	r3, r2
 80079f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80079f4:	691b      	ldr	r3, [r3, #16]
 80079f6:	693a      	ldr	r2, [r7, #16]
 80079f8:	0151      	lsls	r1, r2, #5
 80079fa:	697a      	ldr	r2, [r7, #20]
 80079fc:	440a      	add	r2, r1
 80079fe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007a02:	0cdb      	lsrs	r3, r3, #19
 8007a04:	04db      	lsls	r3, r3, #19
 8007a06:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007a08:	693b      	ldr	r3, [r7, #16]
 8007a0a:	015a      	lsls	r2, r3, #5
 8007a0c:	697b      	ldr	r3, [r7, #20]
 8007a0e:	4413      	add	r3, r2
 8007a10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a14:	691b      	ldr	r3, [r3, #16]
 8007a16:	693a      	ldr	r2, [r7, #16]
 8007a18:	0151      	lsls	r1, r2, #5
 8007a1a:	697a      	ldr	r2, [r7, #20]
 8007a1c:	440a      	add	r2, r1
 8007a1e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007a22:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007a26:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007a2a:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8007a2c:	68bb      	ldr	r3, [r7, #8]
 8007a2e:	699a      	ldr	r2, [r3, #24]
 8007a30:	68bb      	ldr	r3, [r7, #8]
 8007a32:	68db      	ldr	r3, [r3, #12]
 8007a34:	429a      	cmp	r2, r3
 8007a36:	d903      	bls.n	8007a40 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8007a38:	68bb      	ldr	r3, [r7, #8]
 8007a3a:	68da      	ldr	r2, [r3, #12]
 8007a3c:	68bb      	ldr	r3, [r7, #8]
 8007a3e:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007a40:	693b      	ldr	r3, [r7, #16]
 8007a42:	015a      	lsls	r2, r3, #5
 8007a44:	697b      	ldr	r3, [r7, #20]
 8007a46:	4413      	add	r3, r2
 8007a48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a4c:	691b      	ldr	r3, [r3, #16]
 8007a4e:	693a      	ldr	r2, [r7, #16]
 8007a50:	0151      	lsls	r1, r2, #5
 8007a52:	697a      	ldr	r2, [r7, #20]
 8007a54:	440a      	add	r2, r1
 8007a56:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007a5a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007a5e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007a60:	693b      	ldr	r3, [r7, #16]
 8007a62:	015a      	lsls	r2, r3, #5
 8007a64:	697b      	ldr	r3, [r7, #20]
 8007a66:	4413      	add	r3, r2
 8007a68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a6c:	691a      	ldr	r2, [r3, #16]
 8007a6e:	68bb      	ldr	r3, [r7, #8]
 8007a70:	699b      	ldr	r3, [r3, #24]
 8007a72:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007a76:	6939      	ldr	r1, [r7, #16]
 8007a78:	0148      	lsls	r0, r1, #5
 8007a7a:	6979      	ldr	r1, [r7, #20]
 8007a7c:	4401      	add	r1, r0
 8007a7e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007a82:	4313      	orrs	r3, r2
 8007a84:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8007a86:	79fb      	ldrb	r3, [r7, #7]
 8007a88:	2b01      	cmp	r3, #1
 8007a8a:	d11e      	bne.n	8007aca <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007a8c:	68bb      	ldr	r3, [r7, #8]
 8007a8e:	695b      	ldr	r3, [r3, #20]
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d009      	beq.n	8007aa8 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007a94:	693b      	ldr	r3, [r7, #16]
 8007a96:	015a      	lsls	r2, r3, #5
 8007a98:	697b      	ldr	r3, [r7, #20]
 8007a9a:	4413      	add	r3, r2
 8007a9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007aa0:	461a      	mov	r2, r3
 8007aa2:	68bb      	ldr	r3, [r7, #8]
 8007aa4:	695b      	ldr	r3, [r3, #20]
 8007aa6:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007aa8:	693b      	ldr	r3, [r7, #16]
 8007aaa:	015a      	lsls	r2, r3, #5
 8007aac:	697b      	ldr	r3, [r7, #20]
 8007aae:	4413      	add	r3, r2
 8007ab0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	693a      	ldr	r2, [r7, #16]
 8007ab8:	0151      	lsls	r1, r2, #5
 8007aba:	697a      	ldr	r2, [r7, #20]
 8007abc:	440a      	add	r2, r1
 8007abe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007ac2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007ac6:	6013      	str	r3, [r2, #0]
 8007ac8:	e097      	b.n	8007bfa <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007aca:	693b      	ldr	r3, [r7, #16]
 8007acc:	015a      	lsls	r2, r3, #5
 8007ace:	697b      	ldr	r3, [r7, #20]
 8007ad0:	4413      	add	r3, r2
 8007ad2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	693a      	ldr	r2, [r7, #16]
 8007ada:	0151      	lsls	r1, r2, #5
 8007adc:	697a      	ldr	r2, [r7, #20]
 8007ade:	440a      	add	r2, r1
 8007ae0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007ae4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007ae8:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8007aea:	68bb      	ldr	r3, [r7, #8]
 8007aec:	699b      	ldr	r3, [r3, #24]
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	f000 8083 	beq.w	8007bfa <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007af4:	697b      	ldr	r3, [r7, #20]
 8007af6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007afa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007afc:	68bb      	ldr	r3, [r7, #8]
 8007afe:	781b      	ldrb	r3, [r3, #0]
 8007b00:	f003 030f 	and.w	r3, r3, #15
 8007b04:	2101      	movs	r1, #1
 8007b06:	fa01 f303 	lsl.w	r3, r1, r3
 8007b0a:	6979      	ldr	r1, [r7, #20]
 8007b0c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007b10:	4313      	orrs	r3, r2
 8007b12:	634b      	str	r3, [r1, #52]	; 0x34
 8007b14:	e071      	b.n	8007bfa <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007b16:	693b      	ldr	r3, [r7, #16]
 8007b18:	015a      	lsls	r2, r3, #5
 8007b1a:	697b      	ldr	r3, [r7, #20]
 8007b1c:	4413      	add	r3, r2
 8007b1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b22:	691b      	ldr	r3, [r3, #16]
 8007b24:	693a      	ldr	r2, [r7, #16]
 8007b26:	0151      	lsls	r1, r2, #5
 8007b28:	697a      	ldr	r2, [r7, #20]
 8007b2a:	440a      	add	r2, r1
 8007b2c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007b30:	0cdb      	lsrs	r3, r3, #19
 8007b32:	04db      	lsls	r3, r3, #19
 8007b34:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007b36:	693b      	ldr	r3, [r7, #16]
 8007b38:	015a      	lsls	r2, r3, #5
 8007b3a:	697b      	ldr	r3, [r7, #20]
 8007b3c:	4413      	add	r3, r2
 8007b3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b42:	691b      	ldr	r3, [r3, #16]
 8007b44:	693a      	ldr	r2, [r7, #16]
 8007b46:	0151      	lsls	r1, r2, #5
 8007b48:	697a      	ldr	r2, [r7, #20]
 8007b4a:	440a      	add	r2, r1
 8007b4c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007b50:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007b54:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007b58:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8007b5a:	68bb      	ldr	r3, [r7, #8]
 8007b5c:	699b      	ldr	r3, [r3, #24]
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d003      	beq.n	8007b6a <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8007b62:	68bb      	ldr	r3, [r7, #8]
 8007b64:	68da      	ldr	r2, [r3, #12]
 8007b66:	68bb      	ldr	r3, [r7, #8]
 8007b68:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8007b6a:	68bb      	ldr	r3, [r7, #8]
 8007b6c:	68da      	ldr	r2, [r3, #12]
 8007b6e:	68bb      	ldr	r3, [r7, #8]
 8007b70:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007b72:	693b      	ldr	r3, [r7, #16]
 8007b74:	015a      	lsls	r2, r3, #5
 8007b76:	697b      	ldr	r3, [r7, #20]
 8007b78:	4413      	add	r3, r2
 8007b7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b7e:	691b      	ldr	r3, [r3, #16]
 8007b80:	693a      	ldr	r2, [r7, #16]
 8007b82:	0151      	lsls	r1, r2, #5
 8007b84:	697a      	ldr	r2, [r7, #20]
 8007b86:	440a      	add	r2, r1
 8007b88:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007b8c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007b90:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8007b92:	693b      	ldr	r3, [r7, #16]
 8007b94:	015a      	lsls	r2, r3, #5
 8007b96:	697b      	ldr	r3, [r7, #20]
 8007b98:	4413      	add	r3, r2
 8007b9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b9e:	691a      	ldr	r2, [r3, #16]
 8007ba0:	68bb      	ldr	r3, [r7, #8]
 8007ba2:	69db      	ldr	r3, [r3, #28]
 8007ba4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007ba8:	6939      	ldr	r1, [r7, #16]
 8007baa:	0148      	lsls	r0, r1, #5
 8007bac:	6979      	ldr	r1, [r7, #20]
 8007bae:	4401      	add	r1, r0
 8007bb0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007bb4:	4313      	orrs	r3, r2
 8007bb6:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8007bb8:	79fb      	ldrb	r3, [r7, #7]
 8007bba:	2b01      	cmp	r3, #1
 8007bbc:	d10d      	bne.n	8007bda <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8007bbe:	68bb      	ldr	r3, [r7, #8]
 8007bc0:	691b      	ldr	r3, [r3, #16]
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d009      	beq.n	8007bda <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8007bc6:	68bb      	ldr	r3, [r7, #8]
 8007bc8:	6919      	ldr	r1, [r3, #16]
 8007bca:	693b      	ldr	r3, [r7, #16]
 8007bcc:	015a      	lsls	r2, r3, #5
 8007bce:	697b      	ldr	r3, [r7, #20]
 8007bd0:	4413      	add	r3, r2
 8007bd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007bd6:	460a      	mov	r2, r1
 8007bd8:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007bda:	693b      	ldr	r3, [r7, #16]
 8007bdc:	015a      	lsls	r2, r3, #5
 8007bde:	697b      	ldr	r3, [r7, #20]
 8007be0:	4413      	add	r3, r2
 8007be2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	693a      	ldr	r2, [r7, #16]
 8007bea:	0151      	lsls	r1, r2, #5
 8007bec:	697a      	ldr	r2, [r7, #20]
 8007bee:	440a      	add	r2, r1
 8007bf0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007bf4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007bf8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007bfa:	2300      	movs	r3, #0
}
 8007bfc:	4618      	mov	r0, r3
 8007bfe:	371c      	adds	r7, #28
 8007c00:	46bd      	mov	sp, r7
 8007c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c06:	4770      	bx	lr

08007c08 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007c08:	b480      	push	{r7}
 8007c0a:	b087      	sub	sp, #28
 8007c0c:	af00      	add	r7, sp, #0
 8007c0e:	6078      	str	r0, [r7, #4]
 8007c10:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007c12:	2300      	movs	r3, #0
 8007c14:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8007c16:	2300      	movs	r3, #0
 8007c18:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007c1e:	683b      	ldr	r3, [r7, #0]
 8007c20:	785b      	ldrb	r3, [r3, #1]
 8007c22:	2b01      	cmp	r3, #1
 8007c24:	d14a      	bne.n	8007cbc <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007c26:	683b      	ldr	r3, [r7, #0]
 8007c28:	781b      	ldrb	r3, [r3, #0]
 8007c2a:	015a      	lsls	r2, r3, #5
 8007c2c:	693b      	ldr	r3, [r7, #16]
 8007c2e:	4413      	add	r3, r2
 8007c30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007c3a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007c3e:	f040 8086 	bne.w	8007d4e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8007c42:	683b      	ldr	r3, [r7, #0]
 8007c44:	781b      	ldrb	r3, [r3, #0]
 8007c46:	015a      	lsls	r2, r3, #5
 8007c48:	693b      	ldr	r3, [r7, #16]
 8007c4a:	4413      	add	r3, r2
 8007c4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	683a      	ldr	r2, [r7, #0]
 8007c54:	7812      	ldrb	r2, [r2, #0]
 8007c56:	0151      	lsls	r1, r2, #5
 8007c58:	693a      	ldr	r2, [r7, #16]
 8007c5a:	440a      	add	r2, r1
 8007c5c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007c60:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007c64:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8007c66:	683b      	ldr	r3, [r7, #0]
 8007c68:	781b      	ldrb	r3, [r3, #0]
 8007c6a:	015a      	lsls	r2, r3, #5
 8007c6c:	693b      	ldr	r3, [r7, #16]
 8007c6e:	4413      	add	r3, r2
 8007c70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	683a      	ldr	r2, [r7, #0]
 8007c78:	7812      	ldrb	r2, [r2, #0]
 8007c7a:	0151      	lsls	r1, r2, #5
 8007c7c:	693a      	ldr	r2, [r7, #16]
 8007c7e:	440a      	add	r2, r1
 8007c80:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007c84:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007c88:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	3301      	adds	r3, #1
 8007c8e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	f242 7210 	movw	r2, #10000	; 0x2710
 8007c96:	4293      	cmp	r3, r2
 8007c98:	d902      	bls.n	8007ca0 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8007c9a:	2301      	movs	r3, #1
 8007c9c:	75fb      	strb	r3, [r7, #23]
          break;
 8007c9e:	e056      	b.n	8007d4e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8007ca0:	683b      	ldr	r3, [r7, #0]
 8007ca2:	781b      	ldrb	r3, [r3, #0]
 8007ca4:	015a      	lsls	r2, r3, #5
 8007ca6:	693b      	ldr	r3, [r7, #16]
 8007ca8:	4413      	add	r3, r2
 8007caa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007cb4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007cb8:	d0e7      	beq.n	8007c8a <USB_EPStopXfer+0x82>
 8007cba:	e048      	b.n	8007d4e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007cbc:	683b      	ldr	r3, [r7, #0]
 8007cbe:	781b      	ldrb	r3, [r3, #0]
 8007cc0:	015a      	lsls	r2, r3, #5
 8007cc2:	693b      	ldr	r3, [r7, #16]
 8007cc4:	4413      	add	r3, r2
 8007cc6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007cd0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007cd4:	d13b      	bne.n	8007d4e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8007cd6:	683b      	ldr	r3, [r7, #0]
 8007cd8:	781b      	ldrb	r3, [r3, #0]
 8007cda:	015a      	lsls	r2, r3, #5
 8007cdc:	693b      	ldr	r3, [r7, #16]
 8007cde:	4413      	add	r3, r2
 8007ce0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	683a      	ldr	r2, [r7, #0]
 8007ce8:	7812      	ldrb	r2, [r2, #0]
 8007cea:	0151      	lsls	r1, r2, #5
 8007cec:	693a      	ldr	r2, [r7, #16]
 8007cee:	440a      	add	r2, r1
 8007cf0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007cf4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007cf8:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8007cfa:	683b      	ldr	r3, [r7, #0]
 8007cfc:	781b      	ldrb	r3, [r3, #0]
 8007cfe:	015a      	lsls	r2, r3, #5
 8007d00:	693b      	ldr	r3, [r7, #16]
 8007d02:	4413      	add	r3, r2
 8007d04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	683a      	ldr	r2, [r7, #0]
 8007d0c:	7812      	ldrb	r2, [r2, #0]
 8007d0e:	0151      	lsls	r1, r2, #5
 8007d10:	693a      	ldr	r2, [r7, #16]
 8007d12:	440a      	add	r2, r1
 8007d14:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007d18:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007d1c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	3301      	adds	r3, #1
 8007d22:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	f242 7210 	movw	r2, #10000	; 0x2710
 8007d2a:	4293      	cmp	r3, r2
 8007d2c:	d902      	bls.n	8007d34 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8007d2e:	2301      	movs	r3, #1
 8007d30:	75fb      	strb	r3, [r7, #23]
          break;
 8007d32:	e00c      	b.n	8007d4e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8007d34:	683b      	ldr	r3, [r7, #0]
 8007d36:	781b      	ldrb	r3, [r3, #0]
 8007d38:	015a      	lsls	r2, r3, #5
 8007d3a:	693b      	ldr	r3, [r7, #16]
 8007d3c:	4413      	add	r3, r2
 8007d3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007d48:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007d4c:	d0e7      	beq.n	8007d1e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8007d4e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d50:	4618      	mov	r0, r3
 8007d52:	371c      	adds	r7, #28
 8007d54:	46bd      	mov	sp, r7
 8007d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d5a:	4770      	bx	lr

08007d5c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007d5c:	b480      	push	{r7}
 8007d5e:	b089      	sub	sp, #36	; 0x24
 8007d60:	af00      	add	r7, sp, #0
 8007d62:	60f8      	str	r0, [r7, #12]
 8007d64:	60b9      	str	r1, [r7, #8]
 8007d66:	4611      	mov	r1, r2
 8007d68:	461a      	mov	r2, r3
 8007d6a:	460b      	mov	r3, r1
 8007d6c:	71fb      	strb	r3, [r7, #7]
 8007d6e:	4613      	mov	r3, r2
 8007d70:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8007d76:	68bb      	ldr	r3, [r7, #8]
 8007d78:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8007d7a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d123      	bne.n	8007dca <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8007d82:	88bb      	ldrh	r3, [r7, #4]
 8007d84:	3303      	adds	r3, #3
 8007d86:	089b      	lsrs	r3, r3, #2
 8007d88:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8007d8a:	2300      	movs	r3, #0
 8007d8c:	61bb      	str	r3, [r7, #24]
 8007d8e:	e018      	b.n	8007dc2 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007d90:	79fb      	ldrb	r3, [r7, #7]
 8007d92:	031a      	lsls	r2, r3, #12
 8007d94:	697b      	ldr	r3, [r7, #20]
 8007d96:	4413      	add	r3, r2
 8007d98:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007d9c:	461a      	mov	r2, r3
 8007d9e:	69fb      	ldr	r3, [r7, #28]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007da4:	69fb      	ldr	r3, [r7, #28]
 8007da6:	3301      	adds	r3, #1
 8007da8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007daa:	69fb      	ldr	r3, [r7, #28]
 8007dac:	3301      	adds	r3, #1
 8007dae:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007db0:	69fb      	ldr	r3, [r7, #28]
 8007db2:	3301      	adds	r3, #1
 8007db4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007db6:	69fb      	ldr	r3, [r7, #28]
 8007db8:	3301      	adds	r3, #1
 8007dba:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007dbc:	69bb      	ldr	r3, [r7, #24]
 8007dbe:	3301      	adds	r3, #1
 8007dc0:	61bb      	str	r3, [r7, #24]
 8007dc2:	69ba      	ldr	r2, [r7, #24]
 8007dc4:	693b      	ldr	r3, [r7, #16]
 8007dc6:	429a      	cmp	r2, r3
 8007dc8:	d3e2      	bcc.n	8007d90 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8007dca:	2300      	movs	r3, #0
}
 8007dcc:	4618      	mov	r0, r3
 8007dce:	3724      	adds	r7, #36	; 0x24
 8007dd0:	46bd      	mov	sp, r7
 8007dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd6:	4770      	bx	lr

08007dd8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007dd8:	b480      	push	{r7}
 8007dda:	b08b      	sub	sp, #44	; 0x2c
 8007ddc:	af00      	add	r7, sp, #0
 8007dde:	60f8      	str	r0, [r7, #12]
 8007de0:	60b9      	str	r1, [r7, #8]
 8007de2:	4613      	mov	r3, r2
 8007de4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8007dea:	68bb      	ldr	r3, [r7, #8]
 8007dec:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8007dee:	88fb      	ldrh	r3, [r7, #6]
 8007df0:	089b      	lsrs	r3, r3, #2
 8007df2:	b29b      	uxth	r3, r3
 8007df4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8007df6:	88fb      	ldrh	r3, [r7, #6]
 8007df8:	f003 0303 	and.w	r3, r3, #3
 8007dfc:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8007dfe:	2300      	movs	r3, #0
 8007e00:	623b      	str	r3, [r7, #32]
 8007e02:	e014      	b.n	8007e2e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007e04:	69bb      	ldr	r3, [r7, #24]
 8007e06:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007e0a:	681a      	ldr	r2, [r3, #0]
 8007e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e0e:	601a      	str	r2, [r3, #0]
    pDest++;
 8007e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e12:	3301      	adds	r3, #1
 8007e14:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e18:	3301      	adds	r3, #1
 8007e1a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e1e:	3301      	adds	r3, #1
 8007e20:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e24:	3301      	adds	r3, #1
 8007e26:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8007e28:	6a3b      	ldr	r3, [r7, #32]
 8007e2a:	3301      	adds	r3, #1
 8007e2c:	623b      	str	r3, [r7, #32]
 8007e2e:	6a3a      	ldr	r2, [r7, #32]
 8007e30:	697b      	ldr	r3, [r7, #20]
 8007e32:	429a      	cmp	r2, r3
 8007e34:	d3e6      	bcc.n	8007e04 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8007e36:	8bfb      	ldrh	r3, [r7, #30]
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d01e      	beq.n	8007e7a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8007e3c:	2300      	movs	r3, #0
 8007e3e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8007e40:	69bb      	ldr	r3, [r7, #24]
 8007e42:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007e46:	461a      	mov	r2, r3
 8007e48:	f107 0310 	add.w	r3, r7, #16
 8007e4c:	6812      	ldr	r2, [r2, #0]
 8007e4e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8007e50:	693a      	ldr	r2, [r7, #16]
 8007e52:	6a3b      	ldr	r3, [r7, #32]
 8007e54:	b2db      	uxtb	r3, r3
 8007e56:	00db      	lsls	r3, r3, #3
 8007e58:	fa22 f303 	lsr.w	r3, r2, r3
 8007e5c:	b2da      	uxtb	r2, r3
 8007e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e60:	701a      	strb	r2, [r3, #0]
      i++;
 8007e62:	6a3b      	ldr	r3, [r7, #32]
 8007e64:	3301      	adds	r3, #1
 8007e66:	623b      	str	r3, [r7, #32]
      pDest++;
 8007e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e6a:	3301      	adds	r3, #1
 8007e6c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8007e6e:	8bfb      	ldrh	r3, [r7, #30]
 8007e70:	3b01      	subs	r3, #1
 8007e72:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8007e74:	8bfb      	ldrh	r3, [r7, #30]
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d1ea      	bne.n	8007e50 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8007e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007e7c:	4618      	mov	r0, r3
 8007e7e:	372c      	adds	r7, #44	; 0x2c
 8007e80:	46bd      	mov	sp, r7
 8007e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e86:	4770      	bx	lr

08007e88 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007e88:	b480      	push	{r7}
 8007e8a:	b085      	sub	sp, #20
 8007e8c:	af00      	add	r7, sp, #0
 8007e8e:	6078      	str	r0, [r7, #4]
 8007e90:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007e96:	683b      	ldr	r3, [r7, #0]
 8007e98:	781b      	ldrb	r3, [r3, #0]
 8007e9a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007e9c:	683b      	ldr	r3, [r7, #0]
 8007e9e:	785b      	ldrb	r3, [r3, #1]
 8007ea0:	2b01      	cmp	r3, #1
 8007ea2:	d12c      	bne.n	8007efe <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007ea4:	68bb      	ldr	r3, [r7, #8]
 8007ea6:	015a      	lsls	r2, r3, #5
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	4413      	add	r3, r2
 8007eac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	db12      	blt.n	8007edc <USB_EPSetStall+0x54>
 8007eb6:	68bb      	ldr	r3, [r7, #8]
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d00f      	beq.n	8007edc <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8007ebc:	68bb      	ldr	r3, [r7, #8]
 8007ebe:	015a      	lsls	r2, r3, #5
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	4413      	add	r3, r2
 8007ec4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	68ba      	ldr	r2, [r7, #8]
 8007ecc:	0151      	lsls	r1, r2, #5
 8007ece:	68fa      	ldr	r2, [r7, #12]
 8007ed0:	440a      	add	r2, r1
 8007ed2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007ed6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007eda:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8007edc:	68bb      	ldr	r3, [r7, #8]
 8007ede:	015a      	lsls	r2, r3, #5
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	4413      	add	r3, r2
 8007ee4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	68ba      	ldr	r2, [r7, #8]
 8007eec:	0151      	lsls	r1, r2, #5
 8007eee:	68fa      	ldr	r2, [r7, #12]
 8007ef0:	440a      	add	r2, r1
 8007ef2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007ef6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007efa:	6013      	str	r3, [r2, #0]
 8007efc:	e02b      	b.n	8007f56 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007efe:	68bb      	ldr	r3, [r7, #8]
 8007f00:	015a      	lsls	r2, r3, #5
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	4413      	add	r3, r2
 8007f06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	db12      	blt.n	8007f36 <USB_EPSetStall+0xae>
 8007f10:	68bb      	ldr	r3, [r7, #8]
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d00f      	beq.n	8007f36 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8007f16:	68bb      	ldr	r3, [r7, #8]
 8007f18:	015a      	lsls	r2, r3, #5
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	4413      	add	r3, r2
 8007f1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	68ba      	ldr	r2, [r7, #8]
 8007f26:	0151      	lsls	r1, r2, #5
 8007f28:	68fa      	ldr	r2, [r7, #12]
 8007f2a:	440a      	add	r2, r1
 8007f2c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007f30:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007f34:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8007f36:	68bb      	ldr	r3, [r7, #8]
 8007f38:	015a      	lsls	r2, r3, #5
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	4413      	add	r3, r2
 8007f3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	68ba      	ldr	r2, [r7, #8]
 8007f46:	0151      	lsls	r1, r2, #5
 8007f48:	68fa      	ldr	r2, [r7, #12]
 8007f4a:	440a      	add	r2, r1
 8007f4c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007f50:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007f54:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007f56:	2300      	movs	r3, #0
}
 8007f58:	4618      	mov	r0, r3
 8007f5a:	3714      	adds	r7, #20
 8007f5c:	46bd      	mov	sp, r7
 8007f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f62:	4770      	bx	lr

08007f64 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007f64:	b480      	push	{r7}
 8007f66:	b085      	sub	sp, #20
 8007f68:	af00      	add	r7, sp, #0
 8007f6a:	6078      	str	r0, [r7, #4]
 8007f6c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007f72:	683b      	ldr	r3, [r7, #0]
 8007f74:	781b      	ldrb	r3, [r3, #0]
 8007f76:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007f78:	683b      	ldr	r3, [r7, #0]
 8007f7a:	785b      	ldrb	r3, [r3, #1]
 8007f7c:	2b01      	cmp	r3, #1
 8007f7e:	d128      	bne.n	8007fd2 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007f80:	68bb      	ldr	r3, [r7, #8]
 8007f82:	015a      	lsls	r2, r3, #5
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	4413      	add	r3, r2
 8007f88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	68ba      	ldr	r2, [r7, #8]
 8007f90:	0151      	lsls	r1, r2, #5
 8007f92:	68fa      	ldr	r2, [r7, #12]
 8007f94:	440a      	add	r2, r1
 8007f96:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007f9a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007f9e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007fa0:	683b      	ldr	r3, [r7, #0]
 8007fa2:	791b      	ldrb	r3, [r3, #4]
 8007fa4:	2b03      	cmp	r3, #3
 8007fa6:	d003      	beq.n	8007fb0 <USB_EPClearStall+0x4c>
 8007fa8:	683b      	ldr	r3, [r7, #0]
 8007faa:	791b      	ldrb	r3, [r3, #4]
 8007fac:	2b02      	cmp	r3, #2
 8007fae:	d138      	bne.n	8008022 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007fb0:	68bb      	ldr	r3, [r7, #8]
 8007fb2:	015a      	lsls	r2, r3, #5
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	4413      	add	r3, r2
 8007fb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	68ba      	ldr	r2, [r7, #8]
 8007fc0:	0151      	lsls	r1, r2, #5
 8007fc2:	68fa      	ldr	r2, [r7, #12]
 8007fc4:	440a      	add	r2, r1
 8007fc6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007fca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007fce:	6013      	str	r3, [r2, #0]
 8007fd0:	e027      	b.n	8008022 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007fd2:	68bb      	ldr	r3, [r7, #8]
 8007fd4:	015a      	lsls	r2, r3, #5
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	4413      	add	r3, r2
 8007fda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	68ba      	ldr	r2, [r7, #8]
 8007fe2:	0151      	lsls	r1, r2, #5
 8007fe4:	68fa      	ldr	r2, [r7, #12]
 8007fe6:	440a      	add	r2, r1
 8007fe8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007fec:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007ff0:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007ff2:	683b      	ldr	r3, [r7, #0]
 8007ff4:	791b      	ldrb	r3, [r3, #4]
 8007ff6:	2b03      	cmp	r3, #3
 8007ff8:	d003      	beq.n	8008002 <USB_EPClearStall+0x9e>
 8007ffa:	683b      	ldr	r3, [r7, #0]
 8007ffc:	791b      	ldrb	r3, [r3, #4]
 8007ffe:	2b02      	cmp	r3, #2
 8008000:	d10f      	bne.n	8008022 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008002:	68bb      	ldr	r3, [r7, #8]
 8008004:	015a      	lsls	r2, r3, #5
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	4413      	add	r3, r2
 800800a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	68ba      	ldr	r2, [r7, #8]
 8008012:	0151      	lsls	r1, r2, #5
 8008014:	68fa      	ldr	r2, [r7, #12]
 8008016:	440a      	add	r2, r1
 8008018:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800801c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008020:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8008022:	2300      	movs	r3, #0
}
 8008024:	4618      	mov	r0, r3
 8008026:	3714      	adds	r7, #20
 8008028:	46bd      	mov	sp, r7
 800802a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800802e:	4770      	bx	lr

08008030 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8008030:	b480      	push	{r7}
 8008032:	b085      	sub	sp, #20
 8008034:	af00      	add	r7, sp, #0
 8008036:	6078      	str	r0, [r7, #4]
 8008038:	460b      	mov	r3, r1
 800803a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	68fa      	ldr	r2, [r7, #12]
 800804a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800804e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8008052:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800805a:	681a      	ldr	r2, [r3, #0]
 800805c:	78fb      	ldrb	r3, [r7, #3]
 800805e:	011b      	lsls	r3, r3, #4
 8008060:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8008064:	68f9      	ldr	r1, [r7, #12]
 8008066:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800806a:	4313      	orrs	r3, r2
 800806c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800806e:	2300      	movs	r3, #0
}
 8008070:	4618      	mov	r0, r3
 8008072:	3714      	adds	r7, #20
 8008074:	46bd      	mov	sp, r7
 8008076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800807a:	4770      	bx	lr

0800807c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800807c:	b480      	push	{r7}
 800807e:	b085      	sub	sp, #20
 8008080:	af00      	add	r7, sp, #0
 8008082:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	68fa      	ldr	r2, [r7, #12]
 8008092:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008096:	f023 0303 	bic.w	r3, r3, #3
 800809a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80080a2:	685b      	ldr	r3, [r3, #4]
 80080a4:	68fa      	ldr	r2, [r7, #12]
 80080a6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80080aa:	f023 0302 	bic.w	r3, r3, #2
 80080ae:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80080b0:	2300      	movs	r3, #0
}
 80080b2:	4618      	mov	r0, r3
 80080b4:	3714      	adds	r7, #20
 80080b6:	46bd      	mov	sp, r7
 80080b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080bc:	4770      	bx	lr

080080be <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80080be:	b480      	push	{r7}
 80080c0:	b085      	sub	sp, #20
 80080c2:	af00      	add	r7, sp, #0
 80080c4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	68fa      	ldr	r2, [r7, #12]
 80080d4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80080d8:	f023 0303 	bic.w	r3, r3, #3
 80080dc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80080e4:	685b      	ldr	r3, [r3, #4]
 80080e6:	68fa      	ldr	r2, [r7, #12]
 80080e8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80080ec:	f043 0302 	orr.w	r3, r3, #2
 80080f0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80080f2:	2300      	movs	r3, #0
}
 80080f4:	4618      	mov	r0, r3
 80080f6:	3714      	adds	r7, #20
 80080f8:	46bd      	mov	sp, r7
 80080fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080fe:	4770      	bx	lr

08008100 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8008100:	b480      	push	{r7}
 8008102:	b085      	sub	sp, #20
 8008104:	af00      	add	r7, sp, #0
 8008106:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	695b      	ldr	r3, [r3, #20]
 800810c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	699b      	ldr	r3, [r3, #24]
 8008112:	68fa      	ldr	r2, [r7, #12]
 8008114:	4013      	ands	r3, r2
 8008116:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8008118:	68fb      	ldr	r3, [r7, #12]
}
 800811a:	4618      	mov	r0, r3
 800811c:	3714      	adds	r7, #20
 800811e:	46bd      	mov	sp, r7
 8008120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008124:	4770      	bx	lr

08008126 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8008126:	b480      	push	{r7}
 8008128:	b085      	sub	sp, #20
 800812a:	af00      	add	r7, sp, #0
 800812c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008138:	699b      	ldr	r3, [r3, #24]
 800813a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008142:	69db      	ldr	r3, [r3, #28]
 8008144:	68ba      	ldr	r2, [r7, #8]
 8008146:	4013      	ands	r3, r2
 8008148:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800814a:	68bb      	ldr	r3, [r7, #8]
 800814c:	0c1b      	lsrs	r3, r3, #16
}
 800814e:	4618      	mov	r0, r3
 8008150:	3714      	adds	r7, #20
 8008152:	46bd      	mov	sp, r7
 8008154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008158:	4770      	bx	lr

0800815a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800815a:	b480      	push	{r7}
 800815c:	b085      	sub	sp, #20
 800815e:	af00      	add	r7, sp, #0
 8008160:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800816c:	699b      	ldr	r3, [r3, #24]
 800816e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008176:	69db      	ldr	r3, [r3, #28]
 8008178:	68ba      	ldr	r2, [r7, #8]
 800817a:	4013      	ands	r3, r2
 800817c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800817e:	68bb      	ldr	r3, [r7, #8]
 8008180:	b29b      	uxth	r3, r3
}
 8008182:	4618      	mov	r0, r3
 8008184:	3714      	adds	r7, #20
 8008186:	46bd      	mov	sp, r7
 8008188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800818c:	4770      	bx	lr

0800818e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800818e:	b480      	push	{r7}
 8008190:	b085      	sub	sp, #20
 8008192:	af00      	add	r7, sp, #0
 8008194:	6078      	str	r0, [r7, #4]
 8008196:	460b      	mov	r3, r1
 8008198:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800819e:	78fb      	ldrb	r3, [r7, #3]
 80081a0:	015a      	lsls	r2, r3, #5
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	4413      	add	r3, r2
 80081a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80081aa:	689b      	ldr	r3, [r3, #8]
 80081ac:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80081b4:	695b      	ldr	r3, [r3, #20]
 80081b6:	68ba      	ldr	r2, [r7, #8]
 80081b8:	4013      	ands	r3, r2
 80081ba:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80081bc:	68bb      	ldr	r3, [r7, #8]
}
 80081be:	4618      	mov	r0, r3
 80081c0:	3714      	adds	r7, #20
 80081c2:	46bd      	mov	sp, r7
 80081c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c8:	4770      	bx	lr

080081ca <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80081ca:	b480      	push	{r7}
 80081cc:	b087      	sub	sp, #28
 80081ce:	af00      	add	r7, sp, #0
 80081d0:	6078      	str	r0, [r7, #4]
 80081d2:	460b      	mov	r3, r1
 80081d4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80081da:	697b      	ldr	r3, [r7, #20]
 80081dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80081e0:	691b      	ldr	r3, [r3, #16]
 80081e2:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80081e4:	697b      	ldr	r3, [r7, #20]
 80081e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80081ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80081ec:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80081ee:	78fb      	ldrb	r3, [r7, #3]
 80081f0:	f003 030f 	and.w	r3, r3, #15
 80081f4:	68fa      	ldr	r2, [r7, #12]
 80081f6:	fa22 f303 	lsr.w	r3, r2, r3
 80081fa:	01db      	lsls	r3, r3, #7
 80081fc:	b2db      	uxtb	r3, r3
 80081fe:	693a      	ldr	r2, [r7, #16]
 8008200:	4313      	orrs	r3, r2
 8008202:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8008204:	78fb      	ldrb	r3, [r7, #3]
 8008206:	015a      	lsls	r2, r3, #5
 8008208:	697b      	ldr	r3, [r7, #20]
 800820a:	4413      	add	r3, r2
 800820c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008210:	689b      	ldr	r3, [r3, #8]
 8008212:	693a      	ldr	r2, [r7, #16]
 8008214:	4013      	ands	r3, r2
 8008216:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008218:	68bb      	ldr	r3, [r7, #8]
}
 800821a:	4618      	mov	r0, r3
 800821c:	371c      	adds	r7, #28
 800821e:	46bd      	mov	sp, r7
 8008220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008224:	4770      	bx	lr

08008226 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8008226:	b480      	push	{r7}
 8008228:	b083      	sub	sp, #12
 800822a:	af00      	add	r7, sp, #0
 800822c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	695b      	ldr	r3, [r3, #20]
 8008232:	f003 0301 	and.w	r3, r3, #1
}
 8008236:	4618      	mov	r0, r3
 8008238:	370c      	adds	r7, #12
 800823a:	46bd      	mov	sp, r7
 800823c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008240:	4770      	bx	lr

08008242 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8008242:	b480      	push	{r7}
 8008244:	b085      	sub	sp, #20
 8008246:	af00      	add	r7, sp, #0
 8008248:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	68fa      	ldr	r2, [r7, #12]
 8008258:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800825c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8008260:	f023 0307 	bic.w	r3, r3, #7
 8008264:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800826c:	685b      	ldr	r3, [r3, #4]
 800826e:	68fa      	ldr	r2, [r7, #12]
 8008270:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008274:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008278:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800827a:	2300      	movs	r3, #0
}
 800827c:	4618      	mov	r0, r3
 800827e:	3714      	adds	r7, #20
 8008280:	46bd      	mov	sp, r7
 8008282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008286:	4770      	bx	lr

08008288 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8008288:	b480      	push	{r7}
 800828a:	b087      	sub	sp, #28
 800828c:	af00      	add	r7, sp, #0
 800828e:	60f8      	str	r0, [r7, #12]
 8008290:	460b      	mov	r3, r1
 8008292:	607a      	str	r2, [r7, #4]
 8008294:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	333c      	adds	r3, #60	; 0x3c
 800829e:	3304      	adds	r3, #4
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80082a4:	693b      	ldr	r3, [r7, #16]
 80082a6:	4a26      	ldr	r2, [pc, #152]	; (8008340 <USB_EP0_OutStart+0xb8>)
 80082a8:	4293      	cmp	r3, r2
 80082aa:	d90a      	bls.n	80082c2 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80082ac:	697b      	ldr	r3, [r7, #20]
 80082ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80082b8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80082bc:	d101      	bne.n	80082c2 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80082be:	2300      	movs	r3, #0
 80082c0:	e037      	b.n	8008332 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80082c2:	697b      	ldr	r3, [r7, #20]
 80082c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082c8:	461a      	mov	r2, r3
 80082ca:	2300      	movs	r3, #0
 80082cc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80082ce:	697b      	ldr	r3, [r7, #20]
 80082d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082d4:	691b      	ldr	r3, [r3, #16]
 80082d6:	697a      	ldr	r2, [r7, #20]
 80082d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80082dc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80082e0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80082e2:	697b      	ldr	r3, [r7, #20]
 80082e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082e8:	691b      	ldr	r3, [r3, #16]
 80082ea:	697a      	ldr	r2, [r7, #20]
 80082ec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80082f0:	f043 0318 	orr.w	r3, r3, #24
 80082f4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80082f6:	697b      	ldr	r3, [r7, #20]
 80082f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082fc:	691b      	ldr	r3, [r3, #16]
 80082fe:	697a      	ldr	r2, [r7, #20]
 8008300:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008304:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8008308:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800830a:	7afb      	ldrb	r3, [r7, #11]
 800830c:	2b01      	cmp	r3, #1
 800830e:	d10f      	bne.n	8008330 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8008310:	697b      	ldr	r3, [r7, #20]
 8008312:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008316:	461a      	mov	r2, r3
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800831c:	697b      	ldr	r3, [r7, #20]
 800831e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	697a      	ldr	r2, [r7, #20]
 8008326:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800832a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800832e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008330:	2300      	movs	r3, #0
}
 8008332:	4618      	mov	r0, r3
 8008334:	371c      	adds	r7, #28
 8008336:	46bd      	mov	sp, r7
 8008338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800833c:	4770      	bx	lr
 800833e:	bf00      	nop
 8008340:	4f54300a 	.word	0x4f54300a

08008344 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008344:	b480      	push	{r7}
 8008346:	b085      	sub	sp, #20
 8008348:	af00      	add	r7, sp, #0
 800834a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800834c:	2300      	movs	r3, #0
 800834e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	3301      	adds	r3, #1
 8008354:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	4a13      	ldr	r2, [pc, #76]	; (80083a8 <USB_CoreReset+0x64>)
 800835a:	4293      	cmp	r3, r2
 800835c:	d901      	bls.n	8008362 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800835e:	2303      	movs	r3, #3
 8008360:	e01b      	b.n	800839a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	691b      	ldr	r3, [r3, #16]
 8008366:	2b00      	cmp	r3, #0
 8008368:	daf2      	bge.n	8008350 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800836a:	2300      	movs	r3, #0
 800836c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	691b      	ldr	r3, [r3, #16]
 8008372:	f043 0201 	orr.w	r2, r3, #1
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	3301      	adds	r3, #1
 800837e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	4a09      	ldr	r2, [pc, #36]	; (80083a8 <USB_CoreReset+0x64>)
 8008384:	4293      	cmp	r3, r2
 8008386:	d901      	bls.n	800838c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008388:	2303      	movs	r3, #3
 800838a:	e006      	b.n	800839a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	691b      	ldr	r3, [r3, #16]
 8008390:	f003 0301 	and.w	r3, r3, #1
 8008394:	2b01      	cmp	r3, #1
 8008396:	d0f0      	beq.n	800837a <USB_CoreReset+0x36>

  return HAL_OK;
 8008398:	2300      	movs	r3, #0
}
 800839a:	4618      	mov	r0, r3
 800839c:	3714      	adds	r7, #20
 800839e:	46bd      	mov	sp, r7
 80083a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a4:	4770      	bx	lr
 80083a6:	bf00      	nop
 80083a8:	00030d40 	.word	0x00030d40

080083ac <USBD_MSC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80083ac:	b580      	push	{r7, lr}
 80083ae:	b084      	sub	sp, #16
 80083b0:	af00      	add	r7, sp, #0
 80083b2:	6078      	str	r0, [r7, #4]
 80083b4:	460b      	mov	r3, r1
 80083b6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_MSC_BOT_HandleTypeDef *hmsc;

  hmsc = (USBD_MSC_BOT_HandleTypeDef *)USBD_malloc(sizeof(USBD_MSC_BOT_HandleTypeDef));
 80083b8:	f241 0074 	movw	r0, #4212	; 0x1074
 80083bc:	f004 f850 	bl	800c460 <USBD_static_malloc>
 80083c0:	60f8      	str	r0, [r7, #12]

  if (hmsc == NULL)
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d109      	bne.n	80083dc <USBD_MSC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	32b0      	adds	r2, #176	; 0xb0
 80083d2:	2100      	movs	r1, #0
 80083d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80083d8:	2302      	movs	r3, #2
 80083da:	e06e      	b.n	80084ba <USBD_MSC_Init+0x10e>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hmsc;
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	32b0      	adds	r2, #176	; 0xb0
 80083e6:	68f9      	ldr	r1, [r7, #12]
 80083e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	32b0      	adds	r2, #176	; 0xb0
 80083f6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	7c1b      	ldrb	r3, [r3, #16]
 8008404:	2b00      	cmp	r3, #0
 8008406:	d12b      	bne.n	8008460 <USBD_MSC_Init+0xb4>
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSCOutEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 8008408:	4b2e      	ldr	r3, [pc, #184]	; (80084c4 <USBD_MSC_Init+0x118>)
 800840a:	7819      	ldrb	r1, [r3, #0]
 800840c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008410:	2202      	movs	r2, #2
 8008412:	6878      	ldr	r0, [r7, #4]
 8008414:	f003 fee2 	bl	800c1dc <USBD_LL_OpenEP>
    pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 1U;
 8008418:	4b2a      	ldr	r3, [pc, #168]	; (80084c4 <USBD_MSC_Init+0x118>)
 800841a:	781b      	ldrb	r3, [r3, #0]
 800841c:	f003 020f 	and.w	r2, r3, #15
 8008420:	6879      	ldr	r1, [r7, #4]
 8008422:	4613      	mov	r3, r2
 8008424:	009b      	lsls	r3, r3, #2
 8008426:	4413      	add	r3, r2
 8008428:	009b      	lsls	r3, r3, #2
 800842a:	440b      	add	r3, r1
 800842c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008430:	2201      	movs	r2, #1
 8008432:	801a      	strh	r2, [r3, #0]

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSCInEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 8008434:	4b24      	ldr	r3, [pc, #144]	; (80084c8 <USBD_MSC_Init+0x11c>)
 8008436:	7819      	ldrb	r1, [r3, #0]
 8008438:	f44f 7300 	mov.w	r3, #512	; 0x200
 800843c:	2202      	movs	r2, #2
 800843e:	6878      	ldr	r0, [r7, #4]
 8008440:	f003 fecc 	bl	800c1dc <USBD_LL_OpenEP>
    pdev->ep_in[MSCInEpAdd & 0xFU].is_used = 1U;
 8008444:	4b20      	ldr	r3, [pc, #128]	; (80084c8 <USBD_MSC_Init+0x11c>)
 8008446:	781b      	ldrb	r3, [r3, #0]
 8008448:	f003 020f 	and.w	r2, r3, #15
 800844c:	6879      	ldr	r1, [r7, #4]
 800844e:	4613      	mov	r3, r2
 8008450:	009b      	lsls	r3, r3, #2
 8008452:	4413      	add	r3, r2
 8008454:	009b      	lsls	r3, r3, #2
 8008456:	440b      	add	r3, r1
 8008458:	3324      	adds	r3, #36	; 0x24
 800845a:	2201      	movs	r2, #1
 800845c:	801a      	strh	r2, [r3, #0]
 800845e:	e028      	b.n	80084b2 <USBD_MSC_Init+0x106>
  }
  else
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSCOutEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 8008460:	4b18      	ldr	r3, [pc, #96]	; (80084c4 <USBD_MSC_Init+0x118>)
 8008462:	7819      	ldrb	r1, [r3, #0]
 8008464:	2340      	movs	r3, #64	; 0x40
 8008466:	2202      	movs	r2, #2
 8008468:	6878      	ldr	r0, [r7, #4]
 800846a:	f003 feb7 	bl	800c1dc <USBD_LL_OpenEP>
    pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 1U;
 800846e:	4b15      	ldr	r3, [pc, #84]	; (80084c4 <USBD_MSC_Init+0x118>)
 8008470:	781b      	ldrb	r3, [r3, #0]
 8008472:	f003 020f 	and.w	r2, r3, #15
 8008476:	6879      	ldr	r1, [r7, #4]
 8008478:	4613      	mov	r3, r2
 800847a:	009b      	lsls	r3, r3, #2
 800847c:	4413      	add	r3, r2
 800847e:	009b      	lsls	r3, r3, #2
 8008480:	440b      	add	r3, r1
 8008482:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008486:	2201      	movs	r2, #1
 8008488:	801a      	strh	r2, [r3, #0]

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSCInEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 800848a:	4b0f      	ldr	r3, [pc, #60]	; (80084c8 <USBD_MSC_Init+0x11c>)
 800848c:	7819      	ldrb	r1, [r3, #0]
 800848e:	2340      	movs	r3, #64	; 0x40
 8008490:	2202      	movs	r2, #2
 8008492:	6878      	ldr	r0, [r7, #4]
 8008494:	f003 fea2 	bl	800c1dc <USBD_LL_OpenEP>
    pdev->ep_in[MSCInEpAdd & 0xFU].is_used = 1U;
 8008498:	4b0b      	ldr	r3, [pc, #44]	; (80084c8 <USBD_MSC_Init+0x11c>)
 800849a:	781b      	ldrb	r3, [r3, #0]
 800849c:	f003 020f 	and.w	r2, r3, #15
 80084a0:	6879      	ldr	r1, [r7, #4]
 80084a2:	4613      	mov	r3, r2
 80084a4:	009b      	lsls	r3, r3, #2
 80084a6:	4413      	add	r3, r2
 80084a8:	009b      	lsls	r3, r3, #2
 80084aa:	440b      	add	r3, r1
 80084ac:	3324      	adds	r3, #36	; 0x24
 80084ae:	2201      	movs	r2, #1
 80084b0:	801a      	strh	r2, [r3, #0]
  }

  /* Init the BOT  layer */
  MSC_BOT_Init(pdev);
 80084b2:	6878      	ldr	r0, [r7, #4]
 80084b4:	f000 fa2c 	bl	8008910 <MSC_BOT_Init>

  return (uint8_t)USBD_OK;
 80084b8:	2300      	movs	r3, #0
}
 80084ba:	4618      	mov	r0, r3
 80084bc:	3710      	adds	r7, #16
 80084be:	46bd      	mov	sp, r7
 80084c0:	bd80      	pop	{r7, pc}
 80084c2:	bf00      	nop
 80084c4:	20000073 	.word	0x20000073
 80084c8:	20000072 	.word	0x20000072

080084cc <USBD_MSC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80084cc:	b580      	push	{r7, lr}
 80084ce:	b082      	sub	sp, #8
 80084d0:	af00      	add	r7, sp, #0
 80084d2:	6078      	str	r0, [r7, #4]
 80084d4:	460b      	mov	r3, r1
 80084d6:	70fb      	strb	r3, [r7, #3]
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  /* Close MSC EPs */
  (void)USBD_LL_CloseEP(pdev, MSCOutEpAdd);
 80084d8:	4b26      	ldr	r3, [pc, #152]	; (8008574 <USBD_MSC_DeInit+0xa8>)
 80084da:	781b      	ldrb	r3, [r3, #0]
 80084dc:	4619      	mov	r1, r3
 80084de:	6878      	ldr	r0, [r7, #4]
 80084e0:	f003 fea2 	bl	800c228 <USBD_LL_CloseEP>
  pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 0U;
 80084e4:	4b23      	ldr	r3, [pc, #140]	; (8008574 <USBD_MSC_DeInit+0xa8>)
 80084e6:	781b      	ldrb	r3, [r3, #0]
 80084e8:	f003 020f 	and.w	r2, r3, #15
 80084ec:	6879      	ldr	r1, [r7, #4]
 80084ee:	4613      	mov	r3, r2
 80084f0:	009b      	lsls	r3, r3, #2
 80084f2:	4413      	add	r3, r2
 80084f4:	009b      	lsls	r3, r3, #2
 80084f6:	440b      	add	r3, r1
 80084f8:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80084fc:	2200      	movs	r2, #0
 80084fe:	801a      	strh	r2, [r3, #0]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, MSCInEpAdd);
 8008500:	4b1d      	ldr	r3, [pc, #116]	; (8008578 <USBD_MSC_DeInit+0xac>)
 8008502:	781b      	ldrb	r3, [r3, #0]
 8008504:	4619      	mov	r1, r3
 8008506:	6878      	ldr	r0, [r7, #4]
 8008508:	f003 fe8e 	bl	800c228 <USBD_LL_CloseEP>
  pdev->ep_in[MSCInEpAdd & 0xFU].is_used = 0U;
 800850c:	4b1a      	ldr	r3, [pc, #104]	; (8008578 <USBD_MSC_DeInit+0xac>)
 800850e:	781b      	ldrb	r3, [r3, #0]
 8008510:	f003 020f 	and.w	r2, r3, #15
 8008514:	6879      	ldr	r1, [r7, #4]
 8008516:	4613      	mov	r3, r2
 8008518:	009b      	lsls	r3, r3, #2
 800851a:	4413      	add	r3, r2
 800851c:	009b      	lsls	r3, r3, #2
 800851e:	440b      	add	r3, r1
 8008520:	3324      	adds	r3, #36	; 0x24
 8008522:	2200      	movs	r2, #0
 8008524:	801a      	strh	r2, [r3, #0]

  /* Free MSC Class Resources */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	32b0      	adds	r2, #176	; 0xb0
 8008530:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008534:	2b00      	cmp	r3, #0
 8008536:	d018      	beq.n	800856a <USBD_MSC_DeInit+0x9e>
  {
    /* De-Init the BOT layer */
    MSC_BOT_DeInit(pdev);
 8008538:	6878      	ldr	r0, [r7, #4]
 800853a:	f000 fa6f 	bl	8008a1c <MSC_BOT_DeInit>

    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	32b0      	adds	r2, #176	; 0xb0
 8008548:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800854c:	4618      	mov	r0, r3
 800854e:	f003 ff95 	bl	800c47c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId]  = NULL;
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	32b0      	adds	r2, #176	; 0xb0
 800855c:	2100      	movs	r1, #0
 800855e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	2200      	movs	r2, #0
 8008566:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800856a:	2300      	movs	r3, #0
}
 800856c:	4618      	mov	r0, r3
 800856e:	3708      	adds	r7, #8
 8008570:	46bd      	mov	sp, r7
 8008572:	bd80      	pop	{r7, pc}
 8008574:	20000073 	.word	0x20000073
 8008578:	20000072 	.word	0x20000072

0800857c <USBD_MSC_Setup>:
  * @param  pdev: device instance
  * @param  req: USB request
  * @retval status
  */
uint8_t USBD_MSC_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800857c:	b580      	push	{r7, lr}
 800857e:	b086      	sub	sp, #24
 8008580:	af00      	add	r7, sp, #0
 8008582:	6078      	str	r0, [r7, #4]
 8008584:	6039      	str	r1, [r7, #0]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	32b0      	adds	r2, #176	; 0xb0
 8008590:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008594:	613b      	str	r3, [r7, #16]
  USBD_StatusTypeDef ret = USBD_OK;
 8008596:	2300      	movs	r3, #0
 8008598:	75fb      	strb	r3, [r7, #23]
  uint16_t status_info = 0U;
 800859a:	2300      	movs	r3, #0
 800859c:	81fb      	strh	r3, [r7, #14]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 800859e:	693b      	ldr	r3, [r7, #16]
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d101      	bne.n	80085a8 <USBD_MSC_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 80085a4:	2303      	movs	r3, #3
 80085a6:	e0e1      	b.n	800876c <USBD_MSC_Setup+0x1f0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80085a8:	683b      	ldr	r3, [r7, #0]
 80085aa:	781b      	ldrb	r3, [r3, #0]
 80085ac:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d053      	beq.n	800865c <USBD_MSC_Setup+0xe0>
 80085b4:	2b20      	cmp	r3, #32
 80085b6:	f040 80d1 	bne.w	800875c <USBD_MSC_Setup+0x1e0>
  {
    /* Class request */
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 80085ba:	683b      	ldr	r3, [r7, #0]
 80085bc:	785b      	ldrb	r3, [r3, #1]
 80085be:	2bfe      	cmp	r3, #254	; 0xfe
 80085c0:	d002      	beq.n	80085c8 <USBD_MSC_Setup+0x4c>
 80085c2:	2bff      	cmp	r3, #255	; 0xff
 80085c4:	d02a      	beq.n	800861c <USBD_MSC_Setup+0xa0>
 80085c6:	e041      	b.n	800864c <USBD_MSC_Setup+0xd0>
      {
        case BOT_GET_MAX_LUN:
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 80085c8:	683b      	ldr	r3, [r7, #0]
 80085ca:	885b      	ldrh	r3, [r3, #2]
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d11e      	bne.n	800860e <USBD_MSC_Setup+0x92>
 80085d0:	683b      	ldr	r3, [r7, #0]
 80085d2:	88db      	ldrh	r3, [r3, #6]
 80085d4:	2b01      	cmp	r3, #1
 80085d6:	d11a      	bne.n	800860e <USBD_MSC_Setup+0x92>
              ((req->bmRequest & 0x80U) == 0x80U))
 80085d8:	683b      	ldr	r3, [r7, #0]
 80085da:	781b      	ldrb	r3, [r3, #0]
 80085dc:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 80085de:	2b00      	cmp	r3, #0
 80085e0:	da15      	bge.n	800860e <USBD_MSC_Setup+0x92>
          {
            hmsc->max_lun = (uint32_t)((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetMaxLun();
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80085e8:	687a      	ldr	r2, [r7, #4]
 80085ea:	33b0      	adds	r3, #176	; 0xb0
 80085ec:	009b      	lsls	r3, r3, #2
 80085ee:	4413      	add	r3, r2
 80085f0:	685b      	ldr	r3, [r3, #4]
 80085f2:	699b      	ldr	r3, [r3, #24]
 80085f4:	4798      	blx	r3
 80085f6:	4603      	mov	r3, r0
 80085f8:	461a      	mov	r2, r3
 80085fa:	693b      	ldr	r3, [r7, #16]
 80085fc:	601a      	str	r2, [r3, #0]
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->max_lun, 1U);
 80085fe:	693b      	ldr	r3, [r7, #16]
 8008600:	2201      	movs	r2, #1
 8008602:	4619      	mov	r1, r3
 8008604:	6878      	ldr	r0, [r7, #4]
 8008606:	f003 f9f3 	bl	800b9f0 <USBD_CtlSendData>
 800860a:	bf00      	nop
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800860c:	e025      	b.n	800865a <USBD_MSC_Setup+0xde>
            USBD_CtlError(pdev, req);
 800860e:	6839      	ldr	r1, [r7, #0]
 8008610:	6878      	ldr	r0, [r7, #4]
 8008612:	f003 f97c 	bl	800b90e <USBD_CtlError>
            ret = USBD_FAIL;
 8008616:	2303      	movs	r3, #3
 8008618:	75fb      	strb	r3, [r7, #23]
          break;
 800861a:	e01e      	b.n	800865a <USBD_MSC_Setup+0xde>

        case BOT_RESET :
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 800861c:	683b      	ldr	r3, [r7, #0]
 800861e:	885b      	ldrh	r3, [r3, #2]
 8008620:	2b00      	cmp	r3, #0
 8008622:	d10c      	bne.n	800863e <USBD_MSC_Setup+0xc2>
 8008624:	683b      	ldr	r3, [r7, #0]
 8008626:	88db      	ldrh	r3, [r3, #6]
 8008628:	2b00      	cmp	r3, #0
 800862a:	d108      	bne.n	800863e <USBD_MSC_Setup+0xc2>
              ((req->bmRequest & 0x80U) != 0x80U))
 800862c:	683b      	ldr	r3, [r7, #0]
 800862e:	781b      	ldrb	r3, [r3, #0]
 8008630:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 8008632:	2b00      	cmp	r3, #0
 8008634:	db03      	blt.n	800863e <USBD_MSC_Setup+0xc2>
          {
            MSC_BOT_Reset(pdev);
 8008636:	6878      	ldr	r0, [r7, #4]
 8008638:	f000 f9bc 	bl	80089b4 <MSC_BOT_Reset>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800863c:	e00d      	b.n	800865a <USBD_MSC_Setup+0xde>
            USBD_CtlError(pdev, req);
 800863e:	6839      	ldr	r1, [r7, #0]
 8008640:	6878      	ldr	r0, [r7, #4]
 8008642:	f003 f964 	bl	800b90e <USBD_CtlError>
            ret = USBD_FAIL;
 8008646:	2303      	movs	r3, #3
 8008648:	75fb      	strb	r3, [r7, #23]
          break;
 800864a:	e006      	b.n	800865a <USBD_MSC_Setup+0xde>

        default:
          USBD_CtlError(pdev, req);
 800864c:	6839      	ldr	r1, [r7, #0]
 800864e:	6878      	ldr	r0, [r7, #4]
 8008650:	f003 f95d 	bl	800b90e <USBD_CtlError>
          ret = USBD_FAIL;
 8008654:	2303      	movs	r3, #3
 8008656:	75fb      	strb	r3, [r7, #23]
          break;
 8008658:	bf00      	nop
      }
      break;
 800865a:	e086      	b.n	800876a <USBD_MSC_Setup+0x1ee>
    /* Interface & Endpoint request */
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800865c:	683b      	ldr	r3, [r7, #0]
 800865e:	785b      	ldrb	r3, [r3, #1]
 8008660:	2b0b      	cmp	r3, #11
 8008662:	d872      	bhi.n	800874a <USBD_MSC_Setup+0x1ce>
 8008664:	a201      	add	r2, pc, #4	; (adr r2, 800866c <USBD_MSC_Setup+0xf0>)
 8008666:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800866a:	bf00      	nop
 800866c:	0800869d 	.word	0x0800869d
 8008670:	08008719 	.word	0x08008719
 8008674:	0800874b 	.word	0x0800874b
 8008678:	0800874b 	.word	0x0800874b
 800867c:	0800874b 	.word	0x0800874b
 8008680:	0800874b 	.word	0x0800874b
 8008684:	0800874b 	.word	0x0800874b
 8008688:	0800874b 	.word	0x0800874b
 800868c:	0800874b 	.word	0x0800874b
 8008690:	0800874b 	.word	0x0800874b
 8008694:	080086c7 	.word	0x080086c7
 8008698:	080086f1 	.word	0x080086f1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80086a2:	b2db      	uxtb	r3, r3
 80086a4:	2b03      	cmp	r3, #3
 80086a6:	d107      	bne.n	80086b8 <USBD_MSC_Setup+0x13c>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80086a8:	f107 030e 	add.w	r3, r7, #14
 80086ac:	2202      	movs	r2, #2
 80086ae:	4619      	mov	r1, r3
 80086b0:	6878      	ldr	r0, [r7, #4]
 80086b2:	f003 f99d 	bl	800b9f0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80086b6:	e050      	b.n	800875a <USBD_MSC_Setup+0x1de>
            USBD_CtlError(pdev, req);
 80086b8:	6839      	ldr	r1, [r7, #0]
 80086ba:	6878      	ldr	r0, [r7, #4]
 80086bc:	f003 f927 	bl	800b90e <USBD_CtlError>
            ret = USBD_FAIL;
 80086c0:	2303      	movs	r3, #3
 80086c2:	75fb      	strb	r3, [r7, #23]
          break;
 80086c4:	e049      	b.n	800875a <USBD_MSC_Setup+0x1de>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80086cc:	b2db      	uxtb	r3, r3
 80086ce:	2b03      	cmp	r3, #3
 80086d0:	d107      	bne.n	80086e2 <USBD_MSC_Setup+0x166>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->interface, 1U);
 80086d2:	693b      	ldr	r3, [r7, #16]
 80086d4:	3304      	adds	r3, #4
 80086d6:	2201      	movs	r2, #1
 80086d8:	4619      	mov	r1, r3
 80086da:	6878      	ldr	r0, [r7, #4]
 80086dc:	f003 f988 	bl	800b9f0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80086e0:	e03b      	b.n	800875a <USBD_MSC_Setup+0x1de>
            USBD_CtlError(pdev, req);
 80086e2:	6839      	ldr	r1, [r7, #0]
 80086e4:	6878      	ldr	r0, [r7, #4]
 80086e6:	f003 f912 	bl	800b90e <USBD_CtlError>
            ret = USBD_FAIL;
 80086ea:	2303      	movs	r3, #3
 80086ec:	75fb      	strb	r3, [r7, #23]
          break;
 80086ee:	e034      	b.n	800875a <USBD_MSC_Setup+0x1de>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80086f6:	b2db      	uxtb	r3, r3
 80086f8:	2b03      	cmp	r3, #3
 80086fa:	d106      	bne.n	800870a <USBD_MSC_Setup+0x18e>
          {
            hmsc->interface = (uint8_t)(req->wValue);
 80086fc:	683b      	ldr	r3, [r7, #0]
 80086fe:	885b      	ldrh	r3, [r3, #2]
 8008700:	b2db      	uxtb	r3, r3
 8008702:	461a      	mov	r2, r3
 8008704:	693b      	ldr	r3, [r7, #16]
 8008706:	605a      	str	r2, [r3, #4]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008708:	e027      	b.n	800875a <USBD_MSC_Setup+0x1de>
            USBD_CtlError(pdev, req);
 800870a:	6839      	ldr	r1, [r7, #0]
 800870c:	6878      	ldr	r0, [r7, #4]
 800870e:	f003 f8fe 	bl	800b90e <USBD_CtlError>
            ret = USBD_FAIL;
 8008712:	2303      	movs	r3, #3
 8008714:	75fb      	strb	r3, [r7, #23]
          break;
 8008716:	e020      	b.n	800875a <USBD_MSC_Setup+0x1de>

        case USB_REQ_CLEAR_FEATURE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800871e:	b2db      	uxtb	r3, r3
 8008720:	2b03      	cmp	r3, #3
 8008722:	d119      	bne.n	8008758 <USBD_MSC_Setup+0x1dc>
          {
            if (req->wValue == USB_FEATURE_EP_HALT)
 8008724:	683b      	ldr	r3, [r7, #0]
 8008726:	885b      	ldrh	r3, [r3, #2]
 8008728:	2b00      	cmp	r3, #0
 800872a:	d115      	bne.n	8008758 <USBD_MSC_Setup+0x1dc>
            {
              /* Flush the FIFO */
              (void)USBD_LL_FlushEP(pdev, (uint8_t)req->wIndex);
 800872c:	683b      	ldr	r3, [r7, #0]
 800872e:	889b      	ldrh	r3, [r3, #4]
 8008730:	b2db      	uxtb	r3, r3
 8008732:	4619      	mov	r1, r3
 8008734:	6878      	ldr	r0, [r7, #4]
 8008736:	f003 fd96 	bl	800c266 <USBD_LL_FlushEP>

              /* Handle BOT error */
              MSC_BOT_CplClrFeature(pdev, (uint8_t)req->wIndex);
 800873a:	683b      	ldr	r3, [r7, #0]
 800873c:	889b      	ldrh	r3, [r3, #4]
 800873e:	b2db      	uxtb	r3, r3
 8008740:	4619      	mov	r1, r3
 8008742:	6878      	ldr	r0, [r7, #4]
 8008744:	f000 fb54 	bl	8008df0 <MSC_BOT_CplClrFeature>
            }
          }
          break;
 8008748:	e006      	b.n	8008758 <USBD_MSC_Setup+0x1dc>

        default:
          USBD_CtlError(pdev, req);
 800874a:	6839      	ldr	r1, [r7, #0]
 800874c:	6878      	ldr	r0, [r7, #4]
 800874e:	f003 f8de 	bl	800b90e <USBD_CtlError>
          ret = USBD_FAIL;
 8008752:	2303      	movs	r3, #3
 8008754:	75fb      	strb	r3, [r7, #23]
          break;
 8008756:	e000      	b.n	800875a <USBD_MSC_Setup+0x1de>
          break;
 8008758:	bf00      	nop
      }
      break;
 800875a:	e006      	b.n	800876a <USBD_MSC_Setup+0x1ee>

    default:
      USBD_CtlError(pdev, req);
 800875c:	6839      	ldr	r1, [r7, #0]
 800875e:	6878      	ldr	r0, [r7, #4]
 8008760:	f003 f8d5 	bl	800b90e <USBD_CtlError>
      ret = USBD_FAIL;
 8008764:	2303      	movs	r3, #3
 8008766:	75fb      	strb	r3, [r7, #23]
      break;
 8008768:	bf00      	nop
  }

  return (uint8_t)ret;
 800876a:	7dfb      	ldrb	r3, [r7, #23]
}
 800876c:	4618      	mov	r0, r3
 800876e:	3718      	adds	r7, #24
 8008770:	46bd      	mov	sp, r7
 8008772:	bd80      	pop	{r7, pc}

08008774 <USBD_MSC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
uint8_t USBD_MSC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008774:	b580      	push	{r7, lr}
 8008776:	b082      	sub	sp, #8
 8008778:	af00      	add	r7, sp, #0
 800877a:	6078      	str	r0, [r7, #4]
 800877c:	460b      	mov	r3, r1
 800877e:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataIn(pdev, epnum);
 8008780:	78fb      	ldrb	r3, [r7, #3]
 8008782:	4619      	mov	r1, r3
 8008784:	6878      	ldr	r0, [r7, #4]
 8008786:	f000 f961 	bl	8008a4c <MSC_BOT_DataIn>

  return (uint8_t)USBD_OK;
 800878a:	2300      	movs	r3, #0
}
 800878c:	4618      	mov	r0, r3
 800878e:	3708      	adds	r7, #8
 8008790:	46bd      	mov	sp, r7
 8008792:	bd80      	pop	{r7, pc}

08008794 <USBD_MSC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
uint8_t USBD_MSC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008794:	b580      	push	{r7, lr}
 8008796:	b082      	sub	sp, #8
 8008798:	af00      	add	r7, sp, #0
 800879a:	6078      	str	r0, [r7, #4]
 800879c:	460b      	mov	r3, r1
 800879e:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataOut(pdev, epnum);
 80087a0:	78fb      	ldrb	r3, [r7, #3]
 80087a2:	4619      	mov	r1, r3
 80087a4:	6878      	ldr	r0, [r7, #4]
 80087a6:	f000 f98d 	bl	8008ac4 <MSC_BOT_DataOut>

  return (uint8_t)USBD_OK;
 80087aa:	2300      	movs	r3, #0
}
 80087ac:	4618      	mov	r0, r3
 80087ae:	3708      	adds	r7, #8
 80087b0:	46bd      	mov	sp, r7
 80087b2:	bd80      	pop	{r7, pc}

080087b4 <USBD_MSC_GetHSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetHSCfgDesc(uint16_t *length)
{
 80087b4:	b580      	push	{r7, lr}
 80087b6:	b084      	sub	sp, #16
 80087b8:	af00      	add	r7, sp, #0
 80087ba:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPIN_ADDR);
 80087bc:	2181      	movs	r1, #129	; 0x81
 80087be:	4812      	ldr	r0, [pc, #72]	; (8008808 <USBD_MSC_GetHSCfgDesc+0x54>)
 80087c0:	f002 fa6d 	bl	800ac9e <USBD_GetEpDesc>
 80087c4:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPOUT_ADDR);
 80087c6:	2101      	movs	r1, #1
 80087c8:	480f      	ldr	r0, [pc, #60]	; (8008808 <USBD_MSC_GetHSCfgDesc+0x54>)
 80087ca:	f002 fa68 	bl	800ac9e <USBD_GetEpDesc>
 80087ce:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d006      	beq.n	80087e4 <USBD_MSC_GetHSCfgDesc+0x30>
  {
    pEpInDesc->wMaxPacketSize = MSC_MAX_HS_PACKET;
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	2200      	movs	r2, #0
 80087da:	711a      	strb	r2, [r3, #4]
 80087dc:	2200      	movs	r2, #0
 80087de:	f042 0202 	orr.w	r2, r2, #2
 80087e2:	715a      	strb	r2, [r3, #5]
  }

  if (pEpOutDesc != NULL)
 80087e4:	68bb      	ldr	r3, [r7, #8]
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d006      	beq.n	80087f8 <USBD_MSC_GetHSCfgDesc+0x44>
  {
    pEpOutDesc->wMaxPacketSize = MSC_MAX_HS_PACKET;
 80087ea:	68bb      	ldr	r3, [r7, #8]
 80087ec:	2200      	movs	r2, #0
 80087ee:	711a      	strb	r2, [r3, #4]
 80087f0:	2200      	movs	r2, #0
 80087f2:	f042 0202 	orr.w	r2, r2, #2
 80087f6:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_MSC_CfgDesc);
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	2220      	movs	r2, #32
 80087fc:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CfgDesc;
 80087fe:	4b02      	ldr	r3, [pc, #8]	; (8008808 <USBD_MSC_GetHSCfgDesc+0x54>)
}
 8008800:	4618      	mov	r0, r3
 8008802:	3710      	adds	r7, #16
 8008804:	46bd      	mov	sp, r7
 8008806:	bd80      	pop	{r7, pc}
 8008808:	20000048 	.word	0x20000048

0800880c <USBD_MSC_GetFSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetFSCfgDesc(uint16_t *length)
{
 800880c:	b580      	push	{r7, lr}
 800880e:	b084      	sub	sp, #16
 8008810:	af00      	add	r7, sp, #0
 8008812:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPIN_ADDR);
 8008814:	2181      	movs	r1, #129	; 0x81
 8008816:	4812      	ldr	r0, [pc, #72]	; (8008860 <USBD_MSC_GetFSCfgDesc+0x54>)
 8008818:	f002 fa41 	bl	800ac9e <USBD_GetEpDesc>
 800881c:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPOUT_ADDR);
 800881e:	2101      	movs	r1, #1
 8008820:	480f      	ldr	r0, [pc, #60]	; (8008860 <USBD_MSC_GetFSCfgDesc+0x54>)
 8008822:	f002 fa3c 	bl	800ac9e <USBD_GetEpDesc>
 8008826:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	2b00      	cmp	r3, #0
 800882c:	d006      	beq.n	800883c <USBD_MSC_GetFSCfgDesc+0x30>
  {
    pEpInDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	2200      	movs	r2, #0
 8008832:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008836:	711a      	strb	r2, [r3, #4]
 8008838:	2200      	movs	r2, #0
 800883a:	715a      	strb	r2, [r3, #5]
  }

  if (pEpOutDesc != NULL)
 800883c:	68bb      	ldr	r3, [r7, #8]
 800883e:	2b00      	cmp	r3, #0
 8008840:	d006      	beq.n	8008850 <USBD_MSC_GetFSCfgDesc+0x44>
  {
    pEpOutDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 8008842:	68bb      	ldr	r3, [r7, #8]
 8008844:	2200      	movs	r2, #0
 8008846:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800884a:	711a      	strb	r2, [r3, #4]
 800884c:	2200      	movs	r2, #0
 800884e:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_MSC_CfgDesc);
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	2220      	movs	r2, #32
 8008854:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CfgDesc;
 8008856:	4b02      	ldr	r3, [pc, #8]	; (8008860 <USBD_MSC_GetFSCfgDesc+0x54>)
}
 8008858:	4618      	mov	r0, r3
 800885a:	3710      	adds	r7, #16
 800885c:	46bd      	mov	sp, r7
 800885e:	bd80      	pop	{r7, pc}
 8008860:	20000048 	.word	0x20000048

08008864 <USBD_MSC_GetOtherSpeedCfgDesc>:
  *         return other speed configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008864:	b580      	push	{r7, lr}
 8008866:	b084      	sub	sp, #16
 8008868:	af00      	add	r7, sp, #0
 800886a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPIN_ADDR);
 800886c:	2181      	movs	r1, #129	; 0x81
 800886e:	4812      	ldr	r0, [pc, #72]	; (80088b8 <USBD_MSC_GetOtherSpeedCfgDesc+0x54>)
 8008870:	f002 fa15 	bl	800ac9e <USBD_GetEpDesc>
 8008874:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPOUT_ADDR);
 8008876:	2101      	movs	r1, #1
 8008878:	480f      	ldr	r0, [pc, #60]	; (80088b8 <USBD_MSC_GetOtherSpeedCfgDesc+0x54>)
 800887a:	f002 fa10 	bl	800ac9e <USBD_GetEpDesc>
 800887e:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	2b00      	cmp	r3, #0
 8008884:	d006      	beq.n	8008894 <USBD_MSC_GetOtherSpeedCfgDesc+0x30>
  {
    pEpInDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	2200      	movs	r2, #0
 800888a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800888e:	711a      	strb	r2, [r3, #4]
 8008890:	2200      	movs	r2, #0
 8008892:	715a      	strb	r2, [r3, #5]
  }

  if (pEpOutDesc != NULL)
 8008894:	68bb      	ldr	r3, [r7, #8]
 8008896:	2b00      	cmp	r3, #0
 8008898:	d006      	beq.n	80088a8 <USBD_MSC_GetOtherSpeedCfgDesc+0x44>
  {
    pEpOutDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 800889a:	68bb      	ldr	r3, [r7, #8]
 800889c:	2200      	movs	r2, #0
 800889e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80088a2:	711a      	strb	r2, [r3, #4]
 80088a4:	2200      	movs	r2, #0
 80088a6:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_MSC_CfgDesc);
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	2220      	movs	r2, #32
 80088ac:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CfgDesc;
 80088ae:	4b02      	ldr	r3, [pc, #8]	; (80088b8 <USBD_MSC_GetOtherSpeedCfgDesc+0x54>)
}
 80088b0:	4618      	mov	r0, r3
 80088b2:	3710      	adds	r7, #16
 80088b4:	46bd      	mov	sp, r7
 80088b6:	bd80      	pop	{r7, pc}
 80088b8:	20000048 	.word	0x20000048

080088bc <USBD_MSC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80088bc:	b480      	push	{r7}
 80088be:	b083      	sub	sp, #12
 80088c0:	af00      	add	r7, sp, #0
 80088c2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_DeviceQualifierDesc);
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	220a      	movs	r2, #10
 80088c8:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_DeviceQualifierDesc;
 80088ca:	4b03      	ldr	r3, [pc, #12]	; (80088d8 <USBD_MSC_GetDeviceQualifierDescriptor+0x1c>)
}
 80088cc:	4618      	mov	r0, r3
 80088ce:	370c      	adds	r7, #12
 80088d0:	46bd      	mov	sp, r7
 80088d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088d6:	4770      	bx	lr
 80088d8:	20000068 	.word	0x20000068

080088dc <USBD_MSC_RegisterStorage>:
  * @brief  USBD_MSC_RegisterStorage
  * @param  fops: storage callback
  * @retval status
  */
uint8_t USBD_MSC_RegisterStorage(USBD_HandleTypeDef *pdev, USBD_StorageTypeDef *fops)
{
 80088dc:	b480      	push	{r7}
 80088de:	b083      	sub	sp, #12
 80088e0:	af00      	add	r7, sp, #0
 80088e2:	6078      	str	r0, [r7, #4]
 80088e4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80088e6:	683b      	ldr	r3, [r7, #0]
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d101      	bne.n	80088f0 <USBD_MSC_RegisterStorage+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80088ec:	2303      	movs	r3, #3
 80088ee:	e009      	b.n	8008904 <USBD_MSC_RegisterStorage+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80088f6:	687a      	ldr	r2, [r7, #4]
 80088f8:	33b0      	adds	r3, #176	; 0xb0
 80088fa:	009b      	lsls	r3, r3, #2
 80088fc:	4413      	add	r3, r2
 80088fe:	683a      	ldr	r2, [r7, #0]
 8008900:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8008902:	2300      	movs	r3, #0
}
 8008904:	4618      	mov	r0, r3
 8008906:	370c      	adds	r7, #12
 8008908:	46bd      	mov	sp, r7
 800890a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800890e:	4770      	bx	lr

08008910 <MSC_BOT_Init>:
  *         Initialize the BOT Process
  * @param  pdev: device instance
  * @retval None
  */
void MSC_BOT_Init(USBD_HandleTypeDef *pdev)
{
 8008910:	b580      	push	{r7, lr}
 8008912:	b084      	sub	sp, #16
 8008914:	af00      	add	r7, sp, #0
 8008916:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	32b0      	adds	r2, #176	; 0xb0
 8008922:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008926:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	2b00      	cmp	r3, #0
 800892c:	d039      	beq.n	80089a2 <MSC_BOT_Init+0x92>
  {
    return;
  }

  hmsc->bot_state = USBD_BOT_IDLE;
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	2200      	movs	r2, #0
 8008932:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	2200      	movs	r2, #0
 8008938:	725a      	strb	r2, [r3, #9]

  hmsc->scsi_sense_tail = 0U;
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008940:	2200      	movs	r2, #0
 8008942:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
  hmsc->scsi_sense_head = 0U;
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800894c:	2200      	movs	r2, #0
 800894e:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
  hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008958:	2200      	movs	r2, #0
 800895a:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62

  ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Init(0U);
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008964:	687a      	ldr	r2, [r7, #4]
 8008966:	33b0      	adds	r3, #176	; 0xb0
 8008968:	009b      	lsls	r3, r3, #2
 800896a:	4413      	add	r3, r2
 800896c:	685b      	ldr	r3, [r3, #4]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	2000      	movs	r0, #0
 8008972:	4798      	blx	r3

  (void)USBD_LL_FlushEP(pdev, MSCOutEpAdd);
 8008974:	4b0d      	ldr	r3, [pc, #52]	; (80089ac <MSC_BOT_Init+0x9c>)
 8008976:	781b      	ldrb	r3, [r3, #0]
 8008978:	4619      	mov	r1, r3
 800897a:	6878      	ldr	r0, [r7, #4]
 800897c:	f003 fc73 	bl	800c266 <USBD_LL_FlushEP>
  (void)USBD_LL_FlushEP(pdev, MSCInEpAdd);
 8008980:	4b0b      	ldr	r3, [pc, #44]	; (80089b0 <MSC_BOT_Init+0xa0>)
 8008982:	781b      	ldrb	r3, [r3, #0]
 8008984:	4619      	mov	r1, r3
 8008986:	6878      	ldr	r0, [r7, #4]
 8008988:	f003 fc6d 	bl	800c266 <USBD_LL_FlushEP>

  /* Prepare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 800898c:	4b07      	ldr	r3, [pc, #28]	; (80089ac <MSC_BOT_Init+0x9c>)
 800898e:	7819      	ldrb	r1, [r3, #0]
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 8008996:	3210      	adds	r2, #16
 8008998:	231f      	movs	r3, #31
 800899a:	6878      	ldr	r0, [r7, #4]
 800899c:	f003 fd2c 	bl	800c3f8 <USBD_LL_PrepareReceive>
 80089a0:	e000      	b.n	80089a4 <MSC_BOT_Init+0x94>
    return;
 80089a2:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 80089a4:	3710      	adds	r7, #16
 80089a6:	46bd      	mov	sp, r7
 80089a8:	bd80      	pop	{r7, pc}
 80089aa:	bf00      	nop
 80089ac:	20000073 	.word	0x20000073
 80089b0:	20000072 	.word	0x20000072

080089b4 <MSC_BOT_Reset>:
  *         Reset the BOT Machine
  * @param  pdev: device instance
  * @retval  None
  */
void MSC_BOT_Reset(USBD_HandleTypeDef *pdev)
{
 80089b4:	b580      	push	{r7, lr}
 80089b6:	b084      	sub	sp, #16
 80089b8:	af00      	add	r7, sp, #0
 80089ba:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	32b0      	adds	r2, #176	; 0xb0
 80089c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80089ca:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d01c      	beq.n	8008a0c <MSC_BOT_Reset+0x58>
  {
    return;
  }

  hmsc->bot_state  = USBD_BOT_IDLE;
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	2200      	movs	r2, #0
 80089d6:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_RECOVERY;
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	2201      	movs	r2, #1
 80089dc:	725a      	strb	r2, [r3, #9]

  (void)USBD_LL_ClearStallEP(pdev, MSCInEpAdd);
 80089de:	4b0d      	ldr	r3, [pc, #52]	; (8008a14 <MSC_BOT_Reset+0x60>)
 80089e0:	781b      	ldrb	r3, [r3, #0]
 80089e2:	4619      	mov	r1, r3
 80089e4:	6878      	ldr	r0, [r7, #4]
 80089e6:	f003 fc7c 	bl	800c2e2 <USBD_LL_ClearStallEP>
  (void)USBD_LL_ClearStallEP(pdev, MSCOutEpAdd);
 80089ea:	4b0b      	ldr	r3, [pc, #44]	; (8008a18 <MSC_BOT_Reset+0x64>)
 80089ec:	781b      	ldrb	r3, [r3, #0]
 80089ee:	4619      	mov	r1, r3
 80089f0:	6878      	ldr	r0, [r7, #4]
 80089f2:	f003 fc76 	bl	800c2e2 <USBD_LL_ClearStallEP>

  /* Prepare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 80089f6:	4b08      	ldr	r3, [pc, #32]	; (8008a18 <MSC_BOT_Reset+0x64>)
 80089f8:	7819      	ldrb	r1, [r3, #0]
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 8008a00:	3210      	adds	r2, #16
 8008a02:	231f      	movs	r3, #31
 8008a04:	6878      	ldr	r0, [r7, #4]
 8008a06:	f003 fcf7 	bl	800c3f8 <USBD_LL_PrepareReceive>
 8008a0a:	e000      	b.n	8008a0e <MSC_BOT_Reset+0x5a>
    return;
 8008a0c:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 8008a0e:	3710      	adds	r7, #16
 8008a10:	46bd      	mov	sp, r7
 8008a12:	bd80      	pop	{r7, pc}
 8008a14:	20000072 	.word	0x20000072
 8008a18:	20000073 	.word	0x20000073

08008a1c <MSC_BOT_DeInit>:
  *         DeInitialize the BOT Machine
  * @param  pdev: device instance
  * @retval None
  */
void MSC_BOT_DeInit(USBD_HandleTypeDef  *pdev)
{
 8008a1c:	b480      	push	{r7}
 8008a1e:	b085      	sub	sp, #20
 8008a20:	af00      	add	r7, sp, #0
 8008a22:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	32b0      	adds	r2, #176	; 0xb0
 8008a2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a32:	60fb      	str	r3, [r7, #12]

  if (hmsc != NULL)
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d002      	beq.n	8008a40 <MSC_BOT_DeInit+0x24>
  {
    hmsc->bot_state = USBD_BOT_IDLE;
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	2200      	movs	r2, #0
 8008a3e:	721a      	strb	r2, [r3, #8]
  }
}
 8008a40:	bf00      	nop
 8008a42:	3714      	adds	r7, #20
 8008a44:	46bd      	mov	sp, r7
 8008a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a4a:	4770      	bx	lr

08008a4c <MSC_BOT_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval None
  */
void MSC_BOT_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008a4c:	b580      	push	{r7, lr}
 8008a4e:	b084      	sub	sp, #16
 8008a50:	af00      	add	r7, sp, #0
 8008a52:	6078      	str	r0, [r7, #4]
 8008a54:	460b      	mov	r3, r1
 8008a56:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	32b0      	adds	r2, #176	; 0xb0
 8008a62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a66:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d022      	beq.n	8008ab4 <MSC_BOT_DataIn+0x68>
  {
    return;
  }

  switch (hmsc->bot_state)
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	7a1b      	ldrb	r3, [r3, #8]
 8008a72:	2b02      	cmp	r3, #2
 8008a74:	d005      	beq.n	8008a82 <MSC_BOT_DataIn+0x36>
 8008a76:	2b02      	cmp	r3, #2
 8008a78:	db1e      	blt.n	8008ab8 <MSC_BOT_DataIn+0x6c>
 8008a7a:	3b03      	subs	r3, #3
 8008a7c:	2b01      	cmp	r3, #1
 8008a7e:	d81b      	bhi.n	8008ab8 <MSC_BOT_DataIn+0x6c>
 8008a80:	e013      	b.n	8008aaa <MSC_BOT_DataIn+0x5e>
  {
    case USBD_BOT_DATA_IN:
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008a88:	7f59      	ldrb	r1, [r3, #29]
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008a90:	331f      	adds	r3, #31
 8008a92:	461a      	mov	r2, r3
 8008a94:	6878      	ldr	r0, [r7, #4]
 8008a96:	f000 f9e5 	bl	8008e64 <SCSI_ProcessCmd>
 8008a9a:	4603      	mov	r3, r0
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	da0d      	bge.n	8008abc <MSC_BOT_DataIn+0x70>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8008aa0:	2101      	movs	r1, #1
 8008aa2:	6878      	ldr	r0, [r7, #4]
 8008aa4:	f000 f920 	bl	8008ce8 <MSC_BOT_SendCSW>
      }
      break;
 8008aa8:	e008      	b.n	8008abc <MSC_BOT_DataIn+0x70>

    case USBD_BOT_SEND_DATA:
    case USBD_BOT_LAST_DATA_IN:
      MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8008aaa:	2100      	movs	r1, #0
 8008aac:	6878      	ldr	r0, [r7, #4]
 8008aae:	f000 f91b 	bl	8008ce8 <MSC_BOT_SendCSW>
      break;
 8008ab2:	e004      	b.n	8008abe <MSC_BOT_DataIn+0x72>
    return;
 8008ab4:	bf00      	nop
 8008ab6:	e002      	b.n	8008abe <MSC_BOT_DataIn+0x72>

    default:
      break;
 8008ab8:	bf00      	nop
 8008aba:	e000      	b.n	8008abe <MSC_BOT_DataIn+0x72>
      break;
 8008abc:	bf00      	nop
  }
}
 8008abe:	3710      	adds	r7, #16
 8008ac0:	46bd      	mov	sp, r7
 8008ac2:	bd80      	pop	{r7, pc}

08008ac4 <MSC_BOT_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval None
  */
void MSC_BOT_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008ac4:	b580      	push	{r7, lr}
 8008ac6:	b084      	sub	sp, #16
 8008ac8:	af00      	add	r7, sp, #0
 8008aca:	6078      	str	r0, [r7, #4]
 8008acc:	460b      	mov	r3, r1
 8008ace:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	32b0      	adds	r2, #176	; 0xb0
 8008ada:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ade:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d01e      	beq.n	8008b24 <MSC_BOT_DataOut+0x60>
  {
    return;
  }

  switch (hmsc->bot_state)
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	7a1b      	ldrb	r3, [r3, #8]
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d002      	beq.n	8008af4 <MSC_BOT_DataOut+0x30>
 8008aee:	2b01      	cmp	r3, #1
 8008af0:	d004      	beq.n	8008afc <MSC_BOT_DataOut+0x38>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
      }
      break;

    default:
      break;
 8008af2:	e01a      	b.n	8008b2a <MSC_BOT_DataOut+0x66>
      MSC_BOT_CBW_Decode(pdev);
 8008af4:	6878      	ldr	r0, [r7, #4]
 8008af6:	f000 f81b 	bl	8008b30 <MSC_BOT_CBW_Decode>
      break;
 8008afa:	e016      	b.n	8008b2a <MSC_BOT_DataOut+0x66>
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008b02:	7f59      	ldrb	r1, [r3, #29]
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008b0a:	331f      	adds	r3, #31
 8008b0c:	461a      	mov	r2, r3
 8008b0e:	6878      	ldr	r0, [r7, #4]
 8008b10:	f000 f9a8 	bl	8008e64 <SCSI_ProcessCmd>
 8008b14:	4603      	mov	r3, r0
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	da06      	bge.n	8008b28 <MSC_BOT_DataOut+0x64>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8008b1a:	2101      	movs	r1, #1
 8008b1c:	6878      	ldr	r0, [r7, #4]
 8008b1e:	f000 f8e3 	bl	8008ce8 <MSC_BOT_SendCSW>
      break;
 8008b22:	e001      	b.n	8008b28 <MSC_BOT_DataOut+0x64>
    return;
 8008b24:	bf00      	nop
 8008b26:	e000      	b.n	8008b2a <MSC_BOT_DataOut+0x66>
      break;
 8008b28:	bf00      	nop
  }
}
 8008b2a:	3710      	adds	r7, #16
 8008b2c:	46bd      	mov	sp, r7
 8008b2e:	bd80      	pop	{r7, pc}

08008b30 <MSC_BOT_CBW_Decode>:
  *         Decode the CBW command and set the BOT state machine accordingly
  * @param  pdev: device instance
  * @retval None
  */
static void  MSC_BOT_CBW_Decode(USBD_HandleTypeDef *pdev)
{
 8008b30:	b580      	push	{r7, lr}
 8008b32:	b084      	sub	sp, #16
 8008b34:	af00      	add	r7, sp, #0
 8008b36:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	32b0      	adds	r2, #176	; 0xb0
 8008b42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b46:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	f000 8085 	beq.w	8008c5a <MSC_BOT_CBW_Decode+0x12a>
  {
    return;
  }

  hmsc->csw.dTag = hmsc->cbw.dTag;
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008b56:	695b      	ldr	r3, [r3, #20]
 8008b58:	68fa      	ldr	r2, [r7, #12]
 8008b5a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008b5e:	6353      	str	r3, [r2, #52]	; 0x34
  hmsc->csw.dDataResidue = hmsc->cbw.dDataLength;
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008b66:	699b      	ldr	r3, [r3, #24]
 8008b68:	68fa      	ldr	r2, [r7, #12]
 8008b6a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008b6e:	6393      	str	r3, [r2, #56]	; 0x38

  if ((USBD_LL_GetRxDataSize(pdev, MSCOutEpAdd) != USBD_BOT_CBW_LENGTH) ||
 8008b70:	4b3d      	ldr	r3, [pc, #244]	; (8008c68 <MSC_BOT_CBW_Decode+0x138>)
 8008b72:	781b      	ldrb	r3, [r3, #0]
 8008b74:	4619      	mov	r1, r3
 8008b76:	6878      	ldr	r0, [r7, #4]
 8008b78:	f003 fc5f 	bl	800c43a <USBD_LL_GetRxDataSize>
 8008b7c:	4603      	mov	r3, r0
 8008b7e:	2b1f      	cmp	r3, #31
 8008b80:	d118      	bne.n	8008bb4 <MSC_BOT_CBW_Decode+0x84>
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008b88:	691b      	ldr	r3, [r3, #16]
  if ((USBD_LL_GetRxDataSize(pdev, MSCOutEpAdd) != USBD_BOT_CBW_LENGTH) ||
 8008b8a:	4a38      	ldr	r2, [pc, #224]	; (8008c6c <MSC_BOT_CBW_Decode+0x13c>)
 8008b8c:	4293      	cmp	r3, r2
 8008b8e:	d111      	bne.n	8008bb4 <MSC_BOT_CBW_Decode+0x84>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008b96:	7f5b      	ldrb	r3, [r3, #29]
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 8008b98:	2b01      	cmp	r3, #1
 8008b9a:	d80b      	bhi.n	8008bb4 <MSC_BOT_CBW_Decode+0x84>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008ba2:	7f9b      	ldrb	r3, [r3, #30]
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d005      	beq.n	8008bb4 <MSC_BOT_CBW_Decode+0x84>
      (hmsc->cbw.bCBLength > 16U))
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008bae:	7f9b      	ldrb	r3, [r3, #30]
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 8008bb0:	2b10      	cmp	r3, #16
 8008bb2:	d90f      	bls.n	8008bd4 <MSC_BOT_CBW_Decode+0xa4>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008bba:	7f59      	ldrb	r1, [r3, #29]
 8008bbc:	2320      	movs	r3, #32
 8008bbe:	2205      	movs	r2, #5
 8008bc0:	6878      	ldr	r0, [r7, #4]
 8008bc2:	f000 fe79 	bl	80098b8 <SCSI_SenseCode>

    hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	2202      	movs	r2, #2
 8008bca:	725a      	strb	r2, [r3, #9]
    MSC_BOT_Abort(pdev);
 8008bcc:	6878      	ldr	r0, [r7, #4]
 8008bce:	f000 f8cb 	bl	8008d68 <MSC_BOT_Abort>
 8008bd2:	e045      	b.n	8008c60 <MSC_BOT_CBW_Decode+0x130>
  }
  else
  {
    if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008bda:	7f59      	ldrb	r1, [r3, #29]
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008be2:	331f      	adds	r3, #31
 8008be4:	461a      	mov	r2, r3
 8008be6:	6878      	ldr	r0, [r7, #4]
 8008be8:	f000 f93c 	bl	8008e64 <SCSI_ProcessCmd>
 8008bec:	4603      	mov	r3, r0
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	da0c      	bge.n	8008c0c <MSC_BOT_CBW_Decode+0xdc>
    {
      if (hmsc->bot_state == USBD_BOT_NO_DATA)
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	7a1b      	ldrb	r3, [r3, #8]
 8008bf6:	2b05      	cmp	r3, #5
 8008bf8:	d104      	bne.n	8008c04 <MSC_BOT_CBW_Decode+0xd4>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8008bfa:	2101      	movs	r1, #1
 8008bfc:	6878      	ldr	r0, [r7, #4]
 8008bfe:	f000 f873 	bl	8008ce8 <MSC_BOT_SendCSW>
 8008c02:	e02d      	b.n	8008c60 <MSC_BOT_CBW_Decode+0x130>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 8008c04:	6878      	ldr	r0, [r7, #4]
 8008c06:	f000 f8af 	bl	8008d68 <MSC_BOT_Abort>
 8008c0a:	e029      	b.n	8008c60 <MSC_BOT_CBW_Decode+0x130>
      }
    }
    /* Burst xfer handled internally */
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	7a1b      	ldrb	r3, [r3, #8]
 8008c10:	2b02      	cmp	r3, #2
 8008c12:	d024      	beq.n	8008c5e <MSC_BOT_CBW_Decode+0x12e>
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	7a1b      	ldrb	r3, [r3, #8]
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 8008c18:	2b01      	cmp	r3, #1
 8008c1a:	d020      	beq.n	8008c5e <MSC_BOT_CBW_Decode+0x12e>
             (hmsc->bot_state != USBD_BOT_LAST_DATA_IN))
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	7a1b      	ldrb	r3, [r3, #8]
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 8008c20:	2b03      	cmp	r3, #3
 8008c22:	d01c      	beq.n	8008c5e <MSC_BOT_CBW_Decode+0x12e>
    {
      if (hmsc->bot_data_length > 0U)
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	68db      	ldr	r3, [r3, #12]
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d009      	beq.n	8008c40 <MSC_BOT_CBW_Decode+0x110>
      {
        MSC_BOT_SendData(pdev, hmsc->bot_data, hmsc->bot_data_length);
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	f103 0110 	add.w	r1, r3, #16
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	68db      	ldr	r3, [r3, #12]
 8008c36:	461a      	mov	r2, r3
 8008c38:	6878      	ldr	r0, [r7, #4]
 8008c3a:	f000 f819 	bl	8008c70 <MSC_BOT_SendData>
      if (hmsc->bot_data_length > 0U)
 8008c3e:	e00f      	b.n	8008c60 <MSC_BOT_CBW_Decode+0x130>
      }
      else if (hmsc->bot_data_length == 0U)
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	68db      	ldr	r3, [r3, #12]
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d104      	bne.n	8008c52 <MSC_BOT_CBW_Decode+0x122>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8008c48:	2100      	movs	r1, #0
 8008c4a:	6878      	ldr	r0, [r7, #4]
 8008c4c:	f000 f84c 	bl	8008ce8 <MSC_BOT_SendCSW>
      if (hmsc->bot_data_length > 0U)
 8008c50:	e006      	b.n	8008c60 <MSC_BOT_CBW_Decode+0x130>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 8008c52:	6878      	ldr	r0, [r7, #4]
 8008c54:	f000 f888 	bl	8008d68 <MSC_BOT_Abort>
      if (hmsc->bot_data_length > 0U)
 8008c58:	e002      	b.n	8008c60 <MSC_BOT_CBW_Decode+0x130>
    return;
 8008c5a:	bf00      	nop
 8008c5c:	e000      	b.n	8008c60 <MSC_BOT_CBW_Decode+0x130>
      }
    }
    else
    {
      return;
 8008c5e:	bf00      	nop
    }
  }
}
 8008c60:	3710      	adds	r7, #16
 8008c62:	46bd      	mov	sp, r7
 8008c64:	bd80      	pop	{r7, pc}
 8008c66:	bf00      	nop
 8008c68:	20000073 	.word	0x20000073
 8008c6c:	43425355 	.word	0x43425355

08008c70 <MSC_BOT_SendData>:
  * @param  buf: pointer to data buffer
  * @param  len: Data Length
  * @retval None
  */
static void  MSC_BOT_SendData(USBD_HandleTypeDef *pdev, uint8_t *pbuf, uint32_t len)
{
 8008c70:	b580      	push	{r7, lr}
 8008c72:	b086      	sub	sp, #24
 8008c74:	af00      	add	r7, sp, #0
 8008c76:	60f8      	str	r0, [r7, #12]
 8008c78:	60b9      	str	r1, [r7, #8]
 8008c7a:	607a      	str	r2, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	32b0      	adds	r2, #176	; 0xb0
 8008c86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c8a:	617b      	str	r3, [r7, #20]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8008c8c:	697b      	ldr	r3, [r7, #20]
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d023      	beq.n	8008cda <MSC_BOT_SendData+0x6a>
  {
    return;
  }

  length = MIN(hmsc->cbw.dDataLength, len);
 8008c92:	697b      	ldr	r3, [r7, #20]
 8008c94:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008c98:	699b      	ldr	r3, [r3, #24]
 8008c9a:	687a      	ldr	r2, [r7, #4]
 8008c9c:	4293      	cmp	r3, r2
 8008c9e:	bf28      	it	cs
 8008ca0:	4613      	movcs	r3, r2
 8008ca2:	613b      	str	r3, [r7, #16]

  hmsc->csw.dDataResidue -= len;
 8008ca4:	697b      	ldr	r3, [r7, #20]
 8008ca6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008caa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	1ad3      	subs	r3, r2, r3
 8008cb0:	697a      	ldr	r2, [r7, #20]
 8008cb2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008cb6:	6393      	str	r3, [r2, #56]	; 0x38
  hmsc->csw.bStatus = USBD_CSW_CMD_PASSED;
 8008cb8:	697b      	ldr	r3, [r7, #20]
 8008cba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008cbe:	2200      	movs	r2, #0
 8008cc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  hmsc->bot_state = USBD_BOT_SEND_DATA;
 8008cc4:	697b      	ldr	r3, [r7, #20]
 8008cc6:	2204      	movs	r2, #4
 8008cc8:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, pbuf, length);
 8008cca:	4b06      	ldr	r3, [pc, #24]	; (8008ce4 <MSC_BOT_SendData+0x74>)
 8008ccc:	7819      	ldrb	r1, [r3, #0]
 8008cce:	693b      	ldr	r3, [r7, #16]
 8008cd0:	68ba      	ldr	r2, [r7, #8]
 8008cd2:	68f8      	ldr	r0, [r7, #12]
 8008cd4:	f003 fb6f 	bl	800c3b6 <USBD_LL_Transmit>
 8008cd8:	e000      	b.n	8008cdc <MSC_BOT_SendData+0x6c>
    return;
 8008cda:	bf00      	nop
}
 8008cdc:	3718      	adds	r7, #24
 8008cde:	46bd      	mov	sp, r7
 8008ce0:	bd80      	pop	{r7, pc}
 8008ce2:	bf00      	nop
 8008ce4:	20000072 	.word	0x20000072

08008ce8 <MSC_BOT_SendCSW>:
  * @param  pdev: device instance
  * @param  status : CSW status
  * @retval None
  */
void  MSC_BOT_SendCSW(USBD_HandleTypeDef *pdev, uint8_t CSW_Status)
{
 8008ce8:	b580      	push	{r7, lr}
 8008cea:	b084      	sub	sp, #16
 8008cec:	af00      	add	r7, sp, #0
 8008cee:	6078      	str	r0, [r7, #4]
 8008cf0:	460b      	mov	r3, r1
 8008cf2:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	32b0      	adds	r2, #176	; 0xb0
 8008cfe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d02:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d024      	beq.n	8008d54 <MSC_BOT_SendCSW+0x6c>
  {
    return;
  }

  hmsc->csw.dSignature = USBD_BOT_CSW_SIGNATURE;
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008d10:	461a      	mov	r2, r3
 8008d12:	4b12      	ldr	r3, [pc, #72]	; (8008d5c <MSC_BOT_SendCSW+0x74>)
 8008d14:	6313      	str	r3, [r2, #48]	; 0x30
  hmsc->csw.bStatus = CSW_Status;
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008d1c:	461a      	mov	r2, r3
 8008d1e:	78fb      	ldrb	r3, [r7, #3]
 8008d20:	f882 303c 	strb.w	r3, [r2, #60]	; 0x3c
  hmsc->bot_state = USBD_BOT_IDLE;
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	2200      	movs	r2, #0
 8008d28:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, (uint8_t *)&hmsc->csw,
 8008d2a:	4b0d      	ldr	r3, [pc, #52]	; (8008d60 <MSC_BOT_SendCSW+0x78>)
 8008d2c:	7819      	ldrb	r1, [r3, #0]
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	f503 5281 	add.w	r2, r3, #4128	; 0x1020
 8008d34:	3210      	adds	r2, #16
 8008d36:	230d      	movs	r3, #13
 8008d38:	6878      	ldr	r0, [r7, #4]
 8008d3a:	f003 fb3c 	bl	800c3b6 <USBD_LL_Transmit>
                         USBD_BOT_CSW_LENGTH);

  /* Prepare EP to Receive next Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 8008d3e:	4b09      	ldr	r3, [pc, #36]	; (8008d64 <MSC_BOT_SendCSW+0x7c>)
 8008d40:	7819      	ldrb	r1, [r3, #0]
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 8008d48:	3210      	adds	r2, #16
 8008d4a:	231f      	movs	r3, #31
 8008d4c:	6878      	ldr	r0, [r7, #4]
 8008d4e:	f003 fb53 	bl	800c3f8 <USBD_LL_PrepareReceive>
 8008d52:	e000      	b.n	8008d56 <MSC_BOT_SendCSW+0x6e>
    return;
 8008d54:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 8008d56:	3710      	adds	r7, #16
 8008d58:	46bd      	mov	sp, r7
 8008d5a:	bd80      	pop	{r7, pc}
 8008d5c:	53425355 	.word	0x53425355
 8008d60:	20000072 	.word	0x20000072
 8008d64:	20000073 	.word	0x20000073

08008d68 <MSC_BOT_Abort>:
  * @param  pdev: device instance
  * @retval status
  */

static void  MSC_BOT_Abort(USBD_HandleTypeDef *pdev)
{
 8008d68:	b580      	push	{r7, lr}
 8008d6a:	b084      	sub	sp, #16
 8008d6c:	af00      	add	r7, sp, #0
 8008d6e:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	32b0      	adds	r2, #176	; 0xb0
 8008d7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d7e:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d02c      	beq.n	8008de0 <MSC_BOT_Abort+0x78>
  {
    return;
  }

  if ((hmsc->cbw.bmFlags == 0U) &&
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008d8c:	7f1b      	ldrb	r3, [r3, #28]
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d10f      	bne.n	8008db2 <MSC_BOT_Abort+0x4a>
      (hmsc->cbw.dDataLength != 0U) &&
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008d98:	699b      	ldr	r3, [r3, #24]
  if ((hmsc->cbw.bmFlags == 0U) &&
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d009      	beq.n	8008db2 <MSC_BOT_Abort+0x4a>
      (hmsc->bot_status == USBD_BOT_STATUS_NORMAL))
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	7a5b      	ldrb	r3, [r3, #9]
      (hmsc->cbw.dDataLength != 0U) &&
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d105      	bne.n	8008db2 <MSC_BOT_Abort+0x4a>
  {
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 8008da6:	4b10      	ldr	r3, [pc, #64]	; (8008de8 <MSC_BOT_Abort+0x80>)
 8008da8:	781b      	ldrb	r3, [r3, #0]
 8008daa:	4619      	mov	r1, r3
 8008dac:	6878      	ldr	r0, [r7, #4]
 8008dae:	f003 fa79 	bl	800c2a4 <USBD_LL_StallEP>
  }

  (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
 8008db2:	4b0e      	ldr	r3, [pc, #56]	; (8008dec <MSC_BOT_Abort+0x84>)
 8008db4:	781b      	ldrb	r3, [r3, #0]
 8008db6:	4619      	mov	r1, r3
 8008db8:	6878      	ldr	r0, [r7, #4]
 8008dba:	f003 fa73 	bl	800c2a4 <USBD_LL_StallEP>

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR)
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	7a5b      	ldrb	r3, [r3, #9]
 8008dc2:	2b02      	cmp	r3, #2
 8008dc4:	d10d      	bne.n	8008de2 <MSC_BOT_Abort+0x7a>
  {
    (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
 8008dc6:	4b09      	ldr	r3, [pc, #36]	; (8008dec <MSC_BOT_Abort+0x84>)
 8008dc8:	781b      	ldrb	r3, [r3, #0]
 8008dca:	4619      	mov	r1, r3
 8008dcc:	6878      	ldr	r0, [r7, #4]
 8008dce:	f003 fa69 	bl	800c2a4 <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 8008dd2:	4b05      	ldr	r3, [pc, #20]	; (8008de8 <MSC_BOT_Abort+0x80>)
 8008dd4:	781b      	ldrb	r3, [r3, #0]
 8008dd6:	4619      	mov	r1, r3
 8008dd8:	6878      	ldr	r0, [r7, #4]
 8008dda:	f003 fa63 	bl	800c2a4 <USBD_LL_StallEP>
 8008dde:	e000      	b.n	8008de2 <MSC_BOT_Abort+0x7a>
    return;
 8008de0:	bf00      	nop
  }
}
 8008de2:	3710      	adds	r7, #16
 8008de4:	46bd      	mov	sp, r7
 8008de6:	bd80      	pop	{r7, pc}
 8008de8:	20000073 	.word	0x20000073
 8008dec:	20000072 	.word	0x20000072

08008df0 <MSC_BOT_CplClrFeature>:
  * @param  epnum: endpoint index
  * @retval None
  */

void  MSC_BOT_CplClrFeature(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008df0:	b580      	push	{r7, lr}
 8008df2:	b084      	sub	sp, #16
 8008df4:	af00      	add	r7, sp, #0
 8008df6:	6078      	str	r0, [r7, #4]
 8008df8:	460b      	mov	r3, r1
 8008dfa:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	32b0      	adds	r2, #176	; 0xb0
 8008e06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e0a:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d01d      	beq.n	8008e4e <MSC_BOT_CplClrFeature+0x5e>
  {
    return;
  }

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR) /* Bad CBW Signature */
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	7a5b      	ldrb	r3, [r3, #9]
 8008e16:	2b02      	cmp	r3, #2
 8008e18:	d10c      	bne.n	8008e34 <MSC_BOT_CplClrFeature+0x44>
  {
    (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
 8008e1a:	4b10      	ldr	r3, [pc, #64]	; (8008e5c <MSC_BOT_CplClrFeature+0x6c>)
 8008e1c:	781b      	ldrb	r3, [r3, #0]
 8008e1e:	4619      	mov	r1, r3
 8008e20:	6878      	ldr	r0, [r7, #4]
 8008e22:	f003 fa3f 	bl	800c2a4 <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 8008e26:	4b0e      	ldr	r3, [pc, #56]	; (8008e60 <MSC_BOT_CplClrFeature+0x70>)
 8008e28:	781b      	ldrb	r3, [r3, #0]
 8008e2a:	4619      	mov	r1, r3
 8008e2c:	6878      	ldr	r0, [r7, #4]
 8008e2e:	f003 fa39 	bl	800c2a4 <USBD_LL_StallEP>
 8008e32:	e00f      	b.n	8008e54 <MSC_BOT_CplClrFeature+0x64>
  }
  else if (((epnum & 0x80U) == 0x80U) && (hmsc->bot_status != USBD_BOT_STATUS_RECOVERY))
 8008e34:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	da0a      	bge.n	8008e52 <MSC_BOT_CplClrFeature+0x62>
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	7a5b      	ldrb	r3, [r3, #9]
 8008e40:	2b01      	cmp	r3, #1
 8008e42:	d006      	beq.n	8008e52 <MSC_BOT_CplClrFeature+0x62>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8008e44:	2101      	movs	r1, #1
 8008e46:	6878      	ldr	r0, [r7, #4]
 8008e48:	f7ff ff4e 	bl	8008ce8 <MSC_BOT_SendCSW>
 8008e4c:	e002      	b.n	8008e54 <MSC_BOT_CplClrFeature+0x64>
    return;
 8008e4e:	bf00      	nop
 8008e50:	e000      	b.n	8008e54 <MSC_BOT_CplClrFeature+0x64>
  }
  else
  {
    return;
 8008e52:	bf00      	nop
  }
}
 8008e54:	3710      	adds	r7, #16
 8008e56:	46bd      	mov	sp, r7
 8008e58:	bd80      	pop	{r7, pc}
 8008e5a:	bf00      	nop
 8008e5c:	20000072 	.word	0x20000072
 8008e60:	20000073 	.word	0x20000073

08008e64 <SCSI_ProcessCmd>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
int8_t SCSI_ProcessCmd(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *cmd)
{
 8008e64:	b580      	push	{r7, lr}
 8008e66:	b086      	sub	sp, #24
 8008e68:	af00      	add	r7, sp, #0
 8008e6a:	60f8      	str	r0, [r7, #12]
 8008e6c:	460b      	mov	r3, r1
 8008e6e:	607a      	str	r2, [r7, #4]
 8008e70:	72fb      	strb	r3, [r7, #11]
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	32b0      	adds	r2, #176	; 0xb0
 8008e7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e80:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 8008e82:	693b      	ldr	r3, [r7, #16]
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d102      	bne.n	8008e8e <SCSI_ProcessCmd+0x2a>
  {
    return -1;
 8008e88:	f04f 33ff 	mov.w	r3, #4294967295
 8008e8c:	e168      	b.n	8009160 <SCSI_ProcessCmd+0x2fc>
  }

  switch (cmd[0])
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	781b      	ldrb	r3, [r3, #0]
 8008e92:	2baa      	cmp	r3, #170	; 0xaa
 8008e94:	f000 8144 	beq.w	8009120 <SCSI_ProcessCmd+0x2bc>
 8008e98:	2baa      	cmp	r3, #170	; 0xaa
 8008e9a:	f300 8153 	bgt.w	8009144 <SCSI_ProcessCmd+0x2e0>
 8008e9e:	2ba8      	cmp	r3, #168	; 0xa8
 8008ea0:	f000 812c 	beq.w	80090fc <SCSI_ProcessCmd+0x298>
 8008ea4:	2ba8      	cmp	r3, #168	; 0xa8
 8008ea6:	f300 814d 	bgt.w	8009144 <SCSI_ProcessCmd+0x2e0>
 8008eaa:	2b5a      	cmp	r3, #90	; 0x5a
 8008eac:	f300 80c0 	bgt.w	8009030 <SCSI_ProcessCmd+0x1cc>
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	f2c0 8147 	blt.w	8009144 <SCSI_ProcessCmd+0x2e0>
 8008eb6:	2b5a      	cmp	r3, #90	; 0x5a
 8008eb8:	f200 8144 	bhi.w	8009144 <SCSI_ProcessCmd+0x2e0>
 8008ebc:	a201      	add	r2, pc, #4	; (adr r2, 8008ec4 <SCSI_ProcessCmd+0x60>)
 8008ebe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ec2:	bf00      	nop
 8008ec4:	08009037 	.word	0x08009037
 8008ec8:	08009145 	.word	0x08009145
 8008ecc:	08009145 	.word	0x08009145
 8008ed0:	08009049 	.word	0x08009049
 8008ed4:	08009145 	.word	0x08009145
 8008ed8:	08009145 	.word	0x08009145
 8008edc:	08009145 	.word	0x08009145
 8008ee0:	08009145 	.word	0x08009145
 8008ee4:	08009145 	.word	0x08009145
 8008ee8:	08009145 	.word	0x08009145
 8008eec:	08009145 	.word	0x08009145
 8008ef0:	08009145 	.word	0x08009145
 8008ef4:	08009145 	.word	0x08009145
 8008ef8:	08009145 	.word	0x08009145
 8008efc:	08009145 	.word	0x08009145
 8008f00:	08009145 	.word	0x08009145
 8008f04:	08009145 	.word	0x08009145
 8008f08:	08009145 	.word	0x08009145
 8008f0c:	0800905b 	.word	0x0800905b
 8008f10:	08009145 	.word	0x08009145
 8008f14:	08009145 	.word	0x08009145
 8008f18:	08009145 	.word	0x08009145
 8008f1c:	08009145 	.word	0x08009145
 8008f20:	08009145 	.word	0x08009145
 8008f24:	08009145 	.word	0x08009145
 8008f28:	08009145 	.word	0x08009145
 8008f2c:	08009091 	.word	0x08009091
 8008f30:	0800906d 	.word	0x0800906d
 8008f34:	08009145 	.word	0x08009145
 8008f38:	08009145 	.word	0x08009145
 8008f3c:	0800907f 	.word	0x0800907f
 8008f40:	08009145 	.word	0x08009145
 8008f44:	08009145 	.word	0x08009145
 8008f48:	08009145 	.word	0x08009145
 8008f4c:	08009145 	.word	0x08009145
 8008f50:	080090b5 	.word	0x080090b5
 8008f54:	08009145 	.word	0x08009145
 8008f58:	080090c7 	.word	0x080090c7
 8008f5c:	08009145 	.word	0x08009145
 8008f60:	08009145 	.word	0x08009145
 8008f64:	080090eb 	.word	0x080090eb
 8008f68:	08009145 	.word	0x08009145
 8008f6c:	0800910f 	.word	0x0800910f
 8008f70:	08009145 	.word	0x08009145
 8008f74:	08009145 	.word	0x08009145
 8008f78:	08009145 	.word	0x08009145
 8008f7c:	08009145 	.word	0x08009145
 8008f80:	08009133 	.word	0x08009133
 8008f84:	08009145 	.word	0x08009145
 8008f88:	08009145 	.word	0x08009145
 8008f8c:	08009145 	.word	0x08009145
 8008f90:	08009145 	.word	0x08009145
 8008f94:	08009145 	.word	0x08009145
 8008f98:	08009145 	.word	0x08009145
 8008f9c:	08009145 	.word	0x08009145
 8008fa0:	08009145 	.word	0x08009145
 8008fa4:	08009145 	.word	0x08009145
 8008fa8:	08009145 	.word	0x08009145
 8008fac:	08009145 	.word	0x08009145
 8008fb0:	08009145 	.word	0x08009145
 8008fb4:	08009145 	.word	0x08009145
 8008fb8:	08009145 	.word	0x08009145
 8008fbc:	08009145 	.word	0x08009145
 8008fc0:	08009145 	.word	0x08009145
 8008fc4:	08009145 	.word	0x08009145
 8008fc8:	08009145 	.word	0x08009145
 8008fcc:	08009145 	.word	0x08009145
 8008fd0:	08009145 	.word	0x08009145
 8008fd4:	08009145 	.word	0x08009145
 8008fd8:	08009145 	.word	0x08009145
 8008fdc:	08009145 	.word	0x08009145
 8008fe0:	08009145 	.word	0x08009145
 8008fe4:	08009145 	.word	0x08009145
 8008fe8:	08009145 	.word	0x08009145
 8008fec:	08009145 	.word	0x08009145
 8008ff0:	08009145 	.word	0x08009145
 8008ff4:	08009145 	.word	0x08009145
 8008ff8:	08009145 	.word	0x08009145
 8008ffc:	08009145 	.word	0x08009145
 8009000:	08009145 	.word	0x08009145
 8009004:	08009145 	.word	0x08009145
 8009008:	08009145 	.word	0x08009145
 800900c:	08009145 	.word	0x08009145
 8009010:	08009145 	.word	0x08009145
 8009014:	08009145 	.word	0x08009145
 8009018:	08009145 	.word	0x08009145
 800901c:	08009145 	.word	0x08009145
 8009020:	08009145 	.word	0x08009145
 8009024:	08009145 	.word	0x08009145
 8009028:	08009145 	.word	0x08009145
 800902c:	080090a3 	.word	0x080090a3
 8009030:	2b9e      	cmp	r3, #158	; 0x9e
 8009032:	d051      	beq.n	80090d8 <SCSI_ProcessCmd+0x274>
 8009034:	e086      	b.n	8009144 <SCSI_ProcessCmd+0x2e0>
  {
    case SCSI_TEST_UNIT_READY:
      ret = SCSI_TestUnitReady(pdev, lun, cmd);
 8009036:	7afb      	ldrb	r3, [r7, #11]
 8009038:	687a      	ldr	r2, [r7, #4]
 800903a:	4619      	mov	r1, r3
 800903c:	68f8      	ldr	r0, [r7, #12]
 800903e:	f000 f893 	bl	8009168 <SCSI_TestUnitReady>
 8009042:	4603      	mov	r3, r0
 8009044:	75fb      	strb	r3, [r7, #23]
      break;
 8009046:	e089      	b.n	800915c <SCSI_ProcessCmd+0x2f8>

    case SCSI_REQUEST_SENSE:
      ret = SCSI_RequestSense(pdev, lun, cmd);
 8009048:	7afb      	ldrb	r3, [r7, #11]
 800904a:	687a      	ldr	r2, [r7, #4]
 800904c:	4619      	mov	r1, r3
 800904e:	68f8      	ldr	r0, [r7, #12]
 8009050:	f000 fb98 	bl	8009784 <SCSI_RequestSense>
 8009054:	4603      	mov	r3, r0
 8009056:	75fb      	strb	r3, [r7, #23]
      break;
 8009058:	e080      	b.n	800915c <SCSI_ProcessCmd+0x2f8>

    case SCSI_INQUIRY:
      ret = SCSI_Inquiry(pdev, lun, cmd);
 800905a:	7afb      	ldrb	r3, [r7, #11]
 800905c:	687a      	ldr	r2, [r7, #4]
 800905e:	4619      	mov	r1, r3
 8009060:	68f8      	ldr	r0, [r7, #12]
 8009062:	f000 f8df 	bl	8009224 <SCSI_Inquiry>
 8009066:	4603      	mov	r3, r0
 8009068:	75fb      	strb	r3, [r7, #23]
      break;
 800906a:	e077      	b.n	800915c <SCSI_ProcessCmd+0x2f8>

    case SCSI_START_STOP_UNIT:
      ret = SCSI_StartStopUnit(pdev, lun, cmd);
 800906c:	7afb      	ldrb	r3, [r7, #11]
 800906e:	687a      	ldr	r2, [r7, #4]
 8009070:	4619      	mov	r1, r3
 8009072:	68f8      	ldr	r0, [r7, #12]
 8009074:	f000 fc7c 	bl	8009970 <SCSI_StartStopUnit>
 8009078:	4603      	mov	r3, r0
 800907a:	75fb      	strb	r3, [r7, #23]
      break;
 800907c:	e06e      	b.n	800915c <SCSI_ProcessCmd+0x2f8>

    case SCSI_ALLOW_MEDIUM_REMOVAL:
      ret = SCSI_AllowPreventRemovable(pdev, lun, cmd);
 800907e:	7afb      	ldrb	r3, [r7, #11]
 8009080:	687a      	ldr	r2, [r7, #4]
 8009082:	4619      	mov	r1, r3
 8009084:	68f8      	ldr	r0, [r7, #12]
 8009086:	f000 fcd0 	bl	8009a2a <SCSI_AllowPreventRemovable>
 800908a:	4603      	mov	r3, r0
 800908c:	75fb      	strb	r3, [r7, #23]
      break;
 800908e:	e065      	b.n	800915c <SCSI_ProcessCmd+0x2f8>

    case SCSI_MODE_SENSE6:
      ret = SCSI_ModeSense6(pdev, lun, cmd);
 8009090:	7afb      	ldrb	r3, [r7, #11]
 8009092:	687a      	ldr	r2, [r7, #4]
 8009094:	4619      	mov	r1, r3
 8009096:	68f8      	ldr	r0, [r7, #12]
 8009098:	f000 fb14 	bl	80096c4 <SCSI_ModeSense6>
 800909c:	4603      	mov	r3, r0
 800909e:	75fb      	strb	r3, [r7, #23]
      break;
 80090a0:	e05c      	b.n	800915c <SCSI_ProcessCmd+0x2f8>

    case SCSI_MODE_SENSE10:
      ret = SCSI_ModeSense10(pdev, lun, cmd);
 80090a2:	7afb      	ldrb	r3, [r7, #11]
 80090a4:	687a      	ldr	r2, [r7, #4]
 80090a6:	4619      	mov	r1, r3
 80090a8:	68f8      	ldr	r0, [r7, #12]
 80090aa:	f000 fb3b 	bl	8009724 <SCSI_ModeSense10>
 80090ae:	4603      	mov	r3, r0
 80090b0:	75fb      	strb	r3, [r7, #23]
      break;
 80090b2:	e053      	b.n	800915c <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ_FORMAT_CAPACITIES:
      ret = SCSI_ReadFormatCapacity(pdev, lun, cmd);
 80090b4:	7afb      	ldrb	r3, [r7, #11]
 80090b6:	687a      	ldr	r2, [r7, #4]
 80090b8:	4619      	mov	r1, r3
 80090ba:	68f8      	ldr	r0, [r7, #12]
 80090bc:	f000 fa85 	bl	80095ca <SCSI_ReadFormatCapacity>
 80090c0:	4603      	mov	r3, r0
 80090c2:	75fb      	strb	r3, [r7, #23]
      break;
 80090c4:	e04a      	b.n	800915c <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ_CAPACITY10:
      ret = SCSI_ReadCapacity10(pdev, lun, cmd);
 80090c6:	7afb      	ldrb	r3, [r7, #11]
 80090c8:	687a      	ldr	r2, [r7, #4]
 80090ca:	4619      	mov	r1, r3
 80090cc:	68f8      	ldr	r0, [r7, #12]
 80090ce:	f000 f929 	bl	8009324 <SCSI_ReadCapacity10>
 80090d2:	4603      	mov	r3, r0
 80090d4:	75fb      	strb	r3, [r7, #23]
      break;
 80090d6:	e041      	b.n	800915c <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ_CAPACITY16:
      ret = SCSI_ReadCapacity16(pdev, lun, cmd);
 80090d8:	7afb      	ldrb	r3, [r7, #11]
 80090da:	687a      	ldr	r2, [r7, #4]
 80090dc:	4619      	mov	r1, r3
 80090de:	68f8      	ldr	r0, [r7, #12]
 80090e0:	f000 f9af 	bl	8009442 <SCSI_ReadCapacity16>
 80090e4:	4603      	mov	r3, r0
 80090e6:	75fb      	strb	r3, [r7, #23]
      break;
 80090e8:	e038      	b.n	800915c <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ10:
      ret = SCSI_Read10(pdev, lun, cmd);
 80090ea:	7afb      	ldrb	r3, [r7, #11]
 80090ec:	687a      	ldr	r2, [r7, #4]
 80090ee:	4619      	mov	r1, r3
 80090f0:	68f8      	ldr	r0, [r7, #12]
 80090f2:	f000 fccb 	bl	8009a8c <SCSI_Read10>
 80090f6:	4603      	mov	r3, r0
 80090f8:	75fb      	strb	r3, [r7, #23]
      break;
 80090fa:	e02f      	b.n	800915c <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ12:
      ret = SCSI_Read12(pdev, lun, cmd);
 80090fc:	7afb      	ldrb	r3, [r7, #11]
 80090fe:	687a      	ldr	r2, [r7, #4]
 8009100:	4619      	mov	r1, r3
 8009102:	68f8      	ldr	r0, [r7, #12]
 8009104:	f000 fd79 	bl	8009bfa <SCSI_Read12>
 8009108:	4603      	mov	r3, r0
 800910a:	75fb      	strb	r3, [r7, #23]
      break;
 800910c:	e026      	b.n	800915c <SCSI_ProcessCmd+0x2f8>

    case SCSI_WRITE10:
      ret = SCSI_Write10(pdev, lun, cmd);
 800910e:	7afb      	ldrb	r3, [r7, #11]
 8009110:	687a      	ldr	r2, [r7, #4]
 8009112:	4619      	mov	r1, r3
 8009114:	68f8      	ldr	r0, [r7, #12]
 8009116:	f000 fe31 	bl	8009d7c <SCSI_Write10>
 800911a:	4603      	mov	r3, r0
 800911c:	75fb      	strb	r3, [r7, #23]
      break;
 800911e:	e01d      	b.n	800915c <SCSI_ProcessCmd+0x2f8>

    case SCSI_WRITE12:
      ret = SCSI_Write12(pdev, lun, cmd);
 8009120:	7afb      	ldrb	r3, [r7, #11]
 8009122:	687a      	ldr	r2, [r7, #4]
 8009124:	4619      	mov	r1, r3
 8009126:	68f8      	ldr	r0, [r7, #12]
 8009128:	f000 ff0c 	bl	8009f44 <SCSI_Write12>
 800912c:	4603      	mov	r3, r0
 800912e:	75fb      	strb	r3, [r7, #23]
      break;
 8009130:	e014      	b.n	800915c <SCSI_ProcessCmd+0x2f8>

    case SCSI_VERIFY10:
      ret = SCSI_Verify10(pdev, lun, cmd);
 8009132:	7afb      	ldrb	r3, [r7, #11]
 8009134:	687a      	ldr	r2, [r7, #4]
 8009136:	4619      	mov	r1, r3
 8009138:	68f8      	ldr	r0, [r7, #12]
 800913a:	f000 fff7 	bl	800a12c <SCSI_Verify10>
 800913e:	4603      	mov	r3, r0
 8009140:	75fb      	strb	r3, [r7, #23]
      break;
 8009142:	e00b      	b.n	800915c <SCSI_ProcessCmd+0x2f8>

    default:
      SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_CDB);
 8009144:	7af9      	ldrb	r1, [r7, #11]
 8009146:	2320      	movs	r3, #32
 8009148:	2205      	movs	r2, #5
 800914a:	68f8      	ldr	r0, [r7, #12]
 800914c:	f000 fbb4 	bl	80098b8 <SCSI_SenseCode>
      hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 8009150:	693b      	ldr	r3, [r7, #16]
 8009152:	2202      	movs	r2, #2
 8009154:	725a      	strb	r2, [r3, #9]
      ret = -1;
 8009156:	23ff      	movs	r3, #255	; 0xff
 8009158:	75fb      	strb	r3, [r7, #23]
      break;
 800915a:	bf00      	nop
  }

  return ret;
 800915c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009160:	4618      	mov	r0, r3
 8009162:	3718      	adds	r7, #24
 8009164:	46bd      	mov	sp, r7
 8009166:	bd80      	pop	{r7, pc}

08009168 <SCSI_TestUnitReady>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_TestUnitReady(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8009168:	b580      	push	{r7, lr}
 800916a:	b086      	sub	sp, #24
 800916c:	af00      	add	r7, sp, #0
 800916e:	60f8      	str	r0, [r7, #12]
 8009170:	460b      	mov	r3, r1
 8009172:	607a      	str	r2, [r7, #4]
 8009174:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	32b0      	adds	r2, #176	; 0xb0
 8009180:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009184:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8009186:	697b      	ldr	r3, [r7, #20]
 8009188:	2b00      	cmp	r3, #0
 800918a:	d102      	bne.n	8009192 <SCSI_TestUnitReady+0x2a>
  {
    return -1;
 800918c:	f04f 33ff 	mov.w	r3, #4294967295
 8009190:	e043      	b.n	800921a <SCSI_TestUnitReady+0xb2>
  }

  /* case 9 : Hi > D0 */
  if (hmsc->cbw.dDataLength != 0U)
 8009192:	697b      	ldr	r3, [r7, #20]
 8009194:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009198:	699b      	ldr	r3, [r3, #24]
 800919a:	2b00      	cmp	r3, #0
 800919c:	d00b      	beq.n	80091b6 <SCSI_TestUnitReady+0x4e>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800919e:	697b      	ldr	r3, [r7, #20]
 80091a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80091a4:	7f59      	ldrb	r1, [r3, #29]
 80091a6:	2320      	movs	r3, #32
 80091a8:	2205      	movs	r2, #5
 80091aa:	68f8      	ldr	r0, [r7, #12]
 80091ac:	f000 fb84 	bl	80098b8 <SCSI_SenseCode>

    return -1;
 80091b0:	f04f 33ff 	mov.w	r3, #4294967295
 80091b4:	e031      	b.n	800921a <SCSI_TestUnitReady+0xb2>
  }

  if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 80091b6:	697b      	ldr	r3, [r7, #20]
 80091b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80091bc:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 80091c0:	2b02      	cmp	r3, #2
 80091c2:	d10b      	bne.n	80091dc <SCSI_TestUnitReady+0x74>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80091c4:	7af9      	ldrb	r1, [r7, #11]
 80091c6:	233a      	movs	r3, #58	; 0x3a
 80091c8:	2202      	movs	r2, #2
 80091ca:	68f8      	ldr	r0, [r7, #12]
 80091cc:	f000 fb74 	bl	80098b8 <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 80091d0:	697b      	ldr	r3, [r7, #20]
 80091d2:	2205      	movs	r2, #5
 80091d4:	721a      	strb	r2, [r3, #8]
    return -1;
 80091d6:	f04f 33ff 	mov.w	r3, #4294967295
 80091da:	e01e      	b.n	800921a <SCSI_TestUnitReady+0xb2>
  }

  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80091e2:	68fa      	ldr	r2, [r7, #12]
 80091e4:	33b0      	adds	r3, #176	; 0xb0
 80091e6:	009b      	lsls	r3, r3, #2
 80091e8:	4413      	add	r3, r2
 80091ea:	685b      	ldr	r3, [r3, #4]
 80091ec:	689b      	ldr	r3, [r3, #8]
 80091ee:	7afa      	ldrb	r2, [r7, #11]
 80091f0:	4610      	mov	r0, r2
 80091f2:	4798      	blx	r3
 80091f4:	4603      	mov	r3, r0
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d00b      	beq.n	8009212 <SCSI_TestUnitReady+0xaa>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80091fa:	7af9      	ldrb	r1, [r7, #11]
 80091fc:	233a      	movs	r3, #58	; 0x3a
 80091fe:	2202      	movs	r2, #2
 8009200:	68f8      	ldr	r0, [r7, #12]
 8009202:	f000 fb59 	bl	80098b8 <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 8009206:	697b      	ldr	r3, [r7, #20]
 8009208:	2205      	movs	r2, #5
 800920a:	721a      	strb	r2, [r3, #8]

    return -1;
 800920c:	f04f 33ff 	mov.w	r3, #4294967295
 8009210:	e003      	b.n	800921a <SCSI_TestUnitReady+0xb2>
  }
  hmsc->bot_data_length = 0U;
 8009212:	697b      	ldr	r3, [r7, #20]
 8009214:	2200      	movs	r2, #0
 8009216:	60da      	str	r2, [r3, #12]

  return 0;
 8009218:	2300      	movs	r3, #0
}
 800921a:	4618      	mov	r0, r3
 800921c:	3718      	adds	r7, #24
 800921e:	46bd      	mov	sp, r7
 8009220:	bd80      	pop	{r7, pc}
	...

08009224 <SCSI_Inquiry>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Inquiry(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8009224:	b580      	push	{r7, lr}
 8009226:	b088      	sub	sp, #32
 8009228:	af00      	add	r7, sp, #0
 800922a:	60f8      	str	r0, [r7, #12]
 800922c:	460b      	mov	r3, r1
 800922e:	607a      	str	r2, [r7, #4]
 8009230:	72fb      	strb	r3, [r7, #11]
  uint8_t *pPage;
  uint16_t len;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	32b0      	adds	r2, #176	; 0xb0
 800923c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009240:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 8009242:	69bb      	ldr	r3, [r7, #24]
 8009244:	2b00      	cmp	r3, #0
 8009246:	d102      	bne.n	800924e <SCSI_Inquiry+0x2a>
  {
    return -1;
 8009248:	f04f 33ff 	mov.w	r3, #4294967295
 800924c:	e062      	b.n	8009314 <SCSI_Inquiry+0xf0>
  }

  if (hmsc->cbw.dDataLength == 0U)
 800924e:	69bb      	ldr	r3, [r7, #24]
 8009250:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009254:	699b      	ldr	r3, [r3, #24]
 8009256:	2b00      	cmp	r3, #0
 8009258:	d10b      	bne.n	8009272 <SCSI_Inquiry+0x4e>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800925a:	69bb      	ldr	r3, [r7, #24]
 800925c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009260:	7f59      	ldrb	r1, [r3, #29]
 8009262:	2320      	movs	r3, #32
 8009264:	2205      	movs	r2, #5
 8009266:	68f8      	ldr	r0, [r7, #12]
 8009268:	f000 fb26 	bl	80098b8 <SCSI_SenseCode>
    return -1;
 800926c:	f04f 33ff 	mov.w	r3, #4294967295
 8009270:	e050      	b.n	8009314 <SCSI_Inquiry+0xf0>
  }

  if ((params[1] & 0x01U) != 0U) /* Evpd is set */
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	3301      	adds	r3, #1
 8009276:	781b      	ldrb	r3, [r3, #0]
 8009278:	f003 0301 	and.w	r3, r3, #1
 800927c:	2b00      	cmp	r3, #0
 800927e:	d021      	beq.n	80092c4 <SCSI_Inquiry+0xa0>
  {
    if (params[2] == 0U) /* Request for Supported Vital Product Data Pages*/
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	3302      	adds	r3, #2
 8009284:	781b      	ldrb	r3, [r3, #0]
 8009286:	2b00      	cmp	r3, #0
 8009288:	d105      	bne.n	8009296 <SCSI_Inquiry+0x72>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page00_Inquiry_Data, LENGTH_INQUIRY_PAGE00);
 800928a:	2206      	movs	r2, #6
 800928c:	4923      	ldr	r1, [pc, #140]	; (800931c <SCSI_Inquiry+0xf8>)
 800928e:	69b8      	ldr	r0, [r7, #24]
 8009290:	f001 f8f8 	bl	800a484 <SCSI_UpdateBotData>
 8009294:	e03d      	b.n	8009312 <SCSI_Inquiry+0xee>
    }
    else if (params[2] == 0x80U) /* Request for VPD page 0x80 Unit Serial Number */
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	3302      	adds	r3, #2
 800929a:	781b      	ldrb	r3, [r3, #0]
 800929c:	2b80      	cmp	r3, #128	; 0x80
 800929e:	d105      	bne.n	80092ac <SCSI_Inquiry+0x88>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page80_Inquiry_Data, LENGTH_INQUIRY_PAGE80);
 80092a0:	2208      	movs	r2, #8
 80092a2:	491f      	ldr	r1, [pc, #124]	; (8009320 <SCSI_Inquiry+0xfc>)
 80092a4:	69b8      	ldr	r0, [r7, #24]
 80092a6:	f001 f8ed 	bl	800a484 <SCSI_UpdateBotData>
 80092aa:	e032      	b.n	8009312 <SCSI_Inquiry+0xee>
    }
    else /* Request Not supported */
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST,
 80092ac:	69bb      	ldr	r3, [r7, #24]
 80092ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80092b2:	7f59      	ldrb	r1, [r3, #29]
 80092b4:	2324      	movs	r3, #36	; 0x24
 80092b6:	2205      	movs	r2, #5
 80092b8:	68f8      	ldr	r0, [r7, #12]
 80092ba:	f000 fafd 	bl	80098b8 <SCSI_SenseCode>
                     INVALID_FIELED_IN_COMMAND);

      return -1;
 80092be:	f04f 33ff 	mov.w	r3, #4294967295
 80092c2:	e027      	b.n	8009314 <SCSI_Inquiry+0xf0>
    }
  }
  else
  {

    pPage = (uint8_t *) & ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->pInquiry[lun * STANDARD_INQUIRY_DATA_LEN];
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80092ca:	68fa      	ldr	r2, [r7, #12]
 80092cc:	33b0      	adds	r3, #176	; 0xb0
 80092ce:	009b      	lsls	r3, r3, #2
 80092d0:	4413      	add	r3, r2
 80092d2:	685b      	ldr	r3, [r3, #4]
 80092d4:	69d9      	ldr	r1, [r3, #28]
 80092d6:	7afa      	ldrb	r2, [r7, #11]
 80092d8:	4613      	mov	r3, r2
 80092da:	00db      	lsls	r3, r3, #3
 80092dc:	4413      	add	r3, r2
 80092de:	009b      	lsls	r3, r3, #2
 80092e0:	440b      	add	r3, r1
 80092e2:	617b      	str	r3, [r7, #20]
    len = (uint16_t)pPage[4] + 5U;
 80092e4:	697b      	ldr	r3, [r7, #20]
 80092e6:	3304      	adds	r3, #4
 80092e8:	781b      	ldrb	r3, [r3, #0]
 80092ea:	b29b      	uxth	r3, r3
 80092ec:	3305      	adds	r3, #5
 80092ee:	83fb      	strh	r3, [r7, #30]

    if (params[4] <= len)
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	3304      	adds	r3, #4
 80092f4:	781b      	ldrb	r3, [r3, #0]
 80092f6:	b29b      	uxth	r3, r3
 80092f8:	8bfa      	ldrh	r2, [r7, #30]
 80092fa:	429a      	cmp	r2, r3
 80092fc:	d303      	bcc.n	8009306 <SCSI_Inquiry+0xe2>
    {
      len = params[4];
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	3304      	adds	r3, #4
 8009302:	781b      	ldrb	r3, [r3, #0]
 8009304:	83fb      	strh	r3, [r7, #30]
    }

    (void)SCSI_UpdateBotData(hmsc, pPage, len);
 8009306:	8bfb      	ldrh	r3, [r7, #30]
 8009308:	461a      	mov	r2, r3
 800930a:	6979      	ldr	r1, [r7, #20]
 800930c:	69b8      	ldr	r0, [r7, #24]
 800930e:	f001 f8b9 	bl	800a484 <SCSI_UpdateBotData>
  }

  return 0;
 8009312:	2300      	movs	r3, #0
}
 8009314:	4618      	mov	r0, r3
 8009316:	3720      	adds	r7, #32
 8009318:	46bd      	mov	sp, r7
 800931a:	bd80      	pop	{r7, pc}
 800931c:	20000074 	.word	0x20000074
 8009320:	2000007c 	.word	0x2000007c

08009324 <SCSI_ReadCapacity10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadCapacity10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8009324:	b590      	push	{r4, r7, lr}
 8009326:	b087      	sub	sp, #28
 8009328:	af00      	add	r7, sp, #0
 800932a:	60f8      	str	r0, [r7, #12]
 800932c:	460b      	mov	r3, r1
 800932e:	607a      	str	r2, [r7, #4]
 8009330:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	32b0      	adds	r2, #176	; 0xb0
 800933c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009340:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8009342:	697b      	ldr	r3, [r7, #20]
 8009344:	2b00      	cmp	r3, #0
 8009346:	d102      	bne.n	800934e <SCSI_ReadCapacity10+0x2a>
  {
    return -1;
 8009348:	f04f 33ff 	mov.w	r3, #4294967295
 800934c:	e075      	b.n	800943a <SCSI_ReadCapacity10+0x116>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size);
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009354:	68fa      	ldr	r2, [r7, #12]
 8009356:	33b0      	adds	r3, #176	; 0xb0
 8009358:	009b      	lsls	r3, r3, #2
 800935a:	4413      	add	r3, r2
 800935c:	685b      	ldr	r3, [r3, #4]
 800935e:	685c      	ldr	r4, [r3, #4]
 8009360:	697b      	ldr	r3, [r7, #20]
 8009362:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 8009366:	3308      	adds	r3, #8
 8009368:	697a      	ldr	r2, [r7, #20]
 800936a:	f502 5283 	add.w	r2, r2, #4192	; 0x1060
 800936e:	3204      	adds	r2, #4
 8009370:	7af8      	ldrb	r0, [r7, #11]
 8009372:	4619      	mov	r1, r3
 8009374:	47a0      	blx	r4
 8009376:	4603      	mov	r3, r0
 8009378:	74fb      	strb	r3, [r7, #19]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 800937a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800937e:	2b00      	cmp	r3, #0
 8009380:	d106      	bne.n	8009390 <SCSI_ReadCapacity10+0x6c>
 8009382:	697b      	ldr	r3, [r7, #20]
 8009384:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009388:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 800938c:	2b02      	cmp	r3, #2
 800938e:	d108      	bne.n	80093a2 <SCSI_ReadCapacity10+0x7e>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8009390:	7af9      	ldrb	r1, [r7, #11]
 8009392:	233a      	movs	r3, #58	; 0x3a
 8009394:	2202      	movs	r2, #2
 8009396:	68f8      	ldr	r0, [r7, #12]
 8009398:	f000 fa8e 	bl	80098b8 <SCSI_SenseCode>
    return -1;
 800939c:	f04f 33ff 	mov.w	r3, #4294967295
 80093a0:	e04b      	b.n	800943a <SCSI_ReadCapacity10+0x116>
  }

  hmsc->bot_data[0] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 80093a2:	697b      	ldr	r3, [r7, #20]
 80093a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80093a8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80093aa:	3b01      	subs	r3, #1
 80093ac:	0e1b      	lsrs	r3, r3, #24
 80093ae:	b2da      	uxtb	r2, r3
 80093b0:	697b      	ldr	r3, [r7, #20]
 80093b2:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[1] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 80093b4:	697b      	ldr	r3, [r7, #20]
 80093b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80093ba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80093bc:	3b01      	subs	r3, #1
 80093be:	0c1b      	lsrs	r3, r3, #16
 80093c0:	b2da      	uxtb	r2, r3
 80093c2:	697b      	ldr	r3, [r7, #20]
 80093c4:	745a      	strb	r2, [r3, #17]
  hmsc->bot_data[2] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 80093c6:	697b      	ldr	r3, [r7, #20]
 80093c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80093cc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80093ce:	3b01      	subs	r3, #1
 80093d0:	0a1b      	lsrs	r3, r3, #8
 80093d2:	b2da      	uxtb	r2, r3
 80093d4:	697b      	ldr	r3, [r7, #20]
 80093d6:	749a      	strb	r2, [r3, #18]
  hmsc->bot_data[3] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 80093d8:	697b      	ldr	r3, [r7, #20]
 80093da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80093de:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80093e0:	b2db      	uxtb	r3, r3
 80093e2:	3b01      	subs	r3, #1
 80093e4:	b2da      	uxtb	r2, r3
 80093e6:	697b      	ldr	r3, [r7, #20]
 80093e8:	74da      	strb	r2, [r3, #19]

  hmsc->bot_data[4] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 80093ea:	697b      	ldr	r3, [r7, #20]
 80093ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80093f0:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80093f4:	161b      	asrs	r3, r3, #24
 80093f6:	b2da      	uxtb	r2, r3
 80093f8:	697b      	ldr	r3, [r7, #20]
 80093fa:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 80093fc:	697b      	ldr	r3, [r7, #20]
 80093fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009402:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8009406:	141b      	asrs	r3, r3, #16
 8009408:	b2da      	uxtb	r2, r3
 800940a:	697b      	ldr	r3, [r7, #20]
 800940c:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 800940e:	697b      	ldr	r3, [r7, #20]
 8009410:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009414:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8009418:	0a1b      	lsrs	r3, r3, #8
 800941a:	b29b      	uxth	r3, r3
 800941c:	b2da      	uxtb	r2, r3
 800941e:	697b      	ldr	r3, [r7, #20]
 8009420:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_size);
 8009422:	697b      	ldr	r3, [r7, #20]
 8009424:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009428:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800942c:	b2da      	uxtb	r2, r3
 800942e:	697b      	ldr	r3, [r7, #20]
 8009430:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data_length = 8U;
 8009432:	697b      	ldr	r3, [r7, #20]
 8009434:	2208      	movs	r2, #8
 8009436:	60da      	str	r2, [r3, #12]

  return 0;
 8009438:	2300      	movs	r3, #0

}
 800943a:	4618      	mov	r0, r3
 800943c:	371c      	adds	r7, #28
 800943e:	46bd      	mov	sp, r7
 8009440:	bd90      	pop	{r4, r7, pc}

08009442 <SCSI_ReadCapacity16>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadCapacity16(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8009442:	b590      	push	{r4, r7, lr}
 8009444:	b089      	sub	sp, #36	; 0x24
 8009446:	af00      	add	r7, sp, #0
 8009448:	60f8      	str	r0, [r7, #12]
 800944a:	460b      	mov	r3, r1
 800944c:	607a      	str	r2, [r7, #4]
 800944e:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint8_t idx;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	32b0      	adds	r2, #176	; 0xb0
 800945a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800945e:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 8009460:	69bb      	ldr	r3, [r7, #24]
 8009462:	2b00      	cmp	r3, #0
 8009464:	d102      	bne.n	800946c <SCSI_ReadCapacity16+0x2a>
  {
    return -1;
 8009466:	f04f 33ff 	mov.w	r3, #4294967295
 800946a:	e0aa      	b.n	80095c2 <SCSI_ReadCapacity16+0x180>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size);
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009472:	68fa      	ldr	r2, [r7, #12]
 8009474:	33b0      	adds	r3, #176	; 0xb0
 8009476:	009b      	lsls	r3, r3, #2
 8009478:	4413      	add	r3, r2
 800947a:	685b      	ldr	r3, [r3, #4]
 800947c:	685c      	ldr	r4, [r3, #4]
 800947e:	69bb      	ldr	r3, [r7, #24]
 8009480:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 8009484:	3308      	adds	r3, #8
 8009486:	69ba      	ldr	r2, [r7, #24]
 8009488:	f502 5283 	add.w	r2, r2, #4192	; 0x1060
 800948c:	3204      	adds	r2, #4
 800948e:	7af8      	ldrb	r0, [r7, #11]
 8009490:	4619      	mov	r1, r3
 8009492:	47a0      	blx	r4
 8009494:	4603      	mov	r3, r0
 8009496:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 8009498:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800949c:	2b00      	cmp	r3, #0
 800949e:	d106      	bne.n	80094ae <SCSI_ReadCapacity16+0x6c>
 80094a0:	69bb      	ldr	r3, [r7, #24]
 80094a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80094a6:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 80094aa:	2b02      	cmp	r3, #2
 80094ac:	d108      	bne.n	80094c0 <SCSI_ReadCapacity16+0x7e>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80094ae:	7af9      	ldrb	r1, [r7, #11]
 80094b0:	233a      	movs	r3, #58	; 0x3a
 80094b2:	2202      	movs	r2, #2
 80094b4:	68f8      	ldr	r0, [r7, #12]
 80094b6:	f000 f9ff 	bl	80098b8 <SCSI_SenseCode>
    return -1;
 80094ba:	f04f 33ff 	mov.w	r3, #4294967295
 80094be:	e080      	b.n	80095c2 <SCSI_ReadCapacity16+0x180>
  }

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	330a      	adds	r3, #10
 80094c4:	781b      	ldrb	r3, [r3, #0]
 80094c6:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	330b      	adds	r3, #11
 80094cc:	781b      	ldrb	r3, [r3, #0]
 80094ce:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 80094d0:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	330c      	adds	r3, #12
 80094d6:	781b      	ldrb	r3, [r3, #0]
 80094d8:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 80094da:	4313      	orrs	r3, r2
                          (uint32_t)params[13];
 80094dc:	687a      	ldr	r2, [r7, #4]
 80094de:	320d      	adds	r2, #13
 80094e0:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 80094e2:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 80094e4:	69bb      	ldr	r3, [r7, #24]
 80094e6:	60da      	str	r2, [r3, #12]

  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 80094e8:	2300      	movs	r3, #0
 80094ea:	77fb      	strb	r3, [r7, #31]
 80094ec:	e007      	b.n	80094fe <SCSI_ReadCapacity16+0xbc>
  {
    hmsc->bot_data[idx] = 0U;
 80094ee:	7ffb      	ldrb	r3, [r7, #31]
 80094f0:	69ba      	ldr	r2, [r7, #24]
 80094f2:	4413      	add	r3, r2
 80094f4:	2200      	movs	r2, #0
 80094f6:	741a      	strb	r2, [r3, #16]
  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 80094f8:	7ffb      	ldrb	r3, [r7, #31]
 80094fa:	3301      	adds	r3, #1
 80094fc:	77fb      	strb	r3, [r7, #31]
 80094fe:	7ffa      	ldrb	r2, [r7, #31]
 8009500:	69bb      	ldr	r3, [r7, #24]
 8009502:	68db      	ldr	r3, [r3, #12]
 8009504:	429a      	cmp	r2, r3
 8009506:	d3f2      	bcc.n	80094ee <SCSI_ReadCapacity16+0xac>
  }

  hmsc->bot_data[4] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 8009508:	69bb      	ldr	r3, [r7, #24]
 800950a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800950e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009510:	3b01      	subs	r3, #1
 8009512:	0e1b      	lsrs	r3, r3, #24
 8009514:	b2da      	uxtb	r2, r3
 8009516:	69bb      	ldr	r3, [r7, #24]
 8009518:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 800951a:	69bb      	ldr	r3, [r7, #24]
 800951c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009520:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009522:	3b01      	subs	r3, #1
 8009524:	0c1b      	lsrs	r3, r3, #16
 8009526:	b2da      	uxtb	r2, r3
 8009528:	69bb      	ldr	r3, [r7, #24]
 800952a:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 800952c:	69bb      	ldr	r3, [r7, #24]
 800952e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009532:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009534:	3b01      	subs	r3, #1
 8009536:	0a1b      	lsrs	r3, r3, #8
 8009538:	b2da      	uxtb	r2, r3
 800953a:	69bb      	ldr	r3, [r7, #24]
 800953c:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 800953e:	69bb      	ldr	r3, [r7, #24]
 8009540:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009544:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009546:	b2db      	uxtb	r3, r3
 8009548:	3b01      	subs	r3, #1
 800954a:	b2da      	uxtb	r2, r3
 800954c:	69bb      	ldr	r3, [r7, #24]
 800954e:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 8009550:	69bb      	ldr	r3, [r7, #24]
 8009552:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009556:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800955a:	161b      	asrs	r3, r3, #24
 800955c:	b2da      	uxtb	r2, r3
 800955e:	69bb      	ldr	r3, [r7, #24]
 8009560:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 8009562:	69bb      	ldr	r3, [r7, #24]
 8009564:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009568:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800956c:	141b      	asrs	r3, r3, #16
 800956e:	b2da      	uxtb	r2, r3
 8009570:	69bb      	ldr	r3, [r7, #24]
 8009572:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 8009574:	69bb      	ldr	r3, [r7, #24]
 8009576:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800957a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800957e:	0a1b      	lsrs	r3, r3, #8
 8009580:	b29b      	uxth	r3, r3
 8009582:	b2da      	uxtb	r2, r3
 8009584:	69bb      	ldr	r3, [r7, #24]
 8009586:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(hmsc->scsi_blk_size);
 8009588:	69bb      	ldr	r3, [r7, #24]
 800958a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800958e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8009592:	b2da      	uxtb	r2, r3
 8009594:	69bb      	ldr	r3, [r7, #24]
 8009596:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	330a      	adds	r3, #10
 800959c:	781b      	ldrb	r3, [r3, #0]
 800959e:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	330b      	adds	r3, #11
 80095a4:	781b      	ldrb	r3, [r3, #0]
 80095a6:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 80095a8:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	330c      	adds	r3, #12
 80095ae:	781b      	ldrb	r3, [r3, #0]
 80095b0:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 80095b2:	4313      	orrs	r3, r2
                          (uint32_t)params[13];
 80095b4:	687a      	ldr	r2, [r7, #4]
 80095b6:	320d      	adds	r2, #13
 80095b8:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 80095ba:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 80095bc:	69bb      	ldr	r3, [r7, #24]
 80095be:	60da      	str	r2, [r3, #12]

  return 0;
 80095c0:	2300      	movs	r3, #0
}
 80095c2:	4618      	mov	r0, r3
 80095c4:	3724      	adds	r7, #36	; 0x24
 80095c6:	46bd      	mov	sp, r7
 80095c8:	bd90      	pop	{r4, r7, pc}

080095ca <SCSI_ReadFormatCapacity>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadFormatCapacity(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80095ca:	b580      	push	{r7, lr}
 80095cc:	b088      	sub	sp, #32
 80095ce:	af00      	add	r7, sp, #0
 80095d0:	60f8      	str	r0, [r7, #12]
 80095d2:	460b      	mov	r3, r1
 80095d4:	607a      	str	r2, [r7, #4]
 80095d6:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint16_t blk_size;
  uint32_t blk_nbr;
  uint16_t i;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	32b0      	adds	r2, #176	; 0xb0
 80095e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80095e6:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 80095e8:	69bb      	ldr	r3, [r7, #24]
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d102      	bne.n	80095f4 <SCSI_ReadFormatCapacity+0x2a>
  {
    return -1;
 80095ee:	f04f 33ff 	mov.w	r3, #4294967295
 80095f2:	e063      	b.n	80096bc <SCSI_ReadFormatCapacity+0xf2>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetCapacity(lun, &blk_nbr, &blk_size);
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80095fa:	68fa      	ldr	r2, [r7, #12]
 80095fc:	33b0      	adds	r3, #176	; 0xb0
 80095fe:	009b      	lsls	r3, r3, #2
 8009600:	4413      	add	r3, r2
 8009602:	685b      	ldr	r3, [r3, #4]
 8009604:	685b      	ldr	r3, [r3, #4]
 8009606:	f107 0214 	add.w	r2, r7, #20
 800960a:	f107 0110 	add.w	r1, r7, #16
 800960e:	7af8      	ldrb	r0, [r7, #11]
 8009610:	4798      	blx	r3
 8009612:	4603      	mov	r3, r0
 8009614:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 8009616:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800961a:	2b00      	cmp	r3, #0
 800961c:	d106      	bne.n	800962c <SCSI_ReadFormatCapacity+0x62>
 800961e:	69bb      	ldr	r3, [r7, #24]
 8009620:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009624:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8009628:	2b02      	cmp	r3, #2
 800962a:	d108      	bne.n	800963e <SCSI_ReadFormatCapacity+0x74>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800962c:	7af9      	ldrb	r1, [r7, #11]
 800962e:	233a      	movs	r3, #58	; 0x3a
 8009630:	2202      	movs	r2, #2
 8009632:	68f8      	ldr	r0, [r7, #12]
 8009634:	f000 f940 	bl	80098b8 <SCSI_SenseCode>
    return -1;
 8009638:	f04f 33ff 	mov.w	r3, #4294967295
 800963c:	e03e      	b.n	80096bc <SCSI_ReadFormatCapacity+0xf2>
  }

  for (i = 0U; i < 12U ; i++)
 800963e:	2300      	movs	r3, #0
 8009640:	83fb      	strh	r3, [r7, #30]
 8009642:	e007      	b.n	8009654 <SCSI_ReadFormatCapacity+0x8a>
  {
    hmsc->bot_data[i] = 0U;
 8009644:	8bfb      	ldrh	r3, [r7, #30]
 8009646:	69ba      	ldr	r2, [r7, #24]
 8009648:	4413      	add	r3, r2
 800964a:	2200      	movs	r2, #0
 800964c:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < 12U ; i++)
 800964e:	8bfb      	ldrh	r3, [r7, #30]
 8009650:	3301      	adds	r3, #1
 8009652:	83fb      	strh	r3, [r7, #30]
 8009654:	8bfb      	ldrh	r3, [r7, #30]
 8009656:	2b0b      	cmp	r3, #11
 8009658:	d9f4      	bls.n	8009644 <SCSI_ReadFormatCapacity+0x7a>
  }

  hmsc->bot_data[3] = 0x08U;
 800965a:	69bb      	ldr	r3, [r7, #24]
 800965c:	2208      	movs	r2, #8
 800965e:	74da      	strb	r2, [r3, #19]
  hmsc->bot_data[4] = (uint8_t)((blk_nbr - 1U) >> 24);
 8009660:	693b      	ldr	r3, [r7, #16]
 8009662:	3b01      	subs	r3, #1
 8009664:	0e1b      	lsrs	r3, r3, #24
 8009666:	b2da      	uxtb	r2, r3
 8009668:	69bb      	ldr	r3, [r7, #24]
 800966a:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((blk_nbr - 1U) >> 16);
 800966c:	693b      	ldr	r3, [r7, #16]
 800966e:	3b01      	subs	r3, #1
 8009670:	0c1b      	lsrs	r3, r3, #16
 8009672:	b2da      	uxtb	r2, r3
 8009674:	69bb      	ldr	r3, [r7, #24]
 8009676:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((blk_nbr - 1U) >>  8);
 8009678:	693b      	ldr	r3, [r7, #16]
 800967a:	3b01      	subs	r3, #1
 800967c:	0a1b      	lsrs	r3, r3, #8
 800967e:	b2da      	uxtb	r2, r3
 8009680:	69bb      	ldr	r3, [r7, #24]
 8009682:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(blk_nbr - 1U);
 8009684:	693b      	ldr	r3, [r7, #16]
 8009686:	b2db      	uxtb	r3, r3
 8009688:	3b01      	subs	r3, #1
 800968a:	b2da      	uxtb	r2, r3
 800968c:	69bb      	ldr	r3, [r7, #24]
 800968e:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = 0x02U;
 8009690:	69bb      	ldr	r3, [r7, #24]
 8009692:	2202      	movs	r2, #2
 8009694:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(blk_size >>  16);
 8009696:	8abb      	ldrh	r3, [r7, #20]
 8009698:	141b      	asrs	r3, r3, #16
 800969a:	b2da      	uxtb	r2, r3
 800969c:	69bb      	ldr	r3, [r7, #24]
 800969e:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(blk_size >>  8);
 80096a0:	8abb      	ldrh	r3, [r7, #20]
 80096a2:	0a1b      	lsrs	r3, r3, #8
 80096a4:	b29b      	uxth	r3, r3
 80096a6:	b2da      	uxtb	r2, r3
 80096a8:	69bb      	ldr	r3, [r7, #24]
 80096aa:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(blk_size);
 80096ac:	8abb      	ldrh	r3, [r7, #20]
 80096ae:	b2da      	uxtb	r2, r3
 80096b0:	69bb      	ldr	r3, [r7, #24]
 80096b2:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = 12U;
 80096b4:	69bb      	ldr	r3, [r7, #24]
 80096b6:	220c      	movs	r2, #12
 80096b8:	60da      	str	r2, [r3, #12]

  return 0;
 80096ba:	2300      	movs	r3, #0
}
 80096bc:	4618      	mov	r0, r3
 80096be:	3720      	adds	r7, #32
 80096c0:	46bd      	mov	sp, r7
 80096c2:	bd80      	pop	{r7, pc}

080096c4 <SCSI_ModeSense6>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ModeSense6(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80096c4:	b580      	push	{r7, lr}
 80096c6:	b086      	sub	sp, #24
 80096c8:	af00      	add	r7, sp, #0
 80096ca:	60f8      	str	r0, [r7, #12]
 80096cc:	460b      	mov	r3, r1
 80096ce:	607a      	str	r2, [r7, #4]
 80096d0:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	32b0      	adds	r2, #176	; 0xb0
 80096dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80096e0:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE6_LEN;
 80096e2:	2317      	movs	r3, #23
 80096e4:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 80096e6:	693b      	ldr	r3, [r7, #16]
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d102      	bne.n	80096f2 <SCSI_ModeSense6+0x2e>
  {
    return -1;
 80096ec:	f04f 33ff 	mov.w	r3, #4294967295
 80096f0:	e011      	b.n	8009716 <SCSI_ModeSense6+0x52>
  }

  if (params[4] <= len)
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	3304      	adds	r3, #4
 80096f6:	781b      	ldrb	r3, [r3, #0]
 80096f8:	b29b      	uxth	r3, r3
 80096fa:	8afa      	ldrh	r2, [r7, #22]
 80096fc:	429a      	cmp	r2, r3
 80096fe:	d303      	bcc.n	8009708 <SCSI_ModeSense6+0x44>
  {
    len = params[4];
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	3304      	adds	r3, #4
 8009704:	781b      	ldrb	r3, [r3, #0]
 8009706:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense6_data, len);
 8009708:	8afb      	ldrh	r3, [r7, #22]
 800970a:	461a      	mov	r2, r3
 800970c:	4904      	ldr	r1, [pc, #16]	; (8009720 <SCSI_ModeSense6+0x5c>)
 800970e:	6938      	ldr	r0, [r7, #16]
 8009710:	f000 feb8 	bl	800a484 <SCSI_UpdateBotData>

  return 0;
 8009714:	2300      	movs	r3, #0
}
 8009716:	4618      	mov	r0, r3
 8009718:	3718      	adds	r7, #24
 800971a:	46bd      	mov	sp, r7
 800971c:	bd80      	pop	{r7, pc}
 800971e:	bf00      	nop
 8009720:	20000084 	.word	0x20000084

08009724 <SCSI_ModeSense10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ModeSense10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8009724:	b580      	push	{r7, lr}
 8009726:	b086      	sub	sp, #24
 8009728:	af00      	add	r7, sp, #0
 800972a:	60f8      	str	r0, [r7, #12]
 800972c:	460b      	mov	r3, r1
 800972e:	607a      	str	r2, [r7, #4]
 8009730:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	32b0      	adds	r2, #176	; 0xb0
 800973c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009740:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE10_LEN;
 8009742:	231b      	movs	r3, #27
 8009744:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 8009746:	693b      	ldr	r3, [r7, #16]
 8009748:	2b00      	cmp	r3, #0
 800974a:	d102      	bne.n	8009752 <SCSI_ModeSense10+0x2e>
  {
    return -1;
 800974c:	f04f 33ff 	mov.w	r3, #4294967295
 8009750:	e011      	b.n	8009776 <SCSI_ModeSense10+0x52>
  }

  if (params[8] <= len)
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	3308      	adds	r3, #8
 8009756:	781b      	ldrb	r3, [r3, #0]
 8009758:	b29b      	uxth	r3, r3
 800975a:	8afa      	ldrh	r2, [r7, #22]
 800975c:	429a      	cmp	r2, r3
 800975e:	d303      	bcc.n	8009768 <SCSI_ModeSense10+0x44>
  {
    len = params[8];
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	3308      	adds	r3, #8
 8009764:	781b      	ldrb	r3, [r3, #0]
 8009766:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense10_data, len);
 8009768:	8afb      	ldrh	r3, [r7, #22]
 800976a:	461a      	mov	r2, r3
 800976c:	4904      	ldr	r1, [pc, #16]	; (8009780 <SCSI_ModeSense10+0x5c>)
 800976e:	6938      	ldr	r0, [r7, #16]
 8009770:	f000 fe88 	bl	800a484 <SCSI_UpdateBotData>

  return 0;
 8009774:	2300      	movs	r3, #0
}
 8009776:	4618      	mov	r0, r3
 8009778:	3718      	adds	r7, #24
 800977a:	46bd      	mov	sp, r7
 800977c:	bd80      	pop	{r7, pc}
 800977e:	bf00      	nop
 8009780:	2000009c 	.word	0x2000009c

08009784 <SCSI_RequestSense>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_RequestSense(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8009784:	b580      	push	{r7, lr}
 8009786:	b086      	sub	sp, #24
 8009788:	af00      	add	r7, sp, #0
 800978a:	60f8      	str	r0, [r7, #12]
 800978c:	460b      	mov	r3, r1
 800978e:	607a      	str	r2, [r7, #4]
 8009790:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  uint8_t i;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009792:	68fb      	ldr	r3, [r7, #12]
 8009794:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009798:	68fb      	ldr	r3, [r7, #12]
 800979a:	32b0      	adds	r2, #176	; 0xb0
 800979c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80097a0:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 80097a2:	693b      	ldr	r3, [r7, #16]
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d102      	bne.n	80097ae <SCSI_RequestSense+0x2a>
  {
    return -1;
 80097a8:	f04f 33ff 	mov.w	r3, #4294967295
 80097ac:	e080      	b.n	80098b0 <SCSI_RequestSense+0x12c>
  }

  if (hmsc->cbw.dDataLength == 0U)
 80097ae:	693b      	ldr	r3, [r7, #16]
 80097b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80097b4:	699b      	ldr	r3, [r3, #24]
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d10b      	bne.n	80097d2 <SCSI_RequestSense+0x4e>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80097ba:	693b      	ldr	r3, [r7, #16]
 80097bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80097c0:	7f59      	ldrb	r1, [r3, #29]
 80097c2:	2320      	movs	r3, #32
 80097c4:	2205      	movs	r2, #5
 80097c6:	68f8      	ldr	r0, [r7, #12]
 80097c8:	f000 f876 	bl	80098b8 <SCSI_SenseCode>
    return -1;
 80097cc:	f04f 33ff 	mov.w	r3, #4294967295
 80097d0:	e06e      	b.n	80098b0 <SCSI_RequestSense+0x12c>
  }

  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 80097d2:	2300      	movs	r3, #0
 80097d4:	75fb      	strb	r3, [r7, #23]
 80097d6:	e007      	b.n	80097e8 <SCSI_RequestSense+0x64>
  {
    hmsc->bot_data[i] = 0U;
 80097d8:	7dfb      	ldrb	r3, [r7, #23]
 80097da:	693a      	ldr	r2, [r7, #16]
 80097dc:	4413      	add	r3, r2
 80097de:	2200      	movs	r2, #0
 80097e0:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 80097e2:	7dfb      	ldrb	r3, [r7, #23]
 80097e4:	3301      	adds	r3, #1
 80097e6:	75fb      	strb	r3, [r7, #23]
 80097e8:	7dfb      	ldrb	r3, [r7, #23]
 80097ea:	2b11      	cmp	r3, #17
 80097ec:	d9f4      	bls.n	80097d8 <SCSI_RequestSense+0x54>
  }

  hmsc->bot_data[0] = 0x70U;
 80097ee:	693b      	ldr	r3, [r7, #16]
 80097f0:	2270      	movs	r2, #112	; 0x70
 80097f2:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[7] = REQUEST_SENSE_DATA_LEN - 6U;
 80097f4:	693b      	ldr	r3, [r7, #16]
 80097f6:	220c      	movs	r2, #12
 80097f8:	75da      	strb	r2, [r3, #23]

  if ((hmsc->scsi_sense_head != hmsc->scsi_sense_tail))
 80097fa:	693b      	ldr	r3, [r7, #16]
 80097fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009800:	f893 2060 	ldrb.w	r2, [r3, #96]	; 0x60
 8009804:	693b      	ldr	r3, [r7, #16]
 8009806:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800980a:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800980e:	429a      	cmp	r2, r3
 8009810:	d03f      	beq.n	8009892 <SCSI_RequestSense+0x10e>
  {
    hmsc->bot_data[2] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].Skey;
 8009812:	693b      	ldr	r3, [r7, #16]
 8009814:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009818:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800981c:	461a      	mov	r2, r3
 800981e:	693b      	ldr	r3, [r7, #16]
 8009820:	f502 7202 	add.w	r2, r2, #520	; 0x208
 8009824:	f813 2032 	ldrb.w	r2, [r3, r2, lsl #3]
 8009828:	693b      	ldr	r3, [r7, #16]
 800982a:	749a      	strb	r2, [r3, #18]
    hmsc->bot_data[12] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASC;
 800982c:	693b      	ldr	r3, [r7, #16]
 800982e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009832:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8009836:	693a      	ldr	r2, [r7, #16]
 8009838:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800983c:	00db      	lsls	r3, r3, #3
 800983e:	4413      	add	r3, r2
 8009840:	791a      	ldrb	r2, [r3, #4]
 8009842:	693b      	ldr	r3, [r7, #16]
 8009844:	771a      	strb	r2, [r3, #28]
    hmsc->bot_data[13] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASCQ;
 8009846:	693b      	ldr	r3, [r7, #16]
 8009848:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800984c:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8009850:	693a      	ldr	r2, [r7, #16]
 8009852:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8009856:	00db      	lsls	r3, r3, #3
 8009858:	4413      	add	r3, r2
 800985a:	795a      	ldrb	r2, [r3, #5]
 800985c:	693b      	ldr	r3, [r7, #16]
 800985e:	775a      	strb	r2, [r3, #29]
    hmsc->scsi_sense_head++;
 8009860:	693b      	ldr	r3, [r7, #16]
 8009862:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009866:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800986a:	3301      	adds	r3, #1
 800986c:	b2da      	uxtb	r2, r3
 800986e:	693b      	ldr	r3, [r7, #16]
 8009870:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009874:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

    if (hmsc->scsi_sense_head == SENSE_LIST_DEEPTH)
 8009878:	693b      	ldr	r3, [r7, #16]
 800987a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800987e:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8009882:	2b04      	cmp	r3, #4
 8009884:	d105      	bne.n	8009892 <SCSI_RequestSense+0x10e>
    {
      hmsc->scsi_sense_head = 0U;
 8009886:	693b      	ldr	r3, [r7, #16]
 8009888:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800988c:	2200      	movs	r2, #0
 800988e:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
    }
  }

  hmsc->bot_data_length = REQUEST_SENSE_DATA_LEN;
 8009892:	693b      	ldr	r3, [r7, #16]
 8009894:	2212      	movs	r2, #18
 8009896:	60da      	str	r2, [r3, #12]

  if (params[4] <= REQUEST_SENSE_DATA_LEN)
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	3304      	adds	r3, #4
 800989c:	781b      	ldrb	r3, [r3, #0]
 800989e:	2b12      	cmp	r3, #18
 80098a0:	d805      	bhi.n	80098ae <SCSI_RequestSense+0x12a>
  {
    hmsc->bot_data_length = params[4];
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	3304      	adds	r3, #4
 80098a6:	781b      	ldrb	r3, [r3, #0]
 80098a8:	461a      	mov	r2, r3
 80098aa:	693b      	ldr	r3, [r7, #16]
 80098ac:	60da      	str	r2, [r3, #12]
  }

  return 0;
 80098ae:	2300      	movs	r3, #0
}
 80098b0:	4618      	mov	r0, r3
 80098b2:	3718      	adds	r7, #24
 80098b4:	46bd      	mov	sp, r7
 80098b6:	bd80      	pop	{r7, pc}

080098b8 <SCSI_SenseCode>:
  * @param  ASC: Additional Sense Code
  * @retval none

  */
void SCSI_SenseCode(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t sKey, uint8_t ASC)
{
 80098b8:	b480      	push	{r7}
 80098ba:	b085      	sub	sp, #20
 80098bc:	af00      	add	r7, sp, #0
 80098be:	6078      	str	r0, [r7, #4]
 80098c0:	4608      	mov	r0, r1
 80098c2:	4611      	mov	r1, r2
 80098c4:	461a      	mov	r2, r3
 80098c6:	4603      	mov	r3, r0
 80098c8:	70fb      	strb	r3, [r7, #3]
 80098ca:	460b      	mov	r3, r1
 80098cc:	70bb      	strb	r3, [r7, #2]
 80098ce:	4613      	mov	r3, r2
 80098d0:	707b      	strb	r3, [r7, #1]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	32b0      	adds	r2, #176	; 0xb0
 80098dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80098e0:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	d03d      	beq.n	8009964 <SCSI_SenseCode+0xac>
  {
    return;
  }

  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey = sKey;
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80098ee:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 80098f2:	461a      	mov	r2, r3
 80098f4:	68fb      	ldr	r3, [r7, #12]
 80098f6:	f502 7202 	add.w	r2, r2, #520	; 0x208
 80098fa:	78b9      	ldrb	r1, [r7, #2]
 80098fc:	f803 1032 	strb.w	r1, [r3, r2, lsl #3]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASC = ASC;
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009906:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800990a:	68fa      	ldr	r2, [r7, #12]
 800990c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8009910:	00db      	lsls	r3, r3, #3
 8009912:	4413      	add	r3, r2
 8009914:	787a      	ldrb	r2, [r7, #1]
 8009916:	711a      	strb	r2, [r3, #4]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASCQ = 0U;
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800991e:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8009922:	68fa      	ldr	r2, [r7, #12]
 8009924:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8009928:	00db      	lsls	r3, r3, #3
 800992a:	4413      	add	r3, r2
 800992c:	2200      	movs	r2, #0
 800992e:	715a      	strb	r2, [r3, #5]
  hmsc->scsi_sense_tail++;
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009936:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800993a:	3301      	adds	r3, #1
 800993c:	b2da      	uxtb	r2, r3
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009944:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800994e:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8009952:	2b04      	cmp	r3, #4
 8009954:	d107      	bne.n	8009966 <SCSI_SenseCode+0xae>
  {
    hmsc->scsi_sense_tail = 0U;
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800995c:	2200      	movs	r2, #0
 800995e:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
 8009962:	e000      	b.n	8009966 <SCSI_SenseCode+0xae>
    return;
 8009964:	bf00      	nop
  }
}
 8009966:	3714      	adds	r7, #20
 8009968:	46bd      	mov	sp, r7
 800996a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800996e:	4770      	bx	lr

08009970 <SCSI_StartStopUnit>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_StartStopUnit(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8009970:	b580      	push	{r7, lr}
 8009972:	b086      	sub	sp, #24
 8009974:	af00      	add	r7, sp, #0
 8009976:	60f8      	str	r0, [r7, #12]
 8009978:	460b      	mov	r3, r1
 800997a:	607a      	str	r2, [r7, #4]
 800997c:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800997e:	68fb      	ldr	r3, [r7, #12]
 8009980:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	32b0      	adds	r2, #176	; 0xb0
 8009988:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800998c:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800998e:	697b      	ldr	r3, [r7, #20]
 8009990:	2b00      	cmp	r3, #0
 8009992:	d102      	bne.n	800999a <SCSI_StartStopUnit+0x2a>
  {
    return -1;
 8009994:	f04f 33ff 	mov.w	r3, #4294967295
 8009998:	e043      	b.n	8009a22 <SCSI_StartStopUnit+0xb2>
  }

  if ((hmsc->scsi_medium_state == SCSI_MEDIUM_LOCKED) && ((params[4] & 0x3U) == 2U))
 800999a:	697b      	ldr	r3, [r7, #20]
 800999c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80099a0:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 80099a4:	2b01      	cmp	r3, #1
 80099a6:	d10f      	bne.n	80099c8 <SCSI_StartStopUnit+0x58>
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	3304      	adds	r3, #4
 80099ac:	781b      	ldrb	r3, [r3, #0]
 80099ae:	f003 0303 	and.w	r3, r3, #3
 80099b2:	2b02      	cmp	r3, #2
 80099b4:	d108      	bne.n	80099c8 <SCSI_StartStopUnit+0x58>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 80099b6:	7af9      	ldrb	r1, [r7, #11]
 80099b8:	2324      	movs	r3, #36	; 0x24
 80099ba:	2205      	movs	r2, #5
 80099bc:	68f8      	ldr	r0, [r7, #12]
 80099be:	f7ff ff7b 	bl	80098b8 <SCSI_SenseCode>

    return -1;
 80099c2:	f04f 33ff 	mov.w	r3, #4294967295
 80099c6:	e02c      	b.n	8009a22 <SCSI_StartStopUnit+0xb2>
  }

  if ((params[4] & 0x3U) == 0x1U) /* START=1 */
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	3304      	adds	r3, #4
 80099cc:	781b      	ldrb	r3, [r3, #0]
 80099ce:	f003 0303 	and.w	r3, r3, #3
 80099d2:	2b01      	cmp	r3, #1
 80099d4:	d106      	bne.n	80099e4 <SCSI_StartStopUnit+0x74>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 80099d6:	697b      	ldr	r3, [r7, #20]
 80099d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80099dc:	2200      	movs	r2, #0
 80099de:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
 80099e2:	e01a      	b.n	8009a1a <SCSI_StartStopUnit+0xaa>
  }
  else if ((params[4] & 0x3U) == 0x2U) /* START=0 and LOEJ Load Eject=1 */
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	3304      	adds	r3, #4
 80099e8:	781b      	ldrb	r3, [r3, #0]
 80099ea:	f003 0303 	and.w	r3, r3, #3
 80099ee:	2b02      	cmp	r3, #2
 80099f0:	d106      	bne.n	8009a00 <SCSI_StartStopUnit+0x90>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_EJECTED;
 80099f2:	697b      	ldr	r3, [r7, #20]
 80099f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80099f8:	2202      	movs	r2, #2
 80099fa:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
 80099fe:	e00c      	b.n	8009a1a <SCSI_StartStopUnit+0xaa>
  }
  else if ((params[4] & 0x3U) == 0x3U) /* START=1 and LOEJ Load Eject=1 */
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	3304      	adds	r3, #4
 8009a04:	781b      	ldrb	r3, [r3, #0]
 8009a06:	f003 0303 	and.w	r3, r3, #3
 8009a0a:	2b03      	cmp	r3, #3
 8009a0c:	d105      	bne.n	8009a1a <SCSI_StartStopUnit+0xaa>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 8009a0e:	697b      	ldr	r3, [r7, #20]
 8009a10:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009a14:	2200      	movs	r2, #0
 8009a16:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
  }
  else
  {
    /* .. */
  }
  hmsc->bot_data_length = 0U;
 8009a1a:	697b      	ldr	r3, [r7, #20]
 8009a1c:	2200      	movs	r2, #0
 8009a1e:	60da      	str	r2, [r3, #12]

  return 0;
 8009a20:	2300      	movs	r3, #0
}
 8009a22:	4618      	mov	r0, r3
 8009a24:	3718      	adds	r7, #24
 8009a26:	46bd      	mov	sp, r7
 8009a28:	bd80      	pop	{r7, pc}

08009a2a <SCSI_AllowPreventRemovable>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_AllowPreventRemovable(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8009a2a:	b480      	push	{r7}
 8009a2c:	b087      	sub	sp, #28
 8009a2e:	af00      	add	r7, sp, #0
 8009a30:	60f8      	str	r0, [r7, #12]
 8009a32:	460b      	mov	r3, r1
 8009a34:	607a      	str	r2, [r7, #4]
 8009a36:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009a3e:	68fb      	ldr	r3, [r7, #12]
 8009a40:	32b0      	adds	r2, #176	; 0xb0
 8009a42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a46:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8009a48:	697b      	ldr	r3, [r7, #20]
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	d102      	bne.n	8009a54 <SCSI_AllowPreventRemovable+0x2a>
  {
    return -1;
 8009a4e:	f04f 33ff 	mov.w	r3, #4294967295
 8009a52:	e015      	b.n	8009a80 <SCSI_AllowPreventRemovable+0x56>
  }

  if (params[4] == 0U)
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	3304      	adds	r3, #4
 8009a58:	781b      	ldrb	r3, [r3, #0]
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	d106      	bne.n	8009a6c <SCSI_AllowPreventRemovable+0x42>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 8009a5e:	697b      	ldr	r3, [r7, #20]
 8009a60:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009a64:	2200      	movs	r2, #0
 8009a66:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
 8009a6a:	e005      	b.n	8009a78 <SCSI_AllowPreventRemovable+0x4e>
  }
  else
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_LOCKED;
 8009a6c:	697b      	ldr	r3, [r7, #20]
 8009a6e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009a72:	2201      	movs	r2, #1
 8009a74:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
  }

  hmsc->bot_data_length = 0U;
 8009a78:	697b      	ldr	r3, [r7, #20]
 8009a7a:	2200      	movs	r2, #0
 8009a7c:	60da      	str	r2, [r3, #12]

  return 0;
 8009a7e:	2300      	movs	r3, #0
}
 8009a80:	4618      	mov	r0, r3
 8009a82:	371c      	adds	r7, #28
 8009a84:	46bd      	mov	sp, r7
 8009a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a8a:	4770      	bx	lr

08009a8c <SCSI_Read10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Read10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8009a8c:	b580      	push	{r7, lr}
 8009a8e:	b086      	sub	sp, #24
 8009a90:	af00      	add	r7, sp, #0
 8009a92:	60f8      	str	r0, [r7, #12]
 8009a94:	460b      	mov	r3, r1
 8009a96:	607a      	str	r2, [r7, #4]
 8009a98:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009a9a:	68fb      	ldr	r3, [r7, #12]
 8009a9c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009aa0:	68fb      	ldr	r3, [r7, #12]
 8009aa2:	32b0      	adds	r2, #176	; 0xb0
 8009aa4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009aa8:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8009aaa:	697b      	ldr	r3, [r7, #20]
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	d102      	bne.n	8009ab6 <SCSI_Read10+0x2a>
  {
    return -1;
 8009ab0:	f04f 33ff 	mov.w	r3, #4294967295
 8009ab4:	e09d      	b.n	8009bf2 <SCSI_Read10+0x166>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8009ab6:	697b      	ldr	r3, [r7, #20]
 8009ab8:	7a1b      	ldrb	r3, [r3, #8]
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	f040 808f 	bne.w	8009bde <SCSI_Read10+0x152>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 8009ac0:	697b      	ldr	r3, [r7, #20]
 8009ac2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009ac6:	7f1b      	ldrb	r3, [r3, #28]
 8009ac8:	b25b      	sxtb	r3, r3
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	db0b      	blt.n	8009ae6 <SCSI_Read10+0x5a>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8009ace:	697b      	ldr	r3, [r7, #20]
 8009ad0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009ad4:	7f59      	ldrb	r1, [r3, #29]
 8009ad6:	2320      	movs	r3, #32
 8009ad8:	2205      	movs	r2, #5
 8009ada:	68f8      	ldr	r0, [r7, #12]
 8009adc:	f7ff feec 	bl	80098b8 <SCSI_SenseCode>
      return -1;
 8009ae0:	f04f 33ff 	mov.w	r3, #4294967295
 8009ae4:	e085      	b.n	8009bf2 <SCSI_Read10+0x166>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 8009ae6:	697b      	ldr	r3, [r7, #20]
 8009ae8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009aec:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8009af0:	2b02      	cmp	r3, #2
 8009af2:	d108      	bne.n	8009b06 <SCSI_Read10+0x7a>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8009af4:	7af9      	ldrb	r1, [r7, #11]
 8009af6:	233a      	movs	r3, #58	; 0x3a
 8009af8:	2202      	movs	r2, #2
 8009afa:	68f8      	ldr	r0, [r7, #12]
 8009afc:	f7ff fedc 	bl	80098b8 <SCSI_SenseCode>

      return -1;
 8009b00:	f04f 33ff 	mov.w	r3, #4294967295
 8009b04:	e075      	b.n	8009bf2 <SCSI_Read10+0x166>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009b0c:	68fa      	ldr	r2, [r7, #12]
 8009b0e:	33b0      	adds	r3, #176	; 0xb0
 8009b10:	009b      	lsls	r3, r3, #2
 8009b12:	4413      	add	r3, r2
 8009b14:	685b      	ldr	r3, [r3, #4]
 8009b16:	689b      	ldr	r3, [r3, #8]
 8009b18:	7afa      	ldrb	r2, [r7, #11]
 8009b1a:	4610      	mov	r0, r2
 8009b1c:	4798      	blx	r3
 8009b1e:	4603      	mov	r3, r0
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	d008      	beq.n	8009b36 <SCSI_Read10+0xaa>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8009b24:	7af9      	ldrb	r1, [r7, #11]
 8009b26:	233a      	movs	r3, #58	; 0x3a
 8009b28:	2202      	movs	r2, #2
 8009b2a:	68f8      	ldr	r0, [r7, #12]
 8009b2c:	f7ff fec4 	bl	80098b8 <SCSI_SenseCode>
      return -1;
 8009b30:	f04f 33ff 	mov.w	r3, #4294967295
 8009b34:	e05d      	b.n	8009bf2 <SCSI_Read10+0x166>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	3302      	adds	r3, #2
 8009b3a:	781b      	ldrb	r3, [r3, #0]
 8009b3c:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	3303      	adds	r3, #3
 8009b42:	781b      	ldrb	r3, [r3, #0]
 8009b44:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8009b46:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	3304      	adds	r3, #4
 8009b4c:	781b      	ldrb	r3, [r3, #0]
 8009b4e:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8009b50:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8009b52:	687a      	ldr	r2, [r7, #4]
 8009b54:	3205      	adds	r2, #5
 8009b56:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 8009b58:	4313      	orrs	r3, r2
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8009b5a:	697a      	ldr	r2, [r7, #20]
 8009b5c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8009b60:	66d3      	str	r3, [r2, #108]	; 0x6c

    hmsc->scsi_blk_len = ((uint32_t)params[7] <<  8) | (uint32_t)params[8];
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	3307      	adds	r3, #7
 8009b66:	781b      	ldrb	r3, [r3, #0]
 8009b68:	021b      	lsls	r3, r3, #8
 8009b6a:	687a      	ldr	r2, [r7, #4]
 8009b6c:	3208      	adds	r2, #8
 8009b6e:	7812      	ldrb	r2, [r2, #0]
 8009b70:	4313      	orrs	r3, r2
 8009b72:	697a      	ldr	r2, [r7, #20]
 8009b74:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8009b78:	6713      	str	r3, [r2, #112]	; 0x70

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8009b7a:	697b      	ldr	r3, [r7, #20]
 8009b7c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009b80:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8009b82:	697b      	ldr	r3, [r7, #20]
 8009b84:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009b88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009b8a:	7af9      	ldrb	r1, [r7, #11]
 8009b8c:	68f8      	ldr	r0, [r7, #12]
 8009b8e:	f000 fb0c 	bl	800a1aa <SCSI_CheckAddressRange>
 8009b92:	4603      	mov	r3, r0
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	da02      	bge.n	8009b9e <SCSI_Read10+0x112>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8009b98:	f04f 33ff 	mov.w	r3, #4294967295
 8009b9c:	e029      	b.n	8009bf2 <SCSI_Read10+0x166>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 8009b9e:	697b      	ldr	r3, [r7, #20]
 8009ba0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009ba4:	699a      	ldr	r2, [r3, #24]
 8009ba6:	697b      	ldr	r3, [r7, #20]
 8009ba8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009bac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009bae:	6979      	ldr	r1, [r7, #20]
 8009bb0:	f501 5180 	add.w	r1, r1, #4096	; 0x1000
 8009bb4:	f8b1 1064 	ldrh.w	r1, [r1, #100]	; 0x64
 8009bb8:	fb01 f303 	mul.w	r3, r1, r3
 8009bbc:	429a      	cmp	r2, r3
 8009bbe:	d00b      	beq.n	8009bd8 <SCSI_Read10+0x14c>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8009bc0:	697b      	ldr	r3, [r7, #20]
 8009bc2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009bc6:	7f59      	ldrb	r1, [r3, #29]
 8009bc8:	2320      	movs	r3, #32
 8009bca:	2205      	movs	r2, #5
 8009bcc:	68f8      	ldr	r0, [r7, #12]
 8009bce:	f7ff fe73 	bl	80098b8 <SCSI_SenseCode>
      return -1;
 8009bd2:	f04f 33ff 	mov.w	r3, #4294967295
 8009bd6:	e00c      	b.n	8009bf2 <SCSI_Read10+0x166>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 8009bd8:	697b      	ldr	r3, [r7, #20]
 8009bda:	2202      	movs	r2, #2
 8009bdc:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 8009bde:	697b      	ldr	r3, [r7, #20]
 8009be0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8009be4:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 8009be6:	7afb      	ldrb	r3, [r7, #11]
 8009be8:	4619      	mov	r1, r3
 8009bea:	68f8      	ldr	r0, [r7, #12]
 8009bec:	f000 fb0a 	bl	800a204 <SCSI_ProcessRead>
 8009bf0:	4603      	mov	r3, r0
}
 8009bf2:	4618      	mov	r0, r3
 8009bf4:	3718      	adds	r7, #24
 8009bf6:	46bd      	mov	sp, r7
 8009bf8:	bd80      	pop	{r7, pc}

08009bfa <SCSI_Read12>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Read12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8009bfa:	b580      	push	{r7, lr}
 8009bfc:	b086      	sub	sp, #24
 8009bfe:	af00      	add	r7, sp, #0
 8009c00:	60f8      	str	r0, [r7, #12]
 8009c02:	460b      	mov	r3, r1
 8009c04:	607a      	str	r2, [r7, #4]
 8009c06:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009c08:	68fb      	ldr	r3, [r7, #12]
 8009c0a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009c0e:	68fb      	ldr	r3, [r7, #12]
 8009c10:	32b0      	adds	r2, #176	; 0xb0
 8009c12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c16:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8009c18:	697b      	ldr	r3, [r7, #20]
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	d102      	bne.n	8009c24 <SCSI_Read12+0x2a>
  {
    return -1;
 8009c1e:	f04f 33ff 	mov.w	r3, #4294967295
 8009c22:	e0a7      	b.n	8009d74 <SCSI_Read12+0x17a>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8009c24:	697b      	ldr	r3, [r7, #20]
 8009c26:	7a1b      	ldrb	r3, [r3, #8]
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	f040 8099 	bne.w	8009d60 <SCSI_Read12+0x166>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 8009c2e:	697b      	ldr	r3, [r7, #20]
 8009c30:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009c34:	7f1b      	ldrb	r3, [r3, #28]
 8009c36:	b25b      	sxtb	r3, r3
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	db0b      	blt.n	8009c54 <SCSI_Read12+0x5a>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8009c3c:	697b      	ldr	r3, [r7, #20]
 8009c3e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009c42:	7f59      	ldrb	r1, [r3, #29]
 8009c44:	2320      	movs	r3, #32
 8009c46:	2205      	movs	r2, #5
 8009c48:	68f8      	ldr	r0, [r7, #12]
 8009c4a:	f7ff fe35 	bl	80098b8 <SCSI_SenseCode>
      return -1;
 8009c4e:	f04f 33ff 	mov.w	r3, #4294967295
 8009c52:	e08f      	b.n	8009d74 <SCSI_Read12+0x17a>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 8009c54:	697b      	ldr	r3, [r7, #20]
 8009c56:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009c5a:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8009c5e:	2b02      	cmp	r3, #2
 8009c60:	d108      	bne.n	8009c74 <SCSI_Read12+0x7a>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8009c62:	7af9      	ldrb	r1, [r7, #11]
 8009c64:	233a      	movs	r3, #58	; 0x3a
 8009c66:	2202      	movs	r2, #2
 8009c68:	68f8      	ldr	r0, [r7, #12]
 8009c6a:	f7ff fe25 	bl	80098b8 <SCSI_SenseCode>
      return -1;
 8009c6e:	f04f 33ff 	mov.w	r3, #4294967295
 8009c72:	e07f      	b.n	8009d74 <SCSI_Read12+0x17a>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 8009c74:	68fb      	ldr	r3, [r7, #12]
 8009c76:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009c7a:	68fa      	ldr	r2, [r7, #12]
 8009c7c:	33b0      	adds	r3, #176	; 0xb0
 8009c7e:	009b      	lsls	r3, r3, #2
 8009c80:	4413      	add	r3, r2
 8009c82:	685b      	ldr	r3, [r3, #4]
 8009c84:	689b      	ldr	r3, [r3, #8]
 8009c86:	7afa      	ldrb	r2, [r7, #11]
 8009c88:	4610      	mov	r0, r2
 8009c8a:	4798      	blx	r3
 8009c8c:	4603      	mov	r3, r0
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	d008      	beq.n	8009ca4 <SCSI_Read12+0xaa>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8009c92:	7af9      	ldrb	r1, [r7, #11]
 8009c94:	233a      	movs	r3, #58	; 0x3a
 8009c96:	2202      	movs	r2, #2
 8009c98:	68f8      	ldr	r0, [r7, #12]
 8009c9a:	f7ff fe0d 	bl	80098b8 <SCSI_SenseCode>
      return -1;
 8009c9e:	f04f 33ff 	mov.w	r3, #4294967295
 8009ca2:	e067      	b.n	8009d74 <SCSI_Read12+0x17a>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	3302      	adds	r3, #2
 8009ca8:	781b      	ldrb	r3, [r3, #0]
 8009caa:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	3303      	adds	r3, #3
 8009cb0:	781b      	ldrb	r3, [r3, #0]
 8009cb2:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8009cb4:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	3304      	adds	r3, #4
 8009cba:	781b      	ldrb	r3, [r3, #0]
 8009cbc:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8009cbe:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8009cc0:	687a      	ldr	r2, [r7, #4]
 8009cc2:	3205      	adds	r2, #5
 8009cc4:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 8009cc6:	4313      	orrs	r3, r2
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8009cc8:	697a      	ldr	r2, [r7, #20]
 8009cca:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8009cce:	66d3      	str	r3, [r2, #108]	; 0x6c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	3306      	adds	r3, #6
 8009cd4:	781b      	ldrb	r3, [r3, #0]
 8009cd6:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	3307      	adds	r3, #7
 8009cdc:	781b      	ldrb	r3, [r3, #0]
 8009cde:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8009ce0:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	3308      	adds	r3, #8
 8009ce6:	781b      	ldrb	r3, [r3, #0]
 8009ce8:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 8009cea:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 8009cec:	687a      	ldr	r2, [r7, #4]
 8009cee:	3209      	adds	r2, #9
 8009cf0:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 8009cf2:	4313      	orrs	r3, r2
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8009cf4:	697a      	ldr	r2, [r7, #20]
 8009cf6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8009cfa:	6713      	str	r3, [r2, #112]	; 0x70

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8009cfc:	697b      	ldr	r3, [r7, #20]
 8009cfe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009d02:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8009d04:	697b      	ldr	r3, [r7, #20]
 8009d06:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009d0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d0c:	7af9      	ldrb	r1, [r7, #11]
 8009d0e:	68f8      	ldr	r0, [r7, #12]
 8009d10:	f000 fa4b 	bl	800a1aa <SCSI_CheckAddressRange>
 8009d14:	4603      	mov	r3, r0
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	da02      	bge.n	8009d20 <SCSI_Read12+0x126>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8009d1a:	f04f 33ff 	mov.w	r3, #4294967295
 8009d1e:	e029      	b.n	8009d74 <SCSI_Read12+0x17a>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 8009d20:	697b      	ldr	r3, [r7, #20]
 8009d22:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009d26:	699a      	ldr	r2, [r3, #24]
 8009d28:	697b      	ldr	r3, [r7, #20]
 8009d2a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009d2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d30:	6979      	ldr	r1, [r7, #20]
 8009d32:	f501 5180 	add.w	r1, r1, #4096	; 0x1000
 8009d36:	f8b1 1064 	ldrh.w	r1, [r1, #100]	; 0x64
 8009d3a:	fb01 f303 	mul.w	r3, r1, r3
 8009d3e:	429a      	cmp	r2, r3
 8009d40:	d00b      	beq.n	8009d5a <SCSI_Read12+0x160>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8009d42:	697b      	ldr	r3, [r7, #20]
 8009d44:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009d48:	7f59      	ldrb	r1, [r3, #29]
 8009d4a:	2320      	movs	r3, #32
 8009d4c:	2205      	movs	r2, #5
 8009d4e:	68f8      	ldr	r0, [r7, #12]
 8009d50:	f7ff fdb2 	bl	80098b8 <SCSI_SenseCode>
      return -1;
 8009d54:	f04f 33ff 	mov.w	r3, #4294967295
 8009d58:	e00c      	b.n	8009d74 <SCSI_Read12+0x17a>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 8009d5a:	697b      	ldr	r3, [r7, #20]
 8009d5c:	2202      	movs	r2, #2
 8009d5e:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 8009d60:	697b      	ldr	r3, [r7, #20]
 8009d62:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8009d66:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 8009d68:	7afb      	ldrb	r3, [r7, #11]
 8009d6a:	4619      	mov	r1, r3
 8009d6c:	68f8      	ldr	r0, [r7, #12]
 8009d6e:	f000 fa49 	bl	800a204 <SCSI_ProcessRead>
 8009d72:	4603      	mov	r3, r0
}
 8009d74:	4618      	mov	r0, r3
 8009d76:	3718      	adds	r7, #24
 8009d78:	46bd      	mov	sp, r7
 8009d7a:	bd80      	pop	{r7, pc}

08009d7c <SCSI_Write10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Write10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8009d7c:	b580      	push	{r7, lr}
 8009d7e:	b086      	sub	sp, #24
 8009d80:	af00      	add	r7, sp, #0
 8009d82:	60f8      	str	r0, [r7, #12]
 8009d84:	460b      	mov	r3, r1
 8009d86:	607a      	str	r2, [r7, #4]
 8009d88:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009d8a:	68fb      	ldr	r3, [r7, #12]
 8009d8c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009d90:	68fb      	ldr	r3, [r7, #12]
 8009d92:	32b0      	adds	r2, #176	; 0xb0
 8009d94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d98:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc == NULL)
 8009d9a:	697b      	ldr	r3, [r7, #20]
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	d102      	bne.n	8009da6 <SCSI_Write10+0x2a>
  {
    return -1;
 8009da0:	f04f 33ff 	mov.w	r3, #4294967295
 8009da4:	e0c7      	b.n	8009f36 <SCSI_Write10+0x1ba>
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8009da6:	697b      	ldr	r3, [r7, #20]
 8009da8:	7a1b      	ldrb	r3, [r3, #8]
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	f040 80bd 	bne.w	8009f2a <SCSI_Write10+0x1ae>
  {
    if (hmsc->cbw.dDataLength == 0U)
 8009db0:	697b      	ldr	r3, [r7, #20]
 8009db2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009db6:	699b      	ldr	r3, [r3, #24]
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	d10b      	bne.n	8009dd4 <SCSI_Write10+0x58>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8009dbc:	697b      	ldr	r3, [r7, #20]
 8009dbe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009dc2:	7f59      	ldrb	r1, [r3, #29]
 8009dc4:	2320      	movs	r3, #32
 8009dc6:	2205      	movs	r2, #5
 8009dc8:	68f8      	ldr	r0, [r7, #12]
 8009dca:	f7ff fd75 	bl	80098b8 <SCSI_SenseCode>
      return -1;
 8009dce:	f04f 33ff 	mov.w	r3, #4294967295
 8009dd2:	e0b0      	b.n	8009f36 <SCSI_Write10+0x1ba>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 8009dd4:	697b      	ldr	r3, [r7, #20]
 8009dd6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009dda:	7f1b      	ldrb	r3, [r3, #28]
 8009ddc:	b25b      	sxtb	r3, r3
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	da0b      	bge.n	8009dfa <SCSI_Write10+0x7e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8009de2:	697b      	ldr	r3, [r7, #20]
 8009de4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009de8:	7f59      	ldrb	r1, [r3, #29]
 8009dea:	2320      	movs	r3, #32
 8009dec:	2205      	movs	r2, #5
 8009dee:	68f8      	ldr	r0, [r7, #12]
 8009df0:	f7ff fd62 	bl	80098b8 <SCSI_SenseCode>
      return -1;
 8009df4:	f04f 33ff 	mov.w	r3, #4294967295
 8009df8:	e09d      	b.n	8009f36 <SCSI_Write10+0x1ba>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 8009dfa:	68fb      	ldr	r3, [r7, #12]
 8009dfc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009e00:	68fa      	ldr	r2, [r7, #12]
 8009e02:	33b0      	adds	r3, #176	; 0xb0
 8009e04:	009b      	lsls	r3, r3, #2
 8009e06:	4413      	add	r3, r2
 8009e08:	685b      	ldr	r3, [r3, #4]
 8009e0a:	689b      	ldr	r3, [r3, #8]
 8009e0c:	7afa      	ldrb	r2, [r7, #11]
 8009e0e:	4610      	mov	r0, r2
 8009e10:	4798      	blx	r3
 8009e12:	4603      	mov	r3, r0
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	d008      	beq.n	8009e2a <SCSI_Write10+0xae>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8009e18:	7af9      	ldrb	r1, [r7, #11]
 8009e1a:	233a      	movs	r3, #58	; 0x3a
 8009e1c:	2202      	movs	r2, #2
 8009e1e:	68f8      	ldr	r0, [r7, #12]
 8009e20:	f7ff fd4a 	bl	80098b8 <SCSI_SenseCode>
      return -1;
 8009e24:	f04f 33ff 	mov.w	r3, #4294967295
 8009e28:	e085      	b.n	8009f36 <SCSI_Write10+0x1ba>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsWriteProtected(lun) != 0)
 8009e2a:	68fb      	ldr	r3, [r7, #12]
 8009e2c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009e30:	68fa      	ldr	r2, [r7, #12]
 8009e32:	33b0      	adds	r3, #176	; 0xb0
 8009e34:	009b      	lsls	r3, r3, #2
 8009e36:	4413      	add	r3, r2
 8009e38:	685b      	ldr	r3, [r3, #4]
 8009e3a:	68db      	ldr	r3, [r3, #12]
 8009e3c:	7afa      	ldrb	r2, [r7, #11]
 8009e3e:	4610      	mov	r0, r2
 8009e40:	4798      	blx	r3
 8009e42:	4603      	mov	r3, r0
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	d008      	beq.n	8009e5a <SCSI_Write10+0xde>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 8009e48:	7af9      	ldrb	r1, [r7, #11]
 8009e4a:	2327      	movs	r3, #39	; 0x27
 8009e4c:	2202      	movs	r2, #2
 8009e4e:	68f8      	ldr	r0, [r7, #12]
 8009e50:	f7ff fd32 	bl	80098b8 <SCSI_SenseCode>
      return -1;
 8009e54:	f04f 33ff 	mov.w	r3, #4294967295
 8009e58:	e06d      	b.n	8009f36 <SCSI_Write10+0x1ba>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	3302      	adds	r3, #2
 8009e5e:	781b      	ldrb	r3, [r3, #0]
 8009e60:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	3303      	adds	r3, #3
 8009e66:	781b      	ldrb	r3, [r3, #0]
 8009e68:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8009e6a:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	3304      	adds	r3, #4
 8009e70:	781b      	ldrb	r3, [r3, #0]
 8009e72:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8009e74:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8009e76:	687a      	ldr	r2, [r7, #4]
 8009e78:	3205      	adds	r2, #5
 8009e7a:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 8009e7c:	4313      	orrs	r3, r2
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8009e7e:	697a      	ldr	r2, [r7, #20]
 8009e80:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8009e84:	66d3      	str	r3, [r2, #108]	; 0x6c

    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	3307      	adds	r3, #7
 8009e8a:	781b      	ldrb	r3, [r3, #0]
 8009e8c:	021b      	lsls	r3, r3, #8
                         (uint32_t)params[8];
 8009e8e:	687a      	ldr	r2, [r7, #4]
 8009e90:	3208      	adds	r2, #8
 8009e92:	7812      	ldrb	r2, [r2, #0]
    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 8009e94:	4313      	orrs	r3, r2
 8009e96:	697a      	ldr	r2, [r7, #20]
 8009e98:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8009e9c:	6713      	str	r3, [r2, #112]	; 0x70

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8009e9e:	697b      	ldr	r3, [r7, #20]
 8009ea0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009ea4:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8009ea6:	697b      	ldr	r3, [r7, #20]
 8009ea8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009eac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009eae:	7af9      	ldrb	r1, [r7, #11]
 8009eb0:	68f8      	ldr	r0, [r7, #12]
 8009eb2:	f000 f97a 	bl	800a1aa <SCSI_CheckAddressRange>
 8009eb6:	4603      	mov	r3, r0
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	da02      	bge.n	8009ec2 <SCSI_Write10+0x146>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8009ebc:	f04f 33ff 	mov.w	r3, #4294967295
 8009ec0:	e039      	b.n	8009f36 <SCSI_Write10+0x1ba>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8009ec2:	697b      	ldr	r3, [r7, #20]
 8009ec4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009ec8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009eca:	697a      	ldr	r2, [r7, #20]
 8009ecc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8009ed0:	f8b2 2064 	ldrh.w	r2, [r2, #100]	; 0x64
 8009ed4:	fb02 f303 	mul.w	r3, r2, r3
 8009ed8:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 8009eda:	697b      	ldr	r3, [r7, #20]
 8009edc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009ee0:	699b      	ldr	r3, [r3, #24]
 8009ee2:	693a      	ldr	r2, [r7, #16]
 8009ee4:	429a      	cmp	r2, r3
 8009ee6:	d00b      	beq.n	8009f00 <SCSI_Write10+0x184>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8009ee8:	697b      	ldr	r3, [r7, #20]
 8009eea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009eee:	7f59      	ldrb	r1, [r3, #29]
 8009ef0:	2320      	movs	r3, #32
 8009ef2:	2205      	movs	r2, #5
 8009ef4:	68f8      	ldr	r0, [r7, #12]
 8009ef6:	f7ff fcdf 	bl	80098b8 <SCSI_SenseCode>
      return -1;
 8009efa:	f04f 33ff 	mov.w	r3, #4294967295
 8009efe:	e01a      	b.n	8009f36 <SCSI_Write10+0x1ba>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 8009f00:	693b      	ldr	r3, [r7, #16]
 8009f02:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009f06:	bf28      	it	cs
 8009f08:	f44f 5380 	movcs.w	r3, #4096	; 0x1000
 8009f0c:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 8009f0e:	697b      	ldr	r3, [r7, #20]
 8009f10:	2201      	movs	r2, #1
 8009f12:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
 8009f14:	4b0a      	ldr	r3, [pc, #40]	; (8009f40 <SCSI_Write10+0x1c4>)
 8009f16:	7819      	ldrb	r1, [r3, #0]
 8009f18:	697b      	ldr	r3, [r7, #20]
 8009f1a:	f103 0210 	add.w	r2, r3, #16
 8009f1e:	693b      	ldr	r3, [r7, #16]
 8009f20:	68f8      	ldr	r0, [r7, #12]
 8009f22:	f002 fa69 	bl	800c3f8 <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 8009f26:	2300      	movs	r3, #0
 8009f28:	e005      	b.n	8009f36 <SCSI_Write10+0x1ba>
    return SCSI_ProcessWrite(pdev, lun);
 8009f2a:	7afb      	ldrb	r3, [r7, #11]
 8009f2c:	4619      	mov	r1, r3
 8009f2e:	68f8      	ldr	r0, [r7, #12]
 8009f30:	f000 f9fe 	bl	800a330 <SCSI_ProcessWrite>
 8009f34:	4603      	mov	r3, r0
}
 8009f36:	4618      	mov	r0, r3
 8009f38:	3718      	adds	r7, #24
 8009f3a:	46bd      	mov	sp, r7
 8009f3c:	bd80      	pop	{r7, pc}
 8009f3e:	bf00      	nop
 8009f40:	20000073 	.word	0x20000073

08009f44 <SCSI_Write12>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Write12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8009f44:	b580      	push	{r7, lr}
 8009f46:	b086      	sub	sp, #24
 8009f48:	af00      	add	r7, sp, #0
 8009f4a:	60f8      	str	r0, [r7, #12]
 8009f4c:	460b      	mov	r3, r1
 8009f4e:	607a      	str	r2, [r7, #4]
 8009f50:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009f52:	68fb      	ldr	r3, [r7, #12]
 8009f54:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	32b0      	adds	r2, #176	; 0xb0
 8009f5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009f60:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc == NULL)
 8009f62:	697b      	ldr	r3, [r7, #20]
 8009f64:	2b00      	cmp	r3, #0
 8009f66:	d102      	bne.n	8009f6e <SCSI_Write12+0x2a>
  {
    return -1;
 8009f68:	f04f 33ff 	mov.w	r3, #4294967295
 8009f6c:	e0d7      	b.n	800a11e <SCSI_Write12+0x1da>
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8009f6e:	697b      	ldr	r3, [r7, #20]
 8009f70:	7a1b      	ldrb	r3, [r3, #8]
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	f040 80cd 	bne.w	800a112 <SCSI_Write12+0x1ce>
  {
    if (hmsc->cbw.dDataLength == 0U)
 8009f78:	697b      	ldr	r3, [r7, #20]
 8009f7a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009f7e:	699b      	ldr	r3, [r3, #24]
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	d10b      	bne.n	8009f9c <SCSI_Write12+0x58>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8009f84:	697b      	ldr	r3, [r7, #20]
 8009f86:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009f8a:	7f59      	ldrb	r1, [r3, #29]
 8009f8c:	2320      	movs	r3, #32
 8009f8e:	2205      	movs	r2, #5
 8009f90:	68f8      	ldr	r0, [r7, #12]
 8009f92:	f7ff fc91 	bl	80098b8 <SCSI_SenseCode>
      return -1;
 8009f96:	f04f 33ff 	mov.w	r3, #4294967295
 8009f9a:	e0c0      	b.n	800a11e <SCSI_Write12+0x1da>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 8009f9c:	697b      	ldr	r3, [r7, #20]
 8009f9e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009fa2:	7f1b      	ldrb	r3, [r3, #28]
 8009fa4:	b25b      	sxtb	r3, r3
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	da0b      	bge.n	8009fc2 <SCSI_Write12+0x7e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8009faa:	697b      	ldr	r3, [r7, #20]
 8009fac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009fb0:	7f59      	ldrb	r1, [r3, #29]
 8009fb2:	2320      	movs	r3, #32
 8009fb4:	2205      	movs	r2, #5
 8009fb6:	68f8      	ldr	r0, [r7, #12]
 8009fb8:	f7ff fc7e 	bl	80098b8 <SCSI_SenseCode>
      return -1;
 8009fbc:	f04f 33ff 	mov.w	r3, #4294967295
 8009fc0:	e0ad      	b.n	800a11e <SCSI_Write12+0x1da>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009fc8:	68fa      	ldr	r2, [r7, #12]
 8009fca:	33b0      	adds	r3, #176	; 0xb0
 8009fcc:	009b      	lsls	r3, r3, #2
 8009fce:	4413      	add	r3, r2
 8009fd0:	685b      	ldr	r3, [r3, #4]
 8009fd2:	689b      	ldr	r3, [r3, #8]
 8009fd4:	7afa      	ldrb	r2, [r7, #11]
 8009fd6:	4610      	mov	r0, r2
 8009fd8:	4798      	blx	r3
 8009fda:	4603      	mov	r3, r0
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	d00b      	beq.n	8009ff8 <SCSI_Write12+0xb4>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8009fe0:	7af9      	ldrb	r1, [r7, #11]
 8009fe2:	233a      	movs	r3, #58	; 0x3a
 8009fe4:	2202      	movs	r2, #2
 8009fe6:	68f8      	ldr	r0, [r7, #12]
 8009fe8:	f7ff fc66 	bl	80098b8 <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 8009fec:	697b      	ldr	r3, [r7, #20]
 8009fee:	2205      	movs	r2, #5
 8009ff0:	721a      	strb	r2, [r3, #8]
      return -1;
 8009ff2:	f04f 33ff 	mov.w	r3, #4294967295
 8009ff6:	e092      	b.n	800a11e <SCSI_Write12+0x1da>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsWriteProtected(lun) != 0)
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009ffe:	68fa      	ldr	r2, [r7, #12]
 800a000:	33b0      	adds	r3, #176	; 0xb0
 800a002:	009b      	lsls	r3, r3, #2
 800a004:	4413      	add	r3, r2
 800a006:	685b      	ldr	r3, [r3, #4]
 800a008:	68db      	ldr	r3, [r3, #12]
 800a00a:	7afa      	ldrb	r2, [r7, #11]
 800a00c:	4610      	mov	r0, r2
 800a00e:	4798      	blx	r3
 800a010:	4603      	mov	r3, r0
 800a012:	2b00      	cmp	r3, #0
 800a014:	d00b      	beq.n	800a02e <SCSI_Write12+0xea>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 800a016:	7af9      	ldrb	r1, [r7, #11]
 800a018:	2327      	movs	r3, #39	; 0x27
 800a01a:	2202      	movs	r2, #2
 800a01c:	68f8      	ldr	r0, [r7, #12]
 800a01e:	f7ff fc4b 	bl	80098b8 <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 800a022:	697b      	ldr	r3, [r7, #20]
 800a024:	2205      	movs	r2, #5
 800a026:	721a      	strb	r2, [r3, #8]
      return -1;
 800a028:	f04f 33ff 	mov.w	r3, #4294967295
 800a02c:	e077      	b.n	800a11e <SCSI_Write12+0x1da>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	3302      	adds	r3, #2
 800a032:	781b      	ldrb	r3, [r3, #0]
 800a034:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	3303      	adds	r3, #3
 800a03a:	781b      	ldrb	r3, [r3, #0]
 800a03c:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800a03e:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	3304      	adds	r3, #4
 800a044:	781b      	ldrb	r3, [r3, #0]
 800a046:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800a048:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 800a04a:	687a      	ldr	r2, [r7, #4]
 800a04c:	3205      	adds	r2, #5
 800a04e:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 800a050:	4313      	orrs	r3, r2
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800a052:	697a      	ldr	r2, [r7, #20]
 800a054:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a058:	66d3      	str	r3, [r2, #108]	; 0x6c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	3306      	adds	r3, #6
 800a05e:	781b      	ldrb	r3, [r3, #0]
 800a060:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	3307      	adds	r3, #7
 800a066:	781b      	ldrb	r3, [r3, #0]
 800a068:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800a06a:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	3308      	adds	r3, #8
 800a070:	781b      	ldrb	r3, [r3, #0]
 800a072:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 800a074:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 800a076:	687a      	ldr	r2, [r7, #4]
 800a078:	3209      	adds	r2, #9
 800a07a:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 800a07c:	4313      	orrs	r3, r2
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800a07e:	697a      	ldr	r2, [r7, #20]
 800a080:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a084:	6713      	str	r3, [r2, #112]	; 0x70

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800a086:	697b      	ldr	r3, [r7, #20]
 800a088:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a08c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800a08e:	697b      	ldr	r3, [r7, #20]
 800a090:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a094:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a096:	7af9      	ldrb	r1, [r7, #11]
 800a098:	68f8      	ldr	r0, [r7, #12]
 800a09a:	f000 f886 	bl	800a1aa <SCSI_CheckAddressRange>
 800a09e:	4603      	mov	r3, r0
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	da02      	bge.n	800a0aa <SCSI_Write12+0x166>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800a0a4:	f04f 33ff 	mov.w	r3, #4294967295
 800a0a8:	e039      	b.n	800a11e <SCSI_Write12+0x1da>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800a0aa:	697b      	ldr	r3, [r7, #20]
 800a0ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a0b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a0b2:	697a      	ldr	r2, [r7, #20]
 800a0b4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a0b8:	f8b2 2064 	ldrh.w	r2, [r2, #100]	; 0x64
 800a0bc:	fb02 f303 	mul.w	r3, r2, r3
 800a0c0:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 800a0c2:	697b      	ldr	r3, [r7, #20]
 800a0c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a0c8:	699b      	ldr	r3, [r3, #24]
 800a0ca:	693a      	ldr	r2, [r7, #16]
 800a0cc:	429a      	cmp	r2, r3
 800a0ce:	d00b      	beq.n	800a0e8 <SCSI_Write12+0x1a4>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800a0d0:	697b      	ldr	r3, [r7, #20]
 800a0d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a0d6:	7f59      	ldrb	r1, [r3, #29]
 800a0d8:	2320      	movs	r3, #32
 800a0da:	2205      	movs	r2, #5
 800a0dc:	68f8      	ldr	r0, [r7, #12]
 800a0de:	f7ff fbeb 	bl	80098b8 <SCSI_SenseCode>
      return -1;
 800a0e2:	f04f 33ff 	mov.w	r3, #4294967295
 800a0e6:	e01a      	b.n	800a11e <SCSI_Write12+0x1da>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 800a0e8:	693b      	ldr	r3, [r7, #16]
 800a0ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a0ee:	bf28      	it	cs
 800a0f0:	f44f 5380 	movcs.w	r3, #4096	; 0x1000
 800a0f4:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 800a0f6:	697b      	ldr	r3, [r7, #20]
 800a0f8:	2201      	movs	r2, #1
 800a0fa:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
 800a0fc:	4b0a      	ldr	r3, [pc, #40]	; (800a128 <SCSI_Write12+0x1e4>)
 800a0fe:	7819      	ldrb	r1, [r3, #0]
 800a100:	697b      	ldr	r3, [r7, #20]
 800a102:	f103 0210 	add.w	r2, r3, #16
 800a106:	693b      	ldr	r3, [r7, #16]
 800a108:	68f8      	ldr	r0, [r7, #12]
 800a10a:	f002 f975 	bl	800c3f8 <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 800a10e:	2300      	movs	r3, #0
 800a110:	e005      	b.n	800a11e <SCSI_Write12+0x1da>
    return SCSI_ProcessWrite(pdev, lun);
 800a112:	7afb      	ldrb	r3, [r7, #11]
 800a114:	4619      	mov	r1, r3
 800a116:	68f8      	ldr	r0, [r7, #12]
 800a118:	f000 f90a 	bl	800a330 <SCSI_ProcessWrite>
 800a11c:	4603      	mov	r3, r0
}
 800a11e:	4618      	mov	r0, r3
 800a120:	3718      	adds	r7, #24
 800a122:	46bd      	mov	sp, r7
 800a124:	bd80      	pop	{r7, pc}
 800a126:	bf00      	nop
 800a128:	20000073 	.word	0x20000073

0800a12c <SCSI_Verify10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Verify10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800a12c:	b580      	push	{r7, lr}
 800a12e:	b086      	sub	sp, #24
 800a130:	af00      	add	r7, sp, #0
 800a132:	60f8      	str	r0, [r7, #12]
 800a134:	460b      	mov	r3, r1
 800a136:	607a      	str	r2, [r7, #4]
 800a138:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a13a:	68fb      	ldr	r3, [r7, #12]
 800a13c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a140:	68fb      	ldr	r3, [r7, #12]
 800a142:	32b0      	adds	r2, #176	; 0xb0
 800a144:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a148:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800a14a:	697b      	ldr	r3, [r7, #20]
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	d102      	bne.n	800a156 <SCSI_Verify10+0x2a>
  {
    return -1;
 800a150:	f04f 33ff 	mov.w	r3, #4294967295
 800a154:	e025      	b.n	800a1a2 <SCSI_Verify10+0x76>
  }

  if ((params[1] & 0x02U) == 0x02U)
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	3301      	adds	r3, #1
 800a15a:	781b      	ldrb	r3, [r3, #0]
 800a15c:	f003 0302 	and.w	r3, r3, #2
 800a160:	2b00      	cmp	r3, #0
 800a162:	d008      	beq.n	800a176 <SCSI_Verify10+0x4a>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 800a164:	7af9      	ldrb	r1, [r7, #11]
 800a166:	2324      	movs	r3, #36	; 0x24
 800a168:	2205      	movs	r2, #5
 800a16a:	68f8      	ldr	r0, [r7, #12]
 800a16c:	f7ff fba4 	bl	80098b8 <SCSI_SenseCode>
    return -1; /* Error, Verify Mode Not supported*/
 800a170:	f04f 33ff 	mov.w	r3, #4294967295
 800a174:	e015      	b.n	800a1a2 <SCSI_Verify10+0x76>
  }

  if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr, hmsc->scsi_blk_len) < 0)
 800a176:	697b      	ldr	r3, [r7, #20]
 800a178:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a17c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800a17e:	697b      	ldr	r3, [r7, #20]
 800a180:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a184:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a186:	7af9      	ldrb	r1, [r7, #11]
 800a188:	68f8      	ldr	r0, [r7, #12]
 800a18a:	f000 f80e 	bl	800a1aa <SCSI_CheckAddressRange>
 800a18e:	4603      	mov	r3, r0
 800a190:	2b00      	cmp	r3, #0
 800a192:	da02      	bge.n	800a19a <SCSI_Verify10+0x6e>
  {
    return -1; /* error */
 800a194:	f04f 33ff 	mov.w	r3, #4294967295
 800a198:	e003      	b.n	800a1a2 <SCSI_Verify10+0x76>
  }

  hmsc->bot_data_length = 0U;
 800a19a:	697b      	ldr	r3, [r7, #20]
 800a19c:	2200      	movs	r2, #0
 800a19e:	60da      	str	r2, [r3, #12]

  return 0;
 800a1a0:	2300      	movs	r3, #0
}
 800a1a2:	4618      	mov	r0, r3
 800a1a4:	3718      	adds	r7, #24
 800a1a6:	46bd      	mov	sp, r7
 800a1a8:	bd80      	pop	{r7, pc}

0800a1aa <SCSI_CheckAddressRange>:
  * @param  blk_nbr: number of block to be processed
  * @retval status
  */
static int8_t SCSI_CheckAddressRange(USBD_HandleTypeDef *pdev, uint8_t lun,
                                     uint32_t blk_offset, uint32_t blk_nbr)
{
 800a1aa:	b580      	push	{r7, lr}
 800a1ac:	b086      	sub	sp, #24
 800a1ae:	af00      	add	r7, sp, #0
 800a1b0:	60f8      	str	r0, [r7, #12]
 800a1b2:	607a      	str	r2, [r7, #4]
 800a1b4:	603b      	str	r3, [r7, #0]
 800a1b6:	460b      	mov	r3, r1
 800a1b8:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a1ba:	68fb      	ldr	r3, [r7, #12]
 800a1bc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a1c0:	68fb      	ldr	r3, [r7, #12]
 800a1c2:	32b0      	adds	r2, #176	; 0xb0
 800a1c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a1c8:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800a1ca:	697b      	ldr	r3, [r7, #20]
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	d102      	bne.n	800a1d6 <SCSI_CheckAddressRange+0x2c>
  {
    return -1;
 800a1d0:	f04f 33ff 	mov.w	r3, #4294967295
 800a1d4:	e012      	b.n	800a1fc <SCSI_CheckAddressRange+0x52>
  }

  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr)
 800a1d6:	687a      	ldr	r2, [r7, #4]
 800a1d8:	683b      	ldr	r3, [r7, #0]
 800a1da:	441a      	add	r2, r3
 800a1dc:	697b      	ldr	r3, [r7, #20]
 800a1de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a1e2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a1e4:	429a      	cmp	r2, r3
 800a1e6:	d908      	bls.n	800a1fa <SCSI_CheckAddressRange+0x50>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, ADDRESS_OUT_OF_RANGE);
 800a1e8:	7af9      	ldrb	r1, [r7, #11]
 800a1ea:	2321      	movs	r3, #33	; 0x21
 800a1ec:	2205      	movs	r2, #5
 800a1ee:	68f8      	ldr	r0, [r7, #12]
 800a1f0:	f7ff fb62 	bl	80098b8 <SCSI_SenseCode>
    return -1;
 800a1f4:	f04f 33ff 	mov.w	r3, #4294967295
 800a1f8:	e000      	b.n	800a1fc <SCSI_CheckAddressRange+0x52>
  }

  return 0;
 800a1fa:	2300      	movs	r3, #0
}
 800a1fc:	4618      	mov	r0, r3
 800a1fe:	3718      	adds	r7, #24
 800a200:	46bd      	mov	sp, r7
 800a202:	bd80      	pop	{r7, pc}

0800a204 <SCSI_ProcessRead>:
  *         Handle Read Process
  * @param  lun: Logical unit number
  * @retval status
  */
static int8_t SCSI_ProcessRead(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 800a204:	b590      	push	{r4, r7, lr}
 800a206:	b085      	sub	sp, #20
 800a208:	af00      	add	r7, sp, #0
 800a20a:	6078      	str	r0, [r7, #4]
 800a20c:	460b      	mov	r3, r1
 800a20e:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	32b0      	adds	r2, #176	; 0xb0
 800a21a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a21e:	60fb      	str	r3, [r7, #12]
  uint32_t len;

  if (hmsc == NULL)
 800a220:	68fb      	ldr	r3, [r7, #12]
 800a222:	2b00      	cmp	r3, #0
 800a224:	d102      	bne.n	800a22c <SCSI_ProcessRead+0x28>
  {
    return -1;
 800a226:	f04f 33ff 	mov.w	r3, #4294967295
 800a22a:	e07b      	b.n	800a324 <SCSI_ProcessRead+0x120>
  }

  len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800a22c:	68fb      	ldr	r3, [r7, #12]
 800a22e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a232:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a234:	68fa      	ldr	r2, [r7, #12]
 800a236:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a23a:	f8b2 2064 	ldrh.w	r2, [r2, #100]	; 0x64
 800a23e:	fb02 f303 	mul.w	r3, r2, r3
 800a242:	60bb      	str	r3, [r7, #8]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  len = MIN(len, MSC_MEDIA_PACKET);
 800a244:	68bb      	ldr	r3, [r7, #8]
 800a246:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a24a:	bf28      	it	cs
 800a24c:	f44f 5380 	movcs.w	r3, #4096	; 0x1000
 800a250:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Read(lun, hmsc->bot_data,
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a258:	687a      	ldr	r2, [r7, #4]
 800a25a:	33b0      	adds	r3, #176	; 0xb0
 800a25c:	009b      	lsls	r3, r3, #2
 800a25e:	4413      	add	r3, r2
 800a260:	685b      	ldr	r3, [r3, #4]
 800a262:	691c      	ldr	r4, [r3, #16]
 800a264:	68fb      	ldr	r3, [r7, #12]
 800a266:	f103 0110 	add.w	r1, r3, #16
 800a26a:	68fb      	ldr	r3, [r7, #12]
 800a26c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a270:	6eda      	ldr	r2, [r3, #108]	; 0x6c
                                                                    hmsc->scsi_blk_addr,
                                                                    (len / hmsc->scsi_blk_size)) < 0)
 800a272:	68fb      	ldr	r3, [r7, #12]
 800a274:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a278:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800a27c:	4618      	mov	r0, r3
 800a27e:	68bb      	ldr	r3, [r7, #8]
 800a280:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Read(lun, hmsc->bot_data,
 800a284:	b29b      	uxth	r3, r3
 800a286:	78f8      	ldrb	r0, [r7, #3]
 800a288:	47a0      	blx	r4
 800a28a:	4603      	mov	r3, r0
 800a28c:	2b00      	cmp	r3, #0
 800a28e:	da08      	bge.n	800a2a2 <SCSI_ProcessRead+0x9e>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, UNRECOVERED_READ_ERROR);
 800a290:	78f9      	ldrb	r1, [r7, #3]
 800a292:	2311      	movs	r3, #17
 800a294:	2204      	movs	r2, #4
 800a296:	6878      	ldr	r0, [r7, #4]
 800a298:	f7ff fb0e 	bl	80098b8 <SCSI_SenseCode>
    return -1;
 800a29c:	f04f 33ff 	mov.w	r3, #4294967295
 800a2a0:	e040      	b.n	800a324 <SCSI_ProcessRead+0x120>
  }

  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, hmsc->bot_data, len);
 800a2a2:	4b22      	ldr	r3, [pc, #136]	; (800a32c <SCSI_ProcessRead+0x128>)
 800a2a4:	7819      	ldrb	r1, [r3, #0]
 800a2a6:	68fb      	ldr	r3, [r7, #12]
 800a2a8:	f103 0210 	add.w	r2, r3, #16
 800a2ac:	68bb      	ldr	r3, [r7, #8]
 800a2ae:	6878      	ldr	r0, [r7, #4]
 800a2b0:	f002 f881 	bl	800c3b6 <USBD_LL_Transmit>

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 800a2b4:	68fb      	ldr	r3, [r7, #12]
 800a2b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a2ba:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800a2bc:	68fb      	ldr	r3, [r7, #12]
 800a2be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a2c2:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800a2c6:	4619      	mov	r1, r3
 800a2c8:	68bb      	ldr	r3, [r7, #8]
 800a2ca:	fbb3 f3f1 	udiv	r3, r3, r1
 800a2ce:	4413      	add	r3, r2
 800a2d0:	68fa      	ldr	r2, [r7, #12]
 800a2d2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a2d6:	66d3      	str	r3, [r2, #108]	; 0x6c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 800a2d8:	68fb      	ldr	r3, [r7, #12]
 800a2da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a2de:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800a2e0:	68fb      	ldr	r3, [r7, #12]
 800a2e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a2e6:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800a2ea:	4619      	mov	r1, r3
 800a2ec:	68bb      	ldr	r3, [r7, #8]
 800a2ee:	fbb3 f3f1 	udiv	r3, r3, r1
 800a2f2:	1ad3      	subs	r3, r2, r3
 800a2f4:	68fa      	ldr	r2, [r7, #12]
 800a2f6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a2fa:	6713      	str	r3, [r2, #112]	; 0x70

  /* case 6 : Hi = Di */
  hmsc->csw.dDataResidue -= len;
 800a2fc:	68fb      	ldr	r3, [r7, #12]
 800a2fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a302:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a304:	68bb      	ldr	r3, [r7, #8]
 800a306:	1ad3      	subs	r3, r2, r3
 800a308:	68fa      	ldr	r2, [r7, #12]
 800a30a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a30e:	6393      	str	r3, [r2, #56]	; 0x38

  if (hmsc->scsi_blk_len == 0U)
 800a310:	68fb      	ldr	r3, [r7, #12]
 800a312:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a316:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a318:	2b00      	cmp	r3, #0
 800a31a:	d102      	bne.n	800a322 <SCSI_ProcessRead+0x11e>
  {
    hmsc->bot_state = USBD_BOT_LAST_DATA_IN;
 800a31c:	68fb      	ldr	r3, [r7, #12]
 800a31e:	2203      	movs	r2, #3
 800a320:	721a      	strb	r2, [r3, #8]
  }

  return 0;
 800a322:	2300      	movs	r3, #0
}
 800a324:	4618      	mov	r0, r3
 800a326:	3714      	adds	r7, #20
 800a328:	46bd      	mov	sp, r7
 800a32a:	bd90      	pop	{r4, r7, pc}
 800a32c:	20000072 	.word	0x20000072

0800a330 <SCSI_ProcessWrite>:
  *         Handle Write Process
  * @param  lun: Logical unit number
  * @retval status
  */
static int8_t SCSI_ProcessWrite(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 800a330:	b590      	push	{r4, r7, lr}
 800a332:	b085      	sub	sp, #20
 800a334:	af00      	add	r7, sp, #0
 800a336:	6078      	str	r0, [r7, #4]
 800a338:	460b      	mov	r3, r1
 800a33a:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	32b0      	adds	r2, #176	; 0xb0
 800a346:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a34a:	60fb      	str	r3, [r7, #12]
  uint32_t len;

  if (hmsc == NULL)
 800a34c:	68fb      	ldr	r3, [r7, #12]
 800a34e:	2b00      	cmp	r3, #0
 800a350:	d102      	bne.n	800a358 <SCSI_ProcessWrite+0x28>
  {
    return -1;
 800a352:	f04f 33ff 	mov.w	r3, #4294967295
 800a356:	e08e      	b.n	800a476 <SCSI_ProcessWrite+0x146>
  }

  len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800a358:	68fb      	ldr	r3, [r7, #12]
 800a35a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a35e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a360:	68fa      	ldr	r2, [r7, #12]
 800a362:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a366:	f8b2 2064 	ldrh.w	r2, [r2, #100]	; 0x64
 800a36a:	fb02 f303 	mul.w	r3, r2, r3
 800a36e:	60bb      	str	r3, [r7, #8]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  len = MIN(len, MSC_MEDIA_PACKET);
 800a370:	68bb      	ldr	r3, [r7, #8]
 800a372:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a376:	bf28      	it	cs
 800a378:	f44f 5380 	movcs.w	r3, #4096	; 0x1000
 800a37c:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Write(lun, hmsc->bot_data,
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a384:	687a      	ldr	r2, [r7, #4]
 800a386:	33b0      	adds	r3, #176	; 0xb0
 800a388:	009b      	lsls	r3, r3, #2
 800a38a:	4413      	add	r3, r2
 800a38c:	685b      	ldr	r3, [r3, #4]
 800a38e:	695c      	ldr	r4, [r3, #20]
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	f103 0110 	add.w	r1, r3, #16
 800a396:	68fb      	ldr	r3, [r7, #12]
 800a398:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a39c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
                                                                     hmsc->scsi_blk_addr,
                                                                     (len / hmsc->scsi_blk_size)) < 0)
 800a39e:	68fb      	ldr	r3, [r7, #12]
 800a3a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a3a4:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800a3a8:	4618      	mov	r0, r3
 800a3aa:	68bb      	ldr	r3, [r7, #8]
 800a3ac:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Write(lun, hmsc->bot_data,
 800a3b0:	b29b      	uxth	r3, r3
 800a3b2:	78f8      	ldrb	r0, [r7, #3]
 800a3b4:	47a0      	blx	r4
 800a3b6:	4603      	mov	r3, r0
 800a3b8:	2b00      	cmp	r3, #0
 800a3ba:	da08      	bge.n	800a3ce <SCSI_ProcessWrite+0x9e>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, WRITE_FAULT);
 800a3bc:	78f9      	ldrb	r1, [r7, #3]
 800a3be:	2303      	movs	r3, #3
 800a3c0:	2204      	movs	r2, #4
 800a3c2:	6878      	ldr	r0, [r7, #4]
 800a3c4:	f7ff fa78 	bl	80098b8 <SCSI_SenseCode>
    return -1;
 800a3c8:	f04f 33ff 	mov.w	r3, #4294967295
 800a3cc:	e053      	b.n	800a476 <SCSI_ProcessWrite+0x146>
  }

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 800a3ce:	68fb      	ldr	r3, [r7, #12]
 800a3d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a3d4:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800a3d6:	68fb      	ldr	r3, [r7, #12]
 800a3d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a3dc:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800a3e0:	4619      	mov	r1, r3
 800a3e2:	68bb      	ldr	r3, [r7, #8]
 800a3e4:	fbb3 f3f1 	udiv	r3, r3, r1
 800a3e8:	4413      	add	r3, r2
 800a3ea:	68fa      	ldr	r2, [r7, #12]
 800a3ec:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a3f0:	66d3      	str	r3, [r2, #108]	; 0x6c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 800a3f2:	68fb      	ldr	r3, [r7, #12]
 800a3f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a3f8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800a3fa:	68fb      	ldr	r3, [r7, #12]
 800a3fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a400:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800a404:	4619      	mov	r1, r3
 800a406:	68bb      	ldr	r3, [r7, #8]
 800a408:	fbb3 f3f1 	udiv	r3, r3, r1
 800a40c:	1ad3      	subs	r3, r2, r3
 800a40e:	68fa      	ldr	r2, [r7, #12]
 800a410:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a414:	6713      	str	r3, [r2, #112]	; 0x70

  /* case 12 : Ho = Do */
  hmsc->csw.dDataResidue -= len;
 800a416:	68fb      	ldr	r3, [r7, #12]
 800a418:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a41c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a41e:	68bb      	ldr	r3, [r7, #8]
 800a420:	1ad3      	subs	r3, r2, r3
 800a422:	68fa      	ldr	r2, [r7, #12]
 800a424:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a428:	6393      	str	r3, [r2, #56]	; 0x38

  if (hmsc->scsi_blk_len == 0U)
 800a42a:	68fb      	ldr	r3, [r7, #12]
 800a42c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a430:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a432:	2b00      	cmp	r3, #0
 800a434:	d104      	bne.n	800a440 <SCSI_ProcessWrite+0x110>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 800a436:	2100      	movs	r1, #0
 800a438:	6878      	ldr	r0, [r7, #4]
 800a43a:	f7fe fc55 	bl	8008ce8 <MSC_BOT_SendCSW>
 800a43e:	e019      	b.n	800a474 <SCSI_ProcessWrite+0x144>
  }
  else
  {
    len = MIN((hmsc->scsi_blk_len * hmsc->scsi_blk_size), MSC_MEDIA_PACKET);
 800a440:	68fb      	ldr	r3, [r7, #12]
 800a442:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a446:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a448:	68fa      	ldr	r2, [r7, #12]
 800a44a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a44e:	f8b2 2064 	ldrh.w	r2, [r2, #100]	; 0x64
 800a452:	fb02 f303 	mul.w	r3, r2, r3
 800a456:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a45a:	bf28      	it	cs
 800a45c:	f44f 5380 	movcs.w	r3, #4096	; 0x1000
 800a460:	60bb      	str	r3, [r7, #8]

    /* Prepare EP to Receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
 800a462:	4b07      	ldr	r3, [pc, #28]	; (800a480 <SCSI_ProcessWrite+0x150>)
 800a464:	7819      	ldrb	r1, [r3, #0]
 800a466:	68fb      	ldr	r3, [r7, #12]
 800a468:	f103 0210 	add.w	r2, r3, #16
 800a46c:	68bb      	ldr	r3, [r7, #8]
 800a46e:	6878      	ldr	r0, [r7, #4]
 800a470:	f001 ffc2 	bl	800c3f8 <USBD_LL_PrepareReceive>
  }

  return 0;
 800a474:	2300      	movs	r3, #0
}
 800a476:	4618      	mov	r0, r3
 800a478:	3714      	adds	r7, #20
 800a47a:	46bd      	mov	sp, r7
 800a47c:	bd90      	pop	{r4, r7, pc}
 800a47e:	bf00      	nop
 800a480:	20000073 	.word	0x20000073

0800a484 <SCSI_UpdateBotData>:
  * @param  length: Data length
  * @retval status
  */
static int8_t SCSI_UpdateBotData(USBD_MSC_BOT_HandleTypeDef *hmsc,
                                 uint8_t *pBuff, uint16_t length)
{
 800a484:	b480      	push	{r7}
 800a486:	b087      	sub	sp, #28
 800a488:	af00      	add	r7, sp, #0
 800a48a:	60f8      	str	r0, [r7, #12]
 800a48c:	60b9      	str	r1, [r7, #8]
 800a48e:	4613      	mov	r3, r2
 800a490:	80fb      	strh	r3, [r7, #6]
  uint16_t len = length;
 800a492:	88fb      	ldrh	r3, [r7, #6]
 800a494:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 800a496:	68fb      	ldr	r3, [r7, #12]
 800a498:	2b00      	cmp	r3, #0
 800a49a:	d102      	bne.n	800a4a2 <SCSI_UpdateBotData+0x1e>
  {
    return -1;
 800a49c:	f04f 33ff 	mov.w	r3, #4294967295
 800a4a0:	e013      	b.n	800a4ca <SCSI_UpdateBotData+0x46>
  }

  hmsc->bot_data_length = len;
 800a4a2:	8afa      	ldrh	r2, [r7, #22]
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	60da      	str	r2, [r3, #12]

  while (len != 0U)
 800a4a8:	e00b      	b.n	800a4c2 <SCSI_UpdateBotData+0x3e>
  {
    len--;
 800a4aa:	8afb      	ldrh	r3, [r7, #22]
 800a4ac:	3b01      	subs	r3, #1
 800a4ae:	82fb      	strh	r3, [r7, #22]
    hmsc->bot_data[len] = pBuff[len];
 800a4b0:	8afb      	ldrh	r3, [r7, #22]
 800a4b2:	68ba      	ldr	r2, [r7, #8]
 800a4b4:	441a      	add	r2, r3
 800a4b6:	8afb      	ldrh	r3, [r7, #22]
 800a4b8:	7811      	ldrb	r1, [r2, #0]
 800a4ba:	68fa      	ldr	r2, [r7, #12]
 800a4bc:	4413      	add	r3, r2
 800a4be:	460a      	mov	r2, r1
 800a4c0:	741a      	strb	r2, [r3, #16]
  while (len != 0U)
 800a4c2:	8afb      	ldrh	r3, [r7, #22]
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	d1f0      	bne.n	800a4aa <SCSI_UpdateBotData+0x26>
  }

  return 0;
 800a4c8:	2300      	movs	r3, #0
}
 800a4ca:	4618      	mov	r0, r3
 800a4cc:	371c      	adds	r7, #28
 800a4ce:	46bd      	mov	sp, r7
 800a4d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4d4:	4770      	bx	lr

0800a4d6 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800a4d6:	b580      	push	{r7, lr}
 800a4d8:	b086      	sub	sp, #24
 800a4da:	af00      	add	r7, sp, #0
 800a4dc:	60f8      	str	r0, [r7, #12]
 800a4de:	60b9      	str	r1, [r7, #8]
 800a4e0:	4613      	mov	r3, r2
 800a4e2:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800a4e4:	68fb      	ldr	r3, [r7, #12]
 800a4e6:	2b00      	cmp	r3, #0
 800a4e8:	d101      	bne.n	800a4ee <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800a4ea:	2303      	movs	r3, #3
 800a4ec:	e01f      	b.n	800a52e <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800a4ee:	68fb      	ldr	r3, [r7, #12]
 800a4f0:	2200      	movs	r2, #0
 800a4f2:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800a4f6:	68fb      	ldr	r3, [r7, #12]
 800a4f8:	2200      	movs	r2, #0
 800a4fa:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800a4fe:	68fb      	ldr	r3, [r7, #12]
 800a500:	2200      	movs	r2, #0
 800a502:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800a506:	68bb      	ldr	r3, [r7, #8]
 800a508:	2b00      	cmp	r3, #0
 800a50a:	d003      	beq.n	800a514 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800a50c:	68fb      	ldr	r3, [r7, #12]
 800a50e:	68ba      	ldr	r2, [r7, #8]
 800a510:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a514:	68fb      	ldr	r3, [r7, #12]
 800a516:	2201      	movs	r2, #1
 800a518:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800a51c:	68fb      	ldr	r3, [r7, #12]
 800a51e:	79fa      	ldrb	r2, [r7, #7]
 800a520:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800a522:	68f8      	ldr	r0, [r7, #12]
 800a524:	f001 fdd8 	bl	800c0d8 <USBD_LL_Init>
 800a528:	4603      	mov	r3, r0
 800a52a:	75fb      	strb	r3, [r7, #23]

  return ret;
 800a52c:	7dfb      	ldrb	r3, [r7, #23]
}
 800a52e:	4618      	mov	r0, r3
 800a530:	3718      	adds	r7, #24
 800a532:	46bd      	mov	sp, r7
 800a534:	bd80      	pop	{r7, pc}

0800a536 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800a536:	b580      	push	{r7, lr}
 800a538:	b084      	sub	sp, #16
 800a53a:	af00      	add	r7, sp, #0
 800a53c:	6078      	str	r0, [r7, #4]
 800a53e:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a540:	2300      	movs	r3, #0
 800a542:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800a544:	683b      	ldr	r3, [r7, #0]
 800a546:	2b00      	cmp	r3, #0
 800a548:	d101      	bne.n	800a54e <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800a54a:	2303      	movs	r3, #3
 800a54c:	e025      	b.n	800a59a <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	683a      	ldr	r2, [r7, #0]
 800a552:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	32ae      	adds	r2, #174	; 0xae
 800a560:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a564:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a566:	2b00      	cmp	r3, #0
 800a568:	d00f      	beq.n	800a58a <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	32ae      	adds	r2, #174	; 0xae
 800a574:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a578:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a57a:	f107 020e 	add.w	r2, r7, #14
 800a57e:	4610      	mov	r0, r2
 800a580:	4798      	blx	r3
 800a582:	4602      	mov	r2, r0
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800a590:	1c5a      	adds	r2, r3, #1
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800a598:	2300      	movs	r3, #0
}
 800a59a:	4618      	mov	r0, r3
 800a59c:	3710      	adds	r7, #16
 800a59e:	46bd      	mov	sp, r7
 800a5a0:	bd80      	pop	{r7, pc}

0800a5a2 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800a5a2:	b580      	push	{r7, lr}
 800a5a4:	b082      	sub	sp, #8
 800a5a6:	af00      	add	r7, sp, #0
 800a5a8:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800a5aa:	6878      	ldr	r0, [r7, #4]
 800a5ac:	f001 fde0 	bl	800c170 <USBD_LL_Start>
 800a5b0:	4603      	mov	r3, r0
}
 800a5b2:	4618      	mov	r0, r3
 800a5b4:	3708      	adds	r7, #8
 800a5b6:	46bd      	mov	sp, r7
 800a5b8:	bd80      	pop	{r7, pc}

0800a5ba <USBD_Stop>:
  *         Stop the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Stop(USBD_HandleTypeDef *pdev)
{
 800a5ba:	b580      	push	{r7, lr}
 800a5bc:	b082      	sub	sp, #8
 800a5be:	af00      	add	r7, sp, #0
 800a5c0:	6078      	str	r0, [r7, #4]
  /* Disconnect USB Device */
  (void)USBD_LL_Stop(pdev);
 800a5c2:	6878      	ldr	r0, [r7, #4]
 800a5c4:	f001 fdef 	bl	800c1a6 <USBD_LL_Stop>
  }

  /* Reset the class ID */
  pdev->classId = 0U;
#else
  if (pdev->pClass[0] != NULL)
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	d009      	beq.n	800a5e6 <USBD_Stop+0x2c>
  {
    (void)pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config);
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a5d8:	685b      	ldr	r3, [r3, #4]
 800a5da:	687a      	ldr	r2, [r7, #4]
 800a5dc:	6852      	ldr	r2, [r2, #4]
 800a5de:	b2d2      	uxtb	r2, r2
 800a5e0:	4611      	mov	r1, r2
 800a5e2:	6878      	ldr	r0, [r7, #4]
 800a5e4:	4798      	blx	r3
  }
#endif /* USE_USBD_COMPOSITE */

  return USBD_OK;
 800a5e6:	2300      	movs	r3, #0
}
 800a5e8:	4618      	mov	r0, r3
 800a5ea:	3708      	adds	r7, #8
 800a5ec:	46bd      	mov	sp, r7
 800a5ee:	bd80      	pop	{r7, pc}

0800a5f0 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800a5f0:	b480      	push	{r7}
 800a5f2:	b083      	sub	sp, #12
 800a5f4:	af00      	add	r7, sp, #0
 800a5f6:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a5f8:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800a5fa:	4618      	mov	r0, r3
 800a5fc:	370c      	adds	r7, #12
 800a5fe:	46bd      	mov	sp, r7
 800a600:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a604:	4770      	bx	lr

0800a606 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a606:	b580      	push	{r7, lr}
 800a608:	b084      	sub	sp, #16
 800a60a:	af00      	add	r7, sp, #0
 800a60c:	6078      	str	r0, [r7, #4]
 800a60e:	460b      	mov	r3, r1
 800a610:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800a612:	2300      	movs	r3, #0
 800a614:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	d009      	beq.n	800a634 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a626:	681b      	ldr	r3, [r3, #0]
 800a628:	78fa      	ldrb	r2, [r7, #3]
 800a62a:	4611      	mov	r1, r2
 800a62c:	6878      	ldr	r0, [r7, #4]
 800a62e:	4798      	blx	r3
 800a630:	4603      	mov	r3, r0
 800a632:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a634:	7bfb      	ldrb	r3, [r7, #15]
}
 800a636:	4618      	mov	r0, r3
 800a638:	3710      	adds	r7, #16
 800a63a:	46bd      	mov	sp, r7
 800a63c:	bd80      	pop	{r7, pc}

0800a63e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a63e:	b580      	push	{r7, lr}
 800a640:	b084      	sub	sp, #16
 800a642:	af00      	add	r7, sp, #0
 800a644:	6078      	str	r0, [r7, #4]
 800a646:	460b      	mov	r3, r1
 800a648:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800a64a:	2300      	movs	r3, #0
 800a64c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a654:	685b      	ldr	r3, [r3, #4]
 800a656:	78fa      	ldrb	r2, [r7, #3]
 800a658:	4611      	mov	r1, r2
 800a65a:	6878      	ldr	r0, [r7, #4]
 800a65c:	4798      	blx	r3
 800a65e:	4603      	mov	r3, r0
 800a660:	2b00      	cmp	r3, #0
 800a662:	d001      	beq.n	800a668 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800a664:	2303      	movs	r3, #3
 800a666:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a668:	7bfb      	ldrb	r3, [r7, #15]
}
 800a66a:	4618      	mov	r0, r3
 800a66c:	3710      	adds	r7, #16
 800a66e:	46bd      	mov	sp, r7
 800a670:	bd80      	pop	{r7, pc}

0800a672 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800a672:	b580      	push	{r7, lr}
 800a674:	b084      	sub	sp, #16
 800a676:	af00      	add	r7, sp, #0
 800a678:	6078      	str	r0, [r7, #4]
 800a67a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a682:	6839      	ldr	r1, [r7, #0]
 800a684:	4618      	mov	r0, r3
 800a686:	f001 f908 	bl	800b89a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	2201      	movs	r2, #1
 800a68e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800a698:	461a      	mov	r2, r3
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a6a6:	f003 031f 	and.w	r3, r3, #31
 800a6aa:	2b02      	cmp	r3, #2
 800a6ac:	d01a      	beq.n	800a6e4 <USBD_LL_SetupStage+0x72>
 800a6ae:	2b02      	cmp	r3, #2
 800a6b0:	d822      	bhi.n	800a6f8 <USBD_LL_SetupStage+0x86>
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	d002      	beq.n	800a6bc <USBD_LL_SetupStage+0x4a>
 800a6b6:	2b01      	cmp	r3, #1
 800a6b8:	d00a      	beq.n	800a6d0 <USBD_LL_SetupStage+0x5e>
 800a6ba:	e01d      	b.n	800a6f8 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a6c2:	4619      	mov	r1, r3
 800a6c4:	6878      	ldr	r0, [r7, #4]
 800a6c6:	f000 fb5f 	bl	800ad88 <USBD_StdDevReq>
 800a6ca:	4603      	mov	r3, r0
 800a6cc:	73fb      	strb	r3, [r7, #15]
      break;
 800a6ce:	e020      	b.n	800a712 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a6d6:	4619      	mov	r1, r3
 800a6d8:	6878      	ldr	r0, [r7, #4]
 800a6da:	f000 fbc7 	bl	800ae6c <USBD_StdItfReq>
 800a6de:	4603      	mov	r3, r0
 800a6e0:	73fb      	strb	r3, [r7, #15]
      break;
 800a6e2:	e016      	b.n	800a712 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a6ea:	4619      	mov	r1, r3
 800a6ec:	6878      	ldr	r0, [r7, #4]
 800a6ee:	f000 fc29 	bl	800af44 <USBD_StdEPReq>
 800a6f2:	4603      	mov	r3, r0
 800a6f4:	73fb      	strb	r3, [r7, #15]
      break;
 800a6f6:	e00c      	b.n	800a712 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a6fe:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a702:	b2db      	uxtb	r3, r3
 800a704:	4619      	mov	r1, r3
 800a706:	6878      	ldr	r0, [r7, #4]
 800a708:	f001 fdcc 	bl	800c2a4 <USBD_LL_StallEP>
 800a70c:	4603      	mov	r3, r0
 800a70e:	73fb      	strb	r3, [r7, #15]
      break;
 800a710:	bf00      	nop
  }

  return ret;
 800a712:	7bfb      	ldrb	r3, [r7, #15]
}
 800a714:	4618      	mov	r0, r3
 800a716:	3710      	adds	r7, #16
 800a718:	46bd      	mov	sp, r7
 800a71a:	bd80      	pop	{r7, pc}

0800a71c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800a71c:	b580      	push	{r7, lr}
 800a71e:	b086      	sub	sp, #24
 800a720:	af00      	add	r7, sp, #0
 800a722:	60f8      	str	r0, [r7, #12]
 800a724:	460b      	mov	r3, r1
 800a726:	607a      	str	r2, [r7, #4]
 800a728:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800a72a:	2300      	movs	r3, #0
 800a72c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800a72e:	7afb      	ldrb	r3, [r7, #11]
 800a730:	2b00      	cmp	r3, #0
 800a732:	d16e      	bne.n	800a812 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800a734:	68fb      	ldr	r3, [r7, #12]
 800a736:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800a73a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800a73c:	68fb      	ldr	r3, [r7, #12]
 800a73e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a742:	2b03      	cmp	r3, #3
 800a744:	f040 8098 	bne.w	800a878 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800a748:	693b      	ldr	r3, [r7, #16]
 800a74a:	689a      	ldr	r2, [r3, #8]
 800a74c:	693b      	ldr	r3, [r7, #16]
 800a74e:	68db      	ldr	r3, [r3, #12]
 800a750:	429a      	cmp	r2, r3
 800a752:	d913      	bls.n	800a77c <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800a754:	693b      	ldr	r3, [r7, #16]
 800a756:	689a      	ldr	r2, [r3, #8]
 800a758:	693b      	ldr	r3, [r7, #16]
 800a75a:	68db      	ldr	r3, [r3, #12]
 800a75c:	1ad2      	subs	r2, r2, r3
 800a75e:	693b      	ldr	r3, [r7, #16]
 800a760:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800a762:	693b      	ldr	r3, [r7, #16]
 800a764:	68da      	ldr	r2, [r3, #12]
 800a766:	693b      	ldr	r3, [r7, #16]
 800a768:	689b      	ldr	r3, [r3, #8]
 800a76a:	4293      	cmp	r3, r2
 800a76c:	bf28      	it	cs
 800a76e:	4613      	movcs	r3, r2
 800a770:	461a      	mov	r2, r3
 800a772:	6879      	ldr	r1, [r7, #4]
 800a774:	68f8      	ldr	r0, [r7, #12]
 800a776:	f001 f967 	bl	800ba48 <USBD_CtlContinueRx>
 800a77a:	e07d      	b.n	800a878 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800a77c:	68fb      	ldr	r3, [r7, #12]
 800a77e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a782:	f003 031f 	and.w	r3, r3, #31
 800a786:	2b02      	cmp	r3, #2
 800a788:	d014      	beq.n	800a7b4 <USBD_LL_DataOutStage+0x98>
 800a78a:	2b02      	cmp	r3, #2
 800a78c:	d81d      	bhi.n	800a7ca <USBD_LL_DataOutStage+0xae>
 800a78e:	2b00      	cmp	r3, #0
 800a790:	d002      	beq.n	800a798 <USBD_LL_DataOutStage+0x7c>
 800a792:	2b01      	cmp	r3, #1
 800a794:	d003      	beq.n	800a79e <USBD_LL_DataOutStage+0x82>
 800a796:	e018      	b.n	800a7ca <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800a798:	2300      	movs	r3, #0
 800a79a:	75bb      	strb	r3, [r7, #22]
            break;
 800a79c:	e018      	b.n	800a7d0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800a79e:	68fb      	ldr	r3, [r7, #12]
 800a7a0:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800a7a4:	b2db      	uxtb	r3, r3
 800a7a6:	4619      	mov	r1, r3
 800a7a8:	68f8      	ldr	r0, [r7, #12]
 800a7aa:	f000 fa5e 	bl	800ac6a <USBD_CoreFindIF>
 800a7ae:	4603      	mov	r3, r0
 800a7b0:	75bb      	strb	r3, [r7, #22]
            break;
 800a7b2:	e00d      	b.n	800a7d0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800a7b4:	68fb      	ldr	r3, [r7, #12]
 800a7b6:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800a7ba:	b2db      	uxtb	r3, r3
 800a7bc:	4619      	mov	r1, r3
 800a7be:	68f8      	ldr	r0, [r7, #12]
 800a7c0:	f000 fa60 	bl	800ac84 <USBD_CoreFindEP>
 800a7c4:	4603      	mov	r3, r0
 800a7c6:	75bb      	strb	r3, [r7, #22]
            break;
 800a7c8:	e002      	b.n	800a7d0 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800a7ca:	2300      	movs	r3, #0
 800a7cc:	75bb      	strb	r3, [r7, #22]
            break;
 800a7ce:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800a7d0:	7dbb      	ldrb	r3, [r7, #22]
 800a7d2:	2b00      	cmp	r3, #0
 800a7d4:	d119      	bne.n	800a80a <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a7d6:	68fb      	ldr	r3, [r7, #12]
 800a7d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a7dc:	b2db      	uxtb	r3, r3
 800a7de:	2b03      	cmp	r3, #3
 800a7e0:	d113      	bne.n	800a80a <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800a7e2:	7dba      	ldrb	r2, [r7, #22]
 800a7e4:	68fb      	ldr	r3, [r7, #12]
 800a7e6:	32ae      	adds	r2, #174	; 0xae
 800a7e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a7ec:	691b      	ldr	r3, [r3, #16]
 800a7ee:	2b00      	cmp	r3, #0
 800a7f0:	d00b      	beq.n	800a80a <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800a7f2:	7dba      	ldrb	r2, [r7, #22]
 800a7f4:	68fb      	ldr	r3, [r7, #12]
 800a7f6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800a7fa:	7dba      	ldrb	r2, [r7, #22]
 800a7fc:	68fb      	ldr	r3, [r7, #12]
 800a7fe:	32ae      	adds	r2, #174	; 0xae
 800a800:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a804:	691b      	ldr	r3, [r3, #16]
 800a806:	68f8      	ldr	r0, [r7, #12]
 800a808:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800a80a:	68f8      	ldr	r0, [r7, #12]
 800a80c:	f001 f92d 	bl	800ba6a <USBD_CtlSendStatus>
 800a810:	e032      	b.n	800a878 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800a812:	7afb      	ldrb	r3, [r7, #11]
 800a814:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a818:	b2db      	uxtb	r3, r3
 800a81a:	4619      	mov	r1, r3
 800a81c:	68f8      	ldr	r0, [r7, #12]
 800a81e:	f000 fa31 	bl	800ac84 <USBD_CoreFindEP>
 800a822:	4603      	mov	r3, r0
 800a824:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a826:	7dbb      	ldrb	r3, [r7, #22]
 800a828:	2bff      	cmp	r3, #255	; 0xff
 800a82a:	d025      	beq.n	800a878 <USBD_LL_DataOutStage+0x15c>
 800a82c:	7dbb      	ldrb	r3, [r7, #22]
 800a82e:	2b00      	cmp	r3, #0
 800a830:	d122      	bne.n	800a878 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a832:	68fb      	ldr	r3, [r7, #12]
 800a834:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a838:	b2db      	uxtb	r3, r3
 800a83a:	2b03      	cmp	r3, #3
 800a83c:	d117      	bne.n	800a86e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800a83e:	7dba      	ldrb	r2, [r7, #22]
 800a840:	68fb      	ldr	r3, [r7, #12]
 800a842:	32ae      	adds	r2, #174	; 0xae
 800a844:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a848:	699b      	ldr	r3, [r3, #24]
 800a84a:	2b00      	cmp	r3, #0
 800a84c:	d00f      	beq.n	800a86e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800a84e:	7dba      	ldrb	r2, [r7, #22]
 800a850:	68fb      	ldr	r3, [r7, #12]
 800a852:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800a856:	7dba      	ldrb	r2, [r7, #22]
 800a858:	68fb      	ldr	r3, [r7, #12]
 800a85a:	32ae      	adds	r2, #174	; 0xae
 800a85c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a860:	699b      	ldr	r3, [r3, #24]
 800a862:	7afa      	ldrb	r2, [r7, #11]
 800a864:	4611      	mov	r1, r2
 800a866:	68f8      	ldr	r0, [r7, #12]
 800a868:	4798      	blx	r3
 800a86a:	4603      	mov	r3, r0
 800a86c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800a86e:	7dfb      	ldrb	r3, [r7, #23]
 800a870:	2b00      	cmp	r3, #0
 800a872:	d001      	beq.n	800a878 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800a874:	7dfb      	ldrb	r3, [r7, #23]
 800a876:	e000      	b.n	800a87a <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800a878:	2300      	movs	r3, #0
}
 800a87a:	4618      	mov	r0, r3
 800a87c:	3718      	adds	r7, #24
 800a87e:	46bd      	mov	sp, r7
 800a880:	bd80      	pop	{r7, pc}

0800a882 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800a882:	b580      	push	{r7, lr}
 800a884:	b086      	sub	sp, #24
 800a886:	af00      	add	r7, sp, #0
 800a888:	60f8      	str	r0, [r7, #12]
 800a88a:	460b      	mov	r3, r1
 800a88c:	607a      	str	r2, [r7, #4]
 800a88e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800a890:	7afb      	ldrb	r3, [r7, #11]
 800a892:	2b00      	cmp	r3, #0
 800a894:	d16f      	bne.n	800a976 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800a896:	68fb      	ldr	r3, [r7, #12]
 800a898:	3314      	adds	r3, #20
 800a89a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800a89c:	68fb      	ldr	r3, [r7, #12]
 800a89e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a8a2:	2b02      	cmp	r3, #2
 800a8a4:	d15a      	bne.n	800a95c <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800a8a6:	693b      	ldr	r3, [r7, #16]
 800a8a8:	689a      	ldr	r2, [r3, #8]
 800a8aa:	693b      	ldr	r3, [r7, #16]
 800a8ac:	68db      	ldr	r3, [r3, #12]
 800a8ae:	429a      	cmp	r2, r3
 800a8b0:	d914      	bls.n	800a8dc <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800a8b2:	693b      	ldr	r3, [r7, #16]
 800a8b4:	689a      	ldr	r2, [r3, #8]
 800a8b6:	693b      	ldr	r3, [r7, #16]
 800a8b8:	68db      	ldr	r3, [r3, #12]
 800a8ba:	1ad2      	subs	r2, r2, r3
 800a8bc:	693b      	ldr	r3, [r7, #16]
 800a8be:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800a8c0:	693b      	ldr	r3, [r7, #16]
 800a8c2:	689b      	ldr	r3, [r3, #8]
 800a8c4:	461a      	mov	r2, r3
 800a8c6:	6879      	ldr	r1, [r7, #4]
 800a8c8:	68f8      	ldr	r0, [r7, #12]
 800a8ca:	f001 f8ac 	bl	800ba26 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a8ce:	2300      	movs	r3, #0
 800a8d0:	2200      	movs	r2, #0
 800a8d2:	2100      	movs	r1, #0
 800a8d4:	68f8      	ldr	r0, [r7, #12]
 800a8d6:	f001 fd8f 	bl	800c3f8 <USBD_LL_PrepareReceive>
 800a8da:	e03f      	b.n	800a95c <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800a8dc:	693b      	ldr	r3, [r7, #16]
 800a8de:	68da      	ldr	r2, [r3, #12]
 800a8e0:	693b      	ldr	r3, [r7, #16]
 800a8e2:	689b      	ldr	r3, [r3, #8]
 800a8e4:	429a      	cmp	r2, r3
 800a8e6:	d11c      	bne.n	800a922 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800a8e8:	693b      	ldr	r3, [r7, #16]
 800a8ea:	685a      	ldr	r2, [r3, #4]
 800a8ec:	693b      	ldr	r3, [r7, #16]
 800a8ee:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800a8f0:	429a      	cmp	r2, r3
 800a8f2:	d316      	bcc.n	800a922 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800a8f4:	693b      	ldr	r3, [r7, #16]
 800a8f6:	685a      	ldr	r2, [r3, #4]
 800a8f8:	68fb      	ldr	r3, [r7, #12]
 800a8fa:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800a8fe:	429a      	cmp	r2, r3
 800a900:	d20f      	bcs.n	800a922 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800a902:	2200      	movs	r2, #0
 800a904:	2100      	movs	r1, #0
 800a906:	68f8      	ldr	r0, [r7, #12]
 800a908:	f001 f88d 	bl	800ba26 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800a90c:	68fb      	ldr	r3, [r7, #12]
 800a90e:	2200      	movs	r2, #0
 800a910:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a914:	2300      	movs	r3, #0
 800a916:	2200      	movs	r2, #0
 800a918:	2100      	movs	r1, #0
 800a91a:	68f8      	ldr	r0, [r7, #12]
 800a91c:	f001 fd6c 	bl	800c3f8 <USBD_LL_PrepareReceive>
 800a920:	e01c      	b.n	800a95c <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a922:	68fb      	ldr	r3, [r7, #12]
 800a924:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a928:	b2db      	uxtb	r3, r3
 800a92a:	2b03      	cmp	r3, #3
 800a92c:	d10f      	bne.n	800a94e <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800a92e:	68fb      	ldr	r3, [r7, #12]
 800a930:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a934:	68db      	ldr	r3, [r3, #12]
 800a936:	2b00      	cmp	r3, #0
 800a938:	d009      	beq.n	800a94e <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800a93a:	68fb      	ldr	r3, [r7, #12]
 800a93c:	2200      	movs	r2, #0
 800a93e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800a942:	68fb      	ldr	r3, [r7, #12]
 800a944:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a948:	68db      	ldr	r3, [r3, #12]
 800a94a:	68f8      	ldr	r0, [r7, #12]
 800a94c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800a94e:	2180      	movs	r1, #128	; 0x80
 800a950:	68f8      	ldr	r0, [r7, #12]
 800a952:	f001 fca7 	bl	800c2a4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800a956:	68f8      	ldr	r0, [r7, #12]
 800a958:	f001 f89a 	bl	800ba90 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800a95c:	68fb      	ldr	r3, [r7, #12]
 800a95e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800a962:	2b00      	cmp	r3, #0
 800a964:	d03a      	beq.n	800a9dc <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800a966:	68f8      	ldr	r0, [r7, #12]
 800a968:	f7ff fe42 	bl	800a5f0 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800a96c:	68fb      	ldr	r3, [r7, #12]
 800a96e:	2200      	movs	r2, #0
 800a970:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800a974:	e032      	b.n	800a9dc <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800a976:	7afb      	ldrb	r3, [r7, #11]
 800a978:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a97c:	b2db      	uxtb	r3, r3
 800a97e:	4619      	mov	r1, r3
 800a980:	68f8      	ldr	r0, [r7, #12]
 800a982:	f000 f97f 	bl	800ac84 <USBD_CoreFindEP>
 800a986:	4603      	mov	r3, r0
 800a988:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a98a:	7dfb      	ldrb	r3, [r7, #23]
 800a98c:	2bff      	cmp	r3, #255	; 0xff
 800a98e:	d025      	beq.n	800a9dc <USBD_LL_DataInStage+0x15a>
 800a990:	7dfb      	ldrb	r3, [r7, #23]
 800a992:	2b00      	cmp	r3, #0
 800a994:	d122      	bne.n	800a9dc <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a996:	68fb      	ldr	r3, [r7, #12]
 800a998:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a99c:	b2db      	uxtb	r3, r3
 800a99e:	2b03      	cmp	r3, #3
 800a9a0:	d11c      	bne.n	800a9dc <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800a9a2:	7dfa      	ldrb	r2, [r7, #23]
 800a9a4:	68fb      	ldr	r3, [r7, #12]
 800a9a6:	32ae      	adds	r2, #174	; 0xae
 800a9a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a9ac:	695b      	ldr	r3, [r3, #20]
 800a9ae:	2b00      	cmp	r3, #0
 800a9b0:	d014      	beq.n	800a9dc <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800a9b2:	7dfa      	ldrb	r2, [r7, #23]
 800a9b4:	68fb      	ldr	r3, [r7, #12]
 800a9b6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800a9ba:	7dfa      	ldrb	r2, [r7, #23]
 800a9bc:	68fb      	ldr	r3, [r7, #12]
 800a9be:	32ae      	adds	r2, #174	; 0xae
 800a9c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a9c4:	695b      	ldr	r3, [r3, #20]
 800a9c6:	7afa      	ldrb	r2, [r7, #11]
 800a9c8:	4611      	mov	r1, r2
 800a9ca:	68f8      	ldr	r0, [r7, #12]
 800a9cc:	4798      	blx	r3
 800a9ce:	4603      	mov	r3, r0
 800a9d0:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800a9d2:	7dbb      	ldrb	r3, [r7, #22]
 800a9d4:	2b00      	cmp	r3, #0
 800a9d6:	d001      	beq.n	800a9dc <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800a9d8:	7dbb      	ldrb	r3, [r7, #22]
 800a9da:	e000      	b.n	800a9de <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800a9dc:	2300      	movs	r3, #0
}
 800a9de:	4618      	mov	r0, r3
 800a9e0:	3718      	adds	r7, #24
 800a9e2:	46bd      	mov	sp, r7
 800a9e4:	bd80      	pop	{r7, pc}

0800a9e6 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800a9e6:	b580      	push	{r7, lr}
 800a9e8:	b084      	sub	sp, #16
 800a9ea:	af00      	add	r7, sp, #0
 800a9ec:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800a9ee:	2300      	movs	r3, #0
 800a9f0:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	2201      	movs	r2, #1
 800a9f6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	2200      	movs	r2, #0
 800a9fe:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	2200      	movs	r2, #0
 800aa06:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	2200      	movs	r2, #0
 800aa0c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	2200      	movs	r2, #0
 800aa14:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aa1e:	2b00      	cmp	r3, #0
 800aa20:	d014      	beq.n	800aa4c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aa28:	685b      	ldr	r3, [r3, #4]
 800aa2a:	2b00      	cmp	r3, #0
 800aa2c:	d00e      	beq.n	800aa4c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aa34:	685b      	ldr	r3, [r3, #4]
 800aa36:	687a      	ldr	r2, [r7, #4]
 800aa38:	6852      	ldr	r2, [r2, #4]
 800aa3a:	b2d2      	uxtb	r2, r2
 800aa3c:	4611      	mov	r1, r2
 800aa3e:	6878      	ldr	r0, [r7, #4]
 800aa40:	4798      	blx	r3
 800aa42:	4603      	mov	r3, r0
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	d001      	beq.n	800aa4c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800aa48:	2303      	movs	r3, #3
 800aa4a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800aa4c:	2340      	movs	r3, #64	; 0x40
 800aa4e:	2200      	movs	r2, #0
 800aa50:	2100      	movs	r1, #0
 800aa52:	6878      	ldr	r0, [r7, #4]
 800aa54:	f001 fbc2 	bl	800c1dc <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	2201      	movs	r2, #1
 800aa5c:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	2240      	movs	r2, #64	; 0x40
 800aa64:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800aa68:	2340      	movs	r3, #64	; 0x40
 800aa6a:	2200      	movs	r2, #0
 800aa6c:	2180      	movs	r1, #128	; 0x80
 800aa6e:	6878      	ldr	r0, [r7, #4]
 800aa70:	f001 fbb4 	bl	800c1dc <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	2201      	movs	r2, #1
 800aa78:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	2240      	movs	r2, #64	; 0x40
 800aa7e:	621a      	str	r2, [r3, #32]

  return ret;
 800aa80:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa82:	4618      	mov	r0, r3
 800aa84:	3710      	adds	r7, #16
 800aa86:	46bd      	mov	sp, r7
 800aa88:	bd80      	pop	{r7, pc}

0800aa8a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800aa8a:	b480      	push	{r7}
 800aa8c:	b083      	sub	sp, #12
 800aa8e:	af00      	add	r7, sp, #0
 800aa90:	6078      	str	r0, [r7, #4]
 800aa92:	460b      	mov	r3, r1
 800aa94:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	78fa      	ldrb	r2, [r7, #3]
 800aa9a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800aa9c:	2300      	movs	r3, #0
}
 800aa9e:	4618      	mov	r0, r3
 800aaa0:	370c      	adds	r7, #12
 800aaa2:	46bd      	mov	sp, r7
 800aaa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaa8:	4770      	bx	lr

0800aaaa <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800aaaa:	b480      	push	{r7}
 800aaac:	b083      	sub	sp, #12
 800aaae:	af00      	add	r7, sp, #0
 800aab0:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aab8:	b2da      	uxtb	r2, r3
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	2204      	movs	r2, #4
 800aac4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800aac8:	2300      	movs	r3, #0
}
 800aaca:	4618      	mov	r0, r3
 800aacc:	370c      	adds	r7, #12
 800aace:	46bd      	mov	sp, r7
 800aad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aad4:	4770      	bx	lr

0800aad6 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800aad6:	b480      	push	{r7}
 800aad8:	b083      	sub	sp, #12
 800aada:	af00      	add	r7, sp, #0
 800aadc:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aae4:	b2db      	uxtb	r3, r3
 800aae6:	2b04      	cmp	r3, #4
 800aae8:	d106      	bne.n	800aaf8 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800aaf0:	b2da      	uxtb	r2, r3
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800aaf8:	2300      	movs	r3, #0
}
 800aafa:	4618      	mov	r0, r3
 800aafc:	370c      	adds	r7, #12
 800aafe:	46bd      	mov	sp, r7
 800ab00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab04:	4770      	bx	lr

0800ab06 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800ab06:	b580      	push	{r7, lr}
 800ab08:	b082      	sub	sp, #8
 800ab0a:	af00      	add	r7, sp, #0
 800ab0c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ab14:	b2db      	uxtb	r3, r3
 800ab16:	2b03      	cmp	r3, #3
 800ab18:	d110      	bne.n	800ab3c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	d00b      	beq.n	800ab3c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ab2a:	69db      	ldr	r3, [r3, #28]
 800ab2c:	2b00      	cmp	r3, #0
 800ab2e:	d005      	beq.n	800ab3c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ab36:	69db      	ldr	r3, [r3, #28]
 800ab38:	6878      	ldr	r0, [r7, #4]
 800ab3a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800ab3c:	2300      	movs	r3, #0
}
 800ab3e:	4618      	mov	r0, r3
 800ab40:	3708      	adds	r7, #8
 800ab42:	46bd      	mov	sp, r7
 800ab44:	bd80      	pop	{r7, pc}

0800ab46 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800ab46:	b580      	push	{r7, lr}
 800ab48:	b082      	sub	sp, #8
 800ab4a:	af00      	add	r7, sp, #0
 800ab4c:	6078      	str	r0, [r7, #4]
 800ab4e:	460b      	mov	r3, r1
 800ab50:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	32ae      	adds	r2, #174	; 0xae
 800ab5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab60:	2b00      	cmp	r3, #0
 800ab62:	d101      	bne.n	800ab68 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800ab64:	2303      	movs	r3, #3
 800ab66:	e01c      	b.n	800aba2 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ab6e:	b2db      	uxtb	r3, r3
 800ab70:	2b03      	cmp	r3, #3
 800ab72:	d115      	bne.n	800aba0 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	32ae      	adds	r2, #174	; 0xae
 800ab7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab82:	6a1b      	ldr	r3, [r3, #32]
 800ab84:	2b00      	cmp	r3, #0
 800ab86:	d00b      	beq.n	800aba0 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	32ae      	adds	r2, #174	; 0xae
 800ab92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab96:	6a1b      	ldr	r3, [r3, #32]
 800ab98:	78fa      	ldrb	r2, [r7, #3]
 800ab9a:	4611      	mov	r1, r2
 800ab9c:	6878      	ldr	r0, [r7, #4]
 800ab9e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800aba0:	2300      	movs	r3, #0
}
 800aba2:	4618      	mov	r0, r3
 800aba4:	3708      	adds	r7, #8
 800aba6:	46bd      	mov	sp, r7
 800aba8:	bd80      	pop	{r7, pc}

0800abaa <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800abaa:	b580      	push	{r7, lr}
 800abac:	b082      	sub	sp, #8
 800abae:	af00      	add	r7, sp, #0
 800abb0:	6078      	str	r0, [r7, #4]
 800abb2:	460b      	mov	r3, r1
 800abb4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	32ae      	adds	r2, #174	; 0xae
 800abc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800abc4:	2b00      	cmp	r3, #0
 800abc6:	d101      	bne.n	800abcc <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800abc8:	2303      	movs	r3, #3
 800abca:	e01c      	b.n	800ac06 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800abd2:	b2db      	uxtb	r3, r3
 800abd4:	2b03      	cmp	r3, #3
 800abd6:	d115      	bne.n	800ac04 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	32ae      	adds	r2, #174	; 0xae
 800abe2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800abe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abe8:	2b00      	cmp	r3, #0
 800abea:	d00b      	beq.n	800ac04 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	32ae      	adds	r2, #174	; 0xae
 800abf6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800abfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abfc:	78fa      	ldrb	r2, [r7, #3]
 800abfe:	4611      	mov	r1, r2
 800ac00:	6878      	ldr	r0, [r7, #4]
 800ac02:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800ac04:	2300      	movs	r3, #0
}
 800ac06:	4618      	mov	r0, r3
 800ac08:	3708      	adds	r7, #8
 800ac0a:	46bd      	mov	sp, r7
 800ac0c:	bd80      	pop	{r7, pc}

0800ac0e <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800ac0e:	b480      	push	{r7}
 800ac10:	b083      	sub	sp, #12
 800ac12:	af00      	add	r7, sp, #0
 800ac14:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800ac16:	2300      	movs	r3, #0
}
 800ac18:	4618      	mov	r0, r3
 800ac1a:	370c      	adds	r7, #12
 800ac1c:	46bd      	mov	sp, r7
 800ac1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac22:	4770      	bx	lr

0800ac24 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800ac24:	b580      	push	{r7, lr}
 800ac26:	b084      	sub	sp, #16
 800ac28:	af00      	add	r7, sp, #0
 800ac2a:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800ac2c:	2300      	movs	r3, #0
 800ac2e:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	2201      	movs	r2, #1
 800ac34:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ac3e:	2b00      	cmp	r3, #0
 800ac40:	d00e      	beq.n	800ac60 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ac48:	685b      	ldr	r3, [r3, #4]
 800ac4a:	687a      	ldr	r2, [r7, #4]
 800ac4c:	6852      	ldr	r2, [r2, #4]
 800ac4e:	b2d2      	uxtb	r2, r2
 800ac50:	4611      	mov	r1, r2
 800ac52:	6878      	ldr	r0, [r7, #4]
 800ac54:	4798      	blx	r3
 800ac56:	4603      	mov	r3, r0
 800ac58:	2b00      	cmp	r3, #0
 800ac5a:	d001      	beq.n	800ac60 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800ac5c:	2303      	movs	r3, #3
 800ac5e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800ac60:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac62:	4618      	mov	r0, r3
 800ac64:	3710      	adds	r7, #16
 800ac66:	46bd      	mov	sp, r7
 800ac68:	bd80      	pop	{r7, pc}

0800ac6a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800ac6a:	b480      	push	{r7}
 800ac6c:	b083      	sub	sp, #12
 800ac6e:	af00      	add	r7, sp, #0
 800ac70:	6078      	str	r0, [r7, #4]
 800ac72:	460b      	mov	r3, r1
 800ac74:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800ac76:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800ac78:	4618      	mov	r0, r3
 800ac7a:	370c      	adds	r7, #12
 800ac7c:	46bd      	mov	sp, r7
 800ac7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac82:	4770      	bx	lr

0800ac84 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800ac84:	b480      	push	{r7}
 800ac86:	b083      	sub	sp, #12
 800ac88:	af00      	add	r7, sp, #0
 800ac8a:	6078      	str	r0, [r7, #4]
 800ac8c:	460b      	mov	r3, r1
 800ac8e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800ac90:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800ac92:	4618      	mov	r0, r3
 800ac94:	370c      	adds	r7, #12
 800ac96:	46bd      	mov	sp, r7
 800ac98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac9c:	4770      	bx	lr

0800ac9e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800ac9e:	b580      	push	{r7, lr}
 800aca0:	b086      	sub	sp, #24
 800aca2:	af00      	add	r7, sp, #0
 800aca4:	6078      	str	r0, [r7, #4]
 800aca6:	460b      	mov	r3, r1
 800aca8:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800acb2:	2300      	movs	r3, #0
 800acb4:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800acb6:	68fb      	ldr	r3, [r7, #12]
 800acb8:	885b      	ldrh	r3, [r3, #2]
 800acba:	b29a      	uxth	r2, r3
 800acbc:	68fb      	ldr	r3, [r7, #12]
 800acbe:	781b      	ldrb	r3, [r3, #0]
 800acc0:	b29b      	uxth	r3, r3
 800acc2:	429a      	cmp	r2, r3
 800acc4:	d920      	bls.n	800ad08 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800acc6:	68fb      	ldr	r3, [r7, #12]
 800acc8:	781b      	ldrb	r3, [r3, #0]
 800acca:	b29b      	uxth	r3, r3
 800accc:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800acce:	e013      	b.n	800acf8 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800acd0:	f107 030a 	add.w	r3, r7, #10
 800acd4:	4619      	mov	r1, r3
 800acd6:	6978      	ldr	r0, [r7, #20]
 800acd8:	f000 f81b 	bl	800ad12 <USBD_GetNextDesc>
 800acdc:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800acde:	697b      	ldr	r3, [r7, #20]
 800ace0:	785b      	ldrb	r3, [r3, #1]
 800ace2:	2b05      	cmp	r3, #5
 800ace4:	d108      	bne.n	800acf8 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800ace6:	697b      	ldr	r3, [r7, #20]
 800ace8:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800acea:	693b      	ldr	r3, [r7, #16]
 800acec:	789b      	ldrb	r3, [r3, #2]
 800acee:	78fa      	ldrb	r2, [r7, #3]
 800acf0:	429a      	cmp	r2, r3
 800acf2:	d008      	beq.n	800ad06 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800acf4:	2300      	movs	r3, #0
 800acf6:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800acf8:	68fb      	ldr	r3, [r7, #12]
 800acfa:	885b      	ldrh	r3, [r3, #2]
 800acfc:	b29a      	uxth	r2, r3
 800acfe:	897b      	ldrh	r3, [r7, #10]
 800ad00:	429a      	cmp	r2, r3
 800ad02:	d8e5      	bhi.n	800acd0 <USBD_GetEpDesc+0x32>
 800ad04:	e000      	b.n	800ad08 <USBD_GetEpDesc+0x6a>
          break;
 800ad06:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800ad08:	693b      	ldr	r3, [r7, #16]
}
 800ad0a:	4618      	mov	r0, r3
 800ad0c:	3718      	adds	r7, #24
 800ad0e:	46bd      	mov	sp, r7
 800ad10:	bd80      	pop	{r7, pc}

0800ad12 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800ad12:	b480      	push	{r7}
 800ad14:	b085      	sub	sp, #20
 800ad16:	af00      	add	r7, sp, #0
 800ad18:	6078      	str	r0, [r7, #4]
 800ad1a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800ad20:	683b      	ldr	r3, [r7, #0]
 800ad22:	881a      	ldrh	r2, [r3, #0]
 800ad24:	68fb      	ldr	r3, [r7, #12]
 800ad26:	781b      	ldrb	r3, [r3, #0]
 800ad28:	b29b      	uxth	r3, r3
 800ad2a:	4413      	add	r3, r2
 800ad2c:	b29a      	uxth	r2, r3
 800ad2e:	683b      	ldr	r3, [r7, #0]
 800ad30:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800ad32:	68fb      	ldr	r3, [r7, #12]
 800ad34:	781b      	ldrb	r3, [r3, #0]
 800ad36:	461a      	mov	r2, r3
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	4413      	add	r3, r2
 800ad3c:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800ad3e:	68fb      	ldr	r3, [r7, #12]
}
 800ad40:	4618      	mov	r0, r3
 800ad42:	3714      	adds	r7, #20
 800ad44:	46bd      	mov	sp, r7
 800ad46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad4a:	4770      	bx	lr

0800ad4c <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800ad4c:	b480      	push	{r7}
 800ad4e:	b087      	sub	sp, #28
 800ad50:	af00      	add	r7, sp, #0
 800ad52:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800ad58:	697b      	ldr	r3, [r7, #20]
 800ad5a:	781b      	ldrb	r3, [r3, #0]
 800ad5c:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800ad5e:	697b      	ldr	r3, [r7, #20]
 800ad60:	3301      	adds	r3, #1
 800ad62:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800ad64:	697b      	ldr	r3, [r7, #20]
 800ad66:	781b      	ldrb	r3, [r3, #0]
 800ad68:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800ad6a:	8a3b      	ldrh	r3, [r7, #16]
 800ad6c:	021b      	lsls	r3, r3, #8
 800ad6e:	b21a      	sxth	r2, r3
 800ad70:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800ad74:	4313      	orrs	r3, r2
 800ad76:	b21b      	sxth	r3, r3
 800ad78:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800ad7a:	89fb      	ldrh	r3, [r7, #14]
}
 800ad7c:	4618      	mov	r0, r3
 800ad7e:	371c      	adds	r7, #28
 800ad80:	46bd      	mov	sp, r7
 800ad82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad86:	4770      	bx	lr

0800ad88 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ad88:	b580      	push	{r7, lr}
 800ad8a:	b084      	sub	sp, #16
 800ad8c:	af00      	add	r7, sp, #0
 800ad8e:	6078      	str	r0, [r7, #4]
 800ad90:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ad92:	2300      	movs	r3, #0
 800ad94:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ad96:	683b      	ldr	r3, [r7, #0]
 800ad98:	781b      	ldrb	r3, [r3, #0]
 800ad9a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ad9e:	2b40      	cmp	r3, #64	; 0x40
 800ada0:	d005      	beq.n	800adae <USBD_StdDevReq+0x26>
 800ada2:	2b40      	cmp	r3, #64	; 0x40
 800ada4:	d857      	bhi.n	800ae56 <USBD_StdDevReq+0xce>
 800ada6:	2b00      	cmp	r3, #0
 800ada8:	d00f      	beq.n	800adca <USBD_StdDevReq+0x42>
 800adaa:	2b20      	cmp	r3, #32
 800adac:	d153      	bne.n	800ae56 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	32ae      	adds	r2, #174	; 0xae
 800adb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800adbc:	689b      	ldr	r3, [r3, #8]
 800adbe:	6839      	ldr	r1, [r7, #0]
 800adc0:	6878      	ldr	r0, [r7, #4]
 800adc2:	4798      	blx	r3
 800adc4:	4603      	mov	r3, r0
 800adc6:	73fb      	strb	r3, [r7, #15]
      break;
 800adc8:	e04a      	b.n	800ae60 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800adca:	683b      	ldr	r3, [r7, #0]
 800adcc:	785b      	ldrb	r3, [r3, #1]
 800adce:	2b09      	cmp	r3, #9
 800add0:	d83b      	bhi.n	800ae4a <USBD_StdDevReq+0xc2>
 800add2:	a201      	add	r2, pc, #4	; (adr r2, 800add8 <USBD_StdDevReq+0x50>)
 800add4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800add8:	0800ae2d 	.word	0x0800ae2d
 800addc:	0800ae41 	.word	0x0800ae41
 800ade0:	0800ae4b 	.word	0x0800ae4b
 800ade4:	0800ae37 	.word	0x0800ae37
 800ade8:	0800ae4b 	.word	0x0800ae4b
 800adec:	0800ae0b 	.word	0x0800ae0b
 800adf0:	0800ae01 	.word	0x0800ae01
 800adf4:	0800ae4b 	.word	0x0800ae4b
 800adf8:	0800ae23 	.word	0x0800ae23
 800adfc:	0800ae15 	.word	0x0800ae15
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800ae00:	6839      	ldr	r1, [r7, #0]
 800ae02:	6878      	ldr	r0, [r7, #4]
 800ae04:	f000 fa3c 	bl	800b280 <USBD_GetDescriptor>
          break;
 800ae08:	e024      	b.n	800ae54 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800ae0a:	6839      	ldr	r1, [r7, #0]
 800ae0c:	6878      	ldr	r0, [r7, #4]
 800ae0e:	f000 fba1 	bl	800b554 <USBD_SetAddress>
          break;
 800ae12:	e01f      	b.n	800ae54 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800ae14:	6839      	ldr	r1, [r7, #0]
 800ae16:	6878      	ldr	r0, [r7, #4]
 800ae18:	f000 fbe0 	bl	800b5dc <USBD_SetConfig>
 800ae1c:	4603      	mov	r3, r0
 800ae1e:	73fb      	strb	r3, [r7, #15]
          break;
 800ae20:	e018      	b.n	800ae54 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800ae22:	6839      	ldr	r1, [r7, #0]
 800ae24:	6878      	ldr	r0, [r7, #4]
 800ae26:	f000 fc83 	bl	800b730 <USBD_GetConfig>
          break;
 800ae2a:	e013      	b.n	800ae54 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800ae2c:	6839      	ldr	r1, [r7, #0]
 800ae2e:	6878      	ldr	r0, [r7, #4]
 800ae30:	f000 fcb4 	bl	800b79c <USBD_GetStatus>
          break;
 800ae34:	e00e      	b.n	800ae54 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800ae36:	6839      	ldr	r1, [r7, #0]
 800ae38:	6878      	ldr	r0, [r7, #4]
 800ae3a:	f000 fce3 	bl	800b804 <USBD_SetFeature>
          break;
 800ae3e:	e009      	b.n	800ae54 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800ae40:	6839      	ldr	r1, [r7, #0]
 800ae42:	6878      	ldr	r0, [r7, #4]
 800ae44:	f000 fd07 	bl	800b856 <USBD_ClrFeature>
          break;
 800ae48:	e004      	b.n	800ae54 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800ae4a:	6839      	ldr	r1, [r7, #0]
 800ae4c:	6878      	ldr	r0, [r7, #4]
 800ae4e:	f000 fd5e 	bl	800b90e <USBD_CtlError>
          break;
 800ae52:	bf00      	nop
      }
      break;
 800ae54:	e004      	b.n	800ae60 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800ae56:	6839      	ldr	r1, [r7, #0]
 800ae58:	6878      	ldr	r0, [r7, #4]
 800ae5a:	f000 fd58 	bl	800b90e <USBD_CtlError>
      break;
 800ae5e:	bf00      	nop
  }

  return ret;
 800ae60:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae62:	4618      	mov	r0, r3
 800ae64:	3710      	adds	r7, #16
 800ae66:	46bd      	mov	sp, r7
 800ae68:	bd80      	pop	{r7, pc}
 800ae6a:	bf00      	nop

0800ae6c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ae6c:	b580      	push	{r7, lr}
 800ae6e:	b084      	sub	sp, #16
 800ae70:	af00      	add	r7, sp, #0
 800ae72:	6078      	str	r0, [r7, #4]
 800ae74:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ae76:	2300      	movs	r3, #0
 800ae78:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ae7a:	683b      	ldr	r3, [r7, #0]
 800ae7c:	781b      	ldrb	r3, [r3, #0]
 800ae7e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ae82:	2b40      	cmp	r3, #64	; 0x40
 800ae84:	d005      	beq.n	800ae92 <USBD_StdItfReq+0x26>
 800ae86:	2b40      	cmp	r3, #64	; 0x40
 800ae88:	d852      	bhi.n	800af30 <USBD_StdItfReq+0xc4>
 800ae8a:	2b00      	cmp	r3, #0
 800ae8c:	d001      	beq.n	800ae92 <USBD_StdItfReq+0x26>
 800ae8e:	2b20      	cmp	r3, #32
 800ae90:	d14e      	bne.n	800af30 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ae98:	b2db      	uxtb	r3, r3
 800ae9a:	3b01      	subs	r3, #1
 800ae9c:	2b02      	cmp	r3, #2
 800ae9e:	d840      	bhi.n	800af22 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800aea0:	683b      	ldr	r3, [r7, #0]
 800aea2:	889b      	ldrh	r3, [r3, #4]
 800aea4:	b2db      	uxtb	r3, r3
 800aea6:	2b01      	cmp	r3, #1
 800aea8:	d836      	bhi.n	800af18 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800aeaa:	683b      	ldr	r3, [r7, #0]
 800aeac:	889b      	ldrh	r3, [r3, #4]
 800aeae:	b2db      	uxtb	r3, r3
 800aeb0:	4619      	mov	r1, r3
 800aeb2:	6878      	ldr	r0, [r7, #4]
 800aeb4:	f7ff fed9 	bl	800ac6a <USBD_CoreFindIF>
 800aeb8:	4603      	mov	r3, r0
 800aeba:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800aebc:	7bbb      	ldrb	r3, [r7, #14]
 800aebe:	2bff      	cmp	r3, #255	; 0xff
 800aec0:	d01d      	beq.n	800aefe <USBD_StdItfReq+0x92>
 800aec2:	7bbb      	ldrb	r3, [r7, #14]
 800aec4:	2b00      	cmp	r3, #0
 800aec6:	d11a      	bne.n	800aefe <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800aec8:	7bba      	ldrb	r2, [r7, #14]
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	32ae      	adds	r2, #174	; 0xae
 800aece:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aed2:	689b      	ldr	r3, [r3, #8]
 800aed4:	2b00      	cmp	r3, #0
 800aed6:	d00f      	beq.n	800aef8 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800aed8:	7bba      	ldrb	r2, [r7, #14]
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800aee0:	7bba      	ldrb	r2, [r7, #14]
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	32ae      	adds	r2, #174	; 0xae
 800aee6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aeea:	689b      	ldr	r3, [r3, #8]
 800aeec:	6839      	ldr	r1, [r7, #0]
 800aeee:	6878      	ldr	r0, [r7, #4]
 800aef0:	4798      	blx	r3
 800aef2:	4603      	mov	r3, r0
 800aef4:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800aef6:	e004      	b.n	800af02 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800aef8:	2303      	movs	r3, #3
 800aefa:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800aefc:	e001      	b.n	800af02 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800aefe:	2303      	movs	r3, #3
 800af00:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800af02:	683b      	ldr	r3, [r7, #0]
 800af04:	88db      	ldrh	r3, [r3, #6]
 800af06:	2b00      	cmp	r3, #0
 800af08:	d110      	bne.n	800af2c <USBD_StdItfReq+0xc0>
 800af0a:	7bfb      	ldrb	r3, [r7, #15]
 800af0c:	2b00      	cmp	r3, #0
 800af0e:	d10d      	bne.n	800af2c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800af10:	6878      	ldr	r0, [r7, #4]
 800af12:	f000 fdaa 	bl	800ba6a <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800af16:	e009      	b.n	800af2c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800af18:	6839      	ldr	r1, [r7, #0]
 800af1a:	6878      	ldr	r0, [r7, #4]
 800af1c:	f000 fcf7 	bl	800b90e <USBD_CtlError>
          break;
 800af20:	e004      	b.n	800af2c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800af22:	6839      	ldr	r1, [r7, #0]
 800af24:	6878      	ldr	r0, [r7, #4]
 800af26:	f000 fcf2 	bl	800b90e <USBD_CtlError>
          break;
 800af2a:	e000      	b.n	800af2e <USBD_StdItfReq+0xc2>
          break;
 800af2c:	bf00      	nop
      }
      break;
 800af2e:	e004      	b.n	800af3a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800af30:	6839      	ldr	r1, [r7, #0]
 800af32:	6878      	ldr	r0, [r7, #4]
 800af34:	f000 fceb 	bl	800b90e <USBD_CtlError>
      break;
 800af38:	bf00      	nop
  }

  return ret;
 800af3a:	7bfb      	ldrb	r3, [r7, #15]
}
 800af3c:	4618      	mov	r0, r3
 800af3e:	3710      	adds	r7, #16
 800af40:	46bd      	mov	sp, r7
 800af42:	bd80      	pop	{r7, pc}

0800af44 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800af44:	b580      	push	{r7, lr}
 800af46:	b084      	sub	sp, #16
 800af48:	af00      	add	r7, sp, #0
 800af4a:	6078      	str	r0, [r7, #4]
 800af4c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800af4e:	2300      	movs	r3, #0
 800af50:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800af52:	683b      	ldr	r3, [r7, #0]
 800af54:	889b      	ldrh	r3, [r3, #4]
 800af56:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800af58:	683b      	ldr	r3, [r7, #0]
 800af5a:	781b      	ldrb	r3, [r3, #0]
 800af5c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800af60:	2b40      	cmp	r3, #64	; 0x40
 800af62:	d007      	beq.n	800af74 <USBD_StdEPReq+0x30>
 800af64:	2b40      	cmp	r3, #64	; 0x40
 800af66:	f200 817f 	bhi.w	800b268 <USBD_StdEPReq+0x324>
 800af6a:	2b00      	cmp	r3, #0
 800af6c:	d02a      	beq.n	800afc4 <USBD_StdEPReq+0x80>
 800af6e:	2b20      	cmp	r3, #32
 800af70:	f040 817a 	bne.w	800b268 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800af74:	7bbb      	ldrb	r3, [r7, #14]
 800af76:	4619      	mov	r1, r3
 800af78:	6878      	ldr	r0, [r7, #4]
 800af7a:	f7ff fe83 	bl	800ac84 <USBD_CoreFindEP>
 800af7e:	4603      	mov	r3, r0
 800af80:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800af82:	7b7b      	ldrb	r3, [r7, #13]
 800af84:	2bff      	cmp	r3, #255	; 0xff
 800af86:	f000 8174 	beq.w	800b272 <USBD_StdEPReq+0x32e>
 800af8a:	7b7b      	ldrb	r3, [r7, #13]
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	f040 8170 	bne.w	800b272 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800af92:	7b7a      	ldrb	r2, [r7, #13]
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800af9a:	7b7a      	ldrb	r2, [r7, #13]
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	32ae      	adds	r2, #174	; 0xae
 800afa0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800afa4:	689b      	ldr	r3, [r3, #8]
 800afa6:	2b00      	cmp	r3, #0
 800afa8:	f000 8163 	beq.w	800b272 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800afac:	7b7a      	ldrb	r2, [r7, #13]
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	32ae      	adds	r2, #174	; 0xae
 800afb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800afb6:	689b      	ldr	r3, [r3, #8]
 800afb8:	6839      	ldr	r1, [r7, #0]
 800afba:	6878      	ldr	r0, [r7, #4]
 800afbc:	4798      	blx	r3
 800afbe:	4603      	mov	r3, r0
 800afc0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800afc2:	e156      	b.n	800b272 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800afc4:	683b      	ldr	r3, [r7, #0]
 800afc6:	785b      	ldrb	r3, [r3, #1]
 800afc8:	2b03      	cmp	r3, #3
 800afca:	d008      	beq.n	800afde <USBD_StdEPReq+0x9a>
 800afcc:	2b03      	cmp	r3, #3
 800afce:	f300 8145 	bgt.w	800b25c <USBD_StdEPReq+0x318>
 800afd2:	2b00      	cmp	r3, #0
 800afd4:	f000 809b 	beq.w	800b10e <USBD_StdEPReq+0x1ca>
 800afd8:	2b01      	cmp	r3, #1
 800afda:	d03c      	beq.n	800b056 <USBD_StdEPReq+0x112>
 800afdc:	e13e      	b.n	800b25c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800afe4:	b2db      	uxtb	r3, r3
 800afe6:	2b02      	cmp	r3, #2
 800afe8:	d002      	beq.n	800aff0 <USBD_StdEPReq+0xac>
 800afea:	2b03      	cmp	r3, #3
 800afec:	d016      	beq.n	800b01c <USBD_StdEPReq+0xd8>
 800afee:	e02c      	b.n	800b04a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800aff0:	7bbb      	ldrb	r3, [r7, #14]
 800aff2:	2b00      	cmp	r3, #0
 800aff4:	d00d      	beq.n	800b012 <USBD_StdEPReq+0xce>
 800aff6:	7bbb      	ldrb	r3, [r7, #14]
 800aff8:	2b80      	cmp	r3, #128	; 0x80
 800affa:	d00a      	beq.n	800b012 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800affc:	7bbb      	ldrb	r3, [r7, #14]
 800affe:	4619      	mov	r1, r3
 800b000:	6878      	ldr	r0, [r7, #4]
 800b002:	f001 f94f 	bl	800c2a4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b006:	2180      	movs	r1, #128	; 0x80
 800b008:	6878      	ldr	r0, [r7, #4]
 800b00a:	f001 f94b 	bl	800c2a4 <USBD_LL_StallEP>
 800b00e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b010:	e020      	b.n	800b054 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800b012:	6839      	ldr	r1, [r7, #0]
 800b014:	6878      	ldr	r0, [r7, #4]
 800b016:	f000 fc7a 	bl	800b90e <USBD_CtlError>
              break;
 800b01a:	e01b      	b.n	800b054 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b01c:	683b      	ldr	r3, [r7, #0]
 800b01e:	885b      	ldrh	r3, [r3, #2]
 800b020:	2b00      	cmp	r3, #0
 800b022:	d10e      	bne.n	800b042 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800b024:	7bbb      	ldrb	r3, [r7, #14]
 800b026:	2b00      	cmp	r3, #0
 800b028:	d00b      	beq.n	800b042 <USBD_StdEPReq+0xfe>
 800b02a:	7bbb      	ldrb	r3, [r7, #14]
 800b02c:	2b80      	cmp	r3, #128	; 0x80
 800b02e:	d008      	beq.n	800b042 <USBD_StdEPReq+0xfe>
 800b030:	683b      	ldr	r3, [r7, #0]
 800b032:	88db      	ldrh	r3, [r3, #6]
 800b034:	2b00      	cmp	r3, #0
 800b036:	d104      	bne.n	800b042 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800b038:	7bbb      	ldrb	r3, [r7, #14]
 800b03a:	4619      	mov	r1, r3
 800b03c:	6878      	ldr	r0, [r7, #4]
 800b03e:	f001 f931 	bl	800c2a4 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800b042:	6878      	ldr	r0, [r7, #4]
 800b044:	f000 fd11 	bl	800ba6a <USBD_CtlSendStatus>

              break;
 800b048:	e004      	b.n	800b054 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800b04a:	6839      	ldr	r1, [r7, #0]
 800b04c:	6878      	ldr	r0, [r7, #4]
 800b04e:	f000 fc5e 	bl	800b90e <USBD_CtlError>
              break;
 800b052:	bf00      	nop
          }
          break;
 800b054:	e107      	b.n	800b266 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b05c:	b2db      	uxtb	r3, r3
 800b05e:	2b02      	cmp	r3, #2
 800b060:	d002      	beq.n	800b068 <USBD_StdEPReq+0x124>
 800b062:	2b03      	cmp	r3, #3
 800b064:	d016      	beq.n	800b094 <USBD_StdEPReq+0x150>
 800b066:	e04b      	b.n	800b100 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b068:	7bbb      	ldrb	r3, [r7, #14]
 800b06a:	2b00      	cmp	r3, #0
 800b06c:	d00d      	beq.n	800b08a <USBD_StdEPReq+0x146>
 800b06e:	7bbb      	ldrb	r3, [r7, #14]
 800b070:	2b80      	cmp	r3, #128	; 0x80
 800b072:	d00a      	beq.n	800b08a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800b074:	7bbb      	ldrb	r3, [r7, #14]
 800b076:	4619      	mov	r1, r3
 800b078:	6878      	ldr	r0, [r7, #4]
 800b07a:	f001 f913 	bl	800c2a4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b07e:	2180      	movs	r1, #128	; 0x80
 800b080:	6878      	ldr	r0, [r7, #4]
 800b082:	f001 f90f 	bl	800c2a4 <USBD_LL_StallEP>
 800b086:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b088:	e040      	b.n	800b10c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800b08a:	6839      	ldr	r1, [r7, #0]
 800b08c:	6878      	ldr	r0, [r7, #4]
 800b08e:	f000 fc3e 	bl	800b90e <USBD_CtlError>
              break;
 800b092:	e03b      	b.n	800b10c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b094:	683b      	ldr	r3, [r7, #0]
 800b096:	885b      	ldrh	r3, [r3, #2]
 800b098:	2b00      	cmp	r3, #0
 800b09a:	d136      	bne.n	800b10a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800b09c:	7bbb      	ldrb	r3, [r7, #14]
 800b09e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b0a2:	2b00      	cmp	r3, #0
 800b0a4:	d004      	beq.n	800b0b0 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800b0a6:	7bbb      	ldrb	r3, [r7, #14]
 800b0a8:	4619      	mov	r1, r3
 800b0aa:	6878      	ldr	r0, [r7, #4]
 800b0ac:	f001 f919 	bl	800c2e2 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800b0b0:	6878      	ldr	r0, [r7, #4]
 800b0b2:	f000 fcda 	bl	800ba6a <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800b0b6:	7bbb      	ldrb	r3, [r7, #14]
 800b0b8:	4619      	mov	r1, r3
 800b0ba:	6878      	ldr	r0, [r7, #4]
 800b0bc:	f7ff fde2 	bl	800ac84 <USBD_CoreFindEP>
 800b0c0:	4603      	mov	r3, r0
 800b0c2:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b0c4:	7b7b      	ldrb	r3, [r7, #13]
 800b0c6:	2bff      	cmp	r3, #255	; 0xff
 800b0c8:	d01f      	beq.n	800b10a <USBD_StdEPReq+0x1c6>
 800b0ca:	7b7b      	ldrb	r3, [r7, #13]
 800b0cc:	2b00      	cmp	r3, #0
 800b0ce:	d11c      	bne.n	800b10a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800b0d0:	7b7a      	ldrb	r2, [r7, #13]
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800b0d8:	7b7a      	ldrb	r2, [r7, #13]
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	32ae      	adds	r2, #174	; 0xae
 800b0de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b0e2:	689b      	ldr	r3, [r3, #8]
 800b0e4:	2b00      	cmp	r3, #0
 800b0e6:	d010      	beq.n	800b10a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800b0e8:	7b7a      	ldrb	r2, [r7, #13]
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	32ae      	adds	r2, #174	; 0xae
 800b0ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b0f2:	689b      	ldr	r3, [r3, #8]
 800b0f4:	6839      	ldr	r1, [r7, #0]
 800b0f6:	6878      	ldr	r0, [r7, #4]
 800b0f8:	4798      	blx	r3
 800b0fa:	4603      	mov	r3, r0
 800b0fc:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800b0fe:	e004      	b.n	800b10a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800b100:	6839      	ldr	r1, [r7, #0]
 800b102:	6878      	ldr	r0, [r7, #4]
 800b104:	f000 fc03 	bl	800b90e <USBD_CtlError>
              break;
 800b108:	e000      	b.n	800b10c <USBD_StdEPReq+0x1c8>
              break;
 800b10a:	bf00      	nop
          }
          break;
 800b10c:	e0ab      	b.n	800b266 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b114:	b2db      	uxtb	r3, r3
 800b116:	2b02      	cmp	r3, #2
 800b118:	d002      	beq.n	800b120 <USBD_StdEPReq+0x1dc>
 800b11a:	2b03      	cmp	r3, #3
 800b11c:	d032      	beq.n	800b184 <USBD_StdEPReq+0x240>
 800b11e:	e097      	b.n	800b250 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b120:	7bbb      	ldrb	r3, [r7, #14]
 800b122:	2b00      	cmp	r3, #0
 800b124:	d007      	beq.n	800b136 <USBD_StdEPReq+0x1f2>
 800b126:	7bbb      	ldrb	r3, [r7, #14]
 800b128:	2b80      	cmp	r3, #128	; 0x80
 800b12a:	d004      	beq.n	800b136 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800b12c:	6839      	ldr	r1, [r7, #0]
 800b12e:	6878      	ldr	r0, [r7, #4]
 800b130:	f000 fbed 	bl	800b90e <USBD_CtlError>
                break;
 800b134:	e091      	b.n	800b25a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b136:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b13a:	2b00      	cmp	r3, #0
 800b13c:	da0b      	bge.n	800b156 <USBD_StdEPReq+0x212>
 800b13e:	7bbb      	ldrb	r3, [r7, #14]
 800b140:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b144:	4613      	mov	r3, r2
 800b146:	009b      	lsls	r3, r3, #2
 800b148:	4413      	add	r3, r2
 800b14a:	009b      	lsls	r3, r3, #2
 800b14c:	3310      	adds	r3, #16
 800b14e:	687a      	ldr	r2, [r7, #4]
 800b150:	4413      	add	r3, r2
 800b152:	3304      	adds	r3, #4
 800b154:	e00b      	b.n	800b16e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b156:	7bbb      	ldrb	r3, [r7, #14]
 800b158:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b15c:	4613      	mov	r3, r2
 800b15e:	009b      	lsls	r3, r3, #2
 800b160:	4413      	add	r3, r2
 800b162:	009b      	lsls	r3, r3, #2
 800b164:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b168:	687a      	ldr	r2, [r7, #4]
 800b16a:	4413      	add	r3, r2
 800b16c:	3304      	adds	r3, #4
 800b16e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800b170:	68bb      	ldr	r3, [r7, #8]
 800b172:	2200      	movs	r2, #0
 800b174:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b176:	68bb      	ldr	r3, [r7, #8]
 800b178:	2202      	movs	r2, #2
 800b17a:	4619      	mov	r1, r3
 800b17c:	6878      	ldr	r0, [r7, #4]
 800b17e:	f000 fc37 	bl	800b9f0 <USBD_CtlSendData>
              break;
 800b182:	e06a      	b.n	800b25a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800b184:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b188:	2b00      	cmp	r3, #0
 800b18a:	da11      	bge.n	800b1b0 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800b18c:	7bbb      	ldrb	r3, [r7, #14]
 800b18e:	f003 020f 	and.w	r2, r3, #15
 800b192:	6879      	ldr	r1, [r7, #4]
 800b194:	4613      	mov	r3, r2
 800b196:	009b      	lsls	r3, r3, #2
 800b198:	4413      	add	r3, r2
 800b19a:	009b      	lsls	r3, r3, #2
 800b19c:	440b      	add	r3, r1
 800b19e:	3324      	adds	r3, #36	; 0x24
 800b1a0:	881b      	ldrh	r3, [r3, #0]
 800b1a2:	2b00      	cmp	r3, #0
 800b1a4:	d117      	bne.n	800b1d6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800b1a6:	6839      	ldr	r1, [r7, #0]
 800b1a8:	6878      	ldr	r0, [r7, #4]
 800b1aa:	f000 fbb0 	bl	800b90e <USBD_CtlError>
                  break;
 800b1ae:	e054      	b.n	800b25a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800b1b0:	7bbb      	ldrb	r3, [r7, #14]
 800b1b2:	f003 020f 	and.w	r2, r3, #15
 800b1b6:	6879      	ldr	r1, [r7, #4]
 800b1b8:	4613      	mov	r3, r2
 800b1ba:	009b      	lsls	r3, r3, #2
 800b1bc:	4413      	add	r3, r2
 800b1be:	009b      	lsls	r3, r3, #2
 800b1c0:	440b      	add	r3, r1
 800b1c2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800b1c6:	881b      	ldrh	r3, [r3, #0]
 800b1c8:	2b00      	cmp	r3, #0
 800b1ca:	d104      	bne.n	800b1d6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800b1cc:	6839      	ldr	r1, [r7, #0]
 800b1ce:	6878      	ldr	r0, [r7, #4]
 800b1d0:	f000 fb9d 	bl	800b90e <USBD_CtlError>
                  break;
 800b1d4:	e041      	b.n	800b25a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b1d6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b1da:	2b00      	cmp	r3, #0
 800b1dc:	da0b      	bge.n	800b1f6 <USBD_StdEPReq+0x2b2>
 800b1de:	7bbb      	ldrb	r3, [r7, #14]
 800b1e0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b1e4:	4613      	mov	r3, r2
 800b1e6:	009b      	lsls	r3, r3, #2
 800b1e8:	4413      	add	r3, r2
 800b1ea:	009b      	lsls	r3, r3, #2
 800b1ec:	3310      	adds	r3, #16
 800b1ee:	687a      	ldr	r2, [r7, #4]
 800b1f0:	4413      	add	r3, r2
 800b1f2:	3304      	adds	r3, #4
 800b1f4:	e00b      	b.n	800b20e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b1f6:	7bbb      	ldrb	r3, [r7, #14]
 800b1f8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b1fc:	4613      	mov	r3, r2
 800b1fe:	009b      	lsls	r3, r3, #2
 800b200:	4413      	add	r3, r2
 800b202:	009b      	lsls	r3, r3, #2
 800b204:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b208:	687a      	ldr	r2, [r7, #4]
 800b20a:	4413      	add	r3, r2
 800b20c:	3304      	adds	r3, #4
 800b20e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800b210:	7bbb      	ldrb	r3, [r7, #14]
 800b212:	2b00      	cmp	r3, #0
 800b214:	d002      	beq.n	800b21c <USBD_StdEPReq+0x2d8>
 800b216:	7bbb      	ldrb	r3, [r7, #14]
 800b218:	2b80      	cmp	r3, #128	; 0x80
 800b21a:	d103      	bne.n	800b224 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800b21c:	68bb      	ldr	r3, [r7, #8]
 800b21e:	2200      	movs	r2, #0
 800b220:	601a      	str	r2, [r3, #0]
 800b222:	e00e      	b.n	800b242 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800b224:	7bbb      	ldrb	r3, [r7, #14]
 800b226:	4619      	mov	r1, r3
 800b228:	6878      	ldr	r0, [r7, #4]
 800b22a:	f001 f879 	bl	800c320 <USBD_LL_IsStallEP>
 800b22e:	4603      	mov	r3, r0
 800b230:	2b00      	cmp	r3, #0
 800b232:	d003      	beq.n	800b23c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800b234:	68bb      	ldr	r3, [r7, #8]
 800b236:	2201      	movs	r2, #1
 800b238:	601a      	str	r2, [r3, #0]
 800b23a:	e002      	b.n	800b242 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800b23c:	68bb      	ldr	r3, [r7, #8]
 800b23e:	2200      	movs	r2, #0
 800b240:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b242:	68bb      	ldr	r3, [r7, #8]
 800b244:	2202      	movs	r2, #2
 800b246:	4619      	mov	r1, r3
 800b248:	6878      	ldr	r0, [r7, #4]
 800b24a:	f000 fbd1 	bl	800b9f0 <USBD_CtlSendData>
              break;
 800b24e:	e004      	b.n	800b25a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800b250:	6839      	ldr	r1, [r7, #0]
 800b252:	6878      	ldr	r0, [r7, #4]
 800b254:	f000 fb5b 	bl	800b90e <USBD_CtlError>
              break;
 800b258:	bf00      	nop
          }
          break;
 800b25a:	e004      	b.n	800b266 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800b25c:	6839      	ldr	r1, [r7, #0]
 800b25e:	6878      	ldr	r0, [r7, #4]
 800b260:	f000 fb55 	bl	800b90e <USBD_CtlError>
          break;
 800b264:	bf00      	nop
      }
      break;
 800b266:	e005      	b.n	800b274 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800b268:	6839      	ldr	r1, [r7, #0]
 800b26a:	6878      	ldr	r0, [r7, #4]
 800b26c:	f000 fb4f 	bl	800b90e <USBD_CtlError>
      break;
 800b270:	e000      	b.n	800b274 <USBD_StdEPReq+0x330>
      break;
 800b272:	bf00      	nop
  }

  return ret;
 800b274:	7bfb      	ldrb	r3, [r7, #15]
}
 800b276:	4618      	mov	r0, r3
 800b278:	3710      	adds	r7, #16
 800b27a:	46bd      	mov	sp, r7
 800b27c:	bd80      	pop	{r7, pc}
	...

0800b280 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b280:	b580      	push	{r7, lr}
 800b282:	b084      	sub	sp, #16
 800b284:	af00      	add	r7, sp, #0
 800b286:	6078      	str	r0, [r7, #4]
 800b288:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b28a:	2300      	movs	r3, #0
 800b28c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800b28e:	2300      	movs	r3, #0
 800b290:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800b292:	2300      	movs	r3, #0
 800b294:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800b296:	683b      	ldr	r3, [r7, #0]
 800b298:	885b      	ldrh	r3, [r3, #2]
 800b29a:	0a1b      	lsrs	r3, r3, #8
 800b29c:	b29b      	uxth	r3, r3
 800b29e:	3b01      	subs	r3, #1
 800b2a0:	2b06      	cmp	r3, #6
 800b2a2:	f200 8128 	bhi.w	800b4f6 <USBD_GetDescriptor+0x276>
 800b2a6:	a201      	add	r2, pc, #4	; (adr r2, 800b2ac <USBD_GetDescriptor+0x2c>)
 800b2a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b2ac:	0800b2c9 	.word	0x0800b2c9
 800b2b0:	0800b2e1 	.word	0x0800b2e1
 800b2b4:	0800b321 	.word	0x0800b321
 800b2b8:	0800b4f7 	.word	0x0800b4f7
 800b2bc:	0800b4f7 	.word	0x0800b4f7
 800b2c0:	0800b497 	.word	0x0800b497
 800b2c4:	0800b4c3 	.word	0x0800b4c3
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b2ce:	681b      	ldr	r3, [r3, #0]
 800b2d0:	687a      	ldr	r2, [r7, #4]
 800b2d2:	7c12      	ldrb	r2, [r2, #16]
 800b2d4:	f107 0108 	add.w	r1, r7, #8
 800b2d8:	4610      	mov	r0, r2
 800b2da:	4798      	blx	r3
 800b2dc:	60f8      	str	r0, [r7, #12]
      break;
 800b2de:	e112      	b.n	800b506 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	7c1b      	ldrb	r3, [r3, #16]
 800b2e4:	2b00      	cmp	r3, #0
 800b2e6:	d10d      	bne.n	800b304 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b2ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b2f0:	f107 0208 	add.w	r2, r7, #8
 800b2f4:	4610      	mov	r0, r2
 800b2f6:	4798      	blx	r3
 800b2f8:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b2fa:	68fb      	ldr	r3, [r7, #12]
 800b2fc:	3301      	adds	r3, #1
 800b2fe:	2202      	movs	r2, #2
 800b300:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800b302:	e100      	b.n	800b506 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b30a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b30c:	f107 0208 	add.w	r2, r7, #8
 800b310:	4610      	mov	r0, r2
 800b312:	4798      	blx	r3
 800b314:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b316:	68fb      	ldr	r3, [r7, #12]
 800b318:	3301      	adds	r3, #1
 800b31a:	2202      	movs	r2, #2
 800b31c:	701a      	strb	r2, [r3, #0]
      break;
 800b31e:	e0f2      	b.n	800b506 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800b320:	683b      	ldr	r3, [r7, #0]
 800b322:	885b      	ldrh	r3, [r3, #2]
 800b324:	b2db      	uxtb	r3, r3
 800b326:	2b05      	cmp	r3, #5
 800b328:	f200 80ac 	bhi.w	800b484 <USBD_GetDescriptor+0x204>
 800b32c:	a201      	add	r2, pc, #4	; (adr r2, 800b334 <USBD_GetDescriptor+0xb4>)
 800b32e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b332:	bf00      	nop
 800b334:	0800b34d 	.word	0x0800b34d
 800b338:	0800b381 	.word	0x0800b381
 800b33c:	0800b3b5 	.word	0x0800b3b5
 800b340:	0800b3e9 	.word	0x0800b3e9
 800b344:	0800b41d 	.word	0x0800b41d
 800b348:	0800b451 	.word	0x0800b451
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b352:	685b      	ldr	r3, [r3, #4]
 800b354:	2b00      	cmp	r3, #0
 800b356:	d00b      	beq.n	800b370 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b35e:	685b      	ldr	r3, [r3, #4]
 800b360:	687a      	ldr	r2, [r7, #4]
 800b362:	7c12      	ldrb	r2, [r2, #16]
 800b364:	f107 0108 	add.w	r1, r7, #8
 800b368:	4610      	mov	r0, r2
 800b36a:	4798      	blx	r3
 800b36c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b36e:	e091      	b.n	800b494 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b370:	6839      	ldr	r1, [r7, #0]
 800b372:	6878      	ldr	r0, [r7, #4]
 800b374:	f000 facb 	bl	800b90e <USBD_CtlError>
            err++;
 800b378:	7afb      	ldrb	r3, [r7, #11]
 800b37a:	3301      	adds	r3, #1
 800b37c:	72fb      	strb	r3, [r7, #11]
          break;
 800b37e:	e089      	b.n	800b494 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b386:	689b      	ldr	r3, [r3, #8]
 800b388:	2b00      	cmp	r3, #0
 800b38a:	d00b      	beq.n	800b3a4 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b392:	689b      	ldr	r3, [r3, #8]
 800b394:	687a      	ldr	r2, [r7, #4]
 800b396:	7c12      	ldrb	r2, [r2, #16]
 800b398:	f107 0108 	add.w	r1, r7, #8
 800b39c:	4610      	mov	r0, r2
 800b39e:	4798      	blx	r3
 800b3a0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b3a2:	e077      	b.n	800b494 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b3a4:	6839      	ldr	r1, [r7, #0]
 800b3a6:	6878      	ldr	r0, [r7, #4]
 800b3a8:	f000 fab1 	bl	800b90e <USBD_CtlError>
            err++;
 800b3ac:	7afb      	ldrb	r3, [r7, #11]
 800b3ae:	3301      	adds	r3, #1
 800b3b0:	72fb      	strb	r3, [r7, #11]
          break;
 800b3b2:	e06f      	b.n	800b494 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b3ba:	68db      	ldr	r3, [r3, #12]
 800b3bc:	2b00      	cmp	r3, #0
 800b3be:	d00b      	beq.n	800b3d8 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b3c6:	68db      	ldr	r3, [r3, #12]
 800b3c8:	687a      	ldr	r2, [r7, #4]
 800b3ca:	7c12      	ldrb	r2, [r2, #16]
 800b3cc:	f107 0108 	add.w	r1, r7, #8
 800b3d0:	4610      	mov	r0, r2
 800b3d2:	4798      	blx	r3
 800b3d4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b3d6:	e05d      	b.n	800b494 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b3d8:	6839      	ldr	r1, [r7, #0]
 800b3da:	6878      	ldr	r0, [r7, #4]
 800b3dc:	f000 fa97 	bl	800b90e <USBD_CtlError>
            err++;
 800b3e0:	7afb      	ldrb	r3, [r7, #11]
 800b3e2:	3301      	adds	r3, #1
 800b3e4:	72fb      	strb	r3, [r7, #11]
          break;
 800b3e6:	e055      	b.n	800b494 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b3ee:	691b      	ldr	r3, [r3, #16]
 800b3f0:	2b00      	cmp	r3, #0
 800b3f2:	d00b      	beq.n	800b40c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b3fa:	691b      	ldr	r3, [r3, #16]
 800b3fc:	687a      	ldr	r2, [r7, #4]
 800b3fe:	7c12      	ldrb	r2, [r2, #16]
 800b400:	f107 0108 	add.w	r1, r7, #8
 800b404:	4610      	mov	r0, r2
 800b406:	4798      	blx	r3
 800b408:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b40a:	e043      	b.n	800b494 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b40c:	6839      	ldr	r1, [r7, #0]
 800b40e:	6878      	ldr	r0, [r7, #4]
 800b410:	f000 fa7d 	bl	800b90e <USBD_CtlError>
            err++;
 800b414:	7afb      	ldrb	r3, [r7, #11]
 800b416:	3301      	adds	r3, #1
 800b418:	72fb      	strb	r3, [r7, #11]
          break;
 800b41a:	e03b      	b.n	800b494 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b422:	695b      	ldr	r3, [r3, #20]
 800b424:	2b00      	cmp	r3, #0
 800b426:	d00b      	beq.n	800b440 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b42e:	695b      	ldr	r3, [r3, #20]
 800b430:	687a      	ldr	r2, [r7, #4]
 800b432:	7c12      	ldrb	r2, [r2, #16]
 800b434:	f107 0108 	add.w	r1, r7, #8
 800b438:	4610      	mov	r0, r2
 800b43a:	4798      	blx	r3
 800b43c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b43e:	e029      	b.n	800b494 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b440:	6839      	ldr	r1, [r7, #0]
 800b442:	6878      	ldr	r0, [r7, #4]
 800b444:	f000 fa63 	bl	800b90e <USBD_CtlError>
            err++;
 800b448:	7afb      	ldrb	r3, [r7, #11]
 800b44a:	3301      	adds	r3, #1
 800b44c:	72fb      	strb	r3, [r7, #11]
          break;
 800b44e:	e021      	b.n	800b494 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b456:	699b      	ldr	r3, [r3, #24]
 800b458:	2b00      	cmp	r3, #0
 800b45a:	d00b      	beq.n	800b474 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b462:	699b      	ldr	r3, [r3, #24]
 800b464:	687a      	ldr	r2, [r7, #4]
 800b466:	7c12      	ldrb	r2, [r2, #16]
 800b468:	f107 0108 	add.w	r1, r7, #8
 800b46c:	4610      	mov	r0, r2
 800b46e:	4798      	blx	r3
 800b470:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b472:	e00f      	b.n	800b494 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b474:	6839      	ldr	r1, [r7, #0]
 800b476:	6878      	ldr	r0, [r7, #4]
 800b478:	f000 fa49 	bl	800b90e <USBD_CtlError>
            err++;
 800b47c:	7afb      	ldrb	r3, [r7, #11]
 800b47e:	3301      	adds	r3, #1
 800b480:	72fb      	strb	r3, [r7, #11]
          break;
 800b482:	e007      	b.n	800b494 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800b484:	6839      	ldr	r1, [r7, #0]
 800b486:	6878      	ldr	r0, [r7, #4]
 800b488:	f000 fa41 	bl	800b90e <USBD_CtlError>
          err++;
 800b48c:	7afb      	ldrb	r3, [r7, #11]
 800b48e:	3301      	adds	r3, #1
 800b490:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800b492:	bf00      	nop
      }
      break;
 800b494:	e037      	b.n	800b506 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	7c1b      	ldrb	r3, [r3, #16]
 800b49a:	2b00      	cmp	r3, #0
 800b49c:	d109      	bne.n	800b4b2 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b4a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b4a6:	f107 0208 	add.w	r2, r7, #8
 800b4aa:	4610      	mov	r0, r2
 800b4ac:	4798      	blx	r3
 800b4ae:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b4b0:	e029      	b.n	800b506 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800b4b2:	6839      	ldr	r1, [r7, #0]
 800b4b4:	6878      	ldr	r0, [r7, #4]
 800b4b6:	f000 fa2a 	bl	800b90e <USBD_CtlError>
        err++;
 800b4ba:	7afb      	ldrb	r3, [r7, #11]
 800b4bc:	3301      	adds	r3, #1
 800b4be:	72fb      	strb	r3, [r7, #11]
      break;
 800b4c0:	e021      	b.n	800b506 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	7c1b      	ldrb	r3, [r3, #16]
 800b4c6:	2b00      	cmp	r3, #0
 800b4c8:	d10d      	bne.n	800b4e6 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b4d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b4d2:	f107 0208 	add.w	r2, r7, #8
 800b4d6:	4610      	mov	r0, r2
 800b4d8:	4798      	blx	r3
 800b4da:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800b4dc:	68fb      	ldr	r3, [r7, #12]
 800b4de:	3301      	adds	r3, #1
 800b4e0:	2207      	movs	r2, #7
 800b4e2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b4e4:	e00f      	b.n	800b506 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800b4e6:	6839      	ldr	r1, [r7, #0]
 800b4e8:	6878      	ldr	r0, [r7, #4]
 800b4ea:	f000 fa10 	bl	800b90e <USBD_CtlError>
        err++;
 800b4ee:	7afb      	ldrb	r3, [r7, #11]
 800b4f0:	3301      	adds	r3, #1
 800b4f2:	72fb      	strb	r3, [r7, #11]
      break;
 800b4f4:	e007      	b.n	800b506 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800b4f6:	6839      	ldr	r1, [r7, #0]
 800b4f8:	6878      	ldr	r0, [r7, #4]
 800b4fa:	f000 fa08 	bl	800b90e <USBD_CtlError>
      err++;
 800b4fe:	7afb      	ldrb	r3, [r7, #11]
 800b500:	3301      	adds	r3, #1
 800b502:	72fb      	strb	r3, [r7, #11]
      break;
 800b504:	bf00      	nop
  }

  if (err != 0U)
 800b506:	7afb      	ldrb	r3, [r7, #11]
 800b508:	2b00      	cmp	r3, #0
 800b50a:	d11e      	bne.n	800b54a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800b50c:	683b      	ldr	r3, [r7, #0]
 800b50e:	88db      	ldrh	r3, [r3, #6]
 800b510:	2b00      	cmp	r3, #0
 800b512:	d016      	beq.n	800b542 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800b514:	893b      	ldrh	r3, [r7, #8]
 800b516:	2b00      	cmp	r3, #0
 800b518:	d00e      	beq.n	800b538 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800b51a:	683b      	ldr	r3, [r7, #0]
 800b51c:	88da      	ldrh	r2, [r3, #6]
 800b51e:	893b      	ldrh	r3, [r7, #8]
 800b520:	4293      	cmp	r3, r2
 800b522:	bf28      	it	cs
 800b524:	4613      	movcs	r3, r2
 800b526:	b29b      	uxth	r3, r3
 800b528:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800b52a:	893b      	ldrh	r3, [r7, #8]
 800b52c:	461a      	mov	r2, r3
 800b52e:	68f9      	ldr	r1, [r7, #12]
 800b530:	6878      	ldr	r0, [r7, #4]
 800b532:	f000 fa5d 	bl	800b9f0 <USBD_CtlSendData>
 800b536:	e009      	b.n	800b54c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800b538:	6839      	ldr	r1, [r7, #0]
 800b53a:	6878      	ldr	r0, [r7, #4]
 800b53c:	f000 f9e7 	bl	800b90e <USBD_CtlError>
 800b540:	e004      	b.n	800b54c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800b542:	6878      	ldr	r0, [r7, #4]
 800b544:	f000 fa91 	bl	800ba6a <USBD_CtlSendStatus>
 800b548:	e000      	b.n	800b54c <USBD_GetDescriptor+0x2cc>
    return;
 800b54a:	bf00      	nop
  }
}
 800b54c:	3710      	adds	r7, #16
 800b54e:	46bd      	mov	sp, r7
 800b550:	bd80      	pop	{r7, pc}
 800b552:	bf00      	nop

0800b554 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b554:	b580      	push	{r7, lr}
 800b556:	b084      	sub	sp, #16
 800b558:	af00      	add	r7, sp, #0
 800b55a:	6078      	str	r0, [r7, #4]
 800b55c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800b55e:	683b      	ldr	r3, [r7, #0]
 800b560:	889b      	ldrh	r3, [r3, #4]
 800b562:	2b00      	cmp	r3, #0
 800b564:	d131      	bne.n	800b5ca <USBD_SetAddress+0x76>
 800b566:	683b      	ldr	r3, [r7, #0]
 800b568:	88db      	ldrh	r3, [r3, #6]
 800b56a:	2b00      	cmp	r3, #0
 800b56c:	d12d      	bne.n	800b5ca <USBD_SetAddress+0x76>
 800b56e:	683b      	ldr	r3, [r7, #0]
 800b570:	885b      	ldrh	r3, [r3, #2]
 800b572:	2b7f      	cmp	r3, #127	; 0x7f
 800b574:	d829      	bhi.n	800b5ca <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800b576:	683b      	ldr	r3, [r7, #0]
 800b578:	885b      	ldrh	r3, [r3, #2]
 800b57a:	b2db      	uxtb	r3, r3
 800b57c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b580:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b588:	b2db      	uxtb	r3, r3
 800b58a:	2b03      	cmp	r3, #3
 800b58c:	d104      	bne.n	800b598 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800b58e:	6839      	ldr	r1, [r7, #0]
 800b590:	6878      	ldr	r0, [r7, #4]
 800b592:	f000 f9bc 	bl	800b90e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b596:	e01d      	b.n	800b5d4 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	7bfa      	ldrb	r2, [r7, #15]
 800b59c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800b5a0:	7bfb      	ldrb	r3, [r7, #15]
 800b5a2:	4619      	mov	r1, r3
 800b5a4:	6878      	ldr	r0, [r7, #4]
 800b5a6:	f000 fee7 	bl	800c378 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800b5aa:	6878      	ldr	r0, [r7, #4]
 800b5ac:	f000 fa5d 	bl	800ba6a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800b5b0:	7bfb      	ldrb	r3, [r7, #15]
 800b5b2:	2b00      	cmp	r3, #0
 800b5b4:	d004      	beq.n	800b5c0 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	2202      	movs	r2, #2
 800b5ba:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b5be:	e009      	b.n	800b5d4 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	2201      	movs	r2, #1
 800b5c4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b5c8:	e004      	b.n	800b5d4 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800b5ca:	6839      	ldr	r1, [r7, #0]
 800b5cc:	6878      	ldr	r0, [r7, #4]
 800b5ce:	f000 f99e 	bl	800b90e <USBD_CtlError>
  }
}
 800b5d2:	bf00      	nop
 800b5d4:	bf00      	nop
 800b5d6:	3710      	adds	r7, #16
 800b5d8:	46bd      	mov	sp, r7
 800b5da:	bd80      	pop	{r7, pc}

0800b5dc <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b5dc:	b580      	push	{r7, lr}
 800b5de:	b084      	sub	sp, #16
 800b5e0:	af00      	add	r7, sp, #0
 800b5e2:	6078      	str	r0, [r7, #4]
 800b5e4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b5e6:	2300      	movs	r3, #0
 800b5e8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800b5ea:	683b      	ldr	r3, [r7, #0]
 800b5ec:	885b      	ldrh	r3, [r3, #2]
 800b5ee:	b2da      	uxtb	r2, r3
 800b5f0:	4b4e      	ldr	r3, [pc, #312]	; (800b72c <USBD_SetConfig+0x150>)
 800b5f2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800b5f4:	4b4d      	ldr	r3, [pc, #308]	; (800b72c <USBD_SetConfig+0x150>)
 800b5f6:	781b      	ldrb	r3, [r3, #0]
 800b5f8:	2b01      	cmp	r3, #1
 800b5fa:	d905      	bls.n	800b608 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800b5fc:	6839      	ldr	r1, [r7, #0]
 800b5fe:	6878      	ldr	r0, [r7, #4]
 800b600:	f000 f985 	bl	800b90e <USBD_CtlError>
    return USBD_FAIL;
 800b604:	2303      	movs	r3, #3
 800b606:	e08c      	b.n	800b722 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b60e:	b2db      	uxtb	r3, r3
 800b610:	2b02      	cmp	r3, #2
 800b612:	d002      	beq.n	800b61a <USBD_SetConfig+0x3e>
 800b614:	2b03      	cmp	r3, #3
 800b616:	d029      	beq.n	800b66c <USBD_SetConfig+0x90>
 800b618:	e075      	b.n	800b706 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800b61a:	4b44      	ldr	r3, [pc, #272]	; (800b72c <USBD_SetConfig+0x150>)
 800b61c:	781b      	ldrb	r3, [r3, #0]
 800b61e:	2b00      	cmp	r3, #0
 800b620:	d020      	beq.n	800b664 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800b622:	4b42      	ldr	r3, [pc, #264]	; (800b72c <USBD_SetConfig+0x150>)
 800b624:	781b      	ldrb	r3, [r3, #0]
 800b626:	461a      	mov	r2, r3
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b62c:	4b3f      	ldr	r3, [pc, #252]	; (800b72c <USBD_SetConfig+0x150>)
 800b62e:	781b      	ldrb	r3, [r3, #0]
 800b630:	4619      	mov	r1, r3
 800b632:	6878      	ldr	r0, [r7, #4]
 800b634:	f7fe ffe7 	bl	800a606 <USBD_SetClassConfig>
 800b638:	4603      	mov	r3, r0
 800b63a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800b63c:	7bfb      	ldrb	r3, [r7, #15]
 800b63e:	2b00      	cmp	r3, #0
 800b640:	d008      	beq.n	800b654 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800b642:	6839      	ldr	r1, [r7, #0]
 800b644:	6878      	ldr	r0, [r7, #4]
 800b646:	f000 f962 	bl	800b90e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	2202      	movs	r2, #2
 800b64e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b652:	e065      	b.n	800b720 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800b654:	6878      	ldr	r0, [r7, #4]
 800b656:	f000 fa08 	bl	800ba6a <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	2203      	movs	r2, #3
 800b65e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800b662:	e05d      	b.n	800b720 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800b664:	6878      	ldr	r0, [r7, #4]
 800b666:	f000 fa00 	bl	800ba6a <USBD_CtlSendStatus>
      break;
 800b66a:	e059      	b.n	800b720 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800b66c:	4b2f      	ldr	r3, [pc, #188]	; (800b72c <USBD_SetConfig+0x150>)
 800b66e:	781b      	ldrb	r3, [r3, #0]
 800b670:	2b00      	cmp	r3, #0
 800b672:	d112      	bne.n	800b69a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	2202      	movs	r2, #2
 800b678:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800b67c:	4b2b      	ldr	r3, [pc, #172]	; (800b72c <USBD_SetConfig+0x150>)
 800b67e:	781b      	ldrb	r3, [r3, #0]
 800b680:	461a      	mov	r2, r3
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b686:	4b29      	ldr	r3, [pc, #164]	; (800b72c <USBD_SetConfig+0x150>)
 800b688:	781b      	ldrb	r3, [r3, #0]
 800b68a:	4619      	mov	r1, r3
 800b68c:	6878      	ldr	r0, [r7, #4]
 800b68e:	f7fe ffd6 	bl	800a63e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800b692:	6878      	ldr	r0, [r7, #4]
 800b694:	f000 f9e9 	bl	800ba6a <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b698:	e042      	b.n	800b720 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800b69a:	4b24      	ldr	r3, [pc, #144]	; (800b72c <USBD_SetConfig+0x150>)
 800b69c:	781b      	ldrb	r3, [r3, #0]
 800b69e:	461a      	mov	r2, r3
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	685b      	ldr	r3, [r3, #4]
 800b6a4:	429a      	cmp	r2, r3
 800b6a6:	d02a      	beq.n	800b6fe <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	685b      	ldr	r3, [r3, #4]
 800b6ac:	b2db      	uxtb	r3, r3
 800b6ae:	4619      	mov	r1, r3
 800b6b0:	6878      	ldr	r0, [r7, #4]
 800b6b2:	f7fe ffc4 	bl	800a63e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800b6b6:	4b1d      	ldr	r3, [pc, #116]	; (800b72c <USBD_SetConfig+0x150>)
 800b6b8:	781b      	ldrb	r3, [r3, #0]
 800b6ba:	461a      	mov	r2, r3
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b6c0:	4b1a      	ldr	r3, [pc, #104]	; (800b72c <USBD_SetConfig+0x150>)
 800b6c2:	781b      	ldrb	r3, [r3, #0]
 800b6c4:	4619      	mov	r1, r3
 800b6c6:	6878      	ldr	r0, [r7, #4]
 800b6c8:	f7fe ff9d 	bl	800a606 <USBD_SetClassConfig>
 800b6cc:	4603      	mov	r3, r0
 800b6ce:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800b6d0:	7bfb      	ldrb	r3, [r7, #15]
 800b6d2:	2b00      	cmp	r3, #0
 800b6d4:	d00f      	beq.n	800b6f6 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800b6d6:	6839      	ldr	r1, [r7, #0]
 800b6d8:	6878      	ldr	r0, [r7, #4]
 800b6da:	f000 f918 	bl	800b90e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	685b      	ldr	r3, [r3, #4]
 800b6e2:	b2db      	uxtb	r3, r3
 800b6e4:	4619      	mov	r1, r3
 800b6e6:	6878      	ldr	r0, [r7, #4]
 800b6e8:	f7fe ffa9 	bl	800a63e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	2202      	movs	r2, #2
 800b6f0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800b6f4:	e014      	b.n	800b720 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800b6f6:	6878      	ldr	r0, [r7, #4]
 800b6f8:	f000 f9b7 	bl	800ba6a <USBD_CtlSendStatus>
      break;
 800b6fc:	e010      	b.n	800b720 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800b6fe:	6878      	ldr	r0, [r7, #4]
 800b700:	f000 f9b3 	bl	800ba6a <USBD_CtlSendStatus>
      break;
 800b704:	e00c      	b.n	800b720 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800b706:	6839      	ldr	r1, [r7, #0]
 800b708:	6878      	ldr	r0, [r7, #4]
 800b70a:	f000 f900 	bl	800b90e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b70e:	4b07      	ldr	r3, [pc, #28]	; (800b72c <USBD_SetConfig+0x150>)
 800b710:	781b      	ldrb	r3, [r3, #0]
 800b712:	4619      	mov	r1, r3
 800b714:	6878      	ldr	r0, [r7, #4]
 800b716:	f7fe ff92 	bl	800a63e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800b71a:	2303      	movs	r3, #3
 800b71c:	73fb      	strb	r3, [r7, #15]
      break;
 800b71e:	bf00      	nop
  }

  return ret;
 800b720:	7bfb      	ldrb	r3, [r7, #15]
}
 800b722:	4618      	mov	r0, r3
 800b724:	3710      	adds	r7, #16
 800b726:	46bd      	mov	sp, r7
 800b728:	bd80      	pop	{r7, pc}
 800b72a:	bf00      	nop
 800b72c:	20001280 	.word	0x20001280

0800b730 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b730:	b580      	push	{r7, lr}
 800b732:	b082      	sub	sp, #8
 800b734:	af00      	add	r7, sp, #0
 800b736:	6078      	str	r0, [r7, #4]
 800b738:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800b73a:	683b      	ldr	r3, [r7, #0]
 800b73c:	88db      	ldrh	r3, [r3, #6]
 800b73e:	2b01      	cmp	r3, #1
 800b740:	d004      	beq.n	800b74c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800b742:	6839      	ldr	r1, [r7, #0]
 800b744:	6878      	ldr	r0, [r7, #4]
 800b746:	f000 f8e2 	bl	800b90e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800b74a:	e023      	b.n	800b794 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b752:	b2db      	uxtb	r3, r3
 800b754:	2b02      	cmp	r3, #2
 800b756:	dc02      	bgt.n	800b75e <USBD_GetConfig+0x2e>
 800b758:	2b00      	cmp	r3, #0
 800b75a:	dc03      	bgt.n	800b764 <USBD_GetConfig+0x34>
 800b75c:	e015      	b.n	800b78a <USBD_GetConfig+0x5a>
 800b75e:	2b03      	cmp	r3, #3
 800b760:	d00b      	beq.n	800b77a <USBD_GetConfig+0x4a>
 800b762:	e012      	b.n	800b78a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	2200      	movs	r2, #0
 800b768:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	3308      	adds	r3, #8
 800b76e:	2201      	movs	r2, #1
 800b770:	4619      	mov	r1, r3
 800b772:	6878      	ldr	r0, [r7, #4]
 800b774:	f000 f93c 	bl	800b9f0 <USBD_CtlSendData>
        break;
 800b778:	e00c      	b.n	800b794 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	3304      	adds	r3, #4
 800b77e:	2201      	movs	r2, #1
 800b780:	4619      	mov	r1, r3
 800b782:	6878      	ldr	r0, [r7, #4]
 800b784:	f000 f934 	bl	800b9f0 <USBD_CtlSendData>
        break;
 800b788:	e004      	b.n	800b794 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800b78a:	6839      	ldr	r1, [r7, #0]
 800b78c:	6878      	ldr	r0, [r7, #4]
 800b78e:	f000 f8be 	bl	800b90e <USBD_CtlError>
        break;
 800b792:	bf00      	nop
}
 800b794:	bf00      	nop
 800b796:	3708      	adds	r7, #8
 800b798:	46bd      	mov	sp, r7
 800b79a:	bd80      	pop	{r7, pc}

0800b79c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b79c:	b580      	push	{r7, lr}
 800b79e:	b082      	sub	sp, #8
 800b7a0:	af00      	add	r7, sp, #0
 800b7a2:	6078      	str	r0, [r7, #4]
 800b7a4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b7ac:	b2db      	uxtb	r3, r3
 800b7ae:	3b01      	subs	r3, #1
 800b7b0:	2b02      	cmp	r3, #2
 800b7b2:	d81e      	bhi.n	800b7f2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800b7b4:	683b      	ldr	r3, [r7, #0]
 800b7b6:	88db      	ldrh	r3, [r3, #6]
 800b7b8:	2b02      	cmp	r3, #2
 800b7ba:	d004      	beq.n	800b7c6 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800b7bc:	6839      	ldr	r1, [r7, #0]
 800b7be:	6878      	ldr	r0, [r7, #4]
 800b7c0:	f000 f8a5 	bl	800b90e <USBD_CtlError>
        break;
 800b7c4:	e01a      	b.n	800b7fc <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	2201      	movs	r2, #1
 800b7ca:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800b7d2:	2b00      	cmp	r3, #0
 800b7d4:	d005      	beq.n	800b7e2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	68db      	ldr	r3, [r3, #12]
 800b7da:	f043 0202 	orr.w	r2, r3, #2
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	330c      	adds	r3, #12
 800b7e6:	2202      	movs	r2, #2
 800b7e8:	4619      	mov	r1, r3
 800b7ea:	6878      	ldr	r0, [r7, #4]
 800b7ec:	f000 f900 	bl	800b9f0 <USBD_CtlSendData>
      break;
 800b7f0:	e004      	b.n	800b7fc <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800b7f2:	6839      	ldr	r1, [r7, #0]
 800b7f4:	6878      	ldr	r0, [r7, #4]
 800b7f6:	f000 f88a 	bl	800b90e <USBD_CtlError>
      break;
 800b7fa:	bf00      	nop
  }
}
 800b7fc:	bf00      	nop
 800b7fe:	3708      	adds	r7, #8
 800b800:	46bd      	mov	sp, r7
 800b802:	bd80      	pop	{r7, pc}

0800b804 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b804:	b580      	push	{r7, lr}
 800b806:	b082      	sub	sp, #8
 800b808:	af00      	add	r7, sp, #0
 800b80a:	6078      	str	r0, [r7, #4]
 800b80c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b80e:	683b      	ldr	r3, [r7, #0]
 800b810:	885b      	ldrh	r3, [r3, #2]
 800b812:	2b01      	cmp	r3, #1
 800b814:	d107      	bne.n	800b826 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	2201      	movs	r2, #1
 800b81a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800b81e:	6878      	ldr	r0, [r7, #4]
 800b820:	f000 f923 	bl	800ba6a <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800b824:	e013      	b.n	800b84e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800b826:	683b      	ldr	r3, [r7, #0]
 800b828:	885b      	ldrh	r3, [r3, #2]
 800b82a:	2b02      	cmp	r3, #2
 800b82c:	d10b      	bne.n	800b846 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800b82e:	683b      	ldr	r3, [r7, #0]
 800b830:	889b      	ldrh	r3, [r3, #4]
 800b832:	0a1b      	lsrs	r3, r3, #8
 800b834:	b29b      	uxth	r3, r3
 800b836:	b2da      	uxtb	r2, r3
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800b83e:	6878      	ldr	r0, [r7, #4]
 800b840:	f000 f913 	bl	800ba6a <USBD_CtlSendStatus>
}
 800b844:	e003      	b.n	800b84e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800b846:	6839      	ldr	r1, [r7, #0]
 800b848:	6878      	ldr	r0, [r7, #4]
 800b84a:	f000 f860 	bl	800b90e <USBD_CtlError>
}
 800b84e:	bf00      	nop
 800b850:	3708      	adds	r7, #8
 800b852:	46bd      	mov	sp, r7
 800b854:	bd80      	pop	{r7, pc}

0800b856 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b856:	b580      	push	{r7, lr}
 800b858:	b082      	sub	sp, #8
 800b85a:	af00      	add	r7, sp, #0
 800b85c:	6078      	str	r0, [r7, #4]
 800b85e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b866:	b2db      	uxtb	r3, r3
 800b868:	3b01      	subs	r3, #1
 800b86a:	2b02      	cmp	r3, #2
 800b86c:	d80b      	bhi.n	800b886 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b86e:	683b      	ldr	r3, [r7, #0]
 800b870:	885b      	ldrh	r3, [r3, #2]
 800b872:	2b01      	cmp	r3, #1
 800b874:	d10c      	bne.n	800b890 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	2200      	movs	r2, #0
 800b87a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800b87e:	6878      	ldr	r0, [r7, #4]
 800b880:	f000 f8f3 	bl	800ba6a <USBD_CtlSendStatus>
      }
      break;
 800b884:	e004      	b.n	800b890 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800b886:	6839      	ldr	r1, [r7, #0]
 800b888:	6878      	ldr	r0, [r7, #4]
 800b88a:	f000 f840 	bl	800b90e <USBD_CtlError>
      break;
 800b88e:	e000      	b.n	800b892 <USBD_ClrFeature+0x3c>
      break;
 800b890:	bf00      	nop
  }
}
 800b892:	bf00      	nop
 800b894:	3708      	adds	r7, #8
 800b896:	46bd      	mov	sp, r7
 800b898:	bd80      	pop	{r7, pc}

0800b89a <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800b89a:	b580      	push	{r7, lr}
 800b89c:	b084      	sub	sp, #16
 800b89e:	af00      	add	r7, sp, #0
 800b8a0:	6078      	str	r0, [r7, #4]
 800b8a2:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800b8a4:	683b      	ldr	r3, [r7, #0]
 800b8a6:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800b8a8:	68fb      	ldr	r3, [r7, #12]
 800b8aa:	781a      	ldrb	r2, [r3, #0]
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800b8b0:	68fb      	ldr	r3, [r7, #12]
 800b8b2:	3301      	adds	r3, #1
 800b8b4:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800b8b6:	68fb      	ldr	r3, [r7, #12]
 800b8b8:	781a      	ldrb	r2, [r3, #0]
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800b8be:	68fb      	ldr	r3, [r7, #12]
 800b8c0:	3301      	adds	r3, #1
 800b8c2:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800b8c4:	68f8      	ldr	r0, [r7, #12]
 800b8c6:	f7ff fa41 	bl	800ad4c <SWAPBYTE>
 800b8ca:	4603      	mov	r3, r0
 800b8cc:	461a      	mov	r2, r3
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800b8d2:	68fb      	ldr	r3, [r7, #12]
 800b8d4:	3301      	adds	r3, #1
 800b8d6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b8d8:	68fb      	ldr	r3, [r7, #12]
 800b8da:	3301      	adds	r3, #1
 800b8dc:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800b8de:	68f8      	ldr	r0, [r7, #12]
 800b8e0:	f7ff fa34 	bl	800ad4c <SWAPBYTE>
 800b8e4:	4603      	mov	r3, r0
 800b8e6:	461a      	mov	r2, r3
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800b8ec:	68fb      	ldr	r3, [r7, #12]
 800b8ee:	3301      	adds	r3, #1
 800b8f0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b8f2:	68fb      	ldr	r3, [r7, #12]
 800b8f4:	3301      	adds	r3, #1
 800b8f6:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800b8f8:	68f8      	ldr	r0, [r7, #12]
 800b8fa:	f7ff fa27 	bl	800ad4c <SWAPBYTE>
 800b8fe:	4603      	mov	r3, r0
 800b900:	461a      	mov	r2, r3
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	80da      	strh	r2, [r3, #6]
}
 800b906:	bf00      	nop
 800b908:	3710      	adds	r7, #16
 800b90a:	46bd      	mov	sp, r7
 800b90c:	bd80      	pop	{r7, pc}

0800b90e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b90e:	b580      	push	{r7, lr}
 800b910:	b082      	sub	sp, #8
 800b912:	af00      	add	r7, sp, #0
 800b914:	6078      	str	r0, [r7, #4]
 800b916:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800b918:	2180      	movs	r1, #128	; 0x80
 800b91a:	6878      	ldr	r0, [r7, #4]
 800b91c:	f000 fcc2 	bl	800c2a4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800b920:	2100      	movs	r1, #0
 800b922:	6878      	ldr	r0, [r7, #4]
 800b924:	f000 fcbe 	bl	800c2a4 <USBD_LL_StallEP>
}
 800b928:	bf00      	nop
 800b92a:	3708      	adds	r7, #8
 800b92c:	46bd      	mov	sp, r7
 800b92e:	bd80      	pop	{r7, pc}

0800b930 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800b930:	b580      	push	{r7, lr}
 800b932:	b086      	sub	sp, #24
 800b934:	af00      	add	r7, sp, #0
 800b936:	60f8      	str	r0, [r7, #12]
 800b938:	60b9      	str	r1, [r7, #8]
 800b93a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800b93c:	2300      	movs	r3, #0
 800b93e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800b940:	68fb      	ldr	r3, [r7, #12]
 800b942:	2b00      	cmp	r3, #0
 800b944:	d036      	beq.n	800b9b4 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800b946:	68fb      	ldr	r3, [r7, #12]
 800b948:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800b94a:	6938      	ldr	r0, [r7, #16]
 800b94c:	f000 f836 	bl	800b9bc <USBD_GetLen>
 800b950:	4603      	mov	r3, r0
 800b952:	3301      	adds	r3, #1
 800b954:	b29b      	uxth	r3, r3
 800b956:	005b      	lsls	r3, r3, #1
 800b958:	b29a      	uxth	r2, r3
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800b95e:	7dfb      	ldrb	r3, [r7, #23]
 800b960:	68ba      	ldr	r2, [r7, #8]
 800b962:	4413      	add	r3, r2
 800b964:	687a      	ldr	r2, [r7, #4]
 800b966:	7812      	ldrb	r2, [r2, #0]
 800b968:	701a      	strb	r2, [r3, #0]
  idx++;
 800b96a:	7dfb      	ldrb	r3, [r7, #23]
 800b96c:	3301      	adds	r3, #1
 800b96e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800b970:	7dfb      	ldrb	r3, [r7, #23]
 800b972:	68ba      	ldr	r2, [r7, #8]
 800b974:	4413      	add	r3, r2
 800b976:	2203      	movs	r2, #3
 800b978:	701a      	strb	r2, [r3, #0]
  idx++;
 800b97a:	7dfb      	ldrb	r3, [r7, #23]
 800b97c:	3301      	adds	r3, #1
 800b97e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800b980:	e013      	b.n	800b9aa <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800b982:	7dfb      	ldrb	r3, [r7, #23]
 800b984:	68ba      	ldr	r2, [r7, #8]
 800b986:	4413      	add	r3, r2
 800b988:	693a      	ldr	r2, [r7, #16]
 800b98a:	7812      	ldrb	r2, [r2, #0]
 800b98c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800b98e:	693b      	ldr	r3, [r7, #16]
 800b990:	3301      	adds	r3, #1
 800b992:	613b      	str	r3, [r7, #16]
    idx++;
 800b994:	7dfb      	ldrb	r3, [r7, #23]
 800b996:	3301      	adds	r3, #1
 800b998:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800b99a:	7dfb      	ldrb	r3, [r7, #23]
 800b99c:	68ba      	ldr	r2, [r7, #8]
 800b99e:	4413      	add	r3, r2
 800b9a0:	2200      	movs	r2, #0
 800b9a2:	701a      	strb	r2, [r3, #0]
    idx++;
 800b9a4:	7dfb      	ldrb	r3, [r7, #23]
 800b9a6:	3301      	adds	r3, #1
 800b9a8:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800b9aa:	693b      	ldr	r3, [r7, #16]
 800b9ac:	781b      	ldrb	r3, [r3, #0]
 800b9ae:	2b00      	cmp	r3, #0
 800b9b0:	d1e7      	bne.n	800b982 <USBD_GetString+0x52>
 800b9b2:	e000      	b.n	800b9b6 <USBD_GetString+0x86>
    return;
 800b9b4:	bf00      	nop
  }
}
 800b9b6:	3718      	adds	r7, #24
 800b9b8:	46bd      	mov	sp, r7
 800b9ba:	bd80      	pop	{r7, pc}

0800b9bc <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800b9bc:	b480      	push	{r7}
 800b9be:	b085      	sub	sp, #20
 800b9c0:	af00      	add	r7, sp, #0
 800b9c2:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800b9c4:	2300      	movs	r3, #0
 800b9c6:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800b9cc:	e005      	b.n	800b9da <USBD_GetLen+0x1e>
  {
    len++;
 800b9ce:	7bfb      	ldrb	r3, [r7, #15]
 800b9d0:	3301      	adds	r3, #1
 800b9d2:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800b9d4:	68bb      	ldr	r3, [r7, #8]
 800b9d6:	3301      	adds	r3, #1
 800b9d8:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800b9da:	68bb      	ldr	r3, [r7, #8]
 800b9dc:	781b      	ldrb	r3, [r3, #0]
 800b9de:	2b00      	cmp	r3, #0
 800b9e0:	d1f5      	bne.n	800b9ce <USBD_GetLen+0x12>
  }

  return len;
 800b9e2:	7bfb      	ldrb	r3, [r7, #15]
}
 800b9e4:	4618      	mov	r0, r3
 800b9e6:	3714      	adds	r7, #20
 800b9e8:	46bd      	mov	sp, r7
 800b9ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9ee:	4770      	bx	lr

0800b9f0 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800b9f0:	b580      	push	{r7, lr}
 800b9f2:	b084      	sub	sp, #16
 800b9f4:	af00      	add	r7, sp, #0
 800b9f6:	60f8      	str	r0, [r7, #12]
 800b9f8:	60b9      	str	r1, [r7, #8]
 800b9fa:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800b9fc:	68fb      	ldr	r3, [r7, #12]
 800b9fe:	2202      	movs	r2, #2
 800ba00:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800ba04:	68fb      	ldr	r3, [r7, #12]
 800ba06:	687a      	ldr	r2, [r7, #4]
 800ba08:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800ba0a:	68fb      	ldr	r3, [r7, #12]
 800ba0c:	687a      	ldr	r2, [r7, #4]
 800ba0e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	68ba      	ldr	r2, [r7, #8]
 800ba14:	2100      	movs	r1, #0
 800ba16:	68f8      	ldr	r0, [r7, #12]
 800ba18:	f000 fccd 	bl	800c3b6 <USBD_LL_Transmit>

  return USBD_OK;
 800ba1c:	2300      	movs	r3, #0
}
 800ba1e:	4618      	mov	r0, r3
 800ba20:	3710      	adds	r7, #16
 800ba22:	46bd      	mov	sp, r7
 800ba24:	bd80      	pop	{r7, pc}

0800ba26 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800ba26:	b580      	push	{r7, lr}
 800ba28:	b084      	sub	sp, #16
 800ba2a:	af00      	add	r7, sp, #0
 800ba2c:	60f8      	str	r0, [r7, #12]
 800ba2e:	60b9      	str	r1, [r7, #8]
 800ba30:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	68ba      	ldr	r2, [r7, #8]
 800ba36:	2100      	movs	r1, #0
 800ba38:	68f8      	ldr	r0, [r7, #12]
 800ba3a:	f000 fcbc 	bl	800c3b6 <USBD_LL_Transmit>

  return USBD_OK;
 800ba3e:	2300      	movs	r3, #0
}
 800ba40:	4618      	mov	r0, r3
 800ba42:	3710      	adds	r7, #16
 800ba44:	46bd      	mov	sp, r7
 800ba46:	bd80      	pop	{r7, pc}

0800ba48 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800ba48:	b580      	push	{r7, lr}
 800ba4a:	b084      	sub	sp, #16
 800ba4c:	af00      	add	r7, sp, #0
 800ba4e:	60f8      	str	r0, [r7, #12]
 800ba50:	60b9      	str	r1, [r7, #8]
 800ba52:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	68ba      	ldr	r2, [r7, #8]
 800ba58:	2100      	movs	r1, #0
 800ba5a:	68f8      	ldr	r0, [r7, #12]
 800ba5c:	f000 fccc 	bl	800c3f8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ba60:	2300      	movs	r3, #0
}
 800ba62:	4618      	mov	r0, r3
 800ba64:	3710      	adds	r7, #16
 800ba66:	46bd      	mov	sp, r7
 800ba68:	bd80      	pop	{r7, pc}

0800ba6a <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800ba6a:	b580      	push	{r7, lr}
 800ba6c:	b082      	sub	sp, #8
 800ba6e:	af00      	add	r7, sp, #0
 800ba70:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	2204      	movs	r2, #4
 800ba76:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800ba7a:	2300      	movs	r3, #0
 800ba7c:	2200      	movs	r2, #0
 800ba7e:	2100      	movs	r1, #0
 800ba80:	6878      	ldr	r0, [r7, #4]
 800ba82:	f000 fc98 	bl	800c3b6 <USBD_LL_Transmit>

  return USBD_OK;
 800ba86:	2300      	movs	r3, #0
}
 800ba88:	4618      	mov	r0, r3
 800ba8a:	3708      	adds	r7, #8
 800ba8c:	46bd      	mov	sp, r7
 800ba8e:	bd80      	pop	{r7, pc}

0800ba90 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800ba90:	b580      	push	{r7, lr}
 800ba92:	b082      	sub	sp, #8
 800ba94:	af00      	add	r7, sp, #0
 800ba96:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	2205      	movs	r2, #5
 800ba9c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800baa0:	2300      	movs	r3, #0
 800baa2:	2200      	movs	r2, #0
 800baa4:	2100      	movs	r1, #0
 800baa6:	6878      	ldr	r0, [r7, #4]
 800baa8:	f000 fca6 	bl	800c3f8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800baac:	2300      	movs	r3, #0
}
 800baae:	4618      	mov	r0, r3
 800bab0:	3708      	adds	r7, #8
 800bab2:	46bd      	mov	sp, r7
 800bab4:	bd80      	pop	{r7, pc}
	...

0800bab8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800bab8:	b580      	push	{r7, lr}
 800baba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800babc:	2200      	movs	r2, #0
 800babe:	4912      	ldr	r1, [pc, #72]	; (800bb08 <MX_USB_DEVICE_Init+0x50>)
 800bac0:	4812      	ldr	r0, [pc, #72]	; (800bb0c <MX_USB_DEVICE_Init+0x54>)
 800bac2:	f7fe fd08 	bl	800a4d6 <USBD_Init>
 800bac6:	4603      	mov	r3, r0
 800bac8:	2b00      	cmp	r3, #0
 800baca:	d001      	beq.n	800bad0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800bacc:	f7f5 fd98 	bl	8001600 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_MSC) != USBD_OK)
 800bad0:	490f      	ldr	r1, [pc, #60]	; (800bb10 <MX_USB_DEVICE_Init+0x58>)
 800bad2:	480e      	ldr	r0, [pc, #56]	; (800bb0c <MX_USB_DEVICE_Init+0x54>)
 800bad4:	f7fe fd2f 	bl	800a536 <USBD_RegisterClass>
 800bad8:	4603      	mov	r3, r0
 800bada:	2b00      	cmp	r3, #0
 800badc:	d001      	beq.n	800bae2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800bade:	f7f5 fd8f 	bl	8001600 <Error_Handler>
  }
  if (USBD_MSC_RegisterStorage(&hUsbDeviceFS, &USBD_Storage_Interface_fops_FS) != USBD_OK)
 800bae2:	490c      	ldr	r1, [pc, #48]	; (800bb14 <MX_USB_DEVICE_Init+0x5c>)
 800bae4:	4809      	ldr	r0, [pc, #36]	; (800bb0c <MX_USB_DEVICE_Init+0x54>)
 800bae6:	f7fc fef9 	bl	80088dc <USBD_MSC_RegisterStorage>
 800baea:	4603      	mov	r3, r0
 800baec:	2b00      	cmp	r3, #0
 800baee:	d001      	beq.n	800baf4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800baf0:	f7f5 fd86 	bl	8001600 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800baf4:	4805      	ldr	r0, [pc, #20]	; (800bb0c <MX_USB_DEVICE_Init+0x54>)
 800baf6:	f7fe fd54 	bl	800a5a2 <USBD_Start>
 800bafa:	4603      	mov	r3, r0
 800bafc:	2b00      	cmp	r3, #0
 800bafe:	d001      	beq.n	800bb04 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800bb00:	f7f5 fd7e 	bl	8001600 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800bb04:	bf00      	nop
 800bb06:	bd80      	pop	{r7, pc}
 800bb08:	200000b8 	.word	0x200000b8
 800bb0c:	20001284 	.word	0x20001284
 800bb10:	20000010 	.word	0x20000010
 800bb14:	20000108 	.word	0x20000108

0800bb18 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bb18:	b480      	push	{r7}
 800bb1a:	b083      	sub	sp, #12
 800bb1c:	af00      	add	r7, sp, #0
 800bb1e:	4603      	mov	r3, r0
 800bb20:	6039      	str	r1, [r7, #0]
 800bb22:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800bb24:	683b      	ldr	r3, [r7, #0]
 800bb26:	2212      	movs	r2, #18
 800bb28:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800bb2a:	4b03      	ldr	r3, [pc, #12]	; (800bb38 <USBD_FS_DeviceDescriptor+0x20>)
}
 800bb2c:	4618      	mov	r0, r3
 800bb2e:	370c      	adds	r7, #12
 800bb30:	46bd      	mov	sp, r7
 800bb32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb36:	4770      	bx	lr
 800bb38:	200000d4 	.word	0x200000d4

0800bb3c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bb3c:	b480      	push	{r7}
 800bb3e:	b083      	sub	sp, #12
 800bb40:	af00      	add	r7, sp, #0
 800bb42:	4603      	mov	r3, r0
 800bb44:	6039      	str	r1, [r7, #0]
 800bb46:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800bb48:	683b      	ldr	r3, [r7, #0]
 800bb4a:	2204      	movs	r2, #4
 800bb4c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800bb4e:	4b03      	ldr	r3, [pc, #12]	; (800bb5c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800bb50:	4618      	mov	r0, r3
 800bb52:	370c      	adds	r7, #12
 800bb54:	46bd      	mov	sp, r7
 800bb56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb5a:	4770      	bx	lr
 800bb5c:	200000e8 	.word	0x200000e8

0800bb60 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bb60:	b580      	push	{r7, lr}
 800bb62:	b082      	sub	sp, #8
 800bb64:	af00      	add	r7, sp, #0
 800bb66:	4603      	mov	r3, r0
 800bb68:	6039      	str	r1, [r7, #0]
 800bb6a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800bb6c:	79fb      	ldrb	r3, [r7, #7]
 800bb6e:	2b00      	cmp	r3, #0
 800bb70:	d105      	bne.n	800bb7e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800bb72:	683a      	ldr	r2, [r7, #0]
 800bb74:	4907      	ldr	r1, [pc, #28]	; (800bb94 <USBD_FS_ProductStrDescriptor+0x34>)
 800bb76:	4808      	ldr	r0, [pc, #32]	; (800bb98 <USBD_FS_ProductStrDescriptor+0x38>)
 800bb78:	f7ff feda 	bl	800b930 <USBD_GetString>
 800bb7c:	e004      	b.n	800bb88 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800bb7e:	683a      	ldr	r2, [r7, #0]
 800bb80:	4904      	ldr	r1, [pc, #16]	; (800bb94 <USBD_FS_ProductStrDescriptor+0x34>)
 800bb82:	4805      	ldr	r0, [pc, #20]	; (800bb98 <USBD_FS_ProductStrDescriptor+0x38>)
 800bb84:	f7ff fed4 	bl	800b930 <USBD_GetString>
  }
  return USBD_StrDesc;
 800bb88:	4b02      	ldr	r3, [pc, #8]	; (800bb94 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800bb8a:	4618      	mov	r0, r3
 800bb8c:	3708      	adds	r7, #8
 800bb8e:	46bd      	mov	sp, r7
 800bb90:	bd80      	pop	{r7, pc}
 800bb92:	bf00      	nop
 800bb94:	20001560 	.word	0x20001560
 800bb98:	0800c558 	.word	0x0800c558

0800bb9c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bb9c:	b580      	push	{r7, lr}
 800bb9e:	b082      	sub	sp, #8
 800bba0:	af00      	add	r7, sp, #0
 800bba2:	4603      	mov	r3, r0
 800bba4:	6039      	str	r1, [r7, #0]
 800bba6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800bba8:	683a      	ldr	r2, [r7, #0]
 800bbaa:	4904      	ldr	r1, [pc, #16]	; (800bbbc <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800bbac:	4804      	ldr	r0, [pc, #16]	; (800bbc0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800bbae:	f7ff febf 	bl	800b930 <USBD_GetString>
  return USBD_StrDesc;
 800bbb2:	4b02      	ldr	r3, [pc, #8]	; (800bbbc <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800bbb4:	4618      	mov	r0, r3
 800bbb6:	3708      	adds	r7, #8
 800bbb8:	46bd      	mov	sp, r7
 800bbba:	bd80      	pop	{r7, pc}
 800bbbc:	20001560 	.word	0x20001560
 800bbc0:	0800c564 	.word	0x0800c564

0800bbc4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bbc4:	b580      	push	{r7, lr}
 800bbc6:	b082      	sub	sp, #8
 800bbc8:	af00      	add	r7, sp, #0
 800bbca:	4603      	mov	r3, r0
 800bbcc:	6039      	str	r1, [r7, #0]
 800bbce:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800bbd0:	683b      	ldr	r3, [r7, #0]
 800bbd2:	221a      	movs	r2, #26
 800bbd4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800bbd6:	f000 f843 	bl	800bc60 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800bbda:	4b02      	ldr	r3, [pc, #8]	; (800bbe4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800bbdc:	4618      	mov	r0, r3
 800bbde:	3708      	adds	r7, #8
 800bbe0:	46bd      	mov	sp, r7
 800bbe2:	bd80      	pop	{r7, pc}
 800bbe4:	200000ec 	.word	0x200000ec

0800bbe8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bbe8:	b580      	push	{r7, lr}
 800bbea:	b082      	sub	sp, #8
 800bbec:	af00      	add	r7, sp, #0
 800bbee:	4603      	mov	r3, r0
 800bbf0:	6039      	str	r1, [r7, #0]
 800bbf2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800bbf4:	79fb      	ldrb	r3, [r7, #7]
 800bbf6:	2b00      	cmp	r3, #0
 800bbf8:	d105      	bne.n	800bc06 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800bbfa:	683a      	ldr	r2, [r7, #0]
 800bbfc:	4907      	ldr	r1, [pc, #28]	; (800bc1c <USBD_FS_ConfigStrDescriptor+0x34>)
 800bbfe:	4808      	ldr	r0, [pc, #32]	; (800bc20 <USBD_FS_ConfigStrDescriptor+0x38>)
 800bc00:	f7ff fe96 	bl	800b930 <USBD_GetString>
 800bc04:	e004      	b.n	800bc10 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800bc06:	683a      	ldr	r2, [r7, #0]
 800bc08:	4904      	ldr	r1, [pc, #16]	; (800bc1c <USBD_FS_ConfigStrDescriptor+0x34>)
 800bc0a:	4805      	ldr	r0, [pc, #20]	; (800bc20 <USBD_FS_ConfigStrDescriptor+0x38>)
 800bc0c:	f7ff fe90 	bl	800b930 <USBD_GetString>
  }
  return USBD_StrDesc;
 800bc10:	4b02      	ldr	r3, [pc, #8]	; (800bc1c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800bc12:	4618      	mov	r0, r3
 800bc14:	3708      	adds	r7, #8
 800bc16:	46bd      	mov	sp, r7
 800bc18:	bd80      	pop	{r7, pc}
 800bc1a:	bf00      	nop
 800bc1c:	20001560 	.word	0x20001560
 800bc20:	0800c578 	.word	0x0800c578

0800bc24 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bc24:	b580      	push	{r7, lr}
 800bc26:	b082      	sub	sp, #8
 800bc28:	af00      	add	r7, sp, #0
 800bc2a:	4603      	mov	r3, r0
 800bc2c:	6039      	str	r1, [r7, #0]
 800bc2e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800bc30:	79fb      	ldrb	r3, [r7, #7]
 800bc32:	2b00      	cmp	r3, #0
 800bc34:	d105      	bne.n	800bc42 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800bc36:	683a      	ldr	r2, [r7, #0]
 800bc38:	4907      	ldr	r1, [pc, #28]	; (800bc58 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800bc3a:	4808      	ldr	r0, [pc, #32]	; (800bc5c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800bc3c:	f7ff fe78 	bl	800b930 <USBD_GetString>
 800bc40:	e004      	b.n	800bc4c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800bc42:	683a      	ldr	r2, [r7, #0]
 800bc44:	4904      	ldr	r1, [pc, #16]	; (800bc58 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800bc46:	4805      	ldr	r0, [pc, #20]	; (800bc5c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800bc48:	f7ff fe72 	bl	800b930 <USBD_GetString>
  }
  return USBD_StrDesc;
 800bc4c:	4b02      	ldr	r3, [pc, #8]	; (800bc58 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800bc4e:	4618      	mov	r0, r3
 800bc50:	3708      	adds	r7, #8
 800bc52:	46bd      	mov	sp, r7
 800bc54:	bd80      	pop	{r7, pc}
 800bc56:	bf00      	nop
 800bc58:	20001560 	.word	0x20001560
 800bc5c:	0800c584 	.word	0x0800c584

0800bc60 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800bc60:	b580      	push	{r7, lr}
 800bc62:	b084      	sub	sp, #16
 800bc64:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800bc66:	4b0f      	ldr	r3, [pc, #60]	; (800bca4 <Get_SerialNum+0x44>)
 800bc68:	681b      	ldr	r3, [r3, #0]
 800bc6a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800bc6c:	4b0e      	ldr	r3, [pc, #56]	; (800bca8 <Get_SerialNum+0x48>)
 800bc6e:	681b      	ldr	r3, [r3, #0]
 800bc70:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800bc72:	4b0e      	ldr	r3, [pc, #56]	; (800bcac <Get_SerialNum+0x4c>)
 800bc74:	681b      	ldr	r3, [r3, #0]
 800bc76:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800bc78:	68fa      	ldr	r2, [r7, #12]
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	4413      	add	r3, r2
 800bc7e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800bc80:	68fb      	ldr	r3, [r7, #12]
 800bc82:	2b00      	cmp	r3, #0
 800bc84:	d009      	beq.n	800bc9a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800bc86:	2208      	movs	r2, #8
 800bc88:	4909      	ldr	r1, [pc, #36]	; (800bcb0 <Get_SerialNum+0x50>)
 800bc8a:	68f8      	ldr	r0, [r7, #12]
 800bc8c:	f000 f814 	bl	800bcb8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800bc90:	2204      	movs	r2, #4
 800bc92:	4908      	ldr	r1, [pc, #32]	; (800bcb4 <Get_SerialNum+0x54>)
 800bc94:	68b8      	ldr	r0, [r7, #8]
 800bc96:	f000 f80f 	bl	800bcb8 <IntToUnicode>
  }
}
 800bc9a:	bf00      	nop
 800bc9c:	3710      	adds	r7, #16
 800bc9e:	46bd      	mov	sp, r7
 800bca0:	bd80      	pop	{r7, pc}
 800bca2:	bf00      	nop
 800bca4:	1fff7a10 	.word	0x1fff7a10
 800bca8:	1fff7a14 	.word	0x1fff7a14
 800bcac:	1fff7a18 	.word	0x1fff7a18
 800bcb0:	200000ee 	.word	0x200000ee
 800bcb4:	200000fe 	.word	0x200000fe

0800bcb8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800bcb8:	b480      	push	{r7}
 800bcba:	b087      	sub	sp, #28
 800bcbc:	af00      	add	r7, sp, #0
 800bcbe:	60f8      	str	r0, [r7, #12]
 800bcc0:	60b9      	str	r1, [r7, #8]
 800bcc2:	4613      	mov	r3, r2
 800bcc4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800bcc6:	2300      	movs	r3, #0
 800bcc8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800bcca:	2300      	movs	r3, #0
 800bccc:	75fb      	strb	r3, [r7, #23]
 800bcce:	e027      	b.n	800bd20 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800bcd0:	68fb      	ldr	r3, [r7, #12]
 800bcd2:	0f1b      	lsrs	r3, r3, #28
 800bcd4:	2b09      	cmp	r3, #9
 800bcd6:	d80b      	bhi.n	800bcf0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800bcd8:	68fb      	ldr	r3, [r7, #12]
 800bcda:	0f1b      	lsrs	r3, r3, #28
 800bcdc:	b2da      	uxtb	r2, r3
 800bcde:	7dfb      	ldrb	r3, [r7, #23]
 800bce0:	005b      	lsls	r3, r3, #1
 800bce2:	4619      	mov	r1, r3
 800bce4:	68bb      	ldr	r3, [r7, #8]
 800bce6:	440b      	add	r3, r1
 800bce8:	3230      	adds	r2, #48	; 0x30
 800bcea:	b2d2      	uxtb	r2, r2
 800bcec:	701a      	strb	r2, [r3, #0]
 800bcee:	e00a      	b.n	800bd06 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800bcf0:	68fb      	ldr	r3, [r7, #12]
 800bcf2:	0f1b      	lsrs	r3, r3, #28
 800bcf4:	b2da      	uxtb	r2, r3
 800bcf6:	7dfb      	ldrb	r3, [r7, #23]
 800bcf8:	005b      	lsls	r3, r3, #1
 800bcfa:	4619      	mov	r1, r3
 800bcfc:	68bb      	ldr	r3, [r7, #8]
 800bcfe:	440b      	add	r3, r1
 800bd00:	3237      	adds	r2, #55	; 0x37
 800bd02:	b2d2      	uxtb	r2, r2
 800bd04:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800bd06:	68fb      	ldr	r3, [r7, #12]
 800bd08:	011b      	lsls	r3, r3, #4
 800bd0a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800bd0c:	7dfb      	ldrb	r3, [r7, #23]
 800bd0e:	005b      	lsls	r3, r3, #1
 800bd10:	3301      	adds	r3, #1
 800bd12:	68ba      	ldr	r2, [r7, #8]
 800bd14:	4413      	add	r3, r2
 800bd16:	2200      	movs	r2, #0
 800bd18:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800bd1a:	7dfb      	ldrb	r3, [r7, #23]
 800bd1c:	3301      	adds	r3, #1
 800bd1e:	75fb      	strb	r3, [r7, #23]
 800bd20:	7dfa      	ldrb	r2, [r7, #23]
 800bd22:	79fb      	ldrb	r3, [r7, #7]
 800bd24:	429a      	cmp	r2, r3
 800bd26:	d3d3      	bcc.n	800bcd0 <IntToUnicode+0x18>
  }
}
 800bd28:	bf00      	nop
 800bd2a:	bf00      	nop
 800bd2c:	371c      	adds	r7, #28
 800bd2e:	46bd      	mov	sp, r7
 800bd30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd34:	4770      	bx	lr

0800bd36 <STORAGE_Init_FS>:
  * @brief  Initializes the storage unit (medium) over USB FS IP
  * @param  lun: Logical unit number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Init_FS(uint8_t lun)
{
 800bd36:	b480      	push	{r7}
 800bd38:	b083      	sub	sp, #12
 800bd3a:	af00      	add	r7, sp, #0
 800bd3c:	4603      	mov	r3, r0
 800bd3e:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 2 */
 UNUSED(lun);

  return (USBD_OK);
 800bd40:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 800bd42:	4618      	mov	r0, r3
 800bd44:	370c      	adds	r7, #12
 800bd46:	46bd      	mov	sp, r7
 800bd48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd4c:	4770      	bx	lr

0800bd4e <STORAGE_GetCapacity_FS>:
  * @param  block_num: Number of total block number.
  * @param  block_size: Block size.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_GetCapacity_FS(uint8_t lun, uint32_t *block_num, uint16_t *block_size)
{
 800bd4e:	b480      	push	{r7}
 800bd50:	b085      	sub	sp, #20
 800bd52:	af00      	add	r7, sp, #0
 800bd54:	4603      	mov	r3, r0
 800bd56:	60b9      	str	r1, [r7, #8]
 800bd58:	607a      	str	r2, [r7, #4]
 800bd5a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 3 */
  UNUSED(lun);

  *block_num  = W25Q_SECTORS;
 800bd5c:	68bb      	ldr	r3, [r7, #8]
 800bd5e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800bd62:	601a      	str	r2, [r3, #0]
  *block_size = W25Q_SECTOR_SIZE;
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800bd6a:	801a      	strh	r2, [r3, #0]
  return (USBD_OK);
 800bd6c:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800bd6e:	4618      	mov	r0, r3
 800bd70:	3714      	adds	r7, #20
 800bd72:	46bd      	mov	sp, r7
 800bd74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd78:	4770      	bx	lr

0800bd7a <STORAGE_IsReady_FS>:
  * @brief   Checks whether the medium is ready.
  * @param  lun:  Logical unit number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsReady_FS(uint8_t lun)
{
 800bd7a:	b480      	push	{r7}
 800bd7c:	b083      	sub	sp, #12
 800bd7e:	af00      	add	r7, sp, #0
 800bd80:	4603      	mov	r3, r0
 800bd82:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 4 */
  UNUSED(lun);
  /*if(W25Q_Busy()){
    return (USBD_FAIL);
  }*/
  return (USBD_OK);
 800bd84:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800bd86:	4618      	mov	r0, r3
 800bd88:	370c      	adds	r7, #12
 800bd8a:	46bd      	mov	sp, r7
 800bd8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd90:	4770      	bx	lr

0800bd92 <STORAGE_IsWriteProtected_FS>:
  * @brief  Checks whether the medium is write protected.
  * @param  lun: Logical unit number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsWriteProtected_FS(uint8_t lun)
{
 800bd92:	b480      	push	{r7}
 800bd94:	b083      	sub	sp, #12
 800bd96:	af00      	add	r7, sp, #0
 800bd98:	4603      	mov	r3, r0
 800bd9a:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 5 */
  UNUSED(lun);

  return (USBD_OK);
 800bd9c:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800bd9e:	4618      	mov	r0, r3
 800bda0:	370c      	adds	r7, #12
 800bda2:	46bd      	mov	sp, r7
 800bda4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bda8:	4770      	bx	lr

0800bdaa <STORAGE_Read_FS>:
  * @param  blk_addr: Logical block address.
  * @param  blk_len: Blocks number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Read_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 800bdaa:	b580      	push	{r7, lr}
 800bdac:	b086      	sub	sp, #24
 800bdae:	af00      	add	r7, sp, #0
 800bdb0:	60b9      	str	r1, [r7, #8]
 800bdb2:	607a      	str	r2, [r7, #4]
 800bdb4:	461a      	mov	r2, r3
 800bdb6:	4603      	mov	r3, r0
 800bdb8:	73fb      	strb	r3, [r7, #15]
 800bdba:	4613      	mov	r3, r2
 800bdbc:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 6 */
  UNUSED(lun);
  uint16_t i = 0;
 800bdbe:	2300      	movs	r3, #0
 800bdc0:	82fb      	strh	r3, [r7, #22]
  while(i != blk_len){
 800bdc2:	e00f      	b.n	800bde4 <STORAGE_Read_FS+0x3a>
	W25Q_Read_Sector(&buf[W25Q_SECTOR_SIZE * i], blk_addr + i);
 800bdc4:	8afb      	ldrh	r3, [r7, #22]
 800bdc6:	031b      	lsls	r3, r3, #12
 800bdc8:	461a      	mov	r2, r3
 800bdca:	68bb      	ldr	r3, [r7, #8]
 800bdcc:	1898      	adds	r0, r3, r2
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	b29a      	uxth	r2, r3
 800bdd2:	8afb      	ldrh	r3, [r7, #22]
 800bdd4:	4413      	add	r3, r2
 800bdd6:	b29b      	uxth	r3, r3
 800bdd8:	4619      	mov	r1, r3
 800bdda:	f7f5 f93a 	bl	8001052 <W25Q_Read_Sector>
    i++;
 800bdde:	8afb      	ldrh	r3, [r7, #22]
 800bde0:	3301      	adds	r3, #1
 800bde2:	82fb      	strh	r3, [r7, #22]
  while(i != blk_len){
 800bde4:	8afa      	ldrh	r2, [r7, #22]
 800bde6:	89bb      	ldrh	r3, [r7, #12]
 800bde8:	429a      	cmp	r2, r3
 800bdea:	d1eb      	bne.n	800bdc4 <STORAGE_Read_FS+0x1a>
  }

  return (USBD_OK);
 800bdec:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800bdee:	4618      	mov	r0, r3
 800bdf0:	3718      	adds	r7, #24
 800bdf2:	46bd      	mov	sp, r7
 800bdf4:	bd80      	pop	{r7, pc}

0800bdf6 <STORAGE_Write_FS>:
  * @param  blk_addr: Logical block address.
  * @param  blk_len: Blocks number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Write_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 800bdf6:	b580      	push	{r7, lr}
 800bdf8:	b086      	sub	sp, #24
 800bdfa:	af00      	add	r7, sp, #0
 800bdfc:	60b9      	str	r1, [r7, #8]
 800bdfe:	607a      	str	r2, [r7, #4]
 800be00:	461a      	mov	r2, r3
 800be02:	4603      	mov	r3, r0
 800be04:	73fb      	strb	r3, [r7, #15]
 800be06:	4613      	mov	r3, r2
 800be08:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 7 */
  UNUSED(lun);

  uint16_t i = 0;
 800be0a:	2300      	movs	r3, #0
 800be0c:	82fb      	strh	r3, [r7, #22]
  while(i != blk_len){
 800be0e:	e015      	b.n	800be3c <STORAGE_Write_FS+0x46>
    W25Q_Erase_Sector(blk_addr + i);
 800be10:	8afa      	ldrh	r2, [r7, #22]
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	4413      	add	r3, r2
 800be16:	4618      	mov	r0, r3
 800be18:	f7f5 f899 	bl	8000f4e <W25Q_Erase_Sector>
	W25Q_Write_Sector(&buf[W25Q_SECTOR_SIZE * i], blk_addr + i);
 800be1c:	8afb      	ldrh	r3, [r7, #22]
 800be1e:	031b      	lsls	r3, r3, #12
 800be20:	461a      	mov	r2, r3
 800be22:	68bb      	ldr	r3, [r7, #8]
 800be24:	1898      	adds	r0, r3, r2
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	b29a      	uxth	r2, r3
 800be2a:	8afb      	ldrh	r3, [r7, #22]
 800be2c:	4413      	add	r3, r2
 800be2e:	b29b      	uxth	r3, r3
 800be30:	4619      	mov	r1, r3
 800be32:	f7f5 f8c1 	bl	8000fb8 <W25Q_Write_Sector>
    i++;
 800be36:	8afb      	ldrh	r3, [r7, #22]
 800be38:	3301      	adds	r3, #1
 800be3a:	82fb      	strh	r3, [r7, #22]
  while(i != blk_len){
 800be3c:	8afa      	ldrh	r2, [r7, #22]
 800be3e:	89bb      	ldrh	r3, [r7, #12]
 800be40:	429a      	cmp	r2, r3
 800be42:	d1e5      	bne.n	800be10 <STORAGE_Write_FS+0x1a>
  }

  return (USBD_OK);
 800be44:	2300      	movs	r3, #0
  /* USER CODE END 7 */
}
 800be46:	4618      	mov	r0, r3
 800be48:	3718      	adds	r7, #24
 800be4a:	46bd      	mov	sp, r7
 800be4c:	bd80      	pop	{r7, pc}

0800be4e <STORAGE_GetMaxLun_FS>:
  * @brief  Returns the Max Supported LUNs.
  * @param  None
  * @retval Lun(s) number.
  */
int8_t STORAGE_GetMaxLun_FS(void)
{
 800be4e:	b480      	push	{r7}
 800be50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  return (STORAGE_LUN_NBR - 1);
 800be52:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 800be54:	4618      	mov	r0, r3
 800be56:	46bd      	mov	sp, r7
 800be58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be5c:	4770      	bx	lr
	...

0800be60 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800be60:	b580      	push	{r7, lr}
 800be62:	b08a      	sub	sp, #40	; 0x28
 800be64:	af00      	add	r7, sp, #0
 800be66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800be68:	f107 0314 	add.w	r3, r7, #20
 800be6c:	2200      	movs	r2, #0
 800be6e:	601a      	str	r2, [r3, #0]
 800be70:	605a      	str	r2, [r3, #4]
 800be72:	609a      	str	r2, [r3, #8]
 800be74:	60da      	str	r2, [r3, #12]
 800be76:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	681b      	ldr	r3, [r3, #0]
 800be7c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800be80:	d13a      	bne.n	800bef8 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800be82:	2300      	movs	r3, #0
 800be84:	613b      	str	r3, [r7, #16]
 800be86:	4b1e      	ldr	r3, [pc, #120]	; (800bf00 <HAL_PCD_MspInit+0xa0>)
 800be88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800be8a:	4a1d      	ldr	r2, [pc, #116]	; (800bf00 <HAL_PCD_MspInit+0xa0>)
 800be8c:	f043 0301 	orr.w	r3, r3, #1
 800be90:	6313      	str	r3, [r2, #48]	; 0x30
 800be92:	4b1b      	ldr	r3, [pc, #108]	; (800bf00 <HAL_PCD_MspInit+0xa0>)
 800be94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800be96:	f003 0301 	and.w	r3, r3, #1
 800be9a:	613b      	str	r3, [r7, #16]
 800be9c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800be9e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800bea2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bea4:	2302      	movs	r3, #2
 800bea6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bea8:	2300      	movs	r3, #0
 800beaa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800beac:	2303      	movs	r3, #3
 800beae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800beb0:	230a      	movs	r3, #10
 800beb2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800beb4:	f107 0314 	add.w	r3, r7, #20
 800beb8:	4619      	mov	r1, r3
 800beba:	4812      	ldr	r0, [pc, #72]	; (800bf04 <HAL_PCD_MspInit+0xa4>)
 800bebc:	f7f6 fb18 	bl	80024f0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800bec0:	4b0f      	ldr	r3, [pc, #60]	; (800bf00 <HAL_PCD_MspInit+0xa0>)
 800bec2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bec4:	4a0e      	ldr	r2, [pc, #56]	; (800bf00 <HAL_PCD_MspInit+0xa0>)
 800bec6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800beca:	6353      	str	r3, [r2, #52]	; 0x34
 800becc:	2300      	movs	r3, #0
 800bece:	60fb      	str	r3, [r7, #12]
 800bed0:	4b0b      	ldr	r3, [pc, #44]	; (800bf00 <HAL_PCD_MspInit+0xa0>)
 800bed2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bed4:	4a0a      	ldr	r2, [pc, #40]	; (800bf00 <HAL_PCD_MspInit+0xa0>)
 800bed6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800beda:	6453      	str	r3, [r2, #68]	; 0x44
 800bedc:	4b08      	ldr	r3, [pc, #32]	; (800bf00 <HAL_PCD_MspInit+0xa0>)
 800bede:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bee0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800bee4:	60fb      	str	r3, [r7, #12]
 800bee6:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800bee8:	2200      	movs	r2, #0
 800beea:	2100      	movs	r1, #0
 800beec:	2043      	movs	r0, #67	; 0x43
 800beee:	f7f5 fee8 	bl	8001cc2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800bef2:	2043      	movs	r0, #67	; 0x43
 800bef4:	f7f5 ff01 	bl	8001cfa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800bef8:	bf00      	nop
 800befa:	3728      	adds	r7, #40	; 0x28
 800befc:	46bd      	mov	sp, r7
 800befe:	bd80      	pop	{r7, pc}
 800bf00:	40023800 	.word	0x40023800
 800bf04:	40020000 	.word	0x40020000

0800bf08 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bf08:	b580      	push	{r7, lr}
 800bf0a:	b082      	sub	sp, #8
 800bf0c:	af00      	add	r7, sp, #0
 800bf0e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800bf1c:	4619      	mov	r1, r3
 800bf1e:	4610      	mov	r0, r2
 800bf20:	f7fe fba7 	bl	800a672 <USBD_LL_SetupStage>
}
 800bf24:	bf00      	nop
 800bf26:	3708      	adds	r7, #8
 800bf28:	46bd      	mov	sp, r7
 800bf2a:	bd80      	pop	{r7, pc}

0800bf2c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bf2c:	b580      	push	{r7, lr}
 800bf2e:	b082      	sub	sp, #8
 800bf30:	af00      	add	r7, sp, #0
 800bf32:	6078      	str	r0, [r7, #4]
 800bf34:	460b      	mov	r3, r1
 800bf36:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800bf3e:	78fa      	ldrb	r2, [r7, #3]
 800bf40:	6879      	ldr	r1, [r7, #4]
 800bf42:	4613      	mov	r3, r2
 800bf44:	00db      	lsls	r3, r3, #3
 800bf46:	4413      	add	r3, r2
 800bf48:	009b      	lsls	r3, r3, #2
 800bf4a:	440b      	add	r3, r1
 800bf4c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800bf50:	681a      	ldr	r2, [r3, #0]
 800bf52:	78fb      	ldrb	r3, [r7, #3]
 800bf54:	4619      	mov	r1, r3
 800bf56:	f7fe fbe1 	bl	800a71c <USBD_LL_DataOutStage>
}
 800bf5a:	bf00      	nop
 800bf5c:	3708      	adds	r7, #8
 800bf5e:	46bd      	mov	sp, r7
 800bf60:	bd80      	pop	{r7, pc}

0800bf62 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bf62:	b580      	push	{r7, lr}
 800bf64:	b082      	sub	sp, #8
 800bf66:	af00      	add	r7, sp, #0
 800bf68:	6078      	str	r0, [r7, #4]
 800bf6a:	460b      	mov	r3, r1
 800bf6c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800bf74:	78fa      	ldrb	r2, [r7, #3]
 800bf76:	6879      	ldr	r1, [r7, #4]
 800bf78:	4613      	mov	r3, r2
 800bf7a:	00db      	lsls	r3, r3, #3
 800bf7c:	4413      	add	r3, r2
 800bf7e:	009b      	lsls	r3, r3, #2
 800bf80:	440b      	add	r3, r1
 800bf82:	334c      	adds	r3, #76	; 0x4c
 800bf84:	681a      	ldr	r2, [r3, #0]
 800bf86:	78fb      	ldrb	r3, [r7, #3]
 800bf88:	4619      	mov	r1, r3
 800bf8a:	f7fe fc7a 	bl	800a882 <USBD_LL_DataInStage>
}
 800bf8e:	bf00      	nop
 800bf90:	3708      	adds	r7, #8
 800bf92:	46bd      	mov	sp, r7
 800bf94:	bd80      	pop	{r7, pc}

0800bf96 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bf96:	b580      	push	{r7, lr}
 800bf98:	b082      	sub	sp, #8
 800bf9a:	af00      	add	r7, sp, #0
 800bf9c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800bfa4:	4618      	mov	r0, r3
 800bfa6:	f7fe fdae 	bl	800ab06 <USBD_LL_SOF>
}
 800bfaa:	bf00      	nop
 800bfac:	3708      	adds	r7, #8
 800bfae:	46bd      	mov	sp, r7
 800bfb0:	bd80      	pop	{r7, pc}

0800bfb2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bfb2:	b580      	push	{r7, lr}
 800bfb4:	b084      	sub	sp, #16
 800bfb6:	af00      	add	r7, sp, #0
 800bfb8:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800bfba:	2301      	movs	r3, #1
 800bfbc:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	68db      	ldr	r3, [r3, #12]
 800bfc2:	2b02      	cmp	r3, #2
 800bfc4:	d001      	beq.n	800bfca <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800bfc6:	f7f5 fb1b 	bl	8001600 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800bfd0:	7bfa      	ldrb	r2, [r7, #15]
 800bfd2:	4611      	mov	r1, r2
 800bfd4:	4618      	mov	r0, r3
 800bfd6:	f7fe fd58 	bl	800aa8a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800bfe0:	4618      	mov	r0, r3
 800bfe2:	f7fe fd00 	bl	800a9e6 <USBD_LL_Reset>
}
 800bfe6:	bf00      	nop
 800bfe8:	3710      	adds	r7, #16
 800bfea:	46bd      	mov	sp, r7
 800bfec:	bd80      	pop	{r7, pc}
	...

0800bff0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bff0:	b580      	push	{r7, lr}
 800bff2:	b082      	sub	sp, #8
 800bff4:	af00      	add	r7, sp, #0
 800bff6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800bffe:	4618      	mov	r0, r3
 800c000:	f7fe fd53 	bl	800aaaa <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	681b      	ldr	r3, [r3, #0]
 800c008:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c00c:	681b      	ldr	r3, [r3, #0]
 800c00e:	687a      	ldr	r2, [r7, #4]
 800c010:	6812      	ldr	r2, [r2, #0]
 800c012:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800c016:	f043 0301 	orr.w	r3, r3, #1
 800c01a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	6a1b      	ldr	r3, [r3, #32]
 800c020:	2b00      	cmp	r3, #0
 800c022:	d005      	beq.n	800c030 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c024:	4b04      	ldr	r3, [pc, #16]	; (800c038 <HAL_PCD_SuspendCallback+0x48>)
 800c026:	691b      	ldr	r3, [r3, #16]
 800c028:	4a03      	ldr	r2, [pc, #12]	; (800c038 <HAL_PCD_SuspendCallback+0x48>)
 800c02a:	f043 0306 	orr.w	r3, r3, #6
 800c02e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800c030:	bf00      	nop
 800c032:	3708      	adds	r7, #8
 800c034:	46bd      	mov	sp, r7
 800c036:	bd80      	pop	{r7, pc}
 800c038:	e000ed00 	.word	0xe000ed00

0800c03c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c03c:	b580      	push	{r7, lr}
 800c03e:	b082      	sub	sp, #8
 800c040:	af00      	add	r7, sp, #0
 800c042:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c04a:	4618      	mov	r0, r3
 800c04c:	f7fe fd43 	bl	800aad6 <USBD_LL_Resume>
}
 800c050:	bf00      	nop
 800c052:	3708      	adds	r7, #8
 800c054:	46bd      	mov	sp, r7
 800c056:	bd80      	pop	{r7, pc}

0800c058 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c058:	b580      	push	{r7, lr}
 800c05a:	b082      	sub	sp, #8
 800c05c:	af00      	add	r7, sp, #0
 800c05e:	6078      	str	r0, [r7, #4]
 800c060:	460b      	mov	r3, r1
 800c062:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c06a:	78fa      	ldrb	r2, [r7, #3]
 800c06c:	4611      	mov	r1, r2
 800c06e:	4618      	mov	r0, r3
 800c070:	f7fe fd9b 	bl	800abaa <USBD_LL_IsoOUTIncomplete>
}
 800c074:	bf00      	nop
 800c076:	3708      	adds	r7, #8
 800c078:	46bd      	mov	sp, r7
 800c07a:	bd80      	pop	{r7, pc}

0800c07c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c07c:	b580      	push	{r7, lr}
 800c07e:	b082      	sub	sp, #8
 800c080:	af00      	add	r7, sp, #0
 800c082:	6078      	str	r0, [r7, #4]
 800c084:	460b      	mov	r3, r1
 800c086:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c08e:	78fa      	ldrb	r2, [r7, #3]
 800c090:	4611      	mov	r1, r2
 800c092:	4618      	mov	r0, r3
 800c094:	f7fe fd57 	bl	800ab46 <USBD_LL_IsoINIncomplete>
}
 800c098:	bf00      	nop
 800c09a:	3708      	adds	r7, #8
 800c09c:	46bd      	mov	sp, r7
 800c09e:	bd80      	pop	{r7, pc}

0800c0a0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c0a0:	b580      	push	{r7, lr}
 800c0a2:	b082      	sub	sp, #8
 800c0a4:	af00      	add	r7, sp, #0
 800c0a6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c0ae:	4618      	mov	r0, r3
 800c0b0:	f7fe fdad 	bl	800ac0e <USBD_LL_DevConnected>
}
 800c0b4:	bf00      	nop
 800c0b6:	3708      	adds	r7, #8
 800c0b8:	46bd      	mov	sp, r7
 800c0ba:	bd80      	pop	{r7, pc}

0800c0bc <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c0bc:	b580      	push	{r7, lr}
 800c0be:	b082      	sub	sp, #8
 800c0c0:	af00      	add	r7, sp, #0
 800c0c2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c0ca:	4618      	mov	r0, r3
 800c0cc:	f7fe fdaa 	bl	800ac24 <USBD_LL_DevDisconnected>
}
 800c0d0:	bf00      	nop
 800c0d2:	3708      	adds	r7, #8
 800c0d4:	46bd      	mov	sp, r7
 800c0d6:	bd80      	pop	{r7, pc}

0800c0d8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800c0d8:	b580      	push	{r7, lr}
 800c0da:	b082      	sub	sp, #8
 800c0dc:	af00      	add	r7, sp, #0
 800c0de:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	781b      	ldrb	r3, [r3, #0]
 800c0e4:	2b00      	cmp	r3, #0
 800c0e6:	d13c      	bne.n	800c162 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800c0e8:	4a20      	ldr	r2, [pc, #128]	; (800c16c <USBD_LL_Init+0x94>)
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	4a1e      	ldr	r2, [pc, #120]	; (800c16c <USBD_LL_Init+0x94>)
 800c0f4:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800c0f8:	4b1c      	ldr	r3, [pc, #112]	; (800c16c <USBD_LL_Init+0x94>)
 800c0fa:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800c0fe:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800c100:	4b1a      	ldr	r3, [pc, #104]	; (800c16c <USBD_LL_Init+0x94>)
 800c102:	2204      	movs	r2, #4
 800c104:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800c106:	4b19      	ldr	r3, [pc, #100]	; (800c16c <USBD_LL_Init+0x94>)
 800c108:	2202      	movs	r2, #2
 800c10a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800c10c:	4b17      	ldr	r3, [pc, #92]	; (800c16c <USBD_LL_Init+0x94>)
 800c10e:	2200      	movs	r2, #0
 800c110:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800c112:	4b16      	ldr	r3, [pc, #88]	; (800c16c <USBD_LL_Init+0x94>)
 800c114:	2202      	movs	r2, #2
 800c116:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800c118:	4b14      	ldr	r3, [pc, #80]	; (800c16c <USBD_LL_Init+0x94>)
 800c11a:	2200      	movs	r2, #0
 800c11c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800c11e:	4b13      	ldr	r3, [pc, #76]	; (800c16c <USBD_LL_Init+0x94>)
 800c120:	2200      	movs	r2, #0
 800c122:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800c124:	4b11      	ldr	r3, [pc, #68]	; (800c16c <USBD_LL_Init+0x94>)
 800c126:	2200      	movs	r2, #0
 800c128:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800c12a:	4b10      	ldr	r3, [pc, #64]	; (800c16c <USBD_LL_Init+0x94>)
 800c12c:	2200      	movs	r2, #0
 800c12e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800c130:	4b0e      	ldr	r3, [pc, #56]	; (800c16c <USBD_LL_Init+0x94>)
 800c132:	2200      	movs	r2, #0
 800c134:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800c136:	480d      	ldr	r0, [pc, #52]	; (800c16c <USBD_LL_Init+0x94>)
 800c138:	f7f6 fba8 	bl	800288c <HAL_PCD_Init>
 800c13c:	4603      	mov	r3, r0
 800c13e:	2b00      	cmp	r3, #0
 800c140:	d001      	beq.n	800c146 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800c142:	f7f5 fa5d 	bl	8001600 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800c146:	2180      	movs	r1, #128	; 0x80
 800c148:	4808      	ldr	r0, [pc, #32]	; (800c16c <USBD_LL_Init+0x94>)
 800c14a:	f7f7 fe66 	bl	8003e1a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800c14e:	2240      	movs	r2, #64	; 0x40
 800c150:	2100      	movs	r1, #0
 800c152:	4806      	ldr	r0, [pc, #24]	; (800c16c <USBD_LL_Init+0x94>)
 800c154:	f7f7 fe1a 	bl	8003d8c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800c158:	2280      	movs	r2, #128	; 0x80
 800c15a:	2101      	movs	r1, #1
 800c15c:	4803      	ldr	r0, [pc, #12]	; (800c16c <USBD_LL_Init+0x94>)
 800c15e:	f7f7 fe15 	bl	8003d8c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800c162:	2300      	movs	r3, #0
}
 800c164:	4618      	mov	r0, r3
 800c166:	3708      	adds	r7, #8
 800c168:	46bd      	mov	sp, r7
 800c16a:	bd80      	pop	{r7, pc}
 800c16c:	20001760 	.word	0x20001760

0800c170 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800c170:	b580      	push	{r7, lr}
 800c172:	b084      	sub	sp, #16
 800c174:	af00      	add	r7, sp, #0
 800c176:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c178:	2300      	movs	r3, #0
 800c17a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c17c:	2300      	movs	r3, #0
 800c17e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c186:	4618      	mov	r0, r3
 800c188:	f7f6 fc9d 	bl	8002ac6 <HAL_PCD_Start>
 800c18c:	4603      	mov	r3, r0
 800c18e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c190:	7bfb      	ldrb	r3, [r7, #15]
 800c192:	4618      	mov	r0, r3
 800c194:	f000 f97c 	bl	800c490 <USBD_Get_USB_Status>
 800c198:	4603      	mov	r3, r0
 800c19a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c19c:	7bbb      	ldrb	r3, [r7, #14]
}
 800c19e:	4618      	mov	r0, r3
 800c1a0:	3710      	adds	r7, #16
 800c1a2:	46bd      	mov	sp, r7
 800c1a4:	bd80      	pop	{r7, pc}

0800c1a6 <USBD_LL_Stop>:
  * @brief  Stops the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Stop(USBD_HandleTypeDef *pdev)
{
 800c1a6:	b580      	push	{r7, lr}
 800c1a8:	b084      	sub	sp, #16
 800c1aa:	af00      	add	r7, sp, #0
 800c1ac:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c1ae:	2300      	movs	r3, #0
 800c1b0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c1b2:	2300      	movs	r3, #0
 800c1b4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Stop(pdev->pData);
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c1bc:	4618      	mov	r0, r3
 800c1be:	f7f6 fcb5 	bl	8002b2c <HAL_PCD_Stop>
 800c1c2:	4603      	mov	r3, r0
 800c1c4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c1c6:	7bfb      	ldrb	r3, [r7, #15]
 800c1c8:	4618      	mov	r0, r3
 800c1ca:	f000 f961 	bl	800c490 <USBD_Get_USB_Status>
 800c1ce:	4603      	mov	r3, r0
 800c1d0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c1d2:	7bbb      	ldrb	r3, [r7, #14]
}
 800c1d4:	4618      	mov	r0, r3
 800c1d6:	3710      	adds	r7, #16
 800c1d8:	46bd      	mov	sp, r7
 800c1da:	bd80      	pop	{r7, pc}

0800c1dc <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800c1dc:	b580      	push	{r7, lr}
 800c1de:	b084      	sub	sp, #16
 800c1e0:	af00      	add	r7, sp, #0
 800c1e2:	6078      	str	r0, [r7, #4]
 800c1e4:	4608      	mov	r0, r1
 800c1e6:	4611      	mov	r1, r2
 800c1e8:	461a      	mov	r2, r3
 800c1ea:	4603      	mov	r3, r0
 800c1ec:	70fb      	strb	r3, [r7, #3]
 800c1ee:	460b      	mov	r3, r1
 800c1f0:	70bb      	strb	r3, [r7, #2]
 800c1f2:	4613      	mov	r3, r2
 800c1f4:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c1f6:	2300      	movs	r3, #0
 800c1f8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c1fa:	2300      	movs	r3, #0
 800c1fc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800c204:	78bb      	ldrb	r3, [r7, #2]
 800c206:	883a      	ldrh	r2, [r7, #0]
 800c208:	78f9      	ldrb	r1, [r7, #3]
 800c20a:	f7f7 f98c 	bl	8003526 <HAL_PCD_EP_Open>
 800c20e:	4603      	mov	r3, r0
 800c210:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c212:	7bfb      	ldrb	r3, [r7, #15]
 800c214:	4618      	mov	r0, r3
 800c216:	f000 f93b 	bl	800c490 <USBD_Get_USB_Status>
 800c21a:	4603      	mov	r3, r0
 800c21c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c21e:	7bbb      	ldrb	r3, [r7, #14]
}
 800c220:	4618      	mov	r0, r3
 800c222:	3710      	adds	r7, #16
 800c224:	46bd      	mov	sp, r7
 800c226:	bd80      	pop	{r7, pc}

0800c228 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c228:	b580      	push	{r7, lr}
 800c22a:	b084      	sub	sp, #16
 800c22c:	af00      	add	r7, sp, #0
 800c22e:	6078      	str	r0, [r7, #4]
 800c230:	460b      	mov	r3, r1
 800c232:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c234:	2300      	movs	r3, #0
 800c236:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c238:	2300      	movs	r3, #0
 800c23a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c242:	78fa      	ldrb	r2, [r7, #3]
 800c244:	4611      	mov	r1, r2
 800c246:	4618      	mov	r0, r3
 800c248:	f7f7 f9d5 	bl	80035f6 <HAL_PCD_EP_Close>
 800c24c:	4603      	mov	r3, r0
 800c24e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c250:	7bfb      	ldrb	r3, [r7, #15]
 800c252:	4618      	mov	r0, r3
 800c254:	f000 f91c 	bl	800c490 <USBD_Get_USB_Status>
 800c258:	4603      	mov	r3, r0
 800c25a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c25c:	7bbb      	ldrb	r3, [r7, #14]
}
 800c25e:	4618      	mov	r0, r3
 800c260:	3710      	adds	r7, #16
 800c262:	46bd      	mov	sp, r7
 800c264:	bd80      	pop	{r7, pc}

0800c266 <USBD_LL_FlushEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_FlushEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c266:	b580      	push	{r7, lr}
 800c268:	b084      	sub	sp, #16
 800c26a:	af00      	add	r7, sp, #0
 800c26c:	6078      	str	r0, [r7, #4]
 800c26e:	460b      	mov	r3, r1
 800c270:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c272:	2300      	movs	r3, #0
 800c274:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c276:	2300      	movs	r3, #0
 800c278:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c280:	78fa      	ldrb	r2, [r7, #3]
 800c282:	4611      	mov	r1, r2
 800c284:	4618      	mov	r0, r3
 800c286:	f7f7 fb98 	bl	80039ba <HAL_PCD_EP_Flush>
 800c28a:	4603      	mov	r3, r0
 800c28c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c28e:	7bfb      	ldrb	r3, [r7, #15]
 800c290:	4618      	mov	r0, r3
 800c292:	f000 f8fd 	bl	800c490 <USBD_Get_USB_Status>
 800c296:	4603      	mov	r3, r0
 800c298:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c29a:	7bbb      	ldrb	r3, [r7, #14]
}
 800c29c:	4618      	mov	r0, r3
 800c29e:	3710      	adds	r7, #16
 800c2a0:	46bd      	mov	sp, r7
 800c2a2:	bd80      	pop	{r7, pc}

0800c2a4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c2a4:	b580      	push	{r7, lr}
 800c2a6:	b084      	sub	sp, #16
 800c2a8:	af00      	add	r7, sp, #0
 800c2aa:	6078      	str	r0, [r7, #4]
 800c2ac:	460b      	mov	r3, r1
 800c2ae:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c2b0:	2300      	movs	r3, #0
 800c2b2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c2b4:	2300      	movs	r3, #0
 800c2b6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c2be:	78fa      	ldrb	r2, [r7, #3]
 800c2c0:	4611      	mov	r1, r2
 800c2c2:	4618      	mov	r0, r3
 800c2c4:	f7f7 fa8e 	bl	80037e4 <HAL_PCD_EP_SetStall>
 800c2c8:	4603      	mov	r3, r0
 800c2ca:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c2cc:	7bfb      	ldrb	r3, [r7, #15]
 800c2ce:	4618      	mov	r0, r3
 800c2d0:	f000 f8de 	bl	800c490 <USBD_Get_USB_Status>
 800c2d4:	4603      	mov	r3, r0
 800c2d6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c2d8:	7bbb      	ldrb	r3, [r7, #14]
}
 800c2da:	4618      	mov	r0, r3
 800c2dc:	3710      	adds	r7, #16
 800c2de:	46bd      	mov	sp, r7
 800c2e0:	bd80      	pop	{r7, pc}

0800c2e2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c2e2:	b580      	push	{r7, lr}
 800c2e4:	b084      	sub	sp, #16
 800c2e6:	af00      	add	r7, sp, #0
 800c2e8:	6078      	str	r0, [r7, #4]
 800c2ea:	460b      	mov	r3, r1
 800c2ec:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c2ee:	2300      	movs	r3, #0
 800c2f0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c2f2:	2300      	movs	r3, #0
 800c2f4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c2fc:	78fa      	ldrb	r2, [r7, #3]
 800c2fe:	4611      	mov	r1, r2
 800c300:	4618      	mov	r0, r3
 800c302:	f7f7 fad3 	bl	80038ac <HAL_PCD_EP_ClrStall>
 800c306:	4603      	mov	r3, r0
 800c308:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c30a:	7bfb      	ldrb	r3, [r7, #15]
 800c30c:	4618      	mov	r0, r3
 800c30e:	f000 f8bf 	bl	800c490 <USBD_Get_USB_Status>
 800c312:	4603      	mov	r3, r0
 800c314:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c316:	7bbb      	ldrb	r3, [r7, #14]
}
 800c318:	4618      	mov	r0, r3
 800c31a:	3710      	adds	r7, #16
 800c31c:	46bd      	mov	sp, r7
 800c31e:	bd80      	pop	{r7, pc}

0800c320 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c320:	b480      	push	{r7}
 800c322:	b085      	sub	sp, #20
 800c324:	af00      	add	r7, sp, #0
 800c326:	6078      	str	r0, [r7, #4]
 800c328:	460b      	mov	r3, r1
 800c32a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c332:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800c334:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c338:	2b00      	cmp	r3, #0
 800c33a:	da0b      	bge.n	800c354 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800c33c:	78fb      	ldrb	r3, [r7, #3]
 800c33e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c342:	68f9      	ldr	r1, [r7, #12]
 800c344:	4613      	mov	r3, r2
 800c346:	00db      	lsls	r3, r3, #3
 800c348:	4413      	add	r3, r2
 800c34a:	009b      	lsls	r3, r3, #2
 800c34c:	440b      	add	r3, r1
 800c34e:	333e      	adds	r3, #62	; 0x3e
 800c350:	781b      	ldrb	r3, [r3, #0]
 800c352:	e00b      	b.n	800c36c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800c354:	78fb      	ldrb	r3, [r7, #3]
 800c356:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c35a:	68f9      	ldr	r1, [r7, #12]
 800c35c:	4613      	mov	r3, r2
 800c35e:	00db      	lsls	r3, r3, #3
 800c360:	4413      	add	r3, r2
 800c362:	009b      	lsls	r3, r3, #2
 800c364:	440b      	add	r3, r1
 800c366:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800c36a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800c36c:	4618      	mov	r0, r3
 800c36e:	3714      	adds	r7, #20
 800c370:	46bd      	mov	sp, r7
 800c372:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c376:	4770      	bx	lr

0800c378 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800c378:	b580      	push	{r7, lr}
 800c37a:	b084      	sub	sp, #16
 800c37c:	af00      	add	r7, sp, #0
 800c37e:	6078      	str	r0, [r7, #4]
 800c380:	460b      	mov	r3, r1
 800c382:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c384:	2300      	movs	r3, #0
 800c386:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c388:	2300      	movs	r3, #0
 800c38a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c392:	78fa      	ldrb	r2, [r7, #3]
 800c394:	4611      	mov	r1, r2
 800c396:	4618      	mov	r0, r3
 800c398:	f7f7 f8a0 	bl	80034dc <HAL_PCD_SetAddress>
 800c39c:	4603      	mov	r3, r0
 800c39e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c3a0:	7bfb      	ldrb	r3, [r7, #15]
 800c3a2:	4618      	mov	r0, r3
 800c3a4:	f000 f874 	bl	800c490 <USBD_Get_USB_Status>
 800c3a8:	4603      	mov	r3, r0
 800c3aa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c3ac:	7bbb      	ldrb	r3, [r7, #14]
}
 800c3ae:	4618      	mov	r0, r3
 800c3b0:	3710      	adds	r7, #16
 800c3b2:	46bd      	mov	sp, r7
 800c3b4:	bd80      	pop	{r7, pc}

0800c3b6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c3b6:	b580      	push	{r7, lr}
 800c3b8:	b086      	sub	sp, #24
 800c3ba:	af00      	add	r7, sp, #0
 800c3bc:	60f8      	str	r0, [r7, #12]
 800c3be:	607a      	str	r2, [r7, #4]
 800c3c0:	603b      	str	r3, [r7, #0]
 800c3c2:	460b      	mov	r3, r1
 800c3c4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c3c6:	2300      	movs	r3, #0
 800c3c8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c3ca:	2300      	movs	r3, #0
 800c3cc:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800c3ce:	68fb      	ldr	r3, [r7, #12]
 800c3d0:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800c3d4:	7af9      	ldrb	r1, [r7, #11]
 800c3d6:	683b      	ldr	r3, [r7, #0]
 800c3d8:	687a      	ldr	r2, [r7, #4]
 800c3da:	f7f7 f9b9 	bl	8003750 <HAL_PCD_EP_Transmit>
 800c3de:	4603      	mov	r3, r0
 800c3e0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c3e2:	7dfb      	ldrb	r3, [r7, #23]
 800c3e4:	4618      	mov	r0, r3
 800c3e6:	f000 f853 	bl	800c490 <USBD_Get_USB_Status>
 800c3ea:	4603      	mov	r3, r0
 800c3ec:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c3ee:	7dbb      	ldrb	r3, [r7, #22]
}
 800c3f0:	4618      	mov	r0, r3
 800c3f2:	3718      	adds	r7, #24
 800c3f4:	46bd      	mov	sp, r7
 800c3f6:	bd80      	pop	{r7, pc}

0800c3f8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c3f8:	b580      	push	{r7, lr}
 800c3fa:	b086      	sub	sp, #24
 800c3fc:	af00      	add	r7, sp, #0
 800c3fe:	60f8      	str	r0, [r7, #12]
 800c400:	607a      	str	r2, [r7, #4]
 800c402:	603b      	str	r3, [r7, #0]
 800c404:	460b      	mov	r3, r1
 800c406:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c408:	2300      	movs	r3, #0
 800c40a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c40c:	2300      	movs	r3, #0
 800c40e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800c410:	68fb      	ldr	r3, [r7, #12]
 800c412:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800c416:	7af9      	ldrb	r1, [r7, #11]
 800c418:	683b      	ldr	r3, [r7, #0]
 800c41a:	687a      	ldr	r2, [r7, #4]
 800c41c:	f7f7 f935 	bl	800368a <HAL_PCD_EP_Receive>
 800c420:	4603      	mov	r3, r0
 800c422:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c424:	7dfb      	ldrb	r3, [r7, #23]
 800c426:	4618      	mov	r0, r3
 800c428:	f000 f832 	bl	800c490 <USBD_Get_USB_Status>
 800c42c:	4603      	mov	r3, r0
 800c42e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c430:	7dbb      	ldrb	r3, [r7, #22]
}
 800c432:	4618      	mov	r0, r3
 800c434:	3718      	adds	r7, #24
 800c436:	46bd      	mov	sp, r7
 800c438:	bd80      	pop	{r7, pc}

0800c43a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c43a:	b580      	push	{r7, lr}
 800c43c:	b082      	sub	sp, #8
 800c43e:	af00      	add	r7, sp, #0
 800c440:	6078      	str	r0, [r7, #4]
 800c442:	460b      	mov	r3, r1
 800c444:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c44c:	78fa      	ldrb	r2, [r7, #3]
 800c44e:	4611      	mov	r1, r2
 800c450:	4618      	mov	r0, r3
 800c452:	f7f7 f965 	bl	8003720 <HAL_PCD_EP_GetRxCount>
 800c456:	4603      	mov	r3, r0
}
 800c458:	4618      	mov	r0, r3
 800c45a:	3708      	adds	r7, #8
 800c45c:	46bd      	mov	sp, r7
 800c45e:	bd80      	pop	{r7, pc}

0800c460 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800c460:	b480      	push	{r7}
 800c462:	b083      	sub	sp, #12
 800c464:	af00      	add	r7, sp, #0
 800c466:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_MSC_BOT_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800c468:	4b03      	ldr	r3, [pc, #12]	; (800c478 <USBD_static_malloc+0x18>)
}
 800c46a:	4618      	mov	r0, r3
 800c46c:	370c      	adds	r7, #12
 800c46e:	46bd      	mov	sp, r7
 800c470:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c474:	4770      	bx	lr
 800c476:	bf00      	nop
 800c478:	20001c6c 	.word	0x20001c6c

0800c47c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800c47c:	b480      	push	{r7}
 800c47e:	b083      	sub	sp, #12
 800c480:	af00      	add	r7, sp, #0
 800c482:	6078      	str	r0, [r7, #4]

}
 800c484:	bf00      	nop
 800c486:	370c      	adds	r7, #12
 800c488:	46bd      	mov	sp, r7
 800c48a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c48e:	4770      	bx	lr

0800c490 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800c490:	b480      	push	{r7}
 800c492:	b085      	sub	sp, #20
 800c494:	af00      	add	r7, sp, #0
 800c496:	4603      	mov	r3, r0
 800c498:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c49a:	2300      	movs	r3, #0
 800c49c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800c49e:	79fb      	ldrb	r3, [r7, #7]
 800c4a0:	2b03      	cmp	r3, #3
 800c4a2:	d817      	bhi.n	800c4d4 <USBD_Get_USB_Status+0x44>
 800c4a4:	a201      	add	r2, pc, #4	; (adr r2, 800c4ac <USBD_Get_USB_Status+0x1c>)
 800c4a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c4aa:	bf00      	nop
 800c4ac:	0800c4bd 	.word	0x0800c4bd
 800c4b0:	0800c4c3 	.word	0x0800c4c3
 800c4b4:	0800c4c9 	.word	0x0800c4c9
 800c4b8:	0800c4cf 	.word	0x0800c4cf
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800c4bc:	2300      	movs	r3, #0
 800c4be:	73fb      	strb	r3, [r7, #15]
    break;
 800c4c0:	e00b      	b.n	800c4da <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c4c2:	2303      	movs	r3, #3
 800c4c4:	73fb      	strb	r3, [r7, #15]
    break;
 800c4c6:	e008      	b.n	800c4da <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c4c8:	2301      	movs	r3, #1
 800c4ca:	73fb      	strb	r3, [r7, #15]
    break;
 800c4cc:	e005      	b.n	800c4da <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c4ce:	2303      	movs	r3, #3
 800c4d0:	73fb      	strb	r3, [r7, #15]
    break;
 800c4d2:	e002      	b.n	800c4da <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800c4d4:	2303      	movs	r3, #3
 800c4d6:	73fb      	strb	r3, [r7, #15]
    break;
 800c4d8:	bf00      	nop
  }
  return usb_status;
 800c4da:	7bfb      	ldrb	r3, [r7, #15]
}
 800c4dc:	4618      	mov	r0, r3
 800c4de:	3714      	adds	r7, #20
 800c4e0:	46bd      	mov	sp, r7
 800c4e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4e6:	4770      	bx	lr

0800c4e8 <__libc_init_array>:
 800c4e8:	b570      	push	{r4, r5, r6, lr}
 800c4ea:	4d0d      	ldr	r5, [pc, #52]	; (800c520 <__libc_init_array+0x38>)
 800c4ec:	4c0d      	ldr	r4, [pc, #52]	; (800c524 <__libc_init_array+0x3c>)
 800c4ee:	1b64      	subs	r4, r4, r5
 800c4f0:	10a4      	asrs	r4, r4, #2
 800c4f2:	2600      	movs	r6, #0
 800c4f4:	42a6      	cmp	r6, r4
 800c4f6:	d109      	bne.n	800c50c <__libc_init_array+0x24>
 800c4f8:	4d0b      	ldr	r5, [pc, #44]	; (800c528 <__libc_init_array+0x40>)
 800c4fa:	4c0c      	ldr	r4, [pc, #48]	; (800c52c <__libc_init_array+0x44>)
 800c4fc:	f000 f820 	bl	800c540 <_init>
 800c500:	1b64      	subs	r4, r4, r5
 800c502:	10a4      	asrs	r4, r4, #2
 800c504:	2600      	movs	r6, #0
 800c506:	42a6      	cmp	r6, r4
 800c508:	d105      	bne.n	800c516 <__libc_init_array+0x2e>
 800c50a:	bd70      	pop	{r4, r5, r6, pc}
 800c50c:	f855 3b04 	ldr.w	r3, [r5], #4
 800c510:	4798      	blx	r3
 800c512:	3601      	adds	r6, #1
 800c514:	e7ee      	b.n	800c4f4 <__libc_init_array+0xc>
 800c516:	f855 3b04 	ldr.w	r3, [r5], #4
 800c51a:	4798      	blx	r3
 800c51c:	3601      	adds	r6, #1
 800c51e:	e7f2      	b.n	800c506 <__libc_init_array+0x1e>
 800c520:	0800c5d8 	.word	0x0800c5d8
 800c524:	0800c5d8 	.word	0x0800c5d8
 800c528:	0800c5d8 	.word	0x0800c5d8
 800c52c:	0800c5dc 	.word	0x0800c5dc

0800c530 <memset>:
 800c530:	4402      	add	r2, r0
 800c532:	4603      	mov	r3, r0
 800c534:	4293      	cmp	r3, r2
 800c536:	d100      	bne.n	800c53a <memset+0xa>
 800c538:	4770      	bx	lr
 800c53a:	f803 1b01 	strb.w	r1, [r3], #1
 800c53e:	e7f9      	b.n	800c534 <memset+0x4>

0800c540 <_init>:
 800c540:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c542:	bf00      	nop
 800c544:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c546:	bc08      	pop	{r3}
 800c548:	469e      	mov	lr, r3
 800c54a:	4770      	bx	lr

0800c54c <_fini>:
 800c54c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c54e:	bf00      	nop
 800c550:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c552:	bc08      	pop	{r3}
 800c554:	469e      	mov	lr, r3
 800c556:	4770      	bx	lr
