
LED_Light_USB_MSC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c484  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  0800c618  0800c618  0001c618  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c690  0800c690  00020128  2**0
                  CONTENTS
  4 .ARM          00000008  0800c690  0800c690  0001c690  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c698  0800c698  00020128  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c698  0800c698  0001c698  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c69c  0800c69c  0001c69c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000128  20000000  0800c6a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002bbc  20000128  0800c7c8  00020128  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002ce4  0800c7c8  00022ce4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020128  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b113  00000000  00000000  00020158  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004940  00000000  00000000  0003b26b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001710  00000000  00000000  0003fbb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000014d0  00000000  00000000  000412c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001bdeb  00000000  00000000  00042790  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ec06  00000000  00000000  0005e57b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009239d  00000000  00000000  0007d181  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0010f51e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005d08  00000000  00000000  0010f570  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000128 	.word	0x20000128
 80001b0:	00000000 	.word	0x00000000
 80001b4:	0800c600 	.word	0x0800c600

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	2000012c 	.word	0x2000012c
 80001d0:	0800c600 	.word	0x0800c600

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b974 	b.w	80004d4 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9d08      	ldr	r5, [sp, #32]
 800020a:	4604      	mov	r4, r0
 800020c:	468e      	mov	lr, r1
 800020e:	2b00      	cmp	r3, #0
 8000210:	d14d      	bne.n	80002ae <__udivmoddi4+0xaa>
 8000212:	428a      	cmp	r2, r1
 8000214:	4694      	mov	ip, r2
 8000216:	d969      	bls.n	80002ec <__udivmoddi4+0xe8>
 8000218:	fab2 f282 	clz	r2, r2
 800021c:	b152      	cbz	r2, 8000234 <__udivmoddi4+0x30>
 800021e:	fa01 f302 	lsl.w	r3, r1, r2
 8000222:	f1c2 0120 	rsb	r1, r2, #32
 8000226:	fa20 f101 	lsr.w	r1, r0, r1
 800022a:	fa0c fc02 	lsl.w	ip, ip, r2
 800022e:	ea41 0e03 	orr.w	lr, r1, r3
 8000232:	4094      	lsls	r4, r2
 8000234:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000238:	0c21      	lsrs	r1, r4, #16
 800023a:	fbbe f6f8 	udiv	r6, lr, r8
 800023e:	fa1f f78c 	uxth.w	r7, ip
 8000242:	fb08 e316 	mls	r3, r8, r6, lr
 8000246:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024a:	fb06 f107 	mul.w	r1, r6, r7
 800024e:	4299      	cmp	r1, r3
 8000250:	d90a      	bls.n	8000268 <__udivmoddi4+0x64>
 8000252:	eb1c 0303 	adds.w	r3, ip, r3
 8000256:	f106 30ff 	add.w	r0, r6, #4294967295
 800025a:	f080 811f 	bcs.w	800049c <__udivmoddi4+0x298>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 811c 	bls.w	800049c <__udivmoddi4+0x298>
 8000264:	3e02      	subs	r6, #2
 8000266:	4463      	add	r3, ip
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000270:	fb08 3310 	mls	r3, r8, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 f707 	mul.w	r7, r0, r7
 800027c:	42a7      	cmp	r7, r4
 800027e:	d90a      	bls.n	8000296 <__udivmoddi4+0x92>
 8000280:	eb1c 0404 	adds.w	r4, ip, r4
 8000284:	f100 33ff 	add.w	r3, r0, #4294967295
 8000288:	f080 810a 	bcs.w	80004a0 <__udivmoddi4+0x29c>
 800028c:	42a7      	cmp	r7, r4
 800028e:	f240 8107 	bls.w	80004a0 <__udivmoddi4+0x29c>
 8000292:	4464      	add	r4, ip
 8000294:	3802      	subs	r0, #2
 8000296:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029a:	1be4      	subs	r4, r4, r7
 800029c:	2600      	movs	r6, #0
 800029e:	b11d      	cbz	r5, 80002a8 <__udivmoddi4+0xa4>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c5 4300 	strd	r4, r3, [r5]
 80002a8:	4631      	mov	r1, r6
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d909      	bls.n	80002c6 <__udivmoddi4+0xc2>
 80002b2:	2d00      	cmp	r5, #0
 80002b4:	f000 80ef 	beq.w	8000496 <__udivmoddi4+0x292>
 80002b8:	2600      	movs	r6, #0
 80002ba:	e9c5 0100 	strd	r0, r1, [r5]
 80002be:	4630      	mov	r0, r6
 80002c0:	4631      	mov	r1, r6
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	fab3 f683 	clz	r6, r3
 80002ca:	2e00      	cmp	r6, #0
 80002cc:	d14a      	bne.n	8000364 <__udivmoddi4+0x160>
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d302      	bcc.n	80002d8 <__udivmoddi4+0xd4>
 80002d2:	4282      	cmp	r2, r0
 80002d4:	f200 80f9 	bhi.w	80004ca <__udivmoddi4+0x2c6>
 80002d8:	1a84      	subs	r4, r0, r2
 80002da:	eb61 0303 	sbc.w	r3, r1, r3
 80002de:	2001      	movs	r0, #1
 80002e0:	469e      	mov	lr, r3
 80002e2:	2d00      	cmp	r5, #0
 80002e4:	d0e0      	beq.n	80002a8 <__udivmoddi4+0xa4>
 80002e6:	e9c5 4e00 	strd	r4, lr, [r5]
 80002ea:	e7dd      	b.n	80002a8 <__udivmoddi4+0xa4>
 80002ec:	b902      	cbnz	r2, 80002f0 <__udivmoddi4+0xec>
 80002ee:	deff      	udf	#255	; 0xff
 80002f0:	fab2 f282 	clz	r2, r2
 80002f4:	2a00      	cmp	r2, #0
 80002f6:	f040 8092 	bne.w	800041e <__udivmoddi4+0x21a>
 80002fa:	eba1 010c 	sub.w	r1, r1, ip
 80002fe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000302:	fa1f fe8c 	uxth.w	lr, ip
 8000306:	2601      	movs	r6, #1
 8000308:	0c20      	lsrs	r0, r4, #16
 800030a:	fbb1 f3f7 	udiv	r3, r1, r7
 800030e:	fb07 1113 	mls	r1, r7, r3, r1
 8000312:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000316:	fb0e f003 	mul.w	r0, lr, r3
 800031a:	4288      	cmp	r0, r1
 800031c:	d908      	bls.n	8000330 <__udivmoddi4+0x12c>
 800031e:	eb1c 0101 	adds.w	r1, ip, r1
 8000322:	f103 38ff 	add.w	r8, r3, #4294967295
 8000326:	d202      	bcs.n	800032e <__udivmoddi4+0x12a>
 8000328:	4288      	cmp	r0, r1
 800032a:	f200 80cb 	bhi.w	80004c4 <__udivmoddi4+0x2c0>
 800032e:	4643      	mov	r3, r8
 8000330:	1a09      	subs	r1, r1, r0
 8000332:	b2a4      	uxth	r4, r4
 8000334:	fbb1 f0f7 	udiv	r0, r1, r7
 8000338:	fb07 1110 	mls	r1, r7, r0, r1
 800033c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000340:	fb0e fe00 	mul.w	lr, lr, r0
 8000344:	45a6      	cmp	lr, r4
 8000346:	d908      	bls.n	800035a <__udivmoddi4+0x156>
 8000348:	eb1c 0404 	adds.w	r4, ip, r4
 800034c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000350:	d202      	bcs.n	8000358 <__udivmoddi4+0x154>
 8000352:	45a6      	cmp	lr, r4
 8000354:	f200 80bb 	bhi.w	80004ce <__udivmoddi4+0x2ca>
 8000358:	4608      	mov	r0, r1
 800035a:	eba4 040e 	sub.w	r4, r4, lr
 800035e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000362:	e79c      	b.n	800029e <__udivmoddi4+0x9a>
 8000364:	f1c6 0720 	rsb	r7, r6, #32
 8000368:	40b3      	lsls	r3, r6
 800036a:	fa22 fc07 	lsr.w	ip, r2, r7
 800036e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000372:	fa20 f407 	lsr.w	r4, r0, r7
 8000376:	fa01 f306 	lsl.w	r3, r1, r6
 800037a:	431c      	orrs	r4, r3
 800037c:	40f9      	lsrs	r1, r7
 800037e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000382:	fa00 f306 	lsl.w	r3, r0, r6
 8000386:	fbb1 f8f9 	udiv	r8, r1, r9
 800038a:	0c20      	lsrs	r0, r4, #16
 800038c:	fa1f fe8c 	uxth.w	lr, ip
 8000390:	fb09 1118 	mls	r1, r9, r8, r1
 8000394:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000398:	fb08 f00e 	mul.w	r0, r8, lr
 800039c:	4288      	cmp	r0, r1
 800039e:	fa02 f206 	lsl.w	r2, r2, r6
 80003a2:	d90b      	bls.n	80003bc <__udivmoddi4+0x1b8>
 80003a4:	eb1c 0101 	adds.w	r1, ip, r1
 80003a8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003ac:	f080 8088 	bcs.w	80004c0 <__udivmoddi4+0x2bc>
 80003b0:	4288      	cmp	r0, r1
 80003b2:	f240 8085 	bls.w	80004c0 <__udivmoddi4+0x2bc>
 80003b6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ba:	4461      	add	r1, ip
 80003bc:	1a09      	subs	r1, r1, r0
 80003be:	b2a4      	uxth	r4, r4
 80003c0:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c4:	fb09 1110 	mls	r1, r9, r0, r1
 80003c8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003cc:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d0:	458e      	cmp	lr, r1
 80003d2:	d908      	bls.n	80003e6 <__udivmoddi4+0x1e2>
 80003d4:	eb1c 0101 	adds.w	r1, ip, r1
 80003d8:	f100 34ff 	add.w	r4, r0, #4294967295
 80003dc:	d26c      	bcs.n	80004b8 <__udivmoddi4+0x2b4>
 80003de:	458e      	cmp	lr, r1
 80003e0:	d96a      	bls.n	80004b8 <__udivmoddi4+0x2b4>
 80003e2:	3802      	subs	r0, #2
 80003e4:	4461      	add	r1, ip
 80003e6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ea:	fba0 9402 	umull	r9, r4, r0, r2
 80003ee:	eba1 010e 	sub.w	r1, r1, lr
 80003f2:	42a1      	cmp	r1, r4
 80003f4:	46c8      	mov	r8, r9
 80003f6:	46a6      	mov	lr, r4
 80003f8:	d356      	bcc.n	80004a8 <__udivmoddi4+0x2a4>
 80003fa:	d053      	beq.n	80004a4 <__udivmoddi4+0x2a0>
 80003fc:	b15d      	cbz	r5, 8000416 <__udivmoddi4+0x212>
 80003fe:	ebb3 0208 	subs.w	r2, r3, r8
 8000402:	eb61 010e 	sbc.w	r1, r1, lr
 8000406:	fa01 f707 	lsl.w	r7, r1, r7
 800040a:	fa22 f306 	lsr.w	r3, r2, r6
 800040e:	40f1      	lsrs	r1, r6
 8000410:	431f      	orrs	r7, r3
 8000412:	e9c5 7100 	strd	r7, r1, [r5]
 8000416:	2600      	movs	r6, #0
 8000418:	4631      	mov	r1, r6
 800041a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041e:	f1c2 0320 	rsb	r3, r2, #32
 8000422:	40d8      	lsrs	r0, r3
 8000424:	fa0c fc02 	lsl.w	ip, ip, r2
 8000428:	fa21 f303 	lsr.w	r3, r1, r3
 800042c:	4091      	lsls	r1, r2
 800042e:	4301      	orrs	r1, r0
 8000430:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000434:	fa1f fe8c 	uxth.w	lr, ip
 8000438:	fbb3 f0f7 	udiv	r0, r3, r7
 800043c:	fb07 3610 	mls	r6, r7, r0, r3
 8000440:	0c0b      	lsrs	r3, r1, #16
 8000442:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000446:	fb00 f60e 	mul.w	r6, r0, lr
 800044a:	429e      	cmp	r6, r3
 800044c:	fa04 f402 	lsl.w	r4, r4, r2
 8000450:	d908      	bls.n	8000464 <__udivmoddi4+0x260>
 8000452:	eb1c 0303 	adds.w	r3, ip, r3
 8000456:	f100 38ff 	add.w	r8, r0, #4294967295
 800045a:	d22f      	bcs.n	80004bc <__udivmoddi4+0x2b8>
 800045c:	429e      	cmp	r6, r3
 800045e:	d92d      	bls.n	80004bc <__udivmoddi4+0x2b8>
 8000460:	3802      	subs	r0, #2
 8000462:	4463      	add	r3, ip
 8000464:	1b9b      	subs	r3, r3, r6
 8000466:	b289      	uxth	r1, r1
 8000468:	fbb3 f6f7 	udiv	r6, r3, r7
 800046c:	fb07 3316 	mls	r3, r7, r6, r3
 8000470:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000474:	fb06 f30e 	mul.w	r3, r6, lr
 8000478:	428b      	cmp	r3, r1
 800047a:	d908      	bls.n	800048e <__udivmoddi4+0x28a>
 800047c:	eb1c 0101 	adds.w	r1, ip, r1
 8000480:	f106 38ff 	add.w	r8, r6, #4294967295
 8000484:	d216      	bcs.n	80004b4 <__udivmoddi4+0x2b0>
 8000486:	428b      	cmp	r3, r1
 8000488:	d914      	bls.n	80004b4 <__udivmoddi4+0x2b0>
 800048a:	3e02      	subs	r6, #2
 800048c:	4461      	add	r1, ip
 800048e:	1ac9      	subs	r1, r1, r3
 8000490:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000494:	e738      	b.n	8000308 <__udivmoddi4+0x104>
 8000496:	462e      	mov	r6, r5
 8000498:	4628      	mov	r0, r5
 800049a:	e705      	b.n	80002a8 <__udivmoddi4+0xa4>
 800049c:	4606      	mov	r6, r0
 800049e:	e6e3      	b.n	8000268 <__udivmoddi4+0x64>
 80004a0:	4618      	mov	r0, r3
 80004a2:	e6f8      	b.n	8000296 <__udivmoddi4+0x92>
 80004a4:	454b      	cmp	r3, r9
 80004a6:	d2a9      	bcs.n	80003fc <__udivmoddi4+0x1f8>
 80004a8:	ebb9 0802 	subs.w	r8, r9, r2
 80004ac:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b0:	3801      	subs	r0, #1
 80004b2:	e7a3      	b.n	80003fc <__udivmoddi4+0x1f8>
 80004b4:	4646      	mov	r6, r8
 80004b6:	e7ea      	b.n	800048e <__udivmoddi4+0x28a>
 80004b8:	4620      	mov	r0, r4
 80004ba:	e794      	b.n	80003e6 <__udivmoddi4+0x1e2>
 80004bc:	4640      	mov	r0, r8
 80004be:	e7d1      	b.n	8000464 <__udivmoddi4+0x260>
 80004c0:	46d0      	mov	r8, sl
 80004c2:	e77b      	b.n	80003bc <__udivmoddi4+0x1b8>
 80004c4:	3b02      	subs	r3, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	e732      	b.n	8000330 <__udivmoddi4+0x12c>
 80004ca:	4630      	mov	r0, r6
 80004cc:	e709      	b.n	80002e2 <__udivmoddi4+0xde>
 80004ce:	4464      	add	r4, ip
 80004d0:	3802      	subs	r0, #2
 80004d2:	e742      	b.n	800035a <__udivmoddi4+0x156>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <Animation_PWM_Pulse_Interrupt>:
void Animation_Timer_Error_Interrupt(){
	HAL_TIM_PWM_Stop_IT(&htim1, TIM_CHANNEL_1);
	animation_i = 0;
	animation_busy = 0;
}
void Animation_PWM_Pulse_Interrupt(){
 80004d8:	b580      	push	{r7, lr}
 80004da:	af00      	add	r7, sp, #0
	if(animation_i < ((animation_data_config.image_size * 8) + animation_data_config.stop_pulses)){
 80004dc:	4b2b      	ldr	r3, [pc, #172]	; (800058c <Animation_PWM_Pulse_Interrupt+0xb4>)
 80004de:	68db      	ldr	r3, [r3, #12]
 80004e0:	00db      	lsls	r3, r3, #3
 80004e2:	4a2a      	ldr	r2, [pc, #168]	; (800058c <Animation_PWM_Pulse_Interrupt+0xb4>)
 80004e4:	88d2      	ldrh	r2, [r2, #6]
 80004e6:	441a      	add	r2, r3
 80004e8:	4b29      	ldr	r3, [pc, #164]	; (8000590 <Animation_PWM_Pulse_Interrupt+0xb8>)
 80004ea:	681b      	ldr	r3, [r3, #0]
 80004ec:	429a      	cmp	r2, r3
 80004ee:	d944      	bls.n	800057a <Animation_PWM_Pulse_Interrupt+0xa2>
		if((animation_i + 1) >= ((animation_data_config.image_size * 8) + 1)){
 80004f0:	4b27      	ldr	r3, [pc, #156]	; (8000590 <Animation_PWM_Pulse_Interrupt+0xb8>)
 80004f2:	681b      	ldr	r3, [r3, #0]
 80004f4:	1c5a      	adds	r2, r3, #1
 80004f6:	4b25      	ldr	r3, [pc, #148]	; (800058c <Animation_PWM_Pulse_Interrupt+0xb4>)
 80004f8:	68db      	ldr	r3, [r3, #12]
 80004fa:	00db      	lsls	r3, r3, #3
 80004fc:	3301      	adds	r3, #1
 80004fe:	429a      	cmp	r2, r3
 8000500:	d304      	bcc.n	800050c <Animation_PWM_Pulse_Interrupt+0x34>
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 8000502:	4b24      	ldr	r3, [pc, #144]	; (8000594 <Animation_PWM_Pulse_Interrupt+0xbc>)
 8000504:	681b      	ldr	r3, [r3, #0]
 8000506:	2200      	movs	r2, #0
 8000508:	635a      	str	r2, [r3, #52]	; 0x34
 800050a:	e030      	b.n	800056e <Animation_PWM_Pulse_Interrupt+0x96>
		}else{
			switch(animation_mode){
 800050c:	4b22      	ldr	r3, [pc, #136]	; (8000598 <Animation_PWM_Pulse_Interrupt+0xc0>)
 800050e:	781b      	ldrb	r3, [r3, #0]
 8000510:	2b00      	cmp	r3, #0
 8000512:	d002      	beq.n	800051a <Animation_PWM_Pulse_Interrupt+0x42>
 8000514:	2b01      	cmp	r3, #1
 8000516:	d017      	beq.n	8000548 <Animation_PWM_Pulse_Interrupt+0x70>
 8000518:	e029      	b.n	800056e <Animation_PWM_Pulse_Interrupt+0x96>
				case ANIMATION_MODE_COLOR:
					Animation_Set_Bit((uint8_t)(((uint32_t)animation_color >> ((uint32_t)animation_i % 24)) & (uint32_t)1));
 800051a:	4b20      	ldr	r3, [pc, #128]	; (800059c <Animation_PWM_Pulse_Interrupt+0xc4>)
 800051c:	6818      	ldr	r0, [r3, #0]
 800051e:	4b1c      	ldr	r3, [pc, #112]	; (8000590 <Animation_PWM_Pulse_Interrupt+0xb8>)
 8000520:	6819      	ldr	r1, [r3, #0]
 8000522:	4b1f      	ldr	r3, [pc, #124]	; (80005a0 <Animation_PWM_Pulse_Interrupt+0xc8>)
 8000524:	fba3 2301 	umull	r2, r3, r3, r1
 8000528:	091a      	lsrs	r2, r3, #4
 800052a:	4613      	mov	r3, r2
 800052c:	005b      	lsls	r3, r3, #1
 800052e:	4413      	add	r3, r2
 8000530:	00db      	lsls	r3, r3, #3
 8000532:	1aca      	subs	r2, r1, r3
 8000534:	fa20 f302 	lsr.w	r3, r0, r2
 8000538:	b2db      	uxtb	r3, r3
 800053a:	f003 0301 	and.w	r3, r3, #1
 800053e:	b2db      	uxtb	r3, r3
 8000540:	4618      	mov	r0, r3
 8000542:	f000 f83d 	bl	80005c0 <Animation_Set_Bit>
				break;
 8000546:	e012      	b.n	800056e <Animation_PWM_Pulse_Interrupt+0x96>
				case ANIMATION_MODE_IMAGE:
					Animation_Set_Bit(Animation_Data_Get_Bit(animation_image, animation_i / 8, animation_i % 8));
 8000548:	4b16      	ldr	r3, [pc, #88]	; (80005a4 <Animation_PWM_Pulse_Interrupt+0xcc>)
 800054a:	8818      	ldrh	r0, [r3, #0]
 800054c:	4b10      	ldr	r3, [pc, #64]	; (8000590 <Animation_PWM_Pulse_Interrupt+0xb8>)
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	08d9      	lsrs	r1, r3, #3
 8000552:	4b0f      	ldr	r3, [pc, #60]	; (8000590 <Animation_PWM_Pulse_Interrupt+0xb8>)
 8000554:	681b      	ldr	r3, [r3, #0]
 8000556:	b2db      	uxtb	r3, r3
 8000558:	f003 0307 	and.w	r3, r3, #7
 800055c:	b2db      	uxtb	r3, r3
 800055e:	461a      	mov	r2, r3
 8000560:	f000 f964 	bl	800082c <Animation_Data_Get_Bit>
 8000564:	4603      	mov	r3, r0
 8000566:	4618      	mov	r0, r3
 8000568:	f000 f82a 	bl	80005c0 <Animation_Set_Bit>
				break;
 800056c:	bf00      	nop
			}
		}
		animation_i++;
 800056e:	4b08      	ldr	r3, [pc, #32]	; (8000590 <Animation_PWM_Pulse_Interrupt+0xb8>)
 8000570:	681b      	ldr	r3, [r3, #0]
 8000572:	3301      	adds	r3, #1
 8000574:	4a06      	ldr	r2, [pc, #24]	; (8000590 <Animation_PWM_Pulse_Interrupt+0xb8>)
 8000576:	6013      	str	r3, [r2, #0]
	}else{
		HAL_TIM_PWM_Stop_IT(&htim1, TIM_CHANNEL_1);
		animation_busy = 0;
	}
}
 8000578:	e006      	b.n	8000588 <Animation_PWM_Pulse_Interrupt+0xb0>
		HAL_TIM_PWM_Stop_IT(&htim1, TIM_CHANNEL_1);
 800057a:	2100      	movs	r1, #0
 800057c:	4805      	ldr	r0, [pc, #20]	; (8000594 <Animation_PWM_Pulse_Interrupt+0xbc>)
 800057e:	f005 fc1b 	bl	8005db8 <HAL_TIM_PWM_Stop_IT>
		animation_busy = 0;
 8000582:	4b09      	ldr	r3, [pc, #36]	; (80005a8 <Animation_PWM_Pulse_Interrupt+0xd0>)
 8000584:	2200      	movs	r2, #0
 8000586:	701a      	strb	r2, [r3, #0]
}
 8000588:	bf00      	nop
 800058a:	bd80      	pop	{r7, pc}
 800058c:	20000154 	.word	0x20000154
 8000590:	20000150 	.word	0x20000150
 8000594:	20001234 	.word	0x20001234
 8000598:	20000145 	.word	0x20000145
 800059c:	20000148 	.word	0x20000148
 80005a0:	aaaaaaab 	.word	0xaaaaaaab
 80005a4:	2000014c 	.word	0x2000014c
 80005a8:	20000144 	.word	0x20000144

080005ac <Animation_Busy>:

uint8_t Animation_Busy(){
 80005ac:	b580      	push	{r7, lr}
 80005ae:	af00      	add	r7, sp, #0
	Animation_Data_Buffer();
 80005b0:	f000 fa78 	bl	8000aa4 <Animation_Data_Buffer>
	return animation_busy;
 80005b4:	4b01      	ldr	r3, [pc, #4]	; (80005bc <Animation_Busy+0x10>)
 80005b6:	781b      	ldrb	r3, [r3, #0]
}
 80005b8:	4618      	mov	r0, r3
 80005ba:	bd80      	pop	{r7, pc}
 80005bc:	20000144 	.word	0x20000144

080005c0 <Animation_Set_Bit>:
void Animation_Set_Bit(uint8_t bit){
 80005c0:	b480      	push	{r7}
 80005c2:	b083      	sub	sp, #12
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	4603      	mov	r3, r0
 80005c8:	71fb      	strb	r3, [r7, #7]
	if(bit){
 80005ca:	79fb      	ldrb	r3, [r7, #7]
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d005      	beq.n	80005dc <Animation_Set_Bit+0x1c>
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, animation_data_config.bit_1);
 80005d0:	4b08      	ldr	r3, [pc, #32]	; (80005f4 <Animation_Set_Bit+0x34>)
 80005d2:	791a      	ldrb	r2, [r3, #4]
 80005d4:	4b08      	ldr	r3, [pc, #32]	; (80005f8 <Animation_Set_Bit+0x38>)
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	635a      	str	r2, [r3, #52]	; 0x34
	}else{
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, animation_data_config.bit_0);
	}
}
 80005da:	e004      	b.n	80005e6 <Animation_Set_Bit+0x26>
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, animation_data_config.bit_0);
 80005dc:	4b05      	ldr	r3, [pc, #20]	; (80005f4 <Animation_Set_Bit+0x34>)
 80005de:	78da      	ldrb	r2, [r3, #3]
 80005e0:	4b05      	ldr	r3, [pc, #20]	; (80005f8 <Animation_Set_Bit+0x38>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	635a      	str	r2, [r3, #52]	; 0x34
}
 80005e6:	bf00      	nop
 80005e8:	370c      	adds	r7, #12
 80005ea:	46bd      	mov	sp, r7
 80005ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f0:	4770      	bx	lr
 80005f2:	bf00      	nop
 80005f4:	20000154 	.word	0x20000154
 80005f8:	20001234 	.word	0x20001234

080005fc <Animation_Display_Color>:
void Animation_Stop(){
	HAL_TIM_PWM_Stop_IT(&htim1, TIM_CHANNEL_1);
	animation_i = 0;
	animation_busy = 0;
}
void Animation_Display_Color(uint32_t color){
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b082      	sub	sp, #8
 8000600:	af00      	add	r7, sp, #0
 8000602:	6078      	str	r0, [r7, #4]
	if(animation_data_config.image_size){
 8000604:	4b10      	ldr	r3, [pc, #64]	; (8000648 <Animation_Display_Color+0x4c>)
 8000606:	68db      	ldr	r3, [r3, #12]
 8000608:	2b00      	cmp	r3, #0
 800060a:	d018      	beq.n	800063e <Animation_Display_Color+0x42>
		animation_busy = 1;
 800060c:	4b0f      	ldr	r3, [pc, #60]	; (800064c <Animation_Display_Color+0x50>)
 800060e:	2201      	movs	r2, #1
 8000610:	701a      	strb	r2, [r3, #0]
		animation_i = 0;
 8000612:	4b0f      	ldr	r3, [pc, #60]	; (8000650 <Animation_Display_Color+0x54>)
 8000614:	2200      	movs	r2, #0
 8000616:	601a      	str	r2, [r3, #0]
		animation_color = color;
 8000618:	4a0e      	ldr	r2, [pc, #56]	; (8000654 <Animation_Display_Color+0x58>)
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	6013      	str	r3, [r2, #0]
		animation_mode = ANIMATION_MODE_COLOR;
 800061e:	4b0e      	ldr	r3, [pc, #56]	; (8000658 <Animation_Display_Color+0x5c>)
 8000620:	2200      	movs	r2, #0
 8000622:	701a      	strb	r2, [r3, #0]

		HAL_TIM_PWM_PulseFinishedCallback(&htim1);
 8000624:	480d      	ldr	r0, [pc, #52]	; (800065c <Animation_Display_Color+0x60>)
 8000626:	f000 fb61 	bl	8000cec <HAL_TIM_PWM_PulseFinishedCallback>
		HAL_TIM_PWM_Start_IT(&htim1, TIM_CHANNEL_1);
 800062a:	2100      	movs	r1, #0
 800062c:	480b      	ldr	r0, [pc, #44]	; (800065c <Animation_Display_Color+0x60>)
 800062e:	f005 fac5 	bl	8005bbc <HAL_TIM_PWM_Start_IT>
		while(Animation_Busy());
 8000632:	bf00      	nop
 8000634:	f7ff ffba 	bl	80005ac <Animation_Busy>
 8000638:	4603      	mov	r3, r0
 800063a:	2b00      	cmp	r3, #0
 800063c:	d1fa      	bne.n	8000634 <Animation_Display_Color+0x38>
	}
}
 800063e:	bf00      	nop
 8000640:	3708      	adds	r7, #8
 8000642:	46bd      	mov	sp, r7
 8000644:	bd80      	pop	{r7, pc}
 8000646:	bf00      	nop
 8000648:	20000154 	.word	0x20000154
 800064c:	20000144 	.word	0x20000144
 8000650:	20000150 	.word	0x20000150
 8000654:	20000148 	.word	0x20000148
 8000658:	20000145 	.word	0x20000145
 800065c:	20001234 	.word	0x20001234

08000660 <Animation_Display_Image>:
void Animation_Display_Image(uint16_t image){
 8000660:	b580      	push	{r7, lr}
 8000662:	b082      	sub	sp, #8
 8000664:	af00      	add	r7, sp, #0
 8000666:	4603      	mov	r3, r0
 8000668:	80fb      	strh	r3, [r7, #6]
	if((image < animation_data_config.images) && animation_data_config.image_size){
 800066a:	88fa      	ldrh	r2, [r7, #6]
 800066c:	4b14      	ldr	r3, [pc, #80]	; (80006c0 <Animation_Display_Image+0x60>)
 800066e:	689b      	ldr	r3, [r3, #8]
 8000670:	429a      	cmp	r2, r3
 8000672:	d220      	bcs.n	80006b6 <Animation_Display_Image+0x56>
 8000674:	4b12      	ldr	r3, [pc, #72]	; (80006c0 <Animation_Display_Image+0x60>)
 8000676:	68db      	ldr	r3, [r3, #12]
 8000678:	2b00      	cmp	r3, #0
 800067a:	d01c      	beq.n	80006b6 <Animation_Display_Image+0x56>
		animation_busy = 1;
 800067c:	4b11      	ldr	r3, [pc, #68]	; (80006c4 <Animation_Display_Image+0x64>)
 800067e:	2201      	movs	r2, #1
 8000680:	701a      	strb	r2, [r3, #0]
		animation_image = image;
 8000682:	4a11      	ldr	r2, [pc, #68]	; (80006c8 <Animation_Display_Image+0x68>)
 8000684:	88fb      	ldrh	r3, [r7, #6]
 8000686:	8013      	strh	r3, [r2, #0]
		animation_i = 0;
 8000688:	4b10      	ldr	r3, [pc, #64]	; (80006cc <Animation_Display_Image+0x6c>)
 800068a:	2200      	movs	r2, #0
 800068c:	601a      	str	r2, [r3, #0]
		animation_mode = ANIMATION_MODE_IMAGE;
 800068e:	4b10      	ldr	r3, [pc, #64]	; (80006d0 <Animation_Display_Image+0x70>)
 8000690:	2201      	movs	r2, #1
 8000692:	701a      	strb	r2, [r3, #0]

		Animation_Data_Prefetch(image);
 8000694:	88fb      	ldrh	r3, [r7, #6]
 8000696:	4618      	mov	r0, r3
 8000698:	f000 f846 	bl	8000728 <Animation_Data_Prefetch>
		HAL_TIM_PWM_PulseFinishedCallback(&htim1);
 800069c:	480d      	ldr	r0, [pc, #52]	; (80006d4 <Animation_Display_Image+0x74>)
 800069e:	f000 fb25 	bl	8000cec <HAL_TIM_PWM_PulseFinishedCallback>
		HAL_TIM_PWM_Start_IT(&htim1, TIM_CHANNEL_1);
 80006a2:	2100      	movs	r1, #0
 80006a4:	480b      	ldr	r0, [pc, #44]	; (80006d4 <Animation_Display_Image+0x74>)
 80006a6:	f005 fa89 	bl	8005bbc <HAL_TIM_PWM_Start_IT>
		while(Animation_Busy());
 80006aa:	bf00      	nop
 80006ac:	f7ff ff7e 	bl	80005ac <Animation_Busy>
 80006b0:	4603      	mov	r3, r0
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d1fa      	bne.n	80006ac <Animation_Display_Image+0x4c>
	}
}
 80006b6:	bf00      	nop
 80006b8:	3708      	adds	r7, #8
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bd80      	pop	{r7, pc}
 80006be:	bf00      	nop
 80006c0:	20000154 	.word	0x20000154
 80006c4:	20000144 	.word	0x20000144
 80006c8:	2000014c 	.word	0x2000014c
 80006cc:	20000150 	.word	0x20000150
 80006d0:	20000145 	.word	0x20000145
 80006d4:	20001234 	.word	0x20001234

080006d8 <Animation_Init>:
void Animation_Init(){
 80006d8:	b580      	push	{r7, lr}
 80006da:	af00      	add	r7, sp, #0
	Animation_Data_Init();
 80006dc:	f000 f8e2 	bl	80008a4 <Animation_Data_Init>

	if(animation_data_config.images && animation_data_config.image_size){
 80006e0:	4b0f      	ldr	r3, [pc, #60]	; (8000720 <Animation_Init+0x48>)
 80006e2:	689b      	ldr	r3, [r3, #8]
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d018      	beq.n	800071a <Animation_Init+0x42>
 80006e8:	4b0d      	ldr	r3, [pc, #52]	; (8000720 <Animation_Init+0x48>)
 80006ea:	68db      	ldr	r3, [r3, #12]
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d014      	beq.n	800071a <Animation_Init+0x42>
		htim1.Init.Prescaler = animation_data_config.clkdiv;
 80006f0:	4b0b      	ldr	r3, [pc, #44]	; (8000720 <Animation_Init+0x48>)
 80006f2:	881b      	ldrh	r3, [r3, #0]
 80006f4:	461a      	mov	r2, r3
 80006f6:	4b0b      	ldr	r3, [pc, #44]	; (8000724 <Animation_Init+0x4c>)
 80006f8:	605a      	str	r2, [r3, #4]
		htim1.Init.Period = animation_data_config.pulse;
 80006fa:	4b09      	ldr	r3, [pc, #36]	; (8000720 <Animation_Init+0x48>)
 80006fc:	789b      	ldrb	r3, [r3, #2]
 80006fe:	461a      	mov	r2, r3
 8000700:	4b08      	ldr	r3, [pc, #32]	; (8000724 <Animation_Init+0x4c>)
 8000702:	60da      	str	r2, [r3, #12]
		if(HAL_TIM_Base_Init(&htim1) != HAL_OK){Error_Handler();}
 8000704:	4807      	ldr	r0, [pc, #28]	; (8000724 <Animation_Init+0x4c>)
 8000706:	f005 f9b1 	bl	8005a6c <HAL_TIM_Base_Init>
 800070a:	4603      	mov	r3, r0
 800070c:	2b00      	cmp	r3, #0
 800070e:	d001      	beq.n	8000714 <Animation_Init+0x3c>
 8000710:	f000 ffaa 	bl	8001668 <Error_Handler>
		Animation_Display_Color(0);
 8000714:	2000      	movs	r0, #0
 8000716:	f7ff ff71 	bl	80005fc <Animation_Display_Color>
	}
}
 800071a:	bf00      	nop
 800071c:	bd80      	pop	{r7, pc}
 800071e:	bf00      	nop
 8000720:	20000154 	.word	0x20000154
 8000724:	20001234 	.word	0x20001234

08000728 <Animation_Data_Prefetch>:
static uint8_t animation_data[ANIMATION_DATA_BUFFER_SIZE];
static uint32_t animation_data_buffered = 0;
static uint8_t animation_data_buffering_rq = 0;
static uint16_t animation_data_buffering_image = 0;

void Animation_Data_Prefetch(uint16_t image){
 8000728:	b580      	push	{r7, lr}
 800072a:	b084      	sub	sp, #16
 800072c:	af00      	add	r7, sp, #0
 800072e:	4603      	mov	r3, r0
 8000730:	80fb      	strh	r3, [r7, #6]
	uint32_t data_size = 0;
 8000732:	2300      	movs	r3, #0
 8000734:	60fb      	str	r3, [r7, #12]
	if(animation_data_config.image_size < ANIMATION_DATA_BUFFER_SIZE){
 8000736:	4b11      	ldr	r3, [pc, #68]	; (800077c <Animation_Data_Prefetch+0x54>)
 8000738:	68db      	ldr	r3, [r3, #12]
 800073a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800073e:	d203      	bcs.n	8000748 <Animation_Data_Prefetch+0x20>
		data_size = animation_data_config.image_size;
 8000740:	4b0e      	ldr	r3, [pc, #56]	; (800077c <Animation_Data_Prefetch+0x54>)
 8000742:	68db      	ldr	r3, [r3, #12]
 8000744:	60fb      	str	r3, [r7, #12]
 8000746:	e002      	b.n	800074e <Animation_Data_Prefetch+0x26>
	}else{
		data_size = ANIMATION_DATA_BUFFER_SIZE;
 8000748:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800074c:	60fb      	str	r3, [r7, #12]
	}
	W25Q_Read(animation_data, ANIMATION_DATA_HEADER_SIZE + (animation_data_config.image_size * image), data_size);
 800074e:	4b0b      	ldr	r3, [pc, #44]	; (800077c <Animation_Data_Prefetch+0x54>)
 8000750:	68db      	ldr	r3, [r3, #12]
 8000752:	88fa      	ldrh	r2, [r7, #6]
 8000754:	fb02 f303 	mul.w	r3, r2, r3
 8000758:	3313      	adds	r3, #19
 800075a:	68fa      	ldr	r2, [r7, #12]
 800075c:	b292      	uxth	r2, r2
 800075e:	4619      	mov	r1, r3
 8000760:	4807      	ldr	r0, [pc, #28]	; (8000780 <Animation_Data_Prefetch+0x58>)
 8000762:	f000 fd1b 	bl	800119c <W25Q_Read>
	animation_data_buffered = data_size;
 8000766:	4a07      	ldr	r2, [pc, #28]	; (8000784 <Animation_Data_Prefetch+0x5c>)
 8000768:	68fb      	ldr	r3, [r7, #12]
 800076a:	6013      	str	r3, [r2, #0]
	animation_data_buffering_rq = 0;
 800076c:	4b06      	ldr	r3, [pc, #24]	; (8000788 <Animation_Data_Prefetch+0x60>)
 800076e:	2200      	movs	r2, #0
 8000770:	701a      	strb	r2, [r3, #0]
}
 8000772:	bf00      	nop
 8000774:	3710      	adds	r7, #16
 8000776:	46bd      	mov	sp, r7
 8000778:	bd80      	pop	{r7, pc}
 800077a:	bf00      	nop
 800077c:	20000154 	.word	0x20000154
 8000780:	20000164 	.word	0x20000164
 8000784:	20001164 	.word	0x20001164
 8000788:	20001168 	.word	0x20001168

0800078c <Animation_Data_Read>:
void Animation_Data_Read(uint16_t image){
 800078c:	b580      	push	{r7, lr}
 800078e:	b084      	sub	sp, #16
 8000790:	af00      	add	r7, sp, #0
 8000792:	4603      	mov	r3, r0
 8000794:	80fb      	strh	r3, [r7, #6]
	uint32_t data_size = 0;
 8000796:	2300      	movs	r3, #0
 8000798:	60fb      	str	r3, [r7, #12]
	if((animation_data_config.image_size - animation_data_buffered) < ANIMATION_DATA_BUFFER_SIZE_HALF){
 800079a:	4b20      	ldr	r3, [pc, #128]	; (800081c <Animation_Data_Read+0x90>)
 800079c:	68da      	ldr	r2, [r3, #12]
 800079e:	4b20      	ldr	r3, [pc, #128]	; (8000820 <Animation_Data_Read+0x94>)
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	1ad3      	subs	r3, r2, r3
 80007a4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80007a8:	d206      	bcs.n	80007b8 <Animation_Data_Read+0x2c>
		data_size = animation_data_config.image_size - animation_data_buffered;
 80007aa:	4b1c      	ldr	r3, [pc, #112]	; (800081c <Animation_Data_Read+0x90>)
 80007ac:	68da      	ldr	r2, [r3, #12]
 80007ae:	4b1c      	ldr	r3, [pc, #112]	; (8000820 <Animation_Data_Read+0x94>)
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	1ad3      	subs	r3, r2, r3
 80007b4:	60fb      	str	r3, [r7, #12]
 80007b6:	e002      	b.n	80007be <Animation_Data_Read+0x32>
	}else{
		data_size = ANIMATION_DATA_BUFFER_SIZE_HALF;
 80007b8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80007bc:	60fb      	str	r3, [r7, #12]
	}

	if(!(animation_data_buffered % ANIMATION_DATA_BUFFER_SIZE)){
 80007be:	4b18      	ldr	r3, [pc, #96]	; (8000820 <Animation_Data_Read+0x94>)
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d10f      	bne.n	80007ea <Animation_Data_Read+0x5e>
		//If requested byte 0 of buffer
		W25Q_Read_DMA(&animation_data[0], data_size, ANIMATION_DATA_HEADER_SIZE + (animation_data_config.image_size * image) + animation_data_buffered);
 80007ca:	68fb      	ldr	r3, [r7, #12]
 80007cc:	b299      	uxth	r1, r3
 80007ce:	4b13      	ldr	r3, [pc, #76]	; (800081c <Animation_Data_Read+0x90>)
 80007d0:	68db      	ldr	r3, [r3, #12]
 80007d2:	88fa      	ldrh	r2, [r7, #6]
 80007d4:	fb03 f202 	mul.w	r2, r3, r2
 80007d8:	4b11      	ldr	r3, [pc, #68]	; (8000820 <Animation_Data_Read+0x94>)
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	4413      	add	r3, r2
 80007de:	3313      	adds	r3, #19
 80007e0:	461a      	mov	r2, r3
 80007e2:	4810      	ldr	r0, [pc, #64]	; (8000824 <Animation_Data_Read+0x98>)
 80007e4:	f000 fca2 	bl	800112c <W25Q_Read_DMA>
 80007e8:	e00e      	b.n	8000808 <Animation_Data_Read+0x7c>
	}else{
		//If requested middle right byte of buffer
		W25Q_Read_DMA(&animation_data[ANIMATION_DATA_BUFFER_SIZE_HALF], data_size, ANIMATION_DATA_HEADER_SIZE + (animation_data_config.image_size * image) + animation_data_buffered);
 80007ea:	68fb      	ldr	r3, [r7, #12]
 80007ec:	b299      	uxth	r1, r3
 80007ee:	4b0b      	ldr	r3, [pc, #44]	; (800081c <Animation_Data_Read+0x90>)
 80007f0:	68db      	ldr	r3, [r3, #12]
 80007f2:	88fa      	ldrh	r2, [r7, #6]
 80007f4:	fb03 f202 	mul.w	r2, r3, r2
 80007f8:	4b09      	ldr	r3, [pc, #36]	; (8000820 <Animation_Data_Read+0x94>)
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	4413      	add	r3, r2
 80007fe:	3313      	adds	r3, #19
 8000800:	461a      	mov	r2, r3
 8000802:	4809      	ldr	r0, [pc, #36]	; (8000828 <Animation_Data_Read+0x9c>)
 8000804:	f000 fc92 	bl	800112c <W25Q_Read_DMA>
	}

	animation_data_buffered += data_size;
 8000808:	4b05      	ldr	r3, [pc, #20]	; (8000820 <Animation_Data_Read+0x94>)
 800080a:	681a      	ldr	r2, [r3, #0]
 800080c:	68fb      	ldr	r3, [r7, #12]
 800080e:	4413      	add	r3, r2
 8000810:	4a03      	ldr	r2, [pc, #12]	; (8000820 <Animation_Data_Read+0x94>)
 8000812:	6013      	str	r3, [r2, #0]
}
 8000814:	bf00      	nop
 8000816:	3710      	adds	r7, #16
 8000818:	46bd      	mov	sp, r7
 800081a:	bd80      	pop	{r7, pc}
 800081c:	20000154 	.word	0x20000154
 8000820:	20001164 	.word	0x20001164
 8000824:	20000164 	.word	0x20000164
 8000828:	20000964 	.word	0x20000964

0800082c <Animation_Data_Get_Bit>:
uint8_t Animation_Data_Get_Bit(uint16_t image, uint32_t byte, uint8_t bit){
 800082c:	b480      	push	{r7}
 800082e:	b083      	sub	sp, #12
 8000830:	af00      	add	r7, sp, #0
 8000832:	4603      	mov	r3, r0
 8000834:	6039      	str	r1, [r7, #0]
 8000836:	80fb      	strh	r3, [r7, #6]
 8000838:	4613      	mov	r3, r2
 800083a:	717b      	strb	r3, [r7, #5]
	if(byte && !(byte % ANIMATION_DATA_BUFFER_SIZE_HALF) && !bit){
 800083c:	683b      	ldr	r3, [r7, #0]
 800083e:	2b00      	cmp	r3, #0
 8000840:	d013      	beq.n	800086a <Animation_Data_Get_Bit+0x3e>
 8000842:	683b      	ldr	r3, [r7, #0]
 8000844:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000848:	2b00      	cmp	r3, #0
 800084a:	d10e      	bne.n	800086a <Animation_Data_Get_Bit+0x3e>
 800084c:	797b      	ldrb	r3, [r7, #5]
 800084e:	2b00      	cmp	r3, #0
 8000850:	d10b      	bne.n	800086a <Animation_Data_Get_Bit+0x3e>
		//If requested first bit of first byte from first or second half of buffer
		if(animation_data_buffered < animation_data_config.image_size){
 8000852:	4b0f      	ldr	r3, [pc, #60]	; (8000890 <Animation_Data_Get_Bit+0x64>)
 8000854:	68da      	ldr	r2, [r3, #12]
 8000856:	4b0f      	ldr	r3, [pc, #60]	; (8000894 <Animation_Data_Get_Bit+0x68>)
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	429a      	cmp	r2, r3
 800085c:	d905      	bls.n	800086a <Animation_Data_Get_Bit+0x3e>
			animation_data_buffering_image = image;
 800085e:	4a0e      	ldr	r2, [pc, #56]	; (8000898 <Animation_Data_Get_Bit+0x6c>)
 8000860:	88fb      	ldrh	r3, [r7, #6]
 8000862:	8013      	strh	r3, [r2, #0]
			animation_data_buffering_rq = 1;
 8000864:	4b0d      	ldr	r3, [pc, #52]	; (800089c <Animation_Data_Get_Bit+0x70>)
 8000866:	2201      	movs	r2, #1
 8000868:	701a      	strb	r2, [r3, #0]
		}
	}

	return (animation_data[byte % ANIMATION_DATA_BUFFER_SIZE] >> bit) & 1;
 800086a:	683b      	ldr	r3, [r7, #0]
 800086c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000870:	4a0b      	ldr	r2, [pc, #44]	; (80008a0 <Animation_Data_Get_Bit+0x74>)
 8000872:	5cd3      	ldrb	r3, [r2, r3]
 8000874:	461a      	mov	r2, r3
 8000876:	797b      	ldrb	r3, [r7, #5]
 8000878:	fa42 f303 	asr.w	r3, r2, r3
 800087c:	b2db      	uxtb	r3, r3
 800087e:	f003 0301 	and.w	r3, r3, #1
 8000882:	b2db      	uxtb	r3, r3
}
 8000884:	4618      	mov	r0, r3
 8000886:	370c      	adds	r7, #12
 8000888:	46bd      	mov	sp, r7
 800088a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088e:	4770      	bx	lr
 8000890:	20000154 	.word	0x20000154
 8000894:	20001164 	.word	0x20001164
 8000898:	2000116a 	.word	0x2000116a
 800089c:	20001168 	.word	0x20001168
 80008a0:	20000164 	.word	0x20000164

080008a4 <Animation_Data_Init>:
void Animation_Data_Init(){
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b086      	sub	sp, #24
 80008a8:	af00      	add	r7, sp, #0
	uint8_t data_error = 0;
 80008aa:	2300      	movs	r3, #0
 80008ac:	75fb      	strb	r3, [r7, #23]
	//Check size
	uint32_t data_size = 0;
 80008ae:	2300      	movs	r3, #0
 80008b0:	60bb      	str	r3, [r7, #8]
	W25Q_Read((uint8_t *)&data_size, 0, 4);
 80008b2:	f107 0308 	add.w	r3, r7, #8
 80008b6:	2204      	movs	r2, #4
 80008b8:	2100      	movs	r1, #0
 80008ba:	4618      	mov	r0, r3
 80008bc:	f000 fc6e 	bl	800119c <W25Q_Read>
	if(data_size <= ANIMATION_DATA_MAX_SIZE){
 80008c0:	68bb      	ldr	r3, [r7, #8]
 80008c2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80008c6:	f200 80c8 	bhi.w	8000a5a <Animation_Data_Init+0x1b6>
		//Read CRC
		uint32_t data_crc = 0;
 80008ca:	2300      	movs	r3, #0
 80008cc:	607b      	str	r3, [r7, #4]
		W25Q_Read((uint8_t *)&data_crc, data_size - 4, 4);
 80008ce:	68bb      	ldr	r3, [r7, #8]
 80008d0:	1f19      	subs	r1, r3, #4
 80008d2:	1d3b      	adds	r3, r7, #4
 80008d4:	2204      	movs	r2, #4
 80008d6:	4618      	mov	r0, r3
 80008d8:	f000 fc60 	bl	800119c <W25Q_Read>

		//Subtract CRC length
		data_size -= 4;
 80008dc:	68bb      	ldr	r3, [r7, #8]
 80008de:	3b04      	subs	r3, #4
 80008e0:	60bb      	str	r3, [r7, #8]
		//Calculate actual CRC
		uint32_t i = 0;
 80008e2:	2300      	movs	r3, #0
 80008e4:	613b      	str	r3, [r7, #16]
		uint32_t data_crc_actual = 0;
 80008e6:	2300      	movs	r3, #0
 80008e8:	60fb      	str	r3, [r7, #12]
		if(data_size < ANIMATION_DATA_BUFFER_SIZE){
 80008ea:	68bb      	ldr	r3, [r7, #8]
 80008ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80008f0:	d213      	bcs.n	800091a <Animation_Data_Init+0x76>
			W25Q_Read(&animation_data[0], 0, data_size);
 80008f2:	68bb      	ldr	r3, [r7, #8]
 80008f4:	b29b      	uxth	r3, r3
 80008f6:	461a      	mov	r2, r3
 80008f8:	2100      	movs	r1, #0
 80008fa:	4867      	ldr	r0, [pc, #412]	; (8000a98 <Animation_Data_Init+0x1f4>)
 80008fc:	f000 fc4e 	bl	800119c <W25Q_Read>
			data_crc_actual = HAL_CRC_Calculate(&hcrc, (uint32_t *)&animation_data[0], data_size / 4);
 8000900:	68bb      	ldr	r3, [r7, #8]
 8000902:	089b      	lsrs	r3, r3, #2
 8000904:	461a      	mov	r2, r3
 8000906:	4964      	ldr	r1, [pc, #400]	; (8000a98 <Animation_Data_Init+0x1f4>)
 8000908:	4864      	ldr	r0, [pc, #400]	; (8000a9c <Animation_Data_Init+0x1f8>)
 800090a:	f001 fa8b 	bl	8001e24 <HAL_CRC_Calculate>
 800090e:	60f8      	str	r0, [r7, #12]
			i += data_size;
 8000910:	68bb      	ldr	r3, [r7, #8]
 8000912:	693a      	ldr	r2, [r7, #16]
 8000914:	4413      	add	r3, r2
 8000916:	613b      	str	r3, [r7, #16]
 8000918:	e04d      	b.n	80009b6 <Animation_Data_Init+0x112>
		}else{
			W25Q_Read(&animation_data[i], i, ANIMATION_DATA_BUFFER_SIZE);
 800091a:	693b      	ldr	r3, [r7, #16]
 800091c:	4a5e      	ldr	r2, [pc, #376]	; (8000a98 <Animation_Data_Init+0x1f4>)
 800091e:	4413      	add	r3, r2
 8000920:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000924:	6939      	ldr	r1, [r7, #16]
 8000926:	4618      	mov	r0, r3
 8000928:	f000 fc38 	bl	800119c <W25Q_Read>
			data_crc_actual = HAL_CRC_Calculate(&hcrc, (uint32_t *)&animation_data[0], ANIMATION_DATA_BUFFER_SIZE / 4);
 800092c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000930:	4959      	ldr	r1, [pc, #356]	; (8000a98 <Animation_Data_Init+0x1f4>)
 8000932:	485a      	ldr	r0, [pc, #360]	; (8000a9c <Animation_Data_Init+0x1f8>)
 8000934:	f001 fa76 	bl	8001e24 <HAL_CRC_Calculate>
 8000938:	60f8      	str	r0, [r7, #12]
			i += ANIMATION_DATA_BUFFER_SIZE;
 800093a:	693b      	ldr	r3, [r7, #16]
 800093c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000940:	613b      	str	r3, [r7, #16]
		}
		while(i != data_size){
 8000942:	e038      	b.n	80009b6 <Animation_Data_Init+0x112>
			if((data_size - i) < ANIMATION_DATA_BUFFER_SIZE){
 8000944:	68ba      	ldr	r2, [r7, #8]
 8000946:	693b      	ldr	r3, [r7, #16]
 8000948:	1ad3      	subs	r3, r2, r3
 800094a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800094e:	d21b      	bcs.n	8000988 <Animation_Data_Init+0xe4>
				W25Q_Read(&animation_data[i], i, data_size - i);
 8000950:	693b      	ldr	r3, [r7, #16]
 8000952:	4a51      	ldr	r2, [pc, #324]	; (8000a98 <Animation_Data_Init+0x1f4>)
 8000954:	1898      	adds	r0, r3, r2
 8000956:	68bb      	ldr	r3, [r7, #8]
 8000958:	b29a      	uxth	r2, r3
 800095a:	693b      	ldr	r3, [r7, #16]
 800095c:	b29b      	uxth	r3, r3
 800095e:	1ad3      	subs	r3, r2, r3
 8000960:	b29b      	uxth	r3, r3
 8000962:	461a      	mov	r2, r3
 8000964:	6939      	ldr	r1, [r7, #16]
 8000966:	f000 fc19 	bl	800119c <W25Q_Read>
				data_crc_actual = HAL_CRC_Accumulate(&hcrc, (uint32_t *)&animation_data[i], (data_size - i) / 4);
 800096a:	693b      	ldr	r3, [r7, #16]
 800096c:	4a4a      	ldr	r2, [pc, #296]	; (8000a98 <Animation_Data_Init+0x1f4>)
 800096e:	1899      	adds	r1, r3, r2
 8000970:	68ba      	ldr	r2, [r7, #8]
 8000972:	693b      	ldr	r3, [r7, #16]
 8000974:	1ad3      	subs	r3, r2, r3
 8000976:	089b      	lsrs	r3, r3, #2
 8000978:	461a      	mov	r2, r3
 800097a:	4848      	ldr	r0, [pc, #288]	; (8000a9c <Animation_Data_Init+0x1f8>)
 800097c:	f001 fa27 	bl	8001dce <HAL_CRC_Accumulate>
 8000980:	60f8      	str	r0, [r7, #12]
				i += data_size - i;
 8000982:	68bb      	ldr	r3, [r7, #8]
 8000984:	613b      	str	r3, [r7, #16]
 8000986:	e016      	b.n	80009b6 <Animation_Data_Init+0x112>
			}else{
				W25Q_Read(&animation_data[i], i, ANIMATION_DATA_BUFFER_SIZE);
 8000988:	693b      	ldr	r3, [r7, #16]
 800098a:	4a43      	ldr	r2, [pc, #268]	; (8000a98 <Animation_Data_Init+0x1f4>)
 800098c:	4413      	add	r3, r2
 800098e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000992:	6939      	ldr	r1, [r7, #16]
 8000994:	4618      	mov	r0, r3
 8000996:	f000 fc01 	bl	800119c <W25Q_Read>
				data_crc_actual = HAL_CRC_Accumulate(&hcrc, (uint32_t *)&animation_data[i], ANIMATION_DATA_BUFFER_SIZE / 4);
 800099a:	693b      	ldr	r3, [r7, #16]
 800099c:	4a3e      	ldr	r2, [pc, #248]	; (8000a98 <Animation_Data_Init+0x1f4>)
 800099e:	4413      	add	r3, r2
 80009a0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80009a4:	4619      	mov	r1, r3
 80009a6:	483d      	ldr	r0, [pc, #244]	; (8000a9c <Animation_Data_Init+0x1f8>)
 80009a8:	f001 fa11 	bl	8001dce <HAL_CRC_Accumulate>
 80009ac:	60f8      	str	r0, [r7, #12]
				i += ANIMATION_DATA_BUFFER_SIZE;
 80009ae:	693b      	ldr	r3, [r7, #16]
 80009b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80009b4:	613b      	str	r3, [r7, #16]
		while(i != data_size){
 80009b6:	68bb      	ldr	r3, [r7, #8]
 80009b8:	693a      	ldr	r2, [r7, #16]
 80009ba:	429a      	cmp	r2, r3
 80009bc:	d1c2      	bne.n	8000944 <Animation_Data_Init+0xa0>
			}
		}

		//Check CRC
		if(data_crc_actual == data_crc){
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	68fa      	ldr	r2, [r7, #12]
 80009c2:	429a      	cmp	r2, r3
 80009c4:	d146      	bne.n	8000a54 <Animation_Data_Init+0x1b0>
			//Read animation data configuration
			uint32_t data = 0;
 80009c6:	2300      	movs	r3, #0
 80009c8:	603b      	str	r3, [r7, #0]
			W25Q_Read((uint8_t *)&data, 4, 2);
 80009ca:	463b      	mov	r3, r7
 80009cc:	2202      	movs	r2, #2
 80009ce:	2104      	movs	r1, #4
 80009d0:	4618      	mov	r0, r3
 80009d2:	f000 fbe3 	bl	800119c <W25Q_Read>
			animation_data_config.clkdiv = *(uint16_t *)&data;
 80009d6:	463b      	mov	r3, r7
 80009d8:	881a      	ldrh	r2, [r3, #0]
 80009da:	4b31      	ldr	r3, [pc, #196]	; (8000aa0 <Animation_Data_Init+0x1fc>)
 80009dc:	801a      	strh	r2, [r3, #0]
			W25Q_Read((uint8_t *)&data, 6, 1);
 80009de:	463b      	mov	r3, r7
 80009e0:	2201      	movs	r2, #1
 80009e2:	2106      	movs	r1, #6
 80009e4:	4618      	mov	r0, r3
 80009e6:	f000 fbd9 	bl	800119c <W25Q_Read>
			animation_data_config.pulse = *(uint8_t *)&data;
 80009ea:	463b      	mov	r3, r7
 80009ec:	781a      	ldrb	r2, [r3, #0]
 80009ee:	4b2c      	ldr	r3, [pc, #176]	; (8000aa0 <Animation_Data_Init+0x1fc>)
 80009f0:	709a      	strb	r2, [r3, #2]
			W25Q_Read((uint8_t *)&data, 7, 1);
 80009f2:	463b      	mov	r3, r7
 80009f4:	2201      	movs	r2, #1
 80009f6:	2107      	movs	r1, #7
 80009f8:	4618      	mov	r0, r3
 80009fa:	f000 fbcf 	bl	800119c <W25Q_Read>
			animation_data_config.bit_0 = *(uint8_t *)&data;
 80009fe:	463b      	mov	r3, r7
 8000a00:	781a      	ldrb	r2, [r3, #0]
 8000a02:	4b27      	ldr	r3, [pc, #156]	; (8000aa0 <Animation_Data_Init+0x1fc>)
 8000a04:	70da      	strb	r2, [r3, #3]
			W25Q_Read((uint8_t *)&data, 8, 1);
 8000a06:	463b      	mov	r3, r7
 8000a08:	2201      	movs	r2, #1
 8000a0a:	2108      	movs	r1, #8
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	f000 fbc5 	bl	800119c <W25Q_Read>
			animation_data_config.bit_1 = *(uint8_t *)&data;
 8000a12:	463b      	mov	r3, r7
 8000a14:	781a      	ldrb	r2, [r3, #0]
 8000a16:	4b22      	ldr	r3, [pc, #136]	; (8000aa0 <Animation_Data_Init+0x1fc>)
 8000a18:	711a      	strb	r2, [r3, #4]
			W25Q_Read((uint8_t *)&data, 9, 2);
 8000a1a:	463b      	mov	r3, r7
 8000a1c:	2202      	movs	r2, #2
 8000a1e:	2109      	movs	r1, #9
 8000a20:	4618      	mov	r0, r3
 8000a22:	f000 fbbb 	bl	800119c <W25Q_Read>
			animation_data_config.stop_pulses = *(uint16_t *)&data;
 8000a26:	463b      	mov	r3, r7
 8000a28:	881a      	ldrh	r2, [r3, #0]
 8000a2a:	4b1d      	ldr	r3, [pc, #116]	; (8000aa0 <Animation_Data_Init+0x1fc>)
 8000a2c:	80da      	strh	r2, [r3, #6]
			W25Q_Read((uint8_t *)&data, 11, 4);
 8000a2e:	463b      	mov	r3, r7
 8000a30:	2204      	movs	r2, #4
 8000a32:	210b      	movs	r1, #11
 8000a34:	4618      	mov	r0, r3
 8000a36:	f000 fbb1 	bl	800119c <W25Q_Read>
			animation_data_config.images = *(uint32_t *)&data;
 8000a3a:	683b      	ldr	r3, [r7, #0]
 8000a3c:	4a18      	ldr	r2, [pc, #96]	; (8000aa0 <Animation_Data_Init+0x1fc>)
 8000a3e:	6093      	str	r3, [r2, #8]
			W25Q_Read((uint8_t *)&data, 15, 4);
 8000a40:	463b      	mov	r3, r7
 8000a42:	2204      	movs	r2, #4
 8000a44:	210f      	movs	r1, #15
 8000a46:	4618      	mov	r0, r3
 8000a48:	f000 fba8 	bl	800119c <W25Q_Read>
			animation_data_config.image_size = *(uint32_t *)&data;
 8000a4c:	683b      	ldr	r3, [r7, #0]
 8000a4e:	4a14      	ldr	r2, [pc, #80]	; (8000aa0 <Animation_Data_Init+0x1fc>)
 8000a50:	60d3      	str	r3, [r2, #12]
 8000a52:	e004      	b.n	8000a5e <Animation_Data_Init+0x1ba>
		}else{
			data_error = 1;
 8000a54:	2301      	movs	r3, #1
 8000a56:	75fb      	strb	r3, [r7, #23]
 8000a58:	e001      	b.n	8000a5e <Animation_Data_Init+0x1ba>
		}
	}else{
		data_error = 1;
 8000a5a:	2301      	movs	r3, #1
 8000a5c:	75fb      	strb	r3, [r7, #23]
	}

	//Reading correct data failed
	if(data_error){
 8000a5e:	7dfb      	ldrb	r3, [r7, #23]
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d014      	beq.n	8000a8e <Animation_Data_Init+0x1ea>
		animation_data_config.clkdiv = 0;
 8000a64:	4b0e      	ldr	r3, [pc, #56]	; (8000aa0 <Animation_Data_Init+0x1fc>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	801a      	strh	r2, [r3, #0]
		animation_data_config.pulse = 0;
 8000a6a:	4b0d      	ldr	r3, [pc, #52]	; (8000aa0 <Animation_Data_Init+0x1fc>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	709a      	strb	r2, [r3, #2]
		animation_data_config.bit_0 = 0;
 8000a70:	4b0b      	ldr	r3, [pc, #44]	; (8000aa0 <Animation_Data_Init+0x1fc>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	70da      	strb	r2, [r3, #3]
		animation_data_config.bit_1 = 0;
 8000a76:	4b0a      	ldr	r3, [pc, #40]	; (8000aa0 <Animation_Data_Init+0x1fc>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	711a      	strb	r2, [r3, #4]
		animation_data_config.stop_pulses = 0;
 8000a7c:	4b08      	ldr	r3, [pc, #32]	; (8000aa0 <Animation_Data_Init+0x1fc>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	80da      	strh	r2, [r3, #6]
		animation_data_config.images = 0;
 8000a82:	4b07      	ldr	r3, [pc, #28]	; (8000aa0 <Animation_Data_Init+0x1fc>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	609a      	str	r2, [r3, #8]
		animation_data_config.image_size = 0;
 8000a88:	4b05      	ldr	r3, [pc, #20]	; (8000aa0 <Animation_Data_Init+0x1fc>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	60da      	str	r2, [r3, #12]
	}
}
 8000a8e:	bf00      	nop
 8000a90:	3718      	adds	r7, #24
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	bf00      	nop
 8000a98:	20000164 	.word	0x20000164
 8000a9c:	20001174 	.word	0x20001174
 8000aa0:	20000154 	.word	0x20000154

08000aa4 <Animation_Data_Buffer>:

void Animation_Data_Buffer(){
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	af00      	add	r7, sp, #0
	if(animation_data_buffering_rq){
 8000aa8:	4b06      	ldr	r3, [pc, #24]	; (8000ac4 <Animation_Data_Buffer+0x20>)
 8000aaa:	781b      	ldrb	r3, [r3, #0]
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d007      	beq.n	8000ac0 <Animation_Data_Buffer+0x1c>
		animation_data_buffering_rq = 0;
 8000ab0:	4b04      	ldr	r3, [pc, #16]	; (8000ac4 <Animation_Data_Buffer+0x20>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	701a      	strb	r2, [r3, #0]
		Animation_Data_Read(animation_data_buffering_image);
 8000ab6:	4b04      	ldr	r3, [pc, #16]	; (8000ac8 <Animation_Data_Buffer+0x24>)
 8000ab8:	881b      	ldrh	r3, [r3, #0]
 8000aba:	4618      	mov	r0, r3
 8000abc:	f7ff fe66 	bl	800078c <Animation_Data_Read>
	}
}
 8000ac0:	bf00      	nop
 8000ac2:	bd80      	pop	{r7, pc}
 8000ac4:	20001168 	.word	0x20001168
 8000ac8:	2000116a 	.word	0x2000116a

08000acc <App_Init>:

#define FRAME_DELAY 33

uint32_t i = 0;

void App_Init(){
 8000acc:	b580      	push	{r7, lr}
 8000ace:	af00      	add	r7, sp, #0
	LED_Set(LED_ON);
 8000ad0:	2001      	movs	r0, #1
 8000ad2:	f000 f91d 	bl	8000d10 <LED_Set>
	USB_Init();
 8000ad6:	f000 f9bf 	bl	8000e58 <USB_Init>
	Button_Init();
 8000ada:	f000 f8c9 	bl	8000c70 <Button_Init>
	Animation_Init();
 8000ade:	f7ff fdfb 	bl	80006d8 <Animation_Init>
	LED_Set(LED_OFF);
 8000ae2:	2000      	movs	r0, #0
 8000ae4:	f000 f914 	bl	8000d10 <LED_Set>
}
 8000ae8:	bf00      	nop
 8000aea:	bd80      	pop	{r7, pc}

08000aec <App_Loop>:
void App_Loop(){
 8000aec:	b580      	push	{r7, lr}
 8000aee:	af00      	add	r7, sp, #0
	if(!USB_Enabled() && USB_Det_State()){
 8000af0:	f000 f982 	bl	8000df8 <USB_Enabled>
 8000af4:	4603      	mov	r3, r0
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d10e      	bne.n	8000b18 <App_Loop+0x2c>
 8000afa:	f000 f971 	bl	8000de0 <USB_Det_State>
 8000afe:	4603      	mov	r3, r0
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d009      	beq.n	8000b18 <App_Loop+0x2c>
		i = 0;
 8000b04:	4b34      	ldr	r3, [pc, #208]	; (8000bd8 <App_Loop+0xec>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	601a      	str	r2, [r3, #0]
		Animation_Display_Color(0);
 8000b0a:	2000      	movs	r0, #0
 8000b0c:	f7ff fd76 	bl	80005fc <Animation_Display_Color>
		USB_Enable(1);
 8000b10:	2001      	movs	r0, #1
 8000b12:	f000 f97d 	bl	8000e10 <USB_Enable>
 8000b16:	e014      	b.n	8000b42 <App_Loop+0x56>
	}else if(USB_Enabled() && !USB_Det_State()){
 8000b18:	f000 f96e 	bl	8000df8 <USB_Enabled>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d00f      	beq.n	8000b42 <App_Loop+0x56>
 8000b22:	f000 f95d 	bl	8000de0 <USB_Det_State>
 8000b26:	4603      	mov	r3, r0
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d10a      	bne.n	8000b42 <App_Loop+0x56>
		USB_Enable(0);
 8000b2c:	2000      	movs	r0, #0
 8000b2e:	f000 f96f 	bl	8000e10 <USB_Enable>
		LED_Set(LED_ON);
 8000b32:	2001      	movs	r0, #1
 8000b34:	f000 f8ec 	bl	8000d10 <LED_Set>
		Animation_Init();
 8000b38:	f7ff fdce 	bl	80006d8 <Animation_Init>
		LED_Set(LED_OFF);
 8000b3c:	2000      	movs	r0, #0
 8000b3e:	f000 f8e7 	bl	8000d10 <LED_Set>
	}
	
	if(!USB_Enabled()){
 8000b42:	f000 f959 	bl	8000df8 <USB_Enabled>
 8000b46:	4603      	mov	r3, r0
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d143      	bne.n	8000bd4 <App_Loop+0xe8>
		if(!animation_data_config.images || !animation_data_config.image_size){
 8000b4c:	4b23      	ldr	r3, [pc, #140]	; (8000bdc <App_Loop+0xf0>)
 8000b4e:	689b      	ldr	r3, [r3, #8]
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d003      	beq.n	8000b5c <App_Loop+0x70>
 8000b54:	4b21      	ldr	r3, [pc, #132]	; (8000bdc <App_Loop+0xf0>)
 8000b56:	68db      	ldr	r3, [r3, #12]
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d10d      	bne.n	8000b78 <App_Loop+0x8c>
			LED_Set(1 - LED_State());
 8000b5c:	f000 f8f8 	bl	8000d50 <LED_State>
 8000b60:	4603      	mov	r3, r0
 8000b62:	f1c3 0301 	rsb	r3, r3, #1
 8000b66:	b2db      	uxtb	r3, r3
 8000b68:	4618      	mov	r0, r3
 8000b6a:	f000 f8d1 	bl	8000d10 <LED_Set>
			HAL_Delay(300);
 8000b6e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000b72:	f000 ffdb 	bl	8001b2c <HAL_Delay>
				Animation_Display_Color(0);
				HAL_Delay(100);
			}
		}
	}
}
 8000b76:	e02d      	b.n	8000bd4 <App_Loop+0xe8>
			if(LED_State()){
 8000b78:	f000 f8ea 	bl	8000d50 <LED_State>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d002      	beq.n	8000b88 <App_Loop+0x9c>
				LED_Set(LED_OFF);
 8000b82:	2000      	movs	r0, #0
 8000b84:	f000 f8c4 	bl	8000d10 <LED_Set>
			if(!Button_State()){
 8000b88:	f000 f866 	bl	8000c58 <Button_State>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d117      	bne.n	8000bc2 <App_Loop+0xd6>
				if(i == animation_data_config.images){
 8000b92:	4b12      	ldr	r3, [pc, #72]	; (8000bdc <App_Loop+0xf0>)
 8000b94:	689a      	ldr	r2, [r3, #8]
 8000b96:	4b10      	ldr	r3, [pc, #64]	; (8000bd8 <App_Loop+0xec>)
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	429a      	cmp	r2, r3
 8000b9c:	d102      	bne.n	8000ba4 <App_Loop+0xb8>
					i = 0;
 8000b9e:	4b0e      	ldr	r3, [pc, #56]	; (8000bd8 <App_Loop+0xec>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	601a      	str	r2, [r3, #0]
				Animation_Display_Image(i);
 8000ba4:	4b0c      	ldr	r3, [pc, #48]	; (8000bd8 <App_Loop+0xec>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	b29b      	uxth	r3, r3
 8000baa:	4618      	mov	r0, r3
 8000bac:	f7ff fd58 	bl	8000660 <Animation_Display_Image>
				HAL_Delay(FRAME_DELAY);
 8000bb0:	2021      	movs	r0, #33	; 0x21
 8000bb2:	f000 ffbb 	bl	8001b2c <HAL_Delay>
				i++;
 8000bb6:	4b08      	ldr	r3, [pc, #32]	; (8000bd8 <App_Loop+0xec>)
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	3301      	adds	r3, #1
 8000bbc:	4a06      	ldr	r2, [pc, #24]	; (8000bd8 <App_Loop+0xec>)
 8000bbe:	6013      	str	r3, [r2, #0]
}
 8000bc0:	e008      	b.n	8000bd4 <App_Loop+0xe8>
				i = 0;
 8000bc2:	4b05      	ldr	r3, [pc, #20]	; (8000bd8 <App_Loop+0xec>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	601a      	str	r2, [r3, #0]
				Animation_Display_Color(0);
 8000bc8:	2000      	movs	r0, #0
 8000bca:	f7ff fd17 	bl	80005fc <Animation_Display_Color>
				HAL_Delay(100);
 8000bce:	2064      	movs	r0, #100	; 0x64
 8000bd0:	f000 ffac 	bl	8001b2c <HAL_Delay>
}
 8000bd4:	bf00      	nop
 8000bd6:	bd80      	pop	{r7, pc}
 8000bd8:	2000116c 	.word	0x2000116c
 8000bdc:	20000154 	.word	0x20000154

08000be0 <Button_Interrupt>:
#include "main.h"
#include "button.h"

static uint8_t button_state = 0;

void Button_Interrupt(){
 8000be0:	b580      	push	{r7, lr}
 8000be2:	af00      	add	r7, sp, #0
	button_state = Button_Debounce_Read();
 8000be4:	f000 f808 	bl	8000bf8 <Button_Debounce_Read>
 8000be8:	4603      	mov	r3, r0
 8000bea:	461a      	mov	r2, r3
 8000bec:	4b01      	ldr	r3, [pc, #4]	; (8000bf4 <Button_Interrupt+0x14>)
 8000bee:	701a      	strb	r2, [r3, #0]
}
 8000bf0:	bf00      	nop
 8000bf2:	bd80      	pop	{r7, pc}
 8000bf4:	20001170 	.word	0x20001170

08000bf8 <Button_Debounce_Read>:

uint8_t Button_Debounce_Read(){
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b082      	sub	sp, #8
 8000bfc:	af00      	add	r7, sp, #0
	uint8_t level;
	uint8_t d = 0;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	71bb      	strb	r3, [r7, #6]
	uint8_t i = 0;
 8000c02:	2300      	movs	r3, #0
 8000c04:	717b      	strb	r3, [r7, #5]
	while(d != 1){
 8000c06:	e01d      	b.n	8000c44 <Button_Debounce_Read+0x4c>
		i = 0;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	717b      	strb	r3, [r7, #5]
		level = HAL_GPIO_ReadPin(BUTTON_GPIO_Port, BUTTON_Pin);
 8000c0c:	2101      	movs	r1, #1
 8000c0e:	4811      	ldr	r0, [pc, #68]	; (8000c54 <Button_Debounce_Read+0x5c>)
 8000c10:	f001 fe52 	bl	80028b8 <HAL_GPIO_ReadPin>
 8000c14:	4603      	mov	r3, r0
 8000c16:	71fb      	strb	r3, [r7, #7]
		while(i != BUTTON_DEBOUNCE_SAMPLES){
 8000c18:	e011      	b.n	8000c3e <Button_Debounce_Read+0x46>
			i++;
 8000c1a:	797b      	ldrb	r3, [r7, #5]
 8000c1c:	3301      	adds	r3, #1
 8000c1e:	717b      	strb	r3, [r7, #5]
			if(HAL_GPIO_ReadPin(BUTTON_GPIO_Port, BUTTON_Pin) != level){
 8000c20:	2101      	movs	r1, #1
 8000c22:	480c      	ldr	r0, [pc, #48]	; (8000c54 <Button_Debounce_Read+0x5c>)
 8000c24:	f001 fe48 	bl	80028b8 <HAL_GPIO_ReadPin>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	461a      	mov	r2, r3
 8000c2c:	79fb      	ldrb	r3, [r7, #7]
 8000c2e:	4293      	cmp	r3, r2
 8000c30:	d000      	beq.n	8000c34 <Button_Debounce_Read+0x3c>
				break;
 8000c32:	e007      	b.n	8000c44 <Button_Debounce_Read+0x4c>
			}
			if(i == BUTTON_DEBOUNCE_SAMPLES){
 8000c34:	797b      	ldrb	r3, [r7, #5]
 8000c36:	2b0a      	cmp	r3, #10
 8000c38:	d101      	bne.n	8000c3e <Button_Debounce_Read+0x46>
				d = 1;
 8000c3a:	2301      	movs	r3, #1
 8000c3c:	71bb      	strb	r3, [r7, #6]
		while(i != BUTTON_DEBOUNCE_SAMPLES){
 8000c3e:	797b      	ldrb	r3, [r7, #5]
 8000c40:	2b0a      	cmp	r3, #10
 8000c42:	d1ea      	bne.n	8000c1a <Button_Debounce_Read+0x22>
	while(d != 1){
 8000c44:	79bb      	ldrb	r3, [r7, #6]
 8000c46:	2b01      	cmp	r3, #1
 8000c48:	d1de      	bne.n	8000c08 <Button_Debounce_Read+0x10>
			}
		}
	}
	return level;
 8000c4a:	79fb      	ldrb	r3, [r7, #7]
}
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	3708      	adds	r7, #8
 8000c50:	46bd      	mov	sp, r7
 8000c52:	bd80      	pop	{r7, pc}
 8000c54:	40020000 	.word	0x40020000

08000c58 <Button_State>:

uint8_t Button_State(){
 8000c58:	b480      	push	{r7}
 8000c5a:	af00      	add	r7, sp, #0
	return button_state;
 8000c5c:	4b03      	ldr	r3, [pc, #12]	; (8000c6c <Button_State+0x14>)
 8000c5e:	781b      	ldrb	r3, [r3, #0]
}
 8000c60:	4618      	mov	r0, r3
 8000c62:	46bd      	mov	sp, r7
 8000c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c68:	4770      	bx	lr
 8000c6a:	bf00      	nop
 8000c6c:	20001170 	.word	0x20001170

08000c70 <Button_Init>:
void Button_Init(){
 8000c70:	b580      	push	{r7, lr}
 8000c72:	af00      	add	r7, sp, #0
	Button_Interrupt();
 8000c74:	f7ff ffb4 	bl	8000be0 <Button_Interrupt>
 8000c78:	bf00      	nop
 8000c7a:	bd80      	pop	{r7, pc}

08000c7c <HAL_SPI_ErrorCallback>:
#include "button.h"
#include "animation.h"
#include "w25q.h"
#include "usb.h"

void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi){
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b082      	sub	sp, #8
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
	if(hspi->Instance == SPI1){
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	4a04      	ldr	r2, [pc, #16]	; (8000c9c <HAL_SPI_ErrorCallback+0x20>)
 8000c8a:	4293      	cmp	r3, r2
 8000c8c:	d101      	bne.n	8000c92 <HAL_SPI_ErrorCallback+0x16>
		W25Q_SPI_Error_Interrupt();
 8000c8e:	f000 f8ed 	bl	8000e6c <W25Q_SPI_Error_Interrupt>
	}
}
 8000c92:	bf00      	nop
 8000c94:	3708      	adds	r7, #8
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bd80      	pop	{r7, pc}
 8000c9a:	bf00      	nop
 8000c9c:	40013000 	.word	0x40013000

08000ca0 <HAL_SPI_RxCpltCallback>:
void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi){
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b082      	sub	sp, #8
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
	if(hspi->Instance == SPI1){
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	4a04      	ldr	r2, [pc, #16]	; (8000cc0 <HAL_SPI_RxCpltCallback+0x20>)
 8000cae:	4293      	cmp	r3, r2
 8000cb0:	d101      	bne.n	8000cb6 <HAL_SPI_RxCpltCallback+0x16>
		W25Q_SPI_Receive_DMA_Interrupt();
 8000cb2:	f000 f8e7 	bl	8000e84 <W25Q_SPI_Receive_DMA_Interrupt>
	}
}
 8000cb6:	bf00      	nop
 8000cb8:	3708      	adds	r7, #8
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bd80      	pop	{r7, pc}
 8000cbe:	bf00      	nop
 8000cc0:	40013000 	.word	0x40013000

08000cc4 <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b082      	sub	sp, #8
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	4603      	mov	r3, r0
 8000ccc:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == BUTTON_Pin){
 8000cce:	88fb      	ldrh	r3, [r7, #6]
 8000cd0:	2b01      	cmp	r3, #1
 8000cd2:	d102      	bne.n	8000cda <HAL_GPIO_EXTI_Callback+0x16>
		Button_Interrupt();
 8000cd4:	f7ff ff84 	bl	8000be0 <Button_Interrupt>
	}
	else if(GPIO_Pin == USB_DET_Pin){
		USB_Det_Interrupt();
	}
}
 8000cd8:	e004      	b.n	8000ce4 <HAL_GPIO_EXTI_Callback+0x20>
	else if(GPIO_Pin == USB_DET_Pin){
 8000cda:	88fb      	ldrh	r3, [r7, #6]
 8000cdc:	2b40      	cmp	r3, #64	; 0x40
 8000cde:	d101      	bne.n	8000ce4 <HAL_GPIO_EXTI_Callback+0x20>
		USB_Det_Interrupt();
 8000ce0:	f000 f842 	bl	8000d68 <USB_Det_Interrupt>
}
 8000ce4:	bf00      	nop
 8000ce6:	3708      	adds	r7, #8
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	bd80      	pop	{r7, pc}

08000cec <HAL_TIM_PWM_PulseFinishedCallback>:
void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim){
	if(htim->Instance == TIM1){
		Animation_Timer_Error_Interrupt();
	}
}
void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim){
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b082      	sub	sp, #8
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM1){
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	4a04      	ldr	r2, [pc, #16]	; (8000d0c <HAL_TIM_PWM_PulseFinishedCallback+0x20>)
 8000cfa:	4293      	cmp	r3, r2
 8000cfc:	d101      	bne.n	8000d02 <HAL_TIM_PWM_PulseFinishedCallback+0x16>
		Animation_PWM_Pulse_Interrupt();
 8000cfe:	f7ff fbeb 	bl	80004d8 <Animation_PWM_Pulse_Interrupt>
	}
}
 8000d02:	bf00      	nop
 8000d04:	3708      	adds	r7, #8
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bd80      	pop	{r7, pc}
 8000d0a:	bf00      	nop
 8000d0c:	40010000 	.word	0x40010000

08000d10 <LED_Set>:
#include "main.h"
#include "led.h"

static uint8_t led_state = LED_OFF;

void LED_Set(uint8_t state){
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b082      	sub	sp, #8
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	4603      	mov	r3, r0
 8000d18:	71fb      	strb	r3, [r7, #7]
	led_state = state;
 8000d1a:	4a0b      	ldr	r2, [pc, #44]	; (8000d48 <LED_Set+0x38>)
 8000d1c:	79fb      	ldrb	r3, [r7, #7]
 8000d1e:	7013      	strb	r3, [r2, #0]
	if(state){
 8000d20:	79fb      	ldrb	r3, [r7, #7]
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d006      	beq.n	8000d34 <LED_Set+0x24>
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000d26:	2200      	movs	r2, #0
 8000d28:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d2c:	4807      	ldr	r0, [pc, #28]	; (8000d4c <LED_Set+0x3c>)
 8000d2e:	f001 fddb 	bl	80028e8 <HAL_GPIO_WritePin>
	}else{
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
	}
}
 8000d32:	e005      	b.n	8000d40 <LED_Set+0x30>
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8000d34:	2201      	movs	r2, #1
 8000d36:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d3a:	4804      	ldr	r0, [pc, #16]	; (8000d4c <LED_Set+0x3c>)
 8000d3c:	f001 fdd4 	bl	80028e8 <HAL_GPIO_WritePin>
}
 8000d40:	bf00      	nop
 8000d42:	3708      	adds	r7, #8
 8000d44:	46bd      	mov	sp, r7
 8000d46:	bd80      	pop	{r7, pc}
 8000d48:	20001171 	.word	0x20001171
 8000d4c:	40020800 	.word	0x40020800

08000d50 <LED_State>:
uint8_t LED_State(){
 8000d50:	b480      	push	{r7}
 8000d52:	af00      	add	r7, sp, #0
	return led_state;
 8000d54:	4b03      	ldr	r3, [pc, #12]	; (8000d64 <LED_State+0x14>)
 8000d56:	781b      	ldrb	r3, [r3, #0]
 8000d58:	4618      	mov	r0, r3
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d60:	4770      	bx	lr
 8000d62:	bf00      	nop
 8000d64:	20001171 	.word	0x20001171

08000d68 <USB_Det_Interrupt>:
extern USBD_HandleTypeDef hUsbDeviceFS;

static uint8_t usb_det_state = 0;
static uint8_t usb_enabled = 1;

void USB_Det_Interrupt(){
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	af00      	add	r7, sp, #0
	usb_det_state = USB_Det_Debounce_Read();
 8000d6c:	f000 f808 	bl	8000d80 <USB_Det_Debounce_Read>
 8000d70:	4603      	mov	r3, r0
 8000d72:	461a      	mov	r2, r3
 8000d74:	4b01      	ldr	r3, [pc, #4]	; (8000d7c <USB_Det_Interrupt+0x14>)
 8000d76:	701a      	strb	r2, [r3, #0]
}
 8000d78:	bf00      	nop
 8000d7a:	bd80      	pop	{r7, pc}
 8000d7c:	20001172 	.word	0x20001172

08000d80 <USB_Det_Debounce_Read>:

uint8_t USB_Det_Debounce_Read(){
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b082      	sub	sp, #8
 8000d84:	af00      	add	r7, sp, #0
	uint8_t level;
	uint8_t d = 0;
 8000d86:	2300      	movs	r3, #0
 8000d88:	71bb      	strb	r3, [r7, #6]
	uint8_t i = 0;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	717b      	strb	r3, [r7, #5]
	while(d != 1){
 8000d8e:	e01d      	b.n	8000dcc <USB_Det_Debounce_Read+0x4c>
		i = 0;
 8000d90:	2300      	movs	r3, #0
 8000d92:	717b      	strb	r3, [r7, #5]
		level = HAL_GPIO_ReadPin(USB_DET_GPIO_Port, USB_DET_Pin);
 8000d94:	2140      	movs	r1, #64	; 0x40
 8000d96:	4811      	ldr	r0, [pc, #68]	; (8000ddc <USB_Det_Debounce_Read+0x5c>)
 8000d98:	f001 fd8e 	bl	80028b8 <HAL_GPIO_ReadPin>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	71fb      	strb	r3, [r7, #7]
		while(i != USB_DET_DEBOUNCE_SAMPLES){
 8000da0:	e011      	b.n	8000dc6 <USB_Det_Debounce_Read+0x46>
			i++;
 8000da2:	797b      	ldrb	r3, [r7, #5]
 8000da4:	3301      	adds	r3, #1
 8000da6:	717b      	strb	r3, [r7, #5]
			if(HAL_GPIO_ReadPin(USB_DET_GPIO_Port, USB_DET_Pin) != level){
 8000da8:	2140      	movs	r1, #64	; 0x40
 8000daa:	480c      	ldr	r0, [pc, #48]	; (8000ddc <USB_Det_Debounce_Read+0x5c>)
 8000dac:	f001 fd84 	bl	80028b8 <HAL_GPIO_ReadPin>
 8000db0:	4603      	mov	r3, r0
 8000db2:	461a      	mov	r2, r3
 8000db4:	79fb      	ldrb	r3, [r7, #7]
 8000db6:	4293      	cmp	r3, r2
 8000db8:	d000      	beq.n	8000dbc <USB_Det_Debounce_Read+0x3c>
				break;
 8000dba:	e007      	b.n	8000dcc <USB_Det_Debounce_Read+0x4c>
			}
			if(i == USB_DET_DEBOUNCE_SAMPLES){
 8000dbc:	797b      	ldrb	r3, [r7, #5]
 8000dbe:	2b0a      	cmp	r3, #10
 8000dc0:	d101      	bne.n	8000dc6 <USB_Det_Debounce_Read+0x46>
				d = 1;
 8000dc2:	2301      	movs	r3, #1
 8000dc4:	71bb      	strb	r3, [r7, #6]
		while(i != USB_DET_DEBOUNCE_SAMPLES){
 8000dc6:	797b      	ldrb	r3, [r7, #5]
 8000dc8:	2b0a      	cmp	r3, #10
 8000dca:	d1ea      	bne.n	8000da2 <USB_Det_Debounce_Read+0x22>
	while(d != 1){
 8000dcc:	79bb      	ldrb	r3, [r7, #6]
 8000dce:	2b01      	cmp	r3, #1
 8000dd0:	d1de      	bne.n	8000d90 <USB_Det_Debounce_Read+0x10>
			}
		}
	}
	return level;
 8000dd2:	79fb      	ldrb	r3, [r7, #7]
}
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	3708      	adds	r7, #8
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	bd80      	pop	{r7, pc}
 8000ddc:	40020400 	.word	0x40020400

08000de0 <USB_Det_State>:

uint8_t USB_Det_State(){
 8000de0:	b480      	push	{r7}
 8000de2:	af00      	add	r7, sp, #0
	return usb_det_state;
 8000de4:	4b03      	ldr	r3, [pc, #12]	; (8000df4 <USB_Det_State+0x14>)
 8000de6:	781b      	ldrb	r3, [r3, #0]
}
 8000de8:	4618      	mov	r0, r3
 8000dea:	46bd      	mov	sp, r7
 8000dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df0:	4770      	bx	lr
 8000df2:	bf00      	nop
 8000df4:	20001172 	.word	0x20001172

08000df8 <USB_Enabled>:
uint8_t USB_Enabled(){
 8000df8:	b480      	push	{r7}
 8000dfa:	af00      	add	r7, sp, #0
	return usb_enabled;
 8000dfc:	4b03      	ldr	r3, [pc, #12]	; (8000e0c <USB_Enabled+0x14>)
 8000dfe:	781b      	ldrb	r3, [r3, #0]
}
 8000e00:	4618      	mov	r0, r3
 8000e02:	46bd      	mov	sp, r7
 8000e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e08:	4770      	bx	lr
 8000e0a:	bf00      	nop
 8000e0c:	20000000 	.word	0x20000000

08000e10 <USB_Enable>:
void USB_Enable(uint8_t enable){
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b082      	sub	sp, #8
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	4603      	mov	r3, r0
 8000e18:	71fb      	strb	r3, [r7, #7]
	if(enable){
 8000e1a:	79fb      	ldrb	r3, [r7, #7]
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d008      	beq.n	8000e32 <USB_Enable+0x22>
		if(USBD_Start(&hUsbDeviceFS) != USBD_OK){Error_Handler();}
 8000e20:	480b      	ldr	r0, [pc, #44]	; (8000e50 <USB_Enable+0x40>)
 8000e22:	f009 fc1e 	bl	800a662 <USBD_Start>
 8000e26:	4603      	mov	r3, r0
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d00a      	beq.n	8000e42 <USB_Enable+0x32>
 8000e2c:	f000 fc1c 	bl	8001668 <Error_Handler>
 8000e30:	e007      	b.n	8000e42 <USB_Enable+0x32>
	}else{
		if(USBD_Stop(&hUsbDeviceFS) != USBD_OK){Error_Handler();}
 8000e32:	4807      	ldr	r0, [pc, #28]	; (8000e50 <USB_Enable+0x40>)
 8000e34:	f009 fc21 	bl	800a67a <USBD_Stop>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d001      	beq.n	8000e42 <USB_Enable+0x32>
 8000e3e:	f000 fc13 	bl	8001668 <Error_Handler>
	}
	usb_enabled = enable;
 8000e42:	4a04      	ldr	r2, [pc, #16]	; (8000e54 <USB_Enable+0x44>)
 8000e44:	79fb      	ldrb	r3, [r7, #7]
 8000e46:	7013      	strb	r3, [r2, #0]
}
 8000e48:	bf00      	nop
 8000e4a:	3708      	adds	r7, #8
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	bd80      	pop	{r7, pc}
 8000e50:	20001284 	.word	0x20001284
 8000e54:	20000000 	.word	0x20000000

08000e58 <USB_Init>:
void USB_Init(){
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	af00      	add	r7, sp, #0
	USB_Det_Interrupt();
 8000e5c:	f7ff ff84 	bl	8000d68 <USB_Det_Interrupt>
	USB_Enable(0);
 8000e60:	2000      	movs	r0, #0
 8000e62:	f7ff ffd5 	bl	8000e10 <USB_Enable>
 8000e66:	bf00      	nop
 8000e68:	bd80      	pop	{r7, pc}
	...

08000e6c <W25Q_SPI_Error_Interrupt>:

extern SPI_HandleTypeDef hspi1;
uint8_t w25q_dma_busy = 0;

//Hardware
void W25Q_SPI_Error_Interrupt(){
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	af00      	add	r7, sp, #0
	W25Q_Set_CS(1);
 8000e70:	2001      	movs	r0, #1
 8000e72:	f000 f84d 	bl	8000f10 <W25Q_Set_CS>
	w25q_dma_busy = 0;
 8000e76:	4b02      	ldr	r3, [pc, #8]	; (8000e80 <W25Q_SPI_Error_Interrupt+0x14>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	701a      	strb	r2, [r3, #0]
}
 8000e7c:	bf00      	nop
 8000e7e:	bd80      	pop	{r7, pc}
 8000e80:	20001173 	.word	0x20001173

08000e84 <W25Q_SPI_Receive_DMA_Interrupt>:
void W25Q_SPI_Receive_DMA_Interrupt(){
 8000e84:	b580      	push	{r7, lr}
 8000e86:	af00      	add	r7, sp, #0
	W25Q_Set_CS(1);
 8000e88:	2001      	movs	r0, #1
 8000e8a:	f000 f841 	bl	8000f10 <W25Q_Set_CS>
	w25q_dma_busy = 0;
 8000e8e:	4b02      	ldr	r3, [pc, #8]	; (8000e98 <W25Q_SPI_Receive_DMA_Interrupt+0x14>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	701a      	strb	r2, [r3, #0]
}
 8000e94:	bf00      	nop
 8000e96:	bd80      	pop	{r7, pc}
 8000e98:	20001173 	.word	0x20001173

08000e9c <W25Q_SPI_Receive_DMA>:
void W25Q_SPI_Receive_DMA(uint8_t *data, uint16_t length){
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b082      	sub	sp, #8
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
 8000ea4:	460b      	mov	r3, r1
 8000ea6:	807b      	strh	r3, [r7, #2]
	HAL_SPI_Receive_DMA(&hspi1, data, length);
 8000ea8:	887b      	ldrh	r3, [r7, #2]
 8000eaa:	461a      	mov	r2, r3
 8000eac:	6879      	ldr	r1, [r7, #4]
 8000eae:	4803      	ldr	r0, [pc, #12]	; (8000ebc <W25Q_SPI_Receive_DMA+0x20>)
 8000eb0:	f004 f8d8 	bl	8005064 <HAL_SPI_Receive_DMA>
}
 8000eb4:	bf00      	nop
 8000eb6:	3708      	adds	r7, #8
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	bd80      	pop	{r7, pc}
 8000ebc:	2000117c 	.word	0x2000117c

08000ec0 <W25Q_SPI_Receive>:
void W25Q_SPI_Receive(uint8_t *data, uint16_t length){
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b082      	sub	sp, #8
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
 8000ec8:	460b      	mov	r3, r1
 8000eca:	807b      	strh	r3, [r7, #2]
	HAL_SPI_Receive(&hspi1, data, length, W25Q_BLOCKING_TIMEOUT);
 8000ecc:	887a      	ldrh	r2, [r7, #2]
 8000ece:	f242 7310 	movw	r3, #10000	; 0x2710
 8000ed2:	6879      	ldr	r1, [r7, #4]
 8000ed4:	4803      	ldr	r0, [pc, #12]	; (8000ee4 <W25Q_SPI_Receive+0x24>)
 8000ed6:	f003 fe12 	bl	8004afe <HAL_SPI_Receive>
}
 8000eda:	bf00      	nop
 8000edc:	3708      	adds	r7, #8
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}
 8000ee2:	bf00      	nop
 8000ee4:	2000117c 	.word	0x2000117c

08000ee8 <W25Q_SPI_Transmit>:
void W25Q_SPI_Transmit(uint8_t *data, uint16_t length){
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b082      	sub	sp, #8
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
 8000ef0:	460b      	mov	r3, r1
 8000ef2:	807b      	strh	r3, [r7, #2]
	HAL_SPI_Transmit(&hspi1, data, length, W25Q_BLOCKING_TIMEOUT);
 8000ef4:	887a      	ldrh	r2, [r7, #2]
 8000ef6:	f242 7310 	movw	r3, #10000	; 0x2710
 8000efa:	6879      	ldr	r1, [r7, #4]
 8000efc:	4803      	ldr	r0, [pc, #12]	; (8000f0c <W25Q_SPI_Transmit+0x24>)
 8000efe:	f003 fcc2 	bl	8004886 <HAL_SPI_Transmit>
}
 8000f02:	bf00      	nop
 8000f04:	3708      	adds	r7, #8
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bd80      	pop	{r7, pc}
 8000f0a:	bf00      	nop
 8000f0c:	2000117c 	.word	0x2000117c

08000f10 <W25Q_Set_CS>:
void W25Q_Set_CS(uint8_t cs){
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b082      	sub	sp, #8
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	4603      	mov	r3, r0
 8000f18:	71fb      	strb	r3, [r7, #7]
	if(!cs){
 8000f1a:	79fb      	ldrb	r3, [r7, #7]
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d105      	bne.n	8000f2c <W25Q_Set_CS+0x1c>
		HAL_GPIO_WritePin(FLASH_CS_GPIO_Port, FLASH_CS_Pin, GPIO_PIN_RESET);
 8000f20:	2200      	movs	r2, #0
 8000f22:	2110      	movs	r1, #16
 8000f24:	4806      	ldr	r0, [pc, #24]	; (8000f40 <W25Q_Set_CS+0x30>)
 8000f26:	f001 fcdf 	bl	80028e8 <HAL_GPIO_WritePin>
	}else{
		HAL_GPIO_WritePin(FLASH_CS_GPIO_Port, FLASH_CS_Pin, GPIO_PIN_SET);
	}
}
 8000f2a:	e004      	b.n	8000f36 <W25Q_Set_CS+0x26>
		HAL_GPIO_WritePin(FLASH_CS_GPIO_Port, FLASH_CS_Pin, GPIO_PIN_SET);
 8000f2c:	2201      	movs	r2, #1
 8000f2e:	2110      	movs	r1, #16
 8000f30:	4803      	ldr	r0, [pc, #12]	; (8000f40 <W25Q_Set_CS+0x30>)
 8000f32:	f001 fcd9 	bl	80028e8 <HAL_GPIO_WritePin>
}
 8000f36:	bf00      	nop
 8000f38:	3708      	adds	r7, #8
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	40020000 	.word	0x40020000

08000f44 <W25Q_Write_Enable>:

//USB Side Commands
void W25Q_Write_Enable(uint8_t enable){
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b084      	sub	sp, #16
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	71fb      	strb	r3, [r7, #7]
	W25Q_Set_CS(0);
 8000f4e:	2000      	movs	r0, #0
 8000f50:	f7ff ffde 	bl	8000f10 <W25Q_Set_CS>
	uint8_t cmd = W25Q_CMD_WRIRE_ENABLE;
 8000f54:	2306      	movs	r3, #6
 8000f56:	73fb      	strb	r3, [r7, #15]
	if(!enable){
 8000f58:	79fb      	ldrb	r3, [r7, #7]
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d101      	bne.n	8000f62 <W25Q_Write_Enable+0x1e>
		cmd = W25Q_CMD_WRITE_DISABLE;
 8000f5e:	2304      	movs	r3, #4
 8000f60:	73fb      	strb	r3, [r7, #15]
	}
	W25Q_SPI_Transmit(&cmd, 1);
 8000f62:	f107 030f 	add.w	r3, r7, #15
 8000f66:	2101      	movs	r1, #1
 8000f68:	4618      	mov	r0, r3
 8000f6a:	f7ff ffbd 	bl	8000ee8 <W25Q_SPI_Transmit>
	W25Q_Set_CS(1);
 8000f6e:	2001      	movs	r0, #1
 8000f70:	f7ff ffce 	bl	8000f10 <W25Q_Set_CS>
}
 8000f74:	bf00      	nop
 8000f76:	3710      	adds	r7, #16
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bd80      	pop	{r7, pc}

08000f7c <W25Q_Busy>:
uint8_t W25Q_Busy(){
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b082      	sub	sp, #8
 8000f80:	af00      	add	r7, sp, #0
	W25Q_Set_CS(0);
 8000f82:	2000      	movs	r0, #0
 8000f84:	f7ff ffc4 	bl	8000f10 <W25Q_Set_CS>
	uint8_t tmp = W25Q_CMD_READ_STATUS_R1;
 8000f88:	2305      	movs	r3, #5
 8000f8a:	71fb      	strb	r3, [r7, #7]
	W25Q_SPI_Transmit(&tmp, 1);
 8000f8c:	1dfb      	adds	r3, r7, #7
 8000f8e:	2101      	movs	r1, #1
 8000f90:	4618      	mov	r0, r3
 8000f92:	f7ff ffa9 	bl	8000ee8 <W25Q_SPI_Transmit>
	W25Q_SPI_Receive(&tmp, 1);
 8000f96:	1dfb      	adds	r3, r7, #7
 8000f98:	2101      	movs	r1, #1
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	f7ff ff90 	bl	8000ec0 <W25Q_SPI_Receive>
	W25Q_Set_CS(1);
 8000fa0:	2001      	movs	r0, #1
 8000fa2:	f7ff ffb5 	bl	8000f10 <W25Q_Set_CS>
	return (tmp & 1);
 8000fa6:	79fb      	ldrb	r3, [r7, #7]
 8000fa8:	f003 0301 	and.w	r3, r3, #1
 8000fac:	b2db      	uxtb	r3, r3
}
 8000fae:	4618      	mov	r0, r3
 8000fb0:	3708      	adds	r7, #8
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}

08000fb6 <W25Q_Erase_Sector>:
void W25Q_Erase_Sector(uint32_t sector){
 8000fb6:	b580      	push	{r7, lr}
 8000fb8:	b084      	sub	sp, #16
 8000fba:	af00      	add	r7, sp, #0
 8000fbc:	6078      	str	r0, [r7, #4]
	while(W25Q_Busy());
 8000fbe:	bf00      	nop
 8000fc0:	f7ff ffdc 	bl	8000f7c <W25Q_Busy>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d1fa      	bne.n	8000fc0 <W25Q_Erase_Sector+0xa>
	W25Q_Write_Enable(1);
 8000fca:	2001      	movs	r0, #1
 8000fcc:	f7ff ffba 	bl	8000f44 <W25Q_Write_Enable>
	while(W25Q_Busy());
 8000fd0:	bf00      	nop
 8000fd2:	f7ff ffd3 	bl	8000f7c <W25Q_Busy>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d1fa      	bne.n	8000fd2 <W25Q_Erase_Sector+0x1c>
	W25Q_Set_CS(0);
 8000fdc:	2000      	movs	r0, #0
 8000fde:	f7ff ff97 	bl	8000f10 <W25Q_Set_CS>
	uint8_t cmd = W25Q_CMD_SECTOR_ERASE;
 8000fe2:	2320      	movs	r3, #32
 8000fe4:	73fb      	strb	r3, [r7, #15]
	W25Q_SPI_Transmit(&cmd, 1);
 8000fe6:	f107 030f 	add.w	r3, r7, #15
 8000fea:	2101      	movs	r1, #1
 8000fec:	4618      	mov	r0, r3
 8000fee:	f7ff ff7b 	bl	8000ee8 <W25Q_SPI_Transmit>
	uint32_t address = sector * W25Q_SECTOR_SIZE;
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	031b      	lsls	r3, r3, #12
 8000ff6:	60bb      	str	r3, [r7, #8]
	W25Q_SPI_Transmit((uint8_t *)&address, 3);
 8000ff8:	f107 0308 	add.w	r3, r7, #8
 8000ffc:	2103      	movs	r1, #3
 8000ffe:	4618      	mov	r0, r3
 8001000:	f7ff ff72 	bl	8000ee8 <W25Q_SPI_Transmit>
	W25Q_Set_CS(1);
 8001004:	2001      	movs	r0, #1
 8001006:	f7ff ff83 	bl	8000f10 <W25Q_Set_CS>
	while(W25Q_Busy());
 800100a:	bf00      	nop
 800100c:	f7ff ffb6 	bl	8000f7c <W25Q_Busy>
 8001010:	4603      	mov	r3, r0
 8001012:	2b00      	cmp	r3, #0
 8001014:	d1fa      	bne.n	800100c <W25Q_Erase_Sector+0x56>
}
 8001016:	bf00      	nop
 8001018:	bf00      	nop
 800101a:	3710      	adds	r7, #16
 800101c:	46bd      	mov	sp, r7
 800101e:	bd80      	pop	{r7, pc}

08001020 <W25Q_Write_Sector>:
void W25Q_Write_Sector(uint8_t* data, uint16_t sector){
 8001020:	b580      	push	{r7, lr}
 8001022:	b086      	sub	sp, #24
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
 8001028:	460b      	mov	r3, r1
 800102a:	807b      	strh	r3, [r7, #2]
	uint8_t cmd = W25Q_CMD_PAGE_PROGRAM;
 800102c:	2302      	movs	r3, #2
 800102e:	74fb      	strb	r3, [r7, #19]
	uint32_t address = sector * W25Q_SECTOR_SIZE;
 8001030:	887b      	ldrh	r3, [r7, #2]
 8001032:	031b      	lsls	r3, r3, #12
 8001034:	60fb      	str	r3, [r7, #12]
	uint32_t i = 0;
 8001036:	2300      	movs	r3, #0
 8001038:	617b      	str	r3, [r7, #20]
	while(i != W25Q_SECTOR_SIZE / W25Q_PAGE_SIZE){
 800103a:	e030      	b.n	800109e <W25Q_Write_Sector+0x7e>
		while(W25Q_Busy());
 800103c:	bf00      	nop
 800103e:	f7ff ff9d 	bl	8000f7c <W25Q_Busy>
 8001042:	4603      	mov	r3, r0
 8001044:	2b00      	cmp	r3, #0
 8001046:	d1fa      	bne.n	800103e <W25Q_Write_Sector+0x1e>
		W25Q_Write_Enable(1);
 8001048:	2001      	movs	r0, #1
 800104a:	f7ff ff7b 	bl	8000f44 <W25Q_Write_Enable>
		while(W25Q_Busy());
 800104e:	bf00      	nop
 8001050:	f7ff ff94 	bl	8000f7c <W25Q_Busy>
 8001054:	4603      	mov	r3, r0
 8001056:	2b00      	cmp	r3, #0
 8001058:	d1fa      	bne.n	8001050 <W25Q_Write_Sector+0x30>
		W25Q_Set_CS(0);
 800105a:	2000      	movs	r0, #0
 800105c:	f7ff ff58 	bl	8000f10 <W25Q_Set_CS>
		W25Q_SPI_Transmit(&cmd, 1);
 8001060:	f107 0313 	add.w	r3, r7, #19
 8001064:	2101      	movs	r1, #1
 8001066:	4618      	mov	r0, r3
 8001068:	f7ff ff3e 	bl	8000ee8 <W25Q_SPI_Transmit>
		W25Q_SPI_Transmit((uint8_t *)&address, 3);
 800106c:	f107 030c 	add.w	r3, r7, #12
 8001070:	2103      	movs	r1, #3
 8001072:	4618      	mov	r0, r3
 8001074:	f7ff ff38 	bl	8000ee8 <W25Q_SPI_Transmit>
		W25Q_SPI_Transmit(&data[W25Q_PAGE_SIZE * i], W25Q_PAGE_SIZE);
 8001078:	697b      	ldr	r3, [r7, #20]
 800107a:	021b      	lsls	r3, r3, #8
 800107c:	687a      	ldr	r2, [r7, #4]
 800107e:	4413      	add	r3, r2
 8001080:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001084:	4618      	mov	r0, r3
 8001086:	f7ff ff2f 	bl	8000ee8 <W25Q_SPI_Transmit>
		W25Q_Set_CS(1);
 800108a:	2001      	movs	r0, #1
 800108c:	f7ff ff40 	bl	8000f10 <W25Q_Set_CS>
		address += W25Q_PAGE_SIZE;
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001096:	60fb      	str	r3, [r7, #12]
		i++;
 8001098:	697b      	ldr	r3, [r7, #20]
 800109a:	3301      	adds	r3, #1
 800109c:	617b      	str	r3, [r7, #20]
	while(i != W25Q_SECTOR_SIZE / W25Q_PAGE_SIZE){
 800109e:	697b      	ldr	r3, [r7, #20]
 80010a0:	2b10      	cmp	r3, #16
 80010a2:	d1cb      	bne.n	800103c <W25Q_Write_Sector+0x1c>
	}
	while(W25Q_Busy());
 80010a4:	bf00      	nop
 80010a6:	f7ff ff69 	bl	8000f7c <W25Q_Busy>
 80010aa:	4603      	mov	r3, r0
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d1fa      	bne.n	80010a6 <W25Q_Write_Sector+0x86>
}
 80010b0:	bf00      	nop
 80010b2:	bf00      	nop
 80010b4:	3718      	adds	r7, #24
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}

080010ba <W25Q_Read_Sector>:
void W25Q_Read_Sector(uint8_t *data, uint16_t sector){
 80010ba:	b580      	push	{r7, lr}
 80010bc:	b084      	sub	sp, #16
 80010be:	af00      	add	r7, sp, #0
 80010c0:	6078      	str	r0, [r7, #4]
 80010c2:	460b      	mov	r3, r1
 80010c4:	807b      	strh	r3, [r7, #2]
	while(W25Q_Busy());
 80010c6:	bf00      	nop
 80010c8:	f7ff ff58 	bl	8000f7c <W25Q_Busy>
 80010cc:	4603      	mov	r3, r0
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d1fa      	bne.n	80010c8 <W25Q_Read_Sector+0xe>
	W25Q_Set_CS(0);
 80010d2:	2000      	movs	r0, #0
 80010d4:	f7ff ff1c 	bl	8000f10 <W25Q_Set_CS>
	uint8_t cmd = W25Q_CMD_FAST_READ;
 80010d8:	230b      	movs	r3, #11
 80010da:	73fb      	strb	r3, [r7, #15]
	W25Q_SPI_Transmit(&cmd, 1);
 80010dc:	f107 030f 	add.w	r3, r7, #15
 80010e0:	2101      	movs	r1, #1
 80010e2:	4618      	mov	r0, r3
 80010e4:	f7ff ff00 	bl	8000ee8 <W25Q_SPI_Transmit>

	uint32_t address = sector * W25Q_SECTOR_SIZE;
 80010e8:	887b      	ldrh	r3, [r7, #2]
 80010ea:	031b      	lsls	r3, r3, #12
 80010ec:	60bb      	str	r3, [r7, #8]
	address = ((address >> 16) & 0xff) | (address & 0xff00) | ((address << 16) & 0xff0000);
 80010ee:	68bb      	ldr	r3, [r7, #8]
 80010f0:	0c1b      	lsrs	r3, r3, #16
 80010f2:	b2da      	uxtb	r2, r3
 80010f4:	68bb      	ldr	r3, [r7, #8]
 80010f6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80010fa:	431a      	orrs	r2, r3
 80010fc:	68bb      	ldr	r3, [r7, #8]
 80010fe:	041b      	lsls	r3, r3, #16
 8001100:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8001104:	4313      	orrs	r3, r2
 8001106:	60bb      	str	r3, [r7, #8]
	W25Q_SPI_Transmit((uint8_t *)&address, 4);
 8001108:	f107 0308 	add.w	r3, r7, #8
 800110c:	2104      	movs	r1, #4
 800110e:	4618      	mov	r0, r3
 8001110:	f7ff feea 	bl	8000ee8 <W25Q_SPI_Transmit>

	W25Q_SPI_Receive(data, W25Q_SECTOR_SIZE);
 8001114:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001118:	6878      	ldr	r0, [r7, #4]
 800111a:	f7ff fed1 	bl	8000ec0 <W25Q_SPI_Receive>
 	W25Q_Set_CS(1);
 800111e:	2001      	movs	r0, #1
 8001120:	f7ff fef6 	bl	8000f10 <W25Q_Set_CS>
}
 8001124:	bf00      	nop
 8001126:	3710      	adds	r7, #16
 8001128:	46bd      	mov	sp, r7
 800112a:	bd80      	pop	{r7, pc}

0800112c <W25Q_Read_DMA>:
	W25Q_Set_CS(1);
	while(W25Q_Busy());
}

//App
void W25Q_Read_DMA(uint8_t *data, uint16_t length, uint32_t address){
 800112c:	b580      	push	{r7, lr}
 800112e:	b086      	sub	sp, #24
 8001130:	af00      	add	r7, sp, #0
 8001132:	60f8      	str	r0, [r7, #12]
 8001134:	460b      	mov	r3, r1
 8001136:	607a      	str	r2, [r7, #4]
 8001138:	817b      	strh	r3, [r7, #10]
	while(w25q_dma_busy);
 800113a:	bf00      	nop
 800113c:	4b16      	ldr	r3, [pc, #88]	; (8001198 <W25Q_Read_DMA+0x6c>)
 800113e:	781b      	ldrb	r3, [r3, #0]
 8001140:	2b00      	cmp	r3, #0
 8001142:	d1fb      	bne.n	800113c <W25Q_Read_DMA+0x10>
	w25q_dma_busy = 1;
 8001144:	4b14      	ldr	r3, [pc, #80]	; (8001198 <W25Q_Read_DMA+0x6c>)
 8001146:	2201      	movs	r2, #1
 8001148:	701a      	strb	r2, [r3, #0]
	W25Q_Set_CS(0);
 800114a:	2000      	movs	r0, #0
 800114c:	f7ff fee0 	bl	8000f10 <W25Q_Set_CS>
	uint8_t cmd = W25Q_CMD_FAST_READ;
 8001150:	230b      	movs	r3, #11
 8001152:	75fb      	strb	r3, [r7, #23]
	W25Q_SPI_Transmit(&cmd, 1);
 8001154:	f107 0317 	add.w	r3, r7, #23
 8001158:	2101      	movs	r1, #1
 800115a:	4618      	mov	r0, r3
 800115c:	f7ff fec4 	bl	8000ee8 <W25Q_SPI_Transmit>

	address = ((address >> 16) & 0xff) | (address & 0xff00) | ((address << 16) & 0xff0000);
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	0c1b      	lsrs	r3, r3, #16
 8001164:	b2da      	uxtb	r2, r3
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800116c:	431a      	orrs	r2, r3
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	041b      	lsls	r3, r3, #16
 8001172:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8001176:	4313      	orrs	r3, r2
 8001178:	607b      	str	r3, [r7, #4]
	W25Q_SPI_Transmit((uint8_t *)&address, 4);
 800117a:	1d3b      	adds	r3, r7, #4
 800117c:	2104      	movs	r1, #4
 800117e:	4618      	mov	r0, r3
 8001180:	f7ff feb2 	bl	8000ee8 <W25Q_SPI_Transmit>

	W25Q_SPI_Receive_DMA(data, length);
 8001184:	897b      	ldrh	r3, [r7, #10]
 8001186:	4619      	mov	r1, r3
 8001188:	68f8      	ldr	r0, [r7, #12]
 800118a:	f7ff fe87 	bl	8000e9c <W25Q_SPI_Receive_DMA>
}
 800118e:	bf00      	nop
 8001190:	3718      	adds	r7, #24
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	20001173 	.word	0x20001173

0800119c <W25Q_Read>:
void W25Q_Read(uint8_t *data, uint32_t address, uint16_t length){
 800119c:	b580      	push	{r7, lr}
 800119e:	b086      	sub	sp, #24
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	60f8      	str	r0, [r7, #12]
 80011a4:	60b9      	str	r1, [r7, #8]
 80011a6:	4613      	mov	r3, r2
 80011a8:	80fb      	strh	r3, [r7, #6]
	while(W25Q_Busy());
 80011aa:	bf00      	nop
 80011ac:	f7ff fee6 	bl	8000f7c <W25Q_Busy>
 80011b0:	4603      	mov	r3, r0
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d1fa      	bne.n	80011ac <W25Q_Read+0x10>
	W25Q_Set_CS(0);
 80011b6:	2000      	movs	r0, #0
 80011b8:	f7ff feaa 	bl	8000f10 <W25Q_Set_CS>
	uint8_t cmd = W25Q_CMD_FAST_READ;
 80011bc:	230b      	movs	r3, #11
 80011be:	75fb      	strb	r3, [r7, #23]
	W25Q_SPI_Transmit(&cmd, 1);
 80011c0:	f107 0317 	add.w	r3, r7, #23
 80011c4:	2101      	movs	r1, #1
 80011c6:	4618      	mov	r0, r3
 80011c8:	f7ff fe8e 	bl	8000ee8 <W25Q_SPI_Transmit>

	address = ((address >> 16) & 0xff) | (address & 0xff00) | ((address << 16) & 0xff0000);
 80011cc:	68bb      	ldr	r3, [r7, #8]
 80011ce:	0c1b      	lsrs	r3, r3, #16
 80011d0:	b2da      	uxtb	r2, r3
 80011d2:	68bb      	ldr	r3, [r7, #8]
 80011d4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80011d8:	431a      	orrs	r2, r3
 80011da:	68bb      	ldr	r3, [r7, #8]
 80011dc:	041b      	lsls	r3, r3, #16
 80011de:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80011e2:	4313      	orrs	r3, r2
 80011e4:	60bb      	str	r3, [r7, #8]
	W25Q_SPI_Transmit((uint8_t *)&address, 4);
 80011e6:	f107 0308 	add.w	r3, r7, #8
 80011ea:	2104      	movs	r1, #4
 80011ec:	4618      	mov	r0, r3
 80011ee:	f7ff fe7b 	bl	8000ee8 <W25Q_SPI_Transmit>

	W25Q_SPI_Receive(data, length);
 80011f2:	88fb      	ldrh	r3, [r7, #6]
 80011f4:	4619      	mov	r1, r3
 80011f6:	68f8      	ldr	r0, [r7, #12]
 80011f8:	f7ff fe62 	bl	8000ec0 <W25Q_SPI_Receive>
 	W25Q_Set_CS(1);
 80011fc:	2001      	movs	r0, #1
 80011fe:	f7ff fe87 	bl	8000f10 <W25Q_Set_CS>
}
 8001202:	bf00      	nop
 8001204:	3718      	adds	r7, #24
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}

0800120a <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800120a:	b580      	push	{r7, lr}
 800120c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800120e:	f000 fc30 	bl	8001a72 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001212:	f000 f811 	bl	8001238 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001216:	f000 f985 	bl	8001524 <MX_GPIO_Init>
  MX_DMA_Init();
 800121a:	f000 f963 	bl	80014e4 <MX_DMA_Init>
  MX_TIM1_Init();
 800121e:	f000 f8c1 	bl	80013a4 <MX_TIM1_Init>
  MX_CRC_Init();
 8001222:	f000 f875 	bl	8001310 <MX_CRC_Init>
  MX_SPI1_Init();
 8001226:	f000 f887 	bl	8001338 <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 800122a:	f00a fca5 	bl	800bb78 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  App_Init();
 800122e:	f7ff fc4d 	bl	8000acc <App_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    App_Loop();
 8001232:	f7ff fc5b 	bl	8000aec <App_Loop>
 8001236:	e7fc      	b.n	8001232 <main+0x28>

08001238 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b094      	sub	sp, #80	; 0x50
 800123c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800123e:	f107 0320 	add.w	r3, r7, #32
 8001242:	2230      	movs	r2, #48	; 0x30
 8001244:	2100      	movs	r1, #0
 8001246:	4618      	mov	r0, r3
 8001248:	f00b f9d2 	bl	800c5f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800124c:	f107 030c 	add.w	r3, r7, #12
 8001250:	2200      	movs	r2, #0
 8001252:	601a      	str	r2, [r3, #0]
 8001254:	605a      	str	r2, [r3, #4]
 8001256:	609a      	str	r2, [r3, #8]
 8001258:	60da      	str	r2, [r3, #12]
 800125a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800125c:	2300      	movs	r3, #0
 800125e:	60bb      	str	r3, [r7, #8]
 8001260:	4b29      	ldr	r3, [pc, #164]	; (8001308 <SystemClock_Config+0xd0>)
 8001262:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001264:	4a28      	ldr	r2, [pc, #160]	; (8001308 <SystemClock_Config+0xd0>)
 8001266:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800126a:	6413      	str	r3, [r2, #64]	; 0x40
 800126c:	4b26      	ldr	r3, [pc, #152]	; (8001308 <SystemClock_Config+0xd0>)
 800126e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001270:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001274:	60bb      	str	r3, [r7, #8]
 8001276:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001278:	2300      	movs	r3, #0
 800127a:	607b      	str	r3, [r7, #4]
 800127c:	4b23      	ldr	r3, [pc, #140]	; (800130c <SystemClock_Config+0xd4>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001284:	4a21      	ldr	r2, [pc, #132]	; (800130c <SystemClock_Config+0xd4>)
 8001286:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800128a:	6013      	str	r3, [r2, #0]
 800128c:	4b1f      	ldr	r3, [pc, #124]	; (800130c <SystemClock_Config+0xd4>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001294:	607b      	str	r3, [r7, #4]
 8001296:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001298:	2301      	movs	r3, #1
 800129a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800129c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80012a0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012a2:	2302      	movs	r3, #2
 80012a4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80012a6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80012aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80012ac:	2319      	movs	r3, #25
 80012ae:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80012b0:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80012b4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80012b6:	2304      	movs	r3, #4
 80012b8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80012ba:	2307      	movs	r3, #7
 80012bc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012be:	f107 0320 	add.w	r3, r7, #32
 80012c2:	4618      	mov	r0, r3
 80012c4:	f002 fe26 	bl	8003f14 <HAL_RCC_OscConfig>
 80012c8:	4603      	mov	r3, r0
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d001      	beq.n	80012d2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80012ce:	f000 f9cb 	bl	8001668 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012d2:	230f      	movs	r3, #15
 80012d4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012d6:	2302      	movs	r3, #2
 80012d8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012da:	2300      	movs	r3, #0
 80012dc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80012de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012e2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012e4:	2300      	movs	r3, #0
 80012e6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80012e8:	f107 030c 	add.w	r3, r7, #12
 80012ec:	2102      	movs	r1, #2
 80012ee:	4618      	mov	r0, r3
 80012f0:	f003 f888 	bl	8004404 <HAL_RCC_ClockConfig>
 80012f4:	4603      	mov	r3, r0
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d001      	beq.n	80012fe <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80012fa:	f000 f9b5 	bl	8001668 <Error_Handler>
  }
}
 80012fe:	bf00      	nop
 8001300:	3750      	adds	r7, #80	; 0x50
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}
 8001306:	bf00      	nop
 8001308:	40023800 	.word	0x40023800
 800130c:	40007000 	.word	0x40007000

08001310 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8001314:	4b06      	ldr	r3, [pc, #24]	; (8001330 <MX_CRC_Init+0x20>)
 8001316:	4a07      	ldr	r2, [pc, #28]	; (8001334 <MX_CRC_Init+0x24>)
 8001318:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800131a:	4805      	ldr	r0, [pc, #20]	; (8001330 <MX_CRC_Init+0x20>)
 800131c:	f000 fd3b 	bl	8001d96 <HAL_CRC_Init>
 8001320:	4603      	mov	r3, r0
 8001322:	2b00      	cmp	r3, #0
 8001324:	d001      	beq.n	800132a <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8001326:	f000 f99f 	bl	8001668 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800132a:	bf00      	nop
 800132c:	bd80      	pop	{r7, pc}
 800132e:	bf00      	nop
 8001330:	20001174 	.word	0x20001174
 8001334:	40023000 	.word	0x40023000

08001338 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800133c:	4b17      	ldr	r3, [pc, #92]	; (800139c <MX_SPI1_Init+0x64>)
 800133e:	4a18      	ldr	r2, [pc, #96]	; (80013a0 <MX_SPI1_Init+0x68>)
 8001340:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001342:	4b16      	ldr	r3, [pc, #88]	; (800139c <MX_SPI1_Init+0x64>)
 8001344:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001348:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800134a:	4b14      	ldr	r3, [pc, #80]	; (800139c <MX_SPI1_Init+0x64>)
 800134c:	2200      	movs	r2, #0
 800134e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001350:	4b12      	ldr	r3, [pc, #72]	; (800139c <MX_SPI1_Init+0x64>)
 8001352:	2200      	movs	r2, #0
 8001354:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001356:	4b11      	ldr	r3, [pc, #68]	; (800139c <MX_SPI1_Init+0x64>)
 8001358:	2200      	movs	r2, #0
 800135a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800135c:	4b0f      	ldr	r3, [pc, #60]	; (800139c <MX_SPI1_Init+0x64>)
 800135e:	2200      	movs	r2, #0
 8001360:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001362:	4b0e      	ldr	r3, [pc, #56]	; (800139c <MX_SPI1_Init+0x64>)
 8001364:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001368:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800136a:	4b0c      	ldr	r3, [pc, #48]	; (800139c <MX_SPI1_Init+0x64>)
 800136c:	2200      	movs	r2, #0
 800136e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001370:	4b0a      	ldr	r3, [pc, #40]	; (800139c <MX_SPI1_Init+0x64>)
 8001372:	2200      	movs	r2, #0
 8001374:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001376:	4b09      	ldr	r3, [pc, #36]	; (800139c <MX_SPI1_Init+0x64>)
 8001378:	2200      	movs	r2, #0
 800137a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800137c:	4b07      	ldr	r3, [pc, #28]	; (800139c <MX_SPI1_Init+0x64>)
 800137e:	2200      	movs	r2, #0
 8001380:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001382:	4b06      	ldr	r3, [pc, #24]	; (800139c <MX_SPI1_Init+0x64>)
 8001384:	220a      	movs	r2, #10
 8001386:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001388:	4804      	ldr	r0, [pc, #16]	; (800139c <MX_SPI1_Init+0x64>)
 800138a:	f003 f9f3 	bl	8004774 <HAL_SPI_Init>
 800138e:	4603      	mov	r3, r0
 8001390:	2b00      	cmp	r3, #0
 8001392:	d001      	beq.n	8001398 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001394:	f000 f968 	bl	8001668 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001398:	bf00      	nop
 800139a:	bd80      	pop	{r7, pc}
 800139c:	2000117c 	.word	0x2000117c
 80013a0:	40013000 	.word	0x40013000

080013a4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b096      	sub	sp, #88	; 0x58
 80013a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013aa:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80013ae:	2200      	movs	r2, #0
 80013b0:	601a      	str	r2, [r3, #0]
 80013b2:	605a      	str	r2, [r3, #4]
 80013b4:	609a      	str	r2, [r3, #8]
 80013b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013b8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80013bc:	2200      	movs	r2, #0
 80013be:	601a      	str	r2, [r3, #0]
 80013c0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80013c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013c6:	2200      	movs	r2, #0
 80013c8:	601a      	str	r2, [r3, #0]
 80013ca:	605a      	str	r2, [r3, #4]
 80013cc:	609a      	str	r2, [r3, #8]
 80013ce:	60da      	str	r2, [r3, #12]
 80013d0:	611a      	str	r2, [r3, #16]
 80013d2:	615a      	str	r2, [r3, #20]
 80013d4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80013d6:	1d3b      	adds	r3, r7, #4
 80013d8:	2220      	movs	r2, #32
 80013da:	2100      	movs	r1, #0
 80013dc:	4618      	mov	r0, r3
 80013de:	f00b f907 	bl	800c5f0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80013e2:	4b3e      	ldr	r3, [pc, #248]	; (80014dc <MX_TIM1_Init+0x138>)
 80013e4:	4a3e      	ldr	r2, [pc, #248]	; (80014e0 <MX_TIM1_Init+0x13c>)
 80013e6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 3;
 80013e8:	4b3c      	ldr	r3, [pc, #240]	; (80014dc <MX_TIM1_Init+0x138>)
 80013ea:	2203      	movs	r2, #3
 80013ec:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013ee:	4b3b      	ldr	r3, [pc, #236]	; (80014dc <MX_TIM1_Init+0x138>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 104;
 80013f4:	4b39      	ldr	r3, [pc, #228]	; (80014dc <MX_TIM1_Init+0x138>)
 80013f6:	2268      	movs	r2, #104	; 0x68
 80013f8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013fa:	4b38      	ldr	r3, [pc, #224]	; (80014dc <MX_TIM1_Init+0x138>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001400:	4b36      	ldr	r3, [pc, #216]	; (80014dc <MX_TIM1_Init+0x138>)
 8001402:	2200      	movs	r2, #0
 8001404:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001406:	4b35      	ldr	r3, [pc, #212]	; (80014dc <MX_TIM1_Init+0x138>)
 8001408:	2280      	movs	r2, #128	; 0x80
 800140a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800140c:	4833      	ldr	r0, [pc, #204]	; (80014dc <MX_TIM1_Init+0x138>)
 800140e:	f004 fb2d 	bl	8005a6c <HAL_TIM_Base_Init>
 8001412:	4603      	mov	r3, r0
 8001414:	2b00      	cmp	r3, #0
 8001416:	d001      	beq.n	800141c <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8001418:	f000 f926 	bl	8001668 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800141c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001420:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001422:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001426:	4619      	mov	r1, r3
 8001428:	482c      	ldr	r0, [pc, #176]	; (80014dc <MX_TIM1_Init+0x138>)
 800142a:	f004 ff41 	bl	80062b0 <HAL_TIM_ConfigClockSource>
 800142e:	4603      	mov	r3, r0
 8001430:	2b00      	cmp	r3, #0
 8001432:	d001      	beq.n	8001438 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8001434:	f000 f918 	bl	8001668 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001438:	4828      	ldr	r0, [pc, #160]	; (80014dc <MX_TIM1_Init+0x138>)
 800143a:	f004 fb66 	bl	8005b0a <HAL_TIM_PWM_Init>
 800143e:	4603      	mov	r3, r0
 8001440:	2b00      	cmp	r3, #0
 8001442:	d001      	beq.n	8001448 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8001444:	f000 f910 	bl	8001668 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001448:	2300      	movs	r3, #0
 800144a:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800144c:	2300      	movs	r3, #0
 800144e:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001450:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001454:	4619      	mov	r1, r3
 8001456:	4821      	ldr	r0, [pc, #132]	; (80014dc <MX_TIM1_Init+0x138>)
 8001458:	f005 fae6 	bl	8006a28 <HAL_TIMEx_MasterConfigSynchronization>
 800145c:	4603      	mov	r3, r0
 800145e:	2b00      	cmp	r3, #0
 8001460:	d001      	beq.n	8001466 <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 8001462:	f000 f901 	bl	8001668 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001466:	2360      	movs	r3, #96	; 0x60
 8001468:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800146a:	2300      	movs	r3, #0
 800146c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800146e:	2300      	movs	r3, #0
 8001470:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001472:	2300      	movs	r3, #0
 8001474:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001476:	2300      	movs	r3, #0
 8001478:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800147a:	2300      	movs	r3, #0
 800147c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800147e:	2300      	movs	r3, #0
 8001480:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001482:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001486:	2200      	movs	r2, #0
 8001488:	4619      	mov	r1, r3
 800148a:	4814      	ldr	r0, [pc, #80]	; (80014dc <MX_TIM1_Init+0x138>)
 800148c:	f004 fe4e 	bl	800612c <HAL_TIM_PWM_ConfigChannel>
 8001490:	4603      	mov	r3, r0
 8001492:	2b00      	cmp	r3, #0
 8001494:	d001      	beq.n	800149a <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8001496:	f000 f8e7 	bl	8001668 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800149a:	2300      	movs	r3, #0
 800149c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800149e:	2300      	movs	r3, #0
 80014a0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80014a2:	2300      	movs	r3, #0
 80014a4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80014a6:	2300      	movs	r3, #0
 80014a8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80014aa:	2300      	movs	r3, #0
 80014ac:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80014ae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014b2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80014b4:	2300      	movs	r3, #0
 80014b6:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80014b8:	1d3b      	adds	r3, r7, #4
 80014ba:	4619      	mov	r1, r3
 80014bc:	4807      	ldr	r0, [pc, #28]	; (80014dc <MX_TIM1_Init+0x138>)
 80014be:	f005 fb21 	bl	8006b04 <HAL_TIMEx_ConfigBreakDeadTime>
 80014c2:	4603      	mov	r3, r0
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d001      	beq.n	80014cc <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 80014c8:	f000 f8ce 	bl	8001668 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80014cc:	4803      	ldr	r0, [pc, #12]	; (80014dc <MX_TIM1_Init+0x138>)
 80014ce:	f000 f9dd 	bl	800188c <HAL_TIM_MspPostInit>

}
 80014d2:	bf00      	nop
 80014d4:	3758      	adds	r7, #88	; 0x58
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}
 80014da:	bf00      	nop
 80014dc:	20001234 	.word	0x20001234
 80014e0:	40010000 	.word	0x40010000

080014e4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b082      	sub	sp, #8
 80014e8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80014ea:	2300      	movs	r3, #0
 80014ec:	607b      	str	r3, [r7, #4]
 80014ee:	4b0c      	ldr	r3, [pc, #48]	; (8001520 <MX_DMA_Init+0x3c>)
 80014f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f2:	4a0b      	ldr	r2, [pc, #44]	; (8001520 <MX_DMA_Init+0x3c>)
 80014f4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80014f8:	6313      	str	r3, [r2, #48]	; 0x30
 80014fa:	4b09      	ldr	r3, [pc, #36]	; (8001520 <MX_DMA_Init+0x3c>)
 80014fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001502:	607b      	str	r3, [r7, #4]
 8001504:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001506:	2200      	movs	r2, #0
 8001508:	2100      	movs	r1, #0
 800150a:	2038      	movs	r0, #56	; 0x38
 800150c:	f000 fc0d 	bl	8001d2a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001510:	2038      	movs	r0, #56	; 0x38
 8001512:	f000 fc26 	bl	8001d62 <HAL_NVIC_EnableIRQ>

}
 8001516:	bf00      	nop
 8001518:	3708      	adds	r7, #8
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}
 800151e:	bf00      	nop
 8001520:	40023800 	.word	0x40023800

08001524 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b08a      	sub	sp, #40	; 0x28
 8001528:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800152a:	f107 0314 	add.w	r3, r7, #20
 800152e:	2200      	movs	r2, #0
 8001530:	601a      	str	r2, [r3, #0]
 8001532:	605a      	str	r2, [r3, #4]
 8001534:	609a      	str	r2, [r3, #8]
 8001536:	60da      	str	r2, [r3, #12]
 8001538:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800153a:	2300      	movs	r3, #0
 800153c:	613b      	str	r3, [r7, #16]
 800153e:	4b46      	ldr	r3, [pc, #280]	; (8001658 <MX_GPIO_Init+0x134>)
 8001540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001542:	4a45      	ldr	r2, [pc, #276]	; (8001658 <MX_GPIO_Init+0x134>)
 8001544:	f043 0304 	orr.w	r3, r3, #4
 8001548:	6313      	str	r3, [r2, #48]	; 0x30
 800154a:	4b43      	ldr	r3, [pc, #268]	; (8001658 <MX_GPIO_Init+0x134>)
 800154c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800154e:	f003 0304 	and.w	r3, r3, #4
 8001552:	613b      	str	r3, [r7, #16]
 8001554:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001556:	2300      	movs	r3, #0
 8001558:	60fb      	str	r3, [r7, #12]
 800155a:	4b3f      	ldr	r3, [pc, #252]	; (8001658 <MX_GPIO_Init+0x134>)
 800155c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800155e:	4a3e      	ldr	r2, [pc, #248]	; (8001658 <MX_GPIO_Init+0x134>)
 8001560:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001564:	6313      	str	r3, [r2, #48]	; 0x30
 8001566:	4b3c      	ldr	r3, [pc, #240]	; (8001658 <MX_GPIO_Init+0x134>)
 8001568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800156a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800156e:	60fb      	str	r3, [r7, #12]
 8001570:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001572:	2300      	movs	r3, #0
 8001574:	60bb      	str	r3, [r7, #8]
 8001576:	4b38      	ldr	r3, [pc, #224]	; (8001658 <MX_GPIO_Init+0x134>)
 8001578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800157a:	4a37      	ldr	r2, [pc, #220]	; (8001658 <MX_GPIO_Init+0x134>)
 800157c:	f043 0301 	orr.w	r3, r3, #1
 8001580:	6313      	str	r3, [r2, #48]	; 0x30
 8001582:	4b35      	ldr	r3, [pc, #212]	; (8001658 <MX_GPIO_Init+0x134>)
 8001584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001586:	f003 0301 	and.w	r3, r3, #1
 800158a:	60bb      	str	r3, [r7, #8]
 800158c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800158e:	2300      	movs	r3, #0
 8001590:	607b      	str	r3, [r7, #4]
 8001592:	4b31      	ldr	r3, [pc, #196]	; (8001658 <MX_GPIO_Init+0x134>)
 8001594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001596:	4a30      	ldr	r2, [pc, #192]	; (8001658 <MX_GPIO_Init+0x134>)
 8001598:	f043 0302 	orr.w	r3, r3, #2
 800159c:	6313      	str	r3, [r2, #48]	; 0x30
 800159e:	4b2e      	ldr	r3, [pc, #184]	; (8001658 <MX_GPIO_Init+0x134>)
 80015a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015a2:	f003 0302 	and.w	r3, r3, #2
 80015a6:	607b      	str	r3, [r7, #4]
 80015a8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 80015aa:	2201      	movs	r2, #1
 80015ac:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80015b0:	482a      	ldr	r0, [pc, #168]	; (800165c <MX_GPIO_Init+0x138>)
 80015b2:	f001 f999 	bl	80028e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FLASH_CS_GPIO_Port, FLASH_CS_Pin, GPIO_PIN_SET);
 80015b6:	2201      	movs	r2, #1
 80015b8:	2110      	movs	r1, #16
 80015ba:	4829      	ldr	r0, [pc, #164]	; (8001660 <MX_GPIO_Init+0x13c>)
 80015bc:	f001 f994 	bl	80028e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80015c0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80015c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015c6:	2301      	movs	r3, #1
 80015c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80015ca:	2301      	movs	r3, #1
 80015cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ce:	2300      	movs	r3, #0
 80015d0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80015d2:	f107 0314 	add.w	r3, r7, #20
 80015d6:	4619      	mov	r1, r3
 80015d8:	4820      	ldr	r0, [pc, #128]	; (800165c <MX_GPIO_Init+0x138>)
 80015da:	f000 ffe9 	bl	80025b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 80015de:	2301      	movs	r3, #1
 80015e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80015e2:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 80015e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80015e8:	2301      	movs	r3, #1
 80015ea:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 80015ec:	f107 0314 	add.w	r3, r7, #20
 80015f0:	4619      	mov	r1, r3
 80015f2:	481b      	ldr	r0, [pc, #108]	; (8001660 <MX_GPIO_Init+0x13c>)
 80015f4:	f000 ffdc 	bl	80025b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : FLASH_CS_Pin */
  GPIO_InitStruct.Pin = FLASH_CS_Pin;
 80015f8:	2310      	movs	r3, #16
 80015fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015fc:	2301      	movs	r3, #1
 80015fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001600:	2301      	movs	r3, #1
 8001602:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001604:	2303      	movs	r3, #3
 8001606:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(FLASH_CS_GPIO_Port, &GPIO_InitStruct);
 8001608:	f107 0314 	add.w	r3, r7, #20
 800160c:	4619      	mov	r1, r3
 800160e:	4814      	ldr	r0, [pc, #80]	; (8001660 <MX_GPIO_Init+0x13c>)
 8001610:	f000 ffce 	bl	80025b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_DET_Pin */
  GPIO_InitStruct.Pin = USB_DET_Pin;
 8001614:	2340      	movs	r3, #64	; 0x40
 8001616:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001618:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 800161c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800161e:	2302      	movs	r3, #2
 8001620:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USB_DET_GPIO_Port, &GPIO_InitStruct);
 8001622:	f107 0314 	add.w	r3, r7, #20
 8001626:	4619      	mov	r1, r3
 8001628:	480e      	ldr	r0, [pc, #56]	; (8001664 <MX_GPIO_Init+0x140>)
 800162a:	f000 ffc1 	bl	80025b0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 1, 0);
 800162e:	2200      	movs	r2, #0
 8001630:	2101      	movs	r1, #1
 8001632:	2006      	movs	r0, #6
 8001634:	f000 fb79 	bl	8001d2a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001638:	2006      	movs	r0, #6
 800163a:	f000 fb92 	bl	8001d62 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 1, 0);
 800163e:	2200      	movs	r2, #0
 8001640:	2101      	movs	r1, #1
 8001642:	2017      	movs	r0, #23
 8001644:	f000 fb71 	bl	8001d2a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001648:	2017      	movs	r0, #23
 800164a:	f000 fb8a 	bl	8001d62 <HAL_NVIC_EnableIRQ>

}
 800164e:	bf00      	nop
 8001650:	3728      	adds	r7, #40	; 0x28
 8001652:	46bd      	mov	sp, r7
 8001654:	bd80      	pop	{r7, pc}
 8001656:	bf00      	nop
 8001658:	40023800 	.word	0x40023800
 800165c:	40020800 	.word	0x40020800
 8001660:	40020000 	.word	0x40020000
 8001664:	40020400 	.word	0x40020400

08001668 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001668:	b480      	push	{r7}
 800166a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800166c:	b672      	cpsid	i
}
 800166e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001670:	e7fe      	b.n	8001670 <Error_Handler+0x8>
	...

08001674 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001674:	b480      	push	{r7}
 8001676:	b083      	sub	sp, #12
 8001678:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800167a:	2300      	movs	r3, #0
 800167c:	607b      	str	r3, [r7, #4]
 800167e:	4b10      	ldr	r3, [pc, #64]	; (80016c0 <HAL_MspInit+0x4c>)
 8001680:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001682:	4a0f      	ldr	r2, [pc, #60]	; (80016c0 <HAL_MspInit+0x4c>)
 8001684:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001688:	6453      	str	r3, [r2, #68]	; 0x44
 800168a:	4b0d      	ldr	r3, [pc, #52]	; (80016c0 <HAL_MspInit+0x4c>)
 800168c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800168e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001692:	607b      	str	r3, [r7, #4]
 8001694:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001696:	2300      	movs	r3, #0
 8001698:	603b      	str	r3, [r7, #0]
 800169a:	4b09      	ldr	r3, [pc, #36]	; (80016c0 <HAL_MspInit+0x4c>)
 800169c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800169e:	4a08      	ldr	r2, [pc, #32]	; (80016c0 <HAL_MspInit+0x4c>)
 80016a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016a4:	6413      	str	r3, [r2, #64]	; 0x40
 80016a6:	4b06      	ldr	r3, [pc, #24]	; (80016c0 <HAL_MspInit+0x4c>)
 80016a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016ae:	603b      	str	r3, [r7, #0]
 80016b0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016b2:	bf00      	nop
 80016b4:	370c      	adds	r7, #12
 80016b6:	46bd      	mov	sp, r7
 80016b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016bc:	4770      	bx	lr
 80016be:	bf00      	nop
 80016c0:	40023800 	.word	0x40023800

080016c4 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80016c4:	b480      	push	{r7}
 80016c6:	b085      	sub	sp, #20
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	4a0b      	ldr	r2, [pc, #44]	; (8001700 <HAL_CRC_MspInit+0x3c>)
 80016d2:	4293      	cmp	r3, r2
 80016d4:	d10d      	bne.n	80016f2 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80016d6:	2300      	movs	r3, #0
 80016d8:	60fb      	str	r3, [r7, #12]
 80016da:	4b0a      	ldr	r3, [pc, #40]	; (8001704 <HAL_CRC_MspInit+0x40>)
 80016dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016de:	4a09      	ldr	r2, [pc, #36]	; (8001704 <HAL_CRC_MspInit+0x40>)
 80016e0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80016e4:	6313      	str	r3, [r2, #48]	; 0x30
 80016e6:	4b07      	ldr	r3, [pc, #28]	; (8001704 <HAL_CRC_MspInit+0x40>)
 80016e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80016ee:	60fb      	str	r3, [r7, #12]
 80016f0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 80016f2:	bf00      	nop
 80016f4:	3714      	adds	r7, #20
 80016f6:	46bd      	mov	sp, r7
 80016f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fc:	4770      	bx	lr
 80016fe:	bf00      	nop
 8001700:	40023000 	.word	0x40023000
 8001704:	40023800 	.word	0x40023800

08001708 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b08a      	sub	sp, #40	; 0x28
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001710:	f107 0314 	add.w	r3, r7, #20
 8001714:	2200      	movs	r2, #0
 8001716:	601a      	str	r2, [r3, #0]
 8001718:	605a      	str	r2, [r3, #4]
 800171a:	609a      	str	r2, [r3, #8]
 800171c:	60da      	str	r2, [r3, #12]
 800171e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	4a34      	ldr	r2, [pc, #208]	; (80017f8 <HAL_SPI_MspInit+0xf0>)
 8001726:	4293      	cmp	r3, r2
 8001728:	d161      	bne.n	80017ee <HAL_SPI_MspInit+0xe6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800172a:	2300      	movs	r3, #0
 800172c:	613b      	str	r3, [r7, #16]
 800172e:	4b33      	ldr	r3, [pc, #204]	; (80017fc <HAL_SPI_MspInit+0xf4>)
 8001730:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001732:	4a32      	ldr	r2, [pc, #200]	; (80017fc <HAL_SPI_MspInit+0xf4>)
 8001734:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001738:	6453      	str	r3, [r2, #68]	; 0x44
 800173a:	4b30      	ldr	r3, [pc, #192]	; (80017fc <HAL_SPI_MspInit+0xf4>)
 800173c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800173e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001742:	613b      	str	r3, [r7, #16]
 8001744:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001746:	2300      	movs	r3, #0
 8001748:	60fb      	str	r3, [r7, #12]
 800174a:	4b2c      	ldr	r3, [pc, #176]	; (80017fc <HAL_SPI_MspInit+0xf4>)
 800174c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800174e:	4a2b      	ldr	r2, [pc, #172]	; (80017fc <HAL_SPI_MspInit+0xf4>)
 8001750:	f043 0301 	orr.w	r3, r3, #1
 8001754:	6313      	str	r3, [r2, #48]	; 0x30
 8001756:	4b29      	ldr	r3, [pc, #164]	; (80017fc <HAL_SPI_MspInit+0xf4>)
 8001758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800175a:	f003 0301 	and.w	r3, r3, #1
 800175e:	60fb      	str	r3, [r7, #12]
 8001760:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = FLASH_SCK_Pin|FLASH_MISO_Pin|FLASH_MOSI_Pin;
 8001762:	23e0      	movs	r3, #224	; 0xe0
 8001764:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001766:	2302      	movs	r3, #2
 8001768:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800176a:	2301      	movs	r3, #1
 800176c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800176e:	2303      	movs	r3, #3
 8001770:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001772:	2305      	movs	r3, #5
 8001774:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001776:	f107 0314 	add.w	r3, r7, #20
 800177a:	4619      	mov	r1, r3
 800177c:	4820      	ldr	r0, [pc, #128]	; (8001800 <HAL_SPI_MspInit+0xf8>)
 800177e:	f000 ff17 	bl	80025b0 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream0;
 8001782:	4b20      	ldr	r3, [pc, #128]	; (8001804 <HAL_SPI_MspInit+0xfc>)
 8001784:	4a20      	ldr	r2, [pc, #128]	; (8001808 <HAL_SPI_MspInit+0x100>)
 8001786:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 8001788:	4b1e      	ldr	r3, [pc, #120]	; (8001804 <HAL_SPI_MspInit+0xfc>)
 800178a:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 800178e:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001790:	4b1c      	ldr	r3, [pc, #112]	; (8001804 <HAL_SPI_MspInit+0xfc>)
 8001792:	2200      	movs	r2, #0
 8001794:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001796:	4b1b      	ldr	r3, [pc, #108]	; (8001804 <HAL_SPI_MspInit+0xfc>)
 8001798:	2200      	movs	r2, #0
 800179a:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800179c:	4b19      	ldr	r3, [pc, #100]	; (8001804 <HAL_SPI_MspInit+0xfc>)
 800179e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80017a2:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80017a4:	4b17      	ldr	r3, [pc, #92]	; (8001804 <HAL_SPI_MspInit+0xfc>)
 80017a6:	2200      	movs	r2, #0
 80017a8:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80017aa:	4b16      	ldr	r3, [pc, #88]	; (8001804 <HAL_SPI_MspInit+0xfc>)
 80017ac:	2200      	movs	r2, #0
 80017ae:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 80017b0:	4b14      	ldr	r3, [pc, #80]	; (8001804 <HAL_SPI_MspInit+0xfc>)
 80017b2:	2200      	movs	r2, #0
 80017b4:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80017b6:	4b13      	ldr	r3, [pc, #76]	; (8001804 <HAL_SPI_MspInit+0xfc>)
 80017b8:	2200      	movs	r2, #0
 80017ba:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80017bc:	4b11      	ldr	r3, [pc, #68]	; (8001804 <HAL_SPI_MspInit+0xfc>)
 80017be:	2200      	movs	r2, #0
 80017c0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 80017c2:	4810      	ldr	r0, [pc, #64]	; (8001804 <HAL_SPI_MspInit+0xfc>)
 80017c4:	f000 fb62 	bl	8001e8c <HAL_DMA_Init>
 80017c8:	4603      	mov	r3, r0
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d001      	beq.n	80017d2 <HAL_SPI_MspInit+0xca>
    {
      Error_Handler();
 80017ce:	f7ff ff4b 	bl	8001668 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	4a0b      	ldr	r2, [pc, #44]	; (8001804 <HAL_SPI_MspInit+0xfc>)
 80017d6:	64da      	str	r2, [r3, #76]	; 0x4c
 80017d8:	4a0a      	ldr	r2, [pc, #40]	; (8001804 <HAL_SPI_MspInit+0xfc>)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 80017de:	2200      	movs	r2, #0
 80017e0:	2100      	movs	r1, #0
 80017e2:	2023      	movs	r0, #35	; 0x23
 80017e4:	f000 faa1 	bl	8001d2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80017e8:	2023      	movs	r0, #35	; 0x23
 80017ea:	f000 faba 	bl	8001d62 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80017ee:	bf00      	nop
 80017f0:	3728      	adds	r7, #40	; 0x28
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bd80      	pop	{r7, pc}
 80017f6:	bf00      	nop
 80017f8:	40013000 	.word	0x40013000
 80017fc:	40023800 	.word	0x40023800
 8001800:	40020000 	.word	0x40020000
 8001804:	200011d4 	.word	0x200011d4
 8001808:	40026410 	.word	0x40026410

0800180c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b084      	sub	sp, #16
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	4a1a      	ldr	r2, [pc, #104]	; (8001884 <HAL_TIM_Base_MspInit+0x78>)
 800181a:	4293      	cmp	r3, r2
 800181c:	d12d      	bne.n	800187a <HAL_TIM_Base_MspInit+0x6e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800181e:	2300      	movs	r3, #0
 8001820:	60fb      	str	r3, [r7, #12]
 8001822:	4b19      	ldr	r3, [pc, #100]	; (8001888 <HAL_TIM_Base_MspInit+0x7c>)
 8001824:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001826:	4a18      	ldr	r2, [pc, #96]	; (8001888 <HAL_TIM_Base_MspInit+0x7c>)
 8001828:	f043 0301 	orr.w	r3, r3, #1
 800182c:	6453      	str	r3, [r2, #68]	; 0x44
 800182e:	4b16      	ldr	r3, [pc, #88]	; (8001888 <HAL_TIM_Base_MspInit+0x7c>)
 8001830:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001832:	f003 0301 	and.w	r3, r3, #1
 8001836:	60fb      	str	r3, [r7, #12]
 8001838:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 800183a:	2200      	movs	r2, #0
 800183c:	2100      	movs	r1, #0
 800183e:	2018      	movs	r0, #24
 8001840:	f000 fa73 	bl	8001d2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8001844:	2018      	movs	r0, #24
 8001846:	f000 fa8c 	bl	8001d62 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 800184a:	2200      	movs	r2, #0
 800184c:	2100      	movs	r1, #0
 800184e:	2019      	movs	r0, #25
 8001850:	f000 fa6b 	bl	8001d2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001854:	2019      	movs	r0, #25
 8001856:	f000 fa84 	bl	8001d62 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 800185a:	2200      	movs	r2, #0
 800185c:	2100      	movs	r1, #0
 800185e:	201a      	movs	r0, #26
 8001860:	f000 fa63 	bl	8001d2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8001864:	201a      	movs	r0, #26
 8001866:	f000 fa7c 	bl	8001d62 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 800186a:	2200      	movs	r2, #0
 800186c:	2100      	movs	r1, #0
 800186e:	201b      	movs	r0, #27
 8001870:	f000 fa5b 	bl	8001d2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001874:	201b      	movs	r0, #27
 8001876:	f000 fa74 	bl	8001d62 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800187a:	bf00      	nop
 800187c:	3710      	adds	r7, #16
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}
 8001882:	bf00      	nop
 8001884:	40010000 	.word	0x40010000
 8001888:	40023800 	.word	0x40023800

0800188c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b088      	sub	sp, #32
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001894:	f107 030c 	add.w	r3, r7, #12
 8001898:	2200      	movs	r2, #0
 800189a:	601a      	str	r2, [r3, #0]
 800189c:	605a      	str	r2, [r3, #4]
 800189e:	609a      	str	r2, [r3, #8]
 80018a0:	60da      	str	r2, [r3, #12]
 80018a2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	4a12      	ldr	r2, [pc, #72]	; (80018f4 <HAL_TIM_MspPostInit+0x68>)
 80018aa:	4293      	cmp	r3, r2
 80018ac:	d11e      	bne.n	80018ec <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018ae:	2300      	movs	r3, #0
 80018b0:	60bb      	str	r3, [r7, #8]
 80018b2:	4b11      	ldr	r3, [pc, #68]	; (80018f8 <HAL_TIM_MspPostInit+0x6c>)
 80018b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018b6:	4a10      	ldr	r2, [pc, #64]	; (80018f8 <HAL_TIM_MspPostInit+0x6c>)
 80018b8:	f043 0301 	orr.w	r3, r3, #1
 80018bc:	6313      	str	r3, [r2, #48]	; 0x30
 80018be:	4b0e      	ldr	r3, [pc, #56]	; (80018f8 <HAL_TIM_MspPostInit+0x6c>)
 80018c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018c2:	f003 0301 	and.w	r3, r3, #1
 80018c6:	60bb      	str	r3, [r7, #8]
 80018c8:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = LED_STRIPE_Pin;
 80018ca:	f44f 7380 	mov.w	r3, #256	; 0x100
 80018ce:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018d0:	2302      	movs	r3, #2
 80018d2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80018d4:	2302      	movs	r3, #2
 80018d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018d8:	2303      	movs	r3, #3
 80018da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80018dc:	2301      	movs	r3, #1
 80018de:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(LED_STRIPE_GPIO_Port, &GPIO_InitStruct);
 80018e0:	f107 030c 	add.w	r3, r7, #12
 80018e4:	4619      	mov	r1, r3
 80018e6:	4805      	ldr	r0, [pc, #20]	; (80018fc <HAL_TIM_MspPostInit+0x70>)
 80018e8:	f000 fe62 	bl	80025b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80018ec:	bf00      	nop
 80018ee:	3720      	adds	r7, #32
 80018f0:	46bd      	mov	sp, r7
 80018f2:	bd80      	pop	{r7, pc}
 80018f4:	40010000 	.word	0x40010000
 80018f8:	40023800 	.word	0x40023800
 80018fc:	40020000 	.word	0x40020000

08001900 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001900:	b480      	push	{r7}
 8001902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001904:	e7fe      	b.n	8001904 <NMI_Handler+0x4>

08001906 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001906:	b480      	push	{r7}
 8001908:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800190a:	e7fe      	b.n	800190a <HardFault_Handler+0x4>

0800190c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800190c:	b480      	push	{r7}
 800190e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001910:	e7fe      	b.n	8001910 <MemManage_Handler+0x4>

08001912 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001912:	b480      	push	{r7}
 8001914:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001916:	e7fe      	b.n	8001916 <BusFault_Handler+0x4>

08001918 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001918:	b480      	push	{r7}
 800191a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800191c:	e7fe      	b.n	800191c <UsageFault_Handler+0x4>

0800191e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800191e:	b480      	push	{r7}
 8001920:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001922:	bf00      	nop
 8001924:	46bd      	mov	sp, r7
 8001926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192a:	4770      	bx	lr

0800192c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800192c:	b480      	push	{r7}
 800192e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001930:	bf00      	nop
 8001932:	46bd      	mov	sp, r7
 8001934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001938:	4770      	bx	lr

0800193a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800193a:	b480      	push	{r7}
 800193c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800193e:	bf00      	nop
 8001940:	46bd      	mov	sp, r7
 8001942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001946:	4770      	bx	lr

08001948 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800194c:	f000 f8ce 	bl	8001aec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001950:	bf00      	nop
 8001952:	bd80      	pop	{r7, pc}

08001954 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_Pin);
 8001958:	2001      	movs	r0, #1
 800195a:	f000 ffdf 	bl	800291c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800195e:	bf00      	nop
 8001960:	bd80      	pop	{r7, pc}

08001962 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001962:	b580      	push	{r7, lr}
 8001964:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USB_DET_Pin);
 8001966:	2040      	movs	r0, #64	; 0x40
 8001968:	f000 ffd8 	bl	800291c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800196c:	bf00      	nop
 800196e:	bd80      	pop	{r7, pc}

08001970 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001974:	4802      	ldr	r0, [pc, #8]	; (8001980 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 8001976:	f004 fad1 	bl	8005f1c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 800197a:	bf00      	nop
 800197c:	bd80      	pop	{r7, pc}
 800197e:	bf00      	nop
 8001980:	20001234 	.word	0x20001234

08001984 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001988:	4802      	ldr	r0, [pc, #8]	; (8001994 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800198a:	f004 fac7 	bl	8005f1c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800198e:	bf00      	nop
 8001990:	bd80      	pop	{r7, pc}
 8001992:	bf00      	nop
 8001994:	20001234 	.word	0x20001234

08001998 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800199c:	4802      	ldr	r0, [pc, #8]	; (80019a8 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 800199e:	f004 fabd 	bl	8005f1c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 80019a2:	bf00      	nop
 80019a4:	bd80      	pop	{r7, pc}
 80019a6:	bf00      	nop
 80019a8:	20001234 	.word	0x20001234

080019ac <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80019b0:	4802      	ldr	r0, [pc, #8]	; (80019bc <TIM1_CC_IRQHandler+0x10>)
 80019b2:	f004 fab3 	bl	8005f1c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80019b6:	bf00      	nop
 80019b8:	bd80      	pop	{r7, pc}
 80019ba:	bf00      	nop
 80019bc:	20001234 	.word	0x20001234

080019c0 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80019c4:	4802      	ldr	r0, [pc, #8]	; (80019d0 <SPI1_IRQHandler+0x10>)
 80019c6:	f003 fd17 	bl	80053f8 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80019ca:	bf00      	nop
 80019cc:	bd80      	pop	{r7, pc}
 80019ce:	bf00      	nop
 80019d0:	2000117c 	.word	0x2000117c

080019d4 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 80019d8:	4802      	ldr	r0, [pc, #8]	; (80019e4 <DMA2_Stream0_IRQHandler+0x10>)
 80019da:	f000 fb7f 	bl	80020dc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80019de:	bf00      	nop
 80019e0:	bd80      	pop	{r7, pc}
 80019e2:	bf00      	nop
 80019e4:	200011d4 	.word	0x200011d4

080019e8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80019ec:	4802      	ldr	r0, [pc, #8]	; (80019f8 <OTG_FS_IRQHandler+0x10>)
 80019ee:	f001 f936 	bl	8002c5e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80019f2:	bf00      	nop
 80019f4:	bd80      	pop	{r7, pc}
 80019f6:	bf00      	nop
 80019f8:	20001760 	.word	0x20001760

080019fc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80019fc:	b480      	push	{r7}
 80019fe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a00:	4b06      	ldr	r3, [pc, #24]	; (8001a1c <SystemInit+0x20>)
 8001a02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a06:	4a05      	ldr	r2, [pc, #20]	; (8001a1c <SystemInit+0x20>)
 8001a08:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a0c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a10:	bf00      	nop
 8001a12:	46bd      	mov	sp, r7
 8001a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a18:	4770      	bx	lr
 8001a1a:	bf00      	nop
 8001a1c:	e000ed00 	.word	0xe000ed00

08001a20 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001a20:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001a58 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001a24:	480d      	ldr	r0, [pc, #52]	; (8001a5c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001a26:	490e      	ldr	r1, [pc, #56]	; (8001a60 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001a28:	4a0e      	ldr	r2, [pc, #56]	; (8001a64 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001a2a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a2c:	e002      	b.n	8001a34 <LoopCopyDataInit>

08001a2e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a2e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a30:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a32:	3304      	adds	r3, #4

08001a34 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a34:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a36:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a38:	d3f9      	bcc.n	8001a2e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a3a:	4a0b      	ldr	r2, [pc, #44]	; (8001a68 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001a3c:	4c0b      	ldr	r4, [pc, #44]	; (8001a6c <LoopFillZerobss+0x26>)
  movs r3, #0
 8001a3e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a40:	e001      	b.n	8001a46 <LoopFillZerobss>

08001a42 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a42:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a44:	3204      	adds	r2, #4

08001a46 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a46:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a48:	d3fb      	bcc.n	8001a42 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001a4a:	f7ff ffd7 	bl	80019fc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001a4e:	f00a fdab 	bl	800c5a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a52:	f7ff fbda 	bl	800120a <main>
  bx  lr    
 8001a56:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001a58:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001a5c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a60:	20000128 	.word	0x20000128
  ldr r2, =_sidata
 8001a64:	0800c6a0 	.word	0x0800c6a0
  ldr r2, =_sbss
 8001a68:	20000128 	.word	0x20000128
  ldr r4, =_ebss
 8001a6c:	20002ce4 	.word	0x20002ce4

08001a70 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a70:	e7fe      	b.n	8001a70 <ADC_IRQHandler>

08001a72 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a72:	b580      	push	{r7, lr}
 8001a74:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a76:	2003      	movs	r0, #3
 8001a78:	f000 f94c 	bl	8001d14 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a7c:	200f      	movs	r0, #15
 8001a7e:	f000 f805 	bl	8001a8c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a82:	f7ff fdf7 	bl	8001674 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a86:	2300      	movs	r3, #0
}
 8001a88:	4618      	mov	r0, r3
 8001a8a:	bd80      	pop	{r7, pc}

08001a8c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b082      	sub	sp, #8
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a94:	4b12      	ldr	r3, [pc, #72]	; (8001ae0 <HAL_InitTick+0x54>)
 8001a96:	681a      	ldr	r2, [r3, #0]
 8001a98:	4b12      	ldr	r3, [pc, #72]	; (8001ae4 <HAL_InitTick+0x58>)
 8001a9a:	781b      	ldrb	r3, [r3, #0]
 8001a9c:	4619      	mov	r1, r3
 8001a9e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001aa2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001aa6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001aaa:	4618      	mov	r0, r3
 8001aac:	f000 f967 	bl	8001d7e <HAL_SYSTICK_Config>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d001      	beq.n	8001aba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	e00e      	b.n	8001ad8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	2b0f      	cmp	r3, #15
 8001abe:	d80a      	bhi.n	8001ad6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	6879      	ldr	r1, [r7, #4]
 8001ac4:	f04f 30ff 	mov.w	r0, #4294967295
 8001ac8:	f000 f92f 	bl	8001d2a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001acc:	4a06      	ldr	r2, [pc, #24]	; (8001ae8 <HAL_InitTick+0x5c>)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	e000      	b.n	8001ad8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001ad6:	2301      	movs	r3, #1
}
 8001ad8:	4618      	mov	r0, r3
 8001ada:	3708      	adds	r7, #8
 8001adc:	46bd      	mov	sp, r7
 8001ade:	bd80      	pop	{r7, pc}
 8001ae0:	20000004 	.word	0x20000004
 8001ae4:	2000000c 	.word	0x2000000c
 8001ae8:	20000008 	.word	0x20000008

08001aec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001aec:	b480      	push	{r7}
 8001aee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001af0:	4b06      	ldr	r3, [pc, #24]	; (8001b0c <HAL_IncTick+0x20>)
 8001af2:	781b      	ldrb	r3, [r3, #0]
 8001af4:	461a      	mov	r2, r3
 8001af6:	4b06      	ldr	r3, [pc, #24]	; (8001b10 <HAL_IncTick+0x24>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	4413      	add	r3, r2
 8001afc:	4a04      	ldr	r2, [pc, #16]	; (8001b10 <HAL_IncTick+0x24>)
 8001afe:	6013      	str	r3, [r2, #0]
}
 8001b00:	bf00      	nop
 8001b02:	46bd      	mov	sp, r7
 8001b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b08:	4770      	bx	lr
 8001b0a:	bf00      	nop
 8001b0c:	2000000c 	.word	0x2000000c
 8001b10:	2000127c 	.word	0x2000127c

08001b14 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b14:	b480      	push	{r7}
 8001b16:	af00      	add	r7, sp, #0
  return uwTick;
 8001b18:	4b03      	ldr	r3, [pc, #12]	; (8001b28 <HAL_GetTick+0x14>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
}
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b24:	4770      	bx	lr
 8001b26:	bf00      	nop
 8001b28:	2000127c 	.word	0x2000127c

08001b2c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b084      	sub	sp, #16
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b34:	f7ff ffee 	bl	8001b14 <HAL_GetTick>
 8001b38:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b44:	d005      	beq.n	8001b52 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b46:	4b0a      	ldr	r3, [pc, #40]	; (8001b70 <HAL_Delay+0x44>)
 8001b48:	781b      	ldrb	r3, [r3, #0]
 8001b4a:	461a      	mov	r2, r3
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	4413      	add	r3, r2
 8001b50:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001b52:	bf00      	nop
 8001b54:	f7ff ffde 	bl	8001b14 <HAL_GetTick>
 8001b58:	4602      	mov	r2, r0
 8001b5a:	68bb      	ldr	r3, [r7, #8]
 8001b5c:	1ad3      	subs	r3, r2, r3
 8001b5e:	68fa      	ldr	r2, [r7, #12]
 8001b60:	429a      	cmp	r2, r3
 8001b62:	d8f7      	bhi.n	8001b54 <HAL_Delay+0x28>
  {
  }
}
 8001b64:	bf00      	nop
 8001b66:	bf00      	nop
 8001b68:	3710      	adds	r7, #16
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}
 8001b6e:	bf00      	nop
 8001b70:	2000000c 	.word	0x2000000c

08001b74 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b74:	b480      	push	{r7}
 8001b76:	b085      	sub	sp, #20
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	f003 0307 	and.w	r3, r3, #7
 8001b82:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b84:	4b0c      	ldr	r3, [pc, #48]	; (8001bb8 <__NVIC_SetPriorityGrouping+0x44>)
 8001b86:	68db      	ldr	r3, [r3, #12]
 8001b88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b8a:	68ba      	ldr	r2, [r7, #8]
 8001b8c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b90:	4013      	ands	r3, r2
 8001b92:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b98:	68bb      	ldr	r3, [r7, #8]
 8001b9a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b9c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ba0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ba4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ba6:	4a04      	ldr	r2, [pc, #16]	; (8001bb8 <__NVIC_SetPriorityGrouping+0x44>)
 8001ba8:	68bb      	ldr	r3, [r7, #8]
 8001baa:	60d3      	str	r3, [r2, #12]
}
 8001bac:	bf00      	nop
 8001bae:	3714      	adds	r7, #20
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb6:	4770      	bx	lr
 8001bb8:	e000ed00 	.word	0xe000ed00

08001bbc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001bc0:	4b04      	ldr	r3, [pc, #16]	; (8001bd4 <__NVIC_GetPriorityGrouping+0x18>)
 8001bc2:	68db      	ldr	r3, [r3, #12]
 8001bc4:	0a1b      	lsrs	r3, r3, #8
 8001bc6:	f003 0307 	and.w	r3, r3, #7
}
 8001bca:	4618      	mov	r0, r3
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd2:	4770      	bx	lr
 8001bd4:	e000ed00 	.word	0xe000ed00

08001bd8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	b083      	sub	sp, #12
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	4603      	mov	r3, r0
 8001be0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001be2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	db0b      	blt.n	8001c02 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001bea:	79fb      	ldrb	r3, [r7, #7]
 8001bec:	f003 021f 	and.w	r2, r3, #31
 8001bf0:	4907      	ldr	r1, [pc, #28]	; (8001c10 <__NVIC_EnableIRQ+0x38>)
 8001bf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bf6:	095b      	lsrs	r3, r3, #5
 8001bf8:	2001      	movs	r0, #1
 8001bfa:	fa00 f202 	lsl.w	r2, r0, r2
 8001bfe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c02:	bf00      	nop
 8001c04:	370c      	adds	r7, #12
 8001c06:	46bd      	mov	sp, r7
 8001c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0c:	4770      	bx	lr
 8001c0e:	bf00      	nop
 8001c10:	e000e100 	.word	0xe000e100

08001c14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c14:	b480      	push	{r7}
 8001c16:	b083      	sub	sp, #12
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	6039      	str	r1, [r7, #0]
 8001c1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	db0a      	blt.n	8001c3e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	b2da      	uxtb	r2, r3
 8001c2c:	490c      	ldr	r1, [pc, #48]	; (8001c60 <__NVIC_SetPriority+0x4c>)
 8001c2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c32:	0112      	lsls	r2, r2, #4
 8001c34:	b2d2      	uxtb	r2, r2
 8001c36:	440b      	add	r3, r1
 8001c38:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c3c:	e00a      	b.n	8001c54 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	b2da      	uxtb	r2, r3
 8001c42:	4908      	ldr	r1, [pc, #32]	; (8001c64 <__NVIC_SetPriority+0x50>)
 8001c44:	79fb      	ldrb	r3, [r7, #7]
 8001c46:	f003 030f 	and.w	r3, r3, #15
 8001c4a:	3b04      	subs	r3, #4
 8001c4c:	0112      	lsls	r2, r2, #4
 8001c4e:	b2d2      	uxtb	r2, r2
 8001c50:	440b      	add	r3, r1
 8001c52:	761a      	strb	r2, [r3, #24]
}
 8001c54:	bf00      	nop
 8001c56:	370c      	adds	r7, #12
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5e:	4770      	bx	lr
 8001c60:	e000e100 	.word	0xe000e100
 8001c64:	e000ed00 	.word	0xe000ed00

08001c68 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	b089      	sub	sp, #36	; 0x24
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	60f8      	str	r0, [r7, #12]
 8001c70:	60b9      	str	r1, [r7, #8]
 8001c72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	f003 0307 	and.w	r3, r3, #7
 8001c7a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c7c:	69fb      	ldr	r3, [r7, #28]
 8001c7e:	f1c3 0307 	rsb	r3, r3, #7
 8001c82:	2b04      	cmp	r3, #4
 8001c84:	bf28      	it	cs
 8001c86:	2304      	movcs	r3, #4
 8001c88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c8a:	69fb      	ldr	r3, [r7, #28]
 8001c8c:	3304      	adds	r3, #4
 8001c8e:	2b06      	cmp	r3, #6
 8001c90:	d902      	bls.n	8001c98 <NVIC_EncodePriority+0x30>
 8001c92:	69fb      	ldr	r3, [r7, #28]
 8001c94:	3b03      	subs	r3, #3
 8001c96:	e000      	b.n	8001c9a <NVIC_EncodePriority+0x32>
 8001c98:	2300      	movs	r3, #0
 8001c9a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c9c:	f04f 32ff 	mov.w	r2, #4294967295
 8001ca0:	69bb      	ldr	r3, [r7, #24]
 8001ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca6:	43da      	mvns	r2, r3
 8001ca8:	68bb      	ldr	r3, [r7, #8]
 8001caa:	401a      	ands	r2, r3
 8001cac:	697b      	ldr	r3, [r7, #20]
 8001cae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001cb0:	f04f 31ff 	mov.w	r1, #4294967295
 8001cb4:	697b      	ldr	r3, [r7, #20]
 8001cb6:	fa01 f303 	lsl.w	r3, r1, r3
 8001cba:	43d9      	mvns	r1, r3
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cc0:	4313      	orrs	r3, r2
         );
}
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	3724      	adds	r7, #36	; 0x24
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ccc:	4770      	bx	lr
	...

08001cd0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b082      	sub	sp, #8
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	3b01      	subs	r3, #1
 8001cdc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ce0:	d301      	bcc.n	8001ce6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	e00f      	b.n	8001d06 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ce6:	4a0a      	ldr	r2, [pc, #40]	; (8001d10 <SysTick_Config+0x40>)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	3b01      	subs	r3, #1
 8001cec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001cee:	210f      	movs	r1, #15
 8001cf0:	f04f 30ff 	mov.w	r0, #4294967295
 8001cf4:	f7ff ff8e 	bl	8001c14 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001cf8:	4b05      	ldr	r3, [pc, #20]	; (8001d10 <SysTick_Config+0x40>)
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001cfe:	4b04      	ldr	r3, [pc, #16]	; (8001d10 <SysTick_Config+0x40>)
 8001d00:	2207      	movs	r2, #7
 8001d02:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d04:	2300      	movs	r3, #0
}
 8001d06:	4618      	mov	r0, r3
 8001d08:	3708      	adds	r7, #8
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bd80      	pop	{r7, pc}
 8001d0e:	bf00      	nop
 8001d10:	e000e010 	.word	0xe000e010

08001d14 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b082      	sub	sp, #8
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d1c:	6878      	ldr	r0, [r7, #4]
 8001d1e:	f7ff ff29 	bl	8001b74 <__NVIC_SetPriorityGrouping>
}
 8001d22:	bf00      	nop
 8001d24:	3708      	adds	r7, #8
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bd80      	pop	{r7, pc}

08001d2a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d2a:	b580      	push	{r7, lr}
 8001d2c:	b086      	sub	sp, #24
 8001d2e:	af00      	add	r7, sp, #0
 8001d30:	4603      	mov	r3, r0
 8001d32:	60b9      	str	r1, [r7, #8]
 8001d34:	607a      	str	r2, [r7, #4]
 8001d36:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d3c:	f7ff ff3e 	bl	8001bbc <__NVIC_GetPriorityGrouping>
 8001d40:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d42:	687a      	ldr	r2, [r7, #4]
 8001d44:	68b9      	ldr	r1, [r7, #8]
 8001d46:	6978      	ldr	r0, [r7, #20]
 8001d48:	f7ff ff8e 	bl	8001c68 <NVIC_EncodePriority>
 8001d4c:	4602      	mov	r2, r0
 8001d4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d52:	4611      	mov	r1, r2
 8001d54:	4618      	mov	r0, r3
 8001d56:	f7ff ff5d 	bl	8001c14 <__NVIC_SetPriority>
}
 8001d5a:	bf00      	nop
 8001d5c:	3718      	adds	r7, #24
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bd80      	pop	{r7, pc}

08001d62 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d62:	b580      	push	{r7, lr}
 8001d64:	b082      	sub	sp, #8
 8001d66:	af00      	add	r7, sp, #0
 8001d68:	4603      	mov	r3, r0
 8001d6a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d70:	4618      	mov	r0, r3
 8001d72:	f7ff ff31 	bl	8001bd8 <__NVIC_EnableIRQ>
}
 8001d76:	bf00      	nop
 8001d78:	3708      	adds	r7, #8
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}

08001d7e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d7e:	b580      	push	{r7, lr}
 8001d80:	b082      	sub	sp, #8
 8001d82:	af00      	add	r7, sp, #0
 8001d84:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d86:	6878      	ldr	r0, [r7, #4]
 8001d88:	f7ff ffa2 	bl	8001cd0 <SysTick_Config>
 8001d8c:	4603      	mov	r3, r0
}
 8001d8e:	4618      	mov	r0, r3
 8001d90:	3708      	adds	r7, #8
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bd80      	pop	{r7, pc}

08001d96 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001d96:	b580      	push	{r7, lr}
 8001d98:	b082      	sub	sp, #8
 8001d9a:	af00      	add	r7, sp, #0
 8001d9c:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d101      	bne.n	8001da8 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8001da4:	2301      	movs	r3, #1
 8001da6:	e00e      	b.n	8001dc6 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	795b      	ldrb	r3, [r3, #5]
 8001dac:	b2db      	uxtb	r3, r3
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d105      	bne.n	8001dbe <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	2200      	movs	r2, #0
 8001db6:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001db8:	6878      	ldr	r0, [r7, #4]
 8001dba:	f7ff fc83 	bl	80016c4 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	2201      	movs	r2, #1
 8001dc2:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001dc4:	2300      	movs	r3, #0
}
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	3708      	adds	r7, #8
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}

08001dce <HAL_CRC_Accumulate>:
  * @param  pBuffer pointer to the input data buffer.
  * @param  BufferLength input data buffer length (number of uint32_t words).
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Accumulate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 8001dce:	b480      	push	{r7}
 8001dd0:	b087      	sub	sp, #28
 8001dd2:	af00      	add	r7, sp, #0
 8001dd4:	60f8      	str	r0, [r7, #12]
 8001dd6:	60b9      	str	r1, [r7, #8]
 8001dd8:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 8001dda:	2300      	movs	r3, #0
 8001ddc:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	2202      	movs	r2, #2
 8001de2:	715a      	strb	r2, [r3, #5]

  /* Enter Data to the CRC calculator */
  for (index = 0U; index < BufferLength; index++)
 8001de4:	2300      	movs	r3, #0
 8001de6:	617b      	str	r3, [r7, #20]
 8001de8:	e00a      	b.n	8001e00 <HAL_CRC_Accumulate+0x32>
  {
    hcrc->Instance->DR = pBuffer[index];
 8001dea:	697b      	ldr	r3, [r7, #20]
 8001dec:	009b      	lsls	r3, r3, #2
 8001dee:	68ba      	ldr	r2, [r7, #8]
 8001df0:	441a      	add	r2, r3
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	6812      	ldr	r2, [r2, #0]
 8001df8:	601a      	str	r2, [r3, #0]
  for (index = 0U; index < BufferLength; index++)
 8001dfa:	697b      	ldr	r3, [r7, #20]
 8001dfc:	3301      	adds	r3, #1
 8001dfe:	617b      	str	r3, [r7, #20]
 8001e00:	697a      	ldr	r2, [r7, #20]
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	429a      	cmp	r2, r3
 8001e06:	d3f0      	bcc.n	8001dea <HAL_CRC_Accumulate+0x1c>
  }
  temp = hcrc->Instance->DR;
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	2201      	movs	r2, #1
 8001e14:	715a      	strb	r2, [r3, #5]

  /* Return the CRC computed value */
  return temp;
 8001e16:	693b      	ldr	r3, [r7, #16]
}
 8001e18:	4618      	mov	r0, r3
 8001e1a:	371c      	adds	r7, #28
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e22:	4770      	bx	lr

08001e24 <HAL_CRC_Calculate>:
  * @param  pBuffer pointer to the input data buffer.
  * @param  BufferLength input data buffer length (number of uint32_t words).
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 8001e24:	b480      	push	{r7}
 8001e26:	b087      	sub	sp, #28
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	60f8      	str	r0, [r7, #12]
 8001e2c:	60b9      	str	r1, [r7, #8]
 8001e2e:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 8001e30:	2300      	movs	r3, #0
 8001e32:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	2202      	movs	r2, #2
 8001e38:	715a      	strb	r2, [r3, #5]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	689a      	ldr	r2, [r3, #8]
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f042 0201 	orr.w	r2, r2, #1
 8001e48:	609a      	str	r2, [r3, #8]

  /* Enter 32-bit input data to the CRC calculator */
  for (index = 0U; index < BufferLength; index++)
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	617b      	str	r3, [r7, #20]
 8001e4e:	e00a      	b.n	8001e66 <HAL_CRC_Calculate+0x42>
  {
    hcrc->Instance->DR = pBuffer[index];
 8001e50:	697b      	ldr	r3, [r7, #20]
 8001e52:	009b      	lsls	r3, r3, #2
 8001e54:	68ba      	ldr	r2, [r7, #8]
 8001e56:	441a      	add	r2, r3
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	6812      	ldr	r2, [r2, #0]
 8001e5e:	601a      	str	r2, [r3, #0]
  for (index = 0U; index < BufferLength; index++)
 8001e60:	697b      	ldr	r3, [r7, #20]
 8001e62:	3301      	adds	r3, #1
 8001e64:	617b      	str	r3, [r7, #20]
 8001e66:	697a      	ldr	r2, [r7, #20]
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	429a      	cmp	r2, r3
 8001e6c:	d3f0      	bcc.n	8001e50 <HAL_CRC_Calculate+0x2c>
  }
  temp = hcrc->Instance->DR;
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	2201      	movs	r2, #1
 8001e7a:	715a      	strb	r2, [r3, #5]

  /* Return the CRC computed value */
  return temp;
 8001e7c:	693b      	ldr	r3, [r7, #16]
}
 8001e7e:	4618      	mov	r0, r3
 8001e80:	371c      	adds	r7, #28
 8001e82:	46bd      	mov	sp, r7
 8001e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e88:	4770      	bx	lr
	...

08001e8c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b086      	sub	sp, #24
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001e94:	2300      	movs	r3, #0
 8001e96:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001e98:	f7ff fe3c 	bl	8001b14 <HAL_GetTick>
 8001e9c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d101      	bne.n	8001ea8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001ea4:	2301      	movs	r3, #1
 8001ea6:	e099      	b.n	8001fdc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	2202      	movs	r2, #2
 8001eac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	681a      	ldr	r2, [r3, #0]
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f022 0201 	bic.w	r2, r2, #1
 8001ec6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ec8:	e00f      	b.n	8001eea <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001eca:	f7ff fe23 	bl	8001b14 <HAL_GetTick>
 8001ece:	4602      	mov	r2, r0
 8001ed0:	693b      	ldr	r3, [r7, #16]
 8001ed2:	1ad3      	subs	r3, r2, r3
 8001ed4:	2b05      	cmp	r3, #5
 8001ed6:	d908      	bls.n	8001eea <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	2220      	movs	r2, #32
 8001edc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	2203      	movs	r2, #3
 8001ee2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001ee6:	2303      	movs	r3, #3
 8001ee8:	e078      	b.n	8001fdc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f003 0301 	and.w	r3, r3, #1
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d1e8      	bne.n	8001eca <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001f00:	697a      	ldr	r2, [r7, #20]
 8001f02:	4b38      	ldr	r3, [pc, #224]	; (8001fe4 <HAL_DMA_Init+0x158>)
 8001f04:	4013      	ands	r3, r2
 8001f06:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	685a      	ldr	r2, [r3, #4]
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	689b      	ldr	r3, [r3, #8]
 8001f10:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001f16:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	691b      	ldr	r3, [r3, #16]
 8001f1c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f22:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	699b      	ldr	r3, [r3, #24]
 8001f28:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f2e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6a1b      	ldr	r3, [r3, #32]
 8001f34:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001f36:	697a      	ldr	r2, [r7, #20]
 8001f38:	4313      	orrs	r3, r2
 8001f3a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f40:	2b04      	cmp	r3, #4
 8001f42:	d107      	bne.n	8001f54 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f4c:	4313      	orrs	r3, r2
 8001f4e:	697a      	ldr	r2, [r7, #20]
 8001f50:	4313      	orrs	r3, r2
 8001f52:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	697a      	ldr	r2, [r7, #20]
 8001f5a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	695b      	ldr	r3, [r3, #20]
 8001f62:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001f64:	697b      	ldr	r3, [r7, #20]
 8001f66:	f023 0307 	bic.w	r3, r3, #7
 8001f6a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f70:	697a      	ldr	r2, [r7, #20]
 8001f72:	4313      	orrs	r3, r2
 8001f74:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f7a:	2b04      	cmp	r3, #4
 8001f7c:	d117      	bne.n	8001fae <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f82:	697a      	ldr	r2, [r7, #20]
 8001f84:	4313      	orrs	r3, r2
 8001f86:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d00e      	beq.n	8001fae <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001f90:	6878      	ldr	r0, [r7, #4]
 8001f92:	f000 fa91 	bl	80024b8 <DMA_CheckFifoParam>
 8001f96:	4603      	mov	r3, r0
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d008      	beq.n	8001fae <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	2240      	movs	r2, #64	; 0x40
 8001fa0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	2201      	movs	r2, #1
 8001fa6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001faa:	2301      	movs	r3, #1
 8001fac:	e016      	b.n	8001fdc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	697a      	ldr	r2, [r7, #20]
 8001fb4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001fb6:	6878      	ldr	r0, [r7, #4]
 8001fb8:	f000 fa48 	bl	800244c <DMA_CalcBaseAndBitshift>
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fc4:	223f      	movs	r2, #63	; 0x3f
 8001fc6:	409a      	lsls	r2, r3
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2200      	movs	r2, #0
 8001fd0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	2201      	movs	r2, #1
 8001fd6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001fda:	2300      	movs	r3, #0
}
 8001fdc:	4618      	mov	r0, r3
 8001fde:	3718      	adds	r7, #24
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	bd80      	pop	{r7, pc}
 8001fe4:	f010803f 	.word	0xf010803f

08001fe8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b086      	sub	sp, #24
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	60f8      	str	r0, [r7, #12]
 8001ff0:	60b9      	str	r1, [r7, #8]
 8001ff2:	607a      	str	r2, [r7, #4]
 8001ff4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ffe:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002006:	2b01      	cmp	r3, #1
 8002008:	d101      	bne.n	800200e <HAL_DMA_Start_IT+0x26>
 800200a:	2302      	movs	r3, #2
 800200c:	e040      	b.n	8002090 <HAL_DMA_Start_IT+0xa8>
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	2201      	movs	r2, #1
 8002012:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800201c:	b2db      	uxtb	r3, r3
 800201e:	2b01      	cmp	r3, #1
 8002020:	d12f      	bne.n	8002082 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	2202      	movs	r2, #2
 8002026:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	2200      	movs	r2, #0
 800202e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	687a      	ldr	r2, [r7, #4]
 8002034:	68b9      	ldr	r1, [r7, #8]
 8002036:	68f8      	ldr	r0, [r7, #12]
 8002038:	f000 f9da 	bl	80023f0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002040:	223f      	movs	r2, #63	; 0x3f
 8002042:	409a      	lsls	r2, r3
 8002044:	693b      	ldr	r3, [r7, #16]
 8002046:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	681a      	ldr	r2, [r3, #0]
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f042 0216 	orr.w	r2, r2, #22
 8002056:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800205c:	2b00      	cmp	r3, #0
 800205e:	d007      	beq.n	8002070 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	681a      	ldr	r2, [r3, #0]
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f042 0208 	orr.w	r2, r2, #8
 800206e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	681a      	ldr	r2, [r3, #0]
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f042 0201 	orr.w	r2, r2, #1
 800207e:	601a      	str	r2, [r3, #0]
 8002080:	e005      	b.n	800208e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	2200      	movs	r2, #0
 8002086:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800208a:	2302      	movs	r3, #2
 800208c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800208e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002090:	4618      	mov	r0, r3
 8002092:	3718      	adds	r7, #24
 8002094:	46bd      	mov	sp, r7
 8002096:	bd80      	pop	{r7, pc}

08002098 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002098:	b480      	push	{r7}
 800209a:	b083      	sub	sp, #12
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80020a6:	b2db      	uxtb	r3, r3
 80020a8:	2b02      	cmp	r3, #2
 80020aa:	d004      	beq.n	80020b6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	2280      	movs	r2, #128	; 0x80
 80020b0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80020b2:	2301      	movs	r3, #1
 80020b4:	e00c      	b.n	80020d0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	2205      	movs	r2, #5
 80020ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	681a      	ldr	r2, [r3, #0]
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f022 0201 	bic.w	r2, r2, #1
 80020cc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80020ce:	2300      	movs	r3, #0
}
 80020d0:	4618      	mov	r0, r3
 80020d2:	370c      	adds	r7, #12
 80020d4:	46bd      	mov	sp, r7
 80020d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020da:	4770      	bx	lr

080020dc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b086      	sub	sp, #24
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80020e4:	2300      	movs	r3, #0
 80020e6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80020e8:	4b8e      	ldr	r3, [pc, #568]	; (8002324 <HAL_DMA_IRQHandler+0x248>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	4a8e      	ldr	r2, [pc, #568]	; (8002328 <HAL_DMA_IRQHandler+0x24c>)
 80020ee:	fba2 2303 	umull	r2, r3, r2, r3
 80020f2:	0a9b      	lsrs	r3, r3, #10
 80020f4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020fa:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80020fc:	693b      	ldr	r3, [r7, #16]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002106:	2208      	movs	r2, #8
 8002108:	409a      	lsls	r2, r3
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	4013      	ands	r3, r2
 800210e:	2b00      	cmp	r3, #0
 8002110:	d01a      	beq.n	8002148 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f003 0304 	and.w	r3, r3, #4
 800211c:	2b00      	cmp	r3, #0
 800211e:	d013      	beq.n	8002148 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	681a      	ldr	r2, [r3, #0]
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f022 0204 	bic.w	r2, r2, #4
 800212e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002134:	2208      	movs	r2, #8
 8002136:	409a      	lsls	r2, r3
 8002138:	693b      	ldr	r3, [r7, #16]
 800213a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002140:	f043 0201 	orr.w	r2, r3, #1
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800214c:	2201      	movs	r2, #1
 800214e:	409a      	lsls	r2, r3
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	4013      	ands	r3, r2
 8002154:	2b00      	cmp	r3, #0
 8002156:	d012      	beq.n	800217e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	695b      	ldr	r3, [r3, #20]
 800215e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002162:	2b00      	cmp	r3, #0
 8002164:	d00b      	beq.n	800217e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800216a:	2201      	movs	r2, #1
 800216c:	409a      	lsls	r2, r3
 800216e:	693b      	ldr	r3, [r7, #16]
 8002170:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002176:	f043 0202 	orr.w	r2, r3, #2
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002182:	2204      	movs	r2, #4
 8002184:	409a      	lsls	r2, r3
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	4013      	ands	r3, r2
 800218a:	2b00      	cmp	r3, #0
 800218c:	d012      	beq.n	80021b4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f003 0302 	and.w	r3, r3, #2
 8002198:	2b00      	cmp	r3, #0
 800219a:	d00b      	beq.n	80021b4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021a0:	2204      	movs	r2, #4
 80021a2:	409a      	lsls	r2, r3
 80021a4:	693b      	ldr	r3, [r7, #16]
 80021a6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021ac:	f043 0204 	orr.w	r2, r3, #4
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021b8:	2210      	movs	r2, #16
 80021ba:	409a      	lsls	r2, r3
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	4013      	ands	r3, r2
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d043      	beq.n	800224c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f003 0308 	and.w	r3, r3, #8
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d03c      	beq.n	800224c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021d6:	2210      	movs	r2, #16
 80021d8:	409a      	lsls	r2, r3
 80021da:	693b      	ldr	r3, [r7, #16]
 80021dc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d018      	beq.n	800221e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d108      	bne.n	800220c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d024      	beq.n	800224c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002206:	6878      	ldr	r0, [r7, #4]
 8002208:	4798      	blx	r3
 800220a:	e01f      	b.n	800224c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002210:	2b00      	cmp	r3, #0
 8002212:	d01b      	beq.n	800224c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002218:	6878      	ldr	r0, [r7, #4]
 800221a:	4798      	blx	r3
 800221c:	e016      	b.n	800224c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002228:	2b00      	cmp	r3, #0
 800222a:	d107      	bne.n	800223c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	681a      	ldr	r2, [r3, #0]
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f022 0208 	bic.w	r2, r2, #8
 800223a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002240:	2b00      	cmp	r3, #0
 8002242:	d003      	beq.n	800224c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002248:	6878      	ldr	r0, [r7, #4]
 800224a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002250:	2220      	movs	r2, #32
 8002252:	409a      	lsls	r2, r3
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	4013      	ands	r3, r2
 8002258:	2b00      	cmp	r3, #0
 800225a:	f000 808f 	beq.w	800237c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f003 0310 	and.w	r3, r3, #16
 8002268:	2b00      	cmp	r3, #0
 800226a:	f000 8087 	beq.w	800237c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002272:	2220      	movs	r2, #32
 8002274:	409a      	lsls	r2, r3
 8002276:	693b      	ldr	r3, [r7, #16]
 8002278:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002280:	b2db      	uxtb	r3, r3
 8002282:	2b05      	cmp	r3, #5
 8002284:	d136      	bne.n	80022f4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	681a      	ldr	r2, [r3, #0]
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f022 0216 	bic.w	r2, r2, #22
 8002294:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	695a      	ldr	r2, [r3, #20]
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80022a4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d103      	bne.n	80022b6 <HAL_DMA_IRQHandler+0x1da>
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d007      	beq.n	80022c6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	681a      	ldr	r2, [r3, #0]
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f022 0208 	bic.w	r2, r2, #8
 80022c4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022ca:	223f      	movs	r2, #63	; 0x3f
 80022cc:	409a      	lsls	r2, r3
 80022ce:	693b      	ldr	r3, [r7, #16]
 80022d0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	2201      	movs	r2, #1
 80022d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	2200      	movs	r2, #0
 80022de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d07e      	beq.n	80023e8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80022ee:	6878      	ldr	r0, [r7, #4]
 80022f0:	4798      	blx	r3
        }
        return;
 80022f2:	e079      	b.n	80023e8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d01d      	beq.n	800233e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800230c:	2b00      	cmp	r3, #0
 800230e:	d10d      	bne.n	800232c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002314:	2b00      	cmp	r3, #0
 8002316:	d031      	beq.n	800237c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800231c:	6878      	ldr	r0, [r7, #4]
 800231e:	4798      	blx	r3
 8002320:	e02c      	b.n	800237c <HAL_DMA_IRQHandler+0x2a0>
 8002322:	bf00      	nop
 8002324:	20000004 	.word	0x20000004
 8002328:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002330:	2b00      	cmp	r3, #0
 8002332:	d023      	beq.n	800237c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002338:	6878      	ldr	r0, [r7, #4]
 800233a:	4798      	blx	r3
 800233c:	e01e      	b.n	800237c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002348:	2b00      	cmp	r3, #0
 800234a:	d10f      	bne.n	800236c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	681a      	ldr	r2, [r3, #0]
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f022 0210 	bic.w	r2, r2, #16
 800235a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2201      	movs	r2, #1
 8002360:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2200      	movs	r2, #0
 8002368:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002370:	2b00      	cmp	r3, #0
 8002372:	d003      	beq.n	800237c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002378:	6878      	ldr	r0, [r7, #4]
 800237a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002380:	2b00      	cmp	r3, #0
 8002382:	d032      	beq.n	80023ea <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002388:	f003 0301 	and.w	r3, r3, #1
 800238c:	2b00      	cmp	r3, #0
 800238e:	d022      	beq.n	80023d6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2205      	movs	r2, #5
 8002394:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	681a      	ldr	r2, [r3, #0]
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f022 0201 	bic.w	r2, r2, #1
 80023a6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80023a8:	68bb      	ldr	r3, [r7, #8]
 80023aa:	3301      	adds	r3, #1
 80023ac:	60bb      	str	r3, [r7, #8]
 80023ae:	697a      	ldr	r2, [r7, #20]
 80023b0:	429a      	cmp	r2, r3
 80023b2:	d307      	bcc.n	80023c4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f003 0301 	and.w	r3, r3, #1
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d1f2      	bne.n	80023a8 <HAL_DMA_IRQHandler+0x2cc>
 80023c2:	e000      	b.n	80023c6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80023c4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	2201      	movs	r2, #1
 80023ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	2200      	movs	r2, #0
 80023d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d005      	beq.n	80023ea <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023e2:	6878      	ldr	r0, [r7, #4]
 80023e4:	4798      	blx	r3
 80023e6:	e000      	b.n	80023ea <HAL_DMA_IRQHandler+0x30e>
        return;
 80023e8:	bf00      	nop
    }
  }
}
 80023ea:	3718      	adds	r7, #24
 80023ec:	46bd      	mov	sp, r7
 80023ee:	bd80      	pop	{r7, pc}

080023f0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80023f0:	b480      	push	{r7}
 80023f2:	b085      	sub	sp, #20
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	60f8      	str	r0, [r7, #12]
 80023f8:	60b9      	str	r1, [r7, #8]
 80023fa:	607a      	str	r2, [r7, #4]
 80023fc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	681a      	ldr	r2, [r3, #0]
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800240c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	683a      	ldr	r2, [r7, #0]
 8002414:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	689b      	ldr	r3, [r3, #8]
 800241a:	2b40      	cmp	r3, #64	; 0x40
 800241c:	d108      	bne.n	8002430 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	687a      	ldr	r2, [r7, #4]
 8002424:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	68ba      	ldr	r2, [r7, #8]
 800242c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800242e:	e007      	b.n	8002440 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	68ba      	ldr	r2, [r7, #8]
 8002436:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	687a      	ldr	r2, [r7, #4]
 800243e:	60da      	str	r2, [r3, #12]
}
 8002440:	bf00      	nop
 8002442:	3714      	adds	r7, #20
 8002444:	46bd      	mov	sp, r7
 8002446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244a:	4770      	bx	lr

0800244c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800244c:	b480      	push	{r7}
 800244e:	b085      	sub	sp, #20
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	b2db      	uxtb	r3, r3
 800245a:	3b10      	subs	r3, #16
 800245c:	4a14      	ldr	r2, [pc, #80]	; (80024b0 <DMA_CalcBaseAndBitshift+0x64>)
 800245e:	fba2 2303 	umull	r2, r3, r2, r3
 8002462:	091b      	lsrs	r3, r3, #4
 8002464:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002466:	4a13      	ldr	r2, [pc, #76]	; (80024b4 <DMA_CalcBaseAndBitshift+0x68>)
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	4413      	add	r3, r2
 800246c:	781b      	ldrb	r3, [r3, #0]
 800246e:	461a      	mov	r2, r3
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	2b03      	cmp	r3, #3
 8002478:	d909      	bls.n	800248e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002482:	f023 0303 	bic.w	r3, r3, #3
 8002486:	1d1a      	adds	r2, r3, #4
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	659a      	str	r2, [r3, #88]	; 0x58
 800248c:	e007      	b.n	800249e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002496:	f023 0303 	bic.w	r3, r3, #3
 800249a:	687a      	ldr	r2, [r7, #4]
 800249c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80024a2:	4618      	mov	r0, r3
 80024a4:	3714      	adds	r7, #20
 80024a6:	46bd      	mov	sp, r7
 80024a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ac:	4770      	bx	lr
 80024ae:	bf00      	nop
 80024b0:	aaaaaaab 	.word	0xaaaaaaab
 80024b4:	0800c664 	.word	0x0800c664

080024b8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80024b8:	b480      	push	{r7}
 80024ba:	b085      	sub	sp, #20
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80024c0:	2300      	movs	r3, #0
 80024c2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024c8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	699b      	ldr	r3, [r3, #24]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d11f      	bne.n	8002512 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80024d2:	68bb      	ldr	r3, [r7, #8]
 80024d4:	2b03      	cmp	r3, #3
 80024d6:	d856      	bhi.n	8002586 <DMA_CheckFifoParam+0xce>
 80024d8:	a201      	add	r2, pc, #4	; (adr r2, 80024e0 <DMA_CheckFifoParam+0x28>)
 80024da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024de:	bf00      	nop
 80024e0:	080024f1 	.word	0x080024f1
 80024e4:	08002503 	.word	0x08002503
 80024e8:	080024f1 	.word	0x080024f1
 80024ec:	08002587 	.word	0x08002587
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024f4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d046      	beq.n	800258a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80024fc:	2301      	movs	r3, #1
 80024fe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002500:	e043      	b.n	800258a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002506:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800250a:	d140      	bne.n	800258e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800250c:	2301      	movs	r3, #1
 800250e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002510:	e03d      	b.n	800258e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	699b      	ldr	r3, [r3, #24]
 8002516:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800251a:	d121      	bne.n	8002560 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800251c:	68bb      	ldr	r3, [r7, #8]
 800251e:	2b03      	cmp	r3, #3
 8002520:	d837      	bhi.n	8002592 <DMA_CheckFifoParam+0xda>
 8002522:	a201      	add	r2, pc, #4	; (adr r2, 8002528 <DMA_CheckFifoParam+0x70>)
 8002524:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002528:	08002539 	.word	0x08002539
 800252c:	0800253f 	.word	0x0800253f
 8002530:	08002539 	.word	0x08002539
 8002534:	08002551 	.word	0x08002551
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002538:	2301      	movs	r3, #1
 800253a:	73fb      	strb	r3, [r7, #15]
      break;
 800253c:	e030      	b.n	80025a0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002542:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002546:	2b00      	cmp	r3, #0
 8002548:	d025      	beq.n	8002596 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800254a:	2301      	movs	r3, #1
 800254c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800254e:	e022      	b.n	8002596 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002554:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002558:	d11f      	bne.n	800259a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800255a:	2301      	movs	r3, #1
 800255c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800255e:	e01c      	b.n	800259a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002560:	68bb      	ldr	r3, [r7, #8]
 8002562:	2b02      	cmp	r3, #2
 8002564:	d903      	bls.n	800256e <DMA_CheckFifoParam+0xb6>
 8002566:	68bb      	ldr	r3, [r7, #8]
 8002568:	2b03      	cmp	r3, #3
 800256a:	d003      	beq.n	8002574 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800256c:	e018      	b.n	80025a0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800256e:	2301      	movs	r3, #1
 8002570:	73fb      	strb	r3, [r7, #15]
      break;
 8002572:	e015      	b.n	80025a0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002578:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800257c:	2b00      	cmp	r3, #0
 800257e:	d00e      	beq.n	800259e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002580:	2301      	movs	r3, #1
 8002582:	73fb      	strb	r3, [r7, #15]
      break;
 8002584:	e00b      	b.n	800259e <DMA_CheckFifoParam+0xe6>
      break;
 8002586:	bf00      	nop
 8002588:	e00a      	b.n	80025a0 <DMA_CheckFifoParam+0xe8>
      break;
 800258a:	bf00      	nop
 800258c:	e008      	b.n	80025a0 <DMA_CheckFifoParam+0xe8>
      break;
 800258e:	bf00      	nop
 8002590:	e006      	b.n	80025a0 <DMA_CheckFifoParam+0xe8>
      break;
 8002592:	bf00      	nop
 8002594:	e004      	b.n	80025a0 <DMA_CheckFifoParam+0xe8>
      break;
 8002596:	bf00      	nop
 8002598:	e002      	b.n	80025a0 <DMA_CheckFifoParam+0xe8>
      break;   
 800259a:	bf00      	nop
 800259c:	e000      	b.n	80025a0 <DMA_CheckFifoParam+0xe8>
      break;
 800259e:	bf00      	nop
    }
  } 
  
  return status; 
 80025a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80025a2:	4618      	mov	r0, r3
 80025a4:	3714      	adds	r7, #20
 80025a6:	46bd      	mov	sp, r7
 80025a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ac:	4770      	bx	lr
 80025ae:	bf00      	nop

080025b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80025b0:	b480      	push	{r7}
 80025b2:	b089      	sub	sp, #36	; 0x24
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
 80025b8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80025ba:	2300      	movs	r3, #0
 80025bc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80025be:	2300      	movs	r3, #0
 80025c0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80025c2:	2300      	movs	r3, #0
 80025c4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80025c6:	2300      	movs	r3, #0
 80025c8:	61fb      	str	r3, [r7, #28]
 80025ca:	e159      	b.n	8002880 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80025cc:	2201      	movs	r2, #1
 80025ce:	69fb      	ldr	r3, [r7, #28]
 80025d0:	fa02 f303 	lsl.w	r3, r2, r3
 80025d4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	697a      	ldr	r2, [r7, #20]
 80025dc:	4013      	ands	r3, r2
 80025de:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80025e0:	693a      	ldr	r2, [r7, #16]
 80025e2:	697b      	ldr	r3, [r7, #20]
 80025e4:	429a      	cmp	r2, r3
 80025e6:	f040 8148 	bne.w	800287a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	685b      	ldr	r3, [r3, #4]
 80025ee:	f003 0303 	and.w	r3, r3, #3
 80025f2:	2b01      	cmp	r3, #1
 80025f4:	d005      	beq.n	8002602 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	685b      	ldr	r3, [r3, #4]
 80025fa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80025fe:	2b02      	cmp	r3, #2
 8002600:	d130      	bne.n	8002664 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	689b      	ldr	r3, [r3, #8]
 8002606:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002608:	69fb      	ldr	r3, [r7, #28]
 800260a:	005b      	lsls	r3, r3, #1
 800260c:	2203      	movs	r2, #3
 800260e:	fa02 f303 	lsl.w	r3, r2, r3
 8002612:	43db      	mvns	r3, r3
 8002614:	69ba      	ldr	r2, [r7, #24]
 8002616:	4013      	ands	r3, r2
 8002618:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	68da      	ldr	r2, [r3, #12]
 800261e:	69fb      	ldr	r3, [r7, #28]
 8002620:	005b      	lsls	r3, r3, #1
 8002622:	fa02 f303 	lsl.w	r3, r2, r3
 8002626:	69ba      	ldr	r2, [r7, #24]
 8002628:	4313      	orrs	r3, r2
 800262a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	69ba      	ldr	r2, [r7, #24]
 8002630:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	685b      	ldr	r3, [r3, #4]
 8002636:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002638:	2201      	movs	r2, #1
 800263a:	69fb      	ldr	r3, [r7, #28]
 800263c:	fa02 f303 	lsl.w	r3, r2, r3
 8002640:	43db      	mvns	r3, r3
 8002642:	69ba      	ldr	r2, [r7, #24]
 8002644:	4013      	ands	r3, r2
 8002646:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	685b      	ldr	r3, [r3, #4]
 800264c:	091b      	lsrs	r3, r3, #4
 800264e:	f003 0201 	and.w	r2, r3, #1
 8002652:	69fb      	ldr	r3, [r7, #28]
 8002654:	fa02 f303 	lsl.w	r3, r2, r3
 8002658:	69ba      	ldr	r2, [r7, #24]
 800265a:	4313      	orrs	r3, r2
 800265c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	69ba      	ldr	r2, [r7, #24]
 8002662:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	685b      	ldr	r3, [r3, #4]
 8002668:	f003 0303 	and.w	r3, r3, #3
 800266c:	2b03      	cmp	r3, #3
 800266e:	d017      	beq.n	80026a0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	68db      	ldr	r3, [r3, #12]
 8002674:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002676:	69fb      	ldr	r3, [r7, #28]
 8002678:	005b      	lsls	r3, r3, #1
 800267a:	2203      	movs	r2, #3
 800267c:	fa02 f303 	lsl.w	r3, r2, r3
 8002680:	43db      	mvns	r3, r3
 8002682:	69ba      	ldr	r2, [r7, #24]
 8002684:	4013      	ands	r3, r2
 8002686:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	689a      	ldr	r2, [r3, #8]
 800268c:	69fb      	ldr	r3, [r7, #28]
 800268e:	005b      	lsls	r3, r3, #1
 8002690:	fa02 f303 	lsl.w	r3, r2, r3
 8002694:	69ba      	ldr	r2, [r7, #24]
 8002696:	4313      	orrs	r3, r2
 8002698:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	69ba      	ldr	r2, [r7, #24]
 800269e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	685b      	ldr	r3, [r3, #4]
 80026a4:	f003 0303 	and.w	r3, r3, #3
 80026a8:	2b02      	cmp	r3, #2
 80026aa:	d123      	bne.n	80026f4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80026ac:	69fb      	ldr	r3, [r7, #28]
 80026ae:	08da      	lsrs	r2, r3, #3
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	3208      	adds	r2, #8
 80026b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80026b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80026ba:	69fb      	ldr	r3, [r7, #28]
 80026bc:	f003 0307 	and.w	r3, r3, #7
 80026c0:	009b      	lsls	r3, r3, #2
 80026c2:	220f      	movs	r2, #15
 80026c4:	fa02 f303 	lsl.w	r3, r2, r3
 80026c8:	43db      	mvns	r3, r3
 80026ca:	69ba      	ldr	r2, [r7, #24]
 80026cc:	4013      	ands	r3, r2
 80026ce:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	691a      	ldr	r2, [r3, #16]
 80026d4:	69fb      	ldr	r3, [r7, #28]
 80026d6:	f003 0307 	and.w	r3, r3, #7
 80026da:	009b      	lsls	r3, r3, #2
 80026dc:	fa02 f303 	lsl.w	r3, r2, r3
 80026e0:	69ba      	ldr	r2, [r7, #24]
 80026e2:	4313      	orrs	r3, r2
 80026e4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80026e6:	69fb      	ldr	r3, [r7, #28]
 80026e8:	08da      	lsrs	r2, r3, #3
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	3208      	adds	r2, #8
 80026ee:	69b9      	ldr	r1, [r7, #24]
 80026f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80026fa:	69fb      	ldr	r3, [r7, #28]
 80026fc:	005b      	lsls	r3, r3, #1
 80026fe:	2203      	movs	r2, #3
 8002700:	fa02 f303 	lsl.w	r3, r2, r3
 8002704:	43db      	mvns	r3, r3
 8002706:	69ba      	ldr	r2, [r7, #24]
 8002708:	4013      	ands	r3, r2
 800270a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	685b      	ldr	r3, [r3, #4]
 8002710:	f003 0203 	and.w	r2, r3, #3
 8002714:	69fb      	ldr	r3, [r7, #28]
 8002716:	005b      	lsls	r3, r3, #1
 8002718:	fa02 f303 	lsl.w	r3, r2, r3
 800271c:	69ba      	ldr	r2, [r7, #24]
 800271e:	4313      	orrs	r3, r2
 8002720:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	69ba      	ldr	r2, [r7, #24]
 8002726:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002730:	2b00      	cmp	r3, #0
 8002732:	f000 80a2 	beq.w	800287a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002736:	2300      	movs	r3, #0
 8002738:	60fb      	str	r3, [r7, #12]
 800273a:	4b57      	ldr	r3, [pc, #348]	; (8002898 <HAL_GPIO_Init+0x2e8>)
 800273c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800273e:	4a56      	ldr	r2, [pc, #344]	; (8002898 <HAL_GPIO_Init+0x2e8>)
 8002740:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002744:	6453      	str	r3, [r2, #68]	; 0x44
 8002746:	4b54      	ldr	r3, [pc, #336]	; (8002898 <HAL_GPIO_Init+0x2e8>)
 8002748:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800274a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800274e:	60fb      	str	r3, [r7, #12]
 8002750:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002752:	4a52      	ldr	r2, [pc, #328]	; (800289c <HAL_GPIO_Init+0x2ec>)
 8002754:	69fb      	ldr	r3, [r7, #28]
 8002756:	089b      	lsrs	r3, r3, #2
 8002758:	3302      	adds	r3, #2
 800275a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800275e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002760:	69fb      	ldr	r3, [r7, #28]
 8002762:	f003 0303 	and.w	r3, r3, #3
 8002766:	009b      	lsls	r3, r3, #2
 8002768:	220f      	movs	r2, #15
 800276a:	fa02 f303 	lsl.w	r3, r2, r3
 800276e:	43db      	mvns	r3, r3
 8002770:	69ba      	ldr	r2, [r7, #24]
 8002772:	4013      	ands	r3, r2
 8002774:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	4a49      	ldr	r2, [pc, #292]	; (80028a0 <HAL_GPIO_Init+0x2f0>)
 800277a:	4293      	cmp	r3, r2
 800277c:	d019      	beq.n	80027b2 <HAL_GPIO_Init+0x202>
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	4a48      	ldr	r2, [pc, #288]	; (80028a4 <HAL_GPIO_Init+0x2f4>)
 8002782:	4293      	cmp	r3, r2
 8002784:	d013      	beq.n	80027ae <HAL_GPIO_Init+0x1fe>
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	4a47      	ldr	r2, [pc, #284]	; (80028a8 <HAL_GPIO_Init+0x2f8>)
 800278a:	4293      	cmp	r3, r2
 800278c:	d00d      	beq.n	80027aa <HAL_GPIO_Init+0x1fa>
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	4a46      	ldr	r2, [pc, #280]	; (80028ac <HAL_GPIO_Init+0x2fc>)
 8002792:	4293      	cmp	r3, r2
 8002794:	d007      	beq.n	80027a6 <HAL_GPIO_Init+0x1f6>
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	4a45      	ldr	r2, [pc, #276]	; (80028b0 <HAL_GPIO_Init+0x300>)
 800279a:	4293      	cmp	r3, r2
 800279c:	d101      	bne.n	80027a2 <HAL_GPIO_Init+0x1f2>
 800279e:	2304      	movs	r3, #4
 80027a0:	e008      	b.n	80027b4 <HAL_GPIO_Init+0x204>
 80027a2:	2307      	movs	r3, #7
 80027a4:	e006      	b.n	80027b4 <HAL_GPIO_Init+0x204>
 80027a6:	2303      	movs	r3, #3
 80027a8:	e004      	b.n	80027b4 <HAL_GPIO_Init+0x204>
 80027aa:	2302      	movs	r3, #2
 80027ac:	e002      	b.n	80027b4 <HAL_GPIO_Init+0x204>
 80027ae:	2301      	movs	r3, #1
 80027b0:	e000      	b.n	80027b4 <HAL_GPIO_Init+0x204>
 80027b2:	2300      	movs	r3, #0
 80027b4:	69fa      	ldr	r2, [r7, #28]
 80027b6:	f002 0203 	and.w	r2, r2, #3
 80027ba:	0092      	lsls	r2, r2, #2
 80027bc:	4093      	lsls	r3, r2
 80027be:	69ba      	ldr	r2, [r7, #24]
 80027c0:	4313      	orrs	r3, r2
 80027c2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80027c4:	4935      	ldr	r1, [pc, #212]	; (800289c <HAL_GPIO_Init+0x2ec>)
 80027c6:	69fb      	ldr	r3, [r7, #28]
 80027c8:	089b      	lsrs	r3, r3, #2
 80027ca:	3302      	adds	r3, #2
 80027cc:	69ba      	ldr	r2, [r7, #24]
 80027ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80027d2:	4b38      	ldr	r3, [pc, #224]	; (80028b4 <HAL_GPIO_Init+0x304>)
 80027d4:	689b      	ldr	r3, [r3, #8]
 80027d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027d8:	693b      	ldr	r3, [r7, #16]
 80027da:	43db      	mvns	r3, r3
 80027dc:	69ba      	ldr	r2, [r7, #24]
 80027de:	4013      	ands	r3, r2
 80027e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	685b      	ldr	r3, [r3, #4]
 80027e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d003      	beq.n	80027f6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80027ee:	69ba      	ldr	r2, [r7, #24]
 80027f0:	693b      	ldr	r3, [r7, #16]
 80027f2:	4313      	orrs	r3, r2
 80027f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80027f6:	4a2f      	ldr	r2, [pc, #188]	; (80028b4 <HAL_GPIO_Init+0x304>)
 80027f8:	69bb      	ldr	r3, [r7, #24]
 80027fa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80027fc:	4b2d      	ldr	r3, [pc, #180]	; (80028b4 <HAL_GPIO_Init+0x304>)
 80027fe:	68db      	ldr	r3, [r3, #12]
 8002800:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002802:	693b      	ldr	r3, [r7, #16]
 8002804:	43db      	mvns	r3, r3
 8002806:	69ba      	ldr	r2, [r7, #24]
 8002808:	4013      	ands	r3, r2
 800280a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	685b      	ldr	r3, [r3, #4]
 8002810:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002814:	2b00      	cmp	r3, #0
 8002816:	d003      	beq.n	8002820 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002818:	69ba      	ldr	r2, [r7, #24]
 800281a:	693b      	ldr	r3, [r7, #16]
 800281c:	4313      	orrs	r3, r2
 800281e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002820:	4a24      	ldr	r2, [pc, #144]	; (80028b4 <HAL_GPIO_Init+0x304>)
 8002822:	69bb      	ldr	r3, [r7, #24]
 8002824:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002826:	4b23      	ldr	r3, [pc, #140]	; (80028b4 <HAL_GPIO_Init+0x304>)
 8002828:	685b      	ldr	r3, [r3, #4]
 800282a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800282c:	693b      	ldr	r3, [r7, #16]
 800282e:	43db      	mvns	r3, r3
 8002830:	69ba      	ldr	r2, [r7, #24]
 8002832:	4013      	ands	r3, r2
 8002834:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	685b      	ldr	r3, [r3, #4]
 800283a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800283e:	2b00      	cmp	r3, #0
 8002840:	d003      	beq.n	800284a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002842:	69ba      	ldr	r2, [r7, #24]
 8002844:	693b      	ldr	r3, [r7, #16]
 8002846:	4313      	orrs	r3, r2
 8002848:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800284a:	4a1a      	ldr	r2, [pc, #104]	; (80028b4 <HAL_GPIO_Init+0x304>)
 800284c:	69bb      	ldr	r3, [r7, #24]
 800284e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002850:	4b18      	ldr	r3, [pc, #96]	; (80028b4 <HAL_GPIO_Init+0x304>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002856:	693b      	ldr	r3, [r7, #16]
 8002858:	43db      	mvns	r3, r3
 800285a:	69ba      	ldr	r2, [r7, #24]
 800285c:	4013      	ands	r3, r2
 800285e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	685b      	ldr	r3, [r3, #4]
 8002864:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002868:	2b00      	cmp	r3, #0
 800286a:	d003      	beq.n	8002874 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800286c:	69ba      	ldr	r2, [r7, #24]
 800286e:	693b      	ldr	r3, [r7, #16]
 8002870:	4313      	orrs	r3, r2
 8002872:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002874:	4a0f      	ldr	r2, [pc, #60]	; (80028b4 <HAL_GPIO_Init+0x304>)
 8002876:	69bb      	ldr	r3, [r7, #24]
 8002878:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800287a:	69fb      	ldr	r3, [r7, #28]
 800287c:	3301      	adds	r3, #1
 800287e:	61fb      	str	r3, [r7, #28]
 8002880:	69fb      	ldr	r3, [r7, #28]
 8002882:	2b0f      	cmp	r3, #15
 8002884:	f67f aea2 	bls.w	80025cc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002888:	bf00      	nop
 800288a:	bf00      	nop
 800288c:	3724      	adds	r7, #36	; 0x24
 800288e:	46bd      	mov	sp, r7
 8002890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002894:	4770      	bx	lr
 8002896:	bf00      	nop
 8002898:	40023800 	.word	0x40023800
 800289c:	40013800 	.word	0x40013800
 80028a0:	40020000 	.word	0x40020000
 80028a4:	40020400 	.word	0x40020400
 80028a8:	40020800 	.word	0x40020800
 80028ac:	40020c00 	.word	0x40020c00
 80028b0:	40021000 	.word	0x40021000
 80028b4:	40013c00 	.word	0x40013c00

080028b8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80028b8:	b480      	push	{r7}
 80028ba:	b085      	sub	sp, #20
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
 80028c0:	460b      	mov	r3, r1
 80028c2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	691a      	ldr	r2, [r3, #16]
 80028c8:	887b      	ldrh	r3, [r7, #2]
 80028ca:	4013      	ands	r3, r2
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d002      	beq.n	80028d6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80028d0:	2301      	movs	r3, #1
 80028d2:	73fb      	strb	r3, [r7, #15]
 80028d4:	e001      	b.n	80028da <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80028d6:	2300      	movs	r3, #0
 80028d8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80028da:	7bfb      	ldrb	r3, [r7, #15]
}
 80028dc:	4618      	mov	r0, r3
 80028de:	3714      	adds	r7, #20
 80028e0:	46bd      	mov	sp, r7
 80028e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e6:	4770      	bx	lr

080028e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80028e8:	b480      	push	{r7}
 80028ea:	b083      	sub	sp, #12
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
 80028f0:	460b      	mov	r3, r1
 80028f2:	807b      	strh	r3, [r7, #2]
 80028f4:	4613      	mov	r3, r2
 80028f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80028f8:	787b      	ldrb	r3, [r7, #1]
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d003      	beq.n	8002906 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80028fe:	887a      	ldrh	r2, [r7, #2]
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002904:	e003      	b.n	800290e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002906:	887b      	ldrh	r3, [r7, #2]
 8002908:	041a      	lsls	r2, r3, #16
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	619a      	str	r2, [r3, #24]
}
 800290e:	bf00      	nop
 8002910:	370c      	adds	r7, #12
 8002912:	46bd      	mov	sp, r7
 8002914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002918:	4770      	bx	lr
	...

0800291c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b082      	sub	sp, #8
 8002920:	af00      	add	r7, sp, #0
 8002922:	4603      	mov	r3, r0
 8002924:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002926:	4b08      	ldr	r3, [pc, #32]	; (8002948 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002928:	695a      	ldr	r2, [r3, #20]
 800292a:	88fb      	ldrh	r3, [r7, #6]
 800292c:	4013      	ands	r3, r2
 800292e:	2b00      	cmp	r3, #0
 8002930:	d006      	beq.n	8002940 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002932:	4a05      	ldr	r2, [pc, #20]	; (8002948 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002934:	88fb      	ldrh	r3, [r7, #6]
 8002936:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002938:	88fb      	ldrh	r3, [r7, #6]
 800293a:	4618      	mov	r0, r3
 800293c:	f7fe f9c2 	bl	8000cc4 <HAL_GPIO_EXTI_Callback>
  }
}
 8002940:	bf00      	nop
 8002942:	3708      	adds	r7, #8
 8002944:	46bd      	mov	sp, r7
 8002946:	bd80      	pop	{r7, pc}
 8002948:	40013c00 	.word	0x40013c00

0800294c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800294c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800294e:	b08f      	sub	sp, #60	; 0x3c
 8002950:	af0a      	add	r7, sp, #40	; 0x28
 8002952:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2b00      	cmp	r3, #0
 8002958:	d101      	bne.n	800295e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800295a:	2301      	movs	r3, #1
 800295c:	e10f      	b.n	8002b7e <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800296a:	b2db      	uxtb	r3, r3
 800296c:	2b00      	cmp	r3, #0
 800296e:	d106      	bne.n	800297e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2200      	movs	r2, #0
 8002974:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002978:	6878      	ldr	r0, [r7, #4]
 800297a:	f009 fad1 	bl	800bf20 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	2203      	movs	r2, #3
 8002982:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002986:	68bb      	ldr	r3, [r7, #8]
 8002988:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800298a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800298e:	2b00      	cmp	r3, #0
 8002990:	d102      	bne.n	8002998 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	2200      	movs	r2, #0
 8002996:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	4618      	mov	r0, r3
 800299e:	f004 fa2c 	bl	8006dfa <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	603b      	str	r3, [r7, #0]
 80029a8:	687e      	ldr	r6, [r7, #4]
 80029aa:	466d      	mov	r5, sp
 80029ac:	f106 0410 	add.w	r4, r6, #16
 80029b0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80029b2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80029b4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80029b6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80029b8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80029bc:	e885 0003 	stmia.w	r5, {r0, r1}
 80029c0:	1d33      	adds	r3, r6, #4
 80029c2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80029c4:	6838      	ldr	r0, [r7, #0]
 80029c6:	f004 f903 	bl	8006bd0 <USB_CoreInit>
 80029ca:	4603      	mov	r3, r0
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d005      	beq.n	80029dc <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2202      	movs	r2, #2
 80029d4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80029d8:	2301      	movs	r3, #1
 80029da:	e0d0      	b.n	8002b7e <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	2100      	movs	r1, #0
 80029e2:	4618      	mov	r0, r3
 80029e4:	f004 fa1a 	bl	8006e1c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80029e8:	2300      	movs	r3, #0
 80029ea:	73fb      	strb	r3, [r7, #15]
 80029ec:	e04a      	b.n	8002a84 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80029ee:	7bfa      	ldrb	r2, [r7, #15]
 80029f0:	6879      	ldr	r1, [r7, #4]
 80029f2:	4613      	mov	r3, r2
 80029f4:	00db      	lsls	r3, r3, #3
 80029f6:	4413      	add	r3, r2
 80029f8:	009b      	lsls	r3, r3, #2
 80029fa:	440b      	add	r3, r1
 80029fc:	333d      	adds	r3, #61	; 0x3d
 80029fe:	2201      	movs	r2, #1
 8002a00:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002a02:	7bfa      	ldrb	r2, [r7, #15]
 8002a04:	6879      	ldr	r1, [r7, #4]
 8002a06:	4613      	mov	r3, r2
 8002a08:	00db      	lsls	r3, r3, #3
 8002a0a:	4413      	add	r3, r2
 8002a0c:	009b      	lsls	r3, r3, #2
 8002a0e:	440b      	add	r3, r1
 8002a10:	333c      	adds	r3, #60	; 0x3c
 8002a12:	7bfa      	ldrb	r2, [r7, #15]
 8002a14:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002a16:	7bfa      	ldrb	r2, [r7, #15]
 8002a18:	7bfb      	ldrb	r3, [r7, #15]
 8002a1a:	b298      	uxth	r0, r3
 8002a1c:	6879      	ldr	r1, [r7, #4]
 8002a1e:	4613      	mov	r3, r2
 8002a20:	00db      	lsls	r3, r3, #3
 8002a22:	4413      	add	r3, r2
 8002a24:	009b      	lsls	r3, r3, #2
 8002a26:	440b      	add	r3, r1
 8002a28:	3344      	adds	r3, #68	; 0x44
 8002a2a:	4602      	mov	r2, r0
 8002a2c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002a2e:	7bfa      	ldrb	r2, [r7, #15]
 8002a30:	6879      	ldr	r1, [r7, #4]
 8002a32:	4613      	mov	r3, r2
 8002a34:	00db      	lsls	r3, r3, #3
 8002a36:	4413      	add	r3, r2
 8002a38:	009b      	lsls	r3, r3, #2
 8002a3a:	440b      	add	r3, r1
 8002a3c:	3340      	adds	r3, #64	; 0x40
 8002a3e:	2200      	movs	r2, #0
 8002a40:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002a42:	7bfa      	ldrb	r2, [r7, #15]
 8002a44:	6879      	ldr	r1, [r7, #4]
 8002a46:	4613      	mov	r3, r2
 8002a48:	00db      	lsls	r3, r3, #3
 8002a4a:	4413      	add	r3, r2
 8002a4c:	009b      	lsls	r3, r3, #2
 8002a4e:	440b      	add	r3, r1
 8002a50:	3348      	adds	r3, #72	; 0x48
 8002a52:	2200      	movs	r2, #0
 8002a54:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002a56:	7bfa      	ldrb	r2, [r7, #15]
 8002a58:	6879      	ldr	r1, [r7, #4]
 8002a5a:	4613      	mov	r3, r2
 8002a5c:	00db      	lsls	r3, r3, #3
 8002a5e:	4413      	add	r3, r2
 8002a60:	009b      	lsls	r3, r3, #2
 8002a62:	440b      	add	r3, r1
 8002a64:	334c      	adds	r3, #76	; 0x4c
 8002a66:	2200      	movs	r2, #0
 8002a68:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002a6a:	7bfa      	ldrb	r2, [r7, #15]
 8002a6c:	6879      	ldr	r1, [r7, #4]
 8002a6e:	4613      	mov	r3, r2
 8002a70:	00db      	lsls	r3, r3, #3
 8002a72:	4413      	add	r3, r2
 8002a74:	009b      	lsls	r3, r3, #2
 8002a76:	440b      	add	r3, r1
 8002a78:	3354      	adds	r3, #84	; 0x54
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a7e:	7bfb      	ldrb	r3, [r7, #15]
 8002a80:	3301      	adds	r3, #1
 8002a82:	73fb      	strb	r3, [r7, #15]
 8002a84:	7bfa      	ldrb	r2, [r7, #15]
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	429a      	cmp	r2, r3
 8002a8c:	d3af      	bcc.n	80029ee <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a8e:	2300      	movs	r3, #0
 8002a90:	73fb      	strb	r3, [r7, #15]
 8002a92:	e044      	b.n	8002b1e <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002a94:	7bfa      	ldrb	r2, [r7, #15]
 8002a96:	6879      	ldr	r1, [r7, #4]
 8002a98:	4613      	mov	r3, r2
 8002a9a:	00db      	lsls	r3, r3, #3
 8002a9c:	4413      	add	r3, r2
 8002a9e:	009b      	lsls	r3, r3, #2
 8002aa0:	440b      	add	r3, r1
 8002aa2:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002aaa:	7bfa      	ldrb	r2, [r7, #15]
 8002aac:	6879      	ldr	r1, [r7, #4]
 8002aae:	4613      	mov	r3, r2
 8002ab0:	00db      	lsls	r3, r3, #3
 8002ab2:	4413      	add	r3, r2
 8002ab4:	009b      	lsls	r3, r3, #2
 8002ab6:	440b      	add	r3, r1
 8002ab8:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002abc:	7bfa      	ldrb	r2, [r7, #15]
 8002abe:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002ac0:	7bfa      	ldrb	r2, [r7, #15]
 8002ac2:	6879      	ldr	r1, [r7, #4]
 8002ac4:	4613      	mov	r3, r2
 8002ac6:	00db      	lsls	r3, r3, #3
 8002ac8:	4413      	add	r3, r2
 8002aca:	009b      	lsls	r3, r3, #2
 8002acc:	440b      	add	r3, r1
 8002ace:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002ad6:	7bfa      	ldrb	r2, [r7, #15]
 8002ad8:	6879      	ldr	r1, [r7, #4]
 8002ada:	4613      	mov	r3, r2
 8002adc:	00db      	lsls	r3, r3, #3
 8002ade:	4413      	add	r3, r2
 8002ae0:	009b      	lsls	r3, r3, #2
 8002ae2:	440b      	add	r3, r1
 8002ae4:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002ae8:	2200      	movs	r2, #0
 8002aea:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002aec:	7bfa      	ldrb	r2, [r7, #15]
 8002aee:	6879      	ldr	r1, [r7, #4]
 8002af0:	4613      	mov	r3, r2
 8002af2:	00db      	lsls	r3, r3, #3
 8002af4:	4413      	add	r3, r2
 8002af6:	009b      	lsls	r3, r3, #2
 8002af8:	440b      	add	r3, r1
 8002afa:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002afe:	2200      	movs	r2, #0
 8002b00:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002b02:	7bfa      	ldrb	r2, [r7, #15]
 8002b04:	6879      	ldr	r1, [r7, #4]
 8002b06:	4613      	mov	r3, r2
 8002b08:	00db      	lsls	r3, r3, #3
 8002b0a:	4413      	add	r3, r2
 8002b0c:	009b      	lsls	r3, r3, #2
 8002b0e:	440b      	add	r3, r1
 8002b10:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002b14:	2200      	movs	r2, #0
 8002b16:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b18:	7bfb      	ldrb	r3, [r7, #15]
 8002b1a:	3301      	adds	r3, #1
 8002b1c:	73fb      	strb	r3, [r7, #15]
 8002b1e:	7bfa      	ldrb	r2, [r7, #15]
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	685b      	ldr	r3, [r3, #4]
 8002b24:	429a      	cmp	r2, r3
 8002b26:	d3b5      	bcc.n	8002a94 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	603b      	str	r3, [r7, #0]
 8002b2e:	687e      	ldr	r6, [r7, #4]
 8002b30:	466d      	mov	r5, sp
 8002b32:	f106 0410 	add.w	r4, r6, #16
 8002b36:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002b38:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002b3a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002b3c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002b3e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002b42:	e885 0003 	stmia.w	r5, {r0, r1}
 8002b46:	1d33      	adds	r3, r6, #4
 8002b48:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002b4a:	6838      	ldr	r0, [r7, #0]
 8002b4c:	f004 f9b2 	bl	8006eb4 <USB_DevInit>
 8002b50:	4603      	mov	r3, r0
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d005      	beq.n	8002b62 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	2202      	movs	r2, #2
 8002b5a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002b5e:	2301      	movs	r3, #1
 8002b60:	e00d      	b.n	8002b7e <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	2200      	movs	r2, #0
 8002b66:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	2201      	movs	r2, #1
 8002b6e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	4618      	mov	r0, r3
 8002b78:	f005 fb01 	bl	800817e <USB_DevDisconnect>

  return HAL_OK;
 8002b7c:	2300      	movs	r3, #0
}
 8002b7e:	4618      	mov	r0, r3
 8002b80:	3714      	adds	r7, #20
 8002b82:	46bd      	mov	sp, r7
 8002b84:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002b86 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002b86:	b580      	push	{r7, lr}
 8002b88:	b084      	sub	sp, #16
 8002b8a:	af00      	add	r7, sp, #0
 8002b8c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002b9a:	2b01      	cmp	r3, #1
 8002b9c:	d101      	bne.n	8002ba2 <HAL_PCD_Start+0x1c>
 8002b9e:	2302      	movs	r3, #2
 8002ba0:	e020      	b.n	8002be4 <HAL_PCD_Start+0x5e>
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	2201      	movs	r2, #1
 8002ba6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bae:	2b01      	cmp	r3, #1
 8002bb0:	d109      	bne.n	8002bc6 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002bb6:	2b01      	cmp	r3, #1
 8002bb8:	d005      	beq.n	8002bc6 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bbe:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	4618      	mov	r0, r3
 8002bcc:	f004 f904 	bl	8006dd8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	f005 fab1 	bl	800813c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	2200      	movs	r2, #0
 8002bde:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002be2:	2300      	movs	r3, #0
}
 8002be4:	4618      	mov	r0, r3
 8002be6:	3710      	adds	r7, #16
 8002be8:	46bd      	mov	sp, r7
 8002bea:	bd80      	pop	{r7, pc}

08002bec <HAL_PCD_Stop>:
  * @brief  Stop the USB device.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Stop(PCD_HandleTypeDef *hpcd)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b084      	sub	sp, #16
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002c00:	2b01      	cmp	r3, #1
 8002c02:	d101      	bne.n	8002c08 <HAL_PCD_Stop+0x1c>
 8002c04:	2302      	movs	r3, #2
 8002c06:	e026      	b.n	8002c56 <HAL_PCD_Stop+0x6a>
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2201      	movs	r2, #1
 8002c0c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  __HAL_PCD_DISABLE(hpcd);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	4618      	mov	r0, r3
 8002c16:	f004 f8f0 	bl	8006dfa <USB_DisableGlobalInt>
  (void)USB_DevDisconnect(hpcd->Instance);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	4618      	mov	r0, r3
 8002c20:	f005 faad 	bl	800817e <USB_DevDisconnect>

  (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	2110      	movs	r1, #16
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	f004 faa6 	bl	800717c <USB_FlushTxFifo>

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c34:	2b01      	cmp	r3, #1
 8002c36:	d109      	bne.n	8002c4c <HAL_PCD_Stop+0x60>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002c3c:	2b01      	cmp	r3, #1
 8002c3e:	d005      	beq.n	8002c4c <HAL_PCD_Stop+0x60>
  {
    /* Disable USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c44:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_UNLOCK(hpcd);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2200      	movs	r2, #0
 8002c50:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002c54:	2300      	movs	r3, #0
}
 8002c56:	4618      	mov	r0, r3
 8002c58:	3710      	adds	r7, #16
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	bd80      	pop	{r7, pc}

08002c5e <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002c5e:	b590      	push	{r4, r7, lr}
 8002c60:	b08d      	sub	sp, #52	; 0x34
 8002c62:	af00      	add	r7, sp, #0
 8002c64:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002c6c:	6a3b      	ldr	r3, [r7, #32]
 8002c6e:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	4618      	mov	r0, r3
 8002c76:	f005 fb36 	bl	80082e6 <USB_GetMode>
 8002c7a:	4603      	mov	r3, r0
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	f040 848a 	bne.w	8003596 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	4618      	mov	r0, r3
 8002c88:	f005 fa9a 	bl	80081c0 <USB_ReadInterrupts>
 8002c8c:	4603      	mov	r3, r0
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	f000 8480 	beq.w	8003594 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002c94:	69fb      	ldr	r3, [r7, #28]
 8002c96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c9a:	689b      	ldr	r3, [r3, #8]
 8002c9c:	0a1b      	lsrs	r3, r3, #8
 8002c9e:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	4618      	mov	r0, r3
 8002cae:	f005 fa87 	bl	80081c0 <USB_ReadInterrupts>
 8002cb2:	4603      	mov	r3, r0
 8002cb4:	f003 0302 	and.w	r3, r3, #2
 8002cb8:	2b02      	cmp	r3, #2
 8002cba:	d107      	bne.n	8002ccc <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	695a      	ldr	r2, [r3, #20]
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f002 0202 	and.w	r2, r2, #2
 8002cca:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	f005 fa75 	bl	80081c0 <USB_ReadInterrupts>
 8002cd6:	4603      	mov	r3, r0
 8002cd8:	f003 0310 	and.w	r3, r3, #16
 8002cdc:	2b10      	cmp	r3, #16
 8002cde:	d161      	bne.n	8002da4 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	699a      	ldr	r2, [r3, #24]
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f022 0210 	bic.w	r2, r2, #16
 8002cee:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002cf0:	6a3b      	ldr	r3, [r7, #32]
 8002cf2:	6a1b      	ldr	r3, [r3, #32]
 8002cf4:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002cf6:	69bb      	ldr	r3, [r7, #24]
 8002cf8:	f003 020f 	and.w	r2, r3, #15
 8002cfc:	4613      	mov	r3, r2
 8002cfe:	00db      	lsls	r3, r3, #3
 8002d00:	4413      	add	r3, r2
 8002d02:	009b      	lsls	r3, r3, #2
 8002d04:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002d08:	687a      	ldr	r2, [r7, #4]
 8002d0a:	4413      	add	r3, r2
 8002d0c:	3304      	adds	r3, #4
 8002d0e:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002d10:	69bb      	ldr	r3, [r7, #24]
 8002d12:	0c5b      	lsrs	r3, r3, #17
 8002d14:	f003 030f 	and.w	r3, r3, #15
 8002d18:	2b02      	cmp	r3, #2
 8002d1a:	d124      	bne.n	8002d66 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002d1c:	69ba      	ldr	r2, [r7, #24]
 8002d1e:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002d22:	4013      	ands	r3, r2
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d035      	beq.n	8002d94 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002d28:	697b      	ldr	r3, [r7, #20]
 8002d2a:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002d2c:	69bb      	ldr	r3, [r7, #24]
 8002d2e:	091b      	lsrs	r3, r3, #4
 8002d30:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002d32:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002d36:	b29b      	uxth	r3, r3
 8002d38:	461a      	mov	r2, r3
 8002d3a:	6a38      	ldr	r0, [r7, #32]
 8002d3c:	f005 f8ac 	bl	8007e98 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002d40:	697b      	ldr	r3, [r7, #20]
 8002d42:	691a      	ldr	r2, [r3, #16]
 8002d44:	69bb      	ldr	r3, [r7, #24]
 8002d46:	091b      	lsrs	r3, r3, #4
 8002d48:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002d4c:	441a      	add	r2, r3
 8002d4e:	697b      	ldr	r3, [r7, #20]
 8002d50:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002d52:	697b      	ldr	r3, [r7, #20]
 8002d54:	6a1a      	ldr	r2, [r3, #32]
 8002d56:	69bb      	ldr	r3, [r7, #24]
 8002d58:	091b      	lsrs	r3, r3, #4
 8002d5a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002d5e:	441a      	add	r2, r3
 8002d60:	697b      	ldr	r3, [r7, #20]
 8002d62:	621a      	str	r2, [r3, #32]
 8002d64:	e016      	b.n	8002d94 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002d66:	69bb      	ldr	r3, [r7, #24]
 8002d68:	0c5b      	lsrs	r3, r3, #17
 8002d6a:	f003 030f 	and.w	r3, r3, #15
 8002d6e:	2b06      	cmp	r3, #6
 8002d70:	d110      	bne.n	8002d94 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002d78:	2208      	movs	r2, #8
 8002d7a:	4619      	mov	r1, r3
 8002d7c:	6a38      	ldr	r0, [r7, #32]
 8002d7e:	f005 f88b 	bl	8007e98 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002d82:	697b      	ldr	r3, [r7, #20]
 8002d84:	6a1a      	ldr	r2, [r3, #32]
 8002d86:	69bb      	ldr	r3, [r7, #24]
 8002d88:	091b      	lsrs	r3, r3, #4
 8002d8a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002d8e:	441a      	add	r2, r3
 8002d90:	697b      	ldr	r3, [r7, #20]
 8002d92:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	699a      	ldr	r2, [r3, #24]
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f042 0210 	orr.w	r2, r2, #16
 8002da2:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	4618      	mov	r0, r3
 8002daa:	f005 fa09 	bl	80081c0 <USB_ReadInterrupts>
 8002dae:	4603      	mov	r3, r0
 8002db0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002db4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002db8:	f040 80a7 	bne.w	8002f0a <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	f005 fa0e 	bl	80081e6 <USB_ReadDevAllOutEpInterrupt>
 8002dca:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002dcc:	e099      	b.n	8002f02 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002dce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dd0:	f003 0301 	and.w	r3, r3, #1
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	f000 808e 	beq.w	8002ef6 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002de0:	b2d2      	uxtb	r2, r2
 8002de2:	4611      	mov	r1, r2
 8002de4:	4618      	mov	r0, r3
 8002de6:	f005 fa32 	bl	800824e <USB_ReadDevOutEPInterrupt>
 8002dea:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002dec:	693b      	ldr	r3, [r7, #16]
 8002dee:	f003 0301 	and.w	r3, r3, #1
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d00c      	beq.n	8002e10 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002df8:	015a      	lsls	r2, r3, #5
 8002dfa:	69fb      	ldr	r3, [r7, #28]
 8002dfc:	4413      	add	r3, r2
 8002dfe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e02:	461a      	mov	r2, r3
 8002e04:	2301      	movs	r3, #1
 8002e06:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002e08:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002e0a:	6878      	ldr	r0, [r7, #4]
 8002e0c:	f000 fef0 	bl	8003bf0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002e10:	693b      	ldr	r3, [r7, #16]
 8002e12:	f003 0308 	and.w	r3, r3, #8
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d00c      	beq.n	8002e34 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e1c:	015a      	lsls	r2, r3, #5
 8002e1e:	69fb      	ldr	r3, [r7, #28]
 8002e20:	4413      	add	r3, r2
 8002e22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e26:	461a      	mov	r2, r3
 8002e28:	2308      	movs	r3, #8
 8002e2a:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002e2c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002e2e:	6878      	ldr	r0, [r7, #4]
 8002e30:	f000 ffc6 	bl	8003dc0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002e34:	693b      	ldr	r3, [r7, #16]
 8002e36:	f003 0310 	and.w	r3, r3, #16
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d008      	beq.n	8002e50 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e40:	015a      	lsls	r2, r3, #5
 8002e42:	69fb      	ldr	r3, [r7, #28]
 8002e44:	4413      	add	r3, r2
 8002e46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e4a:	461a      	mov	r2, r3
 8002e4c:	2310      	movs	r3, #16
 8002e4e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002e50:	693b      	ldr	r3, [r7, #16]
 8002e52:	f003 0302 	and.w	r3, r3, #2
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d030      	beq.n	8002ebc <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002e5a:	6a3b      	ldr	r3, [r7, #32]
 8002e5c:	695b      	ldr	r3, [r3, #20]
 8002e5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e62:	2b80      	cmp	r3, #128	; 0x80
 8002e64:	d109      	bne.n	8002e7a <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002e66:	69fb      	ldr	r3, [r7, #28]
 8002e68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e6c:	685b      	ldr	r3, [r3, #4]
 8002e6e:	69fa      	ldr	r2, [r7, #28]
 8002e70:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002e74:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002e78:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002e7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e7c:	4613      	mov	r3, r2
 8002e7e:	00db      	lsls	r3, r3, #3
 8002e80:	4413      	add	r3, r2
 8002e82:	009b      	lsls	r3, r3, #2
 8002e84:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002e88:	687a      	ldr	r2, [r7, #4]
 8002e8a:	4413      	add	r3, r2
 8002e8c:	3304      	adds	r3, #4
 8002e8e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002e90:	697b      	ldr	r3, [r7, #20]
 8002e92:	78db      	ldrb	r3, [r3, #3]
 8002e94:	2b01      	cmp	r3, #1
 8002e96:	d108      	bne.n	8002eaa <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002e98:	697b      	ldr	r3, [r7, #20]
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ea0:	b2db      	uxtb	r3, r3
 8002ea2:	4619      	mov	r1, r3
 8002ea4:	6878      	ldr	r0, [r7, #4]
 8002ea6:	f009 f937 	bl	800c118 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eac:	015a      	lsls	r2, r3, #5
 8002eae:	69fb      	ldr	r3, [r7, #28]
 8002eb0:	4413      	add	r3, r2
 8002eb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002eb6:	461a      	mov	r2, r3
 8002eb8:	2302      	movs	r3, #2
 8002eba:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002ebc:	693b      	ldr	r3, [r7, #16]
 8002ebe:	f003 0320 	and.w	r3, r3, #32
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d008      	beq.n	8002ed8 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ec8:	015a      	lsls	r2, r3, #5
 8002eca:	69fb      	ldr	r3, [r7, #28]
 8002ecc:	4413      	add	r3, r2
 8002ece:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ed2:	461a      	mov	r2, r3
 8002ed4:	2320      	movs	r3, #32
 8002ed6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002ed8:	693b      	ldr	r3, [r7, #16]
 8002eda:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d009      	beq.n	8002ef6 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ee4:	015a      	lsls	r2, r3, #5
 8002ee6:	69fb      	ldr	r3, [r7, #28]
 8002ee8:	4413      	add	r3, r2
 8002eea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002eee:	461a      	mov	r2, r3
 8002ef0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002ef4:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ef8:	3301      	adds	r3, #1
 8002efa:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002efc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002efe:	085b      	lsrs	r3, r3, #1
 8002f00:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002f02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	f47f af62 	bne.w	8002dce <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	4618      	mov	r0, r3
 8002f10:	f005 f956 	bl	80081c0 <USB_ReadInterrupts>
 8002f14:	4603      	mov	r3, r0
 8002f16:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f1a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002f1e:	f040 80db 	bne.w	80030d8 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	4618      	mov	r0, r3
 8002f28:	f005 f977 	bl	800821a <USB_ReadDevAllInEpInterrupt>
 8002f2c:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002f2e:	2300      	movs	r3, #0
 8002f30:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002f32:	e0cd      	b.n	80030d0 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002f34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f36:	f003 0301 	and.w	r3, r3, #1
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	f000 80c2 	beq.w	80030c4 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f46:	b2d2      	uxtb	r2, r2
 8002f48:	4611      	mov	r1, r2
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	f005 f99d 	bl	800828a <USB_ReadDevInEPInterrupt>
 8002f50:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002f52:	693b      	ldr	r3, [r7, #16]
 8002f54:	f003 0301 	and.w	r3, r3, #1
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d057      	beq.n	800300c <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f5e:	f003 030f 	and.w	r3, r3, #15
 8002f62:	2201      	movs	r2, #1
 8002f64:	fa02 f303 	lsl.w	r3, r2, r3
 8002f68:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002f6a:	69fb      	ldr	r3, [r7, #28]
 8002f6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f70:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	43db      	mvns	r3, r3
 8002f76:	69f9      	ldr	r1, [r7, #28]
 8002f78:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002f7c:	4013      	ands	r3, r2
 8002f7e:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f82:	015a      	lsls	r2, r3, #5
 8002f84:	69fb      	ldr	r3, [r7, #28]
 8002f86:	4413      	add	r3, r2
 8002f88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002f8c:	461a      	mov	r2, r3
 8002f8e:	2301      	movs	r3, #1
 8002f90:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	691b      	ldr	r3, [r3, #16]
 8002f96:	2b01      	cmp	r3, #1
 8002f98:	d132      	bne.n	8003000 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002f9a:	6879      	ldr	r1, [r7, #4]
 8002f9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f9e:	4613      	mov	r3, r2
 8002fa0:	00db      	lsls	r3, r3, #3
 8002fa2:	4413      	add	r3, r2
 8002fa4:	009b      	lsls	r3, r3, #2
 8002fa6:	440b      	add	r3, r1
 8002fa8:	334c      	adds	r3, #76	; 0x4c
 8002faa:	6819      	ldr	r1, [r3, #0]
 8002fac:	6878      	ldr	r0, [r7, #4]
 8002fae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fb0:	4613      	mov	r3, r2
 8002fb2:	00db      	lsls	r3, r3, #3
 8002fb4:	4413      	add	r3, r2
 8002fb6:	009b      	lsls	r3, r3, #2
 8002fb8:	4403      	add	r3, r0
 8002fba:	3348      	adds	r3, #72	; 0x48
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	4419      	add	r1, r3
 8002fc0:	6878      	ldr	r0, [r7, #4]
 8002fc2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fc4:	4613      	mov	r3, r2
 8002fc6:	00db      	lsls	r3, r3, #3
 8002fc8:	4413      	add	r3, r2
 8002fca:	009b      	lsls	r3, r3, #2
 8002fcc:	4403      	add	r3, r0
 8002fce:	334c      	adds	r3, #76	; 0x4c
 8002fd0:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d113      	bne.n	8003000 <HAL_PCD_IRQHandler+0x3a2>
 8002fd8:	6879      	ldr	r1, [r7, #4]
 8002fda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fdc:	4613      	mov	r3, r2
 8002fde:	00db      	lsls	r3, r3, #3
 8002fe0:	4413      	add	r3, r2
 8002fe2:	009b      	lsls	r3, r3, #2
 8002fe4:	440b      	add	r3, r1
 8002fe6:	3354      	adds	r3, #84	; 0x54
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d108      	bne.n	8003000 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6818      	ldr	r0, [r3, #0]
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002ff8:	461a      	mov	r2, r3
 8002ffa:	2101      	movs	r1, #1
 8002ffc:	f005 f9a4 	bl	8008348 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003002:	b2db      	uxtb	r3, r3
 8003004:	4619      	mov	r1, r3
 8003006:	6878      	ldr	r0, [r7, #4]
 8003008:	f009 f80b 	bl	800c022 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800300c:	693b      	ldr	r3, [r7, #16]
 800300e:	f003 0308 	and.w	r3, r3, #8
 8003012:	2b00      	cmp	r3, #0
 8003014:	d008      	beq.n	8003028 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003018:	015a      	lsls	r2, r3, #5
 800301a:	69fb      	ldr	r3, [r7, #28]
 800301c:	4413      	add	r3, r2
 800301e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003022:	461a      	mov	r2, r3
 8003024:	2308      	movs	r3, #8
 8003026:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003028:	693b      	ldr	r3, [r7, #16]
 800302a:	f003 0310 	and.w	r3, r3, #16
 800302e:	2b00      	cmp	r3, #0
 8003030:	d008      	beq.n	8003044 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003034:	015a      	lsls	r2, r3, #5
 8003036:	69fb      	ldr	r3, [r7, #28]
 8003038:	4413      	add	r3, r2
 800303a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800303e:	461a      	mov	r2, r3
 8003040:	2310      	movs	r3, #16
 8003042:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003044:	693b      	ldr	r3, [r7, #16]
 8003046:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800304a:	2b00      	cmp	r3, #0
 800304c:	d008      	beq.n	8003060 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800304e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003050:	015a      	lsls	r2, r3, #5
 8003052:	69fb      	ldr	r3, [r7, #28]
 8003054:	4413      	add	r3, r2
 8003056:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800305a:	461a      	mov	r2, r3
 800305c:	2340      	movs	r3, #64	; 0x40
 800305e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003060:	693b      	ldr	r3, [r7, #16]
 8003062:	f003 0302 	and.w	r3, r3, #2
 8003066:	2b00      	cmp	r3, #0
 8003068:	d023      	beq.n	80030b2 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800306a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800306c:	6a38      	ldr	r0, [r7, #32]
 800306e:	f004 f885 	bl	800717c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8003072:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003074:	4613      	mov	r3, r2
 8003076:	00db      	lsls	r3, r3, #3
 8003078:	4413      	add	r3, r2
 800307a:	009b      	lsls	r3, r3, #2
 800307c:	3338      	adds	r3, #56	; 0x38
 800307e:	687a      	ldr	r2, [r7, #4]
 8003080:	4413      	add	r3, r2
 8003082:	3304      	adds	r3, #4
 8003084:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003086:	697b      	ldr	r3, [r7, #20]
 8003088:	78db      	ldrb	r3, [r3, #3]
 800308a:	2b01      	cmp	r3, #1
 800308c:	d108      	bne.n	80030a0 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800308e:	697b      	ldr	r3, [r7, #20]
 8003090:	2200      	movs	r2, #0
 8003092:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003096:	b2db      	uxtb	r3, r3
 8003098:	4619      	mov	r1, r3
 800309a:	6878      	ldr	r0, [r7, #4]
 800309c:	f009 f84e 	bl	800c13c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80030a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030a2:	015a      	lsls	r2, r3, #5
 80030a4:	69fb      	ldr	r3, [r7, #28]
 80030a6:	4413      	add	r3, r2
 80030a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80030ac:	461a      	mov	r2, r3
 80030ae:	2302      	movs	r3, #2
 80030b0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80030b2:	693b      	ldr	r3, [r7, #16]
 80030b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d003      	beq.n	80030c4 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80030bc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80030be:	6878      	ldr	r0, [r7, #4]
 80030c0:	f000 fd08 	bl	8003ad4 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80030c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030c6:	3301      	adds	r3, #1
 80030c8:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80030ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030cc:	085b      	lsrs	r3, r3, #1
 80030ce:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80030d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	f47f af2e 	bne.w	8002f34 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	4618      	mov	r0, r3
 80030de:	f005 f86f 	bl	80081c0 <USB_ReadInterrupts>
 80030e2:	4603      	mov	r3, r0
 80030e4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80030e8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80030ec:	d122      	bne.n	8003134 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80030ee:	69fb      	ldr	r3, [r7, #28]
 80030f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80030f4:	685b      	ldr	r3, [r3, #4]
 80030f6:	69fa      	ldr	r2, [r7, #28]
 80030f8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80030fc:	f023 0301 	bic.w	r3, r3, #1
 8003100:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8003108:	2b01      	cmp	r3, #1
 800310a:	d108      	bne.n	800311e <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2200      	movs	r2, #0
 8003110:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003114:	2100      	movs	r1, #0
 8003116:	6878      	ldr	r0, [r7, #4]
 8003118:	f000 fef0 	bl	8003efc <HAL_PCDEx_LPM_Callback>
 800311c:	e002      	b.n	8003124 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800311e:	6878      	ldr	r0, [r7, #4]
 8003120:	f008 ffec 	bl	800c0fc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	695a      	ldr	r2, [r3, #20]
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8003132:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	4618      	mov	r0, r3
 800313a:	f005 f841 	bl	80081c0 <USB_ReadInterrupts>
 800313e:	4603      	mov	r3, r0
 8003140:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003144:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003148:	d112      	bne.n	8003170 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800314a:	69fb      	ldr	r3, [r7, #28]
 800314c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003150:	689b      	ldr	r3, [r3, #8]
 8003152:	f003 0301 	and.w	r3, r3, #1
 8003156:	2b01      	cmp	r3, #1
 8003158:	d102      	bne.n	8003160 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800315a:	6878      	ldr	r0, [r7, #4]
 800315c:	f008 ffa8 	bl	800c0b0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	695a      	ldr	r2, [r3, #20]
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800316e:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	4618      	mov	r0, r3
 8003176:	f005 f823 	bl	80081c0 <USB_ReadInterrupts>
 800317a:	4603      	mov	r3, r0
 800317c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003180:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003184:	f040 80b7 	bne.w	80032f6 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003188:	69fb      	ldr	r3, [r7, #28]
 800318a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800318e:	685b      	ldr	r3, [r3, #4]
 8003190:	69fa      	ldr	r2, [r7, #28]
 8003192:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003196:	f023 0301 	bic.w	r3, r3, #1
 800319a:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	2110      	movs	r1, #16
 80031a2:	4618      	mov	r0, r3
 80031a4:	f003 ffea 	bl	800717c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80031a8:	2300      	movs	r3, #0
 80031aa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80031ac:	e046      	b.n	800323c <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80031ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031b0:	015a      	lsls	r2, r3, #5
 80031b2:	69fb      	ldr	r3, [r7, #28]
 80031b4:	4413      	add	r3, r2
 80031b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80031ba:	461a      	mov	r2, r3
 80031bc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80031c0:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80031c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031c4:	015a      	lsls	r2, r3, #5
 80031c6:	69fb      	ldr	r3, [r7, #28]
 80031c8:	4413      	add	r3, r2
 80031ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80031d2:	0151      	lsls	r1, r2, #5
 80031d4:	69fa      	ldr	r2, [r7, #28]
 80031d6:	440a      	add	r2, r1
 80031d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80031dc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80031e0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80031e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031e4:	015a      	lsls	r2, r3, #5
 80031e6:	69fb      	ldr	r3, [r7, #28]
 80031e8:	4413      	add	r3, r2
 80031ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031ee:	461a      	mov	r2, r3
 80031f0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80031f4:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80031f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031f8:	015a      	lsls	r2, r3, #5
 80031fa:	69fb      	ldr	r3, [r7, #28]
 80031fc:	4413      	add	r3, r2
 80031fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003206:	0151      	lsls	r1, r2, #5
 8003208:	69fa      	ldr	r2, [r7, #28]
 800320a:	440a      	add	r2, r1
 800320c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003210:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003214:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003216:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003218:	015a      	lsls	r2, r3, #5
 800321a:	69fb      	ldr	r3, [r7, #28]
 800321c:	4413      	add	r3, r2
 800321e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003226:	0151      	lsls	r1, r2, #5
 8003228:	69fa      	ldr	r2, [r7, #28]
 800322a:	440a      	add	r2, r1
 800322c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003230:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003234:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003236:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003238:	3301      	adds	r3, #1
 800323a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	685b      	ldr	r3, [r3, #4]
 8003240:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003242:	429a      	cmp	r2, r3
 8003244:	d3b3      	bcc.n	80031ae <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003246:	69fb      	ldr	r3, [r7, #28]
 8003248:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800324c:	69db      	ldr	r3, [r3, #28]
 800324e:	69fa      	ldr	r2, [r7, #28]
 8003250:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003254:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8003258:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800325e:	2b00      	cmp	r3, #0
 8003260:	d016      	beq.n	8003290 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003262:	69fb      	ldr	r3, [r7, #28]
 8003264:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003268:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800326c:	69fa      	ldr	r2, [r7, #28]
 800326e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003272:	f043 030b 	orr.w	r3, r3, #11
 8003276:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800327a:	69fb      	ldr	r3, [r7, #28]
 800327c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003280:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003282:	69fa      	ldr	r2, [r7, #28]
 8003284:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003288:	f043 030b 	orr.w	r3, r3, #11
 800328c:	6453      	str	r3, [r2, #68]	; 0x44
 800328e:	e015      	b.n	80032bc <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003290:	69fb      	ldr	r3, [r7, #28]
 8003292:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003296:	695b      	ldr	r3, [r3, #20]
 8003298:	69fa      	ldr	r2, [r7, #28]
 800329a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800329e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80032a2:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80032a6:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80032a8:	69fb      	ldr	r3, [r7, #28]
 80032aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80032ae:	691b      	ldr	r3, [r3, #16]
 80032b0:	69fa      	ldr	r2, [r7, #28]
 80032b2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80032b6:	f043 030b 	orr.w	r3, r3, #11
 80032ba:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80032bc:	69fb      	ldr	r3, [r7, #28]
 80032be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	69fa      	ldr	r2, [r7, #28]
 80032c6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80032ca:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80032ce:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6818      	ldr	r0, [r3, #0]
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	691b      	ldr	r3, [r3, #16]
 80032d8:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80032e0:	461a      	mov	r2, r3
 80032e2:	f005 f831 	bl	8008348 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	695a      	ldr	r2, [r3, #20]
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80032f4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	4618      	mov	r0, r3
 80032fc:	f004 ff60 	bl	80081c0 <USB_ReadInterrupts>
 8003300:	4603      	mov	r3, r0
 8003302:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003306:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800330a:	d124      	bne.n	8003356 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	4618      	mov	r0, r3
 8003312:	f004 fff6 	bl	8008302 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	4618      	mov	r0, r3
 800331c:	f003 ffab 	bl	8007276 <USB_GetDevSpeed>
 8003320:	4603      	mov	r3, r0
 8003322:	461a      	mov	r2, r3
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681c      	ldr	r4, [r3, #0]
 800332c:	f001 fa16 	bl	800475c <HAL_RCC_GetHCLKFreq>
 8003330:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003336:	b2db      	uxtb	r3, r3
 8003338:	461a      	mov	r2, r3
 800333a:	4620      	mov	r0, r4
 800333c:	f003 fcaa 	bl	8006c94 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003340:	6878      	ldr	r0, [r7, #4]
 8003342:	f008 fe96 	bl	800c072 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	695a      	ldr	r2, [r3, #20]
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8003354:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	4618      	mov	r0, r3
 800335c:	f004 ff30 	bl	80081c0 <USB_ReadInterrupts>
 8003360:	4603      	mov	r3, r0
 8003362:	f003 0308 	and.w	r3, r3, #8
 8003366:	2b08      	cmp	r3, #8
 8003368:	d10a      	bne.n	8003380 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800336a:	6878      	ldr	r0, [r7, #4]
 800336c:	f008 fe73 	bl	800c056 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	695a      	ldr	r2, [r3, #20]
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f002 0208 	and.w	r2, r2, #8
 800337e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	4618      	mov	r0, r3
 8003386:	f004 ff1b 	bl	80081c0 <USB_ReadInterrupts>
 800338a:	4603      	mov	r3, r0
 800338c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003390:	2b80      	cmp	r3, #128	; 0x80
 8003392:	d122      	bne.n	80033da <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8003394:	6a3b      	ldr	r3, [r7, #32]
 8003396:	699b      	ldr	r3, [r3, #24]
 8003398:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800339c:	6a3b      	ldr	r3, [r7, #32]
 800339e:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80033a0:	2301      	movs	r3, #1
 80033a2:	627b      	str	r3, [r7, #36]	; 0x24
 80033a4:	e014      	b.n	80033d0 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80033a6:	6879      	ldr	r1, [r7, #4]
 80033a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033aa:	4613      	mov	r3, r2
 80033ac:	00db      	lsls	r3, r3, #3
 80033ae:	4413      	add	r3, r2
 80033b0:	009b      	lsls	r3, r3, #2
 80033b2:	440b      	add	r3, r1
 80033b4:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80033b8:	781b      	ldrb	r3, [r3, #0]
 80033ba:	2b01      	cmp	r3, #1
 80033bc:	d105      	bne.n	80033ca <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80033be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033c0:	b2db      	uxtb	r3, r3
 80033c2:	4619      	mov	r1, r3
 80033c4:	6878      	ldr	r0, [r7, #4]
 80033c6:	f000 fb27 	bl	8003a18 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80033ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033cc:	3301      	adds	r3, #1
 80033ce:	627b      	str	r3, [r7, #36]	; 0x24
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	685b      	ldr	r3, [r3, #4]
 80033d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033d6:	429a      	cmp	r2, r3
 80033d8:	d3e5      	bcc.n	80033a6 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	4618      	mov	r0, r3
 80033e0:	f004 feee 	bl	80081c0 <USB_ReadInterrupts>
 80033e4:	4603      	mov	r3, r0
 80033e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80033ea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80033ee:	d13b      	bne.n	8003468 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80033f0:	2301      	movs	r3, #1
 80033f2:	627b      	str	r3, [r7, #36]	; 0x24
 80033f4:	e02b      	b.n	800344e <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80033f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033f8:	015a      	lsls	r2, r3, #5
 80033fa:	69fb      	ldr	r3, [r7, #28]
 80033fc:	4413      	add	r3, r2
 80033fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003406:	6879      	ldr	r1, [r7, #4]
 8003408:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800340a:	4613      	mov	r3, r2
 800340c:	00db      	lsls	r3, r3, #3
 800340e:	4413      	add	r3, r2
 8003410:	009b      	lsls	r3, r3, #2
 8003412:	440b      	add	r3, r1
 8003414:	3340      	adds	r3, #64	; 0x40
 8003416:	781b      	ldrb	r3, [r3, #0]
 8003418:	2b01      	cmp	r3, #1
 800341a:	d115      	bne.n	8003448 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800341c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800341e:	2b00      	cmp	r3, #0
 8003420:	da12      	bge.n	8003448 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003422:	6879      	ldr	r1, [r7, #4]
 8003424:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003426:	4613      	mov	r3, r2
 8003428:	00db      	lsls	r3, r3, #3
 800342a:	4413      	add	r3, r2
 800342c:	009b      	lsls	r3, r3, #2
 800342e:	440b      	add	r3, r1
 8003430:	333f      	adds	r3, #63	; 0x3f
 8003432:	2201      	movs	r2, #1
 8003434:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8003436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003438:	b2db      	uxtb	r3, r3
 800343a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800343e:	b2db      	uxtb	r3, r3
 8003440:	4619      	mov	r1, r3
 8003442:	6878      	ldr	r0, [r7, #4]
 8003444:	f000 fae8 	bl	8003a18 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800344a:	3301      	adds	r3, #1
 800344c:	627b      	str	r3, [r7, #36]	; 0x24
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	685b      	ldr	r3, [r3, #4]
 8003452:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003454:	429a      	cmp	r2, r3
 8003456:	d3ce      	bcc.n	80033f6 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	695a      	ldr	r2, [r3, #20]
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8003466:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	4618      	mov	r0, r3
 800346e:	f004 fea7 	bl	80081c0 <USB_ReadInterrupts>
 8003472:	4603      	mov	r3, r0
 8003474:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003478:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800347c:	d155      	bne.n	800352a <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800347e:	2301      	movs	r3, #1
 8003480:	627b      	str	r3, [r7, #36]	; 0x24
 8003482:	e045      	b.n	8003510 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8003484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003486:	015a      	lsls	r2, r3, #5
 8003488:	69fb      	ldr	r3, [r7, #28]
 800348a:	4413      	add	r3, r2
 800348c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003494:	6879      	ldr	r1, [r7, #4]
 8003496:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003498:	4613      	mov	r3, r2
 800349a:	00db      	lsls	r3, r3, #3
 800349c:	4413      	add	r3, r2
 800349e:	009b      	lsls	r3, r3, #2
 80034a0:	440b      	add	r3, r1
 80034a2:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80034a6:	781b      	ldrb	r3, [r3, #0]
 80034a8:	2b01      	cmp	r3, #1
 80034aa:	d12e      	bne.n	800350a <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80034ac:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	da2b      	bge.n	800350a <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80034b2:	69bb      	ldr	r3, [r7, #24]
 80034b4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 80034be:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80034c2:	429a      	cmp	r2, r3
 80034c4:	d121      	bne.n	800350a <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80034c6:	6879      	ldr	r1, [r7, #4]
 80034c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034ca:	4613      	mov	r3, r2
 80034cc:	00db      	lsls	r3, r3, #3
 80034ce:	4413      	add	r3, r2
 80034d0:	009b      	lsls	r3, r3, #2
 80034d2:	440b      	add	r3, r1
 80034d4:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80034d8:	2201      	movs	r2, #1
 80034da:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80034dc:	6a3b      	ldr	r3, [r7, #32]
 80034de:	699b      	ldr	r3, [r3, #24]
 80034e0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80034e4:	6a3b      	ldr	r3, [r7, #32]
 80034e6:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80034e8:	6a3b      	ldr	r3, [r7, #32]
 80034ea:	695b      	ldr	r3, [r3, #20]
 80034ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d10a      	bne.n	800350a <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80034f4:	69fb      	ldr	r3, [r7, #28]
 80034f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80034fa:	685b      	ldr	r3, [r3, #4]
 80034fc:	69fa      	ldr	r2, [r7, #28]
 80034fe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003502:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003506:	6053      	str	r3, [r2, #4]
            break;
 8003508:	e007      	b.n	800351a <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800350a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800350c:	3301      	adds	r3, #1
 800350e:	627b      	str	r3, [r7, #36]	; 0x24
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	685b      	ldr	r3, [r3, #4]
 8003514:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003516:	429a      	cmp	r2, r3
 8003518:	d3b4      	bcc.n	8003484 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	695a      	ldr	r2, [r3, #20]
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003528:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	4618      	mov	r0, r3
 8003530:	f004 fe46 	bl	80081c0 <USB_ReadInterrupts>
 8003534:	4603      	mov	r3, r0
 8003536:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800353a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800353e:	d10a      	bne.n	8003556 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003540:	6878      	ldr	r0, [r7, #4]
 8003542:	f008 fe0d 	bl	800c160 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	695a      	ldr	r2, [r3, #20]
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003554:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	4618      	mov	r0, r3
 800355c:	f004 fe30 	bl	80081c0 <USB_ReadInterrupts>
 8003560:	4603      	mov	r3, r0
 8003562:	f003 0304 	and.w	r3, r3, #4
 8003566:	2b04      	cmp	r3, #4
 8003568:	d115      	bne.n	8003596 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	685b      	ldr	r3, [r3, #4]
 8003570:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003572:	69bb      	ldr	r3, [r7, #24]
 8003574:	f003 0304 	and.w	r3, r3, #4
 8003578:	2b00      	cmp	r3, #0
 800357a:	d002      	beq.n	8003582 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800357c:	6878      	ldr	r0, [r7, #4]
 800357e:	f008 fdfd 	bl	800c17c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	6859      	ldr	r1, [r3, #4]
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	69ba      	ldr	r2, [r7, #24]
 800358e:	430a      	orrs	r2, r1
 8003590:	605a      	str	r2, [r3, #4]
 8003592:	e000      	b.n	8003596 <HAL_PCD_IRQHandler+0x938>
      return;
 8003594:	bf00      	nop
    }
  }
}
 8003596:	3734      	adds	r7, #52	; 0x34
 8003598:	46bd      	mov	sp, r7
 800359a:	bd90      	pop	{r4, r7, pc}

0800359c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	b082      	sub	sp, #8
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
 80035a4:	460b      	mov	r3, r1
 80035a6:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80035ae:	2b01      	cmp	r3, #1
 80035b0:	d101      	bne.n	80035b6 <HAL_PCD_SetAddress+0x1a>
 80035b2:	2302      	movs	r3, #2
 80035b4:	e013      	b.n	80035de <HAL_PCD_SetAddress+0x42>
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2201      	movs	r2, #1
 80035ba:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	78fa      	ldrb	r2, [r7, #3]
 80035c2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	78fa      	ldrb	r2, [r7, #3]
 80035cc:	4611      	mov	r1, r2
 80035ce:	4618      	mov	r0, r3
 80035d0:	f004 fd8e 	bl	80080f0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2200      	movs	r2, #0
 80035d8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80035dc:	2300      	movs	r3, #0
}
 80035de:	4618      	mov	r0, r3
 80035e0:	3708      	adds	r7, #8
 80035e2:	46bd      	mov	sp, r7
 80035e4:	bd80      	pop	{r7, pc}

080035e6 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80035e6:	b580      	push	{r7, lr}
 80035e8:	b084      	sub	sp, #16
 80035ea:	af00      	add	r7, sp, #0
 80035ec:	6078      	str	r0, [r7, #4]
 80035ee:	4608      	mov	r0, r1
 80035f0:	4611      	mov	r1, r2
 80035f2:	461a      	mov	r2, r3
 80035f4:	4603      	mov	r3, r0
 80035f6:	70fb      	strb	r3, [r7, #3]
 80035f8:	460b      	mov	r3, r1
 80035fa:	803b      	strh	r3, [r7, #0]
 80035fc:	4613      	mov	r3, r2
 80035fe:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003600:	2300      	movs	r3, #0
 8003602:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003604:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003608:	2b00      	cmp	r3, #0
 800360a:	da0f      	bge.n	800362c <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800360c:	78fb      	ldrb	r3, [r7, #3]
 800360e:	f003 020f 	and.w	r2, r3, #15
 8003612:	4613      	mov	r3, r2
 8003614:	00db      	lsls	r3, r3, #3
 8003616:	4413      	add	r3, r2
 8003618:	009b      	lsls	r3, r3, #2
 800361a:	3338      	adds	r3, #56	; 0x38
 800361c:	687a      	ldr	r2, [r7, #4]
 800361e:	4413      	add	r3, r2
 8003620:	3304      	adds	r3, #4
 8003622:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	2201      	movs	r2, #1
 8003628:	705a      	strb	r2, [r3, #1]
 800362a:	e00f      	b.n	800364c <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800362c:	78fb      	ldrb	r3, [r7, #3]
 800362e:	f003 020f 	and.w	r2, r3, #15
 8003632:	4613      	mov	r3, r2
 8003634:	00db      	lsls	r3, r3, #3
 8003636:	4413      	add	r3, r2
 8003638:	009b      	lsls	r3, r3, #2
 800363a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800363e:	687a      	ldr	r2, [r7, #4]
 8003640:	4413      	add	r3, r2
 8003642:	3304      	adds	r3, #4
 8003644:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	2200      	movs	r2, #0
 800364a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800364c:	78fb      	ldrb	r3, [r7, #3]
 800364e:	f003 030f 	and.w	r3, r3, #15
 8003652:	b2da      	uxtb	r2, r3
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003658:	883a      	ldrh	r2, [r7, #0]
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	78ba      	ldrb	r2, [r7, #2]
 8003662:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	785b      	ldrb	r3, [r3, #1]
 8003668:	2b00      	cmp	r3, #0
 800366a:	d004      	beq.n	8003676 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	781b      	ldrb	r3, [r3, #0]
 8003670:	b29a      	uxth	r2, r3
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003676:	78bb      	ldrb	r3, [r7, #2]
 8003678:	2b02      	cmp	r3, #2
 800367a:	d102      	bne.n	8003682 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	2200      	movs	r2, #0
 8003680:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003688:	2b01      	cmp	r3, #1
 800368a:	d101      	bne.n	8003690 <HAL_PCD_EP_Open+0xaa>
 800368c:	2302      	movs	r3, #2
 800368e:	e00e      	b.n	80036ae <HAL_PCD_EP_Open+0xc8>
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2201      	movs	r2, #1
 8003694:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	68f9      	ldr	r1, [r7, #12]
 800369e:	4618      	mov	r0, r3
 80036a0:	f003 fe0e 	bl	80072c0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2200      	movs	r2, #0
 80036a8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 80036ac:	7afb      	ldrb	r3, [r7, #11]
}
 80036ae:	4618      	mov	r0, r3
 80036b0:	3710      	adds	r7, #16
 80036b2:	46bd      	mov	sp, r7
 80036b4:	bd80      	pop	{r7, pc}

080036b6 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80036b6:	b580      	push	{r7, lr}
 80036b8:	b084      	sub	sp, #16
 80036ba:	af00      	add	r7, sp, #0
 80036bc:	6078      	str	r0, [r7, #4]
 80036be:	460b      	mov	r3, r1
 80036c0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80036c2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	da0f      	bge.n	80036ea <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80036ca:	78fb      	ldrb	r3, [r7, #3]
 80036cc:	f003 020f 	and.w	r2, r3, #15
 80036d0:	4613      	mov	r3, r2
 80036d2:	00db      	lsls	r3, r3, #3
 80036d4:	4413      	add	r3, r2
 80036d6:	009b      	lsls	r3, r3, #2
 80036d8:	3338      	adds	r3, #56	; 0x38
 80036da:	687a      	ldr	r2, [r7, #4]
 80036dc:	4413      	add	r3, r2
 80036de:	3304      	adds	r3, #4
 80036e0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	2201      	movs	r2, #1
 80036e6:	705a      	strb	r2, [r3, #1]
 80036e8:	e00f      	b.n	800370a <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80036ea:	78fb      	ldrb	r3, [r7, #3]
 80036ec:	f003 020f 	and.w	r2, r3, #15
 80036f0:	4613      	mov	r3, r2
 80036f2:	00db      	lsls	r3, r3, #3
 80036f4:	4413      	add	r3, r2
 80036f6:	009b      	lsls	r3, r3, #2
 80036f8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80036fc:	687a      	ldr	r2, [r7, #4]
 80036fe:	4413      	add	r3, r2
 8003700:	3304      	adds	r3, #4
 8003702:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	2200      	movs	r2, #0
 8003708:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800370a:	78fb      	ldrb	r3, [r7, #3]
 800370c:	f003 030f 	and.w	r3, r3, #15
 8003710:	b2da      	uxtb	r2, r3
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800371c:	2b01      	cmp	r3, #1
 800371e:	d101      	bne.n	8003724 <HAL_PCD_EP_Close+0x6e>
 8003720:	2302      	movs	r3, #2
 8003722:	e00e      	b.n	8003742 <HAL_PCD_EP_Close+0x8c>
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2201      	movs	r2, #1
 8003728:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	68f9      	ldr	r1, [r7, #12]
 8003732:	4618      	mov	r0, r3
 8003734:	f003 fe4c 	bl	80073d0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2200      	movs	r2, #0
 800373c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8003740:	2300      	movs	r3, #0
}
 8003742:	4618      	mov	r0, r3
 8003744:	3710      	adds	r7, #16
 8003746:	46bd      	mov	sp, r7
 8003748:	bd80      	pop	{r7, pc}

0800374a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800374a:	b580      	push	{r7, lr}
 800374c:	b086      	sub	sp, #24
 800374e:	af00      	add	r7, sp, #0
 8003750:	60f8      	str	r0, [r7, #12]
 8003752:	607a      	str	r2, [r7, #4]
 8003754:	603b      	str	r3, [r7, #0]
 8003756:	460b      	mov	r3, r1
 8003758:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800375a:	7afb      	ldrb	r3, [r7, #11]
 800375c:	f003 020f 	and.w	r2, r3, #15
 8003760:	4613      	mov	r3, r2
 8003762:	00db      	lsls	r3, r3, #3
 8003764:	4413      	add	r3, r2
 8003766:	009b      	lsls	r3, r3, #2
 8003768:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800376c:	68fa      	ldr	r2, [r7, #12]
 800376e:	4413      	add	r3, r2
 8003770:	3304      	adds	r3, #4
 8003772:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003774:	697b      	ldr	r3, [r7, #20]
 8003776:	687a      	ldr	r2, [r7, #4]
 8003778:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800377a:	697b      	ldr	r3, [r7, #20]
 800377c:	683a      	ldr	r2, [r7, #0]
 800377e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003780:	697b      	ldr	r3, [r7, #20]
 8003782:	2200      	movs	r2, #0
 8003784:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8003786:	697b      	ldr	r3, [r7, #20]
 8003788:	2200      	movs	r2, #0
 800378a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800378c:	7afb      	ldrb	r3, [r7, #11]
 800378e:	f003 030f 	and.w	r3, r3, #15
 8003792:	b2da      	uxtb	r2, r3
 8003794:	697b      	ldr	r3, [r7, #20]
 8003796:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	691b      	ldr	r3, [r3, #16]
 800379c:	2b01      	cmp	r3, #1
 800379e:	d102      	bne.n	80037a6 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80037a0:	687a      	ldr	r2, [r7, #4]
 80037a2:	697b      	ldr	r3, [r7, #20]
 80037a4:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80037a6:	7afb      	ldrb	r3, [r7, #11]
 80037a8:	f003 030f 	and.w	r3, r3, #15
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d109      	bne.n	80037c4 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	6818      	ldr	r0, [r3, #0]
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	691b      	ldr	r3, [r3, #16]
 80037b8:	b2db      	uxtb	r3, r3
 80037ba:	461a      	mov	r2, r3
 80037bc:	6979      	ldr	r1, [r7, #20]
 80037be:	f004 f92b 	bl	8007a18 <USB_EP0StartXfer>
 80037c2:	e008      	b.n	80037d6 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	6818      	ldr	r0, [r3, #0]
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	691b      	ldr	r3, [r3, #16]
 80037cc:	b2db      	uxtb	r3, r3
 80037ce:	461a      	mov	r2, r3
 80037d0:	6979      	ldr	r1, [r7, #20]
 80037d2:	f003 fed9 	bl	8007588 <USB_EPStartXfer>
  }

  return HAL_OK;
 80037d6:	2300      	movs	r3, #0
}
 80037d8:	4618      	mov	r0, r3
 80037da:	3718      	adds	r7, #24
 80037dc:	46bd      	mov	sp, r7
 80037de:	bd80      	pop	{r7, pc}

080037e0 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80037e0:	b480      	push	{r7}
 80037e2:	b083      	sub	sp, #12
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
 80037e8:	460b      	mov	r3, r1
 80037ea:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80037ec:	78fb      	ldrb	r3, [r7, #3]
 80037ee:	f003 020f 	and.w	r2, r3, #15
 80037f2:	6879      	ldr	r1, [r7, #4]
 80037f4:	4613      	mov	r3, r2
 80037f6:	00db      	lsls	r3, r3, #3
 80037f8:	4413      	add	r3, r2
 80037fa:	009b      	lsls	r3, r3, #2
 80037fc:	440b      	add	r3, r1
 80037fe:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8003802:	681b      	ldr	r3, [r3, #0]
}
 8003804:	4618      	mov	r0, r3
 8003806:	370c      	adds	r7, #12
 8003808:	46bd      	mov	sp, r7
 800380a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380e:	4770      	bx	lr

08003810 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003810:	b580      	push	{r7, lr}
 8003812:	b086      	sub	sp, #24
 8003814:	af00      	add	r7, sp, #0
 8003816:	60f8      	str	r0, [r7, #12]
 8003818:	607a      	str	r2, [r7, #4]
 800381a:	603b      	str	r3, [r7, #0]
 800381c:	460b      	mov	r3, r1
 800381e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003820:	7afb      	ldrb	r3, [r7, #11]
 8003822:	f003 020f 	and.w	r2, r3, #15
 8003826:	4613      	mov	r3, r2
 8003828:	00db      	lsls	r3, r3, #3
 800382a:	4413      	add	r3, r2
 800382c:	009b      	lsls	r3, r3, #2
 800382e:	3338      	adds	r3, #56	; 0x38
 8003830:	68fa      	ldr	r2, [r7, #12]
 8003832:	4413      	add	r3, r2
 8003834:	3304      	adds	r3, #4
 8003836:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003838:	697b      	ldr	r3, [r7, #20]
 800383a:	687a      	ldr	r2, [r7, #4]
 800383c:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800383e:	697b      	ldr	r3, [r7, #20]
 8003840:	683a      	ldr	r2, [r7, #0]
 8003842:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003844:	697b      	ldr	r3, [r7, #20]
 8003846:	2200      	movs	r2, #0
 8003848:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 800384a:	697b      	ldr	r3, [r7, #20]
 800384c:	2201      	movs	r2, #1
 800384e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003850:	7afb      	ldrb	r3, [r7, #11]
 8003852:	f003 030f 	and.w	r3, r3, #15
 8003856:	b2da      	uxtb	r2, r3
 8003858:	697b      	ldr	r3, [r7, #20]
 800385a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	691b      	ldr	r3, [r3, #16]
 8003860:	2b01      	cmp	r3, #1
 8003862:	d102      	bne.n	800386a <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003864:	687a      	ldr	r2, [r7, #4]
 8003866:	697b      	ldr	r3, [r7, #20]
 8003868:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800386a:	7afb      	ldrb	r3, [r7, #11]
 800386c:	f003 030f 	and.w	r3, r3, #15
 8003870:	2b00      	cmp	r3, #0
 8003872:	d109      	bne.n	8003888 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	6818      	ldr	r0, [r3, #0]
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	691b      	ldr	r3, [r3, #16]
 800387c:	b2db      	uxtb	r3, r3
 800387e:	461a      	mov	r2, r3
 8003880:	6979      	ldr	r1, [r7, #20]
 8003882:	f004 f8c9 	bl	8007a18 <USB_EP0StartXfer>
 8003886:	e008      	b.n	800389a <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	6818      	ldr	r0, [r3, #0]
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	691b      	ldr	r3, [r3, #16]
 8003890:	b2db      	uxtb	r3, r3
 8003892:	461a      	mov	r2, r3
 8003894:	6979      	ldr	r1, [r7, #20]
 8003896:	f003 fe77 	bl	8007588 <USB_EPStartXfer>
  }

  return HAL_OK;
 800389a:	2300      	movs	r3, #0
}
 800389c:	4618      	mov	r0, r3
 800389e:	3718      	adds	r7, #24
 80038a0:	46bd      	mov	sp, r7
 80038a2:	bd80      	pop	{r7, pc}

080038a4 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b084      	sub	sp, #16
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
 80038ac:	460b      	mov	r3, r1
 80038ae:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80038b0:	78fb      	ldrb	r3, [r7, #3]
 80038b2:	f003 020f 	and.w	r2, r3, #15
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	685b      	ldr	r3, [r3, #4]
 80038ba:	429a      	cmp	r2, r3
 80038bc:	d901      	bls.n	80038c2 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80038be:	2301      	movs	r3, #1
 80038c0:	e050      	b.n	8003964 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80038c2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	da0f      	bge.n	80038ea <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80038ca:	78fb      	ldrb	r3, [r7, #3]
 80038cc:	f003 020f 	and.w	r2, r3, #15
 80038d0:	4613      	mov	r3, r2
 80038d2:	00db      	lsls	r3, r3, #3
 80038d4:	4413      	add	r3, r2
 80038d6:	009b      	lsls	r3, r3, #2
 80038d8:	3338      	adds	r3, #56	; 0x38
 80038da:	687a      	ldr	r2, [r7, #4]
 80038dc:	4413      	add	r3, r2
 80038de:	3304      	adds	r3, #4
 80038e0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	2201      	movs	r2, #1
 80038e6:	705a      	strb	r2, [r3, #1]
 80038e8:	e00d      	b.n	8003906 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80038ea:	78fa      	ldrb	r2, [r7, #3]
 80038ec:	4613      	mov	r3, r2
 80038ee:	00db      	lsls	r3, r3, #3
 80038f0:	4413      	add	r3, r2
 80038f2:	009b      	lsls	r3, r3, #2
 80038f4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80038f8:	687a      	ldr	r2, [r7, #4]
 80038fa:	4413      	add	r3, r2
 80038fc:	3304      	adds	r3, #4
 80038fe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	2200      	movs	r2, #0
 8003904:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	2201      	movs	r2, #1
 800390a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800390c:	78fb      	ldrb	r3, [r7, #3]
 800390e:	f003 030f 	and.w	r3, r3, #15
 8003912:	b2da      	uxtb	r2, r3
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800391e:	2b01      	cmp	r3, #1
 8003920:	d101      	bne.n	8003926 <HAL_PCD_EP_SetStall+0x82>
 8003922:	2302      	movs	r3, #2
 8003924:	e01e      	b.n	8003964 <HAL_PCD_EP_SetStall+0xc0>
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	2201      	movs	r2, #1
 800392a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	68f9      	ldr	r1, [r7, #12]
 8003934:	4618      	mov	r0, r3
 8003936:	f004 fb07 	bl	8007f48 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800393a:	78fb      	ldrb	r3, [r7, #3]
 800393c:	f003 030f 	and.w	r3, r3, #15
 8003940:	2b00      	cmp	r3, #0
 8003942:	d10a      	bne.n	800395a <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6818      	ldr	r0, [r3, #0]
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	691b      	ldr	r3, [r3, #16]
 800394c:	b2d9      	uxtb	r1, r3
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003954:	461a      	mov	r2, r3
 8003956:	f004 fcf7 	bl	8008348 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	2200      	movs	r2, #0
 800395e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003962:	2300      	movs	r3, #0
}
 8003964:	4618      	mov	r0, r3
 8003966:	3710      	adds	r7, #16
 8003968:	46bd      	mov	sp, r7
 800396a:	bd80      	pop	{r7, pc}

0800396c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800396c:	b580      	push	{r7, lr}
 800396e:	b084      	sub	sp, #16
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
 8003974:	460b      	mov	r3, r1
 8003976:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003978:	78fb      	ldrb	r3, [r7, #3]
 800397a:	f003 020f 	and.w	r2, r3, #15
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	685b      	ldr	r3, [r3, #4]
 8003982:	429a      	cmp	r2, r3
 8003984:	d901      	bls.n	800398a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003986:	2301      	movs	r3, #1
 8003988:	e042      	b.n	8003a10 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800398a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800398e:	2b00      	cmp	r3, #0
 8003990:	da0f      	bge.n	80039b2 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003992:	78fb      	ldrb	r3, [r7, #3]
 8003994:	f003 020f 	and.w	r2, r3, #15
 8003998:	4613      	mov	r3, r2
 800399a:	00db      	lsls	r3, r3, #3
 800399c:	4413      	add	r3, r2
 800399e:	009b      	lsls	r3, r3, #2
 80039a0:	3338      	adds	r3, #56	; 0x38
 80039a2:	687a      	ldr	r2, [r7, #4]
 80039a4:	4413      	add	r3, r2
 80039a6:	3304      	adds	r3, #4
 80039a8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	2201      	movs	r2, #1
 80039ae:	705a      	strb	r2, [r3, #1]
 80039b0:	e00f      	b.n	80039d2 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80039b2:	78fb      	ldrb	r3, [r7, #3]
 80039b4:	f003 020f 	and.w	r2, r3, #15
 80039b8:	4613      	mov	r3, r2
 80039ba:	00db      	lsls	r3, r3, #3
 80039bc:	4413      	add	r3, r2
 80039be:	009b      	lsls	r3, r3, #2
 80039c0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80039c4:	687a      	ldr	r2, [r7, #4]
 80039c6:	4413      	add	r3, r2
 80039c8:	3304      	adds	r3, #4
 80039ca:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	2200      	movs	r2, #0
 80039d0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	2200      	movs	r2, #0
 80039d6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80039d8:	78fb      	ldrb	r3, [r7, #3]
 80039da:	f003 030f 	and.w	r3, r3, #15
 80039de:	b2da      	uxtb	r2, r3
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80039ea:	2b01      	cmp	r3, #1
 80039ec:	d101      	bne.n	80039f2 <HAL_PCD_EP_ClrStall+0x86>
 80039ee:	2302      	movs	r3, #2
 80039f0:	e00e      	b.n	8003a10 <HAL_PCD_EP_ClrStall+0xa4>
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	2201      	movs	r2, #1
 80039f6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	68f9      	ldr	r1, [r7, #12]
 8003a00:	4618      	mov	r0, r3
 8003a02:	f004 fb0f 	bl	8008024 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	2200      	movs	r2, #0
 8003a0a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003a0e:	2300      	movs	r3, #0
}
 8003a10:	4618      	mov	r0, r3
 8003a12:	3710      	adds	r7, #16
 8003a14:	46bd      	mov	sp, r7
 8003a16:	bd80      	pop	{r7, pc}

08003a18 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b084      	sub	sp, #16
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
 8003a20:	460b      	mov	r3, r1
 8003a22:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003a24:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	da0c      	bge.n	8003a46 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003a2c:	78fb      	ldrb	r3, [r7, #3]
 8003a2e:	f003 020f 	and.w	r2, r3, #15
 8003a32:	4613      	mov	r3, r2
 8003a34:	00db      	lsls	r3, r3, #3
 8003a36:	4413      	add	r3, r2
 8003a38:	009b      	lsls	r3, r3, #2
 8003a3a:	3338      	adds	r3, #56	; 0x38
 8003a3c:	687a      	ldr	r2, [r7, #4]
 8003a3e:	4413      	add	r3, r2
 8003a40:	3304      	adds	r3, #4
 8003a42:	60fb      	str	r3, [r7, #12]
 8003a44:	e00c      	b.n	8003a60 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003a46:	78fb      	ldrb	r3, [r7, #3]
 8003a48:	f003 020f 	and.w	r2, r3, #15
 8003a4c:	4613      	mov	r3, r2
 8003a4e:	00db      	lsls	r3, r3, #3
 8003a50:	4413      	add	r3, r2
 8003a52:	009b      	lsls	r3, r3, #2
 8003a54:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003a58:	687a      	ldr	r2, [r7, #4]
 8003a5a:	4413      	add	r3, r2
 8003a5c:	3304      	adds	r3, #4
 8003a5e:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	68f9      	ldr	r1, [r7, #12]
 8003a66:	4618      	mov	r0, r3
 8003a68:	f004 f92e 	bl	8007cc8 <USB_EPStopXfer>
 8003a6c:	4603      	mov	r3, r0
 8003a6e:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003a70:	7afb      	ldrb	r3, [r7, #11]
}
 8003a72:	4618      	mov	r0, r3
 8003a74:	3710      	adds	r7, #16
 8003a76:	46bd      	mov	sp, r7
 8003a78:	bd80      	pop	{r7, pc}

08003a7a <HAL_PCD_EP_Flush>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Flush(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003a7a:	b580      	push	{r7, lr}
 8003a7c:	b082      	sub	sp, #8
 8003a7e:	af00      	add	r7, sp, #0
 8003a80:	6078      	str	r0, [r7, #4]
 8003a82:	460b      	mov	r3, r1
 8003a84:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003a8c:	2b01      	cmp	r3, #1
 8003a8e:	d101      	bne.n	8003a94 <HAL_PCD_EP_Flush+0x1a>
 8003a90:	2302      	movs	r3, #2
 8003a92:	e01b      	b.n	8003acc <HAL_PCD_EP_Flush+0x52>
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2201      	movs	r2, #1
 8003a98:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((ep_addr & 0x80U) == 0x80U)
 8003a9c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	da09      	bge.n	8003ab8 <HAL_PCD_EP_Flush+0x3e>
  {
    (void)USB_FlushTxFifo(hpcd->Instance, (uint32_t)ep_addr & EP_ADDR_MSK);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681a      	ldr	r2, [r3, #0]
 8003aa8:	78fb      	ldrb	r3, [r7, #3]
 8003aaa:	f003 030f 	and.w	r3, r3, #15
 8003aae:	4619      	mov	r1, r3
 8003ab0:	4610      	mov	r0, r2
 8003ab2:	f003 fb63 	bl	800717c <USB_FlushTxFifo>
 8003ab6:	e004      	b.n	8003ac2 <HAL_PCD_EP_Flush+0x48>
  }
  else
  {
    (void)USB_FlushRxFifo(hpcd->Instance);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	4618      	mov	r0, r3
 8003abe:	f003 fb91 	bl	80071e4 <USB_FlushRxFifo>
  }

  __HAL_UNLOCK(hpcd);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003aca:	2300      	movs	r3, #0
}
 8003acc:	4618      	mov	r0, r3
 8003ace:	3708      	adds	r7, #8
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	bd80      	pop	{r7, pc}

08003ad4 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b08a      	sub	sp, #40	; 0x28
 8003ad8:	af02      	add	r7, sp, #8
 8003ada:	6078      	str	r0, [r7, #4]
 8003adc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ae4:	697b      	ldr	r3, [r7, #20]
 8003ae6:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003ae8:	683a      	ldr	r2, [r7, #0]
 8003aea:	4613      	mov	r3, r2
 8003aec:	00db      	lsls	r3, r3, #3
 8003aee:	4413      	add	r3, r2
 8003af0:	009b      	lsls	r3, r3, #2
 8003af2:	3338      	adds	r3, #56	; 0x38
 8003af4:	687a      	ldr	r2, [r7, #4]
 8003af6:	4413      	add	r3, r2
 8003af8:	3304      	adds	r3, #4
 8003afa:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	6a1a      	ldr	r2, [r3, #32]
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	699b      	ldr	r3, [r3, #24]
 8003b04:	429a      	cmp	r2, r3
 8003b06:	d901      	bls.n	8003b0c <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003b08:	2301      	movs	r3, #1
 8003b0a:	e06c      	b.n	8003be6 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	699a      	ldr	r2, [r3, #24]
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	6a1b      	ldr	r3, [r3, #32]
 8003b14:	1ad3      	subs	r3, r2, r3
 8003b16:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	68db      	ldr	r3, [r3, #12]
 8003b1c:	69fa      	ldr	r2, [r7, #28]
 8003b1e:	429a      	cmp	r2, r3
 8003b20:	d902      	bls.n	8003b28 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	68db      	ldr	r3, [r3, #12]
 8003b26:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003b28:	69fb      	ldr	r3, [r7, #28]
 8003b2a:	3303      	adds	r3, #3
 8003b2c:	089b      	lsrs	r3, r3, #2
 8003b2e:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003b30:	e02b      	b.n	8003b8a <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	699a      	ldr	r2, [r3, #24]
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	6a1b      	ldr	r3, [r3, #32]
 8003b3a:	1ad3      	subs	r3, r2, r3
 8003b3c:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	68db      	ldr	r3, [r3, #12]
 8003b42:	69fa      	ldr	r2, [r7, #28]
 8003b44:	429a      	cmp	r2, r3
 8003b46:	d902      	bls.n	8003b4e <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	68db      	ldr	r3, [r3, #12]
 8003b4c:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003b4e:	69fb      	ldr	r3, [r7, #28]
 8003b50:	3303      	adds	r3, #3
 8003b52:	089b      	lsrs	r3, r3, #2
 8003b54:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	6919      	ldr	r1, [r3, #16]
 8003b5a:	683b      	ldr	r3, [r7, #0]
 8003b5c:	b2da      	uxtb	r2, r3
 8003b5e:	69fb      	ldr	r3, [r7, #28]
 8003b60:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003b66:	b2db      	uxtb	r3, r3
 8003b68:	9300      	str	r3, [sp, #0]
 8003b6a:	4603      	mov	r3, r0
 8003b6c:	6978      	ldr	r0, [r7, #20]
 8003b6e:	f004 f955 	bl	8007e1c <USB_WritePacket>

    ep->xfer_buff  += len;
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	691a      	ldr	r2, [r3, #16]
 8003b76:	69fb      	ldr	r3, [r7, #28]
 8003b78:	441a      	add	r2, r3
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	6a1a      	ldr	r2, [r3, #32]
 8003b82:	69fb      	ldr	r3, [r7, #28]
 8003b84:	441a      	add	r2, r3
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003b8a:	683b      	ldr	r3, [r7, #0]
 8003b8c:	015a      	lsls	r2, r3, #5
 8003b8e:	693b      	ldr	r3, [r7, #16]
 8003b90:	4413      	add	r3, r2
 8003b92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b96:	699b      	ldr	r3, [r3, #24]
 8003b98:	b29b      	uxth	r3, r3
 8003b9a:	69ba      	ldr	r2, [r7, #24]
 8003b9c:	429a      	cmp	r2, r3
 8003b9e:	d809      	bhi.n	8003bb4 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	6a1a      	ldr	r2, [r3, #32]
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003ba8:	429a      	cmp	r2, r3
 8003baa:	d203      	bcs.n	8003bb4 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	699b      	ldr	r3, [r3, #24]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d1be      	bne.n	8003b32 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	699a      	ldr	r2, [r3, #24]
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	6a1b      	ldr	r3, [r3, #32]
 8003bbc:	429a      	cmp	r2, r3
 8003bbe:	d811      	bhi.n	8003be4 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	f003 030f 	and.w	r3, r3, #15
 8003bc6:	2201      	movs	r2, #1
 8003bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8003bcc:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003bce:	693b      	ldr	r3, [r7, #16]
 8003bd0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003bd4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003bd6:	68bb      	ldr	r3, [r7, #8]
 8003bd8:	43db      	mvns	r3, r3
 8003bda:	6939      	ldr	r1, [r7, #16]
 8003bdc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003be0:	4013      	ands	r3, r2
 8003be2:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003be4:	2300      	movs	r3, #0
}
 8003be6:	4618      	mov	r0, r3
 8003be8:	3720      	adds	r7, #32
 8003bea:	46bd      	mov	sp, r7
 8003bec:	bd80      	pop	{r7, pc}
	...

08003bf0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	b088      	sub	sp, #32
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
 8003bf8:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c00:	69fb      	ldr	r3, [r7, #28]
 8003c02:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003c04:	69fb      	ldr	r3, [r7, #28]
 8003c06:	333c      	adds	r3, #60	; 0x3c
 8003c08:	3304      	adds	r3, #4
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003c0e:	683b      	ldr	r3, [r7, #0]
 8003c10:	015a      	lsls	r2, r3, #5
 8003c12:	69bb      	ldr	r3, [r7, #24]
 8003c14:	4413      	add	r3, r2
 8003c16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c1a:	689b      	ldr	r3, [r3, #8]
 8003c1c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	691b      	ldr	r3, [r3, #16]
 8003c22:	2b01      	cmp	r3, #1
 8003c24:	d17b      	bne.n	8003d1e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003c26:	693b      	ldr	r3, [r7, #16]
 8003c28:	f003 0308 	and.w	r3, r3, #8
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d015      	beq.n	8003c5c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003c30:	697b      	ldr	r3, [r7, #20]
 8003c32:	4a61      	ldr	r2, [pc, #388]	; (8003db8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003c34:	4293      	cmp	r3, r2
 8003c36:	f240 80b9 	bls.w	8003dac <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003c3a:	693b      	ldr	r3, [r7, #16]
 8003c3c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	f000 80b3 	beq.w	8003dac <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003c46:	683b      	ldr	r3, [r7, #0]
 8003c48:	015a      	lsls	r2, r3, #5
 8003c4a:	69bb      	ldr	r3, [r7, #24]
 8003c4c:	4413      	add	r3, r2
 8003c4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c52:	461a      	mov	r2, r3
 8003c54:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003c58:	6093      	str	r3, [r2, #8]
 8003c5a:	e0a7      	b.n	8003dac <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003c5c:	693b      	ldr	r3, [r7, #16]
 8003c5e:	f003 0320 	and.w	r3, r3, #32
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d009      	beq.n	8003c7a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003c66:	683b      	ldr	r3, [r7, #0]
 8003c68:	015a      	lsls	r2, r3, #5
 8003c6a:	69bb      	ldr	r3, [r7, #24]
 8003c6c:	4413      	add	r3, r2
 8003c6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c72:	461a      	mov	r2, r3
 8003c74:	2320      	movs	r3, #32
 8003c76:	6093      	str	r3, [r2, #8]
 8003c78:	e098      	b.n	8003dac <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003c7a:	693b      	ldr	r3, [r7, #16]
 8003c7c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	f040 8093 	bne.w	8003dac <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003c86:	697b      	ldr	r3, [r7, #20]
 8003c88:	4a4b      	ldr	r2, [pc, #300]	; (8003db8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003c8a:	4293      	cmp	r3, r2
 8003c8c:	d90f      	bls.n	8003cae <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003c8e:	693b      	ldr	r3, [r7, #16]
 8003c90:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d00a      	beq.n	8003cae <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003c98:	683b      	ldr	r3, [r7, #0]
 8003c9a:	015a      	lsls	r2, r3, #5
 8003c9c:	69bb      	ldr	r3, [r7, #24]
 8003c9e:	4413      	add	r3, r2
 8003ca0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ca4:	461a      	mov	r2, r3
 8003ca6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003caa:	6093      	str	r3, [r2, #8]
 8003cac:	e07e      	b.n	8003dac <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8003cae:	683a      	ldr	r2, [r7, #0]
 8003cb0:	4613      	mov	r3, r2
 8003cb2:	00db      	lsls	r3, r3, #3
 8003cb4:	4413      	add	r3, r2
 8003cb6:	009b      	lsls	r3, r3, #2
 8003cb8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003cbc:	687a      	ldr	r2, [r7, #4]
 8003cbe:	4413      	add	r3, r2
 8003cc0:	3304      	adds	r3, #4
 8003cc2:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	69da      	ldr	r2, [r3, #28]
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	0159      	lsls	r1, r3, #5
 8003ccc:	69bb      	ldr	r3, [r7, #24]
 8003cce:	440b      	add	r3, r1
 8003cd0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cd4:	691b      	ldr	r3, [r3, #16]
 8003cd6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003cda:	1ad2      	subs	r2, r2, r3
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8003ce0:	683b      	ldr	r3, [r7, #0]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d114      	bne.n	8003d10 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	699b      	ldr	r3, [r3, #24]
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d109      	bne.n	8003d02 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6818      	ldr	r0, [r3, #0]
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003cf8:	461a      	mov	r2, r3
 8003cfa:	2101      	movs	r1, #1
 8003cfc:	f004 fb24 	bl	8008348 <USB_EP0_OutStart>
 8003d00:	e006      	b.n	8003d10 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	691a      	ldr	r2, [r3, #16]
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	6a1b      	ldr	r3, [r3, #32]
 8003d0a:	441a      	add	r2, r3
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003d10:	683b      	ldr	r3, [r7, #0]
 8003d12:	b2db      	uxtb	r3, r3
 8003d14:	4619      	mov	r1, r3
 8003d16:	6878      	ldr	r0, [r7, #4]
 8003d18:	f008 f968 	bl	800bfec <HAL_PCD_DataOutStageCallback>
 8003d1c:	e046      	b.n	8003dac <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003d1e:	697b      	ldr	r3, [r7, #20]
 8003d20:	4a26      	ldr	r2, [pc, #152]	; (8003dbc <PCD_EP_OutXfrComplete_int+0x1cc>)
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d124      	bne.n	8003d70 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003d26:	693b      	ldr	r3, [r7, #16]
 8003d28:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d00a      	beq.n	8003d46 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003d30:	683b      	ldr	r3, [r7, #0]
 8003d32:	015a      	lsls	r2, r3, #5
 8003d34:	69bb      	ldr	r3, [r7, #24]
 8003d36:	4413      	add	r3, r2
 8003d38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d3c:	461a      	mov	r2, r3
 8003d3e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003d42:	6093      	str	r3, [r2, #8]
 8003d44:	e032      	b.n	8003dac <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003d46:	693b      	ldr	r3, [r7, #16]
 8003d48:	f003 0320 	and.w	r3, r3, #32
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d008      	beq.n	8003d62 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	015a      	lsls	r2, r3, #5
 8003d54:	69bb      	ldr	r3, [r7, #24]
 8003d56:	4413      	add	r3, r2
 8003d58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d5c:	461a      	mov	r2, r3
 8003d5e:	2320      	movs	r3, #32
 8003d60:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003d62:	683b      	ldr	r3, [r7, #0]
 8003d64:	b2db      	uxtb	r3, r3
 8003d66:	4619      	mov	r1, r3
 8003d68:	6878      	ldr	r0, [r7, #4]
 8003d6a:	f008 f93f 	bl	800bfec <HAL_PCD_DataOutStageCallback>
 8003d6e:	e01d      	b.n	8003dac <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d114      	bne.n	8003da0 <PCD_EP_OutXfrComplete_int+0x1b0>
 8003d76:	6879      	ldr	r1, [r7, #4]
 8003d78:	683a      	ldr	r2, [r7, #0]
 8003d7a:	4613      	mov	r3, r2
 8003d7c:	00db      	lsls	r3, r3, #3
 8003d7e:	4413      	add	r3, r2
 8003d80:	009b      	lsls	r3, r3, #2
 8003d82:	440b      	add	r3, r1
 8003d84:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d108      	bne.n	8003da0 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6818      	ldr	r0, [r3, #0]
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003d98:	461a      	mov	r2, r3
 8003d9a:	2100      	movs	r1, #0
 8003d9c:	f004 fad4 	bl	8008348 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	b2db      	uxtb	r3, r3
 8003da4:	4619      	mov	r1, r3
 8003da6:	6878      	ldr	r0, [r7, #4]
 8003da8:	f008 f920 	bl	800bfec <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003dac:	2300      	movs	r3, #0
}
 8003dae:	4618      	mov	r0, r3
 8003db0:	3720      	adds	r7, #32
 8003db2:	46bd      	mov	sp, r7
 8003db4:	bd80      	pop	{r7, pc}
 8003db6:	bf00      	nop
 8003db8:	4f54300a 	.word	0x4f54300a
 8003dbc:	4f54310a 	.word	0x4f54310a

08003dc0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	b086      	sub	sp, #24
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
 8003dc8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003dd0:	697b      	ldr	r3, [r7, #20]
 8003dd2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003dd4:	697b      	ldr	r3, [r7, #20]
 8003dd6:	333c      	adds	r3, #60	; 0x3c
 8003dd8:	3304      	adds	r3, #4
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003dde:	683b      	ldr	r3, [r7, #0]
 8003de0:	015a      	lsls	r2, r3, #5
 8003de2:	693b      	ldr	r3, [r7, #16]
 8003de4:	4413      	add	r3, r2
 8003de6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003dea:	689b      	ldr	r3, [r3, #8]
 8003dec:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	4a15      	ldr	r2, [pc, #84]	; (8003e48 <PCD_EP_OutSetupPacket_int+0x88>)
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d90e      	bls.n	8003e14 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003df6:	68bb      	ldr	r3, [r7, #8]
 8003df8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d009      	beq.n	8003e14 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	015a      	lsls	r2, r3, #5
 8003e04:	693b      	ldr	r3, [r7, #16]
 8003e06:	4413      	add	r3, r2
 8003e08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e0c:	461a      	mov	r2, r3
 8003e0e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003e12:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003e14:	6878      	ldr	r0, [r7, #4]
 8003e16:	f008 f8d7 	bl	800bfc8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	4a0a      	ldr	r2, [pc, #40]	; (8003e48 <PCD_EP_OutSetupPacket_int+0x88>)
 8003e1e:	4293      	cmp	r3, r2
 8003e20:	d90c      	bls.n	8003e3c <PCD_EP_OutSetupPacket_int+0x7c>
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	691b      	ldr	r3, [r3, #16]
 8003e26:	2b01      	cmp	r3, #1
 8003e28:	d108      	bne.n	8003e3c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6818      	ldr	r0, [r3, #0]
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003e34:	461a      	mov	r2, r3
 8003e36:	2101      	movs	r1, #1
 8003e38:	f004 fa86 	bl	8008348 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003e3c:	2300      	movs	r3, #0
}
 8003e3e:	4618      	mov	r0, r3
 8003e40:	3718      	adds	r7, #24
 8003e42:	46bd      	mov	sp, r7
 8003e44:	bd80      	pop	{r7, pc}
 8003e46:	bf00      	nop
 8003e48:	4f54300a 	.word	0x4f54300a

08003e4c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003e4c:	b480      	push	{r7}
 8003e4e:	b085      	sub	sp, #20
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
 8003e54:	460b      	mov	r3, r1
 8003e56:	70fb      	strb	r3, [r7, #3]
 8003e58:	4613      	mov	r3, r2
 8003e5a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e62:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003e64:	78fb      	ldrb	r3, [r7, #3]
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d107      	bne.n	8003e7a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003e6a:	883b      	ldrh	r3, [r7, #0]
 8003e6c:	0419      	lsls	r1, r3, #16
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	68ba      	ldr	r2, [r7, #8]
 8003e74:	430a      	orrs	r2, r1
 8003e76:	629a      	str	r2, [r3, #40]	; 0x28
 8003e78:	e028      	b.n	8003ecc <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e80:	0c1b      	lsrs	r3, r3, #16
 8003e82:	68ba      	ldr	r2, [r7, #8]
 8003e84:	4413      	add	r3, r2
 8003e86:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003e88:	2300      	movs	r3, #0
 8003e8a:	73fb      	strb	r3, [r7, #15]
 8003e8c:	e00d      	b.n	8003eaa <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681a      	ldr	r2, [r3, #0]
 8003e92:	7bfb      	ldrb	r3, [r7, #15]
 8003e94:	3340      	adds	r3, #64	; 0x40
 8003e96:	009b      	lsls	r3, r3, #2
 8003e98:	4413      	add	r3, r2
 8003e9a:	685b      	ldr	r3, [r3, #4]
 8003e9c:	0c1b      	lsrs	r3, r3, #16
 8003e9e:	68ba      	ldr	r2, [r7, #8]
 8003ea0:	4413      	add	r3, r2
 8003ea2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003ea4:	7bfb      	ldrb	r3, [r7, #15]
 8003ea6:	3301      	adds	r3, #1
 8003ea8:	73fb      	strb	r3, [r7, #15]
 8003eaa:	7bfa      	ldrb	r2, [r7, #15]
 8003eac:	78fb      	ldrb	r3, [r7, #3]
 8003eae:	3b01      	subs	r3, #1
 8003eb0:	429a      	cmp	r2, r3
 8003eb2:	d3ec      	bcc.n	8003e8e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003eb4:	883b      	ldrh	r3, [r7, #0]
 8003eb6:	0418      	lsls	r0, r3, #16
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	6819      	ldr	r1, [r3, #0]
 8003ebc:	78fb      	ldrb	r3, [r7, #3]
 8003ebe:	3b01      	subs	r3, #1
 8003ec0:	68ba      	ldr	r2, [r7, #8]
 8003ec2:	4302      	orrs	r2, r0
 8003ec4:	3340      	adds	r3, #64	; 0x40
 8003ec6:	009b      	lsls	r3, r3, #2
 8003ec8:	440b      	add	r3, r1
 8003eca:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003ecc:	2300      	movs	r3, #0
}
 8003ece:	4618      	mov	r0, r3
 8003ed0:	3714      	adds	r7, #20
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed8:	4770      	bx	lr

08003eda <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003eda:	b480      	push	{r7}
 8003edc:	b083      	sub	sp, #12
 8003ede:	af00      	add	r7, sp, #0
 8003ee0:	6078      	str	r0, [r7, #4]
 8003ee2:	460b      	mov	r3, r1
 8003ee4:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	887a      	ldrh	r2, [r7, #2]
 8003eec:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003eee:	2300      	movs	r3, #0
}
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	370c      	adds	r7, #12
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efa:	4770      	bx	lr

08003efc <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003efc:	b480      	push	{r7}
 8003efe:	b083      	sub	sp, #12
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
 8003f04:	460b      	mov	r3, r1
 8003f06:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003f08:	bf00      	nop
 8003f0a:	370c      	adds	r7, #12
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f12:	4770      	bx	lr

08003f14 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	b086      	sub	sp, #24
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d101      	bne.n	8003f26 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003f22:	2301      	movs	r3, #1
 8003f24:	e267      	b.n	80043f6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f003 0301 	and.w	r3, r3, #1
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d075      	beq.n	800401e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003f32:	4b88      	ldr	r3, [pc, #544]	; (8004154 <HAL_RCC_OscConfig+0x240>)
 8003f34:	689b      	ldr	r3, [r3, #8]
 8003f36:	f003 030c 	and.w	r3, r3, #12
 8003f3a:	2b04      	cmp	r3, #4
 8003f3c:	d00c      	beq.n	8003f58 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003f3e:	4b85      	ldr	r3, [pc, #532]	; (8004154 <HAL_RCC_OscConfig+0x240>)
 8003f40:	689b      	ldr	r3, [r3, #8]
 8003f42:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003f46:	2b08      	cmp	r3, #8
 8003f48:	d112      	bne.n	8003f70 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003f4a:	4b82      	ldr	r3, [pc, #520]	; (8004154 <HAL_RCC_OscConfig+0x240>)
 8003f4c:	685b      	ldr	r3, [r3, #4]
 8003f4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f52:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003f56:	d10b      	bne.n	8003f70 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f58:	4b7e      	ldr	r3, [pc, #504]	; (8004154 <HAL_RCC_OscConfig+0x240>)
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d05b      	beq.n	800401c <HAL_RCC_OscConfig+0x108>
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	685b      	ldr	r3, [r3, #4]
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d157      	bne.n	800401c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003f6c:	2301      	movs	r3, #1
 8003f6e:	e242      	b.n	80043f6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	685b      	ldr	r3, [r3, #4]
 8003f74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f78:	d106      	bne.n	8003f88 <HAL_RCC_OscConfig+0x74>
 8003f7a:	4b76      	ldr	r3, [pc, #472]	; (8004154 <HAL_RCC_OscConfig+0x240>)
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	4a75      	ldr	r2, [pc, #468]	; (8004154 <HAL_RCC_OscConfig+0x240>)
 8003f80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f84:	6013      	str	r3, [r2, #0]
 8003f86:	e01d      	b.n	8003fc4 <HAL_RCC_OscConfig+0xb0>
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	685b      	ldr	r3, [r3, #4]
 8003f8c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003f90:	d10c      	bne.n	8003fac <HAL_RCC_OscConfig+0x98>
 8003f92:	4b70      	ldr	r3, [pc, #448]	; (8004154 <HAL_RCC_OscConfig+0x240>)
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	4a6f      	ldr	r2, [pc, #444]	; (8004154 <HAL_RCC_OscConfig+0x240>)
 8003f98:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003f9c:	6013      	str	r3, [r2, #0]
 8003f9e:	4b6d      	ldr	r3, [pc, #436]	; (8004154 <HAL_RCC_OscConfig+0x240>)
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	4a6c      	ldr	r2, [pc, #432]	; (8004154 <HAL_RCC_OscConfig+0x240>)
 8003fa4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fa8:	6013      	str	r3, [r2, #0]
 8003faa:	e00b      	b.n	8003fc4 <HAL_RCC_OscConfig+0xb0>
 8003fac:	4b69      	ldr	r3, [pc, #420]	; (8004154 <HAL_RCC_OscConfig+0x240>)
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	4a68      	ldr	r2, [pc, #416]	; (8004154 <HAL_RCC_OscConfig+0x240>)
 8003fb2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003fb6:	6013      	str	r3, [r2, #0]
 8003fb8:	4b66      	ldr	r3, [pc, #408]	; (8004154 <HAL_RCC_OscConfig+0x240>)
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	4a65      	ldr	r2, [pc, #404]	; (8004154 <HAL_RCC_OscConfig+0x240>)
 8003fbe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003fc2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	685b      	ldr	r3, [r3, #4]
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d013      	beq.n	8003ff4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fcc:	f7fd fda2 	bl	8001b14 <HAL_GetTick>
 8003fd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003fd2:	e008      	b.n	8003fe6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003fd4:	f7fd fd9e 	bl	8001b14 <HAL_GetTick>
 8003fd8:	4602      	mov	r2, r0
 8003fda:	693b      	ldr	r3, [r7, #16]
 8003fdc:	1ad3      	subs	r3, r2, r3
 8003fde:	2b64      	cmp	r3, #100	; 0x64
 8003fe0:	d901      	bls.n	8003fe6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003fe2:	2303      	movs	r3, #3
 8003fe4:	e207      	b.n	80043f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003fe6:	4b5b      	ldr	r3, [pc, #364]	; (8004154 <HAL_RCC_OscConfig+0x240>)
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d0f0      	beq.n	8003fd4 <HAL_RCC_OscConfig+0xc0>
 8003ff2:	e014      	b.n	800401e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ff4:	f7fd fd8e 	bl	8001b14 <HAL_GetTick>
 8003ff8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ffa:	e008      	b.n	800400e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003ffc:	f7fd fd8a 	bl	8001b14 <HAL_GetTick>
 8004000:	4602      	mov	r2, r0
 8004002:	693b      	ldr	r3, [r7, #16]
 8004004:	1ad3      	subs	r3, r2, r3
 8004006:	2b64      	cmp	r3, #100	; 0x64
 8004008:	d901      	bls.n	800400e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800400a:	2303      	movs	r3, #3
 800400c:	e1f3      	b.n	80043f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800400e:	4b51      	ldr	r3, [pc, #324]	; (8004154 <HAL_RCC_OscConfig+0x240>)
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004016:	2b00      	cmp	r3, #0
 8004018:	d1f0      	bne.n	8003ffc <HAL_RCC_OscConfig+0xe8>
 800401a:	e000      	b.n	800401e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800401c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f003 0302 	and.w	r3, r3, #2
 8004026:	2b00      	cmp	r3, #0
 8004028:	d063      	beq.n	80040f2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800402a:	4b4a      	ldr	r3, [pc, #296]	; (8004154 <HAL_RCC_OscConfig+0x240>)
 800402c:	689b      	ldr	r3, [r3, #8]
 800402e:	f003 030c 	and.w	r3, r3, #12
 8004032:	2b00      	cmp	r3, #0
 8004034:	d00b      	beq.n	800404e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004036:	4b47      	ldr	r3, [pc, #284]	; (8004154 <HAL_RCC_OscConfig+0x240>)
 8004038:	689b      	ldr	r3, [r3, #8]
 800403a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800403e:	2b08      	cmp	r3, #8
 8004040:	d11c      	bne.n	800407c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004042:	4b44      	ldr	r3, [pc, #272]	; (8004154 <HAL_RCC_OscConfig+0x240>)
 8004044:	685b      	ldr	r3, [r3, #4]
 8004046:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800404a:	2b00      	cmp	r3, #0
 800404c:	d116      	bne.n	800407c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800404e:	4b41      	ldr	r3, [pc, #260]	; (8004154 <HAL_RCC_OscConfig+0x240>)
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f003 0302 	and.w	r3, r3, #2
 8004056:	2b00      	cmp	r3, #0
 8004058:	d005      	beq.n	8004066 <HAL_RCC_OscConfig+0x152>
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	68db      	ldr	r3, [r3, #12]
 800405e:	2b01      	cmp	r3, #1
 8004060:	d001      	beq.n	8004066 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004062:	2301      	movs	r3, #1
 8004064:	e1c7      	b.n	80043f6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004066:	4b3b      	ldr	r3, [pc, #236]	; (8004154 <HAL_RCC_OscConfig+0x240>)
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	691b      	ldr	r3, [r3, #16]
 8004072:	00db      	lsls	r3, r3, #3
 8004074:	4937      	ldr	r1, [pc, #220]	; (8004154 <HAL_RCC_OscConfig+0x240>)
 8004076:	4313      	orrs	r3, r2
 8004078:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800407a:	e03a      	b.n	80040f2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	68db      	ldr	r3, [r3, #12]
 8004080:	2b00      	cmp	r3, #0
 8004082:	d020      	beq.n	80040c6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004084:	4b34      	ldr	r3, [pc, #208]	; (8004158 <HAL_RCC_OscConfig+0x244>)
 8004086:	2201      	movs	r2, #1
 8004088:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800408a:	f7fd fd43 	bl	8001b14 <HAL_GetTick>
 800408e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004090:	e008      	b.n	80040a4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004092:	f7fd fd3f 	bl	8001b14 <HAL_GetTick>
 8004096:	4602      	mov	r2, r0
 8004098:	693b      	ldr	r3, [r7, #16]
 800409a:	1ad3      	subs	r3, r2, r3
 800409c:	2b02      	cmp	r3, #2
 800409e:	d901      	bls.n	80040a4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80040a0:	2303      	movs	r3, #3
 80040a2:	e1a8      	b.n	80043f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040a4:	4b2b      	ldr	r3, [pc, #172]	; (8004154 <HAL_RCC_OscConfig+0x240>)
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f003 0302 	and.w	r3, r3, #2
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d0f0      	beq.n	8004092 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040b0:	4b28      	ldr	r3, [pc, #160]	; (8004154 <HAL_RCC_OscConfig+0x240>)
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	691b      	ldr	r3, [r3, #16]
 80040bc:	00db      	lsls	r3, r3, #3
 80040be:	4925      	ldr	r1, [pc, #148]	; (8004154 <HAL_RCC_OscConfig+0x240>)
 80040c0:	4313      	orrs	r3, r2
 80040c2:	600b      	str	r3, [r1, #0]
 80040c4:	e015      	b.n	80040f2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80040c6:	4b24      	ldr	r3, [pc, #144]	; (8004158 <HAL_RCC_OscConfig+0x244>)
 80040c8:	2200      	movs	r2, #0
 80040ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040cc:	f7fd fd22 	bl	8001b14 <HAL_GetTick>
 80040d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80040d2:	e008      	b.n	80040e6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80040d4:	f7fd fd1e 	bl	8001b14 <HAL_GetTick>
 80040d8:	4602      	mov	r2, r0
 80040da:	693b      	ldr	r3, [r7, #16]
 80040dc:	1ad3      	subs	r3, r2, r3
 80040de:	2b02      	cmp	r3, #2
 80040e0:	d901      	bls.n	80040e6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80040e2:	2303      	movs	r3, #3
 80040e4:	e187      	b.n	80043f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80040e6:	4b1b      	ldr	r3, [pc, #108]	; (8004154 <HAL_RCC_OscConfig+0x240>)
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f003 0302 	and.w	r3, r3, #2
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d1f0      	bne.n	80040d4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f003 0308 	and.w	r3, r3, #8
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d036      	beq.n	800416c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	695b      	ldr	r3, [r3, #20]
 8004102:	2b00      	cmp	r3, #0
 8004104:	d016      	beq.n	8004134 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004106:	4b15      	ldr	r3, [pc, #84]	; (800415c <HAL_RCC_OscConfig+0x248>)
 8004108:	2201      	movs	r2, #1
 800410a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800410c:	f7fd fd02 	bl	8001b14 <HAL_GetTick>
 8004110:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004112:	e008      	b.n	8004126 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004114:	f7fd fcfe 	bl	8001b14 <HAL_GetTick>
 8004118:	4602      	mov	r2, r0
 800411a:	693b      	ldr	r3, [r7, #16]
 800411c:	1ad3      	subs	r3, r2, r3
 800411e:	2b02      	cmp	r3, #2
 8004120:	d901      	bls.n	8004126 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004122:	2303      	movs	r3, #3
 8004124:	e167      	b.n	80043f6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004126:	4b0b      	ldr	r3, [pc, #44]	; (8004154 <HAL_RCC_OscConfig+0x240>)
 8004128:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800412a:	f003 0302 	and.w	r3, r3, #2
 800412e:	2b00      	cmp	r3, #0
 8004130:	d0f0      	beq.n	8004114 <HAL_RCC_OscConfig+0x200>
 8004132:	e01b      	b.n	800416c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004134:	4b09      	ldr	r3, [pc, #36]	; (800415c <HAL_RCC_OscConfig+0x248>)
 8004136:	2200      	movs	r2, #0
 8004138:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800413a:	f7fd fceb 	bl	8001b14 <HAL_GetTick>
 800413e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004140:	e00e      	b.n	8004160 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004142:	f7fd fce7 	bl	8001b14 <HAL_GetTick>
 8004146:	4602      	mov	r2, r0
 8004148:	693b      	ldr	r3, [r7, #16]
 800414a:	1ad3      	subs	r3, r2, r3
 800414c:	2b02      	cmp	r3, #2
 800414e:	d907      	bls.n	8004160 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004150:	2303      	movs	r3, #3
 8004152:	e150      	b.n	80043f6 <HAL_RCC_OscConfig+0x4e2>
 8004154:	40023800 	.word	0x40023800
 8004158:	42470000 	.word	0x42470000
 800415c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004160:	4b88      	ldr	r3, [pc, #544]	; (8004384 <HAL_RCC_OscConfig+0x470>)
 8004162:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004164:	f003 0302 	and.w	r3, r3, #2
 8004168:	2b00      	cmp	r3, #0
 800416a:	d1ea      	bne.n	8004142 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f003 0304 	and.w	r3, r3, #4
 8004174:	2b00      	cmp	r3, #0
 8004176:	f000 8097 	beq.w	80042a8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800417a:	2300      	movs	r3, #0
 800417c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800417e:	4b81      	ldr	r3, [pc, #516]	; (8004384 <HAL_RCC_OscConfig+0x470>)
 8004180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004182:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004186:	2b00      	cmp	r3, #0
 8004188:	d10f      	bne.n	80041aa <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800418a:	2300      	movs	r3, #0
 800418c:	60bb      	str	r3, [r7, #8]
 800418e:	4b7d      	ldr	r3, [pc, #500]	; (8004384 <HAL_RCC_OscConfig+0x470>)
 8004190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004192:	4a7c      	ldr	r2, [pc, #496]	; (8004384 <HAL_RCC_OscConfig+0x470>)
 8004194:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004198:	6413      	str	r3, [r2, #64]	; 0x40
 800419a:	4b7a      	ldr	r3, [pc, #488]	; (8004384 <HAL_RCC_OscConfig+0x470>)
 800419c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800419e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041a2:	60bb      	str	r3, [r7, #8]
 80041a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80041a6:	2301      	movs	r3, #1
 80041a8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041aa:	4b77      	ldr	r3, [pc, #476]	; (8004388 <HAL_RCC_OscConfig+0x474>)
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d118      	bne.n	80041e8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80041b6:	4b74      	ldr	r3, [pc, #464]	; (8004388 <HAL_RCC_OscConfig+0x474>)
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	4a73      	ldr	r2, [pc, #460]	; (8004388 <HAL_RCC_OscConfig+0x474>)
 80041bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041c0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80041c2:	f7fd fca7 	bl	8001b14 <HAL_GetTick>
 80041c6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041c8:	e008      	b.n	80041dc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80041ca:	f7fd fca3 	bl	8001b14 <HAL_GetTick>
 80041ce:	4602      	mov	r2, r0
 80041d0:	693b      	ldr	r3, [r7, #16]
 80041d2:	1ad3      	subs	r3, r2, r3
 80041d4:	2b02      	cmp	r3, #2
 80041d6:	d901      	bls.n	80041dc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80041d8:	2303      	movs	r3, #3
 80041da:	e10c      	b.n	80043f6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041dc:	4b6a      	ldr	r3, [pc, #424]	; (8004388 <HAL_RCC_OscConfig+0x474>)
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d0f0      	beq.n	80041ca <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	689b      	ldr	r3, [r3, #8]
 80041ec:	2b01      	cmp	r3, #1
 80041ee:	d106      	bne.n	80041fe <HAL_RCC_OscConfig+0x2ea>
 80041f0:	4b64      	ldr	r3, [pc, #400]	; (8004384 <HAL_RCC_OscConfig+0x470>)
 80041f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041f4:	4a63      	ldr	r2, [pc, #396]	; (8004384 <HAL_RCC_OscConfig+0x470>)
 80041f6:	f043 0301 	orr.w	r3, r3, #1
 80041fa:	6713      	str	r3, [r2, #112]	; 0x70
 80041fc:	e01c      	b.n	8004238 <HAL_RCC_OscConfig+0x324>
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	689b      	ldr	r3, [r3, #8]
 8004202:	2b05      	cmp	r3, #5
 8004204:	d10c      	bne.n	8004220 <HAL_RCC_OscConfig+0x30c>
 8004206:	4b5f      	ldr	r3, [pc, #380]	; (8004384 <HAL_RCC_OscConfig+0x470>)
 8004208:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800420a:	4a5e      	ldr	r2, [pc, #376]	; (8004384 <HAL_RCC_OscConfig+0x470>)
 800420c:	f043 0304 	orr.w	r3, r3, #4
 8004210:	6713      	str	r3, [r2, #112]	; 0x70
 8004212:	4b5c      	ldr	r3, [pc, #368]	; (8004384 <HAL_RCC_OscConfig+0x470>)
 8004214:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004216:	4a5b      	ldr	r2, [pc, #364]	; (8004384 <HAL_RCC_OscConfig+0x470>)
 8004218:	f043 0301 	orr.w	r3, r3, #1
 800421c:	6713      	str	r3, [r2, #112]	; 0x70
 800421e:	e00b      	b.n	8004238 <HAL_RCC_OscConfig+0x324>
 8004220:	4b58      	ldr	r3, [pc, #352]	; (8004384 <HAL_RCC_OscConfig+0x470>)
 8004222:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004224:	4a57      	ldr	r2, [pc, #348]	; (8004384 <HAL_RCC_OscConfig+0x470>)
 8004226:	f023 0301 	bic.w	r3, r3, #1
 800422a:	6713      	str	r3, [r2, #112]	; 0x70
 800422c:	4b55      	ldr	r3, [pc, #340]	; (8004384 <HAL_RCC_OscConfig+0x470>)
 800422e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004230:	4a54      	ldr	r2, [pc, #336]	; (8004384 <HAL_RCC_OscConfig+0x470>)
 8004232:	f023 0304 	bic.w	r3, r3, #4
 8004236:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	689b      	ldr	r3, [r3, #8]
 800423c:	2b00      	cmp	r3, #0
 800423e:	d015      	beq.n	800426c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004240:	f7fd fc68 	bl	8001b14 <HAL_GetTick>
 8004244:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004246:	e00a      	b.n	800425e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004248:	f7fd fc64 	bl	8001b14 <HAL_GetTick>
 800424c:	4602      	mov	r2, r0
 800424e:	693b      	ldr	r3, [r7, #16]
 8004250:	1ad3      	subs	r3, r2, r3
 8004252:	f241 3288 	movw	r2, #5000	; 0x1388
 8004256:	4293      	cmp	r3, r2
 8004258:	d901      	bls.n	800425e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800425a:	2303      	movs	r3, #3
 800425c:	e0cb      	b.n	80043f6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800425e:	4b49      	ldr	r3, [pc, #292]	; (8004384 <HAL_RCC_OscConfig+0x470>)
 8004260:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004262:	f003 0302 	and.w	r3, r3, #2
 8004266:	2b00      	cmp	r3, #0
 8004268:	d0ee      	beq.n	8004248 <HAL_RCC_OscConfig+0x334>
 800426a:	e014      	b.n	8004296 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800426c:	f7fd fc52 	bl	8001b14 <HAL_GetTick>
 8004270:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004272:	e00a      	b.n	800428a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004274:	f7fd fc4e 	bl	8001b14 <HAL_GetTick>
 8004278:	4602      	mov	r2, r0
 800427a:	693b      	ldr	r3, [r7, #16]
 800427c:	1ad3      	subs	r3, r2, r3
 800427e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004282:	4293      	cmp	r3, r2
 8004284:	d901      	bls.n	800428a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004286:	2303      	movs	r3, #3
 8004288:	e0b5      	b.n	80043f6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800428a:	4b3e      	ldr	r3, [pc, #248]	; (8004384 <HAL_RCC_OscConfig+0x470>)
 800428c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800428e:	f003 0302 	and.w	r3, r3, #2
 8004292:	2b00      	cmp	r3, #0
 8004294:	d1ee      	bne.n	8004274 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004296:	7dfb      	ldrb	r3, [r7, #23]
 8004298:	2b01      	cmp	r3, #1
 800429a:	d105      	bne.n	80042a8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800429c:	4b39      	ldr	r3, [pc, #228]	; (8004384 <HAL_RCC_OscConfig+0x470>)
 800429e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042a0:	4a38      	ldr	r2, [pc, #224]	; (8004384 <HAL_RCC_OscConfig+0x470>)
 80042a2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80042a6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	699b      	ldr	r3, [r3, #24]
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	f000 80a1 	beq.w	80043f4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80042b2:	4b34      	ldr	r3, [pc, #208]	; (8004384 <HAL_RCC_OscConfig+0x470>)
 80042b4:	689b      	ldr	r3, [r3, #8]
 80042b6:	f003 030c 	and.w	r3, r3, #12
 80042ba:	2b08      	cmp	r3, #8
 80042bc:	d05c      	beq.n	8004378 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	699b      	ldr	r3, [r3, #24]
 80042c2:	2b02      	cmp	r3, #2
 80042c4:	d141      	bne.n	800434a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042c6:	4b31      	ldr	r3, [pc, #196]	; (800438c <HAL_RCC_OscConfig+0x478>)
 80042c8:	2200      	movs	r2, #0
 80042ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042cc:	f7fd fc22 	bl	8001b14 <HAL_GetTick>
 80042d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042d2:	e008      	b.n	80042e6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80042d4:	f7fd fc1e 	bl	8001b14 <HAL_GetTick>
 80042d8:	4602      	mov	r2, r0
 80042da:	693b      	ldr	r3, [r7, #16]
 80042dc:	1ad3      	subs	r3, r2, r3
 80042de:	2b02      	cmp	r3, #2
 80042e0:	d901      	bls.n	80042e6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80042e2:	2303      	movs	r3, #3
 80042e4:	e087      	b.n	80043f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042e6:	4b27      	ldr	r3, [pc, #156]	; (8004384 <HAL_RCC_OscConfig+0x470>)
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d1f0      	bne.n	80042d4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	69da      	ldr	r2, [r3, #28]
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6a1b      	ldr	r3, [r3, #32]
 80042fa:	431a      	orrs	r2, r3
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004300:	019b      	lsls	r3, r3, #6
 8004302:	431a      	orrs	r2, r3
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004308:	085b      	lsrs	r3, r3, #1
 800430a:	3b01      	subs	r3, #1
 800430c:	041b      	lsls	r3, r3, #16
 800430e:	431a      	orrs	r2, r3
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004314:	061b      	lsls	r3, r3, #24
 8004316:	491b      	ldr	r1, [pc, #108]	; (8004384 <HAL_RCC_OscConfig+0x470>)
 8004318:	4313      	orrs	r3, r2
 800431a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800431c:	4b1b      	ldr	r3, [pc, #108]	; (800438c <HAL_RCC_OscConfig+0x478>)
 800431e:	2201      	movs	r2, #1
 8004320:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004322:	f7fd fbf7 	bl	8001b14 <HAL_GetTick>
 8004326:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004328:	e008      	b.n	800433c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800432a:	f7fd fbf3 	bl	8001b14 <HAL_GetTick>
 800432e:	4602      	mov	r2, r0
 8004330:	693b      	ldr	r3, [r7, #16]
 8004332:	1ad3      	subs	r3, r2, r3
 8004334:	2b02      	cmp	r3, #2
 8004336:	d901      	bls.n	800433c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004338:	2303      	movs	r3, #3
 800433a:	e05c      	b.n	80043f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800433c:	4b11      	ldr	r3, [pc, #68]	; (8004384 <HAL_RCC_OscConfig+0x470>)
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004344:	2b00      	cmp	r3, #0
 8004346:	d0f0      	beq.n	800432a <HAL_RCC_OscConfig+0x416>
 8004348:	e054      	b.n	80043f4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800434a:	4b10      	ldr	r3, [pc, #64]	; (800438c <HAL_RCC_OscConfig+0x478>)
 800434c:	2200      	movs	r2, #0
 800434e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004350:	f7fd fbe0 	bl	8001b14 <HAL_GetTick>
 8004354:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004356:	e008      	b.n	800436a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004358:	f7fd fbdc 	bl	8001b14 <HAL_GetTick>
 800435c:	4602      	mov	r2, r0
 800435e:	693b      	ldr	r3, [r7, #16]
 8004360:	1ad3      	subs	r3, r2, r3
 8004362:	2b02      	cmp	r3, #2
 8004364:	d901      	bls.n	800436a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004366:	2303      	movs	r3, #3
 8004368:	e045      	b.n	80043f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800436a:	4b06      	ldr	r3, [pc, #24]	; (8004384 <HAL_RCC_OscConfig+0x470>)
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004372:	2b00      	cmp	r3, #0
 8004374:	d1f0      	bne.n	8004358 <HAL_RCC_OscConfig+0x444>
 8004376:	e03d      	b.n	80043f4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	699b      	ldr	r3, [r3, #24]
 800437c:	2b01      	cmp	r3, #1
 800437e:	d107      	bne.n	8004390 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004380:	2301      	movs	r3, #1
 8004382:	e038      	b.n	80043f6 <HAL_RCC_OscConfig+0x4e2>
 8004384:	40023800 	.word	0x40023800
 8004388:	40007000 	.word	0x40007000
 800438c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004390:	4b1b      	ldr	r3, [pc, #108]	; (8004400 <HAL_RCC_OscConfig+0x4ec>)
 8004392:	685b      	ldr	r3, [r3, #4]
 8004394:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	699b      	ldr	r3, [r3, #24]
 800439a:	2b01      	cmp	r3, #1
 800439c:	d028      	beq.n	80043f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80043a8:	429a      	cmp	r2, r3
 80043aa:	d121      	bne.n	80043f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80043b6:	429a      	cmp	r2, r3
 80043b8:	d11a      	bne.n	80043f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80043ba:	68fa      	ldr	r2, [r7, #12]
 80043bc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80043c0:	4013      	ands	r3, r2
 80043c2:	687a      	ldr	r2, [r7, #4]
 80043c4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80043c6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80043c8:	4293      	cmp	r3, r2
 80043ca:	d111      	bne.n	80043f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043d6:	085b      	lsrs	r3, r3, #1
 80043d8:	3b01      	subs	r3, #1
 80043da:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80043dc:	429a      	cmp	r2, r3
 80043de:	d107      	bne.n	80043f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043ea:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80043ec:	429a      	cmp	r2, r3
 80043ee:	d001      	beq.n	80043f4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80043f0:	2301      	movs	r3, #1
 80043f2:	e000      	b.n	80043f6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80043f4:	2300      	movs	r3, #0
}
 80043f6:	4618      	mov	r0, r3
 80043f8:	3718      	adds	r7, #24
 80043fa:	46bd      	mov	sp, r7
 80043fc:	bd80      	pop	{r7, pc}
 80043fe:	bf00      	nop
 8004400:	40023800 	.word	0x40023800

08004404 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004404:	b580      	push	{r7, lr}
 8004406:	b084      	sub	sp, #16
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
 800440c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	2b00      	cmp	r3, #0
 8004412:	d101      	bne.n	8004418 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004414:	2301      	movs	r3, #1
 8004416:	e0cc      	b.n	80045b2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004418:	4b68      	ldr	r3, [pc, #416]	; (80045bc <HAL_RCC_ClockConfig+0x1b8>)
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f003 0307 	and.w	r3, r3, #7
 8004420:	683a      	ldr	r2, [r7, #0]
 8004422:	429a      	cmp	r2, r3
 8004424:	d90c      	bls.n	8004440 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004426:	4b65      	ldr	r3, [pc, #404]	; (80045bc <HAL_RCC_ClockConfig+0x1b8>)
 8004428:	683a      	ldr	r2, [r7, #0]
 800442a:	b2d2      	uxtb	r2, r2
 800442c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800442e:	4b63      	ldr	r3, [pc, #396]	; (80045bc <HAL_RCC_ClockConfig+0x1b8>)
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f003 0307 	and.w	r3, r3, #7
 8004436:	683a      	ldr	r2, [r7, #0]
 8004438:	429a      	cmp	r2, r3
 800443a:	d001      	beq.n	8004440 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800443c:	2301      	movs	r3, #1
 800443e:	e0b8      	b.n	80045b2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f003 0302 	and.w	r3, r3, #2
 8004448:	2b00      	cmp	r3, #0
 800444a:	d020      	beq.n	800448e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f003 0304 	and.w	r3, r3, #4
 8004454:	2b00      	cmp	r3, #0
 8004456:	d005      	beq.n	8004464 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004458:	4b59      	ldr	r3, [pc, #356]	; (80045c0 <HAL_RCC_ClockConfig+0x1bc>)
 800445a:	689b      	ldr	r3, [r3, #8]
 800445c:	4a58      	ldr	r2, [pc, #352]	; (80045c0 <HAL_RCC_ClockConfig+0x1bc>)
 800445e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004462:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f003 0308 	and.w	r3, r3, #8
 800446c:	2b00      	cmp	r3, #0
 800446e:	d005      	beq.n	800447c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004470:	4b53      	ldr	r3, [pc, #332]	; (80045c0 <HAL_RCC_ClockConfig+0x1bc>)
 8004472:	689b      	ldr	r3, [r3, #8]
 8004474:	4a52      	ldr	r2, [pc, #328]	; (80045c0 <HAL_RCC_ClockConfig+0x1bc>)
 8004476:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800447a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800447c:	4b50      	ldr	r3, [pc, #320]	; (80045c0 <HAL_RCC_ClockConfig+0x1bc>)
 800447e:	689b      	ldr	r3, [r3, #8]
 8004480:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	689b      	ldr	r3, [r3, #8]
 8004488:	494d      	ldr	r1, [pc, #308]	; (80045c0 <HAL_RCC_ClockConfig+0x1bc>)
 800448a:	4313      	orrs	r3, r2
 800448c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f003 0301 	and.w	r3, r3, #1
 8004496:	2b00      	cmp	r3, #0
 8004498:	d044      	beq.n	8004524 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	685b      	ldr	r3, [r3, #4]
 800449e:	2b01      	cmp	r3, #1
 80044a0:	d107      	bne.n	80044b2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044a2:	4b47      	ldr	r3, [pc, #284]	; (80045c0 <HAL_RCC_ClockConfig+0x1bc>)
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d119      	bne.n	80044e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80044ae:	2301      	movs	r3, #1
 80044b0:	e07f      	b.n	80045b2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	685b      	ldr	r3, [r3, #4]
 80044b6:	2b02      	cmp	r3, #2
 80044b8:	d003      	beq.n	80044c2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80044be:	2b03      	cmp	r3, #3
 80044c0:	d107      	bne.n	80044d2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80044c2:	4b3f      	ldr	r3, [pc, #252]	; (80045c0 <HAL_RCC_ClockConfig+0x1bc>)
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d109      	bne.n	80044e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80044ce:	2301      	movs	r3, #1
 80044d0:	e06f      	b.n	80045b2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044d2:	4b3b      	ldr	r3, [pc, #236]	; (80045c0 <HAL_RCC_ClockConfig+0x1bc>)
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f003 0302 	and.w	r3, r3, #2
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d101      	bne.n	80044e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80044de:	2301      	movs	r3, #1
 80044e0:	e067      	b.n	80045b2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80044e2:	4b37      	ldr	r3, [pc, #220]	; (80045c0 <HAL_RCC_ClockConfig+0x1bc>)
 80044e4:	689b      	ldr	r3, [r3, #8]
 80044e6:	f023 0203 	bic.w	r2, r3, #3
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	685b      	ldr	r3, [r3, #4]
 80044ee:	4934      	ldr	r1, [pc, #208]	; (80045c0 <HAL_RCC_ClockConfig+0x1bc>)
 80044f0:	4313      	orrs	r3, r2
 80044f2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80044f4:	f7fd fb0e 	bl	8001b14 <HAL_GetTick>
 80044f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044fa:	e00a      	b.n	8004512 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80044fc:	f7fd fb0a 	bl	8001b14 <HAL_GetTick>
 8004500:	4602      	mov	r2, r0
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	1ad3      	subs	r3, r2, r3
 8004506:	f241 3288 	movw	r2, #5000	; 0x1388
 800450a:	4293      	cmp	r3, r2
 800450c:	d901      	bls.n	8004512 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800450e:	2303      	movs	r3, #3
 8004510:	e04f      	b.n	80045b2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004512:	4b2b      	ldr	r3, [pc, #172]	; (80045c0 <HAL_RCC_ClockConfig+0x1bc>)
 8004514:	689b      	ldr	r3, [r3, #8]
 8004516:	f003 020c 	and.w	r2, r3, #12
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	685b      	ldr	r3, [r3, #4]
 800451e:	009b      	lsls	r3, r3, #2
 8004520:	429a      	cmp	r2, r3
 8004522:	d1eb      	bne.n	80044fc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004524:	4b25      	ldr	r3, [pc, #148]	; (80045bc <HAL_RCC_ClockConfig+0x1b8>)
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f003 0307 	and.w	r3, r3, #7
 800452c:	683a      	ldr	r2, [r7, #0]
 800452e:	429a      	cmp	r2, r3
 8004530:	d20c      	bcs.n	800454c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004532:	4b22      	ldr	r3, [pc, #136]	; (80045bc <HAL_RCC_ClockConfig+0x1b8>)
 8004534:	683a      	ldr	r2, [r7, #0]
 8004536:	b2d2      	uxtb	r2, r2
 8004538:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800453a:	4b20      	ldr	r3, [pc, #128]	; (80045bc <HAL_RCC_ClockConfig+0x1b8>)
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f003 0307 	and.w	r3, r3, #7
 8004542:	683a      	ldr	r2, [r7, #0]
 8004544:	429a      	cmp	r2, r3
 8004546:	d001      	beq.n	800454c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004548:	2301      	movs	r3, #1
 800454a:	e032      	b.n	80045b2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f003 0304 	and.w	r3, r3, #4
 8004554:	2b00      	cmp	r3, #0
 8004556:	d008      	beq.n	800456a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004558:	4b19      	ldr	r3, [pc, #100]	; (80045c0 <HAL_RCC_ClockConfig+0x1bc>)
 800455a:	689b      	ldr	r3, [r3, #8]
 800455c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	68db      	ldr	r3, [r3, #12]
 8004564:	4916      	ldr	r1, [pc, #88]	; (80045c0 <HAL_RCC_ClockConfig+0x1bc>)
 8004566:	4313      	orrs	r3, r2
 8004568:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f003 0308 	and.w	r3, r3, #8
 8004572:	2b00      	cmp	r3, #0
 8004574:	d009      	beq.n	800458a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004576:	4b12      	ldr	r3, [pc, #72]	; (80045c0 <HAL_RCC_ClockConfig+0x1bc>)
 8004578:	689b      	ldr	r3, [r3, #8]
 800457a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	691b      	ldr	r3, [r3, #16]
 8004582:	00db      	lsls	r3, r3, #3
 8004584:	490e      	ldr	r1, [pc, #56]	; (80045c0 <HAL_RCC_ClockConfig+0x1bc>)
 8004586:	4313      	orrs	r3, r2
 8004588:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800458a:	f000 f821 	bl	80045d0 <HAL_RCC_GetSysClockFreq>
 800458e:	4602      	mov	r2, r0
 8004590:	4b0b      	ldr	r3, [pc, #44]	; (80045c0 <HAL_RCC_ClockConfig+0x1bc>)
 8004592:	689b      	ldr	r3, [r3, #8]
 8004594:	091b      	lsrs	r3, r3, #4
 8004596:	f003 030f 	and.w	r3, r3, #15
 800459a:	490a      	ldr	r1, [pc, #40]	; (80045c4 <HAL_RCC_ClockConfig+0x1c0>)
 800459c:	5ccb      	ldrb	r3, [r1, r3]
 800459e:	fa22 f303 	lsr.w	r3, r2, r3
 80045a2:	4a09      	ldr	r2, [pc, #36]	; (80045c8 <HAL_RCC_ClockConfig+0x1c4>)
 80045a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80045a6:	4b09      	ldr	r3, [pc, #36]	; (80045cc <HAL_RCC_ClockConfig+0x1c8>)
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	4618      	mov	r0, r3
 80045ac:	f7fd fa6e 	bl	8001a8c <HAL_InitTick>

  return HAL_OK;
 80045b0:	2300      	movs	r3, #0
}
 80045b2:	4618      	mov	r0, r3
 80045b4:	3710      	adds	r7, #16
 80045b6:	46bd      	mov	sp, r7
 80045b8:	bd80      	pop	{r7, pc}
 80045ba:	bf00      	nop
 80045bc:	40023c00 	.word	0x40023c00
 80045c0:	40023800 	.word	0x40023800
 80045c4:	0800c654 	.word	0x0800c654
 80045c8:	20000004 	.word	0x20000004
 80045cc:	20000008 	.word	0x20000008

080045d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80045d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80045d4:	b090      	sub	sp, #64	; 0x40
 80045d6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80045d8:	2300      	movs	r3, #0
 80045da:	637b      	str	r3, [r7, #52]	; 0x34
 80045dc:	2300      	movs	r3, #0
 80045de:	63fb      	str	r3, [r7, #60]	; 0x3c
 80045e0:	2300      	movs	r3, #0
 80045e2:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80045e4:	2300      	movs	r3, #0
 80045e6:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80045e8:	4b59      	ldr	r3, [pc, #356]	; (8004750 <HAL_RCC_GetSysClockFreq+0x180>)
 80045ea:	689b      	ldr	r3, [r3, #8]
 80045ec:	f003 030c 	and.w	r3, r3, #12
 80045f0:	2b08      	cmp	r3, #8
 80045f2:	d00d      	beq.n	8004610 <HAL_RCC_GetSysClockFreq+0x40>
 80045f4:	2b08      	cmp	r3, #8
 80045f6:	f200 80a1 	bhi.w	800473c <HAL_RCC_GetSysClockFreq+0x16c>
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d002      	beq.n	8004604 <HAL_RCC_GetSysClockFreq+0x34>
 80045fe:	2b04      	cmp	r3, #4
 8004600:	d003      	beq.n	800460a <HAL_RCC_GetSysClockFreq+0x3a>
 8004602:	e09b      	b.n	800473c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004604:	4b53      	ldr	r3, [pc, #332]	; (8004754 <HAL_RCC_GetSysClockFreq+0x184>)
 8004606:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8004608:	e09b      	b.n	8004742 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800460a:	4b53      	ldr	r3, [pc, #332]	; (8004758 <HAL_RCC_GetSysClockFreq+0x188>)
 800460c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800460e:	e098      	b.n	8004742 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004610:	4b4f      	ldr	r3, [pc, #316]	; (8004750 <HAL_RCC_GetSysClockFreq+0x180>)
 8004612:	685b      	ldr	r3, [r3, #4]
 8004614:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004618:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800461a:	4b4d      	ldr	r3, [pc, #308]	; (8004750 <HAL_RCC_GetSysClockFreq+0x180>)
 800461c:	685b      	ldr	r3, [r3, #4]
 800461e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004622:	2b00      	cmp	r3, #0
 8004624:	d028      	beq.n	8004678 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004626:	4b4a      	ldr	r3, [pc, #296]	; (8004750 <HAL_RCC_GetSysClockFreq+0x180>)
 8004628:	685b      	ldr	r3, [r3, #4]
 800462a:	099b      	lsrs	r3, r3, #6
 800462c:	2200      	movs	r2, #0
 800462e:	623b      	str	r3, [r7, #32]
 8004630:	627a      	str	r2, [r7, #36]	; 0x24
 8004632:	6a3b      	ldr	r3, [r7, #32]
 8004634:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004638:	2100      	movs	r1, #0
 800463a:	4b47      	ldr	r3, [pc, #284]	; (8004758 <HAL_RCC_GetSysClockFreq+0x188>)
 800463c:	fb03 f201 	mul.w	r2, r3, r1
 8004640:	2300      	movs	r3, #0
 8004642:	fb00 f303 	mul.w	r3, r0, r3
 8004646:	4413      	add	r3, r2
 8004648:	4a43      	ldr	r2, [pc, #268]	; (8004758 <HAL_RCC_GetSysClockFreq+0x188>)
 800464a:	fba0 1202 	umull	r1, r2, r0, r2
 800464e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004650:	460a      	mov	r2, r1
 8004652:	62ba      	str	r2, [r7, #40]	; 0x28
 8004654:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004656:	4413      	add	r3, r2
 8004658:	62fb      	str	r3, [r7, #44]	; 0x2c
 800465a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800465c:	2200      	movs	r2, #0
 800465e:	61bb      	str	r3, [r7, #24]
 8004660:	61fa      	str	r2, [r7, #28]
 8004662:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004666:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800466a:	f7fb fdb3 	bl	80001d4 <__aeabi_uldivmod>
 800466e:	4602      	mov	r2, r0
 8004670:	460b      	mov	r3, r1
 8004672:	4613      	mov	r3, r2
 8004674:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004676:	e053      	b.n	8004720 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004678:	4b35      	ldr	r3, [pc, #212]	; (8004750 <HAL_RCC_GetSysClockFreq+0x180>)
 800467a:	685b      	ldr	r3, [r3, #4]
 800467c:	099b      	lsrs	r3, r3, #6
 800467e:	2200      	movs	r2, #0
 8004680:	613b      	str	r3, [r7, #16]
 8004682:	617a      	str	r2, [r7, #20]
 8004684:	693b      	ldr	r3, [r7, #16]
 8004686:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800468a:	f04f 0b00 	mov.w	fp, #0
 800468e:	4652      	mov	r2, sl
 8004690:	465b      	mov	r3, fp
 8004692:	f04f 0000 	mov.w	r0, #0
 8004696:	f04f 0100 	mov.w	r1, #0
 800469a:	0159      	lsls	r1, r3, #5
 800469c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80046a0:	0150      	lsls	r0, r2, #5
 80046a2:	4602      	mov	r2, r0
 80046a4:	460b      	mov	r3, r1
 80046a6:	ebb2 080a 	subs.w	r8, r2, sl
 80046aa:	eb63 090b 	sbc.w	r9, r3, fp
 80046ae:	f04f 0200 	mov.w	r2, #0
 80046b2:	f04f 0300 	mov.w	r3, #0
 80046b6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80046ba:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80046be:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80046c2:	ebb2 0408 	subs.w	r4, r2, r8
 80046c6:	eb63 0509 	sbc.w	r5, r3, r9
 80046ca:	f04f 0200 	mov.w	r2, #0
 80046ce:	f04f 0300 	mov.w	r3, #0
 80046d2:	00eb      	lsls	r3, r5, #3
 80046d4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80046d8:	00e2      	lsls	r2, r4, #3
 80046da:	4614      	mov	r4, r2
 80046dc:	461d      	mov	r5, r3
 80046de:	eb14 030a 	adds.w	r3, r4, sl
 80046e2:	603b      	str	r3, [r7, #0]
 80046e4:	eb45 030b 	adc.w	r3, r5, fp
 80046e8:	607b      	str	r3, [r7, #4]
 80046ea:	f04f 0200 	mov.w	r2, #0
 80046ee:	f04f 0300 	mov.w	r3, #0
 80046f2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80046f6:	4629      	mov	r1, r5
 80046f8:	028b      	lsls	r3, r1, #10
 80046fa:	4621      	mov	r1, r4
 80046fc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004700:	4621      	mov	r1, r4
 8004702:	028a      	lsls	r2, r1, #10
 8004704:	4610      	mov	r0, r2
 8004706:	4619      	mov	r1, r3
 8004708:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800470a:	2200      	movs	r2, #0
 800470c:	60bb      	str	r3, [r7, #8]
 800470e:	60fa      	str	r2, [r7, #12]
 8004710:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004714:	f7fb fd5e 	bl	80001d4 <__aeabi_uldivmod>
 8004718:	4602      	mov	r2, r0
 800471a:	460b      	mov	r3, r1
 800471c:	4613      	mov	r3, r2
 800471e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004720:	4b0b      	ldr	r3, [pc, #44]	; (8004750 <HAL_RCC_GetSysClockFreq+0x180>)
 8004722:	685b      	ldr	r3, [r3, #4]
 8004724:	0c1b      	lsrs	r3, r3, #16
 8004726:	f003 0303 	and.w	r3, r3, #3
 800472a:	3301      	adds	r3, #1
 800472c:	005b      	lsls	r3, r3, #1
 800472e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8004730:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004732:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004734:	fbb2 f3f3 	udiv	r3, r2, r3
 8004738:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800473a:	e002      	b.n	8004742 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800473c:	4b05      	ldr	r3, [pc, #20]	; (8004754 <HAL_RCC_GetSysClockFreq+0x184>)
 800473e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004740:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004742:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8004744:	4618      	mov	r0, r3
 8004746:	3740      	adds	r7, #64	; 0x40
 8004748:	46bd      	mov	sp, r7
 800474a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800474e:	bf00      	nop
 8004750:	40023800 	.word	0x40023800
 8004754:	00f42400 	.word	0x00f42400
 8004758:	017d7840 	.word	0x017d7840

0800475c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800475c:	b480      	push	{r7}
 800475e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004760:	4b03      	ldr	r3, [pc, #12]	; (8004770 <HAL_RCC_GetHCLKFreq+0x14>)
 8004762:	681b      	ldr	r3, [r3, #0]
}
 8004764:	4618      	mov	r0, r3
 8004766:	46bd      	mov	sp, r7
 8004768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476c:	4770      	bx	lr
 800476e:	bf00      	nop
 8004770:	20000004 	.word	0x20000004

08004774 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004774:	b580      	push	{r7, lr}
 8004776:	b082      	sub	sp, #8
 8004778:	af00      	add	r7, sp, #0
 800477a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2b00      	cmp	r3, #0
 8004780:	d101      	bne.n	8004786 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004782:	2301      	movs	r3, #1
 8004784:	e07b      	b.n	800487e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800478a:	2b00      	cmp	r3, #0
 800478c:	d108      	bne.n	80047a0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	685b      	ldr	r3, [r3, #4]
 8004792:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004796:	d009      	beq.n	80047ac <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2200      	movs	r2, #0
 800479c:	61da      	str	r2, [r3, #28]
 800479e:	e005      	b.n	80047ac <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	2200      	movs	r2, #0
 80047a4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	2200      	movs	r2, #0
 80047aa:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2200      	movs	r2, #0
 80047b0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80047b8:	b2db      	uxtb	r3, r3
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d106      	bne.n	80047cc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	2200      	movs	r2, #0
 80047c2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80047c6:	6878      	ldr	r0, [r7, #4]
 80047c8:	f7fc ff9e 	bl	8001708 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2202      	movs	r2, #2
 80047d0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	681a      	ldr	r2, [r3, #0]
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80047e2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	685b      	ldr	r3, [r3, #4]
 80047e8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	689b      	ldr	r3, [r3, #8]
 80047f0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80047f4:	431a      	orrs	r2, r3
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	68db      	ldr	r3, [r3, #12]
 80047fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80047fe:	431a      	orrs	r2, r3
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	691b      	ldr	r3, [r3, #16]
 8004804:	f003 0302 	and.w	r3, r3, #2
 8004808:	431a      	orrs	r2, r3
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	695b      	ldr	r3, [r3, #20]
 800480e:	f003 0301 	and.w	r3, r3, #1
 8004812:	431a      	orrs	r2, r3
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	699b      	ldr	r3, [r3, #24]
 8004818:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800481c:	431a      	orrs	r2, r3
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	69db      	ldr	r3, [r3, #28]
 8004822:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004826:	431a      	orrs	r2, r3
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	6a1b      	ldr	r3, [r3, #32]
 800482c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004830:	ea42 0103 	orr.w	r1, r2, r3
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004838:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	430a      	orrs	r2, r1
 8004842:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	699b      	ldr	r3, [r3, #24]
 8004848:	0c1b      	lsrs	r3, r3, #16
 800484a:	f003 0104 	and.w	r1, r3, #4
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004852:	f003 0210 	and.w	r2, r3, #16
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	430a      	orrs	r2, r1
 800485c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	69da      	ldr	r2, [r3, #28]
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800486c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	2200      	movs	r2, #0
 8004872:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2201      	movs	r2, #1
 8004878:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800487c:	2300      	movs	r3, #0
}
 800487e:	4618      	mov	r0, r3
 8004880:	3708      	adds	r7, #8
 8004882:	46bd      	mov	sp, r7
 8004884:	bd80      	pop	{r7, pc}

08004886 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004886:	b580      	push	{r7, lr}
 8004888:	b088      	sub	sp, #32
 800488a:	af00      	add	r7, sp, #0
 800488c:	60f8      	str	r0, [r7, #12]
 800488e:	60b9      	str	r1, [r7, #8]
 8004890:	603b      	str	r3, [r7, #0]
 8004892:	4613      	mov	r3, r2
 8004894:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004896:	2300      	movs	r3, #0
 8004898:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80048a0:	2b01      	cmp	r3, #1
 80048a2:	d101      	bne.n	80048a8 <HAL_SPI_Transmit+0x22>
 80048a4:	2302      	movs	r3, #2
 80048a6:	e126      	b.n	8004af6 <HAL_SPI_Transmit+0x270>
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	2201      	movs	r2, #1
 80048ac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80048b0:	f7fd f930 	bl	8001b14 <HAL_GetTick>
 80048b4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80048b6:	88fb      	ldrh	r3, [r7, #6]
 80048b8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80048c0:	b2db      	uxtb	r3, r3
 80048c2:	2b01      	cmp	r3, #1
 80048c4:	d002      	beq.n	80048cc <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80048c6:	2302      	movs	r3, #2
 80048c8:	77fb      	strb	r3, [r7, #31]
    goto error;
 80048ca:	e10b      	b.n	8004ae4 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80048cc:	68bb      	ldr	r3, [r7, #8]
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d002      	beq.n	80048d8 <HAL_SPI_Transmit+0x52>
 80048d2:	88fb      	ldrh	r3, [r7, #6]
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d102      	bne.n	80048de <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80048d8:	2301      	movs	r3, #1
 80048da:	77fb      	strb	r3, [r7, #31]
    goto error;
 80048dc:	e102      	b.n	8004ae4 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	2203      	movs	r2, #3
 80048e2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	2200      	movs	r2, #0
 80048ea:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	68ba      	ldr	r2, [r7, #8]
 80048f0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	88fa      	ldrh	r2, [r7, #6]
 80048f6:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	88fa      	ldrh	r2, [r7, #6]
 80048fc:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	2200      	movs	r2, #0
 8004902:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	2200      	movs	r2, #0
 8004908:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	2200      	movs	r2, #0
 800490e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	2200      	movs	r2, #0
 8004914:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	2200      	movs	r2, #0
 800491a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	689b      	ldr	r3, [r3, #8]
 8004920:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004924:	d10f      	bne.n	8004946 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	681a      	ldr	r2, [r3, #0]
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004934:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	681a      	ldr	r2, [r3, #0]
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004944:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004950:	2b40      	cmp	r3, #64	; 0x40
 8004952:	d007      	beq.n	8004964 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	681a      	ldr	r2, [r3, #0]
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004962:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	68db      	ldr	r3, [r3, #12]
 8004968:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800496c:	d14b      	bne.n	8004a06 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	685b      	ldr	r3, [r3, #4]
 8004972:	2b00      	cmp	r3, #0
 8004974:	d002      	beq.n	800497c <HAL_SPI_Transmit+0xf6>
 8004976:	8afb      	ldrh	r3, [r7, #22]
 8004978:	2b01      	cmp	r3, #1
 800497a:	d13e      	bne.n	80049fa <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004980:	881a      	ldrh	r2, [r3, #0]
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800498c:	1c9a      	adds	r2, r3, #2
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004996:	b29b      	uxth	r3, r3
 8004998:	3b01      	subs	r3, #1
 800499a:	b29a      	uxth	r2, r3
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80049a0:	e02b      	b.n	80049fa <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	689b      	ldr	r3, [r3, #8]
 80049a8:	f003 0302 	and.w	r3, r3, #2
 80049ac:	2b02      	cmp	r3, #2
 80049ae:	d112      	bne.n	80049d6 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049b4:	881a      	ldrh	r2, [r3, #0]
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049c0:	1c9a      	adds	r2, r3, #2
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80049ca:	b29b      	uxth	r3, r3
 80049cc:	3b01      	subs	r3, #1
 80049ce:	b29a      	uxth	r2, r3
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	86da      	strh	r2, [r3, #54]	; 0x36
 80049d4:	e011      	b.n	80049fa <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80049d6:	f7fd f89d 	bl	8001b14 <HAL_GetTick>
 80049da:	4602      	mov	r2, r0
 80049dc:	69bb      	ldr	r3, [r7, #24]
 80049de:	1ad3      	subs	r3, r2, r3
 80049e0:	683a      	ldr	r2, [r7, #0]
 80049e2:	429a      	cmp	r2, r3
 80049e4:	d803      	bhi.n	80049ee <HAL_SPI_Transmit+0x168>
 80049e6:	683b      	ldr	r3, [r7, #0]
 80049e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049ec:	d102      	bne.n	80049f4 <HAL_SPI_Transmit+0x16e>
 80049ee:	683b      	ldr	r3, [r7, #0]
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d102      	bne.n	80049fa <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80049f4:	2303      	movs	r3, #3
 80049f6:	77fb      	strb	r3, [r7, #31]
          goto error;
 80049f8:	e074      	b.n	8004ae4 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80049fe:	b29b      	uxth	r3, r3
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d1ce      	bne.n	80049a2 <HAL_SPI_Transmit+0x11c>
 8004a04:	e04c      	b.n	8004aa0 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	685b      	ldr	r3, [r3, #4]
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d002      	beq.n	8004a14 <HAL_SPI_Transmit+0x18e>
 8004a0e:	8afb      	ldrh	r3, [r7, #22]
 8004a10:	2b01      	cmp	r3, #1
 8004a12:	d140      	bne.n	8004a96 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	330c      	adds	r3, #12
 8004a1e:	7812      	ldrb	r2, [r2, #0]
 8004a20:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a26:	1c5a      	adds	r2, r3, #1
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004a30:	b29b      	uxth	r3, r3
 8004a32:	3b01      	subs	r3, #1
 8004a34:	b29a      	uxth	r2, r3
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004a3a:	e02c      	b.n	8004a96 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	689b      	ldr	r3, [r3, #8]
 8004a42:	f003 0302 	and.w	r3, r3, #2
 8004a46:	2b02      	cmp	r3, #2
 8004a48:	d113      	bne.n	8004a72 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	330c      	adds	r3, #12
 8004a54:	7812      	ldrb	r2, [r2, #0]
 8004a56:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a5c:	1c5a      	adds	r2, r3, #1
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004a66:	b29b      	uxth	r3, r3
 8004a68:	3b01      	subs	r3, #1
 8004a6a:	b29a      	uxth	r2, r3
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	86da      	strh	r2, [r3, #54]	; 0x36
 8004a70:	e011      	b.n	8004a96 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004a72:	f7fd f84f 	bl	8001b14 <HAL_GetTick>
 8004a76:	4602      	mov	r2, r0
 8004a78:	69bb      	ldr	r3, [r7, #24]
 8004a7a:	1ad3      	subs	r3, r2, r3
 8004a7c:	683a      	ldr	r2, [r7, #0]
 8004a7e:	429a      	cmp	r2, r3
 8004a80:	d803      	bhi.n	8004a8a <HAL_SPI_Transmit+0x204>
 8004a82:	683b      	ldr	r3, [r7, #0]
 8004a84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a88:	d102      	bne.n	8004a90 <HAL_SPI_Transmit+0x20a>
 8004a8a:	683b      	ldr	r3, [r7, #0]
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d102      	bne.n	8004a96 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8004a90:	2303      	movs	r3, #3
 8004a92:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004a94:	e026      	b.n	8004ae4 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004a9a:	b29b      	uxth	r3, r3
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d1cd      	bne.n	8004a3c <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004aa0:	69ba      	ldr	r2, [r7, #24]
 8004aa2:	6839      	ldr	r1, [r7, #0]
 8004aa4:	68f8      	ldr	r0, [r7, #12]
 8004aa6:	f000 ff9f 	bl	80059e8 <SPI_EndRxTxTransaction>
 8004aaa:	4603      	mov	r3, r0
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d002      	beq.n	8004ab6 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	2220      	movs	r2, #32
 8004ab4:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	689b      	ldr	r3, [r3, #8]
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d10a      	bne.n	8004ad4 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004abe:	2300      	movs	r3, #0
 8004ac0:	613b      	str	r3, [r7, #16]
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	68db      	ldr	r3, [r3, #12]
 8004ac8:	613b      	str	r3, [r7, #16]
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	689b      	ldr	r3, [r3, #8]
 8004ad0:	613b      	str	r3, [r7, #16]
 8004ad2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d002      	beq.n	8004ae2 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8004adc:	2301      	movs	r3, #1
 8004ade:	77fb      	strb	r3, [r7, #31]
 8004ae0:	e000      	b.n	8004ae4 <HAL_SPI_Transmit+0x25e>
  }

error:
 8004ae2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	2201      	movs	r2, #1
 8004ae8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	2200      	movs	r2, #0
 8004af0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004af4:	7ffb      	ldrb	r3, [r7, #31]
}
 8004af6:	4618      	mov	r0, r3
 8004af8:	3720      	adds	r7, #32
 8004afa:	46bd      	mov	sp, r7
 8004afc:	bd80      	pop	{r7, pc}

08004afe <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004afe:	b580      	push	{r7, lr}
 8004b00:	b088      	sub	sp, #32
 8004b02:	af02      	add	r7, sp, #8
 8004b04:	60f8      	str	r0, [r7, #12]
 8004b06:	60b9      	str	r1, [r7, #8]
 8004b08:	603b      	str	r3, [r7, #0]
 8004b0a:	4613      	mov	r3, r2
 8004b0c:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004b0e:	2300      	movs	r3, #0
 8004b10:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	685b      	ldr	r3, [r3, #4]
 8004b16:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004b1a:	d112      	bne.n	8004b42 <HAL_SPI_Receive+0x44>
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	689b      	ldr	r3, [r3, #8]
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d10e      	bne.n	8004b42 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	2204      	movs	r2, #4
 8004b28:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004b2c:	88fa      	ldrh	r2, [r7, #6]
 8004b2e:	683b      	ldr	r3, [r7, #0]
 8004b30:	9300      	str	r3, [sp, #0]
 8004b32:	4613      	mov	r3, r2
 8004b34:	68ba      	ldr	r2, [r7, #8]
 8004b36:	68b9      	ldr	r1, [r7, #8]
 8004b38:	68f8      	ldr	r0, [r7, #12]
 8004b3a:	f000 f8f1 	bl	8004d20 <HAL_SPI_TransmitReceive>
 8004b3e:	4603      	mov	r3, r0
 8004b40:	e0ea      	b.n	8004d18 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004b48:	2b01      	cmp	r3, #1
 8004b4a:	d101      	bne.n	8004b50 <HAL_SPI_Receive+0x52>
 8004b4c:	2302      	movs	r3, #2
 8004b4e:	e0e3      	b.n	8004d18 <HAL_SPI_Receive+0x21a>
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	2201      	movs	r2, #1
 8004b54:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004b58:	f7fc ffdc 	bl	8001b14 <HAL_GetTick>
 8004b5c:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004b64:	b2db      	uxtb	r3, r3
 8004b66:	2b01      	cmp	r3, #1
 8004b68:	d002      	beq.n	8004b70 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8004b6a:	2302      	movs	r3, #2
 8004b6c:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004b6e:	e0ca      	b.n	8004d06 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8004b70:	68bb      	ldr	r3, [r7, #8]
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d002      	beq.n	8004b7c <HAL_SPI_Receive+0x7e>
 8004b76:	88fb      	ldrh	r3, [r7, #6]
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d102      	bne.n	8004b82 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004b7c:	2301      	movs	r3, #1
 8004b7e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004b80:	e0c1      	b.n	8004d06 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	2204      	movs	r2, #4
 8004b86:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	2200      	movs	r2, #0
 8004b8e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	68ba      	ldr	r2, [r7, #8]
 8004b94:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	88fa      	ldrh	r2, [r7, #6]
 8004b9a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	88fa      	ldrh	r2, [r7, #6]
 8004ba0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	2200      	movs	r2, #0
 8004ba6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	2200      	movs	r2, #0
 8004bac:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	2200      	movs	r2, #0
 8004bb2:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	2200      	movs	r2, #0
 8004bb8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	2200      	movs	r2, #0
 8004bbe:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	689b      	ldr	r3, [r3, #8]
 8004bc4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004bc8:	d10f      	bne.n	8004bea <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	681a      	ldr	r2, [r3, #0]
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004bd8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	681a      	ldr	r2, [r3, #0]
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004be8:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bf4:	2b40      	cmp	r3, #64	; 0x40
 8004bf6:	d007      	beq.n	8004c08 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	681a      	ldr	r2, [r3, #0]
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004c06:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	68db      	ldr	r3, [r3, #12]
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d162      	bne.n	8004cd6 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004c10:	e02e      	b.n	8004c70 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	689b      	ldr	r3, [r3, #8]
 8004c18:	f003 0301 	and.w	r3, r3, #1
 8004c1c:	2b01      	cmp	r3, #1
 8004c1e:	d115      	bne.n	8004c4c <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f103 020c 	add.w	r2, r3, #12
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c2c:	7812      	ldrb	r2, [r2, #0]
 8004c2e:	b2d2      	uxtb	r2, r2
 8004c30:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c36:	1c5a      	adds	r2, r3, #1
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c40:	b29b      	uxth	r3, r3
 8004c42:	3b01      	subs	r3, #1
 8004c44:	b29a      	uxth	r2, r3
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004c4a:	e011      	b.n	8004c70 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004c4c:	f7fc ff62 	bl	8001b14 <HAL_GetTick>
 8004c50:	4602      	mov	r2, r0
 8004c52:	693b      	ldr	r3, [r7, #16]
 8004c54:	1ad3      	subs	r3, r2, r3
 8004c56:	683a      	ldr	r2, [r7, #0]
 8004c58:	429a      	cmp	r2, r3
 8004c5a:	d803      	bhi.n	8004c64 <HAL_SPI_Receive+0x166>
 8004c5c:	683b      	ldr	r3, [r7, #0]
 8004c5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c62:	d102      	bne.n	8004c6a <HAL_SPI_Receive+0x16c>
 8004c64:	683b      	ldr	r3, [r7, #0]
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d102      	bne.n	8004c70 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8004c6a:	2303      	movs	r3, #3
 8004c6c:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004c6e:	e04a      	b.n	8004d06 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c74:	b29b      	uxth	r3, r3
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d1cb      	bne.n	8004c12 <HAL_SPI_Receive+0x114>
 8004c7a:	e031      	b.n	8004ce0 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	689b      	ldr	r3, [r3, #8]
 8004c82:	f003 0301 	and.w	r3, r3, #1
 8004c86:	2b01      	cmp	r3, #1
 8004c88:	d113      	bne.n	8004cb2 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	68da      	ldr	r2, [r3, #12]
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c94:	b292      	uxth	r2, r2
 8004c96:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c9c:	1c9a      	adds	r2, r3, #2
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ca6:	b29b      	uxth	r3, r3
 8004ca8:	3b01      	subs	r3, #1
 8004caa:	b29a      	uxth	r2, r3
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004cb0:	e011      	b.n	8004cd6 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004cb2:	f7fc ff2f 	bl	8001b14 <HAL_GetTick>
 8004cb6:	4602      	mov	r2, r0
 8004cb8:	693b      	ldr	r3, [r7, #16]
 8004cba:	1ad3      	subs	r3, r2, r3
 8004cbc:	683a      	ldr	r2, [r7, #0]
 8004cbe:	429a      	cmp	r2, r3
 8004cc0:	d803      	bhi.n	8004cca <HAL_SPI_Receive+0x1cc>
 8004cc2:	683b      	ldr	r3, [r7, #0]
 8004cc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cc8:	d102      	bne.n	8004cd0 <HAL_SPI_Receive+0x1d2>
 8004cca:	683b      	ldr	r3, [r7, #0]
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d102      	bne.n	8004cd6 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8004cd0:	2303      	movs	r3, #3
 8004cd2:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004cd4:	e017      	b.n	8004d06 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004cda:	b29b      	uxth	r3, r3
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d1cd      	bne.n	8004c7c <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004ce0:	693a      	ldr	r2, [r7, #16]
 8004ce2:	6839      	ldr	r1, [r7, #0]
 8004ce4:	68f8      	ldr	r0, [r7, #12]
 8004ce6:	f000 fe19 	bl	800591c <SPI_EndRxTransaction>
 8004cea:	4603      	mov	r3, r0
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d002      	beq.n	8004cf6 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	2220      	movs	r2, #32
 8004cf4:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d002      	beq.n	8004d04 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8004cfe:	2301      	movs	r3, #1
 8004d00:	75fb      	strb	r3, [r7, #23]
 8004d02:	e000      	b.n	8004d06 <HAL_SPI_Receive+0x208>
  }

error :
 8004d04:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	2201      	movs	r2, #1
 8004d0a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	2200      	movs	r2, #0
 8004d12:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004d16:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d18:	4618      	mov	r0, r3
 8004d1a:	3718      	adds	r7, #24
 8004d1c:	46bd      	mov	sp, r7
 8004d1e:	bd80      	pop	{r7, pc}

08004d20 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004d20:	b580      	push	{r7, lr}
 8004d22:	b08c      	sub	sp, #48	; 0x30
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	60f8      	str	r0, [r7, #12]
 8004d28:	60b9      	str	r1, [r7, #8]
 8004d2a:	607a      	str	r2, [r7, #4]
 8004d2c:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004d2e:	2301      	movs	r3, #1
 8004d30:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004d32:	2300      	movs	r3, #0
 8004d34:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004d3e:	2b01      	cmp	r3, #1
 8004d40:	d101      	bne.n	8004d46 <HAL_SPI_TransmitReceive+0x26>
 8004d42:	2302      	movs	r3, #2
 8004d44:	e18a      	b.n	800505c <HAL_SPI_TransmitReceive+0x33c>
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	2201      	movs	r2, #1
 8004d4a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004d4e:	f7fc fee1 	bl	8001b14 <HAL_GetTick>
 8004d52:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004d5a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	685b      	ldr	r3, [r3, #4]
 8004d62:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004d64:	887b      	ldrh	r3, [r7, #2]
 8004d66:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004d68:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004d6c:	2b01      	cmp	r3, #1
 8004d6e:	d00f      	beq.n	8004d90 <HAL_SPI_TransmitReceive+0x70>
 8004d70:	69fb      	ldr	r3, [r7, #28]
 8004d72:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004d76:	d107      	bne.n	8004d88 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	689b      	ldr	r3, [r3, #8]
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d103      	bne.n	8004d88 <HAL_SPI_TransmitReceive+0x68>
 8004d80:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004d84:	2b04      	cmp	r3, #4
 8004d86:	d003      	beq.n	8004d90 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004d88:	2302      	movs	r3, #2
 8004d8a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004d8e:	e15b      	b.n	8005048 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004d90:	68bb      	ldr	r3, [r7, #8]
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d005      	beq.n	8004da2 <HAL_SPI_TransmitReceive+0x82>
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d002      	beq.n	8004da2 <HAL_SPI_TransmitReceive+0x82>
 8004d9c:	887b      	ldrh	r3, [r7, #2]
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d103      	bne.n	8004daa <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004da2:	2301      	movs	r3, #1
 8004da4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004da8:	e14e      	b.n	8005048 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004db0:	b2db      	uxtb	r3, r3
 8004db2:	2b04      	cmp	r3, #4
 8004db4:	d003      	beq.n	8004dbe <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	2205      	movs	r2, #5
 8004dba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	2200      	movs	r2, #0
 8004dc2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	687a      	ldr	r2, [r7, #4]
 8004dc8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	887a      	ldrh	r2, [r7, #2]
 8004dce:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	887a      	ldrh	r2, [r7, #2]
 8004dd4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	68ba      	ldr	r2, [r7, #8]
 8004dda:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	887a      	ldrh	r2, [r7, #2]
 8004de0:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	887a      	ldrh	r2, [r7, #2]
 8004de6:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	2200      	movs	r2, #0
 8004dec:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	2200      	movs	r2, #0
 8004df2:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dfe:	2b40      	cmp	r3, #64	; 0x40
 8004e00:	d007      	beq.n	8004e12 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	681a      	ldr	r2, [r3, #0]
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004e10:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	68db      	ldr	r3, [r3, #12]
 8004e16:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e1a:	d178      	bne.n	8004f0e <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	685b      	ldr	r3, [r3, #4]
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d002      	beq.n	8004e2a <HAL_SPI_TransmitReceive+0x10a>
 8004e24:	8b7b      	ldrh	r3, [r7, #26]
 8004e26:	2b01      	cmp	r3, #1
 8004e28:	d166      	bne.n	8004ef8 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e2e:	881a      	ldrh	r2, [r3, #0]
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e3a:	1c9a      	adds	r2, r3, #2
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e44:	b29b      	uxth	r3, r3
 8004e46:	3b01      	subs	r3, #1
 8004e48:	b29a      	uxth	r2, r3
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004e4e:	e053      	b.n	8004ef8 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	689b      	ldr	r3, [r3, #8]
 8004e56:	f003 0302 	and.w	r3, r3, #2
 8004e5a:	2b02      	cmp	r3, #2
 8004e5c:	d11b      	bne.n	8004e96 <HAL_SPI_TransmitReceive+0x176>
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e62:	b29b      	uxth	r3, r3
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d016      	beq.n	8004e96 <HAL_SPI_TransmitReceive+0x176>
 8004e68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e6a:	2b01      	cmp	r3, #1
 8004e6c:	d113      	bne.n	8004e96 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e72:	881a      	ldrh	r2, [r3, #0]
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e7e:	1c9a      	adds	r2, r3, #2
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e88:	b29b      	uxth	r3, r3
 8004e8a:	3b01      	subs	r3, #1
 8004e8c:	b29a      	uxth	r2, r3
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004e92:	2300      	movs	r3, #0
 8004e94:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	689b      	ldr	r3, [r3, #8]
 8004e9c:	f003 0301 	and.w	r3, r3, #1
 8004ea0:	2b01      	cmp	r3, #1
 8004ea2:	d119      	bne.n	8004ed8 <HAL_SPI_TransmitReceive+0x1b8>
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ea8:	b29b      	uxth	r3, r3
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d014      	beq.n	8004ed8 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	68da      	ldr	r2, [r3, #12]
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004eb8:	b292      	uxth	r2, r2
 8004eba:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ec0:	1c9a      	adds	r2, r3, #2
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004eca:	b29b      	uxth	r3, r3
 8004ecc:	3b01      	subs	r3, #1
 8004ece:	b29a      	uxth	r2, r3
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004ed4:	2301      	movs	r3, #1
 8004ed6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004ed8:	f7fc fe1c 	bl	8001b14 <HAL_GetTick>
 8004edc:	4602      	mov	r2, r0
 8004ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ee0:	1ad3      	subs	r3, r2, r3
 8004ee2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004ee4:	429a      	cmp	r2, r3
 8004ee6:	d807      	bhi.n	8004ef8 <HAL_SPI_TransmitReceive+0x1d8>
 8004ee8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004eea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004eee:	d003      	beq.n	8004ef8 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8004ef0:	2303      	movs	r3, #3
 8004ef2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004ef6:	e0a7      	b.n	8005048 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004efc:	b29b      	uxth	r3, r3
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d1a6      	bne.n	8004e50 <HAL_SPI_TransmitReceive+0x130>
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f06:	b29b      	uxth	r3, r3
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d1a1      	bne.n	8004e50 <HAL_SPI_TransmitReceive+0x130>
 8004f0c:	e07c      	b.n	8005008 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	685b      	ldr	r3, [r3, #4]
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d002      	beq.n	8004f1c <HAL_SPI_TransmitReceive+0x1fc>
 8004f16:	8b7b      	ldrh	r3, [r7, #26]
 8004f18:	2b01      	cmp	r3, #1
 8004f1a:	d16b      	bne.n	8004ff4 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	330c      	adds	r3, #12
 8004f26:	7812      	ldrb	r2, [r2, #0]
 8004f28:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f2e:	1c5a      	adds	r2, r3, #1
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004f38:	b29b      	uxth	r3, r3
 8004f3a:	3b01      	subs	r3, #1
 8004f3c:	b29a      	uxth	r2, r3
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004f42:	e057      	b.n	8004ff4 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	689b      	ldr	r3, [r3, #8]
 8004f4a:	f003 0302 	and.w	r3, r3, #2
 8004f4e:	2b02      	cmp	r3, #2
 8004f50:	d11c      	bne.n	8004f8c <HAL_SPI_TransmitReceive+0x26c>
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004f56:	b29b      	uxth	r3, r3
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d017      	beq.n	8004f8c <HAL_SPI_TransmitReceive+0x26c>
 8004f5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f5e:	2b01      	cmp	r3, #1
 8004f60:	d114      	bne.n	8004f8c <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	330c      	adds	r3, #12
 8004f6c:	7812      	ldrb	r2, [r2, #0]
 8004f6e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f74:	1c5a      	adds	r2, r3, #1
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004f7e:	b29b      	uxth	r3, r3
 8004f80:	3b01      	subs	r3, #1
 8004f82:	b29a      	uxth	r2, r3
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004f88:	2300      	movs	r3, #0
 8004f8a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	689b      	ldr	r3, [r3, #8]
 8004f92:	f003 0301 	and.w	r3, r3, #1
 8004f96:	2b01      	cmp	r3, #1
 8004f98:	d119      	bne.n	8004fce <HAL_SPI_TransmitReceive+0x2ae>
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f9e:	b29b      	uxth	r3, r3
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d014      	beq.n	8004fce <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	68da      	ldr	r2, [r3, #12]
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fae:	b2d2      	uxtb	r2, r2
 8004fb0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fb6:	1c5a      	adds	r2, r3, #1
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004fc0:	b29b      	uxth	r3, r3
 8004fc2:	3b01      	subs	r3, #1
 8004fc4:	b29a      	uxth	r2, r3
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004fca:	2301      	movs	r3, #1
 8004fcc:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004fce:	f7fc fda1 	bl	8001b14 <HAL_GetTick>
 8004fd2:	4602      	mov	r2, r0
 8004fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fd6:	1ad3      	subs	r3, r2, r3
 8004fd8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004fda:	429a      	cmp	r2, r3
 8004fdc:	d803      	bhi.n	8004fe6 <HAL_SPI_TransmitReceive+0x2c6>
 8004fde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fe0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fe4:	d102      	bne.n	8004fec <HAL_SPI_TransmitReceive+0x2cc>
 8004fe6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d103      	bne.n	8004ff4 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8004fec:	2303      	movs	r3, #3
 8004fee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004ff2:	e029      	b.n	8005048 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004ff8:	b29b      	uxth	r3, r3
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d1a2      	bne.n	8004f44 <HAL_SPI_TransmitReceive+0x224>
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005002:	b29b      	uxth	r3, r3
 8005004:	2b00      	cmp	r3, #0
 8005006:	d19d      	bne.n	8004f44 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005008:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800500a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800500c:	68f8      	ldr	r0, [r7, #12]
 800500e:	f000 fceb 	bl	80059e8 <SPI_EndRxTxTransaction>
 8005012:	4603      	mov	r3, r0
 8005014:	2b00      	cmp	r3, #0
 8005016:	d006      	beq.n	8005026 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8005018:	2301      	movs	r3, #1
 800501a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	2220      	movs	r2, #32
 8005022:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8005024:	e010      	b.n	8005048 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	689b      	ldr	r3, [r3, #8]
 800502a:	2b00      	cmp	r3, #0
 800502c:	d10b      	bne.n	8005046 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800502e:	2300      	movs	r3, #0
 8005030:	617b      	str	r3, [r7, #20]
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	68db      	ldr	r3, [r3, #12]
 8005038:	617b      	str	r3, [r7, #20]
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	689b      	ldr	r3, [r3, #8]
 8005040:	617b      	str	r3, [r7, #20]
 8005042:	697b      	ldr	r3, [r7, #20]
 8005044:	e000      	b.n	8005048 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8005046:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	2201      	movs	r2, #1
 800504c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	2200      	movs	r2, #0
 8005054:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005058:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800505c:	4618      	mov	r0, r3
 800505e:	3730      	adds	r7, #48	; 0x30
 8005060:	46bd      	mov	sp, r7
 8005062:	bd80      	pop	{r7, pc}

08005064 <HAL_SPI_Receive_DMA>:
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8005064:	b580      	push	{r7, lr}
 8005066:	b086      	sub	sp, #24
 8005068:	af00      	add	r7, sp, #0
 800506a:	60f8      	str	r0, [r7, #12]
 800506c:	60b9      	str	r1, [r7, #8]
 800506e:	4613      	mov	r3, r2
 8005070:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005072:	2300      	movs	r3, #0
 8005074:	75fb      	strb	r3, [r7, #23]

  /* Check rx dma handle */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	689b      	ldr	r3, [r3, #8]
 800507a:	2b00      	cmp	r3, #0
 800507c:	d110      	bne.n	80050a0 <HAL_SPI_Receive_DMA+0x3c>
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	685b      	ldr	r3, [r3, #4]
 8005082:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005086:	d10b      	bne.n	80050a0 <HAL_SPI_Receive_DMA+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	2204      	movs	r2, #4
 800508c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    /* Check tx dma handle */
    assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 8005090:	88fb      	ldrh	r3, [r7, #6]
 8005092:	68ba      	ldr	r2, [r7, #8]
 8005094:	68b9      	ldr	r1, [r7, #8]
 8005096:	68f8      	ldr	r0, [r7, #12]
 8005098:	f000 f8ac 	bl	80051f4 <HAL_SPI_TransmitReceive_DMA>
 800509c:	4603      	mov	r3, r0
 800509e:	e09f      	b.n	80051e0 <HAL_SPI_Receive_DMA+0x17c>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80050a6:	2b01      	cmp	r3, #1
 80050a8:	d101      	bne.n	80050ae <HAL_SPI_Receive_DMA+0x4a>
 80050aa:	2302      	movs	r3, #2
 80050ac:	e098      	b.n	80051e0 <HAL_SPI_Receive_DMA+0x17c>
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	2201      	movs	r2, #1
 80050b2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80050bc:	b2db      	uxtb	r3, r3
 80050be:	2b01      	cmp	r3, #1
 80050c0:	d002      	beq.n	80050c8 <HAL_SPI_Receive_DMA+0x64>
  {
    errorcode = HAL_BUSY;
 80050c2:	2302      	movs	r3, #2
 80050c4:	75fb      	strb	r3, [r7, #23]
    goto error;
 80050c6:	e086      	b.n	80051d6 <HAL_SPI_Receive_DMA+0x172>
  }

  if ((pData == NULL) || (Size == 0U))
 80050c8:	68bb      	ldr	r3, [r7, #8]
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d002      	beq.n	80050d4 <HAL_SPI_Receive_DMA+0x70>
 80050ce:	88fb      	ldrh	r3, [r7, #6]
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d102      	bne.n	80050da <HAL_SPI_Receive_DMA+0x76>
  {
    errorcode = HAL_ERROR;
 80050d4:	2301      	movs	r3, #1
 80050d6:	75fb      	strb	r3, [r7, #23]
    goto error;
 80050d8:	e07d      	b.n	80051d6 <HAL_SPI_Receive_DMA+0x172>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	2204      	movs	r2, #4
 80050de:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	2200      	movs	r2, #0
 80050e6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	68ba      	ldr	r2, [r7, #8]
 80050ec:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	88fa      	ldrh	r2, [r7, #6]
 80050f2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	88fa      	ldrh	r2, [r7, #6]
 80050f8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	2200      	movs	r2, #0
 80050fe:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	2200      	movs	r2, #0
 8005104:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->TxXferSize  = 0U;
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	2200      	movs	r2, #0
 800510a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	2200      	movs	r2, #0
 8005110:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	689b      	ldr	r3, [r3, #8]
 8005116:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800511a:	d10f      	bne.n	800513c <HAL_SPI_Receive_DMA+0xd8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	681a      	ldr	r2, [r3, #0]
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800512a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	681a      	ldr	r2, [r3, #0]
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800513a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005140:	4a29      	ldr	r2, [pc, #164]	; (80051e8 <HAL_SPI_Receive_DMA+0x184>)
 8005142:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005148:	4a28      	ldr	r2, [pc, #160]	; (80051ec <HAL_SPI_Receive_DMA+0x188>)
 800514a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005150:	4a27      	ldr	r2, [pc, #156]	; (80051f0 <HAL_SPI_Receive_DMA+0x18c>)
 8005152:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005158:	2200      	movs	r2, #0
 800515a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	330c      	adds	r3, #12
 8005166:	4619      	mov	r1, r3
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800516c:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005172:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8005174:	f7fc ff38 	bl	8001fe8 <HAL_DMA_Start_IT>
 8005178:	4603      	mov	r3, r0
 800517a:	2b00      	cmp	r3, #0
 800517c:	d00c      	beq.n	8005198 <HAL_SPI_Receive_DMA+0x134>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005182:	f043 0210 	orr.w	r2, r3, #16
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 800518a:	2301      	movs	r3, #1
 800518c:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	2201      	movs	r2, #1
 8005192:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8005196:	e01e      	b.n	80051d6 <HAL_SPI_Receive_DMA+0x172>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051a2:	2b40      	cmp	r3, #64	; 0x40
 80051a4:	d007      	beq.n	80051b6 <HAL_SPI_Receive_DMA+0x152>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	681a      	ldr	r2, [r3, #0]
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80051b4:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	685a      	ldr	r2, [r3, #4]
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f042 0220 	orr.w	r2, r2, #32
 80051c4:	605a      	str	r2, [r3, #4]

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	685a      	ldr	r2, [r3, #4]
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f042 0201 	orr.w	r2, r2, #1
 80051d4:	605a      	str	r2, [r3, #4]

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	2200      	movs	r2, #0
 80051da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80051de:	7dfb      	ldrb	r3, [r7, #23]
}
 80051e0:	4618      	mov	r0, r3
 80051e2:	3718      	adds	r7, #24
 80051e4:	46bd      	mov	sp, r7
 80051e6:	bd80      	pop	{r7, pc}
 80051e8:	0800576d 	.word	0x0800576d
 80051ec:	08005635 	.word	0x08005635
 80051f0:	080057a5 	.word	0x080057a5

080051f4 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 80051f4:	b580      	push	{r7, lr}
 80051f6:	b086      	sub	sp, #24
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	60f8      	str	r0, [r7, #12]
 80051fc:	60b9      	str	r1, [r7, #8]
 80051fe:	607a      	str	r2, [r7, #4]
 8005200:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005202:	2300      	movs	r3, #0
 8005204:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800520c:	2b01      	cmp	r3, #1
 800520e:	d101      	bne.n	8005214 <HAL_SPI_TransmitReceive_DMA+0x20>
 8005210:	2302      	movs	r3, #2
 8005212:	e0e3      	b.n	80053dc <HAL_SPI_TransmitReceive_DMA+0x1e8>
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	2201      	movs	r2, #1
 8005218:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005222:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	685b      	ldr	r3, [r3, #4]
 8005228:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 800522a:	7dbb      	ldrb	r3, [r7, #22]
 800522c:	2b01      	cmp	r3, #1
 800522e:	d00d      	beq.n	800524c <HAL_SPI_TransmitReceive_DMA+0x58>
 8005230:	693b      	ldr	r3, [r7, #16]
 8005232:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005236:	d106      	bne.n	8005246 <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	689b      	ldr	r3, [r3, #8]
 800523c:	2b00      	cmp	r3, #0
 800523e:	d102      	bne.n	8005246 <HAL_SPI_TransmitReceive_DMA+0x52>
 8005240:	7dbb      	ldrb	r3, [r7, #22]
 8005242:	2b04      	cmp	r3, #4
 8005244:	d002      	beq.n	800524c <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 8005246:	2302      	movs	r3, #2
 8005248:	75fb      	strb	r3, [r7, #23]
    goto error;
 800524a:	e0c2      	b.n	80053d2 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800524c:	68bb      	ldr	r3, [r7, #8]
 800524e:	2b00      	cmp	r3, #0
 8005250:	d005      	beq.n	800525e <HAL_SPI_TransmitReceive_DMA+0x6a>
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	2b00      	cmp	r3, #0
 8005256:	d002      	beq.n	800525e <HAL_SPI_TransmitReceive_DMA+0x6a>
 8005258:	887b      	ldrh	r3, [r7, #2]
 800525a:	2b00      	cmp	r3, #0
 800525c:	d102      	bne.n	8005264 <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 800525e:	2301      	movs	r3, #1
 8005260:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005262:	e0b6      	b.n	80053d2 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800526a:	b2db      	uxtb	r3, r3
 800526c:	2b04      	cmp	r3, #4
 800526e:	d003      	beq.n	8005278 <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	2205      	movs	r2, #5
 8005274:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	2200      	movs	r2, #0
 800527c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	68ba      	ldr	r2, [r7, #8]
 8005282:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	887a      	ldrh	r2, [r7, #2]
 8005288:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	887a      	ldrh	r2, [r7, #2]
 800528e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	687a      	ldr	r2, [r7, #4]
 8005294:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	887a      	ldrh	r2, [r7, #2]
 800529a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	887a      	ldrh	r2, [r7, #2]
 80052a0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	2200      	movs	r2, #0
 80052a6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	2200      	movs	r2, #0
 80052ac:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80052b4:	b2db      	uxtb	r3, r3
 80052b6:	2b04      	cmp	r3, #4
 80052b8:	d108      	bne.n	80052cc <HAL_SPI_TransmitReceive_DMA+0xd8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80052be:	4a49      	ldr	r2, [pc, #292]	; (80053e4 <HAL_SPI_TransmitReceive_DMA+0x1f0>)
 80052c0:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80052c6:	4a48      	ldr	r2, [pc, #288]	; (80053e8 <HAL_SPI_TransmitReceive_DMA+0x1f4>)
 80052c8:	63da      	str	r2, [r3, #60]	; 0x3c
 80052ca:	e007      	b.n	80052dc <HAL_SPI_TransmitReceive_DMA+0xe8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80052d0:	4a46      	ldr	r2, [pc, #280]	; (80053ec <HAL_SPI_TransmitReceive_DMA+0x1f8>)
 80052d2:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80052d8:	4a45      	ldr	r2, [pc, #276]	; (80053f0 <HAL_SPI_TransmitReceive_DMA+0x1fc>)
 80052da:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80052e0:	4a44      	ldr	r2, [pc, #272]	; (80053f4 <HAL_SPI_TransmitReceive_DMA+0x200>)
 80052e2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80052e8:	2200      	movs	r2, #0
 80052ea:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	330c      	adds	r3, #12
 80052f6:	4619      	mov	r1, r3
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052fc:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005302:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8005304:	f7fc fe70 	bl	8001fe8 <HAL_DMA_Start_IT>
 8005308:	4603      	mov	r3, r0
 800530a:	2b00      	cmp	r3, #0
 800530c:	d00c      	beq.n	8005328 <HAL_SPI_TransmitReceive_DMA+0x134>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005312:	f043 0210 	orr.w	r2, r3, #16
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 800531a:	2301      	movs	r3, #1
 800531c:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	2201      	movs	r2, #1
 8005322:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8005326:	e054      	b.n	80053d2 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	685a      	ldr	r2, [r3, #4]
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	f042 0201 	orr.w	r2, r2, #1
 8005336:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800533c:	2200      	movs	r2, #0
 800533e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005344:	2200      	movs	r2, #0
 8005346:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800534c:	2200      	movs	r2, #0
 800534e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005354:	2200      	movs	r2, #0
 8005356:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	6c98      	ldr	r0, [r3, #72]	; 0x48
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005360:	4619      	mov	r1, r3
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	330c      	adds	r3, #12
 8005368:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800536e:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8005370:	f7fc fe3a 	bl	8001fe8 <HAL_DMA_Start_IT>
 8005374:	4603      	mov	r3, r0
 8005376:	2b00      	cmp	r3, #0
 8005378:	d00c      	beq.n	8005394 <HAL_SPI_TransmitReceive_DMA+0x1a0>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800537e:	f043 0210 	orr.w	r2, r3, #16
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8005386:	2301      	movs	r3, #1
 8005388:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	2201      	movs	r2, #1
 800538e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8005392:	e01e      	b.n	80053d2 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800539e:	2b40      	cmp	r3, #64	; 0x40
 80053a0:	d007      	beq.n	80053b2 <HAL_SPI_TransmitReceive_DMA+0x1be>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	681a      	ldr	r2, [r3, #0]
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80053b0:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	685a      	ldr	r2, [r3, #4]
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	f042 0220 	orr.w	r2, r2, #32
 80053c0:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	685a      	ldr	r2, [r3, #4]
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f042 0202 	orr.w	r2, r2, #2
 80053d0:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	2200      	movs	r2, #0
 80053d6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80053da:	7dfb      	ldrb	r3, [r7, #23]
}
 80053dc:	4618      	mov	r0, r3
 80053de:	3718      	adds	r7, #24
 80053e0:	46bd      	mov	sp, r7
 80053e2:	bd80      	pop	{r7, pc}
 80053e4:	0800576d 	.word	0x0800576d
 80053e8:	08005635 	.word	0x08005635
 80053ec:	08005789 	.word	0x08005789
 80053f0:	080056dd 	.word	0x080056dd
 80053f4:	080057a5 	.word	0x080057a5

080053f8 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80053f8:	b580      	push	{r7, lr}
 80053fa:	b088      	sub	sp, #32
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	685b      	ldr	r3, [r3, #4]
 8005406:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	689b      	ldr	r3, [r3, #8]
 800540e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005410:	69bb      	ldr	r3, [r7, #24]
 8005412:	099b      	lsrs	r3, r3, #6
 8005414:	f003 0301 	and.w	r3, r3, #1
 8005418:	2b00      	cmp	r3, #0
 800541a:	d10f      	bne.n	800543c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800541c:	69bb      	ldr	r3, [r7, #24]
 800541e:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005422:	2b00      	cmp	r3, #0
 8005424:	d00a      	beq.n	800543c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005426:	69fb      	ldr	r3, [r7, #28]
 8005428:	099b      	lsrs	r3, r3, #6
 800542a:	f003 0301 	and.w	r3, r3, #1
 800542e:	2b00      	cmp	r3, #0
 8005430:	d004      	beq.n	800543c <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005436:	6878      	ldr	r0, [r7, #4]
 8005438:	4798      	blx	r3
    return;
 800543a:	e0d7      	b.n	80055ec <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800543c:	69bb      	ldr	r3, [r7, #24]
 800543e:	085b      	lsrs	r3, r3, #1
 8005440:	f003 0301 	and.w	r3, r3, #1
 8005444:	2b00      	cmp	r3, #0
 8005446:	d00a      	beq.n	800545e <HAL_SPI_IRQHandler+0x66>
 8005448:	69fb      	ldr	r3, [r7, #28]
 800544a:	09db      	lsrs	r3, r3, #7
 800544c:	f003 0301 	and.w	r3, r3, #1
 8005450:	2b00      	cmp	r3, #0
 8005452:	d004      	beq.n	800545e <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005458:	6878      	ldr	r0, [r7, #4]
 800545a:	4798      	blx	r3
    return;
 800545c:	e0c6      	b.n	80055ec <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800545e:	69bb      	ldr	r3, [r7, #24]
 8005460:	095b      	lsrs	r3, r3, #5
 8005462:	f003 0301 	and.w	r3, r3, #1
 8005466:	2b00      	cmp	r3, #0
 8005468:	d10c      	bne.n	8005484 <HAL_SPI_IRQHandler+0x8c>
 800546a:	69bb      	ldr	r3, [r7, #24]
 800546c:	099b      	lsrs	r3, r3, #6
 800546e:	f003 0301 	and.w	r3, r3, #1
 8005472:	2b00      	cmp	r3, #0
 8005474:	d106      	bne.n	8005484 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8005476:	69bb      	ldr	r3, [r7, #24]
 8005478:	0a1b      	lsrs	r3, r3, #8
 800547a:	f003 0301 	and.w	r3, r3, #1
 800547e:	2b00      	cmp	r3, #0
 8005480:	f000 80b4 	beq.w	80055ec <HAL_SPI_IRQHandler+0x1f4>
 8005484:	69fb      	ldr	r3, [r7, #28]
 8005486:	095b      	lsrs	r3, r3, #5
 8005488:	f003 0301 	and.w	r3, r3, #1
 800548c:	2b00      	cmp	r3, #0
 800548e:	f000 80ad 	beq.w	80055ec <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8005492:	69bb      	ldr	r3, [r7, #24]
 8005494:	099b      	lsrs	r3, r3, #6
 8005496:	f003 0301 	and.w	r3, r3, #1
 800549a:	2b00      	cmp	r3, #0
 800549c:	d023      	beq.n	80054e6 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80054a4:	b2db      	uxtb	r3, r3
 80054a6:	2b03      	cmp	r3, #3
 80054a8:	d011      	beq.n	80054ce <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054ae:	f043 0204 	orr.w	r2, r3, #4
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80054b6:	2300      	movs	r3, #0
 80054b8:	617b      	str	r3, [r7, #20]
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	68db      	ldr	r3, [r3, #12]
 80054c0:	617b      	str	r3, [r7, #20]
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	689b      	ldr	r3, [r3, #8]
 80054c8:	617b      	str	r3, [r7, #20]
 80054ca:	697b      	ldr	r3, [r7, #20]
 80054cc:	e00b      	b.n	80054e6 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80054ce:	2300      	movs	r3, #0
 80054d0:	613b      	str	r3, [r7, #16]
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	68db      	ldr	r3, [r3, #12]
 80054d8:	613b      	str	r3, [r7, #16]
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	689b      	ldr	r3, [r3, #8]
 80054e0:	613b      	str	r3, [r7, #16]
 80054e2:	693b      	ldr	r3, [r7, #16]
        return;
 80054e4:	e082      	b.n	80055ec <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80054e6:	69bb      	ldr	r3, [r7, #24]
 80054e8:	095b      	lsrs	r3, r3, #5
 80054ea:	f003 0301 	and.w	r3, r3, #1
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d014      	beq.n	800551c <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054f6:	f043 0201 	orr.w	r2, r3, #1
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80054fe:	2300      	movs	r3, #0
 8005500:	60fb      	str	r3, [r7, #12]
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	689b      	ldr	r3, [r3, #8]
 8005508:	60fb      	str	r3, [r7, #12]
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	681a      	ldr	r2, [r3, #0]
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005518:	601a      	str	r2, [r3, #0]
 800551a:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800551c:	69bb      	ldr	r3, [r7, #24]
 800551e:	0a1b      	lsrs	r3, r3, #8
 8005520:	f003 0301 	and.w	r3, r3, #1
 8005524:	2b00      	cmp	r3, #0
 8005526:	d00c      	beq.n	8005542 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800552c:	f043 0208 	orr.w	r2, r3, #8
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8005534:	2300      	movs	r3, #0
 8005536:	60bb      	str	r3, [r7, #8]
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	689b      	ldr	r3, [r3, #8]
 800553e:	60bb      	str	r3, [r7, #8]
 8005540:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005546:	2b00      	cmp	r3, #0
 8005548:	d04f      	beq.n	80055ea <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	685a      	ldr	r2, [r3, #4]
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005558:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	2201      	movs	r2, #1
 800555e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8005562:	69fb      	ldr	r3, [r7, #28]
 8005564:	f003 0302 	and.w	r3, r3, #2
 8005568:	2b00      	cmp	r3, #0
 800556a:	d104      	bne.n	8005576 <HAL_SPI_IRQHandler+0x17e>
 800556c:	69fb      	ldr	r3, [r7, #28]
 800556e:	f003 0301 	and.w	r3, r3, #1
 8005572:	2b00      	cmp	r3, #0
 8005574:	d034      	beq.n	80055e0 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	685a      	ldr	r2, [r3, #4]
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f022 0203 	bic.w	r2, r2, #3
 8005584:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800558a:	2b00      	cmp	r3, #0
 800558c:	d011      	beq.n	80055b2 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005592:	4a18      	ldr	r2, [pc, #96]	; (80055f4 <HAL_SPI_IRQHandler+0x1fc>)
 8005594:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800559a:	4618      	mov	r0, r3
 800559c:	f7fc fd7c 	bl	8002098 <HAL_DMA_Abort_IT>
 80055a0:	4603      	mov	r3, r0
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d005      	beq.n	80055b2 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055aa:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d016      	beq.n	80055e8 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80055be:	4a0d      	ldr	r2, [pc, #52]	; (80055f4 <HAL_SPI_IRQHandler+0x1fc>)
 80055c0:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80055c6:	4618      	mov	r0, r3
 80055c8:	f7fc fd66 	bl	8002098 <HAL_DMA_Abort_IT>
 80055cc:	4603      	mov	r3, r0
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d00a      	beq.n	80055e8 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055d6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 80055de:	e003      	b.n	80055e8 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80055e0:	6878      	ldr	r0, [r7, #4]
 80055e2:	f7fb fb4b 	bl	8000c7c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80055e6:	e000      	b.n	80055ea <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 80055e8:	bf00      	nop
    return;
 80055ea:	bf00      	nop
  }
}
 80055ec:	3720      	adds	r7, #32
 80055ee:	46bd      	mov	sp, r7
 80055f0:	bd80      	pop	{r7, pc}
 80055f2:	bf00      	nop
 80055f4:	080057e5 	.word	0x080057e5

080055f8 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80055f8:	b480      	push	{r7}
 80055fa:	b083      	sub	sp, #12
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8005600:	bf00      	nop
 8005602:	370c      	adds	r7, #12
 8005604:	46bd      	mov	sp, r7
 8005606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560a:	4770      	bx	lr

0800560c <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800560c:	b480      	push	{r7}
 800560e:	b083      	sub	sp, #12
 8005610:	af00      	add	r7, sp, #0
 8005612:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8005614:	bf00      	nop
 8005616:	370c      	adds	r7, #12
 8005618:	46bd      	mov	sp, r7
 800561a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561e:	4770      	bx	lr

08005620 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005620:	b480      	push	{r7}
 8005622:	b083      	sub	sp, #12
 8005624:	af00      	add	r7, sp, #0
 8005626:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8005628:	bf00      	nop
 800562a:	370c      	adds	r7, #12
 800562c:	46bd      	mov	sp, r7
 800562e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005632:	4770      	bx	lr

08005634 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005634:	b580      	push	{r7, lr}
 8005636:	b084      	sub	sp, #16
 8005638:	af00      	add	r7, sp, #0
 800563a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005640:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005642:	f7fc fa67 	bl	8001b14 <HAL_GetTick>
 8005646:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005652:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005656:	d03b      	beq.n	80056d0 <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	685a      	ldr	r2, [r3, #4]
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f022 0220 	bic.w	r2, r2, #32
 8005666:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	689b      	ldr	r3, [r3, #8]
 800566c:	2b00      	cmp	r3, #0
 800566e:	d10d      	bne.n	800568c <SPI_DMAReceiveCplt+0x58>
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	685b      	ldr	r3, [r3, #4]
 8005674:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005678:	d108      	bne.n	800568c <SPI_DMAReceiveCplt+0x58>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	685a      	ldr	r2, [r3, #4]
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	f022 0203 	bic.w	r2, r2, #3
 8005688:	605a      	str	r2, [r3, #4]
 800568a:	e007      	b.n	800569c <SPI_DMAReceiveCplt+0x68>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	685a      	ldr	r2, [r3, #4]
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	f022 0201 	bic.w	r2, r2, #1
 800569a:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800569c:	68ba      	ldr	r2, [r7, #8]
 800569e:	2164      	movs	r1, #100	; 0x64
 80056a0:	68f8      	ldr	r0, [r7, #12]
 80056a2:	f000 f93b 	bl	800591c <SPI_EndRxTransaction>
 80056a6:	4603      	mov	r3, r0
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d002      	beq.n	80056b2 <SPI_DMAReceiveCplt+0x7e>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	2220      	movs	r2, #32
 80056b0:	655a      	str	r2, [r3, #84]	; 0x54
    }

    hspi->RxXferCount = 0U;
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	2200      	movs	r2, #0
 80056b6:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	2201      	movs	r2, #1
 80056bc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d003      	beq.n	80056d0 <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80056c8:	68f8      	ldr	r0, [r7, #12]
 80056ca:	f7fb fad7 	bl	8000c7c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80056ce:	e002      	b.n	80056d6 <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 80056d0:	68f8      	ldr	r0, [r7, #12]
 80056d2:	f7fb fae5 	bl	8000ca0 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80056d6:	3710      	adds	r7, #16
 80056d8:	46bd      	mov	sp, r7
 80056da:	bd80      	pop	{r7, pc}

080056dc <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80056dc:	b580      	push	{r7, lr}
 80056de:	b084      	sub	sp, #16
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056e8:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80056ea:	f7fc fa13 	bl	8001b14 <HAL_GetTick>
 80056ee:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80056fe:	d02f      	beq.n	8005760 <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	685a      	ldr	r2, [r3, #4]
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	f022 0220 	bic.w	r2, r2, #32
 800570e:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8005710:	68ba      	ldr	r2, [r7, #8]
 8005712:	2164      	movs	r1, #100	; 0x64
 8005714:	68f8      	ldr	r0, [r7, #12]
 8005716:	f000 f967 	bl	80059e8 <SPI_EndRxTxTransaction>
 800571a:	4603      	mov	r3, r0
 800571c:	2b00      	cmp	r3, #0
 800571e:	d005      	beq.n	800572c <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005724:	f043 0220 	orr.w	r2, r3, #32
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	685a      	ldr	r2, [r3, #4]
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	f022 0203 	bic.w	r2, r2, #3
 800573a:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	2200      	movs	r2, #0
 8005740:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->RxXferCount = 0U;
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	2200      	movs	r2, #0
 8005746:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	2201      	movs	r2, #1
 800574c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005754:	2b00      	cmp	r3, #0
 8005756:	d003      	beq.n	8005760 <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8005758:	68f8      	ldr	r0, [r7, #12]
 800575a:	f7fb fa8f 	bl	8000c7c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800575e:	e002      	b.n	8005766 <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 8005760:	68f8      	ldr	r0, [r7, #12]
 8005762:	f7ff ff49 	bl	80055f8 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005766:	3710      	adds	r7, #16
 8005768:	46bd      	mov	sp, r7
 800576a:	bd80      	pop	{r7, pc}

0800576c <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800576c:	b580      	push	{r7, lr}
 800576e:	b084      	sub	sp, #16
 8005770:	af00      	add	r7, sp, #0
 8005772:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005778:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 800577a:	68f8      	ldr	r0, [r7, #12]
 800577c:	f7ff ff46 	bl	800560c <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005780:	bf00      	nop
 8005782:	3710      	adds	r7, #16
 8005784:	46bd      	mov	sp, r7
 8005786:	bd80      	pop	{r7, pc}

08005788 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005788:	b580      	push	{r7, lr}
 800578a:	b084      	sub	sp, #16
 800578c:	af00      	add	r7, sp, #0
 800578e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005794:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 8005796:	68f8      	ldr	r0, [r7, #12]
 8005798:	f7ff ff42 	bl	8005620 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800579c:	bf00      	nop
 800579e:	3710      	adds	r7, #16
 80057a0:	46bd      	mov	sp, r7
 80057a2:	bd80      	pop	{r7, pc}

080057a4 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 80057a4:	b580      	push	{r7, lr}
 80057a6:	b084      	sub	sp, #16
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057b0:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	685a      	ldr	r2, [r3, #4]
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	f022 0203 	bic.w	r2, r2, #3
 80057c0:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057c6:	f043 0210 	orr.w	r2, r3, #16
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	2201      	movs	r2, #1
 80057d2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80057d6:	68f8      	ldr	r0, [r7, #12]
 80057d8:	f7fb fa50 	bl	8000c7c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80057dc:	bf00      	nop
 80057de:	3710      	adds	r7, #16
 80057e0:	46bd      	mov	sp, r7
 80057e2:	bd80      	pop	{r7, pc}

080057e4 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80057e4:	b580      	push	{r7, lr}
 80057e6:	b084      	sub	sp, #16
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057f0:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	2200      	movs	r2, #0
 80057f6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	2200      	movs	r2, #0
 80057fc:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80057fe:	68f8      	ldr	r0, [r7, #12]
 8005800:	f7fb fa3c 	bl	8000c7c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005804:	bf00      	nop
 8005806:	3710      	adds	r7, #16
 8005808:	46bd      	mov	sp, r7
 800580a:	bd80      	pop	{r7, pc}

0800580c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800580c:	b580      	push	{r7, lr}
 800580e:	b088      	sub	sp, #32
 8005810:	af00      	add	r7, sp, #0
 8005812:	60f8      	str	r0, [r7, #12]
 8005814:	60b9      	str	r1, [r7, #8]
 8005816:	603b      	str	r3, [r7, #0]
 8005818:	4613      	mov	r3, r2
 800581a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800581c:	f7fc f97a 	bl	8001b14 <HAL_GetTick>
 8005820:	4602      	mov	r2, r0
 8005822:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005824:	1a9b      	subs	r3, r3, r2
 8005826:	683a      	ldr	r2, [r7, #0]
 8005828:	4413      	add	r3, r2
 800582a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800582c:	f7fc f972 	bl	8001b14 <HAL_GetTick>
 8005830:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005832:	4b39      	ldr	r3, [pc, #228]	; (8005918 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	015b      	lsls	r3, r3, #5
 8005838:	0d1b      	lsrs	r3, r3, #20
 800583a:	69fa      	ldr	r2, [r7, #28]
 800583c:	fb02 f303 	mul.w	r3, r2, r3
 8005840:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005842:	e054      	b.n	80058ee <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005844:	683b      	ldr	r3, [r7, #0]
 8005846:	f1b3 3fff 	cmp.w	r3, #4294967295
 800584a:	d050      	beq.n	80058ee <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800584c:	f7fc f962 	bl	8001b14 <HAL_GetTick>
 8005850:	4602      	mov	r2, r0
 8005852:	69bb      	ldr	r3, [r7, #24]
 8005854:	1ad3      	subs	r3, r2, r3
 8005856:	69fa      	ldr	r2, [r7, #28]
 8005858:	429a      	cmp	r2, r3
 800585a:	d902      	bls.n	8005862 <SPI_WaitFlagStateUntilTimeout+0x56>
 800585c:	69fb      	ldr	r3, [r7, #28]
 800585e:	2b00      	cmp	r3, #0
 8005860:	d13d      	bne.n	80058de <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	685a      	ldr	r2, [r3, #4]
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005870:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	685b      	ldr	r3, [r3, #4]
 8005876:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800587a:	d111      	bne.n	80058a0 <SPI_WaitFlagStateUntilTimeout+0x94>
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	689b      	ldr	r3, [r3, #8]
 8005880:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005884:	d004      	beq.n	8005890 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	689b      	ldr	r3, [r3, #8]
 800588a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800588e:	d107      	bne.n	80058a0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	681a      	ldr	r2, [r3, #0]
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800589e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80058a8:	d10f      	bne.n	80058ca <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	681a      	ldr	r2, [r3, #0]
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80058b8:	601a      	str	r2, [r3, #0]
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	681a      	ldr	r2, [r3, #0]
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80058c8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	2201      	movs	r2, #1
 80058ce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	2200      	movs	r2, #0
 80058d6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80058da:	2303      	movs	r3, #3
 80058dc:	e017      	b.n	800590e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80058de:	697b      	ldr	r3, [r7, #20]
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d101      	bne.n	80058e8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80058e4:	2300      	movs	r3, #0
 80058e6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80058e8:	697b      	ldr	r3, [r7, #20]
 80058ea:	3b01      	subs	r3, #1
 80058ec:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	689a      	ldr	r2, [r3, #8]
 80058f4:	68bb      	ldr	r3, [r7, #8]
 80058f6:	4013      	ands	r3, r2
 80058f8:	68ba      	ldr	r2, [r7, #8]
 80058fa:	429a      	cmp	r2, r3
 80058fc:	bf0c      	ite	eq
 80058fe:	2301      	moveq	r3, #1
 8005900:	2300      	movne	r3, #0
 8005902:	b2db      	uxtb	r3, r3
 8005904:	461a      	mov	r2, r3
 8005906:	79fb      	ldrb	r3, [r7, #7]
 8005908:	429a      	cmp	r2, r3
 800590a:	d19b      	bne.n	8005844 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800590c:	2300      	movs	r3, #0
}
 800590e:	4618      	mov	r0, r3
 8005910:	3720      	adds	r7, #32
 8005912:	46bd      	mov	sp, r7
 8005914:	bd80      	pop	{r7, pc}
 8005916:	bf00      	nop
 8005918:	20000004 	.word	0x20000004

0800591c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800591c:	b580      	push	{r7, lr}
 800591e:	b086      	sub	sp, #24
 8005920:	af02      	add	r7, sp, #8
 8005922:	60f8      	str	r0, [r7, #12]
 8005924:	60b9      	str	r1, [r7, #8]
 8005926:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	685b      	ldr	r3, [r3, #4]
 800592c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005930:	d111      	bne.n	8005956 <SPI_EndRxTransaction+0x3a>
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	689b      	ldr	r3, [r3, #8]
 8005936:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800593a:	d004      	beq.n	8005946 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	689b      	ldr	r3, [r3, #8]
 8005940:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005944:	d107      	bne.n	8005956 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	681a      	ldr	r2, [r3, #0]
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005954:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	685b      	ldr	r3, [r3, #4]
 800595a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800595e:	d12a      	bne.n	80059b6 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	689b      	ldr	r3, [r3, #8]
 8005964:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005968:	d012      	beq.n	8005990 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	9300      	str	r3, [sp, #0]
 800596e:	68bb      	ldr	r3, [r7, #8]
 8005970:	2200      	movs	r2, #0
 8005972:	2180      	movs	r1, #128	; 0x80
 8005974:	68f8      	ldr	r0, [r7, #12]
 8005976:	f7ff ff49 	bl	800580c <SPI_WaitFlagStateUntilTimeout>
 800597a:	4603      	mov	r3, r0
 800597c:	2b00      	cmp	r3, #0
 800597e:	d02d      	beq.n	80059dc <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005984:	f043 0220 	orr.w	r2, r3, #32
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800598c:	2303      	movs	r3, #3
 800598e:	e026      	b.n	80059de <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	9300      	str	r3, [sp, #0]
 8005994:	68bb      	ldr	r3, [r7, #8]
 8005996:	2200      	movs	r2, #0
 8005998:	2101      	movs	r1, #1
 800599a:	68f8      	ldr	r0, [r7, #12]
 800599c:	f7ff ff36 	bl	800580c <SPI_WaitFlagStateUntilTimeout>
 80059a0:	4603      	mov	r3, r0
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d01a      	beq.n	80059dc <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059aa:	f043 0220 	orr.w	r2, r3, #32
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80059b2:	2303      	movs	r3, #3
 80059b4:	e013      	b.n	80059de <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	9300      	str	r3, [sp, #0]
 80059ba:	68bb      	ldr	r3, [r7, #8]
 80059bc:	2200      	movs	r2, #0
 80059be:	2101      	movs	r1, #1
 80059c0:	68f8      	ldr	r0, [r7, #12]
 80059c2:	f7ff ff23 	bl	800580c <SPI_WaitFlagStateUntilTimeout>
 80059c6:	4603      	mov	r3, r0
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d007      	beq.n	80059dc <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059d0:	f043 0220 	orr.w	r2, r3, #32
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80059d8:	2303      	movs	r3, #3
 80059da:	e000      	b.n	80059de <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80059dc:	2300      	movs	r3, #0
}
 80059de:	4618      	mov	r0, r3
 80059e0:	3710      	adds	r7, #16
 80059e2:	46bd      	mov	sp, r7
 80059e4:	bd80      	pop	{r7, pc}
	...

080059e8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80059e8:	b580      	push	{r7, lr}
 80059ea:	b088      	sub	sp, #32
 80059ec:	af02      	add	r7, sp, #8
 80059ee:	60f8      	str	r0, [r7, #12]
 80059f0:	60b9      	str	r1, [r7, #8]
 80059f2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80059f4:	4b1b      	ldr	r3, [pc, #108]	; (8005a64 <SPI_EndRxTxTransaction+0x7c>)
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	4a1b      	ldr	r2, [pc, #108]	; (8005a68 <SPI_EndRxTxTransaction+0x80>)
 80059fa:	fba2 2303 	umull	r2, r3, r2, r3
 80059fe:	0d5b      	lsrs	r3, r3, #21
 8005a00:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005a04:	fb02 f303 	mul.w	r3, r2, r3
 8005a08:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	685b      	ldr	r3, [r3, #4]
 8005a0e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005a12:	d112      	bne.n	8005a3a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	9300      	str	r3, [sp, #0]
 8005a18:	68bb      	ldr	r3, [r7, #8]
 8005a1a:	2200      	movs	r2, #0
 8005a1c:	2180      	movs	r1, #128	; 0x80
 8005a1e:	68f8      	ldr	r0, [r7, #12]
 8005a20:	f7ff fef4 	bl	800580c <SPI_WaitFlagStateUntilTimeout>
 8005a24:	4603      	mov	r3, r0
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d016      	beq.n	8005a58 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a2e:	f043 0220 	orr.w	r2, r3, #32
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005a36:	2303      	movs	r3, #3
 8005a38:	e00f      	b.n	8005a5a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005a3a:	697b      	ldr	r3, [r7, #20]
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d00a      	beq.n	8005a56 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8005a40:	697b      	ldr	r3, [r7, #20]
 8005a42:	3b01      	subs	r3, #1
 8005a44:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	689b      	ldr	r3, [r3, #8]
 8005a4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a50:	2b80      	cmp	r3, #128	; 0x80
 8005a52:	d0f2      	beq.n	8005a3a <SPI_EndRxTxTransaction+0x52>
 8005a54:	e000      	b.n	8005a58 <SPI_EndRxTxTransaction+0x70>
        break;
 8005a56:	bf00      	nop
  }

  return HAL_OK;
 8005a58:	2300      	movs	r3, #0
}
 8005a5a:	4618      	mov	r0, r3
 8005a5c:	3718      	adds	r7, #24
 8005a5e:	46bd      	mov	sp, r7
 8005a60:	bd80      	pop	{r7, pc}
 8005a62:	bf00      	nop
 8005a64:	20000004 	.word	0x20000004
 8005a68:	165e9f81 	.word	0x165e9f81

08005a6c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005a6c:	b580      	push	{r7, lr}
 8005a6e:	b082      	sub	sp, #8
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d101      	bne.n	8005a7e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005a7a:	2301      	movs	r3, #1
 8005a7c:	e041      	b.n	8005b02 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a84:	b2db      	uxtb	r3, r3
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d106      	bne.n	8005a98 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	2200      	movs	r2, #0
 8005a8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005a92:	6878      	ldr	r0, [r7, #4]
 8005a94:	f7fb feba 	bl	800180c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	2202      	movs	r2, #2
 8005a9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681a      	ldr	r2, [r3, #0]
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	3304      	adds	r3, #4
 8005aa8:	4619      	mov	r1, r3
 8005aaa:	4610      	mov	r0, r2
 8005aac:	f000 fcf0 	bl	8006490 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	2201      	movs	r2, #1
 8005ab4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	2201      	movs	r2, #1
 8005abc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	2201      	movs	r2, #1
 8005ac4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	2201      	movs	r2, #1
 8005acc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	2201      	movs	r2, #1
 8005ad4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	2201      	movs	r2, #1
 8005adc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	2201      	movs	r2, #1
 8005ae4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	2201      	movs	r2, #1
 8005aec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	2201      	movs	r2, #1
 8005af4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	2201      	movs	r2, #1
 8005afc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005b00:	2300      	movs	r3, #0
}
 8005b02:	4618      	mov	r0, r3
 8005b04:	3708      	adds	r7, #8
 8005b06:	46bd      	mov	sp, r7
 8005b08:	bd80      	pop	{r7, pc}

08005b0a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005b0a:	b580      	push	{r7, lr}
 8005b0c:	b082      	sub	sp, #8
 8005b0e:	af00      	add	r7, sp, #0
 8005b10:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d101      	bne.n	8005b1c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005b18:	2301      	movs	r3, #1
 8005b1a:	e041      	b.n	8005ba0 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b22:	b2db      	uxtb	r3, r3
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d106      	bne.n	8005b36 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	2200      	movs	r2, #0
 8005b2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005b30:	6878      	ldr	r0, [r7, #4]
 8005b32:	f000 f839 	bl	8005ba8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	2202      	movs	r2, #2
 8005b3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681a      	ldr	r2, [r3, #0]
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	3304      	adds	r3, #4
 8005b46:	4619      	mov	r1, r3
 8005b48:	4610      	mov	r0, r2
 8005b4a:	f000 fca1 	bl	8006490 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	2201      	movs	r2, #1
 8005b52:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	2201      	movs	r2, #1
 8005b5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	2201      	movs	r2, #1
 8005b62:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	2201      	movs	r2, #1
 8005b6a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	2201      	movs	r2, #1
 8005b72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	2201      	movs	r2, #1
 8005b7a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	2201      	movs	r2, #1
 8005b82:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	2201      	movs	r2, #1
 8005b8a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	2201      	movs	r2, #1
 8005b92:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	2201      	movs	r2, #1
 8005b9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005b9e:	2300      	movs	r3, #0
}
 8005ba0:	4618      	mov	r0, r3
 8005ba2:	3708      	adds	r7, #8
 8005ba4:	46bd      	mov	sp, r7
 8005ba6:	bd80      	pop	{r7, pc}

08005ba8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005ba8:	b480      	push	{r7}
 8005baa:	b083      	sub	sp, #12
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005bb0:	bf00      	nop
 8005bb2:	370c      	adds	r7, #12
 8005bb4:	46bd      	mov	sp, r7
 8005bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bba:	4770      	bx	lr

08005bbc <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005bbc:	b580      	push	{r7, lr}
 8005bbe:	b084      	sub	sp, #16
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	6078      	str	r0, [r7, #4]
 8005bc4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005bc6:	2300      	movs	r3, #0
 8005bc8:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005bca:	683b      	ldr	r3, [r7, #0]
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d109      	bne.n	8005be4 <HAL_TIM_PWM_Start_IT+0x28>
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005bd6:	b2db      	uxtb	r3, r3
 8005bd8:	2b01      	cmp	r3, #1
 8005bda:	bf14      	ite	ne
 8005bdc:	2301      	movne	r3, #1
 8005bde:	2300      	moveq	r3, #0
 8005be0:	b2db      	uxtb	r3, r3
 8005be2:	e022      	b.n	8005c2a <HAL_TIM_PWM_Start_IT+0x6e>
 8005be4:	683b      	ldr	r3, [r7, #0]
 8005be6:	2b04      	cmp	r3, #4
 8005be8:	d109      	bne.n	8005bfe <HAL_TIM_PWM_Start_IT+0x42>
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005bf0:	b2db      	uxtb	r3, r3
 8005bf2:	2b01      	cmp	r3, #1
 8005bf4:	bf14      	ite	ne
 8005bf6:	2301      	movne	r3, #1
 8005bf8:	2300      	moveq	r3, #0
 8005bfa:	b2db      	uxtb	r3, r3
 8005bfc:	e015      	b.n	8005c2a <HAL_TIM_PWM_Start_IT+0x6e>
 8005bfe:	683b      	ldr	r3, [r7, #0]
 8005c00:	2b08      	cmp	r3, #8
 8005c02:	d109      	bne.n	8005c18 <HAL_TIM_PWM_Start_IT+0x5c>
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005c0a:	b2db      	uxtb	r3, r3
 8005c0c:	2b01      	cmp	r3, #1
 8005c0e:	bf14      	ite	ne
 8005c10:	2301      	movne	r3, #1
 8005c12:	2300      	moveq	r3, #0
 8005c14:	b2db      	uxtb	r3, r3
 8005c16:	e008      	b.n	8005c2a <HAL_TIM_PWM_Start_IT+0x6e>
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005c1e:	b2db      	uxtb	r3, r3
 8005c20:	2b01      	cmp	r3, #1
 8005c22:	bf14      	ite	ne
 8005c24:	2301      	movne	r3, #1
 8005c26:	2300      	moveq	r3, #0
 8005c28:	b2db      	uxtb	r3, r3
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d001      	beq.n	8005c32 <HAL_TIM_PWM_Start_IT+0x76>
  {
    return HAL_ERROR;
 8005c2e:	2301      	movs	r3, #1
 8005c30:	e0b3      	b.n	8005d9a <HAL_TIM_PWM_Start_IT+0x1de>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005c32:	683b      	ldr	r3, [r7, #0]
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d104      	bne.n	8005c42 <HAL_TIM_PWM_Start_IT+0x86>
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	2202      	movs	r2, #2
 8005c3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005c40:	e013      	b.n	8005c6a <HAL_TIM_PWM_Start_IT+0xae>
 8005c42:	683b      	ldr	r3, [r7, #0]
 8005c44:	2b04      	cmp	r3, #4
 8005c46:	d104      	bne.n	8005c52 <HAL_TIM_PWM_Start_IT+0x96>
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	2202      	movs	r2, #2
 8005c4c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005c50:	e00b      	b.n	8005c6a <HAL_TIM_PWM_Start_IT+0xae>
 8005c52:	683b      	ldr	r3, [r7, #0]
 8005c54:	2b08      	cmp	r3, #8
 8005c56:	d104      	bne.n	8005c62 <HAL_TIM_PWM_Start_IT+0xa6>
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	2202      	movs	r2, #2
 8005c5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005c60:	e003      	b.n	8005c6a <HAL_TIM_PWM_Start_IT+0xae>
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	2202      	movs	r2, #2
 8005c66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  switch (Channel)
 8005c6a:	683b      	ldr	r3, [r7, #0]
 8005c6c:	2b0c      	cmp	r3, #12
 8005c6e:	d841      	bhi.n	8005cf4 <HAL_TIM_PWM_Start_IT+0x138>
 8005c70:	a201      	add	r2, pc, #4	; (adr r2, 8005c78 <HAL_TIM_PWM_Start_IT+0xbc>)
 8005c72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c76:	bf00      	nop
 8005c78:	08005cad 	.word	0x08005cad
 8005c7c:	08005cf5 	.word	0x08005cf5
 8005c80:	08005cf5 	.word	0x08005cf5
 8005c84:	08005cf5 	.word	0x08005cf5
 8005c88:	08005cbf 	.word	0x08005cbf
 8005c8c:	08005cf5 	.word	0x08005cf5
 8005c90:	08005cf5 	.word	0x08005cf5
 8005c94:	08005cf5 	.word	0x08005cf5
 8005c98:	08005cd1 	.word	0x08005cd1
 8005c9c:	08005cf5 	.word	0x08005cf5
 8005ca0:	08005cf5 	.word	0x08005cf5
 8005ca4:	08005cf5 	.word	0x08005cf5
 8005ca8:	08005ce3 	.word	0x08005ce3
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	68da      	ldr	r2, [r3, #12]
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	f042 0202 	orr.w	r2, r2, #2
 8005cba:	60da      	str	r2, [r3, #12]
      break;
 8005cbc:	e01d      	b.n	8005cfa <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	68da      	ldr	r2, [r3, #12]
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	f042 0204 	orr.w	r2, r2, #4
 8005ccc:	60da      	str	r2, [r3, #12]
      break;
 8005cce:	e014      	b.n	8005cfa <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	68da      	ldr	r2, [r3, #12]
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	f042 0208 	orr.w	r2, r2, #8
 8005cde:	60da      	str	r2, [r3, #12]
      break;
 8005ce0:	e00b      	b.n	8005cfa <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	68da      	ldr	r2, [r3, #12]
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	f042 0210 	orr.w	r2, r2, #16
 8005cf0:	60da      	str	r2, [r3, #12]
      break;
 8005cf2:	e002      	b.n	8005cfa <HAL_TIM_PWM_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 8005cf4:	2301      	movs	r3, #1
 8005cf6:	73fb      	strb	r3, [r7, #15]
      break;
 8005cf8:	bf00      	nop
  }

  if (status == HAL_OK)
 8005cfa:	7bfb      	ldrb	r3, [r7, #15]
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d14b      	bne.n	8005d98 <HAL_TIM_PWM_Start_IT+0x1dc>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	2201      	movs	r2, #1
 8005d06:	6839      	ldr	r1, [r7, #0]
 8005d08:	4618      	mov	r0, r3
 8005d0a:	f000 fe67 	bl	80069dc <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	4a24      	ldr	r2, [pc, #144]	; (8005da4 <HAL_TIM_PWM_Start_IT+0x1e8>)
 8005d14:	4293      	cmp	r3, r2
 8005d16:	d107      	bne.n	8005d28 <HAL_TIM_PWM_Start_IT+0x16c>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005d26:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	4a1d      	ldr	r2, [pc, #116]	; (8005da4 <HAL_TIM_PWM_Start_IT+0x1e8>)
 8005d2e:	4293      	cmp	r3, r2
 8005d30:	d018      	beq.n	8005d64 <HAL_TIM_PWM_Start_IT+0x1a8>
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d3a:	d013      	beq.n	8005d64 <HAL_TIM_PWM_Start_IT+0x1a8>
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	4a19      	ldr	r2, [pc, #100]	; (8005da8 <HAL_TIM_PWM_Start_IT+0x1ec>)
 8005d42:	4293      	cmp	r3, r2
 8005d44:	d00e      	beq.n	8005d64 <HAL_TIM_PWM_Start_IT+0x1a8>
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	4a18      	ldr	r2, [pc, #96]	; (8005dac <HAL_TIM_PWM_Start_IT+0x1f0>)
 8005d4c:	4293      	cmp	r3, r2
 8005d4e:	d009      	beq.n	8005d64 <HAL_TIM_PWM_Start_IT+0x1a8>
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	4a16      	ldr	r2, [pc, #88]	; (8005db0 <HAL_TIM_PWM_Start_IT+0x1f4>)
 8005d56:	4293      	cmp	r3, r2
 8005d58:	d004      	beq.n	8005d64 <HAL_TIM_PWM_Start_IT+0x1a8>
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	4a15      	ldr	r2, [pc, #84]	; (8005db4 <HAL_TIM_PWM_Start_IT+0x1f8>)
 8005d60:	4293      	cmp	r3, r2
 8005d62:	d111      	bne.n	8005d88 <HAL_TIM_PWM_Start_IT+0x1cc>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	689b      	ldr	r3, [r3, #8]
 8005d6a:	f003 0307 	and.w	r3, r3, #7
 8005d6e:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d70:	68bb      	ldr	r3, [r7, #8]
 8005d72:	2b06      	cmp	r3, #6
 8005d74:	d010      	beq.n	8005d98 <HAL_TIM_PWM_Start_IT+0x1dc>
      {
        __HAL_TIM_ENABLE(htim);
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	681a      	ldr	r2, [r3, #0]
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	f042 0201 	orr.w	r2, r2, #1
 8005d84:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d86:	e007      	b.n	8005d98 <HAL_TIM_PWM_Start_IT+0x1dc>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	681a      	ldr	r2, [r3, #0]
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	f042 0201 	orr.w	r2, r2, #1
 8005d96:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8005d98:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d9a:	4618      	mov	r0, r3
 8005d9c:	3710      	adds	r7, #16
 8005d9e:	46bd      	mov	sp, r7
 8005da0:	bd80      	pop	{r7, pc}
 8005da2:	bf00      	nop
 8005da4:	40010000 	.word	0x40010000
 8005da8:	40000400 	.word	0x40000400
 8005dac:	40000800 	.word	0x40000800
 8005db0:	40000c00 	.word	0x40000c00
 8005db4:	40014000 	.word	0x40014000

08005db8 <HAL_TIM_PWM_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005db8:	b580      	push	{r7, lr}
 8005dba:	b084      	sub	sp, #16
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	6078      	str	r0, [r7, #4]
 8005dc0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005dc2:	2300      	movs	r3, #0
 8005dc4:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8005dc6:	683b      	ldr	r3, [r7, #0]
 8005dc8:	2b0c      	cmp	r3, #12
 8005dca:	d841      	bhi.n	8005e50 <HAL_TIM_PWM_Stop_IT+0x98>
 8005dcc:	a201      	add	r2, pc, #4	; (adr r2, 8005dd4 <HAL_TIM_PWM_Stop_IT+0x1c>)
 8005dce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dd2:	bf00      	nop
 8005dd4:	08005e09 	.word	0x08005e09
 8005dd8:	08005e51 	.word	0x08005e51
 8005ddc:	08005e51 	.word	0x08005e51
 8005de0:	08005e51 	.word	0x08005e51
 8005de4:	08005e1b 	.word	0x08005e1b
 8005de8:	08005e51 	.word	0x08005e51
 8005dec:	08005e51 	.word	0x08005e51
 8005df0:	08005e51 	.word	0x08005e51
 8005df4:	08005e2d 	.word	0x08005e2d
 8005df8:	08005e51 	.word	0x08005e51
 8005dfc:	08005e51 	.word	0x08005e51
 8005e00:	08005e51 	.word	0x08005e51
 8005e04:	08005e3f 	.word	0x08005e3f
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	68da      	ldr	r2, [r3, #12]
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	f022 0202 	bic.w	r2, r2, #2
 8005e16:	60da      	str	r2, [r3, #12]
      break;
 8005e18:	e01d      	b.n	8005e56 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	68da      	ldr	r2, [r3, #12]
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	f022 0204 	bic.w	r2, r2, #4
 8005e28:	60da      	str	r2, [r3, #12]
      break;
 8005e2a:	e014      	b.n	8005e56 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	68da      	ldr	r2, [r3, #12]
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	f022 0208 	bic.w	r2, r2, #8
 8005e3a:	60da      	str	r2, [r3, #12]
      break;
 8005e3c:	e00b      	b.n	8005e56 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	68da      	ldr	r2, [r3, #12]
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	f022 0210 	bic.w	r2, r2, #16
 8005e4c:	60da      	str	r2, [r3, #12]
      break;
 8005e4e:	e002      	b.n	8005e56 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 8005e50:	2301      	movs	r3, #1
 8005e52:	73fb      	strb	r3, [r7, #15]
      break;
 8005e54:	bf00      	nop
  }

  if (status == HAL_OK)
 8005e56:	7bfb      	ldrb	r3, [r7, #15]
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d157      	bne.n	8005f0c <HAL_TIM_PWM_Stop_IT+0x154>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	2200      	movs	r2, #0
 8005e62:	6839      	ldr	r1, [r7, #0]
 8005e64:	4618      	mov	r0, r3
 8005e66:	f000 fdb9 	bl	80069dc <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	4a2a      	ldr	r2, [pc, #168]	; (8005f18 <HAL_TIM_PWM_Stop_IT+0x160>)
 8005e70:	4293      	cmp	r3, r2
 8005e72:	d117      	bne.n	8005ea4 <HAL_TIM_PWM_Stop_IT+0xec>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	6a1a      	ldr	r2, [r3, #32]
 8005e7a:	f241 1311 	movw	r3, #4369	; 0x1111
 8005e7e:	4013      	ands	r3, r2
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d10f      	bne.n	8005ea4 <HAL_TIM_PWM_Stop_IT+0xec>
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	6a1a      	ldr	r2, [r3, #32]
 8005e8a:	f240 4344 	movw	r3, #1092	; 0x444
 8005e8e:	4013      	ands	r3, r2
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d107      	bne.n	8005ea4 <HAL_TIM_PWM_Stop_IT+0xec>
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005ea2:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	6a1a      	ldr	r2, [r3, #32]
 8005eaa:	f241 1311 	movw	r3, #4369	; 0x1111
 8005eae:	4013      	ands	r3, r2
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d10f      	bne.n	8005ed4 <HAL_TIM_PWM_Stop_IT+0x11c>
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	6a1a      	ldr	r2, [r3, #32]
 8005eba:	f240 4344 	movw	r3, #1092	; 0x444
 8005ebe:	4013      	ands	r3, r2
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d107      	bne.n	8005ed4 <HAL_TIM_PWM_Stop_IT+0x11c>
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	681a      	ldr	r2, [r3, #0]
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	f022 0201 	bic.w	r2, r2, #1
 8005ed2:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005ed4:	683b      	ldr	r3, [r7, #0]
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d104      	bne.n	8005ee4 <HAL_TIM_PWM_Stop_IT+0x12c>
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	2201      	movs	r2, #1
 8005ede:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005ee2:	e013      	b.n	8005f0c <HAL_TIM_PWM_Stop_IT+0x154>
 8005ee4:	683b      	ldr	r3, [r7, #0]
 8005ee6:	2b04      	cmp	r3, #4
 8005ee8:	d104      	bne.n	8005ef4 <HAL_TIM_PWM_Stop_IT+0x13c>
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	2201      	movs	r2, #1
 8005eee:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005ef2:	e00b      	b.n	8005f0c <HAL_TIM_PWM_Stop_IT+0x154>
 8005ef4:	683b      	ldr	r3, [r7, #0]
 8005ef6:	2b08      	cmp	r3, #8
 8005ef8:	d104      	bne.n	8005f04 <HAL_TIM_PWM_Stop_IT+0x14c>
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	2201      	movs	r2, #1
 8005efe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005f02:	e003      	b.n	8005f0c <HAL_TIM_PWM_Stop_IT+0x154>
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	2201      	movs	r2, #1
 8005f08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 8005f0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f0e:	4618      	mov	r0, r3
 8005f10:	3710      	adds	r7, #16
 8005f12:	46bd      	mov	sp, r7
 8005f14:	bd80      	pop	{r7, pc}
 8005f16:	bf00      	nop
 8005f18:	40010000 	.word	0x40010000

08005f1c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005f1c:	b580      	push	{r7, lr}
 8005f1e:	b082      	sub	sp, #8
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	691b      	ldr	r3, [r3, #16]
 8005f2a:	f003 0302 	and.w	r3, r3, #2
 8005f2e:	2b02      	cmp	r3, #2
 8005f30:	d122      	bne.n	8005f78 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	68db      	ldr	r3, [r3, #12]
 8005f38:	f003 0302 	and.w	r3, r3, #2
 8005f3c:	2b02      	cmp	r3, #2
 8005f3e:	d11b      	bne.n	8005f78 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	f06f 0202 	mvn.w	r2, #2
 8005f48:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	2201      	movs	r2, #1
 8005f4e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	699b      	ldr	r3, [r3, #24]
 8005f56:	f003 0303 	and.w	r3, r3, #3
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d003      	beq.n	8005f66 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005f5e:	6878      	ldr	r0, [r7, #4]
 8005f60:	f000 fa81 	bl	8006466 <HAL_TIM_IC_CaptureCallback>
 8005f64:	e005      	b.n	8005f72 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f66:	6878      	ldr	r0, [r7, #4]
 8005f68:	f000 fa73 	bl	8006452 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f6c:	6878      	ldr	r0, [r7, #4]
 8005f6e:	f7fa febd 	bl	8000cec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	2200      	movs	r2, #0
 8005f76:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	691b      	ldr	r3, [r3, #16]
 8005f7e:	f003 0304 	and.w	r3, r3, #4
 8005f82:	2b04      	cmp	r3, #4
 8005f84:	d122      	bne.n	8005fcc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	68db      	ldr	r3, [r3, #12]
 8005f8c:	f003 0304 	and.w	r3, r3, #4
 8005f90:	2b04      	cmp	r3, #4
 8005f92:	d11b      	bne.n	8005fcc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	f06f 0204 	mvn.w	r2, #4
 8005f9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	2202      	movs	r2, #2
 8005fa2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	699b      	ldr	r3, [r3, #24]
 8005faa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d003      	beq.n	8005fba <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005fb2:	6878      	ldr	r0, [r7, #4]
 8005fb4:	f000 fa57 	bl	8006466 <HAL_TIM_IC_CaptureCallback>
 8005fb8:	e005      	b.n	8005fc6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005fba:	6878      	ldr	r0, [r7, #4]
 8005fbc:	f000 fa49 	bl	8006452 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005fc0:	6878      	ldr	r0, [r7, #4]
 8005fc2:	f7fa fe93 	bl	8000cec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	2200      	movs	r2, #0
 8005fca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	691b      	ldr	r3, [r3, #16]
 8005fd2:	f003 0308 	and.w	r3, r3, #8
 8005fd6:	2b08      	cmp	r3, #8
 8005fd8:	d122      	bne.n	8006020 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	68db      	ldr	r3, [r3, #12]
 8005fe0:	f003 0308 	and.w	r3, r3, #8
 8005fe4:	2b08      	cmp	r3, #8
 8005fe6:	d11b      	bne.n	8006020 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	f06f 0208 	mvn.w	r2, #8
 8005ff0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	2204      	movs	r2, #4
 8005ff6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	69db      	ldr	r3, [r3, #28]
 8005ffe:	f003 0303 	and.w	r3, r3, #3
 8006002:	2b00      	cmp	r3, #0
 8006004:	d003      	beq.n	800600e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006006:	6878      	ldr	r0, [r7, #4]
 8006008:	f000 fa2d 	bl	8006466 <HAL_TIM_IC_CaptureCallback>
 800600c:	e005      	b.n	800601a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800600e:	6878      	ldr	r0, [r7, #4]
 8006010:	f000 fa1f 	bl	8006452 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006014:	6878      	ldr	r0, [r7, #4]
 8006016:	f7fa fe69 	bl	8000cec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	2200      	movs	r2, #0
 800601e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	691b      	ldr	r3, [r3, #16]
 8006026:	f003 0310 	and.w	r3, r3, #16
 800602a:	2b10      	cmp	r3, #16
 800602c:	d122      	bne.n	8006074 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	68db      	ldr	r3, [r3, #12]
 8006034:	f003 0310 	and.w	r3, r3, #16
 8006038:	2b10      	cmp	r3, #16
 800603a:	d11b      	bne.n	8006074 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	f06f 0210 	mvn.w	r2, #16
 8006044:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	2208      	movs	r2, #8
 800604a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	69db      	ldr	r3, [r3, #28]
 8006052:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006056:	2b00      	cmp	r3, #0
 8006058:	d003      	beq.n	8006062 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800605a:	6878      	ldr	r0, [r7, #4]
 800605c:	f000 fa03 	bl	8006466 <HAL_TIM_IC_CaptureCallback>
 8006060:	e005      	b.n	800606e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006062:	6878      	ldr	r0, [r7, #4]
 8006064:	f000 f9f5 	bl	8006452 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006068:	6878      	ldr	r0, [r7, #4]
 800606a:	f7fa fe3f 	bl	8000cec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	2200      	movs	r2, #0
 8006072:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	691b      	ldr	r3, [r3, #16]
 800607a:	f003 0301 	and.w	r3, r3, #1
 800607e:	2b01      	cmp	r3, #1
 8006080:	d10e      	bne.n	80060a0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	68db      	ldr	r3, [r3, #12]
 8006088:	f003 0301 	and.w	r3, r3, #1
 800608c:	2b01      	cmp	r3, #1
 800608e:	d107      	bne.n	80060a0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	f06f 0201 	mvn.w	r2, #1
 8006098:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800609a:	6878      	ldr	r0, [r7, #4]
 800609c:	f000 f9cf 	bl	800643e <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	691b      	ldr	r3, [r3, #16]
 80060a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060aa:	2b80      	cmp	r3, #128	; 0x80
 80060ac:	d10e      	bne.n	80060cc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	68db      	ldr	r3, [r3, #12]
 80060b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060b8:	2b80      	cmp	r3, #128	; 0x80
 80060ba:	d107      	bne.n	80060cc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80060c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80060c6:	6878      	ldr	r0, [r7, #4]
 80060c8:	f000 fd78 	bl	8006bbc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	691b      	ldr	r3, [r3, #16]
 80060d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060d6:	2b40      	cmp	r3, #64	; 0x40
 80060d8:	d10e      	bne.n	80060f8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	68db      	ldr	r3, [r3, #12]
 80060e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060e4:	2b40      	cmp	r3, #64	; 0x40
 80060e6:	d107      	bne.n	80060f8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80060f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80060f2:	6878      	ldr	r0, [r7, #4]
 80060f4:	f000 f9c1 	bl	800647a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	691b      	ldr	r3, [r3, #16]
 80060fe:	f003 0320 	and.w	r3, r3, #32
 8006102:	2b20      	cmp	r3, #32
 8006104:	d10e      	bne.n	8006124 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	68db      	ldr	r3, [r3, #12]
 800610c:	f003 0320 	and.w	r3, r3, #32
 8006110:	2b20      	cmp	r3, #32
 8006112:	d107      	bne.n	8006124 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	f06f 0220 	mvn.w	r2, #32
 800611c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800611e:	6878      	ldr	r0, [r7, #4]
 8006120:	f000 fd42 	bl	8006ba8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006124:	bf00      	nop
 8006126:	3708      	adds	r7, #8
 8006128:	46bd      	mov	sp, r7
 800612a:	bd80      	pop	{r7, pc}

0800612c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800612c:	b580      	push	{r7, lr}
 800612e:	b086      	sub	sp, #24
 8006130:	af00      	add	r7, sp, #0
 8006132:	60f8      	str	r0, [r7, #12]
 8006134:	60b9      	str	r1, [r7, #8]
 8006136:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006138:	2300      	movs	r3, #0
 800613a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006142:	2b01      	cmp	r3, #1
 8006144:	d101      	bne.n	800614a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006146:	2302      	movs	r3, #2
 8006148:	e0ae      	b.n	80062a8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	2201      	movs	r2, #1
 800614e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	2b0c      	cmp	r3, #12
 8006156:	f200 809f 	bhi.w	8006298 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800615a:	a201      	add	r2, pc, #4	; (adr r2, 8006160 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800615c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006160:	08006195 	.word	0x08006195
 8006164:	08006299 	.word	0x08006299
 8006168:	08006299 	.word	0x08006299
 800616c:	08006299 	.word	0x08006299
 8006170:	080061d5 	.word	0x080061d5
 8006174:	08006299 	.word	0x08006299
 8006178:	08006299 	.word	0x08006299
 800617c:	08006299 	.word	0x08006299
 8006180:	08006217 	.word	0x08006217
 8006184:	08006299 	.word	0x08006299
 8006188:	08006299 	.word	0x08006299
 800618c:	08006299 	.word	0x08006299
 8006190:	08006257 	.word	0x08006257
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	68b9      	ldr	r1, [r7, #8]
 800619a:	4618      	mov	r0, r3
 800619c:	f000 f9f8 	bl	8006590 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	699a      	ldr	r2, [r3, #24]
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	f042 0208 	orr.w	r2, r2, #8
 80061ae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	699a      	ldr	r2, [r3, #24]
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	f022 0204 	bic.w	r2, r2, #4
 80061be:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	6999      	ldr	r1, [r3, #24]
 80061c6:	68bb      	ldr	r3, [r7, #8]
 80061c8:	691a      	ldr	r2, [r3, #16]
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	430a      	orrs	r2, r1
 80061d0:	619a      	str	r2, [r3, #24]
      break;
 80061d2:	e064      	b.n	800629e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	68b9      	ldr	r1, [r7, #8]
 80061da:	4618      	mov	r0, r3
 80061dc:	f000 fa3e 	bl	800665c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	699a      	ldr	r2, [r3, #24]
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80061ee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	699a      	ldr	r2, [r3, #24]
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80061fe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	6999      	ldr	r1, [r3, #24]
 8006206:	68bb      	ldr	r3, [r7, #8]
 8006208:	691b      	ldr	r3, [r3, #16]
 800620a:	021a      	lsls	r2, r3, #8
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	430a      	orrs	r2, r1
 8006212:	619a      	str	r2, [r3, #24]
      break;
 8006214:	e043      	b.n	800629e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	68b9      	ldr	r1, [r7, #8]
 800621c:	4618      	mov	r0, r3
 800621e:	f000 fa89 	bl	8006734 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	69da      	ldr	r2, [r3, #28]
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	f042 0208 	orr.w	r2, r2, #8
 8006230:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	69da      	ldr	r2, [r3, #28]
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	f022 0204 	bic.w	r2, r2, #4
 8006240:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	69d9      	ldr	r1, [r3, #28]
 8006248:	68bb      	ldr	r3, [r7, #8]
 800624a:	691a      	ldr	r2, [r3, #16]
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	430a      	orrs	r2, r1
 8006252:	61da      	str	r2, [r3, #28]
      break;
 8006254:	e023      	b.n	800629e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	68b9      	ldr	r1, [r7, #8]
 800625c:	4618      	mov	r0, r3
 800625e:	f000 fad3 	bl	8006808 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	69da      	ldr	r2, [r3, #28]
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006270:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	69da      	ldr	r2, [r3, #28]
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006280:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	69d9      	ldr	r1, [r3, #28]
 8006288:	68bb      	ldr	r3, [r7, #8]
 800628a:	691b      	ldr	r3, [r3, #16]
 800628c:	021a      	lsls	r2, r3, #8
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	430a      	orrs	r2, r1
 8006294:	61da      	str	r2, [r3, #28]
      break;
 8006296:	e002      	b.n	800629e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006298:	2301      	movs	r3, #1
 800629a:	75fb      	strb	r3, [r7, #23]
      break;
 800629c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	2200      	movs	r2, #0
 80062a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80062a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80062a8:	4618      	mov	r0, r3
 80062aa:	3718      	adds	r7, #24
 80062ac:	46bd      	mov	sp, r7
 80062ae:	bd80      	pop	{r7, pc}

080062b0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80062b0:	b580      	push	{r7, lr}
 80062b2:	b084      	sub	sp, #16
 80062b4:	af00      	add	r7, sp, #0
 80062b6:	6078      	str	r0, [r7, #4]
 80062b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80062ba:	2300      	movs	r3, #0
 80062bc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80062c4:	2b01      	cmp	r3, #1
 80062c6:	d101      	bne.n	80062cc <HAL_TIM_ConfigClockSource+0x1c>
 80062c8:	2302      	movs	r3, #2
 80062ca:	e0b4      	b.n	8006436 <HAL_TIM_ConfigClockSource+0x186>
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	2201      	movs	r2, #1
 80062d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	2202      	movs	r2, #2
 80062d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	689b      	ldr	r3, [r3, #8]
 80062e2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80062e4:	68bb      	ldr	r3, [r7, #8]
 80062e6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80062ea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80062ec:	68bb      	ldr	r3, [r7, #8]
 80062ee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80062f2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	68ba      	ldr	r2, [r7, #8]
 80062fa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80062fc:	683b      	ldr	r3, [r7, #0]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006304:	d03e      	beq.n	8006384 <HAL_TIM_ConfigClockSource+0xd4>
 8006306:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800630a:	f200 8087 	bhi.w	800641c <HAL_TIM_ConfigClockSource+0x16c>
 800630e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006312:	f000 8086 	beq.w	8006422 <HAL_TIM_ConfigClockSource+0x172>
 8006316:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800631a:	d87f      	bhi.n	800641c <HAL_TIM_ConfigClockSource+0x16c>
 800631c:	2b70      	cmp	r3, #112	; 0x70
 800631e:	d01a      	beq.n	8006356 <HAL_TIM_ConfigClockSource+0xa6>
 8006320:	2b70      	cmp	r3, #112	; 0x70
 8006322:	d87b      	bhi.n	800641c <HAL_TIM_ConfigClockSource+0x16c>
 8006324:	2b60      	cmp	r3, #96	; 0x60
 8006326:	d050      	beq.n	80063ca <HAL_TIM_ConfigClockSource+0x11a>
 8006328:	2b60      	cmp	r3, #96	; 0x60
 800632a:	d877      	bhi.n	800641c <HAL_TIM_ConfigClockSource+0x16c>
 800632c:	2b50      	cmp	r3, #80	; 0x50
 800632e:	d03c      	beq.n	80063aa <HAL_TIM_ConfigClockSource+0xfa>
 8006330:	2b50      	cmp	r3, #80	; 0x50
 8006332:	d873      	bhi.n	800641c <HAL_TIM_ConfigClockSource+0x16c>
 8006334:	2b40      	cmp	r3, #64	; 0x40
 8006336:	d058      	beq.n	80063ea <HAL_TIM_ConfigClockSource+0x13a>
 8006338:	2b40      	cmp	r3, #64	; 0x40
 800633a:	d86f      	bhi.n	800641c <HAL_TIM_ConfigClockSource+0x16c>
 800633c:	2b30      	cmp	r3, #48	; 0x30
 800633e:	d064      	beq.n	800640a <HAL_TIM_ConfigClockSource+0x15a>
 8006340:	2b30      	cmp	r3, #48	; 0x30
 8006342:	d86b      	bhi.n	800641c <HAL_TIM_ConfigClockSource+0x16c>
 8006344:	2b20      	cmp	r3, #32
 8006346:	d060      	beq.n	800640a <HAL_TIM_ConfigClockSource+0x15a>
 8006348:	2b20      	cmp	r3, #32
 800634a:	d867      	bhi.n	800641c <HAL_TIM_ConfigClockSource+0x16c>
 800634c:	2b00      	cmp	r3, #0
 800634e:	d05c      	beq.n	800640a <HAL_TIM_ConfigClockSource+0x15a>
 8006350:	2b10      	cmp	r3, #16
 8006352:	d05a      	beq.n	800640a <HAL_TIM_ConfigClockSource+0x15a>
 8006354:	e062      	b.n	800641c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	6818      	ldr	r0, [r3, #0]
 800635a:	683b      	ldr	r3, [r7, #0]
 800635c:	6899      	ldr	r1, [r3, #8]
 800635e:	683b      	ldr	r3, [r7, #0]
 8006360:	685a      	ldr	r2, [r3, #4]
 8006362:	683b      	ldr	r3, [r7, #0]
 8006364:	68db      	ldr	r3, [r3, #12]
 8006366:	f000 fb19 	bl	800699c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	689b      	ldr	r3, [r3, #8]
 8006370:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006372:	68bb      	ldr	r3, [r7, #8]
 8006374:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006378:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	68ba      	ldr	r2, [r7, #8]
 8006380:	609a      	str	r2, [r3, #8]
      break;
 8006382:	e04f      	b.n	8006424 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	6818      	ldr	r0, [r3, #0]
 8006388:	683b      	ldr	r3, [r7, #0]
 800638a:	6899      	ldr	r1, [r3, #8]
 800638c:	683b      	ldr	r3, [r7, #0]
 800638e:	685a      	ldr	r2, [r3, #4]
 8006390:	683b      	ldr	r3, [r7, #0]
 8006392:	68db      	ldr	r3, [r3, #12]
 8006394:	f000 fb02 	bl	800699c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	689a      	ldr	r2, [r3, #8]
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80063a6:	609a      	str	r2, [r3, #8]
      break;
 80063a8:	e03c      	b.n	8006424 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	6818      	ldr	r0, [r3, #0]
 80063ae:	683b      	ldr	r3, [r7, #0]
 80063b0:	6859      	ldr	r1, [r3, #4]
 80063b2:	683b      	ldr	r3, [r7, #0]
 80063b4:	68db      	ldr	r3, [r3, #12]
 80063b6:	461a      	mov	r2, r3
 80063b8:	f000 fa76 	bl	80068a8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	2150      	movs	r1, #80	; 0x50
 80063c2:	4618      	mov	r0, r3
 80063c4:	f000 facf 	bl	8006966 <TIM_ITRx_SetConfig>
      break;
 80063c8:	e02c      	b.n	8006424 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	6818      	ldr	r0, [r3, #0]
 80063ce:	683b      	ldr	r3, [r7, #0]
 80063d0:	6859      	ldr	r1, [r3, #4]
 80063d2:	683b      	ldr	r3, [r7, #0]
 80063d4:	68db      	ldr	r3, [r3, #12]
 80063d6:	461a      	mov	r2, r3
 80063d8:	f000 fa95 	bl	8006906 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	2160      	movs	r1, #96	; 0x60
 80063e2:	4618      	mov	r0, r3
 80063e4:	f000 fabf 	bl	8006966 <TIM_ITRx_SetConfig>
      break;
 80063e8:	e01c      	b.n	8006424 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	6818      	ldr	r0, [r3, #0]
 80063ee:	683b      	ldr	r3, [r7, #0]
 80063f0:	6859      	ldr	r1, [r3, #4]
 80063f2:	683b      	ldr	r3, [r7, #0]
 80063f4:	68db      	ldr	r3, [r3, #12]
 80063f6:	461a      	mov	r2, r3
 80063f8:	f000 fa56 	bl	80068a8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	2140      	movs	r1, #64	; 0x40
 8006402:	4618      	mov	r0, r3
 8006404:	f000 faaf 	bl	8006966 <TIM_ITRx_SetConfig>
      break;
 8006408:	e00c      	b.n	8006424 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681a      	ldr	r2, [r3, #0]
 800640e:	683b      	ldr	r3, [r7, #0]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	4619      	mov	r1, r3
 8006414:	4610      	mov	r0, r2
 8006416:	f000 faa6 	bl	8006966 <TIM_ITRx_SetConfig>
      break;
 800641a:	e003      	b.n	8006424 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800641c:	2301      	movs	r3, #1
 800641e:	73fb      	strb	r3, [r7, #15]
      break;
 8006420:	e000      	b.n	8006424 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006422:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	2201      	movs	r2, #1
 8006428:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	2200      	movs	r2, #0
 8006430:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006434:	7bfb      	ldrb	r3, [r7, #15]
}
 8006436:	4618      	mov	r0, r3
 8006438:	3710      	adds	r7, #16
 800643a:	46bd      	mov	sp, r7
 800643c:	bd80      	pop	{r7, pc}

0800643e <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800643e:	b480      	push	{r7}
 8006440:	b083      	sub	sp, #12
 8006442:	af00      	add	r7, sp, #0
 8006444:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006446:	bf00      	nop
 8006448:	370c      	adds	r7, #12
 800644a:	46bd      	mov	sp, r7
 800644c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006450:	4770      	bx	lr

08006452 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006452:	b480      	push	{r7}
 8006454:	b083      	sub	sp, #12
 8006456:	af00      	add	r7, sp, #0
 8006458:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800645a:	bf00      	nop
 800645c:	370c      	adds	r7, #12
 800645e:	46bd      	mov	sp, r7
 8006460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006464:	4770      	bx	lr

08006466 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006466:	b480      	push	{r7}
 8006468:	b083      	sub	sp, #12
 800646a:	af00      	add	r7, sp, #0
 800646c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800646e:	bf00      	nop
 8006470:	370c      	adds	r7, #12
 8006472:	46bd      	mov	sp, r7
 8006474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006478:	4770      	bx	lr

0800647a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800647a:	b480      	push	{r7}
 800647c:	b083      	sub	sp, #12
 800647e:	af00      	add	r7, sp, #0
 8006480:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006482:	bf00      	nop
 8006484:	370c      	adds	r7, #12
 8006486:	46bd      	mov	sp, r7
 8006488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800648c:	4770      	bx	lr
	...

08006490 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006490:	b480      	push	{r7}
 8006492:	b085      	sub	sp, #20
 8006494:	af00      	add	r7, sp, #0
 8006496:	6078      	str	r0, [r7, #4]
 8006498:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	4a34      	ldr	r2, [pc, #208]	; (8006574 <TIM_Base_SetConfig+0xe4>)
 80064a4:	4293      	cmp	r3, r2
 80064a6:	d00f      	beq.n	80064c8 <TIM_Base_SetConfig+0x38>
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80064ae:	d00b      	beq.n	80064c8 <TIM_Base_SetConfig+0x38>
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	4a31      	ldr	r2, [pc, #196]	; (8006578 <TIM_Base_SetConfig+0xe8>)
 80064b4:	4293      	cmp	r3, r2
 80064b6:	d007      	beq.n	80064c8 <TIM_Base_SetConfig+0x38>
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	4a30      	ldr	r2, [pc, #192]	; (800657c <TIM_Base_SetConfig+0xec>)
 80064bc:	4293      	cmp	r3, r2
 80064be:	d003      	beq.n	80064c8 <TIM_Base_SetConfig+0x38>
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	4a2f      	ldr	r2, [pc, #188]	; (8006580 <TIM_Base_SetConfig+0xf0>)
 80064c4:	4293      	cmp	r3, r2
 80064c6:	d108      	bne.n	80064da <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80064d0:	683b      	ldr	r3, [r7, #0]
 80064d2:	685b      	ldr	r3, [r3, #4]
 80064d4:	68fa      	ldr	r2, [r7, #12]
 80064d6:	4313      	orrs	r3, r2
 80064d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	4a25      	ldr	r2, [pc, #148]	; (8006574 <TIM_Base_SetConfig+0xe4>)
 80064de:	4293      	cmp	r3, r2
 80064e0:	d01b      	beq.n	800651a <TIM_Base_SetConfig+0x8a>
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80064e8:	d017      	beq.n	800651a <TIM_Base_SetConfig+0x8a>
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	4a22      	ldr	r2, [pc, #136]	; (8006578 <TIM_Base_SetConfig+0xe8>)
 80064ee:	4293      	cmp	r3, r2
 80064f0:	d013      	beq.n	800651a <TIM_Base_SetConfig+0x8a>
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	4a21      	ldr	r2, [pc, #132]	; (800657c <TIM_Base_SetConfig+0xec>)
 80064f6:	4293      	cmp	r3, r2
 80064f8:	d00f      	beq.n	800651a <TIM_Base_SetConfig+0x8a>
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	4a20      	ldr	r2, [pc, #128]	; (8006580 <TIM_Base_SetConfig+0xf0>)
 80064fe:	4293      	cmp	r3, r2
 8006500:	d00b      	beq.n	800651a <TIM_Base_SetConfig+0x8a>
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	4a1f      	ldr	r2, [pc, #124]	; (8006584 <TIM_Base_SetConfig+0xf4>)
 8006506:	4293      	cmp	r3, r2
 8006508:	d007      	beq.n	800651a <TIM_Base_SetConfig+0x8a>
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	4a1e      	ldr	r2, [pc, #120]	; (8006588 <TIM_Base_SetConfig+0xf8>)
 800650e:	4293      	cmp	r3, r2
 8006510:	d003      	beq.n	800651a <TIM_Base_SetConfig+0x8a>
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	4a1d      	ldr	r2, [pc, #116]	; (800658c <TIM_Base_SetConfig+0xfc>)
 8006516:	4293      	cmp	r3, r2
 8006518:	d108      	bne.n	800652c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006520:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006522:	683b      	ldr	r3, [r7, #0]
 8006524:	68db      	ldr	r3, [r3, #12]
 8006526:	68fa      	ldr	r2, [r7, #12]
 8006528:	4313      	orrs	r3, r2
 800652a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006532:	683b      	ldr	r3, [r7, #0]
 8006534:	695b      	ldr	r3, [r3, #20]
 8006536:	4313      	orrs	r3, r2
 8006538:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	68fa      	ldr	r2, [r7, #12]
 800653e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006540:	683b      	ldr	r3, [r7, #0]
 8006542:	689a      	ldr	r2, [r3, #8]
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006548:	683b      	ldr	r3, [r7, #0]
 800654a:	681a      	ldr	r2, [r3, #0]
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	4a08      	ldr	r2, [pc, #32]	; (8006574 <TIM_Base_SetConfig+0xe4>)
 8006554:	4293      	cmp	r3, r2
 8006556:	d103      	bne.n	8006560 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006558:	683b      	ldr	r3, [r7, #0]
 800655a:	691a      	ldr	r2, [r3, #16]
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	2201      	movs	r2, #1
 8006564:	615a      	str	r2, [r3, #20]
}
 8006566:	bf00      	nop
 8006568:	3714      	adds	r7, #20
 800656a:	46bd      	mov	sp, r7
 800656c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006570:	4770      	bx	lr
 8006572:	bf00      	nop
 8006574:	40010000 	.word	0x40010000
 8006578:	40000400 	.word	0x40000400
 800657c:	40000800 	.word	0x40000800
 8006580:	40000c00 	.word	0x40000c00
 8006584:	40014000 	.word	0x40014000
 8006588:	40014400 	.word	0x40014400
 800658c:	40014800 	.word	0x40014800

08006590 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006590:	b480      	push	{r7}
 8006592:	b087      	sub	sp, #28
 8006594:	af00      	add	r7, sp, #0
 8006596:	6078      	str	r0, [r7, #4]
 8006598:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	6a1b      	ldr	r3, [r3, #32]
 800659e:	f023 0201 	bic.w	r2, r3, #1
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	6a1b      	ldr	r3, [r3, #32]
 80065aa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	685b      	ldr	r3, [r3, #4]
 80065b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	699b      	ldr	r3, [r3, #24]
 80065b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	f023 0303 	bic.w	r3, r3, #3
 80065c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80065c8:	683b      	ldr	r3, [r7, #0]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	68fa      	ldr	r2, [r7, #12]
 80065ce:	4313      	orrs	r3, r2
 80065d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80065d2:	697b      	ldr	r3, [r7, #20]
 80065d4:	f023 0302 	bic.w	r3, r3, #2
 80065d8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80065da:	683b      	ldr	r3, [r7, #0]
 80065dc:	689b      	ldr	r3, [r3, #8]
 80065de:	697a      	ldr	r2, [r7, #20]
 80065e0:	4313      	orrs	r3, r2
 80065e2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	4a1c      	ldr	r2, [pc, #112]	; (8006658 <TIM_OC1_SetConfig+0xc8>)
 80065e8:	4293      	cmp	r3, r2
 80065ea:	d10c      	bne.n	8006606 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80065ec:	697b      	ldr	r3, [r7, #20]
 80065ee:	f023 0308 	bic.w	r3, r3, #8
 80065f2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80065f4:	683b      	ldr	r3, [r7, #0]
 80065f6:	68db      	ldr	r3, [r3, #12]
 80065f8:	697a      	ldr	r2, [r7, #20]
 80065fa:	4313      	orrs	r3, r2
 80065fc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80065fe:	697b      	ldr	r3, [r7, #20]
 8006600:	f023 0304 	bic.w	r3, r3, #4
 8006604:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	4a13      	ldr	r2, [pc, #76]	; (8006658 <TIM_OC1_SetConfig+0xc8>)
 800660a:	4293      	cmp	r3, r2
 800660c:	d111      	bne.n	8006632 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800660e:	693b      	ldr	r3, [r7, #16]
 8006610:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006614:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006616:	693b      	ldr	r3, [r7, #16]
 8006618:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800661c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800661e:	683b      	ldr	r3, [r7, #0]
 8006620:	695b      	ldr	r3, [r3, #20]
 8006622:	693a      	ldr	r2, [r7, #16]
 8006624:	4313      	orrs	r3, r2
 8006626:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006628:	683b      	ldr	r3, [r7, #0]
 800662a:	699b      	ldr	r3, [r3, #24]
 800662c:	693a      	ldr	r2, [r7, #16]
 800662e:	4313      	orrs	r3, r2
 8006630:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	693a      	ldr	r2, [r7, #16]
 8006636:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	68fa      	ldr	r2, [r7, #12]
 800663c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800663e:	683b      	ldr	r3, [r7, #0]
 8006640:	685a      	ldr	r2, [r3, #4]
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	697a      	ldr	r2, [r7, #20]
 800664a:	621a      	str	r2, [r3, #32]
}
 800664c:	bf00      	nop
 800664e:	371c      	adds	r7, #28
 8006650:	46bd      	mov	sp, r7
 8006652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006656:	4770      	bx	lr
 8006658:	40010000 	.word	0x40010000

0800665c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800665c:	b480      	push	{r7}
 800665e:	b087      	sub	sp, #28
 8006660:	af00      	add	r7, sp, #0
 8006662:	6078      	str	r0, [r7, #4]
 8006664:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	6a1b      	ldr	r3, [r3, #32]
 800666a:	f023 0210 	bic.w	r2, r3, #16
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	6a1b      	ldr	r3, [r3, #32]
 8006676:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	685b      	ldr	r3, [r3, #4]
 800667c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	699b      	ldr	r3, [r3, #24]
 8006682:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800668a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006692:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006694:	683b      	ldr	r3, [r7, #0]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	021b      	lsls	r3, r3, #8
 800669a:	68fa      	ldr	r2, [r7, #12]
 800669c:	4313      	orrs	r3, r2
 800669e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80066a0:	697b      	ldr	r3, [r7, #20]
 80066a2:	f023 0320 	bic.w	r3, r3, #32
 80066a6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80066a8:	683b      	ldr	r3, [r7, #0]
 80066aa:	689b      	ldr	r3, [r3, #8]
 80066ac:	011b      	lsls	r3, r3, #4
 80066ae:	697a      	ldr	r2, [r7, #20]
 80066b0:	4313      	orrs	r3, r2
 80066b2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	4a1e      	ldr	r2, [pc, #120]	; (8006730 <TIM_OC2_SetConfig+0xd4>)
 80066b8:	4293      	cmp	r3, r2
 80066ba:	d10d      	bne.n	80066d8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80066bc:	697b      	ldr	r3, [r7, #20]
 80066be:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80066c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80066c4:	683b      	ldr	r3, [r7, #0]
 80066c6:	68db      	ldr	r3, [r3, #12]
 80066c8:	011b      	lsls	r3, r3, #4
 80066ca:	697a      	ldr	r2, [r7, #20]
 80066cc:	4313      	orrs	r3, r2
 80066ce:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80066d0:	697b      	ldr	r3, [r7, #20]
 80066d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80066d6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	4a15      	ldr	r2, [pc, #84]	; (8006730 <TIM_OC2_SetConfig+0xd4>)
 80066dc:	4293      	cmp	r3, r2
 80066de:	d113      	bne.n	8006708 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80066e0:	693b      	ldr	r3, [r7, #16]
 80066e2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80066e6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80066e8:	693b      	ldr	r3, [r7, #16]
 80066ea:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80066ee:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80066f0:	683b      	ldr	r3, [r7, #0]
 80066f2:	695b      	ldr	r3, [r3, #20]
 80066f4:	009b      	lsls	r3, r3, #2
 80066f6:	693a      	ldr	r2, [r7, #16]
 80066f8:	4313      	orrs	r3, r2
 80066fa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80066fc:	683b      	ldr	r3, [r7, #0]
 80066fe:	699b      	ldr	r3, [r3, #24]
 8006700:	009b      	lsls	r3, r3, #2
 8006702:	693a      	ldr	r2, [r7, #16]
 8006704:	4313      	orrs	r3, r2
 8006706:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	693a      	ldr	r2, [r7, #16]
 800670c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	68fa      	ldr	r2, [r7, #12]
 8006712:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006714:	683b      	ldr	r3, [r7, #0]
 8006716:	685a      	ldr	r2, [r3, #4]
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	697a      	ldr	r2, [r7, #20]
 8006720:	621a      	str	r2, [r3, #32]
}
 8006722:	bf00      	nop
 8006724:	371c      	adds	r7, #28
 8006726:	46bd      	mov	sp, r7
 8006728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800672c:	4770      	bx	lr
 800672e:	bf00      	nop
 8006730:	40010000 	.word	0x40010000

08006734 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006734:	b480      	push	{r7}
 8006736:	b087      	sub	sp, #28
 8006738:	af00      	add	r7, sp, #0
 800673a:	6078      	str	r0, [r7, #4]
 800673c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	6a1b      	ldr	r3, [r3, #32]
 8006742:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	6a1b      	ldr	r3, [r3, #32]
 800674e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	685b      	ldr	r3, [r3, #4]
 8006754:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	69db      	ldr	r3, [r3, #28]
 800675a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006762:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	f023 0303 	bic.w	r3, r3, #3
 800676a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800676c:	683b      	ldr	r3, [r7, #0]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	68fa      	ldr	r2, [r7, #12]
 8006772:	4313      	orrs	r3, r2
 8006774:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006776:	697b      	ldr	r3, [r7, #20]
 8006778:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800677c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800677e:	683b      	ldr	r3, [r7, #0]
 8006780:	689b      	ldr	r3, [r3, #8]
 8006782:	021b      	lsls	r3, r3, #8
 8006784:	697a      	ldr	r2, [r7, #20]
 8006786:	4313      	orrs	r3, r2
 8006788:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	4a1d      	ldr	r2, [pc, #116]	; (8006804 <TIM_OC3_SetConfig+0xd0>)
 800678e:	4293      	cmp	r3, r2
 8006790:	d10d      	bne.n	80067ae <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006792:	697b      	ldr	r3, [r7, #20]
 8006794:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006798:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800679a:	683b      	ldr	r3, [r7, #0]
 800679c:	68db      	ldr	r3, [r3, #12]
 800679e:	021b      	lsls	r3, r3, #8
 80067a0:	697a      	ldr	r2, [r7, #20]
 80067a2:	4313      	orrs	r3, r2
 80067a4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80067a6:	697b      	ldr	r3, [r7, #20]
 80067a8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80067ac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	4a14      	ldr	r2, [pc, #80]	; (8006804 <TIM_OC3_SetConfig+0xd0>)
 80067b2:	4293      	cmp	r3, r2
 80067b4:	d113      	bne.n	80067de <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80067b6:	693b      	ldr	r3, [r7, #16]
 80067b8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80067bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80067be:	693b      	ldr	r3, [r7, #16]
 80067c0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80067c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80067c6:	683b      	ldr	r3, [r7, #0]
 80067c8:	695b      	ldr	r3, [r3, #20]
 80067ca:	011b      	lsls	r3, r3, #4
 80067cc:	693a      	ldr	r2, [r7, #16]
 80067ce:	4313      	orrs	r3, r2
 80067d0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80067d2:	683b      	ldr	r3, [r7, #0]
 80067d4:	699b      	ldr	r3, [r3, #24]
 80067d6:	011b      	lsls	r3, r3, #4
 80067d8:	693a      	ldr	r2, [r7, #16]
 80067da:	4313      	orrs	r3, r2
 80067dc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	693a      	ldr	r2, [r7, #16]
 80067e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	68fa      	ldr	r2, [r7, #12]
 80067e8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80067ea:	683b      	ldr	r3, [r7, #0]
 80067ec:	685a      	ldr	r2, [r3, #4]
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	697a      	ldr	r2, [r7, #20]
 80067f6:	621a      	str	r2, [r3, #32]
}
 80067f8:	bf00      	nop
 80067fa:	371c      	adds	r7, #28
 80067fc:	46bd      	mov	sp, r7
 80067fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006802:	4770      	bx	lr
 8006804:	40010000 	.word	0x40010000

08006808 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006808:	b480      	push	{r7}
 800680a:	b087      	sub	sp, #28
 800680c:	af00      	add	r7, sp, #0
 800680e:	6078      	str	r0, [r7, #4]
 8006810:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	6a1b      	ldr	r3, [r3, #32]
 8006816:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	6a1b      	ldr	r3, [r3, #32]
 8006822:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	685b      	ldr	r3, [r3, #4]
 8006828:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	69db      	ldr	r3, [r3, #28]
 800682e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006836:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800683e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006840:	683b      	ldr	r3, [r7, #0]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	021b      	lsls	r3, r3, #8
 8006846:	68fa      	ldr	r2, [r7, #12]
 8006848:	4313      	orrs	r3, r2
 800684a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800684c:	693b      	ldr	r3, [r7, #16]
 800684e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006852:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006854:	683b      	ldr	r3, [r7, #0]
 8006856:	689b      	ldr	r3, [r3, #8]
 8006858:	031b      	lsls	r3, r3, #12
 800685a:	693a      	ldr	r2, [r7, #16]
 800685c:	4313      	orrs	r3, r2
 800685e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	4a10      	ldr	r2, [pc, #64]	; (80068a4 <TIM_OC4_SetConfig+0x9c>)
 8006864:	4293      	cmp	r3, r2
 8006866:	d109      	bne.n	800687c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006868:	697b      	ldr	r3, [r7, #20]
 800686a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800686e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006870:	683b      	ldr	r3, [r7, #0]
 8006872:	695b      	ldr	r3, [r3, #20]
 8006874:	019b      	lsls	r3, r3, #6
 8006876:	697a      	ldr	r2, [r7, #20]
 8006878:	4313      	orrs	r3, r2
 800687a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	697a      	ldr	r2, [r7, #20]
 8006880:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	68fa      	ldr	r2, [r7, #12]
 8006886:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006888:	683b      	ldr	r3, [r7, #0]
 800688a:	685a      	ldr	r2, [r3, #4]
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	693a      	ldr	r2, [r7, #16]
 8006894:	621a      	str	r2, [r3, #32]
}
 8006896:	bf00      	nop
 8006898:	371c      	adds	r7, #28
 800689a:	46bd      	mov	sp, r7
 800689c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a0:	4770      	bx	lr
 80068a2:	bf00      	nop
 80068a4:	40010000 	.word	0x40010000

080068a8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80068a8:	b480      	push	{r7}
 80068aa:	b087      	sub	sp, #28
 80068ac:	af00      	add	r7, sp, #0
 80068ae:	60f8      	str	r0, [r7, #12]
 80068b0:	60b9      	str	r1, [r7, #8]
 80068b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	6a1b      	ldr	r3, [r3, #32]
 80068b8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	6a1b      	ldr	r3, [r3, #32]
 80068be:	f023 0201 	bic.w	r2, r3, #1
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	699b      	ldr	r3, [r3, #24]
 80068ca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80068cc:	693b      	ldr	r3, [r7, #16]
 80068ce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80068d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	011b      	lsls	r3, r3, #4
 80068d8:	693a      	ldr	r2, [r7, #16]
 80068da:	4313      	orrs	r3, r2
 80068dc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80068de:	697b      	ldr	r3, [r7, #20]
 80068e0:	f023 030a 	bic.w	r3, r3, #10
 80068e4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80068e6:	697a      	ldr	r2, [r7, #20]
 80068e8:	68bb      	ldr	r3, [r7, #8]
 80068ea:	4313      	orrs	r3, r2
 80068ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	693a      	ldr	r2, [r7, #16]
 80068f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	697a      	ldr	r2, [r7, #20]
 80068f8:	621a      	str	r2, [r3, #32]
}
 80068fa:	bf00      	nop
 80068fc:	371c      	adds	r7, #28
 80068fe:	46bd      	mov	sp, r7
 8006900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006904:	4770      	bx	lr

08006906 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006906:	b480      	push	{r7}
 8006908:	b087      	sub	sp, #28
 800690a:	af00      	add	r7, sp, #0
 800690c:	60f8      	str	r0, [r7, #12]
 800690e:	60b9      	str	r1, [r7, #8]
 8006910:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	6a1b      	ldr	r3, [r3, #32]
 8006916:	f023 0210 	bic.w	r2, r3, #16
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	699b      	ldr	r3, [r3, #24]
 8006922:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	6a1b      	ldr	r3, [r3, #32]
 8006928:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800692a:	697b      	ldr	r3, [r7, #20]
 800692c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006930:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	031b      	lsls	r3, r3, #12
 8006936:	697a      	ldr	r2, [r7, #20]
 8006938:	4313      	orrs	r3, r2
 800693a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800693c:	693b      	ldr	r3, [r7, #16]
 800693e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006942:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006944:	68bb      	ldr	r3, [r7, #8]
 8006946:	011b      	lsls	r3, r3, #4
 8006948:	693a      	ldr	r2, [r7, #16]
 800694a:	4313      	orrs	r3, r2
 800694c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	697a      	ldr	r2, [r7, #20]
 8006952:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	693a      	ldr	r2, [r7, #16]
 8006958:	621a      	str	r2, [r3, #32]
}
 800695a:	bf00      	nop
 800695c:	371c      	adds	r7, #28
 800695e:	46bd      	mov	sp, r7
 8006960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006964:	4770      	bx	lr

08006966 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006966:	b480      	push	{r7}
 8006968:	b085      	sub	sp, #20
 800696a:	af00      	add	r7, sp, #0
 800696c:	6078      	str	r0, [r7, #4]
 800696e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	689b      	ldr	r3, [r3, #8]
 8006974:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800697c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800697e:	683a      	ldr	r2, [r7, #0]
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	4313      	orrs	r3, r2
 8006984:	f043 0307 	orr.w	r3, r3, #7
 8006988:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	68fa      	ldr	r2, [r7, #12]
 800698e:	609a      	str	r2, [r3, #8]
}
 8006990:	bf00      	nop
 8006992:	3714      	adds	r7, #20
 8006994:	46bd      	mov	sp, r7
 8006996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800699a:	4770      	bx	lr

0800699c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800699c:	b480      	push	{r7}
 800699e:	b087      	sub	sp, #28
 80069a0:	af00      	add	r7, sp, #0
 80069a2:	60f8      	str	r0, [r7, #12]
 80069a4:	60b9      	str	r1, [r7, #8]
 80069a6:	607a      	str	r2, [r7, #4]
 80069a8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	689b      	ldr	r3, [r3, #8]
 80069ae:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80069b0:	697b      	ldr	r3, [r7, #20]
 80069b2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80069b6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80069b8:	683b      	ldr	r3, [r7, #0]
 80069ba:	021a      	lsls	r2, r3, #8
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	431a      	orrs	r2, r3
 80069c0:	68bb      	ldr	r3, [r7, #8]
 80069c2:	4313      	orrs	r3, r2
 80069c4:	697a      	ldr	r2, [r7, #20]
 80069c6:	4313      	orrs	r3, r2
 80069c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	697a      	ldr	r2, [r7, #20]
 80069ce:	609a      	str	r2, [r3, #8]
}
 80069d0:	bf00      	nop
 80069d2:	371c      	adds	r7, #28
 80069d4:	46bd      	mov	sp, r7
 80069d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069da:	4770      	bx	lr

080069dc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80069dc:	b480      	push	{r7}
 80069de:	b087      	sub	sp, #28
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	60f8      	str	r0, [r7, #12]
 80069e4:	60b9      	str	r1, [r7, #8]
 80069e6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80069e8:	68bb      	ldr	r3, [r7, #8]
 80069ea:	f003 031f 	and.w	r3, r3, #31
 80069ee:	2201      	movs	r2, #1
 80069f0:	fa02 f303 	lsl.w	r3, r2, r3
 80069f4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	6a1a      	ldr	r2, [r3, #32]
 80069fa:	697b      	ldr	r3, [r7, #20]
 80069fc:	43db      	mvns	r3, r3
 80069fe:	401a      	ands	r2, r3
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	6a1a      	ldr	r2, [r3, #32]
 8006a08:	68bb      	ldr	r3, [r7, #8]
 8006a0a:	f003 031f 	and.w	r3, r3, #31
 8006a0e:	6879      	ldr	r1, [r7, #4]
 8006a10:	fa01 f303 	lsl.w	r3, r1, r3
 8006a14:	431a      	orrs	r2, r3
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	621a      	str	r2, [r3, #32]
}
 8006a1a:	bf00      	nop
 8006a1c:	371c      	adds	r7, #28
 8006a1e:	46bd      	mov	sp, r7
 8006a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a24:	4770      	bx	lr
	...

08006a28 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006a28:	b480      	push	{r7}
 8006a2a:	b085      	sub	sp, #20
 8006a2c:	af00      	add	r7, sp, #0
 8006a2e:	6078      	str	r0, [r7, #4]
 8006a30:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006a38:	2b01      	cmp	r3, #1
 8006a3a:	d101      	bne.n	8006a40 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006a3c:	2302      	movs	r3, #2
 8006a3e:	e050      	b.n	8006ae2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	2201      	movs	r2, #1
 8006a44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	2202      	movs	r2, #2
 8006a4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	685b      	ldr	r3, [r3, #4]
 8006a56:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	689b      	ldr	r3, [r3, #8]
 8006a5e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a66:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006a68:	683b      	ldr	r3, [r7, #0]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	68fa      	ldr	r2, [r7, #12]
 8006a6e:	4313      	orrs	r3, r2
 8006a70:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	68fa      	ldr	r2, [r7, #12]
 8006a78:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	4a1c      	ldr	r2, [pc, #112]	; (8006af0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006a80:	4293      	cmp	r3, r2
 8006a82:	d018      	beq.n	8006ab6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a8c:	d013      	beq.n	8006ab6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	4a18      	ldr	r2, [pc, #96]	; (8006af4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006a94:	4293      	cmp	r3, r2
 8006a96:	d00e      	beq.n	8006ab6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	4a16      	ldr	r2, [pc, #88]	; (8006af8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006a9e:	4293      	cmp	r3, r2
 8006aa0:	d009      	beq.n	8006ab6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	4a15      	ldr	r2, [pc, #84]	; (8006afc <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006aa8:	4293      	cmp	r3, r2
 8006aaa:	d004      	beq.n	8006ab6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	4a13      	ldr	r2, [pc, #76]	; (8006b00 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8006ab2:	4293      	cmp	r3, r2
 8006ab4:	d10c      	bne.n	8006ad0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006ab6:	68bb      	ldr	r3, [r7, #8]
 8006ab8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006abc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006abe:	683b      	ldr	r3, [r7, #0]
 8006ac0:	685b      	ldr	r3, [r3, #4]
 8006ac2:	68ba      	ldr	r2, [r7, #8]
 8006ac4:	4313      	orrs	r3, r2
 8006ac6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	68ba      	ldr	r2, [r7, #8]
 8006ace:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	2201      	movs	r2, #1
 8006ad4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	2200      	movs	r2, #0
 8006adc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006ae0:	2300      	movs	r3, #0
}
 8006ae2:	4618      	mov	r0, r3
 8006ae4:	3714      	adds	r7, #20
 8006ae6:	46bd      	mov	sp, r7
 8006ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aec:	4770      	bx	lr
 8006aee:	bf00      	nop
 8006af0:	40010000 	.word	0x40010000
 8006af4:	40000400 	.word	0x40000400
 8006af8:	40000800 	.word	0x40000800
 8006afc:	40000c00 	.word	0x40000c00
 8006b00:	40014000 	.word	0x40014000

08006b04 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006b04:	b480      	push	{r7}
 8006b06:	b085      	sub	sp, #20
 8006b08:	af00      	add	r7, sp, #0
 8006b0a:	6078      	str	r0, [r7, #4]
 8006b0c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006b0e:	2300      	movs	r3, #0
 8006b10:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006b18:	2b01      	cmp	r3, #1
 8006b1a:	d101      	bne.n	8006b20 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006b1c:	2302      	movs	r3, #2
 8006b1e:	e03d      	b.n	8006b9c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	2201      	movs	r2, #1
 8006b24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006b2e:	683b      	ldr	r3, [r7, #0]
 8006b30:	68db      	ldr	r3, [r3, #12]
 8006b32:	4313      	orrs	r3, r2
 8006b34:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006b3c:	683b      	ldr	r3, [r7, #0]
 8006b3e:	689b      	ldr	r3, [r3, #8]
 8006b40:	4313      	orrs	r3, r2
 8006b42:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006b4a:	683b      	ldr	r3, [r7, #0]
 8006b4c:	685b      	ldr	r3, [r3, #4]
 8006b4e:	4313      	orrs	r3, r2
 8006b50:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006b58:	683b      	ldr	r3, [r7, #0]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	4313      	orrs	r3, r2
 8006b5e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006b66:	683b      	ldr	r3, [r7, #0]
 8006b68:	691b      	ldr	r3, [r3, #16]
 8006b6a:	4313      	orrs	r3, r2
 8006b6c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006b74:	683b      	ldr	r3, [r7, #0]
 8006b76:	695b      	ldr	r3, [r3, #20]
 8006b78:	4313      	orrs	r3, r2
 8006b7a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006b82:	683b      	ldr	r3, [r7, #0]
 8006b84:	69db      	ldr	r3, [r3, #28]
 8006b86:	4313      	orrs	r3, r2
 8006b88:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	68fa      	ldr	r2, [r7, #12]
 8006b90:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	2200      	movs	r2, #0
 8006b96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006b9a:	2300      	movs	r3, #0
}
 8006b9c:	4618      	mov	r0, r3
 8006b9e:	3714      	adds	r7, #20
 8006ba0:	46bd      	mov	sp, r7
 8006ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba6:	4770      	bx	lr

08006ba8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006ba8:	b480      	push	{r7}
 8006baa:	b083      	sub	sp, #12
 8006bac:	af00      	add	r7, sp, #0
 8006bae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006bb0:	bf00      	nop
 8006bb2:	370c      	adds	r7, #12
 8006bb4:	46bd      	mov	sp, r7
 8006bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bba:	4770      	bx	lr

08006bbc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006bbc:	b480      	push	{r7}
 8006bbe:	b083      	sub	sp, #12
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006bc4:	bf00      	nop
 8006bc6:	370c      	adds	r7, #12
 8006bc8:	46bd      	mov	sp, r7
 8006bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bce:	4770      	bx	lr

08006bd0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006bd0:	b084      	sub	sp, #16
 8006bd2:	b580      	push	{r7, lr}
 8006bd4:	b084      	sub	sp, #16
 8006bd6:	af00      	add	r7, sp, #0
 8006bd8:	6078      	str	r0, [r7, #4]
 8006bda:	f107 001c 	add.w	r0, r7, #28
 8006bde:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006be2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006be4:	2b01      	cmp	r3, #1
 8006be6:	d122      	bne.n	8006c2e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bec:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	68db      	ldr	r3, [r3, #12]
 8006bf8:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8006bfc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006c00:	687a      	ldr	r2, [r7, #4]
 8006c02:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	68db      	ldr	r3, [r3, #12]
 8006c08:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006c10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c12:	2b01      	cmp	r3, #1
 8006c14:	d105      	bne.n	8006c22 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	68db      	ldr	r3, [r3, #12]
 8006c1a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006c22:	6878      	ldr	r0, [r7, #4]
 8006c24:	f001 fbee 	bl	8008404 <USB_CoreReset>
 8006c28:	4603      	mov	r3, r0
 8006c2a:	73fb      	strb	r3, [r7, #15]
 8006c2c:	e01a      	b.n	8006c64 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	68db      	ldr	r3, [r3, #12]
 8006c32:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006c3a:	6878      	ldr	r0, [r7, #4]
 8006c3c:	f001 fbe2 	bl	8008404 <USB_CoreReset>
 8006c40:	4603      	mov	r3, r0
 8006c42:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006c44:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d106      	bne.n	8006c58 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c4e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	639a      	str	r2, [r3, #56]	; 0x38
 8006c56:	e005      	b.n	8006c64 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c5c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006c64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c66:	2b01      	cmp	r3, #1
 8006c68:	d10b      	bne.n	8006c82 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	689b      	ldr	r3, [r3, #8]
 8006c6e:	f043 0206 	orr.w	r2, r3, #6
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	689b      	ldr	r3, [r3, #8]
 8006c7a:	f043 0220 	orr.w	r2, r3, #32
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006c82:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c84:	4618      	mov	r0, r3
 8006c86:	3710      	adds	r7, #16
 8006c88:	46bd      	mov	sp, r7
 8006c8a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006c8e:	b004      	add	sp, #16
 8006c90:	4770      	bx	lr
	...

08006c94 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8006c94:	b480      	push	{r7}
 8006c96:	b087      	sub	sp, #28
 8006c98:	af00      	add	r7, sp, #0
 8006c9a:	60f8      	str	r0, [r7, #12]
 8006c9c:	60b9      	str	r1, [r7, #8]
 8006c9e:	4613      	mov	r3, r2
 8006ca0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8006ca2:	79fb      	ldrb	r3, [r7, #7]
 8006ca4:	2b02      	cmp	r3, #2
 8006ca6:	d165      	bne.n	8006d74 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8006ca8:	68bb      	ldr	r3, [r7, #8]
 8006caa:	4a41      	ldr	r2, [pc, #260]	; (8006db0 <USB_SetTurnaroundTime+0x11c>)
 8006cac:	4293      	cmp	r3, r2
 8006cae:	d906      	bls.n	8006cbe <USB_SetTurnaroundTime+0x2a>
 8006cb0:	68bb      	ldr	r3, [r7, #8]
 8006cb2:	4a40      	ldr	r2, [pc, #256]	; (8006db4 <USB_SetTurnaroundTime+0x120>)
 8006cb4:	4293      	cmp	r3, r2
 8006cb6:	d202      	bcs.n	8006cbe <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8006cb8:	230f      	movs	r3, #15
 8006cba:	617b      	str	r3, [r7, #20]
 8006cbc:	e062      	b.n	8006d84 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8006cbe:	68bb      	ldr	r3, [r7, #8]
 8006cc0:	4a3c      	ldr	r2, [pc, #240]	; (8006db4 <USB_SetTurnaroundTime+0x120>)
 8006cc2:	4293      	cmp	r3, r2
 8006cc4:	d306      	bcc.n	8006cd4 <USB_SetTurnaroundTime+0x40>
 8006cc6:	68bb      	ldr	r3, [r7, #8]
 8006cc8:	4a3b      	ldr	r2, [pc, #236]	; (8006db8 <USB_SetTurnaroundTime+0x124>)
 8006cca:	4293      	cmp	r3, r2
 8006ccc:	d202      	bcs.n	8006cd4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8006cce:	230e      	movs	r3, #14
 8006cd0:	617b      	str	r3, [r7, #20]
 8006cd2:	e057      	b.n	8006d84 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8006cd4:	68bb      	ldr	r3, [r7, #8]
 8006cd6:	4a38      	ldr	r2, [pc, #224]	; (8006db8 <USB_SetTurnaroundTime+0x124>)
 8006cd8:	4293      	cmp	r3, r2
 8006cda:	d306      	bcc.n	8006cea <USB_SetTurnaroundTime+0x56>
 8006cdc:	68bb      	ldr	r3, [r7, #8]
 8006cde:	4a37      	ldr	r2, [pc, #220]	; (8006dbc <USB_SetTurnaroundTime+0x128>)
 8006ce0:	4293      	cmp	r3, r2
 8006ce2:	d202      	bcs.n	8006cea <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8006ce4:	230d      	movs	r3, #13
 8006ce6:	617b      	str	r3, [r7, #20]
 8006ce8:	e04c      	b.n	8006d84 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8006cea:	68bb      	ldr	r3, [r7, #8]
 8006cec:	4a33      	ldr	r2, [pc, #204]	; (8006dbc <USB_SetTurnaroundTime+0x128>)
 8006cee:	4293      	cmp	r3, r2
 8006cf0:	d306      	bcc.n	8006d00 <USB_SetTurnaroundTime+0x6c>
 8006cf2:	68bb      	ldr	r3, [r7, #8]
 8006cf4:	4a32      	ldr	r2, [pc, #200]	; (8006dc0 <USB_SetTurnaroundTime+0x12c>)
 8006cf6:	4293      	cmp	r3, r2
 8006cf8:	d802      	bhi.n	8006d00 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8006cfa:	230c      	movs	r3, #12
 8006cfc:	617b      	str	r3, [r7, #20]
 8006cfe:	e041      	b.n	8006d84 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8006d00:	68bb      	ldr	r3, [r7, #8]
 8006d02:	4a2f      	ldr	r2, [pc, #188]	; (8006dc0 <USB_SetTurnaroundTime+0x12c>)
 8006d04:	4293      	cmp	r3, r2
 8006d06:	d906      	bls.n	8006d16 <USB_SetTurnaroundTime+0x82>
 8006d08:	68bb      	ldr	r3, [r7, #8]
 8006d0a:	4a2e      	ldr	r2, [pc, #184]	; (8006dc4 <USB_SetTurnaroundTime+0x130>)
 8006d0c:	4293      	cmp	r3, r2
 8006d0e:	d802      	bhi.n	8006d16 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8006d10:	230b      	movs	r3, #11
 8006d12:	617b      	str	r3, [r7, #20]
 8006d14:	e036      	b.n	8006d84 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8006d16:	68bb      	ldr	r3, [r7, #8]
 8006d18:	4a2a      	ldr	r2, [pc, #168]	; (8006dc4 <USB_SetTurnaroundTime+0x130>)
 8006d1a:	4293      	cmp	r3, r2
 8006d1c:	d906      	bls.n	8006d2c <USB_SetTurnaroundTime+0x98>
 8006d1e:	68bb      	ldr	r3, [r7, #8]
 8006d20:	4a29      	ldr	r2, [pc, #164]	; (8006dc8 <USB_SetTurnaroundTime+0x134>)
 8006d22:	4293      	cmp	r3, r2
 8006d24:	d802      	bhi.n	8006d2c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8006d26:	230a      	movs	r3, #10
 8006d28:	617b      	str	r3, [r7, #20]
 8006d2a:	e02b      	b.n	8006d84 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8006d2c:	68bb      	ldr	r3, [r7, #8]
 8006d2e:	4a26      	ldr	r2, [pc, #152]	; (8006dc8 <USB_SetTurnaroundTime+0x134>)
 8006d30:	4293      	cmp	r3, r2
 8006d32:	d906      	bls.n	8006d42 <USB_SetTurnaroundTime+0xae>
 8006d34:	68bb      	ldr	r3, [r7, #8]
 8006d36:	4a25      	ldr	r2, [pc, #148]	; (8006dcc <USB_SetTurnaroundTime+0x138>)
 8006d38:	4293      	cmp	r3, r2
 8006d3a:	d202      	bcs.n	8006d42 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8006d3c:	2309      	movs	r3, #9
 8006d3e:	617b      	str	r3, [r7, #20]
 8006d40:	e020      	b.n	8006d84 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8006d42:	68bb      	ldr	r3, [r7, #8]
 8006d44:	4a21      	ldr	r2, [pc, #132]	; (8006dcc <USB_SetTurnaroundTime+0x138>)
 8006d46:	4293      	cmp	r3, r2
 8006d48:	d306      	bcc.n	8006d58 <USB_SetTurnaroundTime+0xc4>
 8006d4a:	68bb      	ldr	r3, [r7, #8]
 8006d4c:	4a20      	ldr	r2, [pc, #128]	; (8006dd0 <USB_SetTurnaroundTime+0x13c>)
 8006d4e:	4293      	cmp	r3, r2
 8006d50:	d802      	bhi.n	8006d58 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8006d52:	2308      	movs	r3, #8
 8006d54:	617b      	str	r3, [r7, #20]
 8006d56:	e015      	b.n	8006d84 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8006d58:	68bb      	ldr	r3, [r7, #8]
 8006d5a:	4a1d      	ldr	r2, [pc, #116]	; (8006dd0 <USB_SetTurnaroundTime+0x13c>)
 8006d5c:	4293      	cmp	r3, r2
 8006d5e:	d906      	bls.n	8006d6e <USB_SetTurnaroundTime+0xda>
 8006d60:	68bb      	ldr	r3, [r7, #8]
 8006d62:	4a1c      	ldr	r2, [pc, #112]	; (8006dd4 <USB_SetTurnaroundTime+0x140>)
 8006d64:	4293      	cmp	r3, r2
 8006d66:	d202      	bcs.n	8006d6e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8006d68:	2307      	movs	r3, #7
 8006d6a:	617b      	str	r3, [r7, #20]
 8006d6c:	e00a      	b.n	8006d84 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8006d6e:	2306      	movs	r3, #6
 8006d70:	617b      	str	r3, [r7, #20]
 8006d72:	e007      	b.n	8006d84 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8006d74:	79fb      	ldrb	r3, [r7, #7]
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d102      	bne.n	8006d80 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8006d7a:	2309      	movs	r3, #9
 8006d7c:	617b      	str	r3, [r7, #20]
 8006d7e:	e001      	b.n	8006d84 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8006d80:	2309      	movs	r3, #9
 8006d82:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	68db      	ldr	r3, [r3, #12]
 8006d88:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	68da      	ldr	r2, [r3, #12]
 8006d94:	697b      	ldr	r3, [r7, #20]
 8006d96:	029b      	lsls	r3, r3, #10
 8006d98:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8006d9c:	431a      	orrs	r2, r3
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006da2:	2300      	movs	r3, #0
}
 8006da4:	4618      	mov	r0, r3
 8006da6:	371c      	adds	r7, #28
 8006da8:	46bd      	mov	sp, r7
 8006daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dae:	4770      	bx	lr
 8006db0:	00d8acbf 	.word	0x00d8acbf
 8006db4:	00e4e1c0 	.word	0x00e4e1c0
 8006db8:	00f42400 	.word	0x00f42400
 8006dbc:	01067380 	.word	0x01067380
 8006dc0:	011a499f 	.word	0x011a499f
 8006dc4:	01312cff 	.word	0x01312cff
 8006dc8:	014ca43f 	.word	0x014ca43f
 8006dcc:	016e3600 	.word	0x016e3600
 8006dd0:	01a6ab1f 	.word	0x01a6ab1f
 8006dd4:	01e84800 	.word	0x01e84800

08006dd8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006dd8:	b480      	push	{r7}
 8006dda:	b083      	sub	sp, #12
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	689b      	ldr	r3, [r3, #8]
 8006de4:	f043 0201 	orr.w	r2, r3, #1
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006dec:	2300      	movs	r3, #0
}
 8006dee:	4618      	mov	r0, r3
 8006df0:	370c      	adds	r7, #12
 8006df2:	46bd      	mov	sp, r7
 8006df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df8:	4770      	bx	lr

08006dfa <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006dfa:	b480      	push	{r7}
 8006dfc:	b083      	sub	sp, #12
 8006dfe:	af00      	add	r7, sp, #0
 8006e00:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	689b      	ldr	r3, [r3, #8]
 8006e06:	f023 0201 	bic.w	r2, r3, #1
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006e0e:	2300      	movs	r3, #0
}
 8006e10:	4618      	mov	r0, r3
 8006e12:	370c      	adds	r7, #12
 8006e14:	46bd      	mov	sp, r7
 8006e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e1a:	4770      	bx	lr

08006e1c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006e1c:	b580      	push	{r7, lr}
 8006e1e:	b084      	sub	sp, #16
 8006e20:	af00      	add	r7, sp, #0
 8006e22:	6078      	str	r0, [r7, #4]
 8006e24:	460b      	mov	r3, r1
 8006e26:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006e28:	2300      	movs	r3, #0
 8006e2a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	68db      	ldr	r3, [r3, #12]
 8006e30:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006e38:	78fb      	ldrb	r3, [r7, #3]
 8006e3a:	2b01      	cmp	r3, #1
 8006e3c:	d115      	bne.n	8006e6a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	68db      	ldr	r3, [r3, #12]
 8006e42:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006e4a:	2001      	movs	r0, #1
 8006e4c:	f7fa fe6e 	bl	8001b2c <HAL_Delay>
      ms++;
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	3301      	adds	r3, #1
 8006e54:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8006e56:	6878      	ldr	r0, [r7, #4]
 8006e58:	f001 fa45 	bl	80082e6 <USB_GetMode>
 8006e5c:	4603      	mov	r3, r0
 8006e5e:	2b01      	cmp	r3, #1
 8006e60:	d01e      	beq.n	8006ea0 <USB_SetCurrentMode+0x84>
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	2b31      	cmp	r3, #49	; 0x31
 8006e66:	d9f0      	bls.n	8006e4a <USB_SetCurrentMode+0x2e>
 8006e68:	e01a      	b.n	8006ea0 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006e6a:	78fb      	ldrb	r3, [r7, #3]
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d115      	bne.n	8006e9c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	68db      	ldr	r3, [r3, #12]
 8006e74:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006e7c:	2001      	movs	r0, #1
 8006e7e:	f7fa fe55 	bl	8001b2c <HAL_Delay>
      ms++;
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	3301      	adds	r3, #1
 8006e86:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8006e88:	6878      	ldr	r0, [r7, #4]
 8006e8a:	f001 fa2c 	bl	80082e6 <USB_GetMode>
 8006e8e:	4603      	mov	r3, r0
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d005      	beq.n	8006ea0 <USB_SetCurrentMode+0x84>
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	2b31      	cmp	r3, #49	; 0x31
 8006e98:	d9f0      	bls.n	8006e7c <USB_SetCurrentMode+0x60>
 8006e9a:	e001      	b.n	8006ea0 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006e9c:	2301      	movs	r3, #1
 8006e9e:	e005      	b.n	8006eac <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	2b32      	cmp	r3, #50	; 0x32
 8006ea4:	d101      	bne.n	8006eaa <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006ea6:	2301      	movs	r3, #1
 8006ea8:	e000      	b.n	8006eac <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006eaa:	2300      	movs	r3, #0
}
 8006eac:	4618      	mov	r0, r3
 8006eae:	3710      	adds	r7, #16
 8006eb0:	46bd      	mov	sp, r7
 8006eb2:	bd80      	pop	{r7, pc}

08006eb4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006eb4:	b084      	sub	sp, #16
 8006eb6:	b580      	push	{r7, lr}
 8006eb8:	b086      	sub	sp, #24
 8006eba:	af00      	add	r7, sp, #0
 8006ebc:	6078      	str	r0, [r7, #4]
 8006ebe:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006ec2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006ec6:	2300      	movs	r3, #0
 8006ec8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006ece:	2300      	movs	r3, #0
 8006ed0:	613b      	str	r3, [r7, #16]
 8006ed2:	e009      	b.n	8006ee8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006ed4:	687a      	ldr	r2, [r7, #4]
 8006ed6:	693b      	ldr	r3, [r7, #16]
 8006ed8:	3340      	adds	r3, #64	; 0x40
 8006eda:	009b      	lsls	r3, r3, #2
 8006edc:	4413      	add	r3, r2
 8006ede:	2200      	movs	r2, #0
 8006ee0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006ee2:	693b      	ldr	r3, [r7, #16]
 8006ee4:	3301      	adds	r3, #1
 8006ee6:	613b      	str	r3, [r7, #16]
 8006ee8:	693b      	ldr	r3, [r7, #16]
 8006eea:	2b0e      	cmp	r3, #14
 8006eec:	d9f2      	bls.n	8006ed4 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006eee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d11c      	bne.n	8006f2e <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006efa:	685b      	ldr	r3, [r3, #4]
 8006efc:	68fa      	ldr	r2, [r7, #12]
 8006efe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006f02:	f043 0302 	orr.w	r3, r3, #2
 8006f06:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f0c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f18:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f24:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	639a      	str	r2, [r3, #56]	; 0x38
 8006f2c:	e00b      	b.n	8006f46 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f32:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f3e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006f4c:	461a      	mov	r2, r3
 8006f4e:	2300      	movs	r3, #0
 8006f50:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f58:	4619      	mov	r1, r3
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f60:	461a      	mov	r2, r3
 8006f62:	680b      	ldr	r3, [r1, #0]
 8006f64:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006f66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f68:	2b01      	cmp	r3, #1
 8006f6a:	d10c      	bne.n	8006f86 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006f6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d104      	bne.n	8006f7c <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006f72:	2100      	movs	r1, #0
 8006f74:	6878      	ldr	r0, [r7, #4]
 8006f76:	f000 f965 	bl	8007244 <USB_SetDevSpeed>
 8006f7a:	e008      	b.n	8006f8e <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006f7c:	2101      	movs	r1, #1
 8006f7e:	6878      	ldr	r0, [r7, #4]
 8006f80:	f000 f960 	bl	8007244 <USB_SetDevSpeed>
 8006f84:	e003      	b.n	8006f8e <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006f86:	2103      	movs	r1, #3
 8006f88:	6878      	ldr	r0, [r7, #4]
 8006f8a:	f000 f95b 	bl	8007244 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006f8e:	2110      	movs	r1, #16
 8006f90:	6878      	ldr	r0, [r7, #4]
 8006f92:	f000 f8f3 	bl	800717c <USB_FlushTxFifo>
 8006f96:	4603      	mov	r3, r0
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d001      	beq.n	8006fa0 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8006f9c:	2301      	movs	r3, #1
 8006f9e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006fa0:	6878      	ldr	r0, [r7, #4]
 8006fa2:	f000 f91f 	bl	80071e4 <USB_FlushRxFifo>
 8006fa6:	4603      	mov	r3, r0
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d001      	beq.n	8006fb0 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8006fac:	2301      	movs	r3, #1
 8006fae:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006fb6:	461a      	mov	r2, r3
 8006fb8:	2300      	movs	r3, #0
 8006fba:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006fc2:	461a      	mov	r2, r3
 8006fc4:	2300      	movs	r3, #0
 8006fc6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006fce:	461a      	mov	r2, r3
 8006fd0:	2300      	movs	r3, #0
 8006fd2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006fd4:	2300      	movs	r3, #0
 8006fd6:	613b      	str	r3, [r7, #16]
 8006fd8:	e043      	b.n	8007062 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006fda:	693b      	ldr	r3, [r7, #16]
 8006fdc:	015a      	lsls	r2, r3, #5
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	4413      	add	r3, r2
 8006fe2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006fec:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006ff0:	d118      	bne.n	8007024 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8006ff2:	693b      	ldr	r3, [r7, #16]
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d10a      	bne.n	800700e <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006ff8:	693b      	ldr	r3, [r7, #16]
 8006ffa:	015a      	lsls	r2, r3, #5
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	4413      	add	r3, r2
 8007000:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007004:	461a      	mov	r2, r3
 8007006:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800700a:	6013      	str	r3, [r2, #0]
 800700c:	e013      	b.n	8007036 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800700e:	693b      	ldr	r3, [r7, #16]
 8007010:	015a      	lsls	r2, r3, #5
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	4413      	add	r3, r2
 8007016:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800701a:	461a      	mov	r2, r3
 800701c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007020:	6013      	str	r3, [r2, #0]
 8007022:	e008      	b.n	8007036 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007024:	693b      	ldr	r3, [r7, #16]
 8007026:	015a      	lsls	r2, r3, #5
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	4413      	add	r3, r2
 800702c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007030:	461a      	mov	r2, r3
 8007032:	2300      	movs	r3, #0
 8007034:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007036:	693b      	ldr	r3, [r7, #16]
 8007038:	015a      	lsls	r2, r3, #5
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	4413      	add	r3, r2
 800703e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007042:	461a      	mov	r2, r3
 8007044:	2300      	movs	r3, #0
 8007046:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007048:	693b      	ldr	r3, [r7, #16]
 800704a:	015a      	lsls	r2, r3, #5
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	4413      	add	r3, r2
 8007050:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007054:	461a      	mov	r2, r3
 8007056:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800705a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800705c:	693b      	ldr	r3, [r7, #16]
 800705e:	3301      	adds	r3, #1
 8007060:	613b      	str	r3, [r7, #16]
 8007062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007064:	693a      	ldr	r2, [r7, #16]
 8007066:	429a      	cmp	r2, r3
 8007068:	d3b7      	bcc.n	8006fda <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800706a:	2300      	movs	r3, #0
 800706c:	613b      	str	r3, [r7, #16]
 800706e:	e043      	b.n	80070f8 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007070:	693b      	ldr	r3, [r7, #16]
 8007072:	015a      	lsls	r2, r3, #5
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	4413      	add	r3, r2
 8007078:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007082:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007086:	d118      	bne.n	80070ba <USB_DevInit+0x206>
    {
      if (i == 0U)
 8007088:	693b      	ldr	r3, [r7, #16]
 800708a:	2b00      	cmp	r3, #0
 800708c:	d10a      	bne.n	80070a4 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800708e:	693b      	ldr	r3, [r7, #16]
 8007090:	015a      	lsls	r2, r3, #5
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	4413      	add	r3, r2
 8007096:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800709a:	461a      	mov	r2, r3
 800709c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80070a0:	6013      	str	r3, [r2, #0]
 80070a2:	e013      	b.n	80070cc <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80070a4:	693b      	ldr	r3, [r7, #16]
 80070a6:	015a      	lsls	r2, r3, #5
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	4413      	add	r3, r2
 80070ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070b0:	461a      	mov	r2, r3
 80070b2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80070b6:	6013      	str	r3, [r2, #0]
 80070b8:	e008      	b.n	80070cc <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80070ba:	693b      	ldr	r3, [r7, #16]
 80070bc:	015a      	lsls	r2, r3, #5
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	4413      	add	r3, r2
 80070c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070c6:	461a      	mov	r2, r3
 80070c8:	2300      	movs	r3, #0
 80070ca:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80070cc:	693b      	ldr	r3, [r7, #16]
 80070ce:	015a      	lsls	r2, r3, #5
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	4413      	add	r3, r2
 80070d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070d8:	461a      	mov	r2, r3
 80070da:	2300      	movs	r3, #0
 80070dc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80070de:	693b      	ldr	r3, [r7, #16]
 80070e0:	015a      	lsls	r2, r3, #5
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	4413      	add	r3, r2
 80070e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070ea:	461a      	mov	r2, r3
 80070ec:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80070f0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80070f2:	693b      	ldr	r3, [r7, #16]
 80070f4:	3301      	adds	r3, #1
 80070f6:	613b      	str	r3, [r7, #16]
 80070f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070fa:	693a      	ldr	r2, [r7, #16]
 80070fc:	429a      	cmp	r2, r3
 80070fe:	d3b7      	bcc.n	8007070 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007106:	691b      	ldr	r3, [r3, #16]
 8007108:	68fa      	ldr	r2, [r7, #12]
 800710a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800710e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007112:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	2200      	movs	r2, #0
 8007118:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8007120:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007122:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007124:	2b00      	cmp	r3, #0
 8007126:	d105      	bne.n	8007134 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	699b      	ldr	r3, [r3, #24]
 800712c:	f043 0210 	orr.w	r2, r3, #16
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	699a      	ldr	r2, [r3, #24]
 8007138:	4b0f      	ldr	r3, [pc, #60]	; (8007178 <USB_DevInit+0x2c4>)
 800713a:	4313      	orrs	r3, r2
 800713c:	687a      	ldr	r2, [r7, #4]
 800713e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007140:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007142:	2b00      	cmp	r3, #0
 8007144:	d005      	beq.n	8007152 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	699b      	ldr	r3, [r3, #24]
 800714a:	f043 0208 	orr.w	r2, r3, #8
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007152:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007154:	2b01      	cmp	r3, #1
 8007156:	d107      	bne.n	8007168 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	699b      	ldr	r3, [r3, #24]
 800715c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007160:	f043 0304 	orr.w	r3, r3, #4
 8007164:	687a      	ldr	r2, [r7, #4]
 8007166:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007168:	7dfb      	ldrb	r3, [r7, #23]
}
 800716a:	4618      	mov	r0, r3
 800716c:	3718      	adds	r7, #24
 800716e:	46bd      	mov	sp, r7
 8007170:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007174:	b004      	add	sp, #16
 8007176:	4770      	bx	lr
 8007178:	803c3800 	.word	0x803c3800

0800717c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800717c:	b480      	push	{r7}
 800717e:	b085      	sub	sp, #20
 8007180:	af00      	add	r7, sp, #0
 8007182:	6078      	str	r0, [r7, #4]
 8007184:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007186:	2300      	movs	r3, #0
 8007188:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	3301      	adds	r3, #1
 800718e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	4a13      	ldr	r2, [pc, #76]	; (80071e0 <USB_FlushTxFifo+0x64>)
 8007194:	4293      	cmp	r3, r2
 8007196:	d901      	bls.n	800719c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007198:	2303      	movs	r3, #3
 800719a:	e01b      	b.n	80071d4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	691b      	ldr	r3, [r3, #16]
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	daf2      	bge.n	800718a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80071a4:	2300      	movs	r3, #0
 80071a6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80071a8:	683b      	ldr	r3, [r7, #0]
 80071aa:	019b      	lsls	r3, r3, #6
 80071ac:	f043 0220 	orr.w	r2, r3, #32
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	3301      	adds	r3, #1
 80071b8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	4a08      	ldr	r2, [pc, #32]	; (80071e0 <USB_FlushTxFifo+0x64>)
 80071be:	4293      	cmp	r3, r2
 80071c0:	d901      	bls.n	80071c6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80071c2:	2303      	movs	r3, #3
 80071c4:	e006      	b.n	80071d4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	691b      	ldr	r3, [r3, #16]
 80071ca:	f003 0320 	and.w	r3, r3, #32
 80071ce:	2b20      	cmp	r3, #32
 80071d0:	d0f0      	beq.n	80071b4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80071d2:	2300      	movs	r3, #0
}
 80071d4:	4618      	mov	r0, r3
 80071d6:	3714      	adds	r7, #20
 80071d8:	46bd      	mov	sp, r7
 80071da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071de:	4770      	bx	lr
 80071e0:	00030d40 	.word	0x00030d40

080071e4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80071e4:	b480      	push	{r7}
 80071e6:	b085      	sub	sp, #20
 80071e8:	af00      	add	r7, sp, #0
 80071ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80071ec:	2300      	movs	r3, #0
 80071ee:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	3301      	adds	r3, #1
 80071f4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	4a11      	ldr	r2, [pc, #68]	; (8007240 <USB_FlushRxFifo+0x5c>)
 80071fa:	4293      	cmp	r3, r2
 80071fc:	d901      	bls.n	8007202 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80071fe:	2303      	movs	r3, #3
 8007200:	e018      	b.n	8007234 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	691b      	ldr	r3, [r3, #16]
 8007206:	2b00      	cmp	r3, #0
 8007208:	daf2      	bge.n	80071f0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800720a:	2300      	movs	r3, #0
 800720c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	2210      	movs	r2, #16
 8007212:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	3301      	adds	r3, #1
 8007218:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	4a08      	ldr	r2, [pc, #32]	; (8007240 <USB_FlushRxFifo+0x5c>)
 800721e:	4293      	cmp	r3, r2
 8007220:	d901      	bls.n	8007226 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8007222:	2303      	movs	r3, #3
 8007224:	e006      	b.n	8007234 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	691b      	ldr	r3, [r3, #16]
 800722a:	f003 0310 	and.w	r3, r3, #16
 800722e:	2b10      	cmp	r3, #16
 8007230:	d0f0      	beq.n	8007214 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007232:	2300      	movs	r3, #0
}
 8007234:	4618      	mov	r0, r3
 8007236:	3714      	adds	r7, #20
 8007238:	46bd      	mov	sp, r7
 800723a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800723e:	4770      	bx	lr
 8007240:	00030d40 	.word	0x00030d40

08007244 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007244:	b480      	push	{r7}
 8007246:	b085      	sub	sp, #20
 8007248:	af00      	add	r7, sp, #0
 800724a:	6078      	str	r0, [r7, #4]
 800724c:	460b      	mov	r3, r1
 800724e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800725a:	681a      	ldr	r2, [r3, #0]
 800725c:	78fb      	ldrb	r3, [r7, #3]
 800725e:	68f9      	ldr	r1, [r7, #12]
 8007260:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007264:	4313      	orrs	r3, r2
 8007266:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007268:	2300      	movs	r3, #0
}
 800726a:	4618      	mov	r0, r3
 800726c:	3714      	adds	r7, #20
 800726e:	46bd      	mov	sp, r7
 8007270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007274:	4770      	bx	lr

08007276 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8007276:	b480      	push	{r7}
 8007278:	b087      	sub	sp, #28
 800727a:	af00      	add	r7, sp, #0
 800727c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8007282:	693b      	ldr	r3, [r7, #16]
 8007284:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007288:	689b      	ldr	r3, [r3, #8]
 800728a:	f003 0306 	and.w	r3, r3, #6
 800728e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	2b00      	cmp	r3, #0
 8007294:	d102      	bne.n	800729c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8007296:	2300      	movs	r3, #0
 8007298:	75fb      	strb	r3, [r7, #23]
 800729a:	e00a      	b.n	80072b2 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	2b02      	cmp	r3, #2
 80072a0:	d002      	beq.n	80072a8 <USB_GetDevSpeed+0x32>
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	2b06      	cmp	r3, #6
 80072a6:	d102      	bne.n	80072ae <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80072a8:	2302      	movs	r3, #2
 80072aa:	75fb      	strb	r3, [r7, #23]
 80072ac:	e001      	b.n	80072b2 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80072ae:	230f      	movs	r3, #15
 80072b0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80072b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80072b4:	4618      	mov	r0, r3
 80072b6:	371c      	adds	r7, #28
 80072b8:	46bd      	mov	sp, r7
 80072ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072be:	4770      	bx	lr

080072c0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80072c0:	b480      	push	{r7}
 80072c2:	b085      	sub	sp, #20
 80072c4:	af00      	add	r7, sp, #0
 80072c6:	6078      	str	r0, [r7, #4]
 80072c8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80072ce:	683b      	ldr	r3, [r7, #0]
 80072d0:	781b      	ldrb	r3, [r3, #0]
 80072d2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80072d4:	683b      	ldr	r3, [r7, #0]
 80072d6:	785b      	ldrb	r3, [r3, #1]
 80072d8:	2b01      	cmp	r3, #1
 80072da:	d13a      	bne.n	8007352 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80072e2:	69da      	ldr	r2, [r3, #28]
 80072e4:	683b      	ldr	r3, [r7, #0]
 80072e6:	781b      	ldrb	r3, [r3, #0]
 80072e8:	f003 030f 	and.w	r3, r3, #15
 80072ec:	2101      	movs	r1, #1
 80072ee:	fa01 f303 	lsl.w	r3, r1, r3
 80072f2:	b29b      	uxth	r3, r3
 80072f4:	68f9      	ldr	r1, [r7, #12]
 80072f6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80072fa:	4313      	orrs	r3, r2
 80072fc:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80072fe:	68bb      	ldr	r3, [r7, #8]
 8007300:	015a      	lsls	r2, r3, #5
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	4413      	add	r3, r2
 8007306:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007310:	2b00      	cmp	r3, #0
 8007312:	d155      	bne.n	80073c0 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007314:	68bb      	ldr	r3, [r7, #8]
 8007316:	015a      	lsls	r2, r3, #5
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	4413      	add	r3, r2
 800731c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007320:	681a      	ldr	r2, [r3, #0]
 8007322:	683b      	ldr	r3, [r7, #0]
 8007324:	68db      	ldr	r3, [r3, #12]
 8007326:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800732a:	683b      	ldr	r3, [r7, #0]
 800732c:	791b      	ldrb	r3, [r3, #4]
 800732e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007330:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007332:	68bb      	ldr	r3, [r7, #8]
 8007334:	059b      	lsls	r3, r3, #22
 8007336:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007338:	4313      	orrs	r3, r2
 800733a:	68ba      	ldr	r2, [r7, #8]
 800733c:	0151      	lsls	r1, r2, #5
 800733e:	68fa      	ldr	r2, [r7, #12]
 8007340:	440a      	add	r2, r1
 8007342:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007346:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800734a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800734e:	6013      	str	r3, [r2, #0]
 8007350:	e036      	b.n	80073c0 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007358:	69da      	ldr	r2, [r3, #28]
 800735a:	683b      	ldr	r3, [r7, #0]
 800735c:	781b      	ldrb	r3, [r3, #0]
 800735e:	f003 030f 	and.w	r3, r3, #15
 8007362:	2101      	movs	r1, #1
 8007364:	fa01 f303 	lsl.w	r3, r1, r3
 8007368:	041b      	lsls	r3, r3, #16
 800736a:	68f9      	ldr	r1, [r7, #12]
 800736c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007370:	4313      	orrs	r3, r2
 8007372:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8007374:	68bb      	ldr	r3, [r7, #8]
 8007376:	015a      	lsls	r2, r3, #5
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	4413      	add	r3, r2
 800737c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007386:	2b00      	cmp	r3, #0
 8007388:	d11a      	bne.n	80073c0 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800738a:	68bb      	ldr	r3, [r7, #8]
 800738c:	015a      	lsls	r2, r3, #5
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	4413      	add	r3, r2
 8007392:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007396:	681a      	ldr	r2, [r3, #0]
 8007398:	683b      	ldr	r3, [r7, #0]
 800739a:	68db      	ldr	r3, [r3, #12]
 800739c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80073a0:	683b      	ldr	r3, [r7, #0]
 80073a2:	791b      	ldrb	r3, [r3, #4]
 80073a4:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80073a6:	430b      	orrs	r3, r1
 80073a8:	4313      	orrs	r3, r2
 80073aa:	68ba      	ldr	r2, [r7, #8]
 80073ac:	0151      	lsls	r1, r2, #5
 80073ae:	68fa      	ldr	r2, [r7, #12]
 80073b0:	440a      	add	r2, r1
 80073b2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80073b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80073ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80073be:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80073c0:	2300      	movs	r3, #0
}
 80073c2:	4618      	mov	r0, r3
 80073c4:	3714      	adds	r7, #20
 80073c6:	46bd      	mov	sp, r7
 80073c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073cc:	4770      	bx	lr
	...

080073d0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80073d0:	b480      	push	{r7}
 80073d2:	b085      	sub	sp, #20
 80073d4:	af00      	add	r7, sp, #0
 80073d6:	6078      	str	r0, [r7, #4]
 80073d8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80073de:	683b      	ldr	r3, [r7, #0]
 80073e0:	781b      	ldrb	r3, [r3, #0]
 80073e2:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80073e4:	683b      	ldr	r3, [r7, #0]
 80073e6:	785b      	ldrb	r3, [r3, #1]
 80073e8:	2b01      	cmp	r3, #1
 80073ea:	d161      	bne.n	80074b0 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80073ec:	68bb      	ldr	r3, [r7, #8]
 80073ee:	015a      	lsls	r2, r3, #5
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	4413      	add	r3, r2
 80073f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80073fe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007402:	d11f      	bne.n	8007444 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8007404:	68bb      	ldr	r3, [r7, #8]
 8007406:	015a      	lsls	r2, r3, #5
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	4413      	add	r3, r2
 800740c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	68ba      	ldr	r2, [r7, #8]
 8007414:	0151      	lsls	r1, r2, #5
 8007416:	68fa      	ldr	r2, [r7, #12]
 8007418:	440a      	add	r2, r1
 800741a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800741e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007422:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8007424:	68bb      	ldr	r3, [r7, #8]
 8007426:	015a      	lsls	r2, r3, #5
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	4413      	add	r3, r2
 800742c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	68ba      	ldr	r2, [r7, #8]
 8007434:	0151      	lsls	r1, r2, #5
 8007436:	68fa      	ldr	r2, [r7, #12]
 8007438:	440a      	add	r2, r1
 800743a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800743e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007442:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800744a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800744c:	683b      	ldr	r3, [r7, #0]
 800744e:	781b      	ldrb	r3, [r3, #0]
 8007450:	f003 030f 	and.w	r3, r3, #15
 8007454:	2101      	movs	r1, #1
 8007456:	fa01 f303 	lsl.w	r3, r1, r3
 800745a:	b29b      	uxth	r3, r3
 800745c:	43db      	mvns	r3, r3
 800745e:	68f9      	ldr	r1, [r7, #12]
 8007460:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007464:	4013      	ands	r3, r2
 8007466:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800746e:	69da      	ldr	r2, [r3, #28]
 8007470:	683b      	ldr	r3, [r7, #0]
 8007472:	781b      	ldrb	r3, [r3, #0]
 8007474:	f003 030f 	and.w	r3, r3, #15
 8007478:	2101      	movs	r1, #1
 800747a:	fa01 f303 	lsl.w	r3, r1, r3
 800747e:	b29b      	uxth	r3, r3
 8007480:	43db      	mvns	r3, r3
 8007482:	68f9      	ldr	r1, [r7, #12]
 8007484:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007488:	4013      	ands	r3, r2
 800748a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800748c:	68bb      	ldr	r3, [r7, #8]
 800748e:	015a      	lsls	r2, r3, #5
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	4413      	add	r3, r2
 8007494:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007498:	681a      	ldr	r2, [r3, #0]
 800749a:	68bb      	ldr	r3, [r7, #8]
 800749c:	0159      	lsls	r1, r3, #5
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	440b      	add	r3, r1
 80074a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074a6:	4619      	mov	r1, r3
 80074a8:	4b35      	ldr	r3, [pc, #212]	; (8007580 <USB_DeactivateEndpoint+0x1b0>)
 80074aa:	4013      	ands	r3, r2
 80074ac:	600b      	str	r3, [r1, #0]
 80074ae:	e060      	b.n	8007572 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80074b0:	68bb      	ldr	r3, [r7, #8]
 80074b2:	015a      	lsls	r2, r3, #5
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	4413      	add	r3, r2
 80074b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80074c2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80074c6:	d11f      	bne.n	8007508 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80074c8:	68bb      	ldr	r3, [r7, #8]
 80074ca:	015a      	lsls	r2, r3, #5
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	4413      	add	r3, r2
 80074d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	68ba      	ldr	r2, [r7, #8]
 80074d8:	0151      	lsls	r1, r2, #5
 80074da:	68fa      	ldr	r2, [r7, #12]
 80074dc:	440a      	add	r2, r1
 80074de:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80074e2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80074e6:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80074e8:	68bb      	ldr	r3, [r7, #8]
 80074ea:	015a      	lsls	r2, r3, #5
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	4413      	add	r3, r2
 80074f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	68ba      	ldr	r2, [r7, #8]
 80074f8:	0151      	lsls	r1, r2, #5
 80074fa:	68fa      	ldr	r2, [r7, #12]
 80074fc:	440a      	add	r2, r1
 80074fe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007502:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007506:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800750e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007510:	683b      	ldr	r3, [r7, #0]
 8007512:	781b      	ldrb	r3, [r3, #0]
 8007514:	f003 030f 	and.w	r3, r3, #15
 8007518:	2101      	movs	r1, #1
 800751a:	fa01 f303 	lsl.w	r3, r1, r3
 800751e:	041b      	lsls	r3, r3, #16
 8007520:	43db      	mvns	r3, r3
 8007522:	68f9      	ldr	r1, [r7, #12]
 8007524:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007528:	4013      	ands	r3, r2
 800752a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007532:	69da      	ldr	r2, [r3, #28]
 8007534:	683b      	ldr	r3, [r7, #0]
 8007536:	781b      	ldrb	r3, [r3, #0]
 8007538:	f003 030f 	and.w	r3, r3, #15
 800753c:	2101      	movs	r1, #1
 800753e:	fa01 f303 	lsl.w	r3, r1, r3
 8007542:	041b      	lsls	r3, r3, #16
 8007544:	43db      	mvns	r3, r3
 8007546:	68f9      	ldr	r1, [r7, #12]
 8007548:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800754c:	4013      	ands	r3, r2
 800754e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8007550:	68bb      	ldr	r3, [r7, #8]
 8007552:	015a      	lsls	r2, r3, #5
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	4413      	add	r3, r2
 8007558:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800755c:	681a      	ldr	r2, [r3, #0]
 800755e:	68bb      	ldr	r3, [r7, #8]
 8007560:	0159      	lsls	r1, r3, #5
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	440b      	add	r3, r1
 8007566:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800756a:	4619      	mov	r1, r3
 800756c:	4b05      	ldr	r3, [pc, #20]	; (8007584 <USB_DeactivateEndpoint+0x1b4>)
 800756e:	4013      	ands	r3, r2
 8007570:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8007572:	2300      	movs	r3, #0
}
 8007574:	4618      	mov	r0, r3
 8007576:	3714      	adds	r7, #20
 8007578:	46bd      	mov	sp, r7
 800757a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800757e:	4770      	bx	lr
 8007580:	ec337800 	.word	0xec337800
 8007584:	eff37800 	.word	0xeff37800

08007588 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007588:	b580      	push	{r7, lr}
 800758a:	b08a      	sub	sp, #40	; 0x28
 800758c:	af02      	add	r7, sp, #8
 800758e:	60f8      	str	r0, [r7, #12]
 8007590:	60b9      	str	r1, [r7, #8]
 8007592:	4613      	mov	r3, r2
 8007594:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800759a:	68bb      	ldr	r3, [r7, #8]
 800759c:	781b      	ldrb	r3, [r3, #0]
 800759e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80075a0:	68bb      	ldr	r3, [r7, #8]
 80075a2:	785b      	ldrb	r3, [r3, #1]
 80075a4:	2b01      	cmp	r3, #1
 80075a6:	f040 815c 	bne.w	8007862 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80075aa:	68bb      	ldr	r3, [r7, #8]
 80075ac:	699b      	ldr	r3, [r3, #24]
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d132      	bne.n	8007618 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80075b2:	69bb      	ldr	r3, [r7, #24]
 80075b4:	015a      	lsls	r2, r3, #5
 80075b6:	69fb      	ldr	r3, [r7, #28]
 80075b8:	4413      	add	r3, r2
 80075ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075be:	691b      	ldr	r3, [r3, #16]
 80075c0:	69ba      	ldr	r2, [r7, #24]
 80075c2:	0151      	lsls	r1, r2, #5
 80075c4:	69fa      	ldr	r2, [r7, #28]
 80075c6:	440a      	add	r2, r1
 80075c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80075cc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80075d0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80075d4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80075d6:	69bb      	ldr	r3, [r7, #24]
 80075d8:	015a      	lsls	r2, r3, #5
 80075da:	69fb      	ldr	r3, [r7, #28]
 80075dc:	4413      	add	r3, r2
 80075de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075e2:	691b      	ldr	r3, [r3, #16]
 80075e4:	69ba      	ldr	r2, [r7, #24]
 80075e6:	0151      	lsls	r1, r2, #5
 80075e8:	69fa      	ldr	r2, [r7, #28]
 80075ea:	440a      	add	r2, r1
 80075ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80075f0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80075f4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80075f6:	69bb      	ldr	r3, [r7, #24]
 80075f8:	015a      	lsls	r2, r3, #5
 80075fa:	69fb      	ldr	r3, [r7, #28]
 80075fc:	4413      	add	r3, r2
 80075fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007602:	691b      	ldr	r3, [r3, #16]
 8007604:	69ba      	ldr	r2, [r7, #24]
 8007606:	0151      	lsls	r1, r2, #5
 8007608:	69fa      	ldr	r2, [r7, #28]
 800760a:	440a      	add	r2, r1
 800760c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007610:	0cdb      	lsrs	r3, r3, #19
 8007612:	04db      	lsls	r3, r3, #19
 8007614:	6113      	str	r3, [r2, #16]
 8007616:	e074      	b.n	8007702 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007618:	69bb      	ldr	r3, [r7, #24]
 800761a:	015a      	lsls	r2, r3, #5
 800761c:	69fb      	ldr	r3, [r7, #28]
 800761e:	4413      	add	r3, r2
 8007620:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007624:	691b      	ldr	r3, [r3, #16]
 8007626:	69ba      	ldr	r2, [r7, #24]
 8007628:	0151      	lsls	r1, r2, #5
 800762a:	69fa      	ldr	r2, [r7, #28]
 800762c:	440a      	add	r2, r1
 800762e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007632:	0cdb      	lsrs	r3, r3, #19
 8007634:	04db      	lsls	r3, r3, #19
 8007636:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007638:	69bb      	ldr	r3, [r7, #24]
 800763a:	015a      	lsls	r2, r3, #5
 800763c:	69fb      	ldr	r3, [r7, #28]
 800763e:	4413      	add	r3, r2
 8007640:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007644:	691b      	ldr	r3, [r3, #16]
 8007646:	69ba      	ldr	r2, [r7, #24]
 8007648:	0151      	lsls	r1, r2, #5
 800764a:	69fa      	ldr	r2, [r7, #28]
 800764c:	440a      	add	r2, r1
 800764e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007652:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007656:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800765a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800765c:	69bb      	ldr	r3, [r7, #24]
 800765e:	015a      	lsls	r2, r3, #5
 8007660:	69fb      	ldr	r3, [r7, #28]
 8007662:	4413      	add	r3, r2
 8007664:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007668:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800766a:	68bb      	ldr	r3, [r7, #8]
 800766c:	6999      	ldr	r1, [r3, #24]
 800766e:	68bb      	ldr	r3, [r7, #8]
 8007670:	68db      	ldr	r3, [r3, #12]
 8007672:	440b      	add	r3, r1
 8007674:	1e59      	subs	r1, r3, #1
 8007676:	68bb      	ldr	r3, [r7, #8]
 8007678:	68db      	ldr	r3, [r3, #12]
 800767a:	fbb1 f3f3 	udiv	r3, r1, r3
 800767e:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8007680:	4b9d      	ldr	r3, [pc, #628]	; (80078f8 <USB_EPStartXfer+0x370>)
 8007682:	400b      	ands	r3, r1
 8007684:	69b9      	ldr	r1, [r7, #24]
 8007686:	0148      	lsls	r0, r1, #5
 8007688:	69f9      	ldr	r1, [r7, #28]
 800768a:	4401      	add	r1, r0
 800768c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007690:	4313      	orrs	r3, r2
 8007692:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007694:	69bb      	ldr	r3, [r7, #24]
 8007696:	015a      	lsls	r2, r3, #5
 8007698:	69fb      	ldr	r3, [r7, #28]
 800769a:	4413      	add	r3, r2
 800769c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80076a0:	691a      	ldr	r2, [r3, #16]
 80076a2:	68bb      	ldr	r3, [r7, #8]
 80076a4:	699b      	ldr	r3, [r3, #24]
 80076a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80076aa:	69b9      	ldr	r1, [r7, #24]
 80076ac:	0148      	lsls	r0, r1, #5
 80076ae:	69f9      	ldr	r1, [r7, #28]
 80076b0:	4401      	add	r1, r0
 80076b2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80076b6:	4313      	orrs	r3, r2
 80076b8:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80076ba:	68bb      	ldr	r3, [r7, #8]
 80076bc:	791b      	ldrb	r3, [r3, #4]
 80076be:	2b01      	cmp	r3, #1
 80076c0:	d11f      	bne.n	8007702 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80076c2:	69bb      	ldr	r3, [r7, #24]
 80076c4:	015a      	lsls	r2, r3, #5
 80076c6:	69fb      	ldr	r3, [r7, #28]
 80076c8:	4413      	add	r3, r2
 80076ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80076ce:	691b      	ldr	r3, [r3, #16]
 80076d0:	69ba      	ldr	r2, [r7, #24]
 80076d2:	0151      	lsls	r1, r2, #5
 80076d4:	69fa      	ldr	r2, [r7, #28]
 80076d6:	440a      	add	r2, r1
 80076d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80076dc:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80076e0:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80076e2:	69bb      	ldr	r3, [r7, #24]
 80076e4:	015a      	lsls	r2, r3, #5
 80076e6:	69fb      	ldr	r3, [r7, #28]
 80076e8:	4413      	add	r3, r2
 80076ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80076ee:	691b      	ldr	r3, [r3, #16]
 80076f0:	69ba      	ldr	r2, [r7, #24]
 80076f2:	0151      	lsls	r1, r2, #5
 80076f4:	69fa      	ldr	r2, [r7, #28]
 80076f6:	440a      	add	r2, r1
 80076f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80076fc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007700:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8007702:	79fb      	ldrb	r3, [r7, #7]
 8007704:	2b01      	cmp	r3, #1
 8007706:	d14b      	bne.n	80077a0 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007708:	68bb      	ldr	r3, [r7, #8]
 800770a:	695b      	ldr	r3, [r3, #20]
 800770c:	2b00      	cmp	r3, #0
 800770e:	d009      	beq.n	8007724 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007710:	69bb      	ldr	r3, [r7, #24]
 8007712:	015a      	lsls	r2, r3, #5
 8007714:	69fb      	ldr	r3, [r7, #28]
 8007716:	4413      	add	r3, r2
 8007718:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800771c:	461a      	mov	r2, r3
 800771e:	68bb      	ldr	r3, [r7, #8]
 8007720:	695b      	ldr	r3, [r3, #20]
 8007722:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8007724:	68bb      	ldr	r3, [r7, #8]
 8007726:	791b      	ldrb	r3, [r3, #4]
 8007728:	2b01      	cmp	r3, #1
 800772a:	d128      	bne.n	800777e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800772c:	69fb      	ldr	r3, [r7, #28]
 800772e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007732:	689b      	ldr	r3, [r3, #8]
 8007734:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007738:	2b00      	cmp	r3, #0
 800773a:	d110      	bne.n	800775e <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800773c:	69bb      	ldr	r3, [r7, #24]
 800773e:	015a      	lsls	r2, r3, #5
 8007740:	69fb      	ldr	r3, [r7, #28]
 8007742:	4413      	add	r3, r2
 8007744:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	69ba      	ldr	r2, [r7, #24]
 800774c:	0151      	lsls	r1, r2, #5
 800774e:	69fa      	ldr	r2, [r7, #28]
 8007750:	440a      	add	r2, r1
 8007752:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007756:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800775a:	6013      	str	r3, [r2, #0]
 800775c:	e00f      	b.n	800777e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800775e:	69bb      	ldr	r3, [r7, #24]
 8007760:	015a      	lsls	r2, r3, #5
 8007762:	69fb      	ldr	r3, [r7, #28]
 8007764:	4413      	add	r3, r2
 8007766:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	69ba      	ldr	r2, [r7, #24]
 800776e:	0151      	lsls	r1, r2, #5
 8007770:	69fa      	ldr	r2, [r7, #28]
 8007772:	440a      	add	r2, r1
 8007774:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007778:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800777c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800777e:	69bb      	ldr	r3, [r7, #24]
 8007780:	015a      	lsls	r2, r3, #5
 8007782:	69fb      	ldr	r3, [r7, #28]
 8007784:	4413      	add	r3, r2
 8007786:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	69ba      	ldr	r2, [r7, #24]
 800778e:	0151      	lsls	r1, r2, #5
 8007790:	69fa      	ldr	r2, [r7, #28]
 8007792:	440a      	add	r2, r1
 8007794:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007798:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800779c:	6013      	str	r3, [r2, #0]
 800779e:	e133      	b.n	8007a08 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80077a0:	69bb      	ldr	r3, [r7, #24]
 80077a2:	015a      	lsls	r2, r3, #5
 80077a4:	69fb      	ldr	r3, [r7, #28]
 80077a6:	4413      	add	r3, r2
 80077a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	69ba      	ldr	r2, [r7, #24]
 80077b0:	0151      	lsls	r1, r2, #5
 80077b2:	69fa      	ldr	r2, [r7, #28]
 80077b4:	440a      	add	r2, r1
 80077b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80077ba:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80077be:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80077c0:	68bb      	ldr	r3, [r7, #8]
 80077c2:	791b      	ldrb	r3, [r3, #4]
 80077c4:	2b01      	cmp	r3, #1
 80077c6:	d015      	beq.n	80077f4 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80077c8:	68bb      	ldr	r3, [r7, #8]
 80077ca:	699b      	ldr	r3, [r3, #24]
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	f000 811b 	beq.w	8007a08 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80077d2:	69fb      	ldr	r3, [r7, #28]
 80077d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80077d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80077da:	68bb      	ldr	r3, [r7, #8]
 80077dc:	781b      	ldrb	r3, [r3, #0]
 80077de:	f003 030f 	and.w	r3, r3, #15
 80077e2:	2101      	movs	r1, #1
 80077e4:	fa01 f303 	lsl.w	r3, r1, r3
 80077e8:	69f9      	ldr	r1, [r7, #28]
 80077ea:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80077ee:	4313      	orrs	r3, r2
 80077f0:	634b      	str	r3, [r1, #52]	; 0x34
 80077f2:	e109      	b.n	8007a08 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80077f4:	69fb      	ldr	r3, [r7, #28]
 80077f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80077fa:	689b      	ldr	r3, [r3, #8]
 80077fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007800:	2b00      	cmp	r3, #0
 8007802:	d110      	bne.n	8007826 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007804:	69bb      	ldr	r3, [r7, #24]
 8007806:	015a      	lsls	r2, r3, #5
 8007808:	69fb      	ldr	r3, [r7, #28]
 800780a:	4413      	add	r3, r2
 800780c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	69ba      	ldr	r2, [r7, #24]
 8007814:	0151      	lsls	r1, r2, #5
 8007816:	69fa      	ldr	r2, [r7, #28]
 8007818:	440a      	add	r2, r1
 800781a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800781e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007822:	6013      	str	r3, [r2, #0]
 8007824:	e00f      	b.n	8007846 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007826:	69bb      	ldr	r3, [r7, #24]
 8007828:	015a      	lsls	r2, r3, #5
 800782a:	69fb      	ldr	r3, [r7, #28]
 800782c:	4413      	add	r3, r2
 800782e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	69ba      	ldr	r2, [r7, #24]
 8007836:	0151      	lsls	r1, r2, #5
 8007838:	69fa      	ldr	r2, [r7, #28]
 800783a:	440a      	add	r2, r1
 800783c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007840:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007844:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8007846:	68bb      	ldr	r3, [r7, #8]
 8007848:	6919      	ldr	r1, [r3, #16]
 800784a:	68bb      	ldr	r3, [r7, #8]
 800784c:	781a      	ldrb	r2, [r3, #0]
 800784e:	68bb      	ldr	r3, [r7, #8]
 8007850:	699b      	ldr	r3, [r3, #24]
 8007852:	b298      	uxth	r0, r3
 8007854:	79fb      	ldrb	r3, [r7, #7]
 8007856:	9300      	str	r3, [sp, #0]
 8007858:	4603      	mov	r3, r0
 800785a:	68f8      	ldr	r0, [r7, #12]
 800785c:	f000 fade 	bl	8007e1c <USB_WritePacket>
 8007860:	e0d2      	b.n	8007a08 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007862:	69bb      	ldr	r3, [r7, #24]
 8007864:	015a      	lsls	r2, r3, #5
 8007866:	69fb      	ldr	r3, [r7, #28]
 8007868:	4413      	add	r3, r2
 800786a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800786e:	691b      	ldr	r3, [r3, #16]
 8007870:	69ba      	ldr	r2, [r7, #24]
 8007872:	0151      	lsls	r1, r2, #5
 8007874:	69fa      	ldr	r2, [r7, #28]
 8007876:	440a      	add	r2, r1
 8007878:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800787c:	0cdb      	lsrs	r3, r3, #19
 800787e:	04db      	lsls	r3, r3, #19
 8007880:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007882:	69bb      	ldr	r3, [r7, #24]
 8007884:	015a      	lsls	r2, r3, #5
 8007886:	69fb      	ldr	r3, [r7, #28]
 8007888:	4413      	add	r3, r2
 800788a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800788e:	691b      	ldr	r3, [r3, #16]
 8007890:	69ba      	ldr	r2, [r7, #24]
 8007892:	0151      	lsls	r1, r2, #5
 8007894:	69fa      	ldr	r2, [r7, #28]
 8007896:	440a      	add	r2, r1
 8007898:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800789c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80078a0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80078a4:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80078a6:	68bb      	ldr	r3, [r7, #8]
 80078a8:	699b      	ldr	r3, [r3, #24]
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d126      	bne.n	80078fc <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80078ae:	69bb      	ldr	r3, [r7, #24]
 80078b0:	015a      	lsls	r2, r3, #5
 80078b2:	69fb      	ldr	r3, [r7, #28]
 80078b4:	4413      	add	r3, r2
 80078b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078ba:	691a      	ldr	r2, [r3, #16]
 80078bc:	68bb      	ldr	r3, [r7, #8]
 80078be:	68db      	ldr	r3, [r3, #12]
 80078c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80078c4:	69b9      	ldr	r1, [r7, #24]
 80078c6:	0148      	lsls	r0, r1, #5
 80078c8:	69f9      	ldr	r1, [r7, #28]
 80078ca:	4401      	add	r1, r0
 80078cc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80078d0:	4313      	orrs	r3, r2
 80078d2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80078d4:	69bb      	ldr	r3, [r7, #24]
 80078d6:	015a      	lsls	r2, r3, #5
 80078d8:	69fb      	ldr	r3, [r7, #28]
 80078da:	4413      	add	r3, r2
 80078dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078e0:	691b      	ldr	r3, [r3, #16]
 80078e2:	69ba      	ldr	r2, [r7, #24]
 80078e4:	0151      	lsls	r1, r2, #5
 80078e6:	69fa      	ldr	r2, [r7, #28]
 80078e8:	440a      	add	r2, r1
 80078ea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80078ee:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80078f2:	6113      	str	r3, [r2, #16]
 80078f4:	e03a      	b.n	800796c <USB_EPStartXfer+0x3e4>
 80078f6:	bf00      	nop
 80078f8:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80078fc:	68bb      	ldr	r3, [r7, #8]
 80078fe:	699a      	ldr	r2, [r3, #24]
 8007900:	68bb      	ldr	r3, [r7, #8]
 8007902:	68db      	ldr	r3, [r3, #12]
 8007904:	4413      	add	r3, r2
 8007906:	1e5a      	subs	r2, r3, #1
 8007908:	68bb      	ldr	r3, [r7, #8]
 800790a:	68db      	ldr	r3, [r3, #12]
 800790c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007910:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8007912:	68bb      	ldr	r3, [r7, #8]
 8007914:	68db      	ldr	r3, [r3, #12]
 8007916:	8afa      	ldrh	r2, [r7, #22]
 8007918:	fb03 f202 	mul.w	r2, r3, r2
 800791c:	68bb      	ldr	r3, [r7, #8]
 800791e:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8007920:	69bb      	ldr	r3, [r7, #24]
 8007922:	015a      	lsls	r2, r3, #5
 8007924:	69fb      	ldr	r3, [r7, #28]
 8007926:	4413      	add	r3, r2
 8007928:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800792c:	691a      	ldr	r2, [r3, #16]
 800792e:	8afb      	ldrh	r3, [r7, #22]
 8007930:	04d9      	lsls	r1, r3, #19
 8007932:	4b38      	ldr	r3, [pc, #224]	; (8007a14 <USB_EPStartXfer+0x48c>)
 8007934:	400b      	ands	r3, r1
 8007936:	69b9      	ldr	r1, [r7, #24]
 8007938:	0148      	lsls	r0, r1, #5
 800793a:	69f9      	ldr	r1, [r7, #28]
 800793c:	4401      	add	r1, r0
 800793e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007942:	4313      	orrs	r3, r2
 8007944:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8007946:	69bb      	ldr	r3, [r7, #24]
 8007948:	015a      	lsls	r2, r3, #5
 800794a:	69fb      	ldr	r3, [r7, #28]
 800794c:	4413      	add	r3, r2
 800794e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007952:	691a      	ldr	r2, [r3, #16]
 8007954:	68bb      	ldr	r3, [r7, #8]
 8007956:	69db      	ldr	r3, [r3, #28]
 8007958:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800795c:	69b9      	ldr	r1, [r7, #24]
 800795e:	0148      	lsls	r0, r1, #5
 8007960:	69f9      	ldr	r1, [r7, #28]
 8007962:	4401      	add	r1, r0
 8007964:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007968:	4313      	orrs	r3, r2
 800796a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800796c:	79fb      	ldrb	r3, [r7, #7]
 800796e:	2b01      	cmp	r3, #1
 8007970:	d10d      	bne.n	800798e <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8007972:	68bb      	ldr	r3, [r7, #8]
 8007974:	691b      	ldr	r3, [r3, #16]
 8007976:	2b00      	cmp	r3, #0
 8007978:	d009      	beq.n	800798e <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800797a:	68bb      	ldr	r3, [r7, #8]
 800797c:	6919      	ldr	r1, [r3, #16]
 800797e:	69bb      	ldr	r3, [r7, #24]
 8007980:	015a      	lsls	r2, r3, #5
 8007982:	69fb      	ldr	r3, [r7, #28]
 8007984:	4413      	add	r3, r2
 8007986:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800798a:	460a      	mov	r2, r1
 800798c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800798e:	68bb      	ldr	r3, [r7, #8]
 8007990:	791b      	ldrb	r3, [r3, #4]
 8007992:	2b01      	cmp	r3, #1
 8007994:	d128      	bne.n	80079e8 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007996:	69fb      	ldr	r3, [r7, #28]
 8007998:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800799c:	689b      	ldr	r3, [r3, #8]
 800799e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d110      	bne.n	80079c8 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80079a6:	69bb      	ldr	r3, [r7, #24]
 80079a8:	015a      	lsls	r2, r3, #5
 80079aa:	69fb      	ldr	r3, [r7, #28]
 80079ac:	4413      	add	r3, r2
 80079ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	69ba      	ldr	r2, [r7, #24]
 80079b6:	0151      	lsls	r1, r2, #5
 80079b8:	69fa      	ldr	r2, [r7, #28]
 80079ba:	440a      	add	r2, r1
 80079bc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80079c0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80079c4:	6013      	str	r3, [r2, #0]
 80079c6:	e00f      	b.n	80079e8 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80079c8:	69bb      	ldr	r3, [r7, #24]
 80079ca:	015a      	lsls	r2, r3, #5
 80079cc:	69fb      	ldr	r3, [r7, #28]
 80079ce:	4413      	add	r3, r2
 80079d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	69ba      	ldr	r2, [r7, #24]
 80079d8:	0151      	lsls	r1, r2, #5
 80079da:	69fa      	ldr	r2, [r7, #28]
 80079dc:	440a      	add	r2, r1
 80079de:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80079e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80079e6:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80079e8:	69bb      	ldr	r3, [r7, #24]
 80079ea:	015a      	lsls	r2, r3, #5
 80079ec:	69fb      	ldr	r3, [r7, #28]
 80079ee:	4413      	add	r3, r2
 80079f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	69ba      	ldr	r2, [r7, #24]
 80079f8:	0151      	lsls	r1, r2, #5
 80079fa:	69fa      	ldr	r2, [r7, #28]
 80079fc:	440a      	add	r2, r1
 80079fe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007a02:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007a06:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007a08:	2300      	movs	r3, #0
}
 8007a0a:	4618      	mov	r0, r3
 8007a0c:	3720      	adds	r7, #32
 8007a0e:	46bd      	mov	sp, r7
 8007a10:	bd80      	pop	{r7, pc}
 8007a12:	bf00      	nop
 8007a14:	1ff80000 	.word	0x1ff80000

08007a18 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007a18:	b480      	push	{r7}
 8007a1a:	b087      	sub	sp, #28
 8007a1c:	af00      	add	r7, sp, #0
 8007a1e:	60f8      	str	r0, [r7, #12]
 8007a20:	60b9      	str	r1, [r7, #8]
 8007a22:	4613      	mov	r3, r2
 8007a24:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8007a2a:	68bb      	ldr	r3, [r7, #8]
 8007a2c:	781b      	ldrb	r3, [r3, #0]
 8007a2e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007a30:	68bb      	ldr	r3, [r7, #8]
 8007a32:	785b      	ldrb	r3, [r3, #1]
 8007a34:	2b01      	cmp	r3, #1
 8007a36:	f040 80ce 	bne.w	8007bd6 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8007a3a:	68bb      	ldr	r3, [r7, #8]
 8007a3c:	699b      	ldr	r3, [r3, #24]
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d132      	bne.n	8007aa8 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007a42:	693b      	ldr	r3, [r7, #16]
 8007a44:	015a      	lsls	r2, r3, #5
 8007a46:	697b      	ldr	r3, [r7, #20]
 8007a48:	4413      	add	r3, r2
 8007a4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a4e:	691b      	ldr	r3, [r3, #16]
 8007a50:	693a      	ldr	r2, [r7, #16]
 8007a52:	0151      	lsls	r1, r2, #5
 8007a54:	697a      	ldr	r2, [r7, #20]
 8007a56:	440a      	add	r2, r1
 8007a58:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007a5c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007a60:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007a64:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007a66:	693b      	ldr	r3, [r7, #16]
 8007a68:	015a      	lsls	r2, r3, #5
 8007a6a:	697b      	ldr	r3, [r7, #20]
 8007a6c:	4413      	add	r3, r2
 8007a6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a72:	691b      	ldr	r3, [r3, #16]
 8007a74:	693a      	ldr	r2, [r7, #16]
 8007a76:	0151      	lsls	r1, r2, #5
 8007a78:	697a      	ldr	r2, [r7, #20]
 8007a7a:	440a      	add	r2, r1
 8007a7c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007a80:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007a84:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007a86:	693b      	ldr	r3, [r7, #16]
 8007a88:	015a      	lsls	r2, r3, #5
 8007a8a:	697b      	ldr	r3, [r7, #20]
 8007a8c:	4413      	add	r3, r2
 8007a8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a92:	691b      	ldr	r3, [r3, #16]
 8007a94:	693a      	ldr	r2, [r7, #16]
 8007a96:	0151      	lsls	r1, r2, #5
 8007a98:	697a      	ldr	r2, [r7, #20]
 8007a9a:	440a      	add	r2, r1
 8007a9c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007aa0:	0cdb      	lsrs	r3, r3, #19
 8007aa2:	04db      	lsls	r3, r3, #19
 8007aa4:	6113      	str	r3, [r2, #16]
 8007aa6:	e04e      	b.n	8007b46 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007aa8:	693b      	ldr	r3, [r7, #16]
 8007aaa:	015a      	lsls	r2, r3, #5
 8007aac:	697b      	ldr	r3, [r7, #20]
 8007aae:	4413      	add	r3, r2
 8007ab0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ab4:	691b      	ldr	r3, [r3, #16]
 8007ab6:	693a      	ldr	r2, [r7, #16]
 8007ab8:	0151      	lsls	r1, r2, #5
 8007aba:	697a      	ldr	r2, [r7, #20]
 8007abc:	440a      	add	r2, r1
 8007abe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007ac2:	0cdb      	lsrs	r3, r3, #19
 8007ac4:	04db      	lsls	r3, r3, #19
 8007ac6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007ac8:	693b      	ldr	r3, [r7, #16]
 8007aca:	015a      	lsls	r2, r3, #5
 8007acc:	697b      	ldr	r3, [r7, #20]
 8007ace:	4413      	add	r3, r2
 8007ad0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ad4:	691b      	ldr	r3, [r3, #16]
 8007ad6:	693a      	ldr	r2, [r7, #16]
 8007ad8:	0151      	lsls	r1, r2, #5
 8007ada:	697a      	ldr	r2, [r7, #20]
 8007adc:	440a      	add	r2, r1
 8007ade:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007ae2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007ae6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007aea:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8007aec:	68bb      	ldr	r3, [r7, #8]
 8007aee:	699a      	ldr	r2, [r3, #24]
 8007af0:	68bb      	ldr	r3, [r7, #8]
 8007af2:	68db      	ldr	r3, [r3, #12]
 8007af4:	429a      	cmp	r2, r3
 8007af6:	d903      	bls.n	8007b00 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8007af8:	68bb      	ldr	r3, [r7, #8]
 8007afa:	68da      	ldr	r2, [r3, #12]
 8007afc:	68bb      	ldr	r3, [r7, #8]
 8007afe:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007b00:	693b      	ldr	r3, [r7, #16]
 8007b02:	015a      	lsls	r2, r3, #5
 8007b04:	697b      	ldr	r3, [r7, #20]
 8007b06:	4413      	add	r3, r2
 8007b08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b0c:	691b      	ldr	r3, [r3, #16]
 8007b0e:	693a      	ldr	r2, [r7, #16]
 8007b10:	0151      	lsls	r1, r2, #5
 8007b12:	697a      	ldr	r2, [r7, #20]
 8007b14:	440a      	add	r2, r1
 8007b16:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007b1a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007b1e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007b20:	693b      	ldr	r3, [r7, #16]
 8007b22:	015a      	lsls	r2, r3, #5
 8007b24:	697b      	ldr	r3, [r7, #20]
 8007b26:	4413      	add	r3, r2
 8007b28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b2c:	691a      	ldr	r2, [r3, #16]
 8007b2e:	68bb      	ldr	r3, [r7, #8]
 8007b30:	699b      	ldr	r3, [r3, #24]
 8007b32:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007b36:	6939      	ldr	r1, [r7, #16]
 8007b38:	0148      	lsls	r0, r1, #5
 8007b3a:	6979      	ldr	r1, [r7, #20]
 8007b3c:	4401      	add	r1, r0
 8007b3e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007b42:	4313      	orrs	r3, r2
 8007b44:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8007b46:	79fb      	ldrb	r3, [r7, #7]
 8007b48:	2b01      	cmp	r3, #1
 8007b4a:	d11e      	bne.n	8007b8a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007b4c:	68bb      	ldr	r3, [r7, #8]
 8007b4e:	695b      	ldr	r3, [r3, #20]
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d009      	beq.n	8007b68 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007b54:	693b      	ldr	r3, [r7, #16]
 8007b56:	015a      	lsls	r2, r3, #5
 8007b58:	697b      	ldr	r3, [r7, #20]
 8007b5a:	4413      	add	r3, r2
 8007b5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b60:	461a      	mov	r2, r3
 8007b62:	68bb      	ldr	r3, [r7, #8]
 8007b64:	695b      	ldr	r3, [r3, #20]
 8007b66:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007b68:	693b      	ldr	r3, [r7, #16]
 8007b6a:	015a      	lsls	r2, r3, #5
 8007b6c:	697b      	ldr	r3, [r7, #20]
 8007b6e:	4413      	add	r3, r2
 8007b70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	693a      	ldr	r2, [r7, #16]
 8007b78:	0151      	lsls	r1, r2, #5
 8007b7a:	697a      	ldr	r2, [r7, #20]
 8007b7c:	440a      	add	r2, r1
 8007b7e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007b82:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007b86:	6013      	str	r3, [r2, #0]
 8007b88:	e097      	b.n	8007cba <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007b8a:	693b      	ldr	r3, [r7, #16]
 8007b8c:	015a      	lsls	r2, r3, #5
 8007b8e:	697b      	ldr	r3, [r7, #20]
 8007b90:	4413      	add	r3, r2
 8007b92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	693a      	ldr	r2, [r7, #16]
 8007b9a:	0151      	lsls	r1, r2, #5
 8007b9c:	697a      	ldr	r2, [r7, #20]
 8007b9e:	440a      	add	r2, r1
 8007ba0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007ba4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007ba8:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8007baa:	68bb      	ldr	r3, [r7, #8]
 8007bac:	699b      	ldr	r3, [r3, #24]
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	f000 8083 	beq.w	8007cba <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007bb4:	697b      	ldr	r3, [r7, #20]
 8007bb6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007bba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007bbc:	68bb      	ldr	r3, [r7, #8]
 8007bbe:	781b      	ldrb	r3, [r3, #0]
 8007bc0:	f003 030f 	and.w	r3, r3, #15
 8007bc4:	2101      	movs	r1, #1
 8007bc6:	fa01 f303 	lsl.w	r3, r1, r3
 8007bca:	6979      	ldr	r1, [r7, #20]
 8007bcc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007bd0:	4313      	orrs	r3, r2
 8007bd2:	634b      	str	r3, [r1, #52]	; 0x34
 8007bd4:	e071      	b.n	8007cba <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007bd6:	693b      	ldr	r3, [r7, #16]
 8007bd8:	015a      	lsls	r2, r3, #5
 8007bda:	697b      	ldr	r3, [r7, #20]
 8007bdc:	4413      	add	r3, r2
 8007bde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007be2:	691b      	ldr	r3, [r3, #16]
 8007be4:	693a      	ldr	r2, [r7, #16]
 8007be6:	0151      	lsls	r1, r2, #5
 8007be8:	697a      	ldr	r2, [r7, #20]
 8007bea:	440a      	add	r2, r1
 8007bec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007bf0:	0cdb      	lsrs	r3, r3, #19
 8007bf2:	04db      	lsls	r3, r3, #19
 8007bf4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007bf6:	693b      	ldr	r3, [r7, #16]
 8007bf8:	015a      	lsls	r2, r3, #5
 8007bfa:	697b      	ldr	r3, [r7, #20]
 8007bfc:	4413      	add	r3, r2
 8007bfe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c02:	691b      	ldr	r3, [r3, #16]
 8007c04:	693a      	ldr	r2, [r7, #16]
 8007c06:	0151      	lsls	r1, r2, #5
 8007c08:	697a      	ldr	r2, [r7, #20]
 8007c0a:	440a      	add	r2, r1
 8007c0c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007c10:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007c14:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007c18:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8007c1a:	68bb      	ldr	r3, [r7, #8]
 8007c1c:	699b      	ldr	r3, [r3, #24]
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d003      	beq.n	8007c2a <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8007c22:	68bb      	ldr	r3, [r7, #8]
 8007c24:	68da      	ldr	r2, [r3, #12]
 8007c26:	68bb      	ldr	r3, [r7, #8]
 8007c28:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8007c2a:	68bb      	ldr	r3, [r7, #8]
 8007c2c:	68da      	ldr	r2, [r3, #12]
 8007c2e:	68bb      	ldr	r3, [r7, #8]
 8007c30:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007c32:	693b      	ldr	r3, [r7, #16]
 8007c34:	015a      	lsls	r2, r3, #5
 8007c36:	697b      	ldr	r3, [r7, #20]
 8007c38:	4413      	add	r3, r2
 8007c3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c3e:	691b      	ldr	r3, [r3, #16]
 8007c40:	693a      	ldr	r2, [r7, #16]
 8007c42:	0151      	lsls	r1, r2, #5
 8007c44:	697a      	ldr	r2, [r7, #20]
 8007c46:	440a      	add	r2, r1
 8007c48:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007c4c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007c50:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8007c52:	693b      	ldr	r3, [r7, #16]
 8007c54:	015a      	lsls	r2, r3, #5
 8007c56:	697b      	ldr	r3, [r7, #20]
 8007c58:	4413      	add	r3, r2
 8007c5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c5e:	691a      	ldr	r2, [r3, #16]
 8007c60:	68bb      	ldr	r3, [r7, #8]
 8007c62:	69db      	ldr	r3, [r3, #28]
 8007c64:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007c68:	6939      	ldr	r1, [r7, #16]
 8007c6a:	0148      	lsls	r0, r1, #5
 8007c6c:	6979      	ldr	r1, [r7, #20]
 8007c6e:	4401      	add	r1, r0
 8007c70:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007c74:	4313      	orrs	r3, r2
 8007c76:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8007c78:	79fb      	ldrb	r3, [r7, #7]
 8007c7a:	2b01      	cmp	r3, #1
 8007c7c:	d10d      	bne.n	8007c9a <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8007c7e:	68bb      	ldr	r3, [r7, #8]
 8007c80:	691b      	ldr	r3, [r3, #16]
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d009      	beq.n	8007c9a <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8007c86:	68bb      	ldr	r3, [r7, #8]
 8007c88:	6919      	ldr	r1, [r3, #16]
 8007c8a:	693b      	ldr	r3, [r7, #16]
 8007c8c:	015a      	lsls	r2, r3, #5
 8007c8e:	697b      	ldr	r3, [r7, #20]
 8007c90:	4413      	add	r3, r2
 8007c92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c96:	460a      	mov	r2, r1
 8007c98:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007c9a:	693b      	ldr	r3, [r7, #16]
 8007c9c:	015a      	lsls	r2, r3, #5
 8007c9e:	697b      	ldr	r3, [r7, #20]
 8007ca0:	4413      	add	r3, r2
 8007ca2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	693a      	ldr	r2, [r7, #16]
 8007caa:	0151      	lsls	r1, r2, #5
 8007cac:	697a      	ldr	r2, [r7, #20]
 8007cae:	440a      	add	r2, r1
 8007cb0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007cb4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007cb8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007cba:	2300      	movs	r3, #0
}
 8007cbc:	4618      	mov	r0, r3
 8007cbe:	371c      	adds	r7, #28
 8007cc0:	46bd      	mov	sp, r7
 8007cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc6:	4770      	bx	lr

08007cc8 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007cc8:	b480      	push	{r7}
 8007cca:	b087      	sub	sp, #28
 8007ccc:	af00      	add	r7, sp, #0
 8007cce:	6078      	str	r0, [r7, #4]
 8007cd0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007cd2:	2300      	movs	r3, #0
 8007cd4:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8007cd6:	2300      	movs	r3, #0
 8007cd8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007cde:	683b      	ldr	r3, [r7, #0]
 8007ce0:	785b      	ldrb	r3, [r3, #1]
 8007ce2:	2b01      	cmp	r3, #1
 8007ce4:	d14a      	bne.n	8007d7c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007ce6:	683b      	ldr	r3, [r7, #0]
 8007ce8:	781b      	ldrb	r3, [r3, #0]
 8007cea:	015a      	lsls	r2, r3, #5
 8007cec:	693b      	ldr	r3, [r7, #16]
 8007cee:	4413      	add	r3, r2
 8007cf0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007cfa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007cfe:	f040 8086 	bne.w	8007e0e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8007d02:	683b      	ldr	r3, [r7, #0]
 8007d04:	781b      	ldrb	r3, [r3, #0]
 8007d06:	015a      	lsls	r2, r3, #5
 8007d08:	693b      	ldr	r3, [r7, #16]
 8007d0a:	4413      	add	r3, r2
 8007d0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	683a      	ldr	r2, [r7, #0]
 8007d14:	7812      	ldrb	r2, [r2, #0]
 8007d16:	0151      	lsls	r1, r2, #5
 8007d18:	693a      	ldr	r2, [r7, #16]
 8007d1a:	440a      	add	r2, r1
 8007d1c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007d20:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007d24:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8007d26:	683b      	ldr	r3, [r7, #0]
 8007d28:	781b      	ldrb	r3, [r3, #0]
 8007d2a:	015a      	lsls	r2, r3, #5
 8007d2c:	693b      	ldr	r3, [r7, #16]
 8007d2e:	4413      	add	r3, r2
 8007d30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	683a      	ldr	r2, [r7, #0]
 8007d38:	7812      	ldrb	r2, [r2, #0]
 8007d3a:	0151      	lsls	r1, r2, #5
 8007d3c:	693a      	ldr	r2, [r7, #16]
 8007d3e:	440a      	add	r2, r1
 8007d40:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007d44:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007d48:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	3301      	adds	r3, #1
 8007d4e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	f242 7210 	movw	r2, #10000	; 0x2710
 8007d56:	4293      	cmp	r3, r2
 8007d58:	d902      	bls.n	8007d60 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8007d5a:	2301      	movs	r3, #1
 8007d5c:	75fb      	strb	r3, [r7, #23]
          break;
 8007d5e:	e056      	b.n	8007e0e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8007d60:	683b      	ldr	r3, [r7, #0]
 8007d62:	781b      	ldrb	r3, [r3, #0]
 8007d64:	015a      	lsls	r2, r3, #5
 8007d66:	693b      	ldr	r3, [r7, #16]
 8007d68:	4413      	add	r3, r2
 8007d6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007d74:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007d78:	d0e7      	beq.n	8007d4a <USB_EPStopXfer+0x82>
 8007d7a:	e048      	b.n	8007e0e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007d7c:	683b      	ldr	r3, [r7, #0]
 8007d7e:	781b      	ldrb	r3, [r3, #0]
 8007d80:	015a      	lsls	r2, r3, #5
 8007d82:	693b      	ldr	r3, [r7, #16]
 8007d84:	4413      	add	r3, r2
 8007d86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007d90:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007d94:	d13b      	bne.n	8007e0e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8007d96:	683b      	ldr	r3, [r7, #0]
 8007d98:	781b      	ldrb	r3, [r3, #0]
 8007d9a:	015a      	lsls	r2, r3, #5
 8007d9c:	693b      	ldr	r3, [r7, #16]
 8007d9e:	4413      	add	r3, r2
 8007da0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	683a      	ldr	r2, [r7, #0]
 8007da8:	7812      	ldrb	r2, [r2, #0]
 8007daa:	0151      	lsls	r1, r2, #5
 8007dac:	693a      	ldr	r2, [r7, #16]
 8007dae:	440a      	add	r2, r1
 8007db0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007db4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007db8:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8007dba:	683b      	ldr	r3, [r7, #0]
 8007dbc:	781b      	ldrb	r3, [r3, #0]
 8007dbe:	015a      	lsls	r2, r3, #5
 8007dc0:	693b      	ldr	r3, [r7, #16]
 8007dc2:	4413      	add	r3, r2
 8007dc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	683a      	ldr	r2, [r7, #0]
 8007dcc:	7812      	ldrb	r2, [r2, #0]
 8007dce:	0151      	lsls	r1, r2, #5
 8007dd0:	693a      	ldr	r2, [r7, #16]
 8007dd2:	440a      	add	r2, r1
 8007dd4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007dd8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007ddc:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	3301      	adds	r3, #1
 8007de2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	f242 7210 	movw	r2, #10000	; 0x2710
 8007dea:	4293      	cmp	r3, r2
 8007dec:	d902      	bls.n	8007df4 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8007dee:	2301      	movs	r3, #1
 8007df0:	75fb      	strb	r3, [r7, #23]
          break;
 8007df2:	e00c      	b.n	8007e0e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8007df4:	683b      	ldr	r3, [r7, #0]
 8007df6:	781b      	ldrb	r3, [r3, #0]
 8007df8:	015a      	lsls	r2, r3, #5
 8007dfa:	693b      	ldr	r3, [r7, #16]
 8007dfc:	4413      	add	r3, r2
 8007dfe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007e08:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007e0c:	d0e7      	beq.n	8007dde <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8007e0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e10:	4618      	mov	r0, r3
 8007e12:	371c      	adds	r7, #28
 8007e14:	46bd      	mov	sp, r7
 8007e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e1a:	4770      	bx	lr

08007e1c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007e1c:	b480      	push	{r7}
 8007e1e:	b089      	sub	sp, #36	; 0x24
 8007e20:	af00      	add	r7, sp, #0
 8007e22:	60f8      	str	r0, [r7, #12]
 8007e24:	60b9      	str	r1, [r7, #8]
 8007e26:	4611      	mov	r1, r2
 8007e28:	461a      	mov	r2, r3
 8007e2a:	460b      	mov	r3, r1
 8007e2c:	71fb      	strb	r3, [r7, #7]
 8007e2e:	4613      	mov	r3, r2
 8007e30:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8007e36:	68bb      	ldr	r3, [r7, #8]
 8007e38:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8007e3a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d123      	bne.n	8007e8a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8007e42:	88bb      	ldrh	r3, [r7, #4]
 8007e44:	3303      	adds	r3, #3
 8007e46:	089b      	lsrs	r3, r3, #2
 8007e48:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8007e4a:	2300      	movs	r3, #0
 8007e4c:	61bb      	str	r3, [r7, #24]
 8007e4e:	e018      	b.n	8007e82 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007e50:	79fb      	ldrb	r3, [r7, #7]
 8007e52:	031a      	lsls	r2, r3, #12
 8007e54:	697b      	ldr	r3, [r7, #20]
 8007e56:	4413      	add	r3, r2
 8007e58:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007e5c:	461a      	mov	r2, r3
 8007e5e:	69fb      	ldr	r3, [r7, #28]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007e64:	69fb      	ldr	r3, [r7, #28]
 8007e66:	3301      	adds	r3, #1
 8007e68:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007e6a:	69fb      	ldr	r3, [r7, #28]
 8007e6c:	3301      	adds	r3, #1
 8007e6e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007e70:	69fb      	ldr	r3, [r7, #28]
 8007e72:	3301      	adds	r3, #1
 8007e74:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007e76:	69fb      	ldr	r3, [r7, #28]
 8007e78:	3301      	adds	r3, #1
 8007e7a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007e7c:	69bb      	ldr	r3, [r7, #24]
 8007e7e:	3301      	adds	r3, #1
 8007e80:	61bb      	str	r3, [r7, #24]
 8007e82:	69ba      	ldr	r2, [r7, #24]
 8007e84:	693b      	ldr	r3, [r7, #16]
 8007e86:	429a      	cmp	r2, r3
 8007e88:	d3e2      	bcc.n	8007e50 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8007e8a:	2300      	movs	r3, #0
}
 8007e8c:	4618      	mov	r0, r3
 8007e8e:	3724      	adds	r7, #36	; 0x24
 8007e90:	46bd      	mov	sp, r7
 8007e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e96:	4770      	bx	lr

08007e98 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007e98:	b480      	push	{r7}
 8007e9a:	b08b      	sub	sp, #44	; 0x2c
 8007e9c:	af00      	add	r7, sp, #0
 8007e9e:	60f8      	str	r0, [r7, #12]
 8007ea0:	60b9      	str	r1, [r7, #8]
 8007ea2:	4613      	mov	r3, r2
 8007ea4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8007eaa:	68bb      	ldr	r3, [r7, #8]
 8007eac:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8007eae:	88fb      	ldrh	r3, [r7, #6]
 8007eb0:	089b      	lsrs	r3, r3, #2
 8007eb2:	b29b      	uxth	r3, r3
 8007eb4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8007eb6:	88fb      	ldrh	r3, [r7, #6]
 8007eb8:	f003 0303 	and.w	r3, r3, #3
 8007ebc:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8007ebe:	2300      	movs	r3, #0
 8007ec0:	623b      	str	r3, [r7, #32]
 8007ec2:	e014      	b.n	8007eee <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007ec4:	69bb      	ldr	r3, [r7, #24]
 8007ec6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007eca:	681a      	ldr	r2, [r3, #0]
 8007ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ece:	601a      	str	r2, [r3, #0]
    pDest++;
 8007ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ed2:	3301      	adds	r3, #1
 8007ed4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ed8:	3301      	adds	r3, #1
 8007eda:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ede:	3301      	adds	r3, #1
 8007ee0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ee4:	3301      	adds	r3, #1
 8007ee6:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8007ee8:	6a3b      	ldr	r3, [r7, #32]
 8007eea:	3301      	adds	r3, #1
 8007eec:	623b      	str	r3, [r7, #32]
 8007eee:	6a3a      	ldr	r2, [r7, #32]
 8007ef0:	697b      	ldr	r3, [r7, #20]
 8007ef2:	429a      	cmp	r2, r3
 8007ef4:	d3e6      	bcc.n	8007ec4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8007ef6:	8bfb      	ldrh	r3, [r7, #30]
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d01e      	beq.n	8007f3a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8007efc:	2300      	movs	r3, #0
 8007efe:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8007f00:	69bb      	ldr	r3, [r7, #24]
 8007f02:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007f06:	461a      	mov	r2, r3
 8007f08:	f107 0310 	add.w	r3, r7, #16
 8007f0c:	6812      	ldr	r2, [r2, #0]
 8007f0e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8007f10:	693a      	ldr	r2, [r7, #16]
 8007f12:	6a3b      	ldr	r3, [r7, #32]
 8007f14:	b2db      	uxtb	r3, r3
 8007f16:	00db      	lsls	r3, r3, #3
 8007f18:	fa22 f303 	lsr.w	r3, r2, r3
 8007f1c:	b2da      	uxtb	r2, r3
 8007f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f20:	701a      	strb	r2, [r3, #0]
      i++;
 8007f22:	6a3b      	ldr	r3, [r7, #32]
 8007f24:	3301      	adds	r3, #1
 8007f26:	623b      	str	r3, [r7, #32]
      pDest++;
 8007f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f2a:	3301      	adds	r3, #1
 8007f2c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8007f2e:	8bfb      	ldrh	r3, [r7, #30]
 8007f30:	3b01      	subs	r3, #1
 8007f32:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8007f34:	8bfb      	ldrh	r3, [r7, #30]
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d1ea      	bne.n	8007f10 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8007f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007f3c:	4618      	mov	r0, r3
 8007f3e:	372c      	adds	r7, #44	; 0x2c
 8007f40:	46bd      	mov	sp, r7
 8007f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f46:	4770      	bx	lr

08007f48 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007f48:	b480      	push	{r7}
 8007f4a:	b085      	sub	sp, #20
 8007f4c:	af00      	add	r7, sp, #0
 8007f4e:	6078      	str	r0, [r7, #4]
 8007f50:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007f56:	683b      	ldr	r3, [r7, #0]
 8007f58:	781b      	ldrb	r3, [r3, #0]
 8007f5a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007f5c:	683b      	ldr	r3, [r7, #0]
 8007f5e:	785b      	ldrb	r3, [r3, #1]
 8007f60:	2b01      	cmp	r3, #1
 8007f62:	d12c      	bne.n	8007fbe <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007f64:	68bb      	ldr	r3, [r7, #8]
 8007f66:	015a      	lsls	r2, r3, #5
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	4413      	add	r3, r2
 8007f6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	db12      	blt.n	8007f9c <USB_EPSetStall+0x54>
 8007f76:	68bb      	ldr	r3, [r7, #8]
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d00f      	beq.n	8007f9c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8007f7c:	68bb      	ldr	r3, [r7, #8]
 8007f7e:	015a      	lsls	r2, r3, #5
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	4413      	add	r3, r2
 8007f84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	68ba      	ldr	r2, [r7, #8]
 8007f8c:	0151      	lsls	r1, r2, #5
 8007f8e:	68fa      	ldr	r2, [r7, #12]
 8007f90:	440a      	add	r2, r1
 8007f92:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007f96:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007f9a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8007f9c:	68bb      	ldr	r3, [r7, #8]
 8007f9e:	015a      	lsls	r2, r3, #5
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	4413      	add	r3, r2
 8007fa4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	68ba      	ldr	r2, [r7, #8]
 8007fac:	0151      	lsls	r1, r2, #5
 8007fae:	68fa      	ldr	r2, [r7, #12]
 8007fb0:	440a      	add	r2, r1
 8007fb2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007fb6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007fba:	6013      	str	r3, [r2, #0]
 8007fbc:	e02b      	b.n	8008016 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007fbe:	68bb      	ldr	r3, [r7, #8]
 8007fc0:	015a      	lsls	r2, r3, #5
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	4413      	add	r3, r2
 8007fc6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	db12      	blt.n	8007ff6 <USB_EPSetStall+0xae>
 8007fd0:	68bb      	ldr	r3, [r7, #8]
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d00f      	beq.n	8007ff6 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8007fd6:	68bb      	ldr	r3, [r7, #8]
 8007fd8:	015a      	lsls	r2, r3, #5
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	4413      	add	r3, r2
 8007fde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	68ba      	ldr	r2, [r7, #8]
 8007fe6:	0151      	lsls	r1, r2, #5
 8007fe8:	68fa      	ldr	r2, [r7, #12]
 8007fea:	440a      	add	r2, r1
 8007fec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007ff0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007ff4:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8007ff6:	68bb      	ldr	r3, [r7, #8]
 8007ff8:	015a      	lsls	r2, r3, #5
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	4413      	add	r3, r2
 8007ffe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	68ba      	ldr	r2, [r7, #8]
 8008006:	0151      	lsls	r1, r2, #5
 8008008:	68fa      	ldr	r2, [r7, #12]
 800800a:	440a      	add	r2, r1
 800800c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008010:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008014:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008016:	2300      	movs	r3, #0
}
 8008018:	4618      	mov	r0, r3
 800801a:	3714      	adds	r7, #20
 800801c:	46bd      	mov	sp, r7
 800801e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008022:	4770      	bx	lr

08008024 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008024:	b480      	push	{r7}
 8008026:	b085      	sub	sp, #20
 8008028:	af00      	add	r7, sp, #0
 800802a:	6078      	str	r0, [r7, #4]
 800802c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008032:	683b      	ldr	r3, [r7, #0]
 8008034:	781b      	ldrb	r3, [r3, #0]
 8008036:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008038:	683b      	ldr	r3, [r7, #0]
 800803a:	785b      	ldrb	r3, [r3, #1]
 800803c:	2b01      	cmp	r3, #1
 800803e:	d128      	bne.n	8008092 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8008040:	68bb      	ldr	r3, [r7, #8]
 8008042:	015a      	lsls	r2, r3, #5
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	4413      	add	r3, r2
 8008048:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	68ba      	ldr	r2, [r7, #8]
 8008050:	0151      	lsls	r1, r2, #5
 8008052:	68fa      	ldr	r2, [r7, #12]
 8008054:	440a      	add	r2, r1
 8008056:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800805a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800805e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008060:	683b      	ldr	r3, [r7, #0]
 8008062:	791b      	ldrb	r3, [r3, #4]
 8008064:	2b03      	cmp	r3, #3
 8008066:	d003      	beq.n	8008070 <USB_EPClearStall+0x4c>
 8008068:	683b      	ldr	r3, [r7, #0]
 800806a:	791b      	ldrb	r3, [r3, #4]
 800806c:	2b02      	cmp	r3, #2
 800806e:	d138      	bne.n	80080e2 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008070:	68bb      	ldr	r3, [r7, #8]
 8008072:	015a      	lsls	r2, r3, #5
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	4413      	add	r3, r2
 8008078:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	68ba      	ldr	r2, [r7, #8]
 8008080:	0151      	lsls	r1, r2, #5
 8008082:	68fa      	ldr	r2, [r7, #12]
 8008084:	440a      	add	r2, r1
 8008086:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800808a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800808e:	6013      	str	r3, [r2, #0]
 8008090:	e027      	b.n	80080e2 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8008092:	68bb      	ldr	r3, [r7, #8]
 8008094:	015a      	lsls	r2, r3, #5
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	4413      	add	r3, r2
 800809a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	68ba      	ldr	r2, [r7, #8]
 80080a2:	0151      	lsls	r1, r2, #5
 80080a4:	68fa      	ldr	r2, [r7, #12]
 80080a6:	440a      	add	r2, r1
 80080a8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80080ac:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80080b0:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80080b2:	683b      	ldr	r3, [r7, #0]
 80080b4:	791b      	ldrb	r3, [r3, #4]
 80080b6:	2b03      	cmp	r3, #3
 80080b8:	d003      	beq.n	80080c2 <USB_EPClearStall+0x9e>
 80080ba:	683b      	ldr	r3, [r7, #0]
 80080bc:	791b      	ldrb	r3, [r3, #4]
 80080be:	2b02      	cmp	r3, #2
 80080c0:	d10f      	bne.n	80080e2 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80080c2:	68bb      	ldr	r3, [r7, #8]
 80080c4:	015a      	lsls	r2, r3, #5
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	4413      	add	r3, r2
 80080ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	68ba      	ldr	r2, [r7, #8]
 80080d2:	0151      	lsls	r1, r2, #5
 80080d4:	68fa      	ldr	r2, [r7, #12]
 80080d6:	440a      	add	r2, r1
 80080d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80080dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80080e0:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80080e2:	2300      	movs	r3, #0
}
 80080e4:	4618      	mov	r0, r3
 80080e6:	3714      	adds	r7, #20
 80080e8:	46bd      	mov	sp, r7
 80080ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ee:	4770      	bx	lr

080080f0 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80080f0:	b480      	push	{r7}
 80080f2:	b085      	sub	sp, #20
 80080f4:	af00      	add	r7, sp, #0
 80080f6:	6078      	str	r0, [r7, #4]
 80080f8:	460b      	mov	r3, r1
 80080fa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	68fa      	ldr	r2, [r7, #12]
 800810a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800810e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8008112:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800811a:	681a      	ldr	r2, [r3, #0]
 800811c:	78fb      	ldrb	r3, [r7, #3]
 800811e:	011b      	lsls	r3, r3, #4
 8008120:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8008124:	68f9      	ldr	r1, [r7, #12]
 8008126:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800812a:	4313      	orrs	r3, r2
 800812c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800812e:	2300      	movs	r3, #0
}
 8008130:	4618      	mov	r0, r3
 8008132:	3714      	adds	r7, #20
 8008134:	46bd      	mov	sp, r7
 8008136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800813a:	4770      	bx	lr

0800813c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800813c:	b480      	push	{r7}
 800813e:	b085      	sub	sp, #20
 8008140:	af00      	add	r7, sp, #0
 8008142:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	68fa      	ldr	r2, [r7, #12]
 8008152:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008156:	f023 0303 	bic.w	r3, r3, #3
 800815a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008162:	685b      	ldr	r3, [r3, #4]
 8008164:	68fa      	ldr	r2, [r7, #12]
 8008166:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800816a:	f023 0302 	bic.w	r3, r3, #2
 800816e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008170:	2300      	movs	r3, #0
}
 8008172:	4618      	mov	r0, r3
 8008174:	3714      	adds	r7, #20
 8008176:	46bd      	mov	sp, r7
 8008178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800817c:	4770      	bx	lr

0800817e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800817e:	b480      	push	{r7}
 8008180:	b085      	sub	sp, #20
 8008182:	af00      	add	r7, sp, #0
 8008184:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	68fa      	ldr	r2, [r7, #12]
 8008194:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008198:	f023 0303 	bic.w	r3, r3, #3
 800819c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80081a4:	685b      	ldr	r3, [r3, #4]
 80081a6:	68fa      	ldr	r2, [r7, #12]
 80081a8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80081ac:	f043 0302 	orr.w	r3, r3, #2
 80081b0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80081b2:	2300      	movs	r3, #0
}
 80081b4:	4618      	mov	r0, r3
 80081b6:	3714      	adds	r7, #20
 80081b8:	46bd      	mov	sp, r7
 80081ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081be:	4770      	bx	lr

080081c0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80081c0:	b480      	push	{r7}
 80081c2:	b085      	sub	sp, #20
 80081c4:	af00      	add	r7, sp, #0
 80081c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	695b      	ldr	r3, [r3, #20]
 80081cc:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	699b      	ldr	r3, [r3, #24]
 80081d2:	68fa      	ldr	r2, [r7, #12]
 80081d4:	4013      	ands	r3, r2
 80081d6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80081d8:	68fb      	ldr	r3, [r7, #12]
}
 80081da:	4618      	mov	r0, r3
 80081dc:	3714      	adds	r7, #20
 80081de:	46bd      	mov	sp, r7
 80081e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e4:	4770      	bx	lr

080081e6 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80081e6:	b480      	push	{r7}
 80081e8:	b085      	sub	sp, #20
 80081ea:	af00      	add	r7, sp, #0
 80081ec:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80081f8:	699b      	ldr	r3, [r3, #24]
 80081fa:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008202:	69db      	ldr	r3, [r3, #28]
 8008204:	68ba      	ldr	r2, [r7, #8]
 8008206:	4013      	ands	r3, r2
 8008208:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800820a:	68bb      	ldr	r3, [r7, #8]
 800820c:	0c1b      	lsrs	r3, r3, #16
}
 800820e:	4618      	mov	r0, r3
 8008210:	3714      	adds	r7, #20
 8008212:	46bd      	mov	sp, r7
 8008214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008218:	4770      	bx	lr

0800821a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800821a:	b480      	push	{r7}
 800821c:	b085      	sub	sp, #20
 800821e:	af00      	add	r7, sp, #0
 8008220:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800822c:	699b      	ldr	r3, [r3, #24]
 800822e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008236:	69db      	ldr	r3, [r3, #28]
 8008238:	68ba      	ldr	r2, [r7, #8]
 800823a:	4013      	ands	r3, r2
 800823c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800823e:	68bb      	ldr	r3, [r7, #8]
 8008240:	b29b      	uxth	r3, r3
}
 8008242:	4618      	mov	r0, r3
 8008244:	3714      	adds	r7, #20
 8008246:	46bd      	mov	sp, r7
 8008248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800824c:	4770      	bx	lr

0800824e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800824e:	b480      	push	{r7}
 8008250:	b085      	sub	sp, #20
 8008252:	af00      	add	r7, sp, #0
 8008254:	6078      	str	r0, [r7, #4]
 8008256:	460b      	mov	r3, r1
 8008258:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800825e:	78fb      	ldrb	r3, [r7, #3]
 8008260:	015a      	lsls	r2, r3, #5
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	4413      	add	r3, r2
 8008266:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800826a:	689b      	ldr	r3, [r3, #8]
 800826c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008274:	695b      	ldr	r3, [r3, #20]
 8008276:	68ba      	ldr	r2, [r7, #8]
 8008278:	4013      	ands	r3, r2
 800827a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800827c:	68bb      	ldr	r3, [r7, #8]
}
 800827e:	4618      	mov	r0, r3
 8008280:	3714      	adds	r7, #20
 8008282:	46bd      	mov	sp, r7
 8008284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008288:	4770      	bx	lr

0800828a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800828a:	b480      	push	{r7}
 800828c:	b087      	sub	sp, #28
 800828e:	af00      	add	r7, sp, #0
 8008290:	6078      	str	r0, [r7, #4]
 8008292:	460b      	mov	r3, r1
 8008294:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800829a:	697b      	ldr	r3, [r7, #20]
 800829c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80082a0:	691b      	ldr	r3, [r3, #16]
 80082a2:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80082a4:	697b      	ldr	r3, [r7, #20]
 80082a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80082aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80082ac:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80082ae:	78fb      	ldrb	r3, [r7, #3]
 80082b0:	f003 030f 	and.w	r3, r3, #15
 80082b4:	68fa      	ldr	r2, [r7, #12]
 80082b6:	fa22 f303 	lsr.w	r3, r2, r3
 80082ba:	01db      	lsls	r3, r3, #7
 80082bc:	b2db      	uxtb	r3, r3
 80082be:	693a      	ldr	r2, [r7, #16]
 80082c0:	4313      	orrs	r3, r2
 80082c2:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80082c4:	78fb      	ldrb	r3, [r7, #3]
 80082c6:	015a      	lsls	r2, r3, #5
 80082c8:	697b      	ldr	r3, [r7, #20]
 80082ca:	4413      	add	r3, r2
 80082cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80082d0:	689b      	ldr	r3, [r3, #8]
 80082d2:	693a      	ldr	r2, [r7, #16]
 80082d4:	4013      	ands	r3, r2
 80082d6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80082d8:	68bb      	ldr	r3, [r7, #8]
}
 80082da:	4618      	mov	r0, r3
 80082dc:	371c      	adds	r7, #28
 80082de:	46bd      	mov	sp, r7
 80082e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082e4:	4770      	bx	lr

080082e6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80082e6:	b480      	push	{r7}
 80082e8:	b083      	sub	sp, #12
 80082ea:	af00      	add	r7, sp, #0
 80082ec:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	695b      	ldr	r3, [r3, #20]
 80082f2:	f003 0301 	and.w	r3, r3, #1
}
 80082f6:	4618      	mov	r0, r3
 80082f8:	370c      	adds	r7, #12
 80082fa:	46bd      	mov	sp, r7
 80082fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008300:	4770      	bx	lr

08008302 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8008302:	b480      	push	{r7}
 8008304:	b085      	sub	sp, #20
 8008306:	af00      	add	r7, sp, #0
 8008308:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	68fa      	ldr	r2, [r7, #12]
 8008318:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800831c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8008320:	f023 0307 	bic.w	r3, r3, #7
 8008324:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800832c:	685b      	ldr	r3, [r3, #4]
 800832e:	68fa      	ldr	r2, [r7, #12]
 8008330:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008334:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008338:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800833a:	2300      	movs	r3, #0
}
 800833c:	4618      	mov	r0, r3
 800833e:	3714      	adds	r7, #20
 8008340:	46bd      	mov	sp, r7
 8008342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008346:	4770      	bx	lr

08008348 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8008348:	b480      	push	{r7}
 800834a:	b087      	sub	sp, #28
 800834c:	af00      	add	r7, sp, #0
 800834e:	60f8      	str	r0, [r7, #12]
 8008350:	460b      	mov	r3, r1
 8008352:	607a      	str	r2, [r7, #4]
 8008354:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	333c      	adds	r3, #60	; 0x3c
 800835e:	3304      	adds	r3, #4
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8008364:	693b      	ldr	r3, [r7, #16]
 8008366:	4a26      	ldr	r2, [pc, #152]	; (8008400 <USB_EP0_OutStart+0xb8>)
 8008368:	4293      	cmp	r3, r2
 800836a:	d90a      	bls.n	8008382 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800836c:	697b      	ldr	r3, [r7, #20]
 800836e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008378:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800837c:	d101      	bne.n	8008382 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800837e:	2300      	movs	r3, #0
 8008380:	e037      	b.n	80083f2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8008382:	697b      	ldr	r3, [r7, #20]
 8008384:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008388:	461a      	mov	r2, r3
 800838a:	2300      	movs	r3, #0
 800838c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800838e:	697b      	ldr	r3, [r7, #20]
 8008390:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008394:	691b      	ldr	r3, [r3, #16]
 8008396:	697a      	ldr	r2, [r7, #20]
 8008398:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800839c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80083a0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80083a2:	697b      	ldr	r3, [r7, #20]
 80083a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80083a8:	691b      	ldr	r3, [r3, #16]
 80083aa:	697a      	ldr	r2, [r7, #20]
 80083ac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80083b0:	f043 0318 	orr.w	r3, r3, #24
 80083b4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80083b6:	697b      	ldr	r3, [r7, #20]
 80083b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80083bc:	691b      	ldr	r3, [r3, #16]
 80083be:	697a      	ldr	r2, [r7, #20]
 80083c0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80083c4:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80083c8:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80083ca:	7afb      	ldrb	r3, [r7, #11]
 80083cc:	2b01      	cmp	r3, #1
 80083ce:	d10f      	bne.n	80083f0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80083d0:	697b      	ldr	r3, [r7, #20]
 80083d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80083d6:	461a      	mov	r2, r3
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80083dc:	697b      	ldr	r3, [r7, #20]
 80083de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	697a      	ldr	r2, [r7, #20]
 80083e6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80083ea:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80083ee:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80083f0:	2300      	movs	r3, #0
}
 80083f2:	4618      	mov	r0, r3
 80083f4:	371c      	adds	r7, #28
 80083f6:	46bd      	mov	sp, r7
 80083f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083fc:	4770      	bx	lr
 80083fe:	bf00      	nop
 8008400:	4f54300a 	.word	0x4f54300a

08008404 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008404:	b480      	push	{r7}
 8008406:	b085      	sub	sp, #20
 8008408:	af00      	add	r7, sp, #0
 800840a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800840c:	2300      	movs	r3, #0
 800840e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	3301      	adds	r3, #1
 8008414:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	4a13      	ldr	r2, [pc, #76]	; (8008468 <USB_CoreReset+0x64>)
 800841a:	4293      	cmp	r3, r2
 800841c:	d901      	bls.n	8008422 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800841e:	2303      	movs	r3, #3
 8008420:	e01b      	b.n	800845a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	691b      	ldr	r3, [r3, #16]
 8008426:	2b00      	cmp	r3, #0
 8008428:	daf2      	bge.n	8008410 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800842a:	2300      	movs	r3, #0
 800842c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	691b      	ldr	r3, [r3, #16]
 8008432:	f043 0201 	orr.w	r2, r3, #1
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	3301      	adds	r3, #1
 800843e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	4a09      	ldr	r2, [pc, #36]	; (8008468 <USB_CoreReset+0x64>)
 8008444:	4293      	cmp	r3, r2
 8008446:	d901      	bls.n	800844c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008448:	2303      	movs	r3, #3
 800844a:	e006      	b.n	800845a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	691b      	ldr	r3, [r3, #16]
 8008450:	f003 0301 	and.w	r3, r3, #1
 8008454:	2b01      	cmp	r3, #1
 8008456:	d0f0      	beq.n	800843a <USB_CoreReset+0x36>

  return HAL_OK;
 8008458:	2300      	movs	r3, #0
}
 800845a:	4618      	mov	r0, r3
 800845c:	3714      	adds	r7, #20
 800845e:	46bd      	mov	sp, r7
 8008460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008464:	4770      	bx	lr
 8008466:	bf00      	nop
 8008468:	00030d40 	.word	0x00030d40

0800846c <USBD_MSC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800846c:	b580      	push	{r7, lr}
 800846e:	b084      	sub	sp, #16
 8008470:	af00      	add	r7, sp, #0
 8008472:	6078      	str	r0, [r7, #4]
 8008474:	460b      	mov	r3, r1
 8008476:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_MSC_BOT_HandleTypeDef *hmsc;

  hmsc = (USBD_MSC_BOT_HandleTypeDef *)USBD_malloc(sizeof(USBD_MSC_BOT_HandleTypeDef));
 8008478:	f241 0074 	movw	r0, #4212	; 0x1074
 800847c:	f004 f850 	bl	800c520 <USBD_static_malloc>
 8008480:	60f8      	str	r0, [r7, #12]

  if (hmsc == NULL)
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	2b00      	cmp	r3, #0
 8008486:	d109      	bne.n	800849c <USBD_MSC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	32b0      	adds	r2, #176	; 0xb0
 8008492:	2100      	movs	r1, #0
 8008494:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8008498:	2302      	movs	r3, #2
 800849a:	e06e      	b.n	800857a <USBD_MSC_Init+0x10e>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hmsc;
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	32b0      	adds	r2, #176	; 0xb0
 80084a6:	68f9      	ldr	r1, [r7, #12]
 80084a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	32b0      	adds	r2, #176	; 0xb0
 80084b6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	7c1b      	ldrb	r3, [r3, #16]
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d12b      	bne.n	8008520 <USBD_MSC_Init+0xb4>
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSCOutEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 80084c8:	4b2e      	ldr	r3, [pc, #184]	; (8008584 <USBD_MSC_Init+0x118>)
 80084ca:	7819      	ldrb	r1, [r3, #0]
 80084cc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80084d0:	2202      	movs	r2, #2
 80084d2:	6878      	ldr	r0, [r7, #4]
 80084d4:	f003 fee2 	bl	800c29c <USBD_LL_OpenEP>
    pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 1U;
 80084d8:	4b2a      	ldr	r3, [pc, #168]	; (8008584 <USBD_MSC_Init+0x118>)
 80084da:	781b      	ldrb	r3, [r3, #0]
 80084dc:	f003 020f 	and.w	r2, r3, #15
 80084e0:	6879      	ldr	r1, [r7, #4]
 80084e2:	4613      	mov	r3, r2
 80084e4:	009b      	lsls	r3, r3, #2
 80084e6:	4413      	add	r3, r2
 80084e8:	009b      	lsls	r3, r3, #2
 80084ea:	440b      	add	r3, r1
 80084ec:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80084f0:	2201      	movs	r2, #1
 80084f2:	801a      	strh	r2, [r3, #0]

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSCInEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 80084f4:	4b24      	ldr	r3, [pc, #144]	; (8008588 <USBD_MSC_Init+0x11c>)
 80084f6:	7819      	ldrb	r1, [r3, #0]
 80084f8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80084fc:	2202      	movs	r2, #2
 80084fe:	6878      	ldr	r0, [r7, #4]
 8008500:	f003 fecc 	bl	800c29c <USBD_LL_OpenEP>
    pdev->ep_in[MSCInEpAdd & 0xFU].is_used = 1U;
 8008504:	4b20      	ldr	r3, [pc, #128]	; (8008588 <USBD_MSC_Init+0x11c>)
 8008506:	781b      	ldrb	r3, [r3, #0]
 8008508:	f003 020f 	and.w	r2, r3, #15
 800850c:	6879      	ldr	r1, [r7, #4]
 800850e:	4613      	mov	r3, r2
 8008510:	009b      	lsls	r3, r3, #2
 8008512:	4413      	add	r3, r2
 8008514:	009b      	lsls	r3, r3, #2
 8008516:	440b      	add	r3, r1
 8008518:	3324      	adds	r3, #36	; 0x24
 800851a:	2201      	movs	r2, #1
 800851c:	801a      	strh	r2, [r3, #0]
 800851e:	e028      	b.n	8008572 <USBD_MSC_Init+0x106>
  }
  else
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSCOutEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 8008520:	4b18      	ldr	r3, [pc, #96]	; (8008584 <USBD_MSC_Init+0x118>)
 8008522:	7819      	ldrb	r1, [r3, #0]
 8008524:	2340      	movs	r3, #64	; 0x40
 8008526:	2202      	movs	r2, #2
 8008528:	6878      	ldr	r0, [r7, #4]
 800852a:	f003 feb7 	bl	800c29c <USBD_LL_OpenEP>
    pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 1U;
 800852e:	4b15      	ldr	r3, [pc, #84]	; (8008584 <USBD_MSC_Init+0x118>)
 8008530:	781b      	ldrb	r3, [r3, #0]
 8008532:	f003 020f 	and.w	r2, r3, #15
 8008536:	6879      	ldr	r1, [r7, #4]
 8008538:	4613      	mov	r3, r2
 800853a:	009b      	lsls	r3, r3, #2
 800853c:	4413      	add	r3, r2
 800853e:	009b      	lsls	r3, r3, #2
 8008540:	440b      	add	r3, r1
 8008542:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008546:	2201      	movs	r2, #1
 8008548:	801a      	strh	r2, [r3, #0]

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSCInEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 800854a:	4b0f      	ldr	r3, [pc, #60]	; (8008588 <USBD_MSC_Init+0x11c>)
 800854c:	7819      	ldrb	r1, [r3, #0]
 800854e:	2340      	movs	r3, #64	; 0x40
 8008550:	2202      	movs	r2, #2
 8008552:	6878      	ldr	r0, [r7, #4]
 8008554:	f003 fea2 	bl	800c29c <USBD_LL_OpenEP>
    pdev->ep_in[MSCInEpAdd & 0xFU].is_used = 1U;
 8008558:	4b0b      	ldr	r3, [pc, #44]	; (8008588 <USBD_MSC_Init+0x11c>)
 800855a:	781b      	ldrb	r3, [r3, #0]
 800855c:	f003 020f 	and.w	r2, r3, #15
 8008560:	6879      	ldr	r1, [r7, #4]
 8008562:	4613      	mov	r3, r2
 8008564:	009b      	lsls	r3, r3, #2
 8008566:	4413      	add	r3, r2
 8008568:	009b      	lsls	r3, r3, #2
 800856a:	440b      	add	r3, r1
 800856c:	3324      	adds	r3, #36	; 0x24
 800856e:	2201      	movs	r2, #1
 8008570:	801a      	strh	r2, [r3, #0]
  }

  /* Init the BOT  layer */
  MSC_BOT_Init(pdev);
 8008572:	6878      	ldr	r0, [r7, #4]
 8008574:	f000 fa2c 	bl	80089d0 <MSC_BOT_Init>

  return (uint8_t)USBD_OK;
 8008578:	2300      	movs	r3, #0
}
 800857a:	4618      	mov	r0, r3
 800857c:	3710      	adds	r7, #16
 800857e:	46bd      	mov	sp, r7
 8008580:	bd80      	pop	{r7, pc}
 8008582:	bf00      	nop
 8008584:	20000073 	.word	0x20000073
 8008588:	20000072 	.word	0x20000072

0800858c <USBD_MSC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800858c:	b580      	push	{r7, lr}
 800858e:	b082      	sub	sp, #8
 8008590:	af00      	add	r7, sp, #0
 8008592:	6078      	str	r0, [r7, #4]
 8008594:	460b      	mov	r3, r1
 8008596:	70fb      	strb	r3, [r7, #3]
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  /* Close MSC EPs */
  (void)USBD_LL_CloseEP(pdev, MSCOutEpAdd);
 8008598:	4b26      	ldr	r3, [pc, #152]	; (8008634 <USBD_MSC_DeInit+0xa8>)
 800859a:	781b      	ldrb	r3, [r3, #0]
 800859c:	4619      	mov	r1, r3
 800859e:	6878      	ldr	r0, [r7, #4]
 80085a0:	f003 fea2 	bl	800c2e8 <USBD_LL_CloseEP>
  pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 0U;
 80085a4:	4b23      	ldr	r3, [pc, #140]	; (8008634 <USBD_MSC_DeInit+0xa8>)
 80085a6:	781b      	ldrb	r3, [r3, #0]
 80085a8:	f003 020f 	and.w	r2, r3, #15
 80085ac:	6879      	ldr	r1, [r7, #4]
 80085ae:	4613      	mov	r3, r2
 80085b0:	009b      	lsls	r3, r3, #2
 80085b2:	4413      	add	r3, r2
 80085b4:	009b      	lsls	r3, r3, #2
 80085b6:	440b      	add	r3, r1
 80085b8:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80085bc:	2200      	movs	r2, #0
 80085be:	801a      	strh	r2, [r3, #0]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, MSCInEpAdd);
 80085c0:	4b1d      	ldr	r3, [pc, #116]	; (8008638 <USBD_MSC_DeInit+0xac>)
 80085c2:	781b      	ldrb	r3, [r3, #0]
 80085c4:	4619      	mov	r1, r3
 80085c6:	6878      	ldr	r0, [r7, #4]
 80085c8:	f003 fe8e 	bl	800c2e8 <USBD_LL_CloseEP>
  pdev->ep_in[MSCInEpAdd & 0xFU].is_used = 0U;
 80085cc:	4b1a      	ldr	r3, [pc, #104]	; (8008638 <USBD_MSC_DeInit+0xac>)
 80085ce:	781b      	ldrb	r3, [r3, #0]
 80085d0:	f003 020f 	and.w	r2, r3, #15
 80085d4:	6879      	ldr	r1, [r7, #4]
 80085d6:	4613      	mov	r3, r2
 80085d8:	009b      	lsls	r3, r3, #2
 80085da:	4413      	add	r3, r2
 80085dc:	009b      	lsls	r3, r3, #2
 80085de:	440b      	add	r3, r1
 80085e0:	3324      	adds	r3, #36	; 0x24
 80085e2:	2200      	movs	r2, #0
 80085e4:	801a      	strh	r2, [r3, #0]

  /* Free MSC Class Resources */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	32b0      	adds	r2, #176	; 0xb0
 80085f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d018      	beq.n	800862a <USBD_MSC_DeInit+0x9e>
  {
    /* De-Init the BOT layer */
    MSC_BOT_DeInit(pdev);
 80085f8:	6878      	ldr	r0, [r7, #4]
 80085fa:	f000 fa6f 	bl	8008adc <MSC_BOT_DeInit>

    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	32b0      	adds	r2, #176	; 0xb0
 8008608:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800860c:	4618      	mov	r0, r3
 800860e:	f003 ff95 	bl	800c53c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId]  = NULL;
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	32b0      	adds	r2, #176	; 0xb0
 800861c:	2100      	movs	r1, #0
 800861e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	2200      	movs	r2, #0
 8008626:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800862a:	2300      	movs	r3, #0
}
 800862c:	4618      	mov	r0, r3
 800862e:	3708      	adds	r7, #8
 8008630:	46bd      	mov	sp, r7
 8008632:	bd80      	pop	{r7, pc}
 8008634:	20000073 	.word	0x20000073
 8008638:	20000072 	.word	0x20000072

0800863c <USBD_MSC_Setup>:
  * @param  pdev: device instance
  * @param  req: USB request
  * @retval status
  */
uint8_t USBD_MSC_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800863c:	b580      	push	{r7, lr}
 800863e:	b086      	sub	sp, #24
 8008640:	af00      	add	r7, sp, #0
 8008642:	6078      	str	r0, [r7, #4]
 8008644:	6039      	str	r1, [r7, #0]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	32b0      	adds	r2, #176	; 0xb0
 8008650:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008654:	613b      	str	r3, [r7, #16]
  USBD_StatusTypeDef ret = USBD_OK;
 8008656:	2300      	movs	r3, #0
 8008658:	75fb      	strb	r3, [r7, #23]
  uint16_t status_info = 0U;
 800865a:	2300      	movs	r3, #0
 800865c:	81fb      	strh	r3, [r7, #14]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 800865e:	693b      	ldr	r3, [r7, #16]
 8008660:	2b00      	cmp	r3, #0
 8008662:	d101      	bne.n	8008668 <USBD_MSC_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 8008664:	2303      	movs	r3, #3
 8008666:	e0e1      	b.n	800882c <USBD_MSC_Setup+0x1f0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008668:	683b      	ldr	r3, [r7, #0]
 800866a:	781b      	ldrb	r3, [r3, #0]
 800866c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008670:	2b00      	cmp	r3, #0
 8008672:	d053      	beq.n	800871c <USBD_MSC_Setup+0xe0>
 8008674:	2b20      	cmp	r3, #32
 8008676:	f040 80d1 	bne.w	800881c <USBD_MSC_Setup+0x1e0>
  {
    /* Class request */
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 800867a:	683b      	ldr	r3, [r7, #0]
 800867c:	785b      	ldrb	r3, [r3, #1]
 800867e:	2bfe      	cmp	r3, #254	; 0xfe
 8008680:	d002      	beq.n	8008688 <USBD_MSC_Setup+0x4c>
 8008682:	2bff      	cmp	r3, #255	; 0xff
 8008684:	d02a      	beq.n	80086dc <USBD_MSC_Setup+0xa0>
 8008686:	e041      	b.n	800870c <USBD_MSC_Setup+0xd0>
      {
        case BOT_GET_MAX_LUN:
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 8008688:	683b      	ldr	r3, [r7, #0]
 800868a:	885b      	ldrh	r3, [r3, #2]
 800868c:	2b00      	cmp	r3, #0
 800868e:	d11e      	bne.n	80086ce <USBD_MSC_Setup+0x92>
 8008690:	683b      	ldr	r3, [r7, #0]
 8008692:	88db      	ldrh	r3, [r3, #6]
 8008694:	2b01      	cmp	r3, #1
 8008696:	d11a      	bne.n	80086ce <USBD_MSC_Setup+0x92>
              ((req->bmRequest & 0x80U) == 0x80U))
 8008698:	683b      	ldr	r3, [r7, #0]
 800869a:	781b      	ldrb	r3, [r3, #0]
 800869c:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 800869e:	2b00      	cmp	r3, #0
 80086a0:	da15      	bge.n	80086ce <USBD_MSC_Setup+0x92>
          {
            hmsc->max_lun = (uint32_t)((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetMaxLun();
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80086a8:	687a      	ldr	r2, [r7, #4]
 80086aa:	33b0      	adds	r3, #176	; 0xb0
 80086ac:	009b      	lsls	r3, r3, #2
 80086ae:	4413      	add	r3, r2
 80086b0:	685b      	ldr	r3, [r3, #4]
 80086b2:	699b      	ldr	r3, [r3, #24]
 80086b4:	4798      	blx	r3
 80086b6:	4603      	mov	r3, r0
 80086b8:	461a      	mov	r2, r3
 80086ba:	693b      	ldr	r3, [r7, #16]
 80086bc:	601a      	str	r2, [r3, #0]
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->max_lun, 1U);
 80086be:	693b      	ldr	r3, [r7, #16]
 80086c0:	2201      	movs	r2, #1
 80086c2:	4619      	mov	r1, r3
 80086c4:	6878      	ldr	r0, [r7, #4]
 80086c6:	f003 f9f3 	bl	800bab0 <USBD_CtlSendData>
 80086ca:	bf00      	nop
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80086cc:	e025      	b.n	800871a <USBD_MSC_Setup+0xde>
            USBD_CtlError(pdev, req);
 80086ce:	6839      	ldr	r1, [r7, #0]
 80086d0:	6878      	ldr	r0, [r7, #4]
 80086d2:	f003 f97c 	bl	800b9ce <USBD_CtlError>
            ret = USBD_FAIL;
 80086d6:	2303      	movs	r3, #3
 80086d8:	75fb      	strb	r3, [r7, #23]
          break;
 80086da:	e01e      	b.n	800871a <USBD_MSC_Setup+0xde>

        case BOT_RESET :
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 80086dc:	683b      	ldr	r3, [r7, #0]
 80086de:	885b      	ldrh	r3, [r3, #2]
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d10c      	bne.n	80086fe <USBD_MSC_Setup+0xc2>
 80086e4:	683b      	ldr	r3, [r7, #0]
 80086e6:	88db      	ldrh	r3, [r3, #6]
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d108      	bne.n	80086fe <USBD_MSC_Setup+0xc2>
              ((req->bmRequest & 0x80U) != 0x80U))
 80086ec:	683b      	ldr	r3, [r7, #0]
 80086ee:	781b      	ldrb	r3, [r3, #0]
 80086f0:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	db03      	blt.n	80086fe <USBD_MSC_Setup+0xc2>
          {
            MSC_BOT_Reset(pdev);
 80086f6:	6878      	ldr	r0, [r7, #4]
 80086f8:	f000 f9bc 	bl	8008a74 <MSC_BOT_Reset>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80086fc:	e00d      	b.n	800871a <USBD_MSC_Setup+0xde>
            USBD_CtlError(pdev, req);
 80086fe:	6839      	ldr	r1, [r7, #0]
 8008700:	6878      	ldr	r0, [r7, #4]
 8008702:	f003 f964 	bl	800b9ce <USBD_CtlError>
            ret = USBD_FAIL;
 8008706:	2303      	movs	r3, #3
 8008708:	75fb      	strb	r3, [r7, #23]
          break;
 800870a:	e006      	b.n	800871a <USBD_MSC_Setup+0xde>

        default:
          USBD_CtlError(pdev, req);
 800870c:	6839      	ldr	r1, [r7, #0]
 800870e:	6878      	ldr	r0, [r7, #4]
 8008710:	f003 f95d 	bl	800b9ce <USBD_CtlError>
          ret = USBD_FAIL;
 8008714:	2303      	movs	r3, #3
 8008716:	75fb      	strb	r3, [r7, #23]
          break;
 8008718:	bf00      	nop
      }
      break;
 800871a:	e086      	b.n	800882a <USBD_MSC_Setup+0x1ee>
    /* Interface & Endpoint request */
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800871c:	683b      	ldr	r3, [r7, #0]
 800871e:	785b      	ldrb	r3, [r3, #1]
 8008720:	2b0b      	cmp	r3, #11
 8008722:	d872      	bhi.n	800880a <USBD_MSC_Setup+0x1ce>
 8008724:	a201      	add	r2, pc, #4	; (adr r2, 800872c <USBD_MSC_Setup+0xf0>)
 8008726:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800872a:	bf00      	nop
 800872c:	0800875d 	.word	0x0800875d
 8008730:	080087d9 	.word	0x080087d9
 8008734:	0800880b 	.word	0x0800880b
 8008738:	0800880b 	.word	0x0800880b
 800873c:	0800880b 	.word	0x0800880b
 8008740:	0800880b 	.word	0x0800880b
 8008744:	0800880b 	.word	0x0800880b
 8008748:	0800880b 	.word	0x0800880b
 800874c:	0800880b 	.word	0x0800880b
 8008750:	0800880b 	.word	0x0800880b
 8008754:	08008787 	.word	0x08008787
 8008758:	080087b1 	.word	0x080087b1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008762:	b2db      	uxtb	r3, r3
 8008764:	2b03      	cmp	r3, #3
 8008766:	d107      	bne.n	8008778 <USBD_MSC_Setup+0x13c>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8008768:	f107 030e 	add.w	r3, r7, #14
 800876c:	2202      	movs	r2, #2
 800876e:	4619      	mov	r1, r3
 8008770:	6878      	ldr	r0, [r7, #4]
 8008772:	f003 f99d 	bl	800bab0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008776:	e050      	b.n	800881a <USBD_MSC_Setup+0x1de>
            USBD_CtlError(pdev, req);
 8008778:	6839      	ldr	r1, [r7, #0]
 800877a:	6878      	ldr	r0, [r7, #4]
 800877c:	f003 f927 	bl	800b9ce <USBD_CtlError>
            ret = USBD_FAIL;
 8008780:	2303      	movs	r3, #3
 8008782:	75fb      	strb	r3, [r7, #23]
          break;
 8008784:	e049      	b.n	800881a <USBD_MSC_Setup+0x1de>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800878c:	b2db      	uxtb	r3, r3
 800878e:	2b03      	cmp	r3, #3
 8008790:	d107      	bne.n	80087a2 <USBD_MSC_Setup+0x166>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->interface, 1U);
 8008792:	693b      	ldr	r3, [r7, #16]
 8008794:	3304      	adds	r3, #4
 8008796:	2201      	movs	r2, #1
 8008798:	4619      	mov	r1, r3
 800879a:	6878      	ldr	r0, [r7, #4]
 800879c:	f003 f988 	bl	800bab0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80087a0:	e03b      	b.n	800881a <USBD_MSC_Setup+0x1de>
            USBD_CtlError(pdev, req);
 80087a2:	6839      	ldr	r1, [r7, #0]
 80087a4:	6878      	ldr	r0, [r7, #4]
 80087a6:	f003 f912 	bl	800b9ce <USBD_CtlError>
            ret = USBD_FAIL;
 80087aa:	2303      	movs	r3, #3
 80087ac:	75fb      	strb	r3, [r7, #23]
          break;
 80087ae:	e034      	b.n	800881a <USBD_MSC_Setup+0x1de>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80087b6:	b2db      	uxtb	r3, r3
 80087b8:	2b03      	cmp	r3, #3
 80087ba:	d106      	bne.n	80087ca <USBD_MSC_Setup+0x18e>
          {
            hmsc->interface = (uint8_t)(req->wValue);
 80087bc:	683b      	ldr	r3, [r7, #0]
 80087be:	885b      	ldrh	r3, [r3, #2]
 80087c0:	b2db      	uxtb	r3, r3
 80087c2:	461a      	mov	r2, r3
 80087c4:	693b      	ldr	r3, [r7, #16]
 80087c6:	605a      	str	r2, [r3, #4]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80087c8:	e027      	b.n	800881a <USBD_MSC_Setup+0x1de>
            USBD_CtlError(pdev, req);
 80087ca:	6839      	ldr	r1, [r7, #0]
 80087cc:	6878      	ldr	r0, [r7, #4]
 80087ce:	f003 f8fe 	bl	800b9ce <USBD_CtlError>
            ret = USBD_FAIL;
 80087d2:	2303      	movs	r3, #3
 80087d4:	75fb      	strb	r3, [r7, #23]
          break;
 80087d6:	e020      	b.n	800881a <USBD_MSC_Setup+0x1de>

        case USB_REQ_CLEAR_FEATURE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80087de:	b2db      	uxtb	r3, r3
 80087e0:	2b03      	cmp	r3, #3
 80087e2:	d119      	bne.n	8008818 <USBD_MSC_Setup+0x1dc>
          {
            if (req->wValue == USB_FEATURE_EP_HALT)
 80087e4:	683b      	ldr	r3, [r7, #0]
 80087e6:	885b      	ldrh	r3, [r3, #2]
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d115      	bne.n	8008818 <USBD_MSC_Setup+0x1dc>
            {
              /* Flush the FIFO */
              (void)USBD_LL_FlushEP(pdev, (uint8_t)req->wIndex);
 80087ec:	683b      	ldr	r3, [r7, #0]
 80087ee:	889b      	ldrh	r3, [r3, #4]
 80087f0:	b2db      	uxtb	r3, r3
 80087f2:	4619      	mov	r1, r3
 80087f4:	6878      	ldr	r0, [r7, #4]
 80087f6:	f003 fd96 	bl	800c326 <USBD_LL_FlushEP>

              /* Handle BOT error */
              MSC_BOT_CplClrFeature(pdev, (uint8_t)req->wIndex);
 80087fa:	683b      	ldr	r3, [r7, #0]
 80087fc:	889b      	ldrh	r3, [r3, #4]
 80087fe:	b2db      	uxtb	r3, r3
 8008800:	4619      	mov	r1, r3
 8008802:	6878      	ldr	r0, [r7, #4]
 8008804:	f000 fb54 	bl	8008eb0 <MSC_BOT_CplClrFeature>
            }
          }
          break;
 8008808:	e006      	b.n	8008818 <USBD_MSC_Setup+0x1dc>

        default:
          USBD_CtlError(pdev, req);
 800880a:	6839      	ldr	r1, [r7, #0]
 800880c:	6878      	ldr	r0, [r7, #4]
 800880e:	f003 f8de 	bl	800b9ce <USBD_CtlError>
          ret = USBD_FAIL;
 8008812:	2303      	movs	r3, #3
 8008814:	75fb      	strb	r3, [r7, #23]
          break;
 8008816:	e000      	b.n	800881a <USBD_MSC_Setup+0x1de>
          break;
 8008818:	bf00      	nop
      }
      break;
 800881a:	e006      	b.n	800882a <USBD_MSC_Setup+0x1ee>

    default:
      USBD_CtlError(pdev, req);
 800881c:	6839      	ldr	r1, [r7, #0]
 800881e:	6878      	ldr	r0, [r7, #4]
 8008820:	f003 f8d5 	bl	800b9ce <USBD_CtlError>
      ret = USBD_FAIL;
 8008824:	2303      	movs	r3, #3
 8008826:	75fb      	strb	r3, [r7, #23]
      break;
 8008828:	bf00      	nop
  }

  return (uint8_t)ret;
 800882a:	7dfb      	ldrb	r3, [r7, #23]
}
 800882c:	4618      	mov	r0, r3
 800882e:	3718      	adds	r7, #24
 8008830:	46bd      	mov	sp, r7
 8008832:	bd80      	pop	{r7, pc}

08008834 <USBD_MSC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
uint8_t USBD_MSC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008834:	b580      	push	{r7, lr}
 8008836:	b082      	sub	sp, #8
 8008838:	af00      	add	r7, sp, #0
 800883a:	6078      	str	r0, [r7, #4]
 800883c:	460b      	mov	r3, r1
 800883e:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataIn(pdev, epnum);
 8008840:	78fb      	ldrb	r3, [r7, #3]
 8008842:	4619      	mov	r1, r3
 8008844:	6878      	ldr	r0, [r7, #4]
 8008846:	f000 f961 	bl	8008b0c <MSC_BOT_DataIn>

  return (uint8_t)USBD_OK;
 800884a:	2300      	movs	r3, #0
}
 800884c:	4618      	mov	r0, r3
 800884e:	3708      	adds	r7, #8
 8008850:	46bd      	mov	sp, r7
 8008852:	bd80      	pop	{r7, pc}

08008854 <USBD_MSC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
uint8_t USBD_MSC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008854:	b580      	push	{r7, lr}
 8008856:	b082      	sub	sp, #8
 8008858:	af00      	add	r7, sp, #0
 800885a:	6078      	str	r0, [r7, #4]
 800885c:	460b      	mov	r3, r1
 800885e:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataOut(pdev, epnum);
 8008860:	78fb      	ldrb	r3, [r7, #3]
 8008862:	4619      	mov	r1, r3
 8008864:	6878      	ldr	r0, [r7, #4]
 8008866:	f000 f98d 	bl	8008b84 <MSC_BOT_DataOut>

  return (uint8_t)USBD_OK;
 800886a:	2300      	movs	r3, #0
}
 800886c:	4618      	mov	r0, r3
 800886e:	3708      	adds	r7, #8
 8008870:	46bd      	mov	sp, r7
 8008872:	bd80      	pop	{r7, pc}

08008874 <USBD_MSC_GetHSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetHSCfgDesc(uint16_t *length)
{
 8008874:	b580      	push	{r7, lr}
 8008876:	b084      	sub	sp, #16
 8008878:	af00      	add	r7, sp, #0
 800887a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPIN_ADDR);
 800887c:	2181      	movs	r1, #129	; 0x81
 800887e:	4812      	ldr	r0, [pc, #72]	; (80088c8 <USBD_MSC_GetHSCfgDesc+0x54>)
 8008880:	f002 fa6d 	bl	800ad5e <USBD_GetEpDesc>
 8008884:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPOUT_ADDR);
 8008886:	2101      	movs	r1, #1
 8008888:	480f      	ldr	r0, [pc, #60]	; (80088c8 <USBD_MSC_GetHSCfgDesc+0x54>)
 800888a:	f002 fa68 	bl	800ad5e <USBD_GetEpDesc>
 800888e:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	2b00      	cmp	r3, #0
 8008894:	d006      	beq.n	80088a4 <USBD_MSC_GetHSCfgDesc+0x30>
  {
    pEpInDesc->wMaxPacketSize = MSC_MAX_HS_PACKET;
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	2200      	movs	r2, #0
 800889a:	711a      	strb	r2, [r3, #4]
 800889c:	2200      	movs	r2, #0
 800889e:	f042 0202 	orr.w	r2, r2, #2
 80088a2:	715a      	strb	r2, [r3, #5]
  }

  if (pEpOutDesc != NULL)
 80088a4:	68bb      	ldr	r3, [r7, #8]
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d006      	beq.n	80088b8 <USBD_MSC_GetHSCfgDesc+0x44>
  {
    pEpOutDesc->wMaxPacketSize = MSC_MAX_HS_PACKET;
 80088aa:	68bb      	ldr	r3, [r7, #8]
 80088ac:	2200      	movs	r2, #0
 80088ae:	711a      	strb	r2, [r3, #4]
 80088b0:	2200      	movs	r2, #0
 80088b2:	f042 0202 	orr.w	r2, r2, #2
 80088b6:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_MSC_CfgDesc);
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	2220      	movs	r2, #32
 80088bc:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CfgDesc;
 80088be:	4b02      	ldr	r3, [pc, #8]	; (80088c8 <USBD_MSC_GetHSCfgDesc+0x54>)
}
 80088c0:	4618      	mov	r0, r3
 80088c2:	3710      	adds	r7, #16
 80088c4:	46bd      	mov	sp, r7
 80088c6:	bd80      	pop	{r7, pc}
 80088c8:	20000048 	.word	0x20000048

080088cc <USBD_MSC_GetFSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetFSCfgDesc(uint16_t *length)
{
 80088cc:	b580      	push	{r7, lr}
 80088ce:	b084      	sub	sp, #16
 80088d0:	af00      	add	r7, sp, #0
 80088d2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPIN_ADDR);
 80088d4:	2181      	movs	r1, #129	; 0x81
 80088d6:	4812      	ldr	r0, [pc, #72]	; (8008920 <USBD_MSC_GetFSCfgDesc+0x54>)
 80088d8:	f002 fa41 	bl	800ad5e <USBD_GetEpDesc>
 80088dc:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPOUT_ADDR);
 80088de:	2101      	movs	r1, #1
 80088e0:	480f      	ldr	r0, [pc, #60]	; (8008920 <USBD_MSC_GetFSCfgDesc+0x54>)
 80088e2:	f002 fa3c 	bl	800ad5e <USBD_GetEpDesc>
 80088e6:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d006      	beq.n	80088fc <USBD_MSC_GetFSCfgDesc+0x30>
  {
    pEpInDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	2200      	movs	r2, #0
 80088f2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80088f6:	711a      	strb	r2, [r3, #4]
 80088f8:	2200      	movs	r2, #0
 80088fa:	715a      	strb	r2, [r3, #5]
  }

  if (pEpOutDesc != NULL)
 80088fc:	68bb      	ldr	r3, [r7, #8]
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d006      	beq.n	8008910 <USBD_MSC_GetFSCfgDesc+0x44>
  {
    pEpOutDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 8008902:	68bb      	ldr	r3, [r7, #8]
 8008904:	2200      	movs	r2, #0
 8008906:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800890a:	711a      	strb	r2, [r3, #4]
 800890c:	2200      	movs	r2, #0
 800890e:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_MSC_CfgDesc);
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	2220      	movs	r2, #32
 8008914:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CfgDesc;
 8008916:	4b02      	ldr	r3, [pc, #8]	; (8008920 <USBD_MSC_GetFSCfgDesc+0x54>)
}
 8008918:	4618      	mov	r0, r3
 800891a:	3710      	adds	r7, #16
 800891c:	46bd      	mov	sp, r7
 800891e:	bd80      	pop	{r7, pc}
 8008920:	20000048 	.word	0x20000048

08008924 <USBD_MSC_GetOtherSpeedCfgDesc>:
  *         return other speed configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008924:	b580      	push	{r7, lr}
 8008926:	b084      	sub	sp, #16
 8008928:	af00      	add	r7, sp, #0
 800892a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPIN_ADDR);
 800892c:	2181      	movs	r1, #129	; 0x81
 800892e:	4812      	ldr	r0, [pc, #72]	; (8008978 <USBD_MSC_GetOtherSpeedCfgDesc+0x54>)
 8008930:	f002 fa15 	bl	800ad5e <USBD_GetEpDesc>
 8008934:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPOUT_ADDR);
 8008936:	2101      	movs	r1, #1
 8008938:	480f      	ldr	r0, [pc, #60]	; (8008978 <USBD_MSC_GetOtherSpeedCfgDesc+0x54>)
 800893a:	f002 fa10 	bl	800ad5e <USBD_GetEpDesc>
 800893e:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	2b00      	cmp	r3, #0
 8008944:	d006      	beq.n	8008954 <USBD_MSC_GetOtherSpeedCfgDesc+0x30>
  {
    pEpInDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	2200      	movs	r2, #0
 800894a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800894e:	711a      	strb	r2, [r3, #4]
 8008950:	2200      	movs	r2, #0
 8008952:	715a      	strb	r2, [r3, #5]
  }

  if (pEpOutDesc != NULL)
 8008954:	68bb      	ldr	r3, [r7, #8]
 8008956:	2b00      	cmp	r3, #0
 8008958:	d006      	beq.n	8008968 <USBD_MSC_GetOtherSpeedCfgDesc+0x44>
  {
    pEpOutDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 800895a:	68bb      	ldr	r3, [r7, #8]
 800895c:	2200      	movs	r2, #0
 800895e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008962:	711a      	strb	r2, [r3, #4]
 8008964:	2200      	movs	r2, #0
 8008966:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_MSC_CfgDesc);
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	2220      	movs	r2, #32
 800896c:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CfgDesc;
 800896e:	4b02      	ldr	r3, [pc, #8]	; (8008978 <USBD_MSC_GetOtherSpeedCfgDesc+0x54>)
}
 8008970:	4618      	mov	r0, r3
 8008972:	3710      	adds	r7, #16
 8008974:	46bd      	mov	sp, r7
 8008976:	bd80      	pop	{r7, pc}
 8008978:	20000048 	.word	0x20000048

0800897c <USBD_MSC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800897c:	b480      	push	{r7}
 800897e:	b083      	sub	sp, #12
 8008980:	af00      	add	r7, sp, #0
 8008982:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_DeviceQualifierDesc);
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	220a      	movs	r2, #10
 8008988:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_DeviceQualifierDesc;
 800898a:	4b03      	ldr	r3, [pc, #12]	; (8008998 <USBD_MSC_GetDeviceQualifierDescriptor+0x1c>)
}
 800898c:	4618      	mov	r0, r3
 800898e:	370c      	adds	r7, #12
 8008990:	46bd      	mov	sp, r7
 8008992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008996:	4770      	bx	lr
 8008998:	20000068 	.word	0x20000068

0800899c <USBD_MSC_RegisterStorage>:
  * @brief  USBD_MSC_RegisterStorage
  * @param  fops: storage callback
  * @retval status
  */
uint8_t USBD_MSC_RegisterStorage(USBD_HandleTypeDef *pdev, USBD_StorageTypeDef *fops)
{
 800899c:	b480      	push	{r7}
 800899e:	b083      	sub	sp, #12
 80089a0:	af00      	add	r7, sp, #0
 80089a2:	6078      	str	r0, [r7, #4]
 80089a4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80089a6:	683b      	ldr	r3, [r7, #0]
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d101      	bne.n	80089b0 <USBD_MSC_RegisterStorage+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80089ac:	2303      	movs	r3, #3
 80089ae:	e009      	b.n	80089c4 <USBD_MSC_RegisterStorage+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80089b6:	687a      	ldr	r2, [r7, #4]
 80089b8:	33b0      	adds	r3, #176	; 0xb0
 80089ba:	009b      	lsls	r3, r3, #2
 80089bc:	4413      	add	r3, r2
 80089be:	683a      	ldr	r2, [r7, #0]
 80089c0:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80089c2:	2300      	movs	r3, #0
}
 80089c4:	4618      	mov	r0, r3
 80089c6:	370c      	adds	r7, #12
 80089c8:	46bd      	mov	sp, r7
 80089ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ce:	4770      	bx	lr

080089d0 <MSC_BOT_Init>:
  *         Initialize the BOT Process
  * @param  pdev: device instance
  * @retval None
  */
void MSC_BOT_Init(USBD_HandleTypeDef *pdev)
{
 80089d0:	b580      	push	{r7, lr}
 80089d2:	b084      	sub	sp, #16
 80089d4:	af00      	add	r7, sp, #0
 80089d6:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	32b0      	adds	r2, #176	; 0xb0
 80089e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80089e6:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d039      	beq.n	8008a62 <MSC_BOT_Init+0x92>
  {
    return;
  }

  hmsc->bot_state = USBD_BOT_IDLE;
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	2200      	movs	r2, #0
 80089f2:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	2200      	movs	r2, #0
 80089f8:	725a      	strb	r2, [r3, #9]

  hmsc->scsi_sense_tail = 0U;
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008a00:	2200      	movs	r2, #0
 8008a02:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
  hmsc->scsi_sense_head = 0U;
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008a0c:	2200      	movs	r2, #0
 8008a0e:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
  hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008a18:	2200      	movs	r2, #0
 8008a1a:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62

  ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Init(0U);
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008a24:	687a      	ldr	r2, [r7, #4]
 8008a26:	33b0      	adds	r3, #176	; 0xb0
 8008a28:	009b      	lsls	r3, r3, #2
 8008a2a:	4413      	add	r3, r2
 8008a2c:	685b      	ldr	r3, [r3, #4]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	2000      	movs	r0, #0
 8008a32:	4798      	blx	r3

  (void)USBD_LL_FlushEP(pdev, MSCOutEpAdd);
 8008a34:	4b0d      	ldr	r3, [pc, #52]	; (8008a6c <MSC_BOT_Init+0x9c>)
 8008a36:	781b      	ldrb	r3, [r3, #0]
 8008a38:	4619      	mov	r1, r3
 8008a3a:	6878      	ldr	r0, [r7, #4]
 8008a3c:	f003 fc73 	bl	800c326 <USBD_LL_FlushEP>
  (void)USBD_LL_FlushEP(pdev, MSCInEpAdd);
 8008a40:	4b0b      	ldr	r3, [pc, #44]	; (8008a70 <MSC_BOT_Init+0xa0>)
 8008a42:	781b      	ldrb	r3, [r3, #0]
 8008a44:	4619      	mov	r1, r3
 8008a46:	6878      	ldr	r0, [r7, #4]
 8008a48:	f003 fc6d 	bl	800c326 <USBD_LL_FlushEP>

  /* Prepare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 8008a4c:	4b07      	ldr	r3, [pc, #28]	; (8008a6c <MSC_BOT_Init+0x9c>)
 8008a4e:	7819      	ldrb	r1, [r3, #0]
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 8008a56:	3210      	adds	r2, #16
 8008a58:	231f      	movs	r3, #31
 8008a5a:	6878      	ldr	r0, [r7, #4]
 8008a5c:	f003 fd2c 	bl	800c4b8 <USBD_LL_PrepareReceive>
 8008a60:	e000      	b.n	8008a64 <MSC_BOT_Init+0x94>
    return;
 8008a62:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 8008a64:	3710      	adds	r7, #16
 8008a66:	46bd      	mov	sp, r7
 8008a68:	bd80      	pop	{r7, pc}
 8008a6a:	bf00      	nop
 8008a6c:	20000073 	.word	0x20000073
 8008a70:	20000072 	.word	0x20000072

08008a74 <MSC_BOT_Reset>:
  *         Reset the BOT Machine
  * @param  pdev: device instance
  * @retval  None
  */
void MSC_BOT_Reset(USBD_HandleTypeDef *pdev)
{
 8008a74:	b580      	push	{r7, lr}
 8008a76:	b084      	sub	sp, #16
 8008a78:	af00      	add	r7, sp, #0
 8008a7a:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	32b0      	adds	r2, #176	; 0xb0
 8008a86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a8a:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d01c      	beq.n	8008acc <MSC_BOT_Reset+0x58>
  {
    return;
  }

  hmsc->bot_state  = USBD_BOT_IDLE;
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	2200      	movs	r2, #0
 8008a96:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_RECOVERY;
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	2201      	movs	r2, #1
 8008a9c:	725a      	strb	r2, [r3, #9]

  (void)USBD_LL_ClearStallEP(pdev, MSCInEpAdd);
 8008a9e:	4b0d      	ldr	r3, [pc, #52]	; (8008ad4 <MSC_BOT_Reset+0x60>)
 8008aa0:	781b      	ldrb	r3, [r3, #0]
 8008aa2:	4619      	mov	r1, r3
 8008aa4:	6878      	ldr	r0, [r7, #4]
 8008aa6:	f003 fc7c 	bl	800c3a2 <USBD_LL_ClearStallEP>
  (void)USBD_LL_ClearStallEP(pdev, MSCOutEpAdd);
 8008aaa:	4b0b      	ldr	r3, [pc, #44]	; (8008ad8 <MSC_BOT_Reset+0x64>)
 8008aac:	781b      	ldrb	r3, [r3, #0]
 8008aae:	4619      	mov	r1, r3
 8008ab0:	6878      	ldr	r0, [r7, #4]
 8008ab2:	f003 fc76 	bl	800c3a2 <USBD_LL_ClearStallEP>

  /* Prepare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 8008ab6:	4b08      	ldr	r3, [pc, #32]	; (8008ad8 <MSC_BOT_Reset+0x64>)
 8008ab8:	7819      	ldrb	r1, [r3, #0]
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 8008ac0:	3210      	adds	r2, #16
 8008ac2:	231f      	movs	r3, #31
 8008ac4:	6878      	ldr	r0, [r7, #4]
 8008ac6:	f003 fcf7 	bl	800c4b8 <USBD_LL_PrepareReceive>
 8008aca:	e000      	b.n	8008ace <MSC_BOT_Reset+0x5a>
    return;
 8008acc:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 8008ace:	3710      	adds	r7, #16
 8008ad0:	46bd      	mov	sp, r7
 8008ad2:	bd80      	pop	{r7, pc}
 8008ad4:	20000072 	.word	0x20000072
 8008ad8:	20000073 	.word	0x20000073

08008adc <MSC_BOT_DeInit>:
  *         DeInitialize the BOT Machine
  * @param  pdev: device instance
  * @retval None
  */
void MSC_BOT_DeInit(USBD_HandleTypeDef  *pdev)
{
 8008adc:	b480      	push	{r7}
 8008ade:	b085      	sub	sp, #20
 8008ae0:	af00      	add	r7, sp, #0
 8008ae2:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	32b0      	adds	r2, #176	; 0xb0
 8008aee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008af2:	60fb      	str	r3, [r7, #12]

  if (hmsc != NULL)
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d002      	beq.n	8008b00 <MSC_BOT_DeInit+0x24>
  {
    hmsc->bot_state = USBD_BOT_IDLE;
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	2200      	movs	r2, #0
 8008afe:	721a      	strb	r2, [r3, #8]
  }
}
 8008b00:	bf00      	nop
 8008b02:	3714      	adds	r7, #20
 8008b04:	46bd      	mov	sp, r7
 8008b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b0a:	4770      	bx	lr

08008b0c <MSC_BOT_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval None
  */
void MSC_BOT_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008b0c:	b580      	push	{r7, lr}
 8008b0e:	b084      	sub	sp, #16
 8008b10:	af00      	add	r7, sp, #0
 8008b12:	6078      	str	r0, [r7, #4]
 8008b14:	460b      	mov	r3, r1
 8008b16:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	32b0      	adds	r2, #176	; 0xb0
 8008b22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b26:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d022      	beq.n	8008b74 <MSC_BOT_DataIn+0x68>
  {
    return;
  }

  switch (hmsc->bot_state)
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	7a1b      	ldrb	r3, [r3, #8]
 8008b32:	2b02      	cmp	r3, #2
 8008b34:	d005      	beq.n	8008b42 <MSC_BOT_DataIn+0x36>
 8008b36:	2b02      	cmp	r3, #2
 8008b38:	db1e      	blt.n	8008b78 <MSC_BOT_DataIn+0x6c>
 8008b3a:	3b03      	subs	r3, #3
 8008b3c:	2b01      	cmp	r3, #1
 8008b3e:	d81b      	bhi.n	8008b78 <MSC_BOT_DataIn+0x6c>
 8008b40:	e013      	b.n	8008b6a <MSC_BOT_DataIn+0x5e>
  {
    case USBD_BOT_DATA_IN:
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008b48:	7f59      	ldrb	r1, [r3, #29]
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008b50:	331f      	adds	r3, #31
 8008b52:	461a      	mov	r2, r3
 8008b54:	6878      	ldr	r0, [r7, #4]
 8008b56:	f000 f9e5 	bl	8008f24 <SCSI_ProcessCmd>
 8008b5a:	4603      	mov	r3, r0
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	da0d      	bge.n	8008b7c <MSC_BOT_DataIn+0x70>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8008b60:	2101      	movs	r1, #1
 8008b62:	6878      	ldr	r0, [r7, #4]
 8008b64:	f000 f920 	bl	8008da8 <MSC_BOT_SendCSW>
      }
      break;
 8008b68:	e008      	b.n	8008b7c <MSC_BOT_DataIn+0x70>

    case USBD_BOT_SEND_DATA:
    case USBD_BOT_LAST_DATA_IN:
      MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8008b6a:	2100      	movs	r1, #0
 8008b6c:	6878      	ldr	r0, [r7, #4]
 8008b6e:	f000 f91b 	bl	8008da8 <MSC_BOT_SendCSW>
      break;
 8008b72:	e004      	b.n	8008b7e <MSC_BOT_DataIn+0x72>
    return;
 8008b74:	bf00      	nop
 8008b76:	e002      	b.n	8008b7e <MSC_BOT_DataIn+0x72>

    default:
      break;
 8008b78:	bf00      	nop
 8008b7a:	e000      	b.n	8008b7e <MSC_BOT_DataIn+0x72>
      break;
 8008b7c:	bf00      	nop
  }
}
 8008b7e:	3710      	adds	r7, #16
 8008b80:	46bd      	mov	sp, r7
 8008b82:	bd80      	pop	{r7, pc}

08008b84 <MSC_BOT_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval None
  */
void MSC_BOT_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008b84:	b580      	push	{r7, lr}
 8008b86:	b084      	sub	sp, #16
 8008b88:	af00      	add	r7, sp, #0
 8008b8a:	6078      	str	r0, [r7, #4]
 8008b8c:	460b      	mov	r3, r1
 8008b8e:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	32b0      	adds	r2, #176	; 0xb0
 8008b9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b9e:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d01e      	beq.n	8008be4 <MSC_BOT_DataOut+0x60>
  {
    return;
  }

  switch (hmsc->bot_state)
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	7a1b      	ldrb	r3, [r3, #8]
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d002      	beq.n	8008bb4 <MSC_BOT_DataOut+0x30>
 8008bae:	2b01      	cmp	r3, #1
 8008bb0:	d004      	beq.n	8008bbc <MSC_BOT_DataOut+0x38>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
      }
      break;

    default:
      break;
 8008bb2:	e01a      	b.n	8008bea <MSC_BOT_DataOut+0x66>
      MSC_BOT_CBW_Decode(pdev);
 8008bb4:	6878      	ldr	r0, [r7, #4]
 8008bb6:	f000 f81b 	bl	8008bf0 <MSC_BOT_CBW_Decode>
      break;
 8008bba:	e016      	b.n	8008bea <MSC_BOT_DataOut+0x66>
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008bc2:	7f59      	ldrb	r1, [r3, #29]
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008bca:	331f      	adds	r3, #31
 8008bcc:	461a      	mov	r2, r3
 8008bce:	6878      	ldr	r0, [r7, #4]
 8008bd0:	f000 f9a8 	bl	8008f24 <SCSI_ProcessCmd>
 8008bd4:	4603      	mov	r3, r0
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	da06      	bge.n	8008be8 <MSC_BOT_DataOut+0x64>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8008bda:	2101      	movs	r1, #1
 8008bdc:	6878      	ldr	r0, [r7, #4]
 8008bde:	f000 f8e3 	bl	8008da8 <MSC_BOT_SendCSW>
      break;
 8008be2:	e001      	b.n	8008be8 <MSC_BOT_DataOut+0x64>
    return;
 8008be4:	bf00      	nop
 8008be6:	e000      	b.n	8008bea <MSC_BOT_DataOut+0x66>
      break;
 8008be8:	bf00      	nop
  }
}
 8008bea:	3710      	adds	r7, #16
 8008bec:	46bd      	mov	sp, r7
 8008bee:	bd80      	pop	{r7, pc}

08008bf0 <MSC_BOT_CBW_Decode>:
  *         Decode the CBW command and set the BOT state machine accordingly
  * @param  pdev: device instance
  * @retval None
  */
static void  MSC_BOT_CBW_Decode(USBD_HandleTypeDef *pdev)
{
 8008bf0:	b580      	push	{r7, lr}
 8008bf2:	b084      	sub	sp, #16
 8008bf4:	af00      	add	r7, sp, #0
 8008bf6:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	32b0      	adds	r2, #176	; 0xb0
 8008c02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c06:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	f000 8085 	beq.w	8008d1a <MSC_BOT_CBW_Decode+0x12a>
  {
    return;
  }

  hmsc->csw.dTag = hmsc->cbw.dTag;
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008c16:	695b      	ldr	r3, [r3, #20]
 8008c18:	68fa      	ldr	r2, [r7, #12]
 8008c1a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008c1e:	6353      	str	r3, [r2, #52]	; 0x34
  hmsc->csw.dDataResidue = hmsc->cbw.dDataLength;
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008c26:	699b      	ldr	r3, [r3, #24]
 8008c28:	68fa      	ldr	r2, [r7, #12]
 8008c2a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008c2e:	6393      	str	r3, [r2, #56]	; 0x38

  if ((USBD_LL_GetRxDataSize(pdev, MSCOutEpAdd) != USBD_BOT_CBW_LENGTH) ||
 8008c30:	4b3d      	ldr	r3, [pc, #244]	; (8008d28 <MSC_BOT_CBW_Decode+0x138>)
 8008c32:	781b      	ldrb	r3, [r3, #0]
 8008c34:	4619      	mov	r1, r3
 8008c36:	6878      	ldr	r0, [r7, #4]
 8008c38:	f003 fc5f 	bl	800c4fa <USBD_LL_GetRxDataSize>
 8008c3c:	4603      	mov	r3, r0
 8008c3e:	2b1f      	cmp	r3, #31
 8008c40:	d118      	bne.n	8008c74 <MSC_BOT_CBW_Decode+0x84>
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008c48:	691b      	ldr	r3, [r3, #16]
  if ((USBD_LL_GetRxDataSize(pdev, MSCOutEpAdd) != USBD_BOT_CBW_LENGTH) ||
 8008c4a:	4a38      	ldr	r2, [pc, #224]	; (8008d2c <MSC_BOT_CBW_Decode+0x13c>)
 8008c4c:	4293      	cmp	r3, r2
 8008c4e:	d111      	bne.n	8008c74 <MSC_BOT_CBW_Decode+0x84>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008c56:	7f5b      	ldrb	r3, [r3, #29]
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 8008c58:	2b01      	cmp	r3, #1
 8008c5a:	d80b      	bhi.n	8008c74 <MSC_BOT_CBW_Decode+0x84>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008c62:	7f9b      	ldrb	r3, [r3, #30]
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d005      	beq.n	8008c74 <MSC_BOT_CBW_Decode+0x84>
      (hmsc->cbw.bCBLength > 16U))
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008c6e:	7f9b      	ldrb	r3, [r3, #30]
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 8008c70:	2b10      	cmp	r3, #16
 8008c72:	d90f      	bls.n	8008c94 <MSC_BOT_CBW_Decode+0xa4>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008c7a:	7f59      	ldrb	r1, [r3, #29]
 8008c7c:	2320      	movs	r3, #32
 8008c7e:	2205      	movs	r2, #5
 8008c80:	6878      	ldr	r0, [r7, #4]
 8008c82:	f000 fe79 	bl	8009978 <SCSI_SenseCode>

    hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	2202      	movs	r2, #2
 8008c8a:	725a      	strb	r2, [r3, #9]
    MSC_BOT_Abort(pdev);
 8008c8c:	6878      	ldr	r0, [r7, #4]
 8008c8e:	f000 f8cb 	bl	8008e28 <MSC_BOT_Abort>
 8008c92:	e045      	b.n	8008d20 <MSC_BOT_CBW_Decode+0x130>
  }
  else
  {
    if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008c9a:	7f59      	ldrb	r1, [r3, #29]
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008ca2:	331f      	adds	r3, #31
 8008ca4:	461a      	mov	r2, r3
 8008ca6:	6878      	ldr	r0, [r7, #4]
 8008ca8:	f000 f93c 	bl	8008f24 <SCSI_ProcessCmd>
 8008cac:	4603      	mov	r3, r0
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	da0c      	bge.n	8008ccc <MSC_BOT_CBW_Decode+0xdc>
    {
      if (hmsc->bot_state == USBD_BOT_NO_DATA)
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	7a1b      	ldrb	r3, [r3, #8]
 8008cb6:	2b05      	cmp	r3, #5
 8008cb8:	d104      	bne.n	8008cc4 <MSC_BOT_CBW_Decode+0xd4>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8008cba:	2101      	movs	r1, #1
 8008cbc:	6878      	ldr	r0, [r7, #4]
 8008cbe:	f000 f873 	bl	8008da8 <MSC_BOT_SendCSW>
 8008cc2:	e02d      	b.n	8008d20 <MSC_BOT_CBW_Decode+0x130>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 8008cc4:	6878      	ldr	r0, [r7, #4]
 8008cc6:	f000 f8af 	bl	8008e28 <MSC_BOT_Abort>
 8008cca:	e029      	b.n	8008d20 <MSC_BOT_CBW_Decode+0x130>
      }
    }
    /* Burst xfer handled internally */
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	7a1b      	ldrb	r3, [r3, #8]
 8008cd0:	2b02      	cmp	r3, #2
 8008cd2:	d024      	beq.n	8008d1e <MSC_BOT_CBW_Decode+0x12e>
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	7a1b      	ldrb	r3, [r3, #8]
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 8008cd8:	2b01      	cmp	r3, #1
 8008cda:	d020      	beq.n	8008d1e <MSC_BOT_CBW_Decode+0x12e>
             (hmsc->bot_state != USBD_BOT_LAST_DATA_IN))
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	7a1b      	ldrb	r3, [r3, #8]
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 8008ce0:	2b03      	cmp	r3, #3
 8008ce2:	d01c      	beq.n	8008d1e <MSC_BOT_CBW_Decode+0x12e>
    {
      if (hmsc->bot_data_length > 0U)
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	68db      	ldr	r3, [r3, #12]
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d009      	beq.n	8008d00 <MSC_BOT_CBW_Decode+0x110>
      {
        MSC_BOT_SendData(pdev, hmsc->bot_data, hmsc->bot_data_length);
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	f103 0110 	add.w	r1, r3, #16
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	68db      	ldr	r3, [r3, #12]
 8008cf6:	461a      	mov	r2, r3
 8008cf8:	6878      	ldr	r0, [r7, #4]
 8008cfa:	f000 f819 	bl	8008d30 <MSC_BOT_SendData>
      if (hmsc->bot_data_length > 0U)
 8008cfe:	e00f      	b.n	8008d20 <MSC_BOT_CBW_Decode+0x130>
      }
      else if (hmsc->bot_data_length == 0U)
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	68db      	ldr	r3, [r3, #12]
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d104      	bne.n	8008d12 <MSC_BOT_CBW_Decode+0x122>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8008d08:	2100      	movs	r1, #0
 8008d0a:	6878      	ldr	r0, [r7, #4]
 8008d0c:	f000 f84c 	bl	8008da8 <MSC_BOT_SendCSW>
      if (hmsc->bot_data_length > 0U)
 8008d10:	e006      	b.n	8008d20 <MSC_BOT_CBW_Decode+0x130>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 8008d12:	6878      	ldr	r0, [r7, #4]
 8008d14:	f000 f888 	bl	8008e28 <MSC_BOT_Abort>
      if (hmsc->bot_data_length > 0U)
 8008d18:	e002      	b.n	8008d20 <MSC_BOT_CBW_Decode+0x130>
    return;
 8008d1a:	bf00      	nop
 8008d1c:	e000      	b.n	8008d20 <MSC_BOT_CBW_Decode+0x130>
      }
    }
    else
    {
      return;
 8008d1e:	bf00      	nop
    }
  }
}
 8008d20:	3710      	adds	r7, #16
 8008d22:	46bd      	mov	sp, r7
 8008d24:	bd80      	pop	{r7, pc}
 8008d26:	bf00      	nop
 8008d28:	20000073 	.word	0x20000073
 8008d2c:	43425355 	.word	0x43425355

08008d30 <MSC_BOT_SendData>:
  * @param  buf: pointer to data buffer
  * @param  len: Data Length
  * @retval None
  */
static void  MSC_BOT_SendData(USBD_HandleTypeDef *pdev, uint8_t *pbuf, uint32_t len)
{
 8008d30:	b580      	push	{r7, lr}
 8008d32:	b086      	sub	sp, #24
 8008d34:	af00      	add	r7, sp, #0
 8008d36:	60f8      	str	r0, [r7, #12]
 8008d38:	60b9      	str	r1, [r7, #8]
 8008d3a:	607a      	str	r2, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	32b0      	adds	r2, #176	; 0xb0
 8008d46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d4a:	617b      	str	r3, [r7, #20]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8008d4c:	697b      	ldr	r3, [r7, #20]
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d023      	beq.n	8008d9a <MSC_BOT_SendData+0x6a>
  {
    return;
  }

  length = MIN(hmsc->cbw.dDataLength, len);
 8008d52:	697b      	ldr	r3, [r7, #20]
 8008d54:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008d58:	699b      	ldr	r3, [r3, #24]
 8008d5a:	687a      	ldr	r2, [r7, #4]
 8008d5c:	4293      	cmp	r3, r2
 8008d5e:	bf28      	it	cs
 8008d60:	4613      	movcs	r3, r2
 8008d62:	613b      	str	r3, [r7, #16]

  hmsc->csw.dDataResidue -= len;
 8008d64:	697b      	ldr	r3, [r7, #20]
 8008d66:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008d6a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	1ad3      	subs	r3, r2, r3
 8008d70:	697a      	ldr	r2, [r7, #20]
 8008d72:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008d76:	6393      	str	r3, [r2, #56]	; 0x38
  hmsc->csw.bStatus = USBD_CSW_CMD_PASSED;
 8008d78:	697b      	ldr	r3, [r7, #20]
 8008d7a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008d7e:	2200      	movs	r2, #0
 8008d80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  hmsc->bot_state = USBD_BOT_SEND_DATA;
 8008d84:	697b      	ldr	r3, [r7, #20]
 8008d86:	2204      	movs	r2, #4
 8008d88:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, pbuf, length);
 8008d8a:	4b06      	ldr	r3, [pc, #24]	; (8008da4 <MSC_BOT_SendData+0x74>)
 8008d8c:	7819      	ldrb	r1, [r3, #0]
 8008d8e:	693b      	ldr	r3, [r7, #16]
 8008d90:	68ba      	ldr	r2, [r7, #8]
 8008d92:	68f8      	ldr	r0, [r7, #12]
 8008d94:	f003 fb6f 	bl	800c476 <USBD_LL_Transmit>
 8008d98:	e000      	b.n	8008d9c <MSC_BOT_SendData+0x6c>
    return;
 8008d9a:	bf00      	nop
}
 8008d9c:	3718      	adds	r7, #24
 8008d9e:	46bd      	mov	sp, r7
 8008da0:	bd80      	pop	{r7, pc}
 8008da2:	bf00      	nop
 8008da4:	20000072 	.word	0x20000072

08008da8 <MSC_BOT_SendCSW>:
  * @param  pdev: device instance
  * @param  status : CSW status
  * @retval None
  */
void  MSC_BOT_SendCSW(USBD_HandleTypeDef *pdev, uint8_t CSW_Status)
{
 8008da8:	b580      	push	{r7, lr}
 8008daa:	b084      	sub	sp, #16
 8008dac:	af00      	add	r7, sp, #0
 8008dae:	6078      	str	r0, [r7, #4]
 8008db0:	460b      	mov	r3, r1
 8008db2:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	32b0      	adds	r2, #176	; 0xb0
 8008dbe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008dc2:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d024      	beq.n	8008e14 <MSC_BOT_SendCSW+0x6c>
  {
    return;
  }

  hmsc->csw.dSignature = USBD_BOT_CSW_SIGNATURE;
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008dd0:	461a      	mov	r2, r3
 8008dd2:	4b12      	ldr	r3, [pc, #72]	; (8008e1c <MSC_BOT_SendCSW+0x74>)
 8008dd4:	6313      	str	r3, [r2, #48]	; 0x30
  hmsc->csw.bStatus = CSW_Status;
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008ddc:	461a      	mov	r2, r3
 8008dde:	78fb      	ldrb	r3, [r7, #3]
 8008de0:	f882 303c 	strb.w	r3, [r2, #60]	; 0x3c
  hmsc->bot_state = USBD_BOT_IDLE;
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	2200      	movs	r2, #0
 8008de8:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, (uint8_t *)&hmsc->csw,
 8008dea:	4b0d      	ldr	r3, [pc, #52]	; (8008e20 <MSC_BOT_SendCSW+0x78>)
 8008dec:	7819      	ldrb	r1, [r3, #0]
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	f503 5281 	add.w	r2, r3, #4128	; 0x1020
 8008df4:	3210      	adds	r2, #16
 8008df6:	230d      	movs	r3, #13
 8008df8:	6878      	ldr	r0, [r7, #4]
 8008dfa:	f003 fb3c 	bl	800c476 <USBD_LL_Transmit>
                         USBD_BOT_CSW_LENGTH);

  /* Prepare EP to Receive next Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 8008dfe:	4b09      	ldr	r3, [pc, #36]	; (8008e24 <MSC_BOT_SendCSW+0x7c>)
 8008e00:	7819      	ldrb	r1, [r3, #0]
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 8008e08:	3210      	adds	r2, #16
 8008e0a:	231f      	movs	r3, #31
 8008e0c:	6878      	ldr	r0, [r7, #4]
 8008e0e:	f003 fb53 	bl	800c4b8 <USBD_LL_PrepareReceive>
 8008e12:	e000      	b.n	8008e16 <MSC_BOT_SendCSW+0x6e>
    return;
 8008e14:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 8008e16:	3710      	adds	r7, #16
 8008e18:	46bd      	mov	sp, r7
 8008e1a:	bd80      	pop	{r7, pc}
 8008e1c:	53425355 	.word	0x53425355
 8008e20:	20000072 	.word	0x20000072
 8008e24:	20000073 	.word	0x20000073

08008e28 <MSC_BOT_Abort>:
  * @param  pdev: device instance
  * @retval status
  */

static void  MSC_BOT_Abort(USBD_HandleTypeDef *pdev)
{
 8008e28:	b580      	push	{r7, lr}
 8008e2a:	b084      	sub	sp, #16
 8008e2c:	af00      	add	r7, sp, #0
 8008e2e:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	32b0      	adds	r2, #176	; 0xb0
 8008e3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e3e:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d02c      	beq.n	8008ea0 <MSC_BOT_Abort+0x78>
  {
    return;
  }

  if ((hmsc->cbw.bmFlags == 0U) &&
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008e4c:	7f1b      	ldrb	r3, [r3, #28]
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d10f      	bne.n	8008e72 <MSC_BOT_Abort+0x4a>
      (hmsc->cbw.dDataLength != 0U) &&
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008e58:	699b      	ldr	r3, [r3, #24]
  if ((hmsc->cbw.bmFlags == 0U) &&
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d009      	beq.n	8008e72 <MSC_BOT_Abort+0x4a>
      (hmsc->bot_status == USBD_BOT_STATUS_NORMAL))
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	7a5b      	ldrb	r3, [r3, #9]
      (hmsc->cbw.dDataLength != 0U) &&
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d105      	bne.n	8008e72 <MSC_BOT_Abort+0x4a>
  {
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 8008e66:	4b10      	ldr	r3, [pc, #64]	; (8008ea8 <MSC_BOT_Abort+0x80>)
 8008e68:	781b      	ldrb	r3, [r3, #0]
 8008e6a:	4619      	mov	r1, r3
 8008e6c:	6878      	ldr	r0, [r7, #4]
 8008e6e:	f003 fa79 	bl	800c364 <USBD_LL_StallEP>
  }

  (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
 8008e72:	4b0e      	ldr	r3, [pc, #56]	; (8008eac <MSC_BOT_Abort+0x84>)
 8008e74:	781b      	ldrb	r3, [r3, #0]
 8008e76:	4619      	mov	r1, r3
 8008e78:	6878      	ldr	r0, [r7, #4]
 8008e7a:	f003 fa73 	bl	800c364 <USBD_LL_StallEP>

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR)
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	7a5b      	ldrb	r3, [r3, #9]
 8008e82:	2b02      	cmp	r3, #2
 8008e84:	d10d      	bne.n	8008ea2 <MSC_BOT_Abort+0x7a>
  {
    (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
 8008e86:	4b09      	ldr	r3, [pc, #36]	; (8008eac <MSC_BOT_Abort+0x84>)
 8008e88:	781b      	ldrb	r3, [r3, #0]
 8008e8a:	4619      	mov	r1, r3
 8008e8c:	6878      	ldr	r0, [r7, #4]
 8008e8e:	f003 fa69 	bl	800c364 <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 8008e92:	4b05      	ldr	r3, [pc, #20]	; (8008ea8 <MSC_BOT_Abort+0x80>)
 8008e94:	781b      	ldrb	r3, [r3, #0]
 8008e96:	4619      	mov	r1, r3
 8008e98:	6878      	ldr	r0, [r7, #4]
 8008e9a:	f003 fa63 	bl	800c364 <USBD_LL_StallEP>
 8008e9e:	e000      	b.n	8008ea2 <MSC_BOT_Abort+0x7a>
    return;
 8008ea0:	bf00      	nop
  }
}
 8008ea2:	3710      	adds	r7, #16
 8008ea4:	46bd      	mov	sp, r7
 8008ea6:	bd80      	pop	{r7, pc}
 8008ea8:	20000073 	.word	0x20000073
 8008eac:	20000072 	.word	0x20000072

08008eb0 <MSC_BOT_CplClrFeature>:
  * @param  epnum: endpoint index
  * @retval None
  */

void  MSC_BOT_CplClrFeature(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008eb0:	b580      	push	{r7, lr}
 8008eb2:	b084      	sub	sp, #16
 8008eb4:	af00      	add	r7, sp, #0
 8008eb6:	6078      	str	r0, [r7, #4]
 8008eb8:	460b      	mov	r3, r1
 8008eba:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	32b0      	adds	r2, #176	; 0xb0
 8008ec6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008eca:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d01d      	beq.n	8008f0e <MSC_BOT_CplClrFeature+0x5e>
  {
    return;
  }

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR) /* Bad CBW Signature */
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	7a5b      	ldrb	r3, [r3, #9]
 8008ed6:	2b02      	cmp	r3, #2
 8008ed8:	d10c      	bne.n	8008ef4 <MSC_BOT_CplClrFeature+0x44>
  {
    (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
 8008eda:	4b10      	ldr	r3, [pc, #64]	; (8008f1c <MSC_BOT_CplClrFeature+0x6c>)
 8008edc:	781b      	ldrb	r3, [r3, #0]
 8008ede:	4619      	mov	r1, r3
 8008ee0:	6878      	ldr	r0, [r7, #4]
 8008ee2:	f003 fa3f 	bl	800c364 <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 8008ee6:	4b0e      	ldr	r3, [pc, #56]	; (8008f20 <MSC_BOT_CplClrFeature+0x70>)
 8008ee8:	781b      	ldrb	r3, [r3, #0]
 8008eea:	4619      	mov	r1, r3
 8008eec:	6878      	ldr	r0, [r7, #4]
 8008eee:	f003 fa39 	bl	800c364 <USBD_LL_StallEP>
 8008ef2:	e00f      	b.n	8008f14 <MSC_BOT_CplClrFeature+0x64>
  }
  else if (((epnum & 0x80U) == 0x80U) && (hmsc->bot_status != USBD_BOT_STATUS_RECOVERY))
 8008ef4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	da0a      	bge.n	8008f12 <MSC_BOT_CplClrFeature+0x62>
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	7a5b      	ldrb	r3, [r3, #9]
 8008f00:	2b01      	cmp	r3, #1
 8008f02:	d006      	beq.n	8008f12 <MSC_BOT_CplClrFeature+0x62>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8008f04:	2101      	movs	r1, #1
 8008f06:	6878      	ldr	r0, [r7, #4]
 8008f08:	f7ff ff4e 	bl	8008da8 <MSC_BOT_SendCSW>
 8008f0c:	e002      	b.n	8008f14 <MSC_BOT_CplClrFeature+0x64>
    return;
 8008f0e:	bf00      	nop
 8008f10:	e000      	b.n	8008f14 <MSC_BOT_CplClrFeature+0x64>
  }
  else
  {
    return;
 8008f12:	bf00      	nop
  }
}
 8008f14:	3710      	adds	r7, #16
 8008f16:	46bd      	mov	sp, r7
 8008f18:	bd80      	pop	{r7, pc}
 8008f1a:	bf00      	nop
 8008f1c:	20000072 	.word	0x20000072
 8008f20:	20000073 	.word	0x20000073

08008f24 <SCSI_ProcessCmd>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
int8_t SCSI_ProcessCmd(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *cmd)
{
 8008f24:	b580      	push	{r7, lr}
 8008f26:	b086      	sub	sp, #24
 8008f28:	af00      	add	r7, sp, #0
 8008f2a:	60f8      	str	r0, [r7, #12]
 8008f2c:	460b      	mov	r3, r1
 8008f2e:	607a      	str	r2, [r7, #4]
 8008f30:	72fb      	strb	r3, [r7, #11]
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	32b0      	adds	r2, #176	; 0xb0
 8008f3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f40:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 8008f42:	693b      	ldr	r3, [r7, #16]
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d102      	bne.n	8008f4e <SCSI_ProcessCmd+0x2a>
  {
    return -1;
 8008f48:	f04f 33ff 	mov.w	r3, #4294967295
 8008f4c:	e168      	b.n	8009220 <SCSI_ProcessCmd+0x2fc>
  }

  switch (cmd[0])
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	781b      	ldrb	r3, [r3, #0]
 8008f52:	2baa      	cmp	r3, #170	; 0xaa
 8008f54:	f000 8144 	beq.w	80091e0 <SCSI_ProcessCmd+0x2bc>
 8008f58:	2baa      	cmp	r3, #170	; 0xaa
 8008f5a:	f300 8153 	bgt.w	8009204 <SCSI_ProcessCmd+0x2e0>
 8008f5e:	2ba8      	cmp	r3, #168	; 0xa8
 8008f60:	f000 812c 	beq.w	80091bc <SCSI_ProcessCmd+0x298>
 8008f64:	2ba8      	cmp	r3, #168	; 0xa8
 8008f66:	f300 814d 	bgt.w	8009204 <SCSI_ProcessCmd+0x2e0>
 8008f6a:	2b5a      	cmp	r3, #90	; 0x5a
 8008f6c:	f300 80c0 	bgt.w	80090f0 <SCSI_ProcessCmd+0x1cc>
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	f2c0 8147 	blt.w	8009204 <SCSI_ProcessCmd+0x2e0>
 8008f76:	2b5a      	cmp	r3, #90	; 0x5a
 8008f78:	f200 8144 	bhi.w	8009204 <SCSI_ProcessCmd+0x2e0>
 8008f7c:	a201      	add	r2, pc, #4	; (adr r2, 8008f84 <SCSI_ProcessCmd+0x60>)
 8008f7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f82:	bf00      	nop
 8008f84:	080090f7 	.word	0x080090f7
 8008f88:	08009205 	.word	0x08009205
 8008f8c:	08009205 	.word	0x08009205
 8008f90:	08009109 	.word	0x08009109
 8008f94:	08009205 	.word	0x08009205
 8008f98:	08009205 	.word	0x08009205
 8008f9c:	08009205 	.word	0x08009205
 8008fa0:	08009205 	.word	0x08009205
 8008fa4:	08009205 	.word	0x08009205
 8008fa8:	08009205 	.word	0x08009205
 8008fac:	08009205 	.word	0x08009205
 8008fb0:	08009205 	.word	0x08009205
 8008fb4:	08009205 	.word	0x08009205
 8008fb8:	08009205 	.word	0x08009205
 8008fbc:	08009205 	.word	0x08009205
 8008fc0:	08009205 	.word	0x08009205
 8008fc4:	08009205 	.word	0x08009205
 8008fc8:	08009205 	.word	0x08009205
 8008fcc:	0800911b 	.word	0x0800911b
 8008fd0:	08009205 	.word	0x08009205
 8008fd4:	08009205 	.word	0x08009205
 8008fd8:	08009205 	.word	0x08009205
 8008fdc:	08009205 	.word	0x08009205
 8008fe0:	08009205 	.word	0x08009205
 8008fe4:	08009205 	.word	0x08009205
 8008fe8:	08009205 	.word	0x08009205
 8008fec:	08009151 	.word	0x08009151
 8008ff0:	0800912d 	.word	0x0800912d
 8008ff4:	08009205 	.word	0x08009205
 8008ff8:	08009205 	.word	0x08009205
 8008ffc:	0800913f 	.word	0x0800913f
 8009000:	08009205 	.word	0x08009205
 8009004:	08009205 	.word	0x08009205
 8009008:	08009205 	.word	0x08009205
 800900c:	08009205 	.word	0x08009205
 8009010:	08009175 	.word	0x08009175
 8009014:	08009205 	.word	0x08009205
 8009018:	08009187 	.word	0x08009187
 800901c:	08009205 	.word	0x08009205
 8009020:	08009205 	.word	0x08009205
 8009024:	080091ab 	.word	0x080091ab
 8009028:	08009205 	.word	0x08009205
 800902c:	080091cf 	.word	0x080091cf
 8009030:	08009205 	.word	0x08009205
 8009034:	08009205 	.word	0x08009205
 8009038:	08009205 	.word	0x08009205
 800903c:	08009205 	.word	0x08009205
 8009040:	080091f3 	.word	0x080091f3
 8009044:	08009205 	.word	0x08009205
 8009048:	08009205 	.word	0x08009205
 800904c:	08009205 	.word	0x08009205
 8009050:	08009205 	.word	0x08009205
 8009054:	08009205 	.word	0x08009205
 8009058:	08009205 	.word	0x08009205
 800905c:	08009205 	.word	0x08009205
 8009060:	08009205 	.word	0x08009205
 8009064:	08009205 	.word	0x08009205
 8009068:	08009205 	.word	0x08009205
 800906c:	08009205 	.word	0x08009205
 8009070:	08009205 	.word	0x08009205
 8009074:	08009205 	.word	0x08009205
 8009078:	08009205 	.word	0x08009205
 800907c:	08009205 	.word	0x08009205
 8009080:	08009205 	.word	0x08009205
 8009084:	08009205 	.word	0x08009205
 8009088:	08009205 	.word	0x08009205
 800908c:	08009205 	.word	0x08009205
 8009090:	08009205 	.word	0x08009205
 8009094:	08009205 	.word	0x08009205
 8009098:	08009205 	.word	0x08009205
 800909c:	08009205 	.word	0x08009205
 80090a0:	08009205 	.word	0x08009205
 80090a4:	08009205 	.word	0x08009205
 80090a8:	08009205 	.word	0x08009205
 80090ac:	08009205 	.word	0x08009205
 80090b0:	08009205 	.word	0x08009205
 80090b4:	08009205 	.word	0x08009205
 80090b8:	08009205 	.word	0x08009205
 80090bc:	08009205 	.word	0x08009205
 80090c0:	08009205 	.word	0x08009205
 80090c4:	08009205 	.word	0x08009205
 80090c8:	08009205 	.word	0x08009205
 80090cc:	08009205 	.word	0x08009205
 80090d0:	08009205 	.word	0x08009205
 80090d4:	08009205 	.word	0x08009205
 80090d8:	08009205 	.word	0x08009205
 80090dc:	08009205 	.word	0x08009205
 80090e0:	08009205 	.word	0x08009205
 80090e4:	08009205 	.word	0x08009205
 80090e8:	08009205 	.word	0x08009205
 80090ec:	08009163 	.word	0x08009163
 80090f0:	2b9e      	cmp	r3, #158	; 0x9e
 80090f2:	d051      	beq.n	8009198 <SCSI_ProcessCmd+0x274>
 80090f4:	e086      	b.n	8009204 <SCSI_ProcessCmd+0x2e0>
  {
    case SCSI_TEST_UNIT_READY:
      ret = SCSI_TestUnitReady(pdev, lun, cmd);
 80090f6:	7afb      	ldrb	r3, [r7, #11]
 80090f8:	687a      	ldr	r2, [r7, #4]
 80090fa:	4619      	mov	r1, r3
 80090fc:	68f8      	ldr	r0, [r7, #12]
 80090fe:	f000 f893 	bl	8009228 <SCSI_TestUnitReady>
 8009102:	4603      	mov	r3, r0
 8009104:	75fb      	strb	r3, [r7, #23]
      break;
 8009106:	e089      	b.n	800921c <SCSI_ProcessCmd+0x2f8>

    case SCSI_REQUEST_SENSE:
      ret = SCSI_RequestSense(pdev, lun, cmd);
 8009108:	7afb      	ldrb	r3, [r7, #11]
 800910a:	687a      	ldr	r2, [r7, #4]
 800910c:	4619      	mov	r1, r3
 800910e:	68f8      	ldr	r0, [r7, #12]
 8009110:	f000 fb98 	bl	8009844 <SCSI_RequestSense>
 8009114:	4603      	mov	r3, r0
 8009116:	75fb      	strb	r3, [r7, #23]
      break;
 8009118:	e080      	b.n	800921c <SCSI_ProcessCmd+0x2f8>

    case SCSI_INQUIRY:
      ret = SCSI_Inquiry(pdev, lun, cmd);
 800911a:	7afb      	ldrb	r3, [r7, #11]
 800911c:	687a      	ldr	r2, [r7, #4]
 800911e:	4619      	mov	r1, r3
 8009120:	68f8      	ldr	r0, [r7, #12]
 8009122:	f000 f8df 	bl	80092e4 <SCSI_Inquiry>
 8009126:	4603      	mov	r3, r0
 8009128:	75fb      	strb	r3, [r7, #23]
      break;
 800912a:	e077      	b.n	800921c <SCSI_ProcessCmd+0x2f8>

    case SCSI_START_STOP_UNIT:
      ret = SCSI_StartStopUnit(pdev, lun, cmd);
 800912c:	7afb      	ldrb	r3, [r7, #11]
 800912e:	687a      	ldr	r2, [r7, #4]
 8009130:	4619      	mov	r1, r3
 8009132:	68f8      	ldr	r0, [r7, #12]
 8009134:	f000 fc7c 	bl	8009a30 <SCSI_StartStopUnit>
 8009138:	4603      	mov	r3, r0
 800913a:	75fb      	strb	r3, [r7, #23]
      break;
 800913c:	e06e      	b.n	800921c <SCSI_ProcessCmd+0x2f8>

    case SCSI_ALLOW_MEDIUM_REMOVAL:
      ret = SCSI_AllowPreventRemovable(pdev, lun, cmd);
 800913e:	7afb      	ldrb	r3, [r7, #11]
 8009140:	687a      	ldr	r2, [r7, #4]
 8009142:	4619      	mov	r1, r3
 8009144:	68f8      	ldr	r0, [r7, #12]
 8009146:	f000 fcd0 	bl	8009aea <SCSI_AllowPreventRemovable>
 800914a:	4603      	mov	r3, r0
 800914c:	75fb      	strb	r3, [r7, #23]
      break;
 800914e:	e065      	b.n	800921c <SCSI_ProcessCmd+0x2f8>

    case SCSI_MODE_SENSE6:
      ret = SCSI_ModeSense6(pdev, lun, cmd);
 8009150:	7afb      	ldrb	r3, [r7, #11]
 8009152:	687a      	ldr	r2, [r7, #4]
 8009154:	4619      	mov	r1, r3
 8009156:	68f8      	ldr	r0, [r7, #12]
 8009158:	f000 fb14 	bl	8009784 <SCSI_ModeSense6>
 800915c:	4603      	mov	r3, r0
 800915e:	75fb      	strb	r3, [r7, #23]
      break;
 8009160:	e05c      	b.n	800921c <SCSI_ProcessCmd+0x2f8>

    case SCSI_MODE_SENSE10:
      ret = SCSI_ModeSense10(pdev, lun, cmd);
 8009162:	7afb      	ldrb	r3, [r7, #11]
 8009164:	687a      	ldr	r2, [r7, #4]
 8009166:	4619      	mov	r1, r3
 8009168:	68f8      	ldr	r0, [r7, #12]
 800916a:	f000 fb3b 	bl	80097e4 <SCSI_ModeSense10>
 800916e:	4603      	mov	r3, r0
 8009170:	75fb      	strb	r3, [r7, #23]
      break;
 8009172:	e053      	b.n	800921c <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ_FORMAT_CAPACITIES:
      ret = SCSI_ReadFormatCapacity(pdev, lun, cmd);
 8009174:	7afb      	ldrb	r3, [r7, #11]
 8009176:	687a      	ldr	r2, [r7, #4]
 8009178:	4619      	mov	r1, r3
 800917a:	68f8      	ldr	r0, [r7, #12]
 800917c:	f000 fa85 	bl	800968a <SCSI_ReadFormatCapacity>
 8009180:	4603      	mov	r3, r0
 8009182:	75fb      	strb	r3, [r7, #23]
      break;
 8009184:	e04a      	b.n	800921c <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ_CAPACITY10:
      ret = SCSI_ReadCapacity10(pdev, lun, cmd);
 8009186:	7afb      	ldrb	r3, [r7, #11]
 8009188:	687a      	ldr	r2, [r7, #4]
 800918a:	4619      	mov	r1, r3
 800918c:	68f8      	ldr	r0, [r7, #12]
 800918e:	f000 f929 	bl	80093e4 <SCSI_ReadCapacity10>
 8009192:	4603      	mov	r3, r0
 8009194:	75fb      	strb	r3, [r7, #23]
      break;
 8009196:	e041      	b.n	800921c <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ_CAPACITY16:
      ret = SCSI_ReadCapacity16(pdev, lun, cmd);
 8009198:	7afb      	ldrb	r3, [r7, #11]
 800919a:	687a      	ldr	r2, [r7, #4]
 800919c:	4619      	mov	r1, r3
 800919e:	68f8      	ldr	r0, [r7, #12]
 80091a0:	f000 f9af 	bl	8009502 <SCSI_ReadCapacity16>
 80091a4:	4603      	mov	r3, r0
 80091a6:	75fb      	strb	r3, [r7, #23]
      break;
 80091a8:	e038      	b.n	800921c <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ10:
      ret = SCSI_Read10(pdev, lun, cmd);
 80091aa:	7afb      	ldrb	r3, [r7, #11]
 80091ac:	687a      	ldr	r2, [r7, #4]
 80091ae:	4619      	mov	r1, r3
 80091b0:	68f8      	ldr	r0, [r7, #12]
 80091b2:	f000 fccb 	bl	8009b4c <SCSI_Read10>
 80091b6:	4603      	mov	r3, r0
 80091b8:	75fb      	strb	r3, [r7, #23]
      break;
 80091ba:	e02f      	b.n	800921c <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ12:
      ret = SCSI_Read12(pdev, lun, cmd);
 80091bc:	7afb      	ldrb	r3, [r7, #11]
 80091be:	687a      	ldr	r2, [r7, #4]
 80091c0:	4619      	mov	r1, r3
 80091c2:	68f8      	ldr	r0, [r7, #12]
 80091c4:	f000 fd79 	bl	8009cba <SCSI_Read12>
 80091c8:	4603      	mov	r3, r0
 80091ca:	75fb      	strb	r3, [r7, #23]
      break;
 80091cc:	e026      	b.n	800921c <SCSI_ProcessCmd+0x2f8>

    case SCSI_WRITE10:
      ret = SCSI_Write10(pdev, lun, cmd);
 80091ce:	7afb      	ldrb	r3, [r7, #11]
 80091d0:	687a      	ldr	r2, [r7, #4]
 80091d2:	4619      	mov	r1, r3
 80091d4:	68f8      	ldr	r0, [r7, #12]
 80091d6:	f000 fe31 	bl	8009e3c <SCSI_Write10>
 80091da:	4603      	mov	r3, r0
 80091dc:	75fb      	strb	r3, [r7, #23]
      break;
 80091de:	e01d      	b.n	800921c <SCSI_ProcessCmd+0x2f8>

    case SCSI_WRITE12:
      ret = SCSI_Write12(pdev, lun, cmd);
 80091e0:	7afb      	ldrb	r3, [r7, #11]
 80091e2:	687a      	ldr	r2, [r7, #4]
 80091e4:	4619      	mov	r1, r3
 80091e6:	68f8      	ldr	r0, [r7, #12]
 80091e8:	f000 ff0c 	bl	800a004 <SCSI_Write12>
 80091ec:	4603      	mov	r3, r0
 80091ee:	75fb      	strb	r3, [r7, #23]
      break;
 80091f0:	e014      	b.n	800921c <SCSI_ProcessCmd+0x2f8>

    case SCSI_VERIFY10:
      ret = SCSI_Verify10(pdev, lun, cmd);
 80091f2:	7afb      	ldrb	r3, [r7, #11]
 80091f4:	687a      	ldr	r2, [r7, #4]
 80091f6:	4619      	mov	r1, r3
 80091f8:	68f8      	ldr	r0, [r7, #12]
 80091fa:	f000 fff7 	bl	800a1ec <SCSI_Verify10>
 80091fe:	4603      	mov	r3, r0
 8009200:	75fb      	strb	r3, [r7, #23]
      break;
 8009202:	e00b      	b.n	800921c <SCSI_ProcessCmd+0x2f8>

    default:
      SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_CDB);
 8009204:	7af9      	ldrb	r1, [r7, #11]
 8009206:	2320      	movs	r3, #32
 8009208:	2205      	movs	r2, #5
 800920a:	68f8      	ldr	r0, [r7, #12]
 800920c:	f000 fbb4 	bl	8009978 <SCSI_SenseCode>
      hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 8009210:	693b      	ldr	r3, [r7, #16]
 8009212:	2202      	movs	r2, #2
 8009214:	725a      	strb	r2, [r3, #9]
      ret = -1;
 8009216:	23ff      	movs	r3, #255	; 0xff
 8009218:	75fb      	strb	r3, [r7, #23]
      break;
 800921a:	bf00      	nop
  }

  return ret;
 800921c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009220:	4618      	mov	r0, r3
 8009222:	3718      	adds	r7, #24
 8009224:	46bd      	mov	sp, r7
 8009226:	bd80      	pop	{r7, pc}

08009228 <SCSI_TestUnitReady>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_TestUnitReady(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8009228:	b580      	push	{r7, lr}
 800922a:	b086      	sub	sp, #24
 800922c:	af00      	add	r7, sp, #0
 800922e:	60f8      	str	r0, [r7, #12]
 8009230:	460b      	mov	r3, r1
 8009232:	607a      	str	r2, [r7, #4]
 8009234:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	32b0      	adds	r2, #176	; 0xb0
 8009240:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009244:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8009246:	697b      	ldr	r3, [r7, #20]
 8009248:	2b00      	cmp	r3, #0
 800924a:	d102      	bne.n	8009252 <SCSI_TestUnitReady+0x2a>
  {
    return -1;
 800924c:	f04f 33ff 	mov.w	r3, #4294967295
 8009250:	e043      	b.n	80092da <SCSI_TestUnitReady+0xb2>
  }

  /* case 9 : Hi > D0 */
  if (hmsc->cbw.dDataLength != 0U)
 8009252:	697b      	ldr	r3, [r7, #20]
 8009254:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009258:	699b      	ldr	r3, [r3, #24]
 800925a:	2b00      	cmp	r3, #0
 800925c:	d00b      	beq.n	8009276 <SCSI_TestUnitReady+0x4e>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800925e:	697b      	ldr	r3, [r7, #20]
 8009260:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009264:	7f59      	ldrb	r1, [r3, #29]
 8009266:	2320      	movs	r3, #32
 8009268:	2205      	movs	r2, #5
 800926a:	68f8      	ldr	r0, [r7, #12]
 800926c:	f000 fb84 	bl	8009978 <SCSI_SenseCode>

    return -1;
 8009270:	f04f 33ff 	mov.w	r3, #4294967295
 8009274:	e031      	b.n	80092da <SCSI_TestUnitReady+0xb2>
  }

  if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 8009276:	697b      	ldr	r3, [r7, #20]
 8009278:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800927c:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8009280:	2b02      	cmp	r3, #2
 8009282:	d10b      	bne.n	800929c <SCSI_TestUnitReady+0x74>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8009284:	7af9      	ldrb	r1, [r7, #11]
 8009286:	233a      	movs	r3, #58	; 0x3a
 8009288:	2202      	movs	r2, #2
 800928a:	68f8      	ldr	r0, [r7, #12]
 800928c:	f000 fb74 	bl	8009978 <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 8009290:	697b      	ldr	r3, [r7, #20]
 8009292:	2205      	movs	r2, #5
 8009294:	721a      	strb	r2, [r3, #8]
    return -1;
 8009296:	f04f 33ff 	mov.w	r3, #4294967295
 800929a:	e01e      	b.n	80092da <SCSI_TestUnitReady+0xb2>
  }

  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80092a2:	68fa      	ldr	r2, [r7, #12]
 80092a4:	33b0      	adds	r3, #176	; 0xb0
 80092a6:	009b      	lsls	r3, r3, #2
 80092a8:	4413      	add	r3, r2
 80092aa:	685b      	ldr	r3, [r3, #4]
 80092ac:	689b      	ldr	r3, [r3, #8]
 80092ae:	7afa      	ldrb	r2, [r7, #11]
 80092b0:	4610      	mov	r0, r2
 80092b2:	4798      	blx	r3
 80092b4:	4603      	mov	r3, r0
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d00b      	beq.n	80092d2 <SCSI_TestUnitReady+0xaa>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80092ba:	7af9      	ldrb	r1, [r7, #11]
 80092bc:	233a      	movs	r3, #58	; 0x3a
 80092be:	2202      	movs	r2, #2
 80092c0:	68f8      	ldr	r0, [r7, #12]
 80092c2:	f000 fb59 	bl	8009978 <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 80092c6:	697b      	ldr	r3, [r7, #20]
 80092c8:	2205      	movs	r2, #5
 80092ca:	721a      	strb	r2, [r3, #8]

    return -1;
 80092cc:	f04f 33ff 	mov.w	r3, #4294967295
 80092d0:	e003      	b.n	80092da <SCSI_TestUnitReady+0xb2>
  }
  hmsc->bot_data_length = 0U;
 80092d2:	697b      	ldr	r3, [r7, #20]
 80092d4:	2200      	movs	r2, #0
 80092d6:	60da      	str	r2, [r3, #12]

  return 0;
 80092d8:	2300      	movs	r3, #0
}
 80092da:	4618      	mov	r0, r3
 80092dc:	3718      	adds	r7, #24
 80092de:	46bd      	mov	sp, r7
 80092e0:	bd80      	pop	{r7, pc}
	...

080092e4 <SCSI_Inquiry>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Inquiry(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80092e4:	b580      	push	{r7, lr}
 80092e6:	b088      	sub	sp, #32
 80092e8:	af00      	add	r7, sp, #0
 80092ea:	60f8      	str	r0, [r7, #12]
 80092ec:	460b      	mov	r3, r1
 80092ee:	607a      	str	r2, [r7, #4]
 80092f0:	72fb      	strb	r3, [r7, #11]
  uint8_t *pPage;
  uint16_t len;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	32b0      	adds	r2, #176	; 0xb0
 80092fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009300:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 8009302:	69bb      	ldr	r3, [r7, #24]
 8009304:	2b00      	cmp	r3, #0
 8009306:	d102      	bne.n	800930e <SCSI_Inquiry+0x2a>
  {
    return -1;
 8009308:	f04f 33ff 	mov.w	r3, #4294967295
 800930c:	e062      	b.n	80093d4 <SCSI_Inquiry+0xf0>
  }

  if (hmsc->cbw.dDataLength == 0U)
 800930e:	69bb      	ldr	r3, [r7, #24]
 8009310:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009314:	699b      	ldr	r3, [r3, #24]
 8009316:	2b00      	cmp	r3, #0
 8009318:	d10b      	bne.n	8009332 <SCSI_Inquiry+0x4e>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800931a:	69bb      	ldr	r3, [r7, #24]
 800931c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009320:	7f59      	ldrb	r1, [r3, #29]
 8009322:	2320      	movs	r3, #32
 8009324:	2205      	movs	r2, #5
 8009326:	68f8      	ldr	r0, [r7, #12]
 8009328:	f000 fb26 	bl	8009978 <SCSI_SenseCode>
    return -1;
 800932c:	f04f 33ff 	mov.w	r3, #4294967295
 8009330:	e050      	b.n	80093d4 <SCSI_Inquiry+0xf0>
  }

  if ((params[1] & 0x01U) != 0U) /* Evpd is set */
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	3301      	adds	r3, #1
 8009336:	781b      	ldrb	r3, [r3, #0]
 8009338:	f003 0301 	and.w	r3, r3, #1
 800933c:	2b00      	cmp	r3, #0
 800933e:	d021      	beq.n	8009384 <SCSI_Inquiry+0xa0>
  {
    if (params[2] == 0U) /* Request for Supported Vital Product Data Pages*/
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	3302      	adds	r3, #2
 8009344:	781b      	ldrb	r3, [r3, #0]
 8009346:	2b00      	cmp	r3, #0
 8009348:	d105      	bne.n	8009356 <SCSI_Inquiry+0x72>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page00_Inquiry_Data, LENGTH_INQUIRY_PAGE00);
 800934a:	2206      	movs	r2, #6
 800934c:	4923      	ldr	r1, [pc, #140]	; (80093dc <SCSI_Inquiry+0xf8>)
 800934e:	69b8      	ldr	r0, [r7, #24]
 8009350:	f001 f8f8 	bl	800a544 <SCSI_UpdateBotData>
 8009354:	e03d      	b.n	80093d2 <SCSI_Inquiry+0xee>
    }
    else if (params[2] == 0x80U) /* Request for VPD page 0x80 Unit Serial Number */
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	3302      	adds	r3, #2
 800935a:	781b      	ldrb	r3, [r3, #0]
 800935c:	2b80      	cmp	r3, #128	; 0x80
 800935e:	d105      	bne.n	800936c <SCSI_Inquiry+0x88>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page80_Inquiry_Data, LENGTH_INQUIRY_PAGE80);
 8009360:	2208      	movs	r2, #8
 8009362:	491f      	ldr	r1, [pc, #124]	; (80093e0 <SCSI_Inquiry+0xfc>)
 8009364:	69b8      	ldr	r0, [r7, #24]
 8009366:	f001 f8ed 	bl	800a544 <SCSI_UpdateBotData>
 800936a:	e032      	b.n	80093d2 <SCSI_Inquiry+0xee>
    }
    else /* Request Not supported */
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST,
 800936c:	69bb      	ldr	r3, [r7, #24]
 800936e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009372:	7f59      	ldrb	r1, [r3, #29]
 8009374:	2324      	movs	r3, #36	; 0x24
 8009376:	2205      	movs	r2, #5
 8009378:	68f8      	ldr	r0, [r7, #12]
 800937a:	f000 fafd 	bl	8009978 <SCSI_SenseCode>
                     INVALID_FIELED_IN_COMMAND);

      return -1;
 800937e:	f04f 33ff 	mov.w	r3, #4294967295
 8009382:	e027      	b.n	80093d4 <SCSI_Inquiry+0xf0>
    }
  }
  else
  {

    pPage = (uint8_t *) & ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->pInquiry[lun * STANDARD_INQUIRY_DATA_LEN];
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800938a:	68fa      	ldr	r2, [r7, #12]
 800938c:	33b0      	adds	r3, #176	; 0xb0
 800938e:	009b      	lsls	r3, r3, #2
 8009390:	4413      	add	r3, r2
 8009392:	685b      	ldr	r3, [r3, #4]
 8009394:	69d9      	ldr	r1, [r3, #28]
 8009396:	7afa      	ldrb	r2, [r7, #11]
 8009398:	4613      	mov	r3, r2
 800939a:	00db      	lsls	r3, r3, #3
 800939c:	4413      	add	r3, r2
 800939e:	009b      	lsls	r3, r3, #2
 80093a0:	440b      	add	r3, r1
 80093a2:	617b      	str	r3, [r7, #20]
    len = (uint16_t)pPage[4] + 5U;
 80093a4:	697b      	ldr	r3, [r7, #20]
 80093a6:	3304      	adds	r3, #4
 80093a8:	781b      	ldrb	r3, [r3, #0]
 80093aa:	b29b      	uxth	r3, r3
 80093ac:	3305      	adds	r3, #5
 80093ae:	83fb      	strh	r3, [r7, #30]

    if (params[4] <= len)
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	3304      	adds	r3, #4
 80093b4:	781b      	ldrb	r3, [r3, #0]
 80093b6:	b29b      	uxth	r3, r3
 80093b8:	8bfa      	ldrh	r2, [r7, #30]
 80093ba:	429a      	cmp	r2, r3
 80093bc:	d303      	bcc.n	80093c6 <SCSI_Inquiry+0xe2>
    {
      len = params[4];
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	3304      	adds	r3, #4
 80093c2:	781b      	ldrb	r3, [r3, #0]
 80093c4:	83fb      	strh	r3, [r7, #30]
    }

    (void)SCSI_UpdateBotData(hmsc, pPage, len);
 80093c6:	8bfb      	ldrh	r3, [r7, #30]
 80093c8:	461a      	mov	r2, r3
 80093ca:	6979      	ldr	r1, [r7, #20]
 80093cc:	69b8      	ldr	r0, [r7, #24]
 80093ce:	f001 f8b9 	bl	800a544 <SCSI_UpdateBotData>
  }

  return 0;
 80093d2:	2300      	movs	r3, #0
}
 80093d4:	4618      	mov	r0, r3
 80093d6:	3720      	adds	r7, #32
 80093d8:	46bd      	mov	sp, r7
 80093da:	bd80      	pop	{r7, pc}
 80093dc:	20000074 	.word	0x20000074
 80093e0:	2000007c 	.word	0x2000007c

080093e4 <SCSI_ReadCapacity10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadCapacity10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80093e4:	b590      	push	{r4, r7, lr}
 80093e6:	b087      	sub	sp, #28
 80093e8:	af00      	add	r7, sp, #0
 80093ea:	60f8      	str	r0, [r7, #12]
 80093ec:	460b      	mov	r3, r1
 80093ee:	607a      	str	r2, [r7, #4]
 80093f0:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	32b0      	adds	r2, #176	; 0xb0
 80093fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009400:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8009402:	697b      	ldr	r3, [r7, #20]
 8009404:	2b00      	cmp	r3, #0
 8009406:	d102      	bne.n	800940e <SCSI_ReadCapacity10+0x2a>
  {
    return -1;
 8009408:	f04f 33ff 	mov.w	r3, #4294967295
 800940c:	e075      	b.n	80094fa <SCSI_ReadCapacity10+0x116>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size);
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009414:	68fa      	ldr	r2, [r7, #12]
 8009416:	33b0      	adds	r3, #176	; 0xb0
 8009418:	009b      	lsls	r3, r3, #2
 800941a:	4413      	add	r3, r2
 800941c:	685b      	ldr	r3, [r3, #4]
 800941e:	685c      	ldr	r4, [r3, #4]
 8009420:	697b      	ldr	r3, [r7, #20]
 8009422:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 8009426:	3308      	adds	r3, #8
 8009428:	697a      	ldr	r2, [r7, #20]
 800942a:	f502 5283 	add.w	r2, r2, #4192	; 0x1060
 800942e:	3204      	adds	r2, #4
 8009430:	7af8      	ldrb	r0, [r7, #11]
 8009432:	4619      	mov	r1, r3
 8009434:	47a0      	blx	r4
 8009436:	4603      	mov	r3, r0
 8009438:	74fb      	strb	r3, [r7, #19]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 800943a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800943e:	2b00      	cmp	r3, #0
 8009440:	d106      	bne.n	8009450 <SCSI_ReadCapacity10+0x6c>
 8009442:	697b      	ldr	r3, [r7, #20]
 8009444:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009448:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 800944c:	2b02      	cmp	r3, #2
 800944e:	d108      	bne.n	8009462 <SCSI_ReadCapacity10+0x7e>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8009450:	7af9      	ldrb	r1, [r7, #11]
 8009452:	233a      	movs	r3, #58	; 0x3a
 8009454:	2202      	movs	r2, #2
 8009456:	68f8      	ldr	r0, [r7, #12]
 8009458:	f000 fa8e 	bl	8009978 <SCSI_SenseCode>
    return -1;
 800945c:	f04f 33ff 	mov.w	r3, #4294967295
 8009460:	e04b      	b.n	80094fa <SCSI_ReadCapacity10+0x116>
  }

  hmsc->bot_data[0] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 8009462:	697b      	ldr	r3, [r7, #20]
 8009464:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009468:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800946a:	3b01      	subs	r3, #1
 800946c:	0e1b      	lsrs	r3, r3, #24
 800946e:	b2da      	uxtb	r2, r3
 8009470:	697b      	ldr	r3, [r7, #20]
 8009472:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[1] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 8009474:	697b      	ldr	r3, [r7, #20]
 8009476:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800947a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800947c:	3b01      	subs	r3, #1
 800947e:	0c1b      	lsrs	r3, r3, #16
 8009480:	b2da      	uxtb	r2, r3
 8009482:	697b      	ldr	r3, [r7, #20]
 8009484:	745a      	strb	r2, [r3, #17]
  hmsc->bot_data[2] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 8009486:	697b      	ldr	r3, [r7, #20]
 8009488:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800948c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800948e:	3b01      	subs	r3, #1
 8009490:	0a1b      	lsrs	r3, r3, #8
 8009492:	b2da      	uxtb	r2, r3
 8009494:	697b      	ldr	r3, [r7, #20]
 8009496:	749a      	strb	r2, [r3, #18]
  hmsc->bot_data[3] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 8009498:	697b      	ldr	r3, [r7, #20]
 800949a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800949e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80094a0:	b2db      	uxtb	r3, r3
 80094a2:	3b01      	subs	r3, #1
 80094a4:	b2da      	uxtb	r2, r3
 80094a6:	697b      	ldr	r3, [r7, #20]
 80094a8:	74da      	strb	r2, [r3, #19]

  hmsc->bot_data[4] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 80094aa:	697b      	ldr	r3, [r7, #20]
 80094ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80094b0:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80094b4:	161b      	asrs	r3, r3, #24
 80094b6:	b2da      	uxtb	r2, r3
 80094b8:	697b      	ldr	r3, [r7, #20]
 80094ba:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 80094bc:	697b      	ldr	r3, [r7, #20]
 80094be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80094c2:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80094c6:	141b      	asrs	r3, r3, #16
 80094c8:	b2da      	uxtb	r2, r3
 80094ca:	697b      	ldr	r3, [r7, #20]
 80094cc:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 80094ce:	697b      	ldr	r3, [r7, #20]
 80094d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80094d4:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80094d8:	0a1b      	lsrs	r3, r3, #8
 80094da:	b29b      	uxth	r3, r3
 80094dc:	b2da      	uxtb	r2, r3
 80094de:	697b      	ldr	r3, [r7, #20]
 80094e0:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_size);
 80094e2:	697b      	ldr	r3, [r7, #20]
 80094e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80094e8:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80094ec:	b2da      	uxtb	r2, r3
 80094ee:	697b      	ldr	r3, [r7, #20]
 80094f0:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data_length = 8U;
 80094f2:	697b      	ldr	r3, [r7, #20]
 80094f4:	2208      	movs	r2, #8
 80094f6:	60da      	str	r2, [r3, #12]

  return 0;
 80094f8:	2300      	movs	r3, #0

}
 80094fa:	4618      	mov	r0, r3
 80094fc:	371c      	adds	r7, #28
 80094fe:	46bd      	mov	sp, r7
 8009500:	bd90      	pop	{r4, r7, pc}

08009502 <SCSI_ReadCapacity16>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadCapacity16(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8009502:	b590      	push	{r4, r7, lr}
 8009504:	b089      	sub	sp, #36	; 0x24
 8009506:	af00      	add	r7, sp, #0
 8009508:	60f8      	str	r0, [r7, #12]
 800950a:	460b      	mov	r3, r1
 800950c:	607a      	str	r2, [r7, #4]
 800950e:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint8_t idx;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	32b0      	adds	r2, #176	; 0xb0
 800951a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800951e:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 8009520:	69bb      	ldr	r3, [r7, #24]
 8009522:	2b00      	cmp	r3, #0
 8009524:	d102      	bne.n	800952c <SCSI_ReadCapacity16+0x2a>
  {
    return -1;
 8009526:	f04f 33ff 	mov.w	r3, #4294967295
 800952a:	e0aa      	b.n	8009682 <SCSI_ReadCapacity16+0x180>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size);
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009532:	68fa      	ldr	r2, [r7, #12]
 8009534:	33b0      	adds	r3, #176	; 0xb0
 8009536:	009b      	lsls	r3, r3, #2
 8009538:	4413      	add	r3, r2
 800953a:	685b      	ldr	r3, [r3, #4]
 800953c:	685c      	ldr	r4, [r3, #4]
 800953e:	69bb      	ldr	r3, [r7, #24]
 8009540:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 8009544:	3308      	adds	r3, #8
 8009546:	69ba      	ldr	r2, [r7, #24]
 8009548:	f502 5283 	add.w	r2, r2, #4192	; 0x1060
 800954c:	3204      	adds	r2, #4
 800954e:	7af8      	ldrb	r0, [r7, #11]
 8009550:	4619      	mov	r1, r3
 8009552:	47a0      	blx	r4
 8009554:	4603      	mov	r3, r0
 8009556:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 8009558:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800955c:	2b00      	cmp	r3, #0
 800955e:	d106      	bne.n	800956e <SCSI_ReadCapacity16+0x6c>
 8009560:	69bb      	ldr	r3, [r7, #24]
 8009562:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009566:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 800956a:	2b02      	cmp	r3, #2
 800956c:	d108      	bne.n	8009580 <SCSI_ReadCapacity16+0x7e>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800956e:	7af9      	ldrb	r1, [r7, #11]
 8009570:	233a      	movs	r3, #58	; 0x3a
 8009572:	2202      	movs	r2, #2
 8009574:	68f8      	ldr	r0, [r7, #12]
 8009576:	f000 f9ff 	bl	8009978 <SCSI_SenseCode>
    return -1;
 800957a:	f04f 33ff 	mov.w	r3, #4294967295
 800957e:	e080      	b.n	8009682 <SCSI_ReadCapacity16+0x180>
  }

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	330a      	adds	r3, #10
 8009584:	781b      	ldrb	r3, [r3, #0]
 8009586:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	330b      	adds	r3, #11
 800958c:	781b      	ldrb	r3, [r3, #0]
 800958e:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8009590:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	330c      	adds	r3, #12
 8009596:	781b      	ldrb	r3, [r3, #0]
 8009598:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 800959a:	4313      	orrs	r3, r2
                          (uint32_t)params[13];
 800959c:	687a      	ldr	r2, [r7, #4]
 800959e:	320d      	adds	r2, #13
 80095a0:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 80095a2:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 80095a4:	69bb      	ldr	r3, [r7, #24]
 80095a6:	60da      	str	r2, [r3, #12]

  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 80095a8:	2300      	movs	r3, #0
 80095aa:	77fb      	strb	r3, [r7, #31]
 80095ac:	e007      	b.n	80095be <SCSI_ReadCapacity16+0xbc>
  {
    hmsc->bot_data[idx] = 0U;
 80095ae:	7ffb      	ldrb	r3, [r7, #31]
 80095b0:	69ba      	ldr	r2, [r7, #24]
 80095b2:	4413      	add	r3, r2
 80095b4:	2200      	movs	r2, #0
 80095b6:	741a      	strb	r2, [r3, #16]
  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 80095b8:	7ffb      	ldrb	r3, [r7, #31]
 80095ba:	3301      	adds	r3, #1
 80095bc:	77fb      	strb	r3, [r7, #31]
 80095be:	7ffa      	ldrb	r2, [r7, #31]
 80095c0:	69bb      	ldr	r3, [r7, #24]
 80095c2:	68db      	ldr	r3, [r3, #12]
 80095c4:	429a      	cmp	r2, r3
 80095c6:	d3f2      	bcc.n	80095ae <SCSI_ReadCapacity16+0xac>
  }

  hmsc->bot_data[4] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 80095c8:	69bb      	ldr	r3, [r7, #24]
 80095ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80095ce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80095d0:	3b01      	subs	r3, #1
 80095d2:	0e1b      	lsrs	r3, r3, #24
 80095d4:	b2da      	uxtb	r2, r3
 80095d6:	69bb      	ldr	r3, [r7, #24]
 80095d8:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 80095da:	69bb      	ldr	r3, [r7, #24]
 80095dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80095e0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80095e2:	3b01      	subs	r3, #1
 80095e4:	0c1b      	lsrs	r3, r3, #16
 80095e6:	b2da      	uxtb	r2, r3
 80095e8:	69bb      	ldr	r3, [r7, #24]
 80095ea:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 80095ec:	69bb      	ldr	r3, [r7, #24]
 80095ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80095f2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80095f4:	3b01      	subs	r3, #1
 80095f6:	0a1b      	lsrs	r3, r3, #8
 80095f8:	b2da      	uxtb	r2, r3
 80095fa:	69bb      	ldr	r3, [r7, #24]
 80095fc:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 80095fe:	69bb      	ldr	r3, [r7, #24]
 8009600:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009604:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009606:	b2db      	uxtb	r3, r3
 8009608:	3b01      	subs	r3, #1
 800960a:	b2da      	uxtb	r2, r3
 800960c:	69bb      	ldr	r3, [r7, #24]
 800960e:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 8009610:	69bb      	ldr	r3, [r7, #24]
 8009612:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009616:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800961a:	161b      	asrs	r3, r3, #24
 800961c:	b2da      	uxtb	r2, r3
 800961e:	69bb      	ldr	r3, [r7, #24]
 8009620:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 8009622:	69bb      	ldr	r3, [r7, #24]
 8009624:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009628:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800962c:	141b      	asrs	r3, r3, #16
 800962e:	b2da      	uxtb	r2, r3
 8009630:	69bb      	ldr	r3, [r7, #24]
 8009632:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 8009634:	69bb      	ldr	r3, [r7, #24]
 8009636:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800963a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800963e:	0a1b      	lsrs	r3, r3, #8
 8009640:	b29b      	uxth	r3, r3
 8009642:	b2da      	uxtb	r2, r3
 8009644:	69bb      	ldr	r3, [r7, #24]
 8009646:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(hmsc->scsi_blk_size);
 8009648:	69bb      	ldr	r3, [r7, #24]
 800964a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800964e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8009652:	b2da      	uxtb	r2, r3
 8009654:	69bb      	ldr	r3, [r7, #24]
 8009656:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	330a      	adds	r3, #10
 800965c:	781b      	ldrb	r3, [r3, #0]
 800965e:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	330b      	adds	r3, #11
 8009664:	781b      	ldrb	r3, [r3, #0]
 8009666:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8009668:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	330c      	adds	r3, #12
 800966e:	781b      	ldrb	r3, [r3, #0]
 8009670:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 8009672:	4313      	orrs	r3, r2
                          (uint32_t)params[13];
 8009674:	687a      	ldr	r2, [r7, #4]
 8009676:	320d      	adds	r2, #13
 8009678:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 800967a:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800967c:	69bb      	ldr	r3, [r7, #24]
 800967e:	60da      	str	r2, [r3, #12]

  return 0;
 8009680:	2300      	movs	r3, #0
}
 8009682:	4618      	mov	r0, r3
 8009684:	3724      	adds	r7, #36	; 0x24
 8009686:	46bd      	mov	sp, r7
 8009688:	bd90      	pop	{r4, r7, pc}

0800968a <SCSI_ReadFormatCapacity>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadFormatCapacity(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800968a:	b580      	push	{r7, lr}
 800968c:	b088      	sub	sp, #32
 800968e:	af00      	add	r7, sp, #0
 8009690:	60f8      	str	r0, [r7, #12]
 8009692:	460b      	mov	r3, r1
 8009694:	607a      	str	r2, [r7, #4]
 8009696:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint16_t blk_size;
  uint32_t blk_nbr;
  uint16_t i;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	32b0      	adds	r2, #176	; 0xb0
 80096a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80096a6:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 80096a8:	69bb      	ldr	r3, [r7, #24]
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d102      	bne.n	80096b4 <SCSI_ReadFormatCapacity+0x2a>
  {
    return -1;
 80096ae:	f04f 33ff 	mov.w	r3, #4294967295
 80096b2:	e063      	b.n	800977c <SCSI_ReadFormatCapacity+0xf2>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetCapacity(lun, &blk_nbr, &blk_size);
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80096ba:	68fa      	ldr	r2, [r7, #12]
 80096bc:	33b0      	adds	r3, #176	; 0xb0
 80096be:	009b      	lsls	r3, r3, #2
 80096c0:	4413      	add	r3, r2
 80096c2:	685b      	ldr	r3, [r3, #4]
 80096c4:	685b      	ldr	r3, [r3, #4]
 80096c6:	f107 0214 	add.w	r2, r7, #20
 80096ca:	f107 0110 	add.w	r1, r7, #16
 80096ce:	7af8      	ldrb	r0, [r7, #11]
 80096d0:	4798      	blx	r3
 80096d2:	4603      	mov	r3, r0
 80096d4:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 80096d6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d106      	bne.n	80096ec <SCSI_ReadFormatCapacity+0x62>
 80096de:	69bb      	ldr	r3, [r7, #24]
 80096e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80096e4:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 80096e8:	2b02      	cmp	r3, #2
 80096ea:	d108      	bne.n	80096fe <SCSI_ReadFormatCapacity+0x74>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80096ec:	7af9      	ldrb	r1, [r7, #11]
 80096ee:	233a      	movs	r3, #58	; 0x3a
 80096f0:	2202      	movs	r2, #2
 80096f2:	68f8      	ldr	r0, [r7, #12]
 80096f4:	f000 f940 	bl	8009978 <SCSI_SenseCode>
    return -1;
 80096f8:	f04f 33ff 	mov.w	r3, #4294967295
 80096fc:	e03e      	b.n	800977c <SCSI_ReadFormatCapacity+0xf2>
  }

  for (i = 0U; i < 12U ; i++)
 80096fe:	2300      	movs	r3, #0
 8009700:	83fb      	strh	r3, [r7, #30]
 8009702:	e007      	b.n	8009714 <SCSI_ReadFormatCapacity+0x8a>
  {
    hmsc->bot_data[i] = 0U;
 8009704:	8bfb      	ldrh	r3, [r7, #30]
 8009706:	69ba      	ldr	r2, [r7, #24]
 8009708:	4413      	add	r3, r2
 800970a:	2200      	movs	r2, #0
 800970c:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < 12U ; i++)
 800970e:	8bfb      	ldrh	r3, [r7, #30]
 8009710:	3301      	adds	r3, #1
 8009712:	83fb      	strh	r3, [r7, #30]
 8009714:	8bfb      	ldrh	r3, [r7, #30]
 8009716:	2b0b      	cmp	r3, #11
 8009718:	d9f4      	bls.n	8009704 <SCSI_ReadFormatCapacity+0x7a>
  }

  hmsc->bot_data[3] = 0x08U;
 800971a:	69bb      	ldr	r3, [r7, #24]
 800971c:	2208      	movs	r2, #8
 800971e:	74da      	strb	r2, [r3, #19]
  hmsc->bot_data[4] = (uint8_t)((blk_nbr - 1U) >> 24);
 8009720:	693b      	ldr	r3, [r7, #16]
 8009722:	3b01      	subs	r3, #1
 8009724:	0e1b      	lsrs	r3, r3, #24
 8009726:	b2da      	uxtb	r2, r3
 8009728:	69bb      	ldr	r3, [r7, #24]
 800972a:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((blk_nbr - 1U) >> 16);
 800972c:	693b      	ldr	r3, [r7, #16]
 800972e:	3b01      	subs	r3, #1
 8009730:	0c1b      	lsrs	r3, r3, #16
 8009732:	b2da      	uxtb	r2, r3
 8009734:	69bb      	ldr	r3, [r7, #24]
 8009736:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((blk_nbr - 1U) >>  8);
 8009738:	693b      	ldr	r3, [r7, #16]
 800973a:	3b01      	subs	r3, #1
 800973c:	0a1b      	lsrs	r3, r3, #8
 800973e:	b2da      	uxtb	r2, r3
 8009740:	69bb      	ldr	r3, [r7, #24]
 8009742:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(blk_nbr - 1U);
 8009744:	693b      	ldr	r3, [r7, #16]
 8009746:	b2db      	uxtb	r3, r3
 8009748:	3b01      	subs	r3, #1
 800974a:	b2da      	uxtb	r2, r3
 800974c:	69bb      	ldr	r3, [r7, #24]
 800974e:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = 0x02U;
 8009750:	69bb      	ldr	r3, [r7, #24]
 8009752:	2202      	movs	r2, #2
 8009754:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(blk_size >>  16);
 8009756:	8abb      	ldrh	r3, [r7, #20]
 8009758:	141b      	asrs	r3, r3, #16
 800975a:	b2da      	uxtb	r2, r3
 800975c:	69bb      	ldr	r3, [r7, #24]
 800975e:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(blk_size >>  8);
 8009760:	8abb      	ldrh	r3, [r7, #20]
 8009762:	0a1b      	lsrs	r3, r3, #8
 8009764:	b29b      	uxth	r3, r3
 8009766:	b2da      	uxtb	r2, r3
 8009768:	69bb      	ldr	r3, [r7, #24]
 800976a:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(blk_size);
 800976c:	8abb      	ldrh	r3, [r7, #20]
 800976e:	b2da      	uxtb	r2, r3
 8009770:	69bb      	ldr	r3, [r7, #24]
 8009772:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = 12U;
 8009774:	69bb      	ldr	r3, [r7, #24]
 8009776:	220c      	movs	r2, #12
 8009778:	60da      	str	r2, [r3, #12]

  return 0;
 800977a:	2300      	movs	r3, #0
}
 800977c:	4618      	mov	r0, r3
 800977e:	3720      	adds	r7, #32
 8009780:	46bd      	mov	sp, r7
 8009782:	bd80      	pop	{r7, pc}

08009784 <SCSI_ModeSense6>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ModeSense6(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8009784:	b580      	push	{r7, lr}
 8009786:	b086      	sub	sp, #24
 8009788:	af00      	add	r7, sp, #0
 800978a:	60f8      	str	r0, [r7, #12]
 800978c:	460b      	mov	r3, r1
 800978e:	607a      	str	r2, [r7, #4]
 8009790:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009792:	68fb      	ldr	r3, [r7, #12]
 8009794:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009798:	68fb      	ldr	r3, [r7, #12]
 800979a:	32b0      	adds	r2, #176	; 0xb0
 800979c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80097a0:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE6_LEN;
 80097a2:	2317      	movs	r3, #23
 80097a4:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 80097a6:	693b      	ldr	r3, [r7, #16]
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d102      	bne.n	80097b2 <SCSI_ModeSense6+0x2e>
  {
    return -1;
 80097ac:	f04f 33ff 	mov.w	r3, #4294967295
 80097b0:	e011      	b.n	80097d6 <SCSI_ModeSense6+0x52>
  }

  if (params[4] <= len)
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	3304      	adds	r3, #4
 80097b6:	781b      	ldrb	r3, [r3, #0]
 80097b8:	b29b      	uxth	r3, r3
 80097ba:	8afa      	ldrh	r2, [r7, #22]
 80097bc:	429a      	cmp	r2, r3
 80097be:	d303      	bcc.n	80097c8 <SCSI_ModeSense6+0x44>
  {
    len = params[4];
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	3304      	adds	r3, #4
 80097c4:	781b      	ldrb	r3, [r3, #0]
 80097c6:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense6_data, len);
 80097c8:	8afb      	ldrh	r3, [r7, #22]
 80097ca:	461a      	mov	r2, r3
 80097cc:	4904      	ldr	r1, [pc, #16]	; (80097e0 <SCSI_ModeSense6+0x5c>)
 80097ce:	6938      	ldr	r0, [r7, #16]
 80097d0:	f000 feb8 	bl	800a544 <SCSI_UpdateBotData>

  return 0;
 80097d4:	2300      	movs	r3, #0
}
 80097d6:	4618      	mov	r0, r3
 80097d8:	3718      	adds	r7, #24
 80097da:	46bd      	mov	sp, r7
 80097dc:	bd80      	pop	{r7, pc}
 80097de:	bf00      	nop
 80097e0:	20000084 	.word	0x20000084

080097e4 <SCSI_ModeSense10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ModeSense10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80097e4:	b580      	push	{r7, lr}
 80097e6:	b086      	sub	sp, #24
 80097e8:	af00      	add	r7, sp, #0
 80097ea:	60f8      	str	r0, [r7, #12]
 80097ec:	460b      	mov	r3, r1
 80097ee:	607a      	str	r2, [r7, #4]
 80097f0:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80097f8:	68fb      	ldr	r3, [r7, #12]
 80097fa:	32b0      	adds	r2, #176	; 0xb0
 80097fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009800:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE10_LEN;
 8009802:	231b      	movs	r3, #27
 8009804:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 8009806:	693b      	ldr	r3, [r7, #16]
 8009808:	2b00      	cmp	r3, #0
 800980a:	d102      	bne.n	8009812 <SCSI_ModeSense10+0x2e>
  {
    return -1;
 800980c:	f04f 33ff 	mov.w	r3, #4294967295
 8009810:	e011      	b.n	8009836 <SCSI_ModeSense10+0x52>
  }

  if (params[8] <= len)
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	3308      	adds	r3, #8
 8009816:	781b      	ldrb	r3, [r3, #0]
 8009818:	b29b      	uxth	r3, r3
 800981a:	8afa      	ldrh	r2, [r7, #22]
 800981c:	429a      	cmp	r2, r3
 800981e:	d303      	bcc.n	8009828 <SCSI_ModeSense10+0x44>
  {
    len = params[8];
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	3308      	adds	r3, #8
 8009824:	781b      	ldrb	r3, [r3, #0]
 8009826:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense10_data, len);
 8009828:	8afb      	ldrh	r3, [r7, #22]
 800982a:	461a      	mov	r2, r3
 800982c:	4904      	ldr	r1, [pc, #16]	; (8009840 <SCSI_ModeSense10+0x5c>)
 800982e:	6938      	ldr	r0, [r7, #16]
 8009830:	f000 fe88 	bl	800a544 <SCSI_UpdateBotData>

  return 0;
 8009834:	2300      	movs	r3, #0
}
 8009836:	4618      	mov	r0, r3
 8009838:	3718      	adds	r7, #24
 800983a:	46bd      	mov	sp, r7
 800983c:	bd80      	pop	{r7, pc}
 800983e:	bf00      	nop
 8009840:	2000009c 	.word	0x2000009c

08009844 <SCSI_RequestSense>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_RequestSense(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8009844:	b580      	push	{r7, lr}
 8009846:	b086      	sub	sp, #24
 8009848:	af00      	add	r7, sp, #0
 800984a:	60f8      	str	r0, [r7, #12]
 800984c:	460b      	mov	r3, r1
 800984e:	607a      	str	r2, [r7, #4]
 8009850:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  uint8_t i;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	32b0      	adds	r2, #176	; 0xb0
 800985c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009860:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 8009862:	693b      	ldr	r3, [r7, #16]
 8009864:	2b00      	cmp	r3, #0
 8009866:	d102      	bne.n	800986e <SCSI_RequestSense+0x2a>
  {
    return -1;
 8009868:	f04f 33ff 	mov.w	r3, #4294967295
 800986c:	e080      	b.n	8009970 <SCSI_RequestSense+0x12c>
  }

  if (hmsc->cbw.dDataLength == 0U)
 800986e:	693b      	ldr	r3, [r7, #16]
 8009870:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009874:	699b      	ldr	r3, [r3, #24]
 8009876:	2b00      	cmp	r3, #0
 8009878:	d10b      	bne.n	8009892 <SCSI_RequestSense+0x4e>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800987a:	693b      	ldr	r3, [r7, #16]
 800987c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009880:	7f59      	ldrb	r1, [r3, #29]
 8009882:	2320      	movs	r3, #32
 8009884:	2205      	movs	r2, #5
 8009886:	68f8      	ldr	r0, [r7, #12]
 8009888:	f000 f876 	bl	8009978 <SCSI_SenseCode>
    return -1;
 800988c:	f04f 33ff 	mov.w	r3, #4294967295
 8009890:	e06e      	b.n	8009970 <SCSI_RequestSense+0x12c>
  }

  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 8009892:	2300      	movs	r3, #0
 8009894:	75fb      	strb	r3, [r7, #23]
 8009896:	e007      	b.n	80098a8 <SCSI_RequestSense+0x64>
  {
    hmsc->bot_data[i] = 0U;
 8009898:	7dfb      	ldrb	r3, [r7, #23]
 800989a:	693a      	ldr	r2, [r7, #16]
 800989c:	4413      	add	r3, r2
 800989e:	2200      	movs	r2, #0
 80098a0:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 80098a2:	7dfb      	ldrb	r3, [r7, #23]
 80098a4:	3301      	adds	r3, #1
 80098a6:	75fb      	strb	r3, [r7, #23]
 80098a8:	7dfb      	ldrb	r3, [r7, #23]
 80098aa:	2b11      	cmp	r3, #17
 80098ac:	d9f4      	bls.n	8009898 <SCSI_RequestSense+0x54>
  }

  hmsc->bot_data[0] = 0x70U;
 80098ae:	693b      	ldr	r3, [r7, #16]
 80098b0:	2270      	movs	r2, #112	; 0x70
 80098b2:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[7] = REQUEST_SENSE_DATA_LEN - 6U;
 80098b4:	693b      	ldr	r3, [r7, #16]
 80098b6:	220c      	movs	r2, #12
 80098b8:	75da      	strb	r2, [r3, #23]

  if ((hmsc->scsi_sense_head != hmsc->scsi_sense_tail))
 80098ba:	693b      	ldr	r3, [r7, #16]
 80098bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80098c0:	f893 2060 	ldrb.w	r2, [r3, #96]	; 0x60
 80098c4:	693b      	ldr	r3, [r7, #16]
 80098c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80098ca:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 80098ce:	429a      	cmp	r2, r3
 80098d0:	d03f      	beq.n	8009952 <SCSI_RequestSense+0x10e>
  {
    hmsc->bot_data[2] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].Skey;
 80098d2:	693b      	ldr	r3, [r7, #16]
 80098d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80098d8:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 80098dc:	461a      	mov	r2, r3
 80098de:	693b      	ldr	r3, [r7, #16]
 80098e0:	f502 7202 	add.w	r2, r2, #520	; 0x208
 80098e4:	f813 2032 	ldrb.w	r2, [r3, r2, lsl #3]
 80098e8:	693b      	ldr	r3, [r7, #16]
 80098ea:	749a      	strb	r2, [r3, #18]
    hmsc->bot_data[12] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASC;
 80098ec:	693b      	ldr	r3, [r7, #16]
 80098ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80098f2:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 80098f6:	693a      	ldr	r2, [r7, #16]
 80098f8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80098fc:	00db      	lsls	r3, r3, #3
 80098fe:	4413      	add	r3, r2
 8009900:	791a      	ldrb	r2, [r3, #4]
 8009902:	693b      	ldr	r3, [r7, #16]
 8009904:	771a      	strb	r2, [r3, #28]
    hmsc->bot_data[13] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASCQ;
 8009906:	693b      	ldr	r3, [r7, #16]
 8009908:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800990c:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8009910:	693a      	ldr	r2, [r7, #16]
 8009912:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8009916:	00db      	lsls	r3, r3, #3
 8009918:	4413      	add	r3, r2
 800991a:	795a      	ldrb	r2, [r3, #5]
 800991c:	693b      	ldr	r3, [r7, #16]
 800991e:	775a      	strb	r2, [r3, #29]
    hmsc->scsi_sense_head++;
 8009920:	693b      	ldr	r3, [r7, #16]
 8009922:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009926:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800992a:	3301      	adds	r3, #1
 800992c:	b2da      	uxtb	r2, r3
 800992e:	693b      	ldr	r3, [r7, #16]
 8009930:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009934:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

    if (hmsc->scsi_sense_head == SENSE_LIST_DEEPTH)
 8009938:	693b      	ldr	r3, [r7, #16]
 800993a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800993e:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8009942:	2b04      	cmp	r3, #4
 8009944:	d105      	bne.n	8009952 <SCSI_RequestSense+0x10e>
    {
      hmsc->scsi_sense_head = 0U;
 8009946:	693b      	ldr	r3, [r7, #16]
 8009948:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800994c:	2200      	movs	r2, #0
 800994e:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
    }
  }

  hmsc->bot_data_length = REQUEST_SENSE_DATA_LEN;
 8009952:	693b      	ldr	r3, [r7, #16]
 8009954:	2212      	movs	r2, #18
 8009956:	60da      	str	r2, [r3, #12]

  if (params[4] <= REQUEST_SENSE_DATA_LEN)
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	3304      	adds	r3, #4
 800995c:	781b      	ldrb	r3, [r3, #0]
 800995e:	2b12      	cmp	r3, #18
 8009960:	d805      	bhi.n	800996e <SCSI_RequestSense+0x12a>
  {
    hmsc->bot_data_length = params[4];
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	3304      	adds	r3, #4
 8009966:	781b      	ldrb	r3, [r3, #0]
 8009968:	461a      	mov	r2, r3
 800996a:	693b      	ldr	r3, [r7, #16]
 800996c:	60da      	str	r2, [r3, #12]
  }

  return 0;
 800996e:	2300      	movs	r3, #0
}
 8009970:	4618      	mov	r0, r3
 8009972:	3718      	adds	r7, #24
 8009974:	46bd      	mov	sp, r7
 8009976:	bd80      	pop	{r7, pc}

08009978 <SCSI_SenseCode>:
  * @param  ASC: Additional Sense Code
  * @retval none

  */
void SCSI_SenseCode(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t sKey, uint8_t ASC)
{
 8009978:	b480      	push	{r7}
 800997a:	b085      	sub	sp, #20
 800997c:	af00      	add	r7, sp, #0
 800997e:	6078      	str	r0, [r7, #4]
 8009980:	4608      	mov	r0, r1
 8009982:	4611      	mov	r1, r2
 8009984:	461a      	mov	r2, r3
 8009986:	4603      	mov	r3, r0
 8009988:	70fb      	strb	r3, [r7, #3]
 800998a:	460b      	mov	r3, r1
 800998c:	70bb      	strb	r3, [r7, #2]
 800998e:	4613      	mov	r3, r2
 8009990:	707b      	strb	r3, [r7, #1]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	32b0      	adds	r2, #176	; 0xb0
 800999c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80099a0:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 80099a2:	68fb      	ldr	r3, [r7, #12]
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d03d      	beq.n	8009a24 <SCSI_SenseCode+0xac>
  {
    return;
  }

  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey = sKey;
 80099a8:	68fb      	ldr	r3, [r7, #12]
 80099aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80099ae:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 80099b2:	461a      	mov	r2, r3
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	f502 7202 	add.w	r2, r2, #520	; 0x208
 80099ba:	78b9      	ldrb	r1, [r7, #2]
 80099bc:	f803 1032 	strb.w	r1, [r3, r2, lsl #3]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASC = ASC;
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80099c6:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 80099ca:	68fa      	ldr	r2, [r7, #12]
 80099cc:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80099d0:	00db      	lsls	r3, r3, #3
 80099d2:	4413      	add	r3, r2
 80099d4:	787a      	ldrb	r2, [r7, #1]
 80099d6:	711a      	strb	r2, [r3, #4]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASCQ = 0U;
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80099de:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 80099e2:	68fa      	ldr	r2, [r7, #12]
 80099e4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80099e8:	00db      	lsls	r3, r3, #3
 80099ea:	4413      	add	r3, r2
 80099ec:	2200      	movs	r2, #0
 80099ee:	715a      	strb	r2, [r3, #5]
  hmsc->scsi_sense_tail++;
 80099f0:	68fb      	ldr	r3, [r7, #12]
 80099f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80099f6:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 80099fa:	3301      	adds	r3, #1
 80099fc:	b2da      	uxtb	r2, r3
 80099fe:	68fb      	ldr	r3, [r7, #12]
 8009a00:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009a04:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 8009a08:	68fb      	ldr	r3, [r7, #12]
 8009a0a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009a0e:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8009a12:	2b04      	cmp	r3, #4
 8009a14:	d107      	bne.n	8009a26 <SCSI_SenseCode+0xae>
  {
    hmsc->scsi_sense_tail = 0U;
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009a1c:	2200      	movs	r2, #0
 8009a1e:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
 8009a22:	e000      	b.n	8009a26 <SCSI_SenseCode+0xae>
    return;
 8009a24:	bf00      	nop
  }
}
 8009a26:	3714      	adds	r7, #20
 8009a28:	46bd      	mov	sp, r7
 8009a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a2e:	4770      	bx	lr

08009a30 <SCSI_StartStopUnit>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_StartStopUnit(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8009a30:	b580      	push	{r7, lr}
 8009a32:	b086      	sub	sp, #24
 8009a34:	af00      	add	r7, sp, #0
 8009a36:	60f8      	str	r0, [r7, #12]
 8009a38:	460b      	mov	r3, r1
 8009a3a:	607a      	str	r2, [r7, #4]
 8009a3c:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009a3e:	68fb      	ldr	r3, [r7, #12]
 8009a40:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009a44:	68fb      	ldr	r3, [r7, #12]
 8009a46:	32b0      	adds	r2, #176	; 0xb0
 8009a48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a4c:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8009a4e:	697b      	ldr	r3, [r7, #20]
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	d102      	bne.n	8009a5a <SCSI_StartStopUnit+0x2a>
  {
    return -1;
 8009a54:	f04f 33ff 	mov.w	r3, #4294967295
 8009a58:	e043      	b.n	8009ae2 <SCSI_StartStopUnit+0xb2>
  }

  if ((hmsc->scsi_medium_state == SCSI_MEDIUM_LOCKED) && ((params[4] & 0x3U) == 2U))
 8009a5a:	697b      	ldr	r3, [r7, #20]
 8009a5c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009a60:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8009a64:	2b01      	cmp	r3, #1
 8009a66:	d10f      	bne.n	8009a88 <SCSI_StartStopUnit+0x58>
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	3304      	adds	r3, #4
 8009a6c:	781b      	ldrb	r3, [r3, #0]
 8009a6e:	f003 0303 	and.w	r3, r3, #3
 8009a72:	2b02      	cmp	r3, #2
 8009a74:	d108      	bne.n	8009a88 <SCSI_StartStopUnit+0x58>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 8009a76:	7af9      	ldrb	r1, [r7, #11]
 8009a78:	2324      	movs	r3, #36	; 0x24
 8009a7a:	2205      	movs	r2, #5
 8009a7c:	68f8      	ldr	r0, [r7, #12]
 8009a7e:	f7ff ff7b 	bl	8009978 <SCSI_SenseCode>

    return -1;
 8009a82:	f04f 33ff 	mov.w	r3, #4294967295
 8009a86:	e02c      	b.n	8009ae2 <SCSI_StartStopUnit+0xb2>
  }

  if ((params[4] & 0x3U) == 0x1U) /* START=1 */
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	3304      	adds	r3, #4
 8009a8c:	781b      	ldrb	r3, [r3, #0]
 8009a8e:	f003 0303 	and.w	r3, r3, #3
 8009a92:	2b01      	cmp	r3, #1
 8009a94:	d106      	bne.n	8009aa4 <SCSI_StartStopUnit+0x74>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 8009a96:	697b      	ldr	r3, [r7, #20]
 8009a98:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009a9c:	2200      	movs	r2, #0
 8009a9e:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
 8009aa2:	e01a      	b.n	8009ada <SCSI_StartStopUnit+0xaa>
  }
  else if ((params[4] & 0x3U) == 0x2U) /* START=0 and LOEJ Load Eject=1 */
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	3304      	adds	r3, #4
 8009aa8:	781b      	ldrb	r3, [r3, #0]
 8009aaa:	f003 0303 	and.w	r3, r3, #3
 8009aae:	2b02      	cmp	r3, #2
 8009ab0:	d106      	bne.n	8009ac0 <SCSI_StartStopUnit+0x90>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_EJECTED;
 8009ab2:	697b      	ldr	r3, [r7, #20]
 8009ab4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009ab8:	2202      	movs	r2, #2
 8009aba:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
 8009abe:	e00c      	b.n	8009ada <SCSI_StartStopUnit+0xaa>
  }
  else if ((params[4] & 0x3U) == 0x3U) /* START=1 and LOEJ Load Eject=1 */
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	3304      	adds	r3, #4
 8009ac4:	781b      	ldrb	r3, [r3, #0]
 8009ac6:	f003 0303 	and.w	r3, r3, #3
 8009aca:	2b03      	cmp	r3, #3
 8009acc:	d105      	bne.n	8009ada <SCSI_StartStopUnit+0xaa>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 8009ace:	697b      	ldr	r3, [r7, #20]
 8009ad0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009ad4:	2200      	movs	r2, #0
 8009ad6:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
  }
  else
  {
    /* .. */
  }
  hmsc->bot_data_length = 0U;
 8009ada:	697b      	ldr	r3, [r7, #20]
 8009adc:	2200      	movs	r2, #0
 8009ade:	60da      	str	r2, [r3, #12]

  return 0;
 8009ae0:	2300      	movs	r3, #0
}
 8009ae2:	4618      	mov	r0, r3
 8009ae4:	3718      	adds	r7, #24
 8009ae6:	46bd      	mov	sp, r7
 8009ae8:	bd80      	pop	{r7, pc}

08009aea <SCSI_AllowPreventRemovable>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_AllowPreventRemovable(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8009aea:	b480      	push	{r7}
 8009aec:	b087      	sub	sp, #28
 8009aee:	af00      	add	r7, sp, #0
 8009af0:	60f8      	str	r0, [r7, #12]
 8009af2:	460b      	mov	r3, r1
 8009af4:	607a      	str	r2, [r7, #4]
 8009af6:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009af8:	68fb      	ldr	r3, [r7, #12]
 8009afa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009afe:	68fb      	ldr	r3, [r7, #12]
 8009b00:	32b0      	adds	r2, #176	; 0xb0
 8009b02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b06:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8009b08:	697b      	ldr	r3, [r7, #20]
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	d102      	bne.n	8009b14 <SCSI_AllowPreventRemovable+0x2a>
  {
    return -1;
 8009b0e:	f04f 33ff 	mov.w	r3, #4294967295
 8009b12:	e015      	b.n	8009b40 <SCSI_AllowPreventRemovable+0x56>
  }

  if (params[4] == 0U)
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	3304      	adds	r3, #4
 8009b18:	781b      	ldrb	r3, [r3, #0]
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	d106      	bne.n	8009b2c <SCSI_AllowPreventRemovable+0x42>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 8009b1e:	697b      	ldr	r3, [r7, #20]
 8009b20:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009b24:	2200      	movs	r2, #0
 8009b26:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
 8009b2a:	e005      	b.n	8009b38 <SCSI_AllowPreventRemovable+0x4e>
  }
  else
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_LOCKED;
 8009b2c:	697b      	ldr	r3, [r7, #20]
 8009b2e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009b32:	2201      	movs	r2, #1
 8009b34:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
  }

  hmsc->bot_data_length = 0U;
 8009b38:	697b      	ldr	r3, [r7, #20]
 8009b3a:	2200      	movs	r2, #0
 8009b3c:	60da      	str	r2, [r3, #12]

  return 0;
 8009b3e:	2300      	movs	r3, #0
}
 8009b40:	4618      	mov	r0, r3
 8009b42:	371c      	adds	r7, #28
 8009b44:	46bd      	mov	sp, r7
 8009b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b4a:	4770      	bx	lr

08009b4c <SCSI_Read10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Read10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8009b4c:	b580      	push	{r7, lr}
 8009b4e:	b086      	sub	sp, #24
 8009b50:	af00      	add	r7, sp, #0
 8009b52:	60f8      	str	r0, [r7, #12]
 8009b54:	460b      	mov	r3, r1
 8009b56:	607a      	str	r2, [r7, #4]
 8009b58:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009b5a:	68fb      	ldr	r3, [r7, #12]
 8009b5c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009b60:	68fb      	ldr	r3, [r7, #12]
 8009b62:	32b0      	adds	r2, #176	; 0xb0
 8009b64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b68:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8009b6a:	697b      	ldr	r3, [r7, #20]
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d102      	bne.n	8009b76 <SCSI_Read10+0x2a>
  {
    return -1;
 8009b70:	f04f 33ff 	mov.w	r3, #4294967295
 8009b74:	e09d      	b.n	8009cb2 <SCSI_Read10+0x166>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8009b76:	697b      	ldr	r3, [r7, #20]
 8009b78:	7a1b      	ldrb	r3, [r3, #8]
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	f040 808f 	bne.w	8009c9e <SCSI_Read10+0x152>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 8009b80:	697b      	ldr	r3, [r7, #20]
 8009b82:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009b86:	7f1b      	ldrb	r3, [r3, #28]
 8009b88:	b25b      	sxtb	r3, r3
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	db0b      	blt.n	8009ba6 <SCSI_Read10+0x5a>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8009b8e:	697b      	ldr	r3, [r7, #20]
 8009b90:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009b94:	7f59      	ldrb	r1, [r3, #29]
 8009b96:	2320      	movs	r3, #32
 8009b98:	2205      	movs	r2, #5
 8009b9a:	68f8      	ldr	r0, [r7, #12]
 8009b9c:	f7ff feec 	bl	8009978 <SCSI_SenseCode>
      return -1;
 8009ba0:	f04f 33ff 	mov.w	r3, #4294967295
 8009ba4:	e085      	b.n	8009cb2 <SCSI_Read10+0x166>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 8009ba6:	697b      	ldr	r3, [r7, #20]
 8009ba8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009bac:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8009bb0:	2b02      	cmp	r3, #2
 8009bb2:	d108      	bne.n	8009bc6 <SCSI_Read10+0x7a>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8009bb4:	7af9      	ldrb	r1, [r7, #11]
 8009bb6:	233a      	movs	r3, #58	; 0x3a
 8009bb8:	2202      	movs	r2, #2
 8009bba:	68f8      	ldr	r0, [r7, #12]
 8009bbc:	f7ff fedc 	bl	8009978 <SCSI_SenseCode>

      return -1;
 8009bc0:	f04f 33ff 	mov.w	r3, #4294967295
 8009bc4:	e075      	b.n	8009cb2 <SCSI_Read10+0x166>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 8009bc6:	68fb      	ldr	r3, [r7, #12]
 8009bc8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009bcc:	68fa      	ldr	r2, [r7, #12]
 8009bce:	33b0      	adds	r3, #176	; 0xb0
 8009bd0:	009b      	lsls	r3, r3, #2
 8009bd2:	4413      	add	r3, r2
 8009bd4:	685b      	ldr	r3, [r3, #4]
 8009bd6:	689b      	ldr	r3, [r3, #8]
 8009bd8:	7afa      	ldrb	r2, [r7, #11]
 8009bda:	4610      	mov	r0, r2
 8009bdc:	4798      	blx	r3
 8009bde:	4603      	mov	r3, r0
 8009be0:	2b00      	cmp	r3, #0
 8009be2:	d008      	beq.n	8009bf6 <SCSI_Read10+0xaa>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8009be4:	7af9      	ldrb	r1, [r7, #11]
 8009be6:	233a      	movs	r3, #58	; 0x3a
 8009be8:	2202      	movs	r2, #2
 8009bea:	68f8      	ldr	r0, [r7, #12]
 8009bec:	f7ff fec4 	bl	8009978 <SCSI_SenseCode>
      return -1;
 8009bf0:	f04f 33ff 	mov.w	r3, #4294967295
 8009bf4:	e05d      	b.n	8009cb2 <SCSI_Read10+0x166>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	3302      	adds	r3, #2
 8009bfa:	781b      	ldrb	r3, [r3, #0]
 8009bfc:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	3303      	adds	r3, #3
 8009c02:	781b      	ldrb	r3, [r3, #0]
 8009c04:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8009c06:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	3304      	adds	r3, #4
 8009c0c:	781b      	ldrb	r3, [r3, #0]
 8009c0e:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8009c10:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8009c12:	687a      	ldr	r2, [r7, #4]
 8009c14:	3205      	adds	r2, #5
 8009c16:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 8009c18:	4313      	orrs	r3, r2
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8009c1a:	697a      	ldr	r2, [r7, #20]
 8009c1c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8009c20:	66d3      	str	r3, [r2, #108]	; 0x6c

    hmsc->scsi_blk_len = ((uint32_t)params[7] <<  8) | (uint32_t)params[8];
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	3307      	adds	r3, #7
 8009c26:	781b      	ldrb	r3, [r3, #0]
 8009c28:	021b      	lsls	r3, r3, #8
 8009c2a:	687a      	ldr	r2, [r7, #4]
 8009c2c:	3208      	adds	r2, #8
 8009c2e:	7812      	ldrb	r2, [r2, #0]
 8009c30:	4313      	orrs	r3, r2
 8009c32:	697a      	ldr	r2, [r7, #20]
 8009c34:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8009c38:	6713      	str	r3, [r2, #112]	; 0x70

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8009c3a:	697b      	ldr	r3, [r7, #20]
 8009c3c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009c40:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8009c42:	697b      	ldr	r3, [r7, #20]
 8009c44:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009c48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c4a:	7af9      	ldrb	r1, [r7, #11]
 8009c4c:	68f8      	ldr	r0, [r7, #12]
 8009c4e:	f000 fb0c 	bl	800a26a <SCSI_CheckAddressRange>
 8009c52:	4603      	mov	r3, r0
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	da02      	bge.n	8009c5e <SCSI_Read10+0x112>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8009c58:	f04f 33ff 	mov.w	r3, #4294967295
 8009c5c:	e029      	b.n	8009cb2 <SCSI_Read10+0x166>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 8009c5e:	697b      	ldr	r3, [r7, #20]
 8009c60:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009c64:	699a      	ldr	r2, [r3, #24]
 8009c66:	697b      	ldr	r3, [r7, #20]
 8009c68:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009c6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c6e:	6979      	ldr	r1, [r7, #20]
 8009c70:	f501 5180 	add.w	r1, r1, #4096	; 0x1000
 8009c74:	f8b1 1064 	ldrh.w	r1, [r1, #100]	; 0x64
 8009c78:	fb01 f303 	mul.w	r3, r1, r3
 8009c7c:	429a      	cmp	r2, r3
 8009c7e:	d00b      	beq.n	8009c98 <SCSI_Read10+0x14c>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8009c80:	697b      	ldr	r3, [r7, #20]
 8009c82:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009c86:	7f59      	ldrb	r1, [r3, #29]
 8009c88:	2320      	movs	r3, #32
 8009c8a:	2205      	movs	r2, #5
 8009c8c:	68f8      	ldr	r0, [r7, #12]
 8009c8e:	f7ff fe73 	bl	8009978 <SCSI_SenseCode>
      return -1;
 8009c92:	f04f 33ff 	mov.w	r3, #4294967295
 8009c96:	e00c      	b.n	8009cb2 <SCSI_Read10+0x166>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 8009c98:	697b      	ldr	r3, [r7, #20]
 8009c9a:	2202      	movs	r2, #2
 8009c9c:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 8009c9e:	697b      	ldr	r3, [r7, #20]
 8009ca0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8009ca4:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 8009ca6:	7afb      	ldrb	r3, [r7, #11]
 8009ca8:	4619      	mov	r1, r3
 8009caa:	68f8      	ldr	r0, [r7, #12]
 8009cac:	f000 fb0a 	bl	800a2c4 <SCSI_ProcessRead>
 8009cb0:	4603      	mov	r3, r0
}
 8009cb2:	4618      	mov	r0, r3
 8009cb4:	3718      	adds	r7, #24
 8009cb6:	46bd      	mov	sp, r7
 8009cb8:	bd80      	pop	{r7, pc}

08009cba <SCSI_Read12>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Read12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8009cba:	b580      	push	{r7, lr}
 8009cbc:	b086      	sub	sp, #24
 8009cbe:	af00      	add	r7, sp, #0
 8009cc0:	60f8      	str	r0, [r7, #12]
 8009cc2:	460b      	mov	r3, r1
 8009cc4:	607a      	str	r2, [r7, #4]
 8009cc6:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009cc8:	68fb      	ldr	r3, [r7, #12]
 8009cca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	32b0      	adds	r2, #176	; 0xb0
 8009cd2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009cd6:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8009cd8:	697b      	ldr	r3, [r7, #20]
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	d102      	bne.n	8009ce4 <SCSI_Read12+0x2a>
  {
    return -1;
 8009cde:	f04f 33ff 	mov.w	r3, #4294967295
 8009ce2:	e0a7      	b.n	8009e34 <SCSI_Read12+0x17a>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8009ce4:	697b      	ldr	r3, [r7, #20]
 8009ce6:	7a1b      	ldrb	r3, [r3, #8]
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	f040 8099 	bne.w	8009e20 <SCSI_Read12+0x166>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 8009cee:	697b      	ldr	r3, [r7, #20]
 8009cf0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009cf4:	7f1b      	ldrb	r3, [r3, #28]
 8009cf6:	b25b      	sxtb	r3, r3
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	db0b      	blt.n	8009d14 <SCSI_Read12+0x5a>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8009cfc:	697b      	ldr	r3, [r7, #20]
 8009cfe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009d02:	7f59      	ldrb	r1, [r3, #29]
 8009d04:	2320      	movs	r3, #32
 8009d06:	2205      	movs	r2, #5
 8009d08:	68f8      	ldr	r0, [r7, #12]
 8009d0a:	f7ff fe35 	bl	8009978 <SCSI_SenseCode>
      return -1;
 8009d0e:	f04f 33ff 	mov.w	r3, #4294967295
 8009d12:	e08f      	b.n	8009e34 <SCSI_Read12+0x17a>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 8009d14:	697b      	ldr	r3, [r7, #20]
 8009d16:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009d1a:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8009d1e:	2b02      	cmp	r3, #2
 8009d20:	d108      	bne.n	8009d34 <SCSI_Read12+0x7a>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8009d22:	7af9      	ldrb	r1, [r7, #11]
 8009d24:	233a      	movs	r3, #58	; 0x3a
 8009d26:	2202      	movs	r2, #2
 8009d28:	68f8      	ldr	r0, [r7, #12]
 8009d2a:	f7ff fe25 	bl	8009978 <SCSI_SenseCode>
      return -1;
 8009d2e:	f04f 33ff 	mov.w	r3, #4294967295
 8009d32:	e07f      	b.n	8009e34 <SCSI_Read12+0x17a>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 8009d34:	68fb      	ldr	r3, [r7, #12]
 8009d36:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009d3a:	68fa      	ldr	r2, [r7, #12]
 8009d3c:	33b0      	adds	r3, #176	; 0xb0
 8009d3e:	009b      	lsls	r3, r3, #2
 8009d40:	4413      	add	r3, r2
 8009d42:	685b      	ldr	r3, [r3, #4]
 8009d44:	689b      	ldr	r3, [r3, #8]
 8009d46:	7afa      	ldrb	r2, [r7, #11]
 8009d48:	4610      	mov	r0, r2
 8009d4a:	4798      	blx	r3
 8009d4c:	4603      	mov	r3, r0
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d008      	beq.n	8009d64 <SCSI_Read12+0xaa>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8009d52:	7af9      	ldrb	r1, [r7, #11]
 8009d54:	233a      	movs	r3, #58	; 0x3a
 8009d56:	2202      	movs	r2, #2
 8009d58:	68f8      	ldr	r0, [r7, #12]
 8009d5a:	f7ff fe0d 	bl	8009978 <SCSI_SenseCode>
      return -1;
 8009d5e:	f04f 33ff 	mov.w	r3, #4294967295
 8009d62:	e067      	b.n	8009e34 <SCSI_Read12+0x17a>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	3302      	adds	r3, #2
 8009d68:	781b      	ldrb	r3, [r3, #0]
 8009d6a:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	3303      	adds	r3, #3
 8009d70:	781b      	ldrb	r3, [r3, #0]
 8009d72:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8009d74:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	3304      	adds	r3, #4
 8009d7a:	781b      	ldrb	r3, [r3, #0]
 8009d7c:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8009d7e:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8009d80:	687a      	ldr	r2, [r7, #4]
 8009d82:	3205      	adds	r2, #5
 8009d84:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 8009d86:	4313      	orrs	r3, r2
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8009d88:	697a      	ldr	r2, [r7, #20]
 8009d8a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8009d8e:	66d3      	str	r3, [r2, #108]	; 0x6c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	3306      	adds	r3, #6
 8009d94:	781b      	ldrb	r3, [r3, #0]
 8009d96:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	3307      	adds	r3, #7
 8009d9c:	781b      	ldrb	r3, [r3, #0]
 8009d9e:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8009da0:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	3308      	adds	r3, #8
 8009da6:	781b      	ldrb	r3, [r3, #0]
 8009da8:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 8009daa:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 8009dac:	687a      	ldr	r2, [r7, #4]
 8009dae:	3209      	adds	r2, #9
 8009db0:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 8009db2:	4313      	orrs	r3, r2
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8009db4:	697a      	ldr	r2, [r7, #20]
 8009db6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8009dba:	6713      	str	r3, [r2, #112]	; 0x70

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8009dbc:	697b      	ldr	r3, [r7, #20]
 8009dbe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009dc2:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8009dc4:	697b      	ldr	r3, [r7, #20]
 8009dc6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009dca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009dcc:	7af9      	ldrb	r1, [r7, #11]
 8009dce:	68f8      	ldr	r0, [r7, #12]
 8009dd0:	f000 fa4b 	bl	800a26a <SCSI_CheckAddressRange>
 8009dd4:	4603      	mov	r3, r0
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	da02      	bge.n	8009de0 <SCSI_Read12+0x126>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8009dda:	f04f 33ff 	mov.w	r3, #4294967295
 8009dde:	e029      	b.n	8009e34 <SCSI_Read12+0x17a>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 8009de0:	697b      	ldr	r3, [r7, #20]
 8009de2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009de6:	699a      	ldr	r2, [r3, #24]
 8009de8:	697b      	ldr	r3, [r7, #20]
 8009dea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009dee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009df0:	6979      	ldr	r1, [r7, #20]
 8009df2:	f501 5180 	add.w	r1, r1, #4096	; 0x1000
 8009df6:	f8b1 1064 	ldrh.w	r1, [r1, #100]	; 0x64
 8009dfa:	fb01 f303 	mul.w	r3, r1, r3
 8009dfe:	429a      	cmp	r2, r3
 8009e00:	d00b      	beq.n	8009e1a <SCSI_Read12+0x160>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8009e02:	697b      	ldr	r3, [r7, #20]
 8009e04:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009e08:	7f59      	ldrb	r1, [r3, #29]
 8009e0a:	2320      	movs	r3, #32
 8009e0c:	2205      	movs	r2, #5
 8009e0e:	68f8      	ldr	r0, [r7, #12]
 8009e10:	f7ff fdb2 	bl	8009978 <SCSI_SenseCode>
      return -1;
 8009e14:	f04f 33ff 	mov.w	r3, #4294967295
 8009e18:	e00c      	b.n	8009e34 <SCSI_Read12+0x17a>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 8009e1a:	697b      	ldr	r3, [r7, #20]
 8009e1c:	2202      	movs	r2, #2
 8009e1e:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 8009e20:	697b      	ldr	r3, [r7, #20]
 8009e22:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8009e26:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 8009e28:	7afb      	ldrb	r3, [r7, #11]
 8009e2a:	4619      	mov	r1, r3
 8009e2c:	68f8      	ldr	r0, [r7, #12]
 8009e2e:	f000 fa49 	bl	800a2c4 <SCSI_ProcessRead>
 8009e32:	4603      	mov	r3, r0
}
 8009e34:	4618      	mov	r0, r3
 8009e36:	3718      	adds	r7, #24
 8009e38:	46bd      	mov	sp, r7
 8009e3a:	bd80      	pop	{r7, pc}

08009e3c <SCSI_Write10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Write10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8009e3c:	b580      	push	{r7, lr}
 8009e3e:	b086      	sub	sp, #24
 8009e40:	af00      	add	r7, sp, #0
 8009e42:	60f8      	str	r0, [r7, #12]
 8009e44:	460b      	mov	r3, r1
 8009e46:	607a      	str	r2, [r7, #4]
 8009e48:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	32b0      	adds	r2, #176	; 0xb0
 8009e54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009e58:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc == NULL)
 8009e5a:	697b      	ldr	r3, [r7, #20]
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	d102      	bne.n	8009e66 <SCSI_Write10+0x2a>
  {
    return -1;
 8009e60:	f04f 33ff 	mov.w	r3, #4294967295
 8009e64:	e0c7      	b.n	8009ff6 <SCSI_Write10+0x1ba>
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8009e66:	697b      	ldr	r3, [r7, #20]
 8009e68:	7a1b      	ldrb	r3, [r3, #8]
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	f040 80bd 	bne.w	8009fea <SCSI_Write10+0x1ae>
  {
    if (hmsc->cbw.dDataLength == 0U)
 8009e70:	697b      	ldr	r3, [r7, #20]
 8009e72:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009e76:	699b      	ldr	r3, [r3, #24]
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	d10b      	bne.n	8009e94 <SCSI_Write10+0x58>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8009e7c:	697b      	ldr	r3, [r7, #20]
 8009e7e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009e82:	7f59      	ldrb	r1, [r3, #29]
 8009e84:	2320      	movs	r3, #32
 8009e86:	2205      	movs	r2, #5
 8009e88:	68f8      	ldr	r0, [r7, #12]
 8009e8a:	f7ff fd75 	bl	8009978 <SCSI_SenseCode>
      return -1;
 8009e8e:	f04f 33ff 	mov.w	r3, #4294967295
 8009e92:	e0b0      	b.n	8009ff6 <SCSI_Write10+0x1ba>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 8009e94:	697b      	ldr	r3, [r7, #20]
 8009e96:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009e9a:	7f1b      	ldrb	r3, [r3, #28]
 8009e9c:	b25b      	sxtb	r3, r3
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	da0b      	bge.n	8009eba <SCSI_Write10+0x7e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8009ea2:	697b      	ldr	r3, [r7, #20]
 8009ea4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009ea8:	7f59      	ldrb	r1, [r3, #29]
 8009eaa:	2320      	movs	r3, #32
 8009eac:	2205      	movs	r2, #5
 8009eae:	68f8      	ldr	r0, [r7, #12]
 8009eb0:	f7ff fd62 	bl	8009978 <SCSI_SenseCode>
      return -1;
 8009eb4:	f04f 33ff 	mov.w	r3, #4294967295
 8009eb8:	e09d      	b.n	8009ff6 <SCSI_Write10+0x1ba>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 8009eba:	68fb      	ldr	r3, [r7, #12]
 8009ebc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009ec0:	68fa      	ldr	r2, [r7, #12]
 8009ec2:	33b0      	adds	r3, #176	; 0xb0
 8009ec4:	009b      	lsls	r3, r3, #2
 8009ec6:	4413      	add	r3, r2
 8009ec8:	685b      	ldr	r3, [r3, #4]
 8009eca:	689b      	ldr	r3, [r3, #8]
 8009ecc:	7afa      	ldrb	r2, [r7, #11]
 8009ece:	4610      	mov	r0, r2
 8009ed0:	4798      	blx	r3
 8009ed2:	4603      	mov	r3, r0
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	d008      	beq.n	8009eea <SCSI_Write10+0xae>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8009ed8:	7af9      	ldrb	r1, [r7, #11]
 8009eda:	233a      	movs	r3, #58	; 0x3a
 8009edc:	2202      	movs	r2, #2
 8009ede:	68f8      	ldr	r0, [r7, #12]
 8009ee0:	f7ff fd4a 	bl	8009978 <SCSI_SenseCode>
      return -1;
 8009ee4:	f04f 33ff 	mov.w	r3, #4294967295
 8009ee8:	e085      	b.n	8009ff6 <SCSI_Write10+0x1ba>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsWriteProtected(lun) != 0)
 8009eea:	68fb      	ldr	r3, [r7, #12]
 8009eec:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009ef0:	68fa      	ldr	r2, [r7, #12]
 8009ef2:	33b0      	adds	r3, #176	; 0xb0
 8009ef4:	009b      	lsls	r3, r3, #2
 8009ef6:	4413      	add	r3, r2
 8009ef8:	685b      	ldr	r3, [r3, #4]
 8009efa:	68db      	ldr	r3, [r3, #12]
 8009efc:	7afa      	ldrb	r2, [r7, #11]
 8009efe:	4610      	mov	r0, r2
 8009f00:	4798      	blx	r3
 8009f02:	4603      	mov	r3, r0
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	d008      	beq.n	8009f1a <SCSI_Write10+0xde>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 8009f08:	7af9      	ldrb	r1, [r7, #11]
 8009f0a:	2327      	movs	r3, #39	; 0x27
 8009f0c:	2202      	movs	r2, #2
 8009f0e:	68f8      	ldr	r0, [r7, #12]
 8009f10:	f7ff fd32 	bl	8009978 <SCSI_SenseCode>
      return -1;
 8009f14:	f04f 33ff 	mov.w	r3, #4294967295
 8009f18:	e06d      	b.n	8009ff6 <SCSI_Write10+0x1ba>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	3302      	adds	r3, #2
 8009f1e:	781b      	ldrb	r3, [r3, #0]
 8009f20:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	3303      	adds	r3, #3
 8009f26:	781b      	ldrb	r3, [r3, #0]
 8009f28:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8009f2a:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	3304      	adds	r3, #4
 8009f30:	781b      	ldrb	r3, [r3, #0]
 8009f32:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8009f34:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8009f36:	687a      	ldr	r2, [r7, #4]
 8009f38:	3205      	adds	r2, #5
 8009f3a:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 8009f3c:	4313      	orrs	r3, r2
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8009f3e:	697a      	ldr	r2, [r7, #20]
 8009f40:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8009f44:	66d3      	str	r3, [r2, #108]	; 0x6c

    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	3307      	adds	r3, #7
 8009f4a:	781b      	ldrb	r3, [r3, #0]
 8009f4c:	021b      	lsls	r3, r3, #8
                         (uint32_t)params[8];
 8009f4e:	687a      	ldr	r2, [r7, #4]
 8009f50:	3208      	adds	r2, #8
 8009f52:	7812      	ldrb	r2, [r2, #0]
    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 8009f54:	4313      	orrs	r3, r2
 8009f56:	697a      	ldr	r2, [r7, #20]
 8009f58:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8009f5c:	6713      	str	r3, [r2, #112]	; 0x70

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8009f5e:	697b      	ldr	r3, [r7, #20]
 8009f60:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009f64:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8009f66:	697b      	ldr	r3, [r7, #20]
 8009f68:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009f6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009f6e:	7af9      	ldrb	r1, [r7, #11]
 8009f70:	68f8      	ldr	r0, [r7, #12]
 8009f72:	f000 f97a 	bl	800a26a <SCSI_CheckAddressRange>
 8009f76:	4603      	mov	r3, r0
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	da02      	bge.n	8009f82 <SCSI_Write10+0x146>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8009f7c:	f04f 33ff 	mov.w	r3, #4294967295
 8009f80:	e039      	b.n	8009ff6 <SCSI_Write10+0x1ba>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8009f82:	697b      	ldr	r3, [r7, #20]
 8009f84:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009f88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009f8a:	697a      	ldr	r2, [r7, #20]
 8009f8c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8009f90:	f8b2 2064 	ldrh.w	r2, [r2, #100]	; 0x64
 8009f94:	fb02 f303 	mul.w	r3, r2, r3
 8009f98:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 8009f9a:	697b      	ldr	r3, [r7, #20]
 8009f9c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009fa0:	699b      	ldr	r3, [r3, #24]
 8009fa2:	693a      	ldr	r2, [r7, #16]
 8009fa4:	429a      	cmp	r2, r3
 8009fa6:	d00b      	beq.n	8009fc0 <SCSI_Write10+0x184>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8009fa8:	697b      	ldr	r3, [r7, #20]
 8009faa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009fae:	7f59      	ldrb	r1, [r3, #29]
 8009fb0:	2320      	movs	r3, #32
 8009fb2:	2205      	movs	r2, #5
 8009fb4:	68f8      	ldr	r0, [r7, #12]
 8009fb6:	f7ff fcdf 	bl	8009978 <SCSI_SenseCode>
      return -1;
 8009fba:	f04f 33ff 	mov.w	r3, #4294967295
 8009fbe:	e01a      	b.n	8009ff6 <SCSI_Write10+0x1ba>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 8009fc0:	693b      	ldr	r3, [r7, #16]
 8009fc2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009fc6:	bf28      	it	cs
 8009fc8:	f44f 5380 	movcs.w	r3, #4096	; 0x1000
 8009fcc:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 8009fce:	697b      	ldr	r3, [r7, #20]
 8009fd0:	2201      	movs	r2, #1
 8009fd2:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
 8009fd4:	4b0a      	ldr	r3, [pc, #40]	; (800a000 <SCSI_Write10+0x1c4>)
 8009fd6:	7819      	ldrb	r1, [r3, #0]
 8009fd8:	697b      	ldr	r3, [r7, #20]
 8009fda:	f103 0210 	add.w	r2, r3, #16
 8009fde:	693b      	ldr	r3, [r7, #16]
 8009fe0:	68f8      	ldr	r0, [r7, #12]
 8009fe2:	f002 fa69 	bl	800c4b8 <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 8009fe6:	2300      	movs	r3, #0
 8009fe8:	e005      	b.n	8009ff6 <SCSI_Write10+0x1ba>
    return SCSI_ProcessWrite(pdev, lun);
 8009fea:	7afb      	ldrb	r3, [r7, #11]
 8009fec:	4619      	mov	r1, r3
 8009fee:	68f8      	ldr	r0, [r7, #12]
 8009ff0:	f000 f9fe 	bl	800a3f0 <SCSI_ProcessWrite>
 8009ff4:	4603      	mov	r3, r0
}
 8009ff6:	4618      	mov	r0, r3
 8009ff8:	3718      	adds	r7, #24
 8009ffa:	46bd      	mov	sp, r7
 8009ffc:	bd80      	pop	{r7, pc}
 8009ffe:	bf00      	nop
 800a000:	20000073 	.word	0x20000073

0800a004 <SCSI_Write12>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Write12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800a004:	b580      	push	{r7, lr}
 800a006:	b086      	sub	sp, #24
 800a008:	af00      	add	r7, sp, #0
 800a00a:	60f8      	str	r0, [r7, #12]
 800a00c:	460b      	mov	r3, r1
 800a00e:	607a      	str	r2, [r7, #4]
 800a010:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a012:	68fb      	ldr	r3, [r7, #12]
 800a014:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a018:	68fb      	ldr	r3, [r7, #12]
 800a01a:	32b0      	adds	r2, #176	; 0xb0
 800a01c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a020:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc == NULL)
 800a022:	697b      	ldr	r3, [r7, #20]
 800a024:	2b00      	cmp	r3, #0
 800a026:	d102      	bne.n	800a02e <SCSI_Write12+0x2a>
  {
    return -1;
 800a028:	f04f 33ff 	mov.w	r3, #4294967295
 800a02c:	e0d7      	b.n	800a1de <SCSI_Write12+0x1da>
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800a02e:	697b      	ldr	r3, [r7, #20]
 800a030:	7a1b      	ldrb	r3, [r3, #8]
 800a032:	2b00      	cmp	r3, #0
 800a034:	f040 80cd 	bne.w	800a1d2 <SCSI_Write12+0x1ce>
  {
    if (hmsc->cbw.dDataLength == 0U)
 800a038:	697b      	ldr	r3, [r7, #20]
 800a03a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a03e:	699b      	ldr	r3, [r3, #24]
 800a040:	2b00      	cmp	r3, #0
 800a042:	d10b      	bne.n	800a05c <SCSI_Write12+0x58>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800a044:	697b      	ldr	r3, [r7, #20]
 800a046:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a04a:	7f59      	ldrb	r1, [r3, #29]
 800a04c:	2320      	movs	r3, #32
 800a04e:	2205      	movs	r2, #5
 800a050:	68f8      	ldr	r0, [r7, #12]
 800a052:	f7ff fc91 	bl	8009978 <SCSI_SenseCode>
      return -1;
 800a056:	f04f 33ff 	mov.w	r3, #4294967295
 800a05a:	e0c0      	b.n	800a1de <SCSI_Write12+0x1da>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 800a05c:	697b      	ldr	r3, [r7, #20]
 800a05e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a062:	7f1b      	ldrb	r3, [r3, #28]
 800a064:	b25b      	sxtb	r3, r3
 800a066:	2b00      	cmp	r3, #0
 800a068:	da0b      	bge.n	800a082 <SCSI_Write12+0x7e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800a06a:	697b      	ldr	r3, [r7, #20]
 800a06c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a070:	7f59      	ldrb	r1, [r3, #29]
 800a072:	2320      	movs	r3, #32
 800a074:	2205      	movs	r2, #5
 800a076:	68f8      	ldr	r0, [r7, #12]
 800a078:	f7ff fc7e 	bl	8009978 <SCSI_SenseCode>
      return -1;
 800a07c:	f04f 33ff 	mov.w	r3, #4294967295
 800a080:	e0ad      	b.n	800a1de <SCSI_Write12+0x1da>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 800a082:	68fb      	ldr	r3, [r7, #12]
 800a084:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a088:	68fa      	ldr	r2, [r7, #12]
 800a08a:	33b0      	adds	r3, #176	; 0xb0
 800a08c:	009b      	lsls	r3, r3, #2
 800a08e:	4413      	add	r3, r2
 800a090:	685b      	ldr	r3, [r3, #4]
 800a092:	689b      	ldr	r3, [r3, #8]
 800a094:	7afa      	ldrb	r2, [r7, #11]
 800a096:	4610      	mov	r0, r2
 800a098:	4798      	blx	r3
 800a09a:	4603      	mov	r3, r0
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	d00b      	beq.n	800a0b8 <SCSI_Write12+0xb4>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800a0a0:	7af9      	ldrb	r1, [r7, #11]
 800a0a2:	233a      	movs	r3, #58	; 0x3a
 800a0a4:	2202      	movs	r2, #2
 800a0a6:	68f8      	ldr	r0, [r7, #12]
 800a0a8:	f7ff fc66 	bl	8009978 <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 800a0ac:	697b      	ldr	r3, [r7, #20]
 800a0ae:	2205      	movs	r2, #5
 800a0b0:	721a      	strb	r2, [r3, #8]
      return -1;
 800a0b2:	f04f 33ff 	mov.w	r3, #4294967295
 800a0b6:	e092      	b.n	800a1de <SCSI_Write12+0x1da>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsWriteProtected(lun) != 0)
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a0be:	68fa      	ldr	r2, [r7, #12]
 800a0c0:	33b0      	adds	r3, #176	; 0xb0
 800a0c2:	009b      	lsls	r3, r3, #2
 800a0c4:	4413      	add	r3, r2
 800a0c6:	685b      	ldr	r3, [r3, #4]
 800a0c8:	68db      	ldr	r3, [r3, #12]
 800a0ca:	7afa      	ldrb	r2, [r7, #11]
 800a0cc:	4610      	mov	r0, r2
 800a0ce:	4798      	blx	r3
 800a0d0:	4603      	mov	r3, r0
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	d00b      	beq.n	800a0ee <SCSI_Write12+0xea>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 800a0d6:	7af9      	ldrb	r1, [r7, #11]
 800a0d8:	2327      	movs	r3, #39	; 0x27
 800a0da:	2202      	movs	r2, #2
 800a0dc:	68f8      	ldr	r0, [r7, #12]
 800a0de:	f7ff fc4b 	bl	8009978 <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 800a0e2:	697b      	ldr	r3, [r7, #20]
 800a0e4:	2205      	movs	r2, #5
 800a0e6:	721a      	strb	r2, [r3, #8]
      return -1;
 800a0e8:	f04f 33ff 	mov.w	r3, #4294967295
 800a0ec:	e077      	b.n	800a1de <SCSI_Write12+0x1da>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	3302      	adds	r3, #2
 800a0f2:	781b      	ldrb	r3, [r3, #0]
 800a0f4:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	3303      	adds	r3, #3
 800a0fa:	781b      	ldrb	r3, [r3, #0]
 800a0fc:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800a0fe:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	3304      	adds	r3, #4
 800a104:	781b      	ldrb	r3, [r3, #0]
 800a106:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800a108:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 800a10a:	687a      	ldr	r2, [r7, #4]
 800a10c:	3205      	adds	r2, #5
 800a10e:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 800a110:	4313      	orrs	r3, r2
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800a112:	697a      	ldr	r2, [r7, #20]
 800a114:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a118:	66d3      	str	r3, [r2, #108]	; 0x6c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	3306      	adds	r3, #6
 800a11e:	781b      	ldrb	r3, [r3, #0]
 800a120:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	3307      	adds	r3, #7
 800a126:	781b      	ldrb	r3, [r3, #0]
 800a128:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800a12a:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	3308      	adds	r3, #8
 800a130:	781b      	ldrb	r3, [r3, #0]
 800a132:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 800a134:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 800a136:	687a      	ldr	r2, [r7, #4]
 800a138:	3209      	adds	r2, #9
 800a13a:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 800a13c:	4313      	orrs	r3, r2
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800a13e:	697a      	ldr	r2, [r7, #20]
 800a140:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a144:	6713      	str	r3, [r2, #112]	; 0x70

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800a146:	697b      	ldr	r3, [r7, #20]
 800a148:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a14c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800a14e:	697b      	ldr	r3, [r7, #20]
 800a150:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a154:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a156:	7af9      	ldrb	r1, [r7, #11]
 800a158:	68f8      	ldr	r0, [r7, #12]
 800a15a:	f000 f886 	bl	800a26a <SCSI_CheckAddressRange>
 800a15e:	4603      	mov	r3, r0
 800a160:	2b00      	cmp	r3, #0
 800a162:	da02      	bge.n	800a16a <SCSI_Write12+0x166>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800a164:	f04f 33ff 	mov.w	r3, #4294967295
 800a168:	e039      	b.n	800a1de <SCSI_Write12+0x1da>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800a16a:	697b      	ldr	r3, [r7, #20]
 800a16c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a170:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a172:	697a      	ldr	r2, [r7, #20]
 800a174:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a178:	f8b2 2064 	ldrh.w	r2, [r2, #100]	; 0x64
 800a17c:	fb02 f303 	mul.w	r3, r2, r3
 800a180:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 800a182:	697b      	ldr	r3, [r7, #20]
 800a184:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a188:	699b      	ldr	r3, [r3, #24]
 800a18a:	693a      	ldr	r2, [r7, #16]
 800a18c:	429a      	cmp	r2, r3
 800a18e:	d00b      	beq.n	800a1a8 <SCSI_Write12+0x1a4>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800a190:	697b      	ldr	r3, [r7, #20]
 800a192:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a196:	7f59      	ldrb	r1, [r3, #29]
 800a198:	2320      	movs	r3, #32
 800a19a:	2205      	movs	r2, #5
 800a19c:	68f8      	ldr	r0, [r7, #12]
 800a19e:	f7ff fbeb 	bl	8009978 <SCSI_SenseCode>
      return -1;
 800a1a2:	f04f 33ff 	mov.w	r3, #4294967295
 800a1a6:	e01a      	b.n	800a1de <SCSI_Write12+0x1da>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 800a1a8:	693b      	ldr	r3, [r7, #16]
 800a1aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a1ae:	bf28      	it	cs
 800a1b0:	f44f 5380 	movcs.w	r3, #4096	; 0x1000
 800a1b4:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 800a1b6:	697b      	ldr	r3, [r7, #20]
 800a1b8:	2201      	movs	r2, #1
 800a1ba:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
 800a1bc:	4b0a      	ldr	r3, [pc, #40]	; (800a1e8 <SCSI_Write12+0x1e4>)
 800a1be:	7819      	ldrb	r1, [r3, #0]
 800a1c0:	697b      	ldr	r3, [r7, #20]
 800a1c2:	f103 0210 	add.w	r2, r3, #16
 800a1c6:	693b      	ldr	r3, [r7, #16]
 800a1c8:	68f8      	ldr	r0, [r7, #12]
 800a1ca:	f002 f975 	bl	800c4b8 <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 800a1ce:	2300      	movs	r3, #0
 800a1d0:	e005      	b.n	800a1de <SCSI_Write12+0x1da>
    return SCSI_ProcessWrite(pdev, lun);
 800a1d2:	7afb      	ldrb	r3, [r7, #11]
 800a1d4:	4619      	mov	r1, r3
 800a1d6:	68f8      	ldr	r0, [r7, #12]
 800a1d8:	f000 f90a 	bl	800a3f0 <SCSI_ProcessWrite>
 800a1dc:	4603      	mov	r3, r0
}
 800a1de:	4618      	mov	r0, r3
 800a1e0:	3718      	adds	r7, #24
 800a1e2:	46bd      	mov	sp, r7
 800a1e4:	bd80      	pop	{r7, pc}
 800a1e6:	bf00      	nop
 800a1e8:	20000073 	.word	0x20000073

0800a1ec <SCSI_Verify10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Verify10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800a1ec:	b580      	push	{r7, lr}
 800a1ee:	b086      	sub	sp, #24
 800a1f0:	af00      	add	r7, sp, #0
 800a1f2:	60f8      	str	r0, [r7, #12]
 800a1f4:	460b      	mov	r3, r1
 800a1f6:	607a      	str	r2, [r7, #4]
 800a1f8:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a1fa:	68fb      	ldr	r3, [r7, #12]
 800a1fc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a200:	68fb      	ldr	r3, [r7, #12]
 800a202:	32b0      	adds	r2, #176	; 0xb0
 800a204:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a208:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800a20a:	697b      	ldr	r3, [r7, #20]
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	d102      	bne.n	800a216 <SCSI_Verify10+0x2a>
  {
    return -1;
 800a210:	f04f 33ff 	mov.w	r3, #4294967295
 800a214:	e025      	b.n	800a262 <SCSI_Verify10+0x76>
  }

  if ((params[1] & 0x02U) == 0x02U)
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	3301      	adds	r3, #1
 800a21a:	781b      	ldrb	r3, [r3, #0]
 800a21c:	f003 0302 	and.w	r3, r3, #2
 800a220:	2b00      	cmp	r3, #0
 800a222:	d008      	beq.n	800a236 <SCSI_Verify10+0x4a>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 800a224:	7af9      	ldrb	r1, [r7, #11]
 800a226:	2324      	movs	r3, #36	; 0x24
 800a228:	2205      	movs	r2, #5
 800a22a:	68f8      	ldr	r0, [r7, #12]
 800a22c:	f7ff fba4 	bl	8009978 <SCSI_SenseCode>
    return -1; /* Error, Verify Mode Not supported*/
 800a230:	f04f 33ff 	mov.w	r3, #4294967295
 800a234:	e015      	b.n	800a262 <SCSI_Verify10+0x76>
  }

  if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr, hmsc->scsi_blk_len) < 0)
 800a236:	697b      	ldr	r3, [r7, #20]
 800a238:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a23c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800a23e:	697b      	ldr	r3, [r7, #20]
 800a240:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a244:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a246:	7af9      	ldrb	r1, [r7, #11]
 800a248:	68f8      	ldr	r0, [r7, #12]
 800a24a:	f000 f80e 	bl	800a26a <SCSI_CheckAddressRange>
 800a24e:	4603      	mov	r3, r0
 800a250:	2b00      	cmp	r3, #0
 800a252:	da02      	bge.n	800a25a <SCSI_Verify10+0x6e>
  {
    return -1; /* error */
 800a254:	f04f 33ff 	mov.w	r3, #4294967295
 800a258:	e003      	b.n	800a262 <SCSI_Verify10+0x76>
  }

  hmsc->bot_data_length = 0U;
 800a25a:	697b      	ldr	r3, [r7, #20]
 800a25c:	2200      	movs	r2, #0
 800a25e:	60da      	str	r2, [r3, #12]

  return 0;
 800a260:	2300      	movs	r3, #0
}
 800a262:	4618      	mov	r0, r3
 800a264:	3718      	adds	r7, #24
 800a266:	46bd      	mov	sp, r7
 800a268:	bd80      	pop	{r7, pc}

0800a26a <SCSI_CheckAddressRange>:
  * @param  blk_nbr: number of block to be processed
  * @retval status
  */
static int8_t SCSI_CheckAddressRange(USBD_HandleTypeDef *pdev, uint8_t lun,
                                     uint32_t blk_offset, uint32_t blk_nbr)
{
 800a26a:	b580      	push	{r7, lr}
 800a26c:	b086      	sub	sp, #24
 800a26e:	af00      	add	r7, sp, #0
 800a270:	60f8      	str	r0, [r7, #12]
 800a272:	607a      	str	r2, [r7, #4]
 800a274:	603b      	str	r3, [r7, #0]
 800a276:	460b      	mov	r3, r1
 800a278:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a27a:	68fb      	ldr	r3, [r7, #12]
 800a27c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a280:	68fb      	ldr	r3, [r7, #12]
 800a282:	32b0      	adds	r2, #176	; 0xb0
 800a284:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a288:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800a28a:	697b      	ldr	r3, [r7, #20]
 800a28c:	2b00      	cmp	r3, #0
 800a28e:	d102      	bne.n	800a296 <SCSI_CheckAddressRange+0x2c>
  {
    return -1;
 800a290:	f04f 33ff 	mov.w	r3, #4294967295
 800a294:	e012      	b.n	800a2bc <SCSI_CheckAddressRange+0x52>
  }

  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr)
 800a296:	687a      	ldr	r2, [r7, #4]
 800a298:	683b      	ldr	r3, [r7, #0]
 800a29a:	441a      	add	r2, r3
 800a29c:	697b      	ldr	r3, [r7, #20]
 800a29e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a2a2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a2a4:	429a      	cmp	r2, r3
 800a2a6:	d908      	bls.n	800a2ba <SCSI_CheckAddressRange+0x50>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, ADDRESS_OUT_OF_RANGE);
 800a2a8:	7af9      	ldrb	r1, [r7, #11]
 800a2aa:	2321      	movs	r3, #33	; 0x21
 800a2ac:	2205      	movs	r2, #5
 800a2ae:	68f8      	ldr	r0, [r7, #12]
 800a2b0:	f7ff fb62 	bl	8009978 <SCSI_SenseCode>
    return -1;
 800a2b4:	f04f 33ff 	mov.w	r3, #4294967295
 800a2b8:	e000      	b.n	800a2bc <SCSI_CheckAddressRange+0x52>
  }

  return 0;
 800a2ba:	2300      	movs	r3, #0
}
 800a2bc:	4618      	mov	r0, r3
 800a2be:	3718      	adds	r7, #24
 800a2c0:	46bd      	mov	sp, r7
 800a2c2:	bd80      	pop	{r7, pc}

0800a2c4 <SCSI_ProcessRead>:
  *         Handle Read Process
  * @param  lun: Logical unit number
  * @retval status
  */
static int8_t SCSI_ProcessRead(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 800a2c4:	b590      	push	{r4, r7, lr}
 800a2c6:	b085      	sub	sp, #20
 800a2c8:	af00      	add	r7, sp, #0
 800a2ca:	6078      	str	r0, [r7, #4]
 800a2cc:	460b      	mov	r3, r1
 800a2ce:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	32b0      	adds	r2, #176	; 0xb0
 800a2da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a2de:	60fb      	str	r3, [r7, #12]
  uint32_t len;

  if (hmsc == NULL)
 800a2e0:	68fb      	ldr	r3, [r7, #12]
 800a2e2:	2b00      	cmp	r3, #0
 800a2e4:	d102      	bne.n	800a2ec <SCSI_ProcessRead+0x28>
  {
    return -1;
 800a2e6:	f04f 33ff 	mov.w	r3, #4294967295
 800a2ea:	e07b      	b.n	800a3e4 <SCSI_ProcessRead+0x120>
  }

  len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800a2ec:	68fb      	ldr	r3, [r7, #12]
 800a2ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a2f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a2f4:	68fa      	ldr	r2, [r7, #12]
 800a2f6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a2fa:	f8b2 2064 	ldrh.w	r2, [r2, #100]	; 0x64
 800a2fe:	fb02 f303 	mul.w	r3, r2, r3
 800a302:	60bb      	str	r3, [r7, #8]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  len = MIN(len, MSC_MEDIA_PACKET);
 800a304:	68bb      	ldr	r3, [r7, #8]
 800a306:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a30a:	bf28      	it	cs
 800a30c:	f44f 5380 	movcs.w	r3, #4096	; 0x1000
 800a310:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Read(lun, hmsc->bot_data,
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a318:	687a      	ldr	r2, [r7, #4]
 800a31a:	33b0      	adds	r3, #176	; 0xb0
 800a31c:	009b      	lsls	r3, r3, #2
 800a31e:	4413      	add	r3, r2
 800a320:	685b      	ldr	r3, [r3, #4]
 800a322:	691c      	ldr	r4, [r3, #16]
 800a324:	68fb      	ldr	r3, [r7, #12]
 800a326:	f103 0110 	add.w	r1, r3, #16
 800a32a:	68fb      	ldr	r3, [r7, #12]
 800a32c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a330:	6eda      	ldr	r2, [r3, #108]	; 0x6c
                                                                    hmsc->scsi_blk_addr,
                                                                    (len / hmsc->scsi_blk_size)) < 0)
 800a332:	68fb      	ldr	r3, [r7, #12]
 800a334:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a338:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800a33c:	4618      	mov	r0, r3
 800a33e:	68bb      	ldr	r3, [r7, #8]
 800a340:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Read(lun, hmsc->bot_data,
 800a344:	b29b      	uxth	r3, r3
 800a346:	78f8      	ldrb	r0, [r7, #3]
 800a348:	47a0      	blx	r4
 800a34a:	4603      	mov	r3, r0
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	da08      	bge.n	800a362 <SCSI_ProcessRead+0x9e>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, UNRECOVERED_READ_ERROR);
 800a350:	78f9      	ldrb	r1, [r7, #3]
 800a352:	2311      	movs	r3, #17
 800a354:	2204      	movs	r2, #4
 800a356:	6878      	ldr	r0, [r7, #4]
 800a358:	f7ff fb0e 	bl	8009978 <SCSI_SenseCode>
    return -1;
 800a35c:	f04f 33ff 	mov.w	r3, #4294967295
 800a360:	e040      	b.n	800a3e4 <SCSI_ProcessRead+0x120>
  }

  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, hmsc->bot_data, len);
 800a362:	4b22      	ldr	r3, [pc, #136]	; (800a3ec <SCSI_ProcessRead+0x128>)
 800a364:	7819      	ldrb	r1, [r3, #0]
 800a366:	68fb      	ldr	r3, [r7, #12]
 800a368:	f103 0210 	add.w	r2, r3, #16
 800a36c:	68bb      	ldr	r3, [r7, #8]
 800a36e:	6878      	ldr	r0, [r7, #4]
 800a370:	f002 f881 	bl	800c476 <USBD_LL_Transmit>

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 800a374:	68fb      	ldr	r3, [r7, #12]
 800a376:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a37a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800a37c:	68fb      	ldr	r3, [r7, #12]
 800a37e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a382:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800a386:	4619      	mov	r1, r3
 800a388:	68bb      	ldr	r3, [r7, #8]
 800a38a:	fbb3 f3f1 	udiv	r3, r3, r1
 800a38e:	4413      	add	r3, r2
 800a390:	68fa      	ldr	r2, [r7, #12]
 800a392:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a396:	66d3      	str	r3, [r2, #108]	; 0x6c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 800a398:	68fb      	ldr	r3, [r7, #12]
 800a39a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a39e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800a3a0:	68fb      	ldr	r3, [r7, #12]
 800a3a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a3a6:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800a3aa:	4619      	mov	r1, r3
 800a3ac:	68bb      	ldr	r3, [r7, #8]
 800a3ae:	fbb3 f3f1 	udiv	r3, r3, r1
 800a3b2:	1ad3      	subs	r3, r2, r3
 800a3b4:	68fa      	ldr	r2, [r7, #12]
 800a3b6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a3ba:	6713      	str	r3, [r2, #112]	; 0x70

  /* case 6 : Hi = Di */
  hmsc->csw.dDataResidue -= len;
 800a3bc:	68fb      	ldr	r3, [r7, #12]
 800a3be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a3c2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a3c4:	68bb      	ldr	r3, [r7, #8]
 800a3c6:	1ad3      	subs	r3, r2, r3
 800a3c8:	68fa      	ldr	r2, [r7, #12]
 800a3ca:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a3ce:	6393      	str	r3, [r2, #56]	; 0x38

  if (hmsc->scsi_blk_len == 0U)
 800a3d0:	68fb      	ldr	r3, [r7, #12]
 800a3d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a3d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	d102      	bne.n	800a3e2 <SCSI_ProcessRead+0x11e>
  {
    hmsc->bot_state = USBD_BOT_LAST_DATA_IN;
 800a3dc:	68fb      	ldr	r3, [r7, #12]
 800a3de:	2203      	movs	r2, #3
 800a3e0:	721a      	strb	r2, [r3, #8]
  }

  return 0;
 800a3e2:	2300      	movs	r3, #0
}
 800a3e4:	4618      	mov	r0, r3
 800a3e6:	3714      	adds	r7, #20
 800a3e8:	46bd      	mov	sp, r7
 800a3ea:	bd90      	pop	{r4, r7, pc}
 800a3ec:	20000072 	.word	0x20000072

0800a3f0 <SCSI_ProcessWrite>:
  *         Handle Write Process
  * @param  lun: Logical unit number
  * @retval status
  */
static int8_t SCSI_ProcessWrite(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 800a3f0:	b590      	push	{r4, r7, lr}
 800a3f2:	b085      	sub	sp, #20
 800a3f4:	af00      	add	r7, sp, #0
 800a3f6:	6078      	str	r0, [r7, #4]
 800a3f8:	460b      	mov	r3, r1
 800a3fa:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	32b0      	adds	r2, #176	; 0xb0
 800a406:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a40a:	60fb      	str	r3, [r7, #12]
  uint32_t len;

  if (hmsc == NULL)
 800a40c:	68fb      	ldr	r3, [r7, #12]
 800a40e:	2b00      	cmp	r3, #0
 800a410:	d102      	bne.n	800a418 <SCSI_ProcessWrite+0x28>
  {
    return -1;
 800a412:	f04f 33ff 	mov.w	r3, #4294967295
 800a416:	e08e      	b.n	800a536 <SCSI_ProcessWrite+0x146>
  }

  len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800a418:	68fb      	ldr	r3, [r7, #12]
 800a41a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a41e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a420:	68fa      	ldr	r2, [r7, #12]
 800a422:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a426:	f8b2 2064 	ldrh.w	r2, [r2, #100]	; 0x64
 800a42a:	fb02 f303 	mul.w	r3, r2, r3
 800a42e:	60bb      	str	r3, [r7, #8]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  len = MIN(len, MSC_MEDIA_PACKET);
 800a430:	68bb      	ldr	r3, [r7, #8]
 800a432:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a436:	bf28      	it	cs
 800a438:	f44f 5380 	movcs.w	r3, #4096	; 0x1000
 800a43c:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Write(lun, hmsc->bot_data,
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a444:	687a      	ldr	r2, [r7, #4]
 800a446:	33b0      	adds	r3, #176	; 0xb0
 800a448:	009b      	lsls	r3, r3, #2
 800a44a:	4413      	add	r3, r2
 800a44c:	685b      	ldr	r3, [r3, #4]
 800a44e:	695c      	ldr	r4, [r3, #20]
 800a450:	68fb      	ldr	r3, [r7, #12]
 800a452:	f103 0110 	add.w	r1, r3, #16
 800a456:	68fb      	ldr	r3, [r7, #12]
 800a458:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a45c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
                                                                     hmsc->scsi_blk_addr,
                                                                     (len / hmsc->scsi_blk_size)) < 0)
 800a45e:	68fb      	ldr	r3, [r7, #12]
 800a460:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a464:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800a468:	4618      	mov	r0, r3
 800a46a:	68bb      	ldr	r3, [r7, #8]
 800a46c:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Write(lun, hmsc->bot_data,
 800a470:	b29b      	uxth	r3, r3
 800a472:	78f8      	ldrb	r0, [r7, #3]
 800a474:	47a0      	blx	r4
 800a476:	4603      	mov	r3, r0
 800a478:	2b00      	cmp	r3, #0
 800a47a:	da08      	bge.n	800a48e <SCSI_ProcessWrite+0x9e>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, WRITE_FAULT);
 800a47c:	78f9      	ldrb	r1, [r7, #3]
 800a47e:	2303      	movs	r3, #3
 800a480:	2204      	movs	r2, #4
 800a482:	6878      	ldr	r0, [r7, #4]
 800a484:	f7ff fa78 	bl	8009978 <SCSI_SenseCode>
    return -1;
 800a488:	f04f 33ff 	mov.w	r3, #4294967295
 800a48c:	e053      	b.n	800a536 <SCSI_ProcessWrite+0x146>
  }

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 800a48e:	68fb      	ldr	r3, [r7, #12]
 800a490:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a494:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800a496:	68fb      	ldr	r3, [r7, #12]
 800a498:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a49c:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800a4a0:	4619      	mov	r1, r3
 800a4a2:	68bb      	ldr	r3, [r7, #8]
 800a4a4:	fbb3 f3f1 	udiv	r3, r3, r1
 800a4a8:	4413      	add	r3, r2
 800a4aa:	68fa      	ldr	r2, [r7, #12]
 800a4ac:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a4b0:	66d3      	str	r3, [r2, #108]	; 0x6c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 800a4b2:	68fb      	ldr	r3, [r7, #12]
 800a4b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a4b8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800a4ba:	68fb      	ldr	r3, [r7, #12]
 800a4bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a4c0:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800a4c4:	4619      	mov	r1, r3
 800a4c6:	68bb      	ldr	r3, [r7, #8]
 800a4c8:	fbb3 f3f1 	udiv	r3, r3, r1
 800a4cc:	1ad3      	subs	r3, r2, r3
 800a4ce:	68fa      	ldr	r2, [r7, #12]
 800a4d0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a4d4:	6713      	str	r3, [r2, #112]	; 0x70

  /* case 12 : Ho = Do */
  hmsc->csw.dDataResidue -= len;
 800a4d6:	68fb      	ldr	r3, [r7, #12]
 800a4d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a4dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a4de:	68bb      	ldr	r3, [r7, #8]
 800a4e0:	1ad3      	subs	r3, r2, r3
 800a4e2:	68fa      	ldr	r2, [r7, #12]
 800a4e4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a4e8:	6393      	str	r3, [r2, #56]	; 0x38

  if (hmsc->scsi_blk_len == 0U)
 800a4ea:	68fb      	ldr	r3, [r7, #12]
 800a4ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a4f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	d104      	bne.n	800a500 <SCSI_ProcessWrite+0x110>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 800a4f6:	2100      	movs	r1, #0
 800a4f8:	6878      	ldr	r0, [r7, #4]
 800a4fa:	f7fe fc55 	bl	8008da8 <MSC_BOT_SendCSW>
 800a4fe:	e019      	b.n	800a534 <SCSI_ProcessWrite+0x144>
  }
  else
  {
    len = MIN((hmsc->scsi_blk_len * hmsc->scsi_blk_size), MSC_MEDIA_PACKET);
 800a500:	68fb      	ldr	r3, [r7, #12]
 800a502:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a506:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a508:	68fa      	ldr	r2, [r7, #12]
 800a50a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a50e:	f8b2 2064 	ldrh.w	r2, [r2, #100]	; 0x64
 800a512:	fb02 f303 	mul.w	r3, r2, r3
 800a516:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a51a:	bf28      	it	cs
 800a51c:	f44f 5380 	movcs.w	r3, #4096	; 0x1000
 800a520:	60bb      	str	r3, [r7, #8]

    /* Prepare EP to Receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
 800a522:	4b07      	ldr	r3, [pc, #28]	; (800a540 <SCSI_ProcessWrite+0x150>)
 800a524:	7819      	ldrb	r1, [r3, #0]
 800a526:	68fb      	ldr	r3, [r7, #12]
 800a528:	f103 0210 	add.w	r2, r3, #16
 800a52c:	68bb      	ldr	r3, [r7, #8]
 800a52e:	6878      	ldr	r0, [r7, #4]
 800a530:	f001 ffc2 	bl	800c4b8 <USBD_LL_PrepareReceive>
  }

  return 0;
 800a534:	2300      	movs	r3, #0
}
 800a536:	4618      	mov	r0, r3
 800a538:	3714      	adds	r7, #20
 800a53a:	46bd      	mov	sp, r7
 800a53c:	bd90      	pop	{r4, r7, pc}
 800a53e:	bf00      	nop
 800a540:	20000073 	.word	0x20000073

0800a544 <SCSI_UpdateBotData>:
  * @param  length: Data length
  * @retval status
  */
static int8_t SCSI_UpdateBotData(USBD_MSC_BOT_HandleTypeDef *hmsc,
                                 uint8_t *pBuff, uint16_t length)
{
 800a544:	b480      	push	{r7}
 800a546:	b087      	sub	sp, #28
 800a548:	af00      	add	r7, sp, #0
 800a54a:	60f8      	str	r0, [r7, #12]
 800a54c:	60b9      	str	r1, [r7, #8]
 800a54e:	4613      	mov	r3, r2
 800a550:	80fb      	strh	r3, [r7, #6]
  uint16_t len = length;
 800a552:	88fb      	ldrh	r3, [r7, #6]
 800a554:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 800a556:	68fb      	ldr	r3, [r7, #12]
 800a558:	2b00      	cmp	r3, #0
 800a55a:	d102      	bne.n	800a562 <SCSI_UpdateBotData+0x1e>
  {
    return -1;
 800a55c:	f04f 33ff 	mov.w	r3, #4294967295
 800a560:	e013      	b.n	800a58a <SCSI_UpdateBotData+0x46>
  }

  hmsc->bot_data_length = len;
 800a562:	8afa      	ldrh	r2, [r7, #22]
 800a564:	68fb      	ldr	r3, [r7, #12]
 800a566:	60da      	str	r2, [r3, #12]

  while (len != 0U)
 800a568:	e00b      	b.n	800a582 <SCSI_UpdateBotData+0x3e>
  {
    len--;
 800a56a:	8afb      	ldrh	r3, [r7, #22]
 800a56c:	3b01      	subs	r3, #1
 800a56e:	82fb      	strh	r3, [r7, #22]
    hmsc->bot_data[len] = pBuff[len];
 800a570:	8afb      	ldrh	r3, [r7, #22]
 800a572:	68ba      	ldr	r2, [r7, #8]
 800a574:	441a      	add	r2, r3
 800a576:	8afb      	ldrh	r3, [r7, #22]
 800a578:	7811      	ldrb	r1, [r2, #0]
 800a57a:	68fa      	ldr	r2, [r7, #12]
 800a57c:	4413      	add	r3, r2
 800a57e:	460a      	mov	r2, r1
 800a580:	741a      	strb	r2, [r3, #16]
  while (len != 0U)
 800a582:	8afb      	ldrh	r3, [r7, #22]
 800a584:	2b00      	cmp	r3, #0
 800a586:	d1f0      	bne.n	800a56a <SCSI_UpdateBotData+0x26>
  }

  return 0;
 800a588:	2300      	movs	r3, #0
}
 800a58a:	4618      	mov	r0, r3
 800a58c:	371c      	adds	r7, #28
 800a58e:	46bd      	mov	sp, r7
 800a590:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a594:	4770      	bx	lr

0800a596 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800a596:	b580      	push	{r7, lr}
 800a598:	b086      	sub	sp, #24
 800a59a:	af00      	add	r7, sp, #0
 800a59c:	60f8      	str	r0, [r7, #12]
 800a59e:	60b9      	str	r1, [r7, #8]
 800a5a0:	4613      	mov	r3, r2
 800a5a2:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800a5a4:	68fb      	ldr	r3, [r7, #12]
 800a5a6:	2b00      	cmp	r3, #0
 800a5a8:	d101      	bne.n	800a5ae <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800a5aa:	2303      	movs	r3, #3
 800a5ac:	e01f      	b.n	800a5ee <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800a5ae:	68fb      	ldr	r3, [r7, #12]
 800a5b0:	2200      	movs	r2, #0
 800a5b2:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800a5b6:	68fb      	ldr	r3, [r7, #12]
 800a5b8:	2200      	movs	r2, #0
 800a5ba:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800a5be:	68fb      	ldr	r3, [r7, #12]
 800a5c0:	2200      	movs	r2, #0
 800a5c2:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800a5c6:	68bb      	ldr	r3, [r7, #8]
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	d003      	beq.n	800a5d4 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800a5cc:	68fb      	ldr	r3, [r7, #12]
 800a5ce:	68ba      	ldr	r2, [r7, #8]
 800a5d0:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a5d4:	68fb      	ldr	r3, [r7, #12]
 800a5d6:	2201      	movs	r2, #1
 800a5d8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800a5dc:	68fb      	ldr	r3, [r7, #12]
 800a5de:	79fa      	ldrb	r2, [r7, #7]
 800a5e0:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800a5e2:	68f8      	ldr	r0, [r7, #12]
 800a5e4:	f001 fdd8 	bl	800c198 <USBD_LL_Init>
 800a5e8:	4603      	mov	r3, r0
 800a5ea:	75fb      	strb	r3, [r7, #23]

  return ret;
 800a5ec:	7dfb      	ldrb	r3, [r7, #23]
}
 800a5ee:	4618      	mov	r0, r3
 800a5f0:	3718      	adds	r7, #24
 800a5f2:	46bd      	mov	sp, r7
 800a5f4:	bd80      	pop	{r7, pc}

0800a5f6 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800a5f6:	b580      	push	{r7, lr}
 800a5f8:	b084      	sub	sp, #16
 800a5fa:	af00      	add	r7, sp, #0
 800a5fc:	6078      	str	r0, [r7, #4]
 800a5fe:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a600:	2300      	movs	r3, #0
 800a602:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800a604:	683b      	ldr	r3, [r7, #0]
 800a606:	2b00      	cmp	r3, #0
 800a608:	d101      	bne.n	800a60e <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800a60a:	2303      	movs	r3, #3
 800a60c:	e025      	b.n	800a65a <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	683a      	ldr	r2, [r7, #0]
 800a612:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	32ae      	adds	r2, #174	; 0xae
 800a620:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a624:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a626:	2b00      	cmp	r3, #0
 800a628:	d00f      	beq.n	800a64a <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	32ae      	adds	r2, #174	; 0xae
 800a634:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a638:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a63a:	f107 020e 	add.w	r2, r7, #14
 800a63e:	4610      	mov	r0, r2
 800a640:	4798      	blx	r3
 800a642:	4602      	mov	r2, r0
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800a650:	1c5a      	adds	r2, r3, #1
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800a658:	2300      	movs	r3, #0
}
 800a65a:	4618      	mov	r0, r3
 800a65c:	3710      	adds	r7, #16
 800a65e:	46bd      	mov	sp, r7
 800a660:	bd80      	pop	{r7, pc}

0800a662 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800a662:	b580      	push	{r7, lr}
 800a664:	b082      	sub	sp, #8
 800a666:	af00      	add	r7, sp, #0
 800a668:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800a66a:	6878      	ldr	r0, [r7, #4]
 800a66c:	f001 fde0 	bl	800c230 <USBD_LL_Start>
 800a670:	4603      	mov	r3, r0
}
 800a672:	4618      	mov	r0, r3
 800a674:	3708      	adds	r7, #8
 800a676:	46bd      	mov	sp, r7
 800a678:	bd80      	pop	{r7, pc}

0800a67a <USBD_Stop>:
  *         Stop the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Stop(USBD_HandleTypeDef *pdev)
{
 800a67a:	b580      	push	{r7, lr}
 800a67c:	b082      	sub	sp, #8
 800a67e:	af00      	add	r7, sp, #0
 800a680:	6078      	str	r0, [r7, #4]
  /* Disconnect USB Device */
  (void)USBD_LL_Stop(pdev);
 800a682:	6878      	ldr	r0, [r7, #4]
 800a684:	f001 fdef 	bl	800c266 <USBD_LL_Stop>
  }

  /* Reset the class ID */
  pdev->classId = 0U;
#else
  if (pdev->pClass[0] != NULL)
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a68e:	2b00      	cmp	r3, #0
 800a690:	d009      	beq.n	800a6a6 <USBD_Stop+0x2c>
  {
    (void)pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config);
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a698:	685b      	ldr	r3, [r3, #4]
 800a69a:	687a      	ldr	r2, [r7, #4]
 800a69c:	6852      	ldr	r2, [r2, #4]
 800a69e:	b2d2      	uxtb	r2, r2
 800a6a0:	4611      	mov	r1, r2
 800a6a2:	6878      	ldr	r0, [r7, #4]
 800a6a4:	4798      	blx	r3
  }
#endif /* USE_USBD_COMPOSITE */

  return USBD_OK;
 800a6a6:	2300      	movs	r3, #0
}
 800a6a8:	4618      	mov	r0, r3
 800a6aa:	3708      	adds	r7, #8
 800a6ac:	46bd      	mov	sp, r7
 800a6ae:	bd80      	pop	{r7, pc}

0800a6b0 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800a6b0:	b480      	push	{r7}
 800a6b2:	b083      	sub	sp, #12
 800a6b4:	af00      	add	r7, sp, #0
 800a6b6:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a6b8:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800a6ba:	4618      	mov	r0, r3
 800a6bc:	370c      	adds	r7, #12
 800a6be:	46bd      	mov	sp, r7
 800a6c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6c4:	4770      	bx	lr

0800a6c6 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a6c6:	b580      	push	{r7, lr}
 800a6c8:	b084      	sub	sp, #16
 800a6ca:	af00      	add	r7, sp, #0
 800a6cc:	6078      	str	r0, [r7, #4]
 800a6ce:	460b      	mov	r3, r1
 800a6d0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800a6d2:	2300      	movs	r3, #0
 800a6d4:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a6dc:	2b00      	cmp	r3, #0
 800a6de:	d009      	beq.n	800a6f4 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	78fa      	ldrb	r2, [r7, #3]
 800a6ea:	4611      	mov	r1, r2
 800a6ec:	6878      	ldr	r0, [r7, #4]
 800a6ee:	4798      	blx	r3
 800a6f0:	4603      	mov	r3, r0
 800a6f2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a6f4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a6f6:	4618      	mov	r0, r3
 800a6f8:	3710      	adds	r7, #16
 800a6fa:	46bd      	mov	sp, r7
 800a6fc:	bd80      	pop	{r7, pc}

0800a6fe <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a6fe:	b580      	push	{r7, lr}
 800a700:	b084      	sub	sp, #16
 800a702:	af00      	add	r7, sp, #0
 800a704:	6078      	str	r0, [r7, #4]
 800a706:	460b      	mov	r3, r1
 800a708:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800a70a:	2300      	movs	r3, #0
 800a70c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a714:	685b      	ldr	r3, [r3, #4]
 800a716:	78fa      	ldrb	r2, [r7, #3]
 800a718:	4611      	mov	r1, r2
 800a71a:	6878      	ldr	r0, [r7, #4]
 800a71c:	4798      	blx	r3
 800a71e:	4603      	mov	r3, r0
 800a720:	2b00      	cmp	r3, #0
 800a722:	d001      	beq.n	800a728 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800a724:	2303      	movs	r3, #3
 800a726:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a728:	7bfb      	ldrb	r3, [r7, #15]
}
 800a72a:	4618      	mov	r0, r3
 800a72c:	3710      	adds	r7, #16
 800a72e:	46bd      	mov	sp, r7
 800a730:	bd80      	pop	{r7, pc}

0800a732 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800a732:	b580      	push	{r7, lr}
 800a734:	b084      	sub	sp, #16
 800a736:	af00      	add	r7, sp, #0
 800a738:	6078      	str	r0, [r7, #4]
 800a73a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a742:	6839      	ldr	r1, [r7, #0]
 800a744:	4618      	mov	r0, r3
 800a746:	f001 f908 	bl	800b95a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	2201      	movs	r2, #1
 800a74e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800a758:	461a      	mov	r2, r3
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a766:	f003 031f 	and.w	r3, r3, #31
 800a76a:	2b02      	cmp	r3, #2
 800a76c:	d01a      	beq.n	800a7a4 <USBD_LL_SetupStage+0x72>
 800a76e:	2b02      	cmp	r3, #2
 800a770:	d822      	bhi.n	800a7b8 <USBD_LL_SetupStage+0x86>
 800a772:	2b00      	cmp	r3, #0
 800a774:	d002      	beq.n	800a77c <USBD_LL_SetupStage+0x4a>
 800a776:	2b01      	cmp	r3, #1
 800a778:	d00a      	beq.n	800a790 <USBD_LL_SetupStage+0x5e>
 800a77a:	e01d      	b.n	800a7b8 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a782:	4619      	mov	r1, r3
 800a784:	6878      	ldr	r0, [r7, #4]
 800a786:	f000 fb5f 	bl	800ae48 <USBD_StdDevReq>
 800a78a:	4603      	mov	r3, r0
 800a78c:	73fb      	strb	r3, [r7, #15]
      break;
 800a78e:	e020      	b.n	800a7d2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a796:	4619      	mov	r1, r3
 800a798:	6878      	ldr	r0, [r7, #4]
 800a79a:	f000 fbc7 	bl	800af2c <USBD_StdItfReq>
 800a79e:	4603      	mov	r3, r0
 800a7a0:	73fb      	strb	r3, [r7, #15]
      break;
 800a7a2:	e016      	b.n	800a7d2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a7aa:	4619      	mov	r1, r3
 800a7ac:	6878      	ldr	r0, [r7, #4]
 800a7ae:	f000 fc29 	bl	800b004 <USBD_StdEPReq>
 800a7b2:	4603      	mov	r3, r0
 800a7b4:	73fb      	strb	r3, [r7, #15]
      break;
 800a7b6:	e00c      	b.n	800a7d2 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a7be:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a7c2:	b2db      	uxtb	r3, r3
 800a7c4:	4619      	mov	r1, r3
 800a7c6:	6878      	ldr	r0, [r7, #4]
 800a7c8:	f001 fdcc 	bl	800c364 <USBD_LL_StallEP>
 800a7cc:	4603      	mov	r3, r0
 800a7ce:	73fb      	strb	r3, [r7, #15]
      break;
 800a7d0:	bf00      	nop
  }

  return ret;
 800a7d2:	7bfb      	ldrb	r3, [r7, #15]
}
 800a7d4:	4618      	mov	r0, r3
 800a7d6:	3710      	adds	r7, #16
 800a7d8:	46bd      	mov	sp, r7
 800a7da:	bd80      	pop	{r7, pc}

0800a7dc <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800a7dc:	b580      	push	{r7, lr}
 800a7de:	b086      	sub	sp, #24
 800a7e0:	af00      	add	r7, sp, #0
 800a7e2:	60f8      	str	r0, [r7, #12]
 800a7e4:	460b      	mov	r3, r1
 800a7e6:	607a      	str	r2, [r7, #4]
 800a7e8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800a7ea:	2300      	movs	r3, #0
 800a7ec:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800a7ee:	7afb      	ldrb	r3, [r7, #11]
 800a7f0:	2b00      	cmp	r3, #0
 800a7f2:	d16e      	bne.n	800a8d2 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800a7f4:	68fb      	ldr	r3, [r7, #12]
 800a7f6:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800a7fa:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800a7fc:	68fb      	ldr	r3, [r7, #12]
 800a7fe:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a802:	2b03      	cmp	r3, #3
 800a804:	f040 8098 	bne.w	800a938 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800a808:	693b      	ldr	r3, [r7, #16]
 800a80a:	689a      	ldr	r2, [r3, #8]
 800a80c:	693b      	ldr	r3, [r7, #16]
 800a80e:	68db      	ldr	r3, [r3, #12]
 800a810:	429a      	cmp	r2, r3
 800a812:	d913      	bls.n	800a83c <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800a814:	693b      	ldr	r3, [r7, #16]
 800a816:	689a      	ldr	r2, [r3, #8]
 800a818:	693b      	ldr	r3, [r7, #16]
 800a81a:	68db      	ldr	r3, [r3, #12]
 800a81c:	1ad2      	subs	r2, r2, r3
 800a81e:	693b      	ldr	r3, [r7, #16]
 800a820:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800a822:	693b      	ldr	r3, [r7, #16]
 800a824:	68da      	ldr	r2, [r3, #12]
 800a826:	693b      	ldr	r3, [r7, #16]
 800a828:	689b      	ldr	r3, [r3, #8]
 800a82a:	4293      	cmp	r3, r2
 800a82c:	bf28      	it	cs
 800a82e:	4613      	movcs	r3, r2
 800a830:	461a      	mov	r2, r3
 800a832:	6879      	ldr	r1, [r7, #4]
 800a834:	68f8      	ldr	r0, [r7, #12]
 800a836:	f001 f967 	bl	800bb08 <USBD_CtlContinueRx>
 800a83a:	e07d      	b.n	800a938 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800a83c:	68fb      	ldr	r3, [r7, #12]
 800a83e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a842:	f003 031f 	and.w	r3, r3, #31
 800a846:	2b02      	cmp	r3, #2
 800a848:	d014      	beq.n	800a874 <USBD_LL_DataOutStage+0x98>
 800a84a:	2b02      	cmp	r3, #2
 800a84c:	d81d      	bhi.n	800a88a <USBD_LL_DataOutStage+0xae>
 800a84e:	2b00      	cmp	r3, #0
 800a850:	d002      	beq.n	800a858 <USBD_LL_DataOutStage+0x7c>
 800a852:	2b01      	cmp	r3, #1
 800a854:	d003      	beq.n	800a85e <USBD_LL_DataOutStage+0x82>
 800a856:	e018      	b.n	800a88a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800a858:	2300      	movs	r3, #0
 800a85a:	75bb      	strb	r3, [r7, #22]
            break;
 800a85c:	e018      	b.n	800a890 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800a85e:	68fb      	ldr	r3, [r7, #12]
 800a860:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800a864:	b2db      	uxtb	r3, r3
 800a866:	4619      	mov	r1, r3
 800a868:	68f8      	ldr	r0, [r7, #12]
 800a86a:	f000 fa5e 	bl	800ad2a <USBD_CoreFindIF>
 800a86e:	4603      	mov	r3, r0
 800a870:	75bb      	strb	r3, [r7, #22]
            break;
 800a872:	e00d      	b.n	800a890 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800a874:	68fb      	ldr	r3, [r7, #12]
 800a876:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800a87a:	b2db      	uxtb	r3, r3
 800a87c:	4619      	mov	r1, r3
 800a87e:	68f8      	ldr	r0, [r7, #12]
 800a880:	f000 fa60 	bl	800ad44 <USBD_CoreFindEP>
 800a884:	4603      	mov	r3, r0
 800a886:	75bb      	strb	r3, [r7, #22]
            break;
 800a888:	e002      	b.n	800a890 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800a88a:	2300      	movs	r3, #0
 800a88c:	75bb      	strb	r3, [r7, #22]
            break;
 800a88e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800a890:	7dbb      	ldrb	r3, [r7, #22]
 800a892:	2b00      	cmp	r3, #0
 800a894:	d119      	bne.n	800a8ca <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a896:	68fb      	ldr	r3, [r7, #12]
 800a898:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a89c:	b2db      	uxtb	r3, r3
 800a89e:	2b03      	cmp	r3, #3
 800a8a0:	d113      	bne.n	800a8ca <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800a8a2:	7dba      	ldrb	r2, [r7, #22]
 800a8a4:	68fb      	ldr	r3, [r7, #12]
 800a8a6:	32ae      	adds	r2, #174	; 0xae
 800a8a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a8ac:	691b      	ldr	r3, [r3, #16]
 800a8ae:	2b00      	cmp	r3, #0
 800a8b0:	d00b      	beq.n	800a8ca <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800a8b2:	7dba      	ldrb	r2, [r7, #22]
 800a8b4:	68fb      	ldr	r3, [r7, #12]
 800a8b6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800a8ba:	7dba      	ldrb	r2, [r7, #22]
 800a8bc:	68fb      	ldr	r3, [r7, #12]
 800a8be:	32ae      	adds	r2, #174	; 0xae
 800a8c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a8c4:	691b      	ldr	r3, [r3, #16]
 800a8c6:	68f8      	ldr	r0, [r7, #12]
 800a8c8:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800a8ca:	68f8      	ldr	r0, [r7, #12]
 800a8cc:	f001 f92d 	bl	800bb2a <USBD_CtlSendStatus>
 800a8d0:	e032      	b.n	800a938 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800a8d2:	7afb      	ldrb	r3, [r7, #11]
 800a8d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a8d8:	b2db      	uxtb	r3, r3
 800a8da:	4619      	mov	r1, r3
 800a8dc:	68f8      	ldr	r0, [r7, #12]
 800a8de:	f000 fa31 	bl	800ad44 <USBD_CoreFindEP>
 800a8e2:	4603      	mov	r3, r0
 800a8e4:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a8e6:	7dbb      	ldrb	r3, [r7, #22]
 800a8e8:	2bff      	cmp	r3, #255	; 0xff
 800a8ea:	d025      	beq.n	800a938 <USBD_LL_DataOutStage+0x15c>
 800a8ec:	7dbb      	ldrb	r3, [r7, #22]
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	d122      	bne.n	800a938 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a8f2:	68fb      	ldr	r3, [r7, #12]
 800a8f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a8f8:	b2db      	uxtb	r3, r3
 800a8fa:	2b03      	cmp	r3, #3
 800a8fc:	d117      	bne.n	800a92e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800a8fe:	7dba      	ldrb	r2, [r7, #22]
 800a900:	68fb      	ldr	r3, [r7, #12]
 800a902:	32ae      	adds	r2, #174	; 0xae
 800a904:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a908:	699b      	ldr	r3, [r3, #24]
 800a90a:	2b00      	cmp	r3, #0
 800a90c:	d00f      	beq.n	800a92e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800a90e:	7dba      	ldrb	r2, [r7, #22]
 800a910:	68fb      	ldr	r3, [r7, #12]
 800a912:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800a916:	7dba      	ldrb	r2, [r7, #22]
 800a918:	68fb      	ldr	r3, [r7, #12]
 800a91a:	32ae      	adds	r2, #174	; 0xae
 800a91c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a920:	699b      	ldr	r3, [r3, #24]
 800a922:	7afa      	ldrb	r2, [r7, #11]
 800a924:	4611      	mov	r1, r2
 800a926:	68f8      	ldr	r0, [r7, #12]
 800a928:	4798      	blx	r3
 800a92a:	4603      	mov	r3, r0
 800a92c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800a92e:	7dfb      	ldrb	r3, [r7, #23]
 800a930:	2b00      	cmp	r3, #0
 800a932:	d001      	beq.n	800a938 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800a934:	7dfb      	ldrb	r3, [r7, #23]
 800a936:	e000      	b.n	800a93a <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800a938:	2300      	movs	r3, #0
}
 800a93a:	4618      	mov	r0, r3
 800a93c:	3718      	adds	r7, #24
 800a93e:	46bd      	mov	sp, r7
 800a940:	bd80      	pop	{r7, pc}

0800a942 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800a942:	b580      	push	{r7, lr}
 800a944:	b086      	sub	sp, #24
 800a946:	af00      	add	r7, sp, #0
 800a948:	60f8      	str	r0, [r7, #12]
 800a94a:	460b      	mov	r3, r1
 800a94c:	607a      	str	r2, [r7, #4]
 800a94e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800a950:	7afb      	ldrb	r3, [r7, #11]
 800a952:	2b00      	cmp	r3, #0
 800a954:	d16f      	bne.n	800aa36 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800a956:	68fb      	ldr	r3, [r7, #12]
 800a958:	3314      	adds	r3, #20
 800a95a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800a95c:	68fb      	ldr	r3, [r7, #12]
 800a95e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a962:	2b02      	cmp	r3, #2
 800a964:	d15a      	bne.n	800aa1c <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800a966:	693b      	ldr	r3, [r7, #16]
 800a968:	689a      	ldr	r2, [r3, #8]
 800a96a:	693b      	ldr	r3, [r7, #16]
 800a96c:	68db      	ldr	r3, [r3, #12]
 800a96e:	429a      	cmp	r2, r3
 800a970:	d914      	bls.n	800a99c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800a972:	693b      	ldr	r3, [r7, #16]
 800a974:	689a      	ldr	r2, [r3, #8]
 800a976:	693b      	ldr	r3, [r7, #16]
 800a978:	68db      	ldr	r3, [r3, #12]
 800a97a:	1ad2      	subs	r2, r2, r3
 800a97c:	693b      	ldr	r3, [r7, #16]
 800a97e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800a980:	693b      	ldr	r3, [r7, #16]
 800a982:	689b      	ldr	r3, [r3, #8]
 800a984:	461a      	mov	r2, r3
 800a986:	6879      	ldr	r1, [r7, #4]
 800a988:	68f8      	ldr	r0, [r7, #12]
 800a98a:	f001 f8ac 	bl	800bae6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a98e:	2300      	movs	r3, #0
 800a990:	2200      	movs	r2, #0
 800a992:	2100      	movs	r1, #0
 800a994:	68f8      	ldr	r0, [r7, #12]
 800a996:	f001 fd8f 	bl	800c4b8 <USBD_LL_PrepareReceive>
 800a99a:	e03f      	b.n	800aa1c <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800a99c:	693b      	ldr	r3, [r7, #16]
 800a99e:	68da      	ldr	r2, [r3, #12]
 800a9a0:	693b      	ldr	r3, [r7, #16]
 800a9a2:	689b      	ldr	r3, [r3, #8]
 800a9a4:	429a      	cmp	r2, r3
 800a9a6:	d11c      	bne.n	800a9e2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800a9a8:	693b      	ldr	r3, [r7, #16]
 800a9aa:	685a      	ldr	r2, [r3, #4]
 800a9ac:	693b      	ldr	r3, [r7, #16]
 800a9ae:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800a9b0:	429a      	cmp	r2, r3
 800a9b2:	d316      	bcc.n	800a9e2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800a9b4:	693b      	ldr	r3, [r7, #16]
 800a9b6:	685a      	ldr	r2, [r3, #4]
 800a9b8:	68fb      	ldr	r3, [r7, #12]
 800a9ba:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800a9be:	429a      	cmp	r2, r3
 800a9c0:	d20f      	bcs.n	800a9e2 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800a9c2:	2200      	movs	r2, #0
 800a9c4:	2100      	movs	r1, #0
 800a9c6:	68f8      	ldr	r0, [r7, #12]
 800a9c8:	f001 f88d 	bl	800bae6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800a9cc:	68fb      	ldr	r3, [r7, #12]
 800a9ce:	2200      	movs	r2, #0
 800a9d0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a9d4:	2300      	movs	r3, #0
 800a9d6:	2200      	movs	r2, #0
 800a9d8:	2100      	movs	r1, #0
 800a9da:	68f8      	ldr	r0, [r7, #12]
 800a9dc:	f001 fd6c 	bl	800c4b8 <USBD_LL_PrepareReceive>
 800a9e0:	e01c      	b.n	800aa1c <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a9e2:	68fb      	ldr	r3, [r7, #12]
 800a9e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a9e8:	b2db      	uxtb	r3, r3
 800a9ea:	2b03      	cmp	r3, #3
 800a9ec:	d10f      	bne.n	800aa0e <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800a9ee:	68fb      	ldr	r3, [r7, #12]
 800a9f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a9f4:	68db      	ldr	r3, [r3, #12]
 800a9f6:	2b00      	cmp	r3, #0
 800a9f8:	d009      	beq.n	800aa0e <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800a9fa:	68fb      	ldr	r3, [r7, #12]
 800a9fc:	2200      	movs	r2, #0
 800a9fe:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800aa02:	68fb      	ldr	r3, [r7, #12]
 800aa04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aa08:	68db      	ldr	r3, [r3, #12]
 800aa0a:	68f8      	ldr	r0, [r7, #12]
 800aa0c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800aa0e:	2180      	movs	r1, #128	; 0x80
 800aa10:	68f8      	ldr	r0, [r7, #12]
 800aa12:	f001 fca7 	bl	800c364 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800aa16:	68f8      	ldr	r0, [r7, #12]
 800aa18:	f001 f89a 	bl	800bb50 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800aa1c:	68fb      	ldr	r3, [r7, #12]
 800aa1e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800aa22:	2b00      	cmp	r3, #0
 800aa24:	d03a      	beq.n	800aa9c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800aa26:	68f8      	ldr	r0, [r7, #12]
 800aa28:	f7ff fe42 	bl	800a6b0 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800aa2c:	68fb      	ldr	r3, [r7, #12]
 800aa2e:	2200      	movs	r2, #0
 800aa30:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800aa34:	e032      	b.n	800aa9c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800aa36:	7afb      	ldrb	r3, [r7, #11]
 800aa38:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800aa3c:	b2db      	uxtb	r3, r3
 800aa3e:	4619      	mov	r1, r3
 800aa40:	68f8      	ldr	r0, [r7, #12]
 800aa42:	f000 f97f 	bl	800ad44 <USBD_CoreFindEP>
 800aa46:	4603      	mov	r3, r0
 800aa48:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800aa4a:	7dfb      	ldrb	r3, [r7, #23]
 800aa4c:	2bff      	cmp	r3, #255	; 0xff
 800aa4e:	d025      	beq.n	800aa9c <USBD_LL_DataInStage+0x15a>
 800aa50:	7dfb      	ldrb	r3, [r7, #23]
 800aa52:	2b00      	cmp	r3, #0
 800aa54:	d122      	bne.n	800aa9c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aa56:	68fb      	ldr	r3, [r7, #12]
 800aa58:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aa5c:	b2db      	uxtb	r3, r3
 800aa5e:	2b03      	cmp	r3, #3
 800aa60:	d11c      	bne.n	800aa9c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800aa62:	7dfa      	ldrb	r2, [r7, #23]
 800aa64:	68fb      	ldr	r3, [r7, #12]
 800aa66:	32ae      	adds	r2, #174	; 0xae
 800aa68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aa6c:	695b      	ldr	r3, [r3, #20]
 800aa6e:	2b00      	cmp	r3, #0
 800aa70:	d014      	beq.n	800aa9c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800aa72:	7dfa      	ldrb	r2, [r7, #23]
 800aa74:	68fb      	ldr	r3, [r7, #12]
 800aa76:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800aa7a:	7dfa      	ldrb	r2, [r7, #23]
 800aa7c:	68fb      	ldr	r3, [r7, #12]
 800aa7e:	32ae      	adds	r2, #174	; 0xae
 800aa80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aa84:	695b      	ldr	r3, [r3, #20]
 800aa86:	7afa      	ldrb	r2, [r7, #11]
 800aa88:	4611      	mov	r1, r2
 800aa8a:	68f8      	ldr	r0, [r7, #12]
 800aa8c:	4798      	blx	r3
 800aa8e:	4603      	mov	r3, r0
 800aa90:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800aa92:	7dbb      	ldrb	r3, [r7, #22]
 800aa94:	2b00      	cmp	r3, #0
 800aa96:	d001      	beq.n	800aa9c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800aa98:	7dbb      	ldrb	r3, [r7, #22]
 800aa9a:	e000      	b.n	800aa9e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800aa9c:	2300      	movs	r3, #0
}
 800aa9e:	4618      	mov	r0, r3
 800aaa0:	3718      	adds	r7, #24
 800aaa2:	46bd      	mov	sp, r7
 800aaa4:	bd80      	pop	{r7, pc}

0800aaa6 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800aaa6:	b580      	push	{r7, lr}
 800aaa8:	b084      	sub	sp, #16
 800aaaa:	af00      	add	r7, sp, #0
 800aaac:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800aaae:	2300      	movs	r3, #0
 800aab0:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	2201      	movs	r2, #1
 800aab6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	2200      	movs	r2, #0
 800aabe:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	2200      	movs	r2, #0
 800aac6:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	2200      	movs	r2, #0
 800aacc:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	2200      	movs	r2, #0
 800aad4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aade:	2b00      	cmp	r3, #0
 800aae0:	d014      	beq.n	800ab0c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aae8:	685b      	ldr	r3, [r3, #4]
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	d00e      	beq.n	800ab0c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aaf4:	685b      	ldr	r3, [r3, #4]
 800aaf6:	687a      	ldr	r2, [r7, #4]
 800aaf8:	6852      	ldr	r2, [r2, #4]
 800aafa:	b2d2      	uxtb	r2, r2
 800aafc:	4611      	mov	r1, r2
 800aafe:	6878      	ldr	r0, [r7, #4]
 800ab00:	4798      	blx	r3
 800ab02:	4603      	mov	r3, r0
 800ab04:	2b00      	cmp	r3, #0
 800ab06:	d001      	beq.n	800ab0c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800ab08:	2303      	movs	r3, #3
 800ab0a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ab0c:	2340      	movs	r3, #64	; 0x40
 800ab0e:	2200      	movs	r2, #0
 800ab10:	2100      	movs	r1, #0
 800ab12:	6878      	ldr	r0, [r7, #4]
 800ab14:	f001 fbc2 	bl	800c29c <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	2201      	movs	r2, #1
 800ab1c:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	2240      	movs	r2, #64	; 0x40
 800ab24:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ab28:	2340      	movs	r3, #64	; 0x40
 800ab2a:	2200      	movs	r2, #0
 800ab2c:	2180      	movs	r1, #128	; 0x80
 800ab2e:	6878      	ldr	r0, [r7, #4]
 800ab30:	f001 fbb4 	bl	800c29c <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	2201      	movs	r2, #1
 800ab38:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	2240      	movs	r2, #64	; 0x40
 800ab3e:	621a      	str	r2, [r3, #32]

  return ret;
 800ab40:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab42:	4618      	mov	r0, r3
 800ab44:	3710      	adds	r7, #16
 800ab46:	46bd      	mov	sp, r7
 800ab48:	bd80      	pop	{r7, pc}

0800ab4a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800ab4a:	b480      	push	{r7}
 800ab4c:	b083      	sub	sp, #12
 800ab4e:	af00      	add	r7, sp, #0
 800ab50:	6078      	str	r0, [r7, #4]
 800ab52:	460b      	mov	r3, r1
 800ab54:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	78fa      	ldrb	r2, [r7, #3]
 800ab5a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800ab5c:	2300      	movs	r3, #0
}
 800ab5e:	4618      	mov	r0, r3
 800ab60:	370c      	adds	r7, #12
 800ab62:	46bd      	mov	sp, r7
 800ab64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab68:	4770      	bx	lr

0800ab6a <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800ab6a:	b480      	push	{r7}
 800ab6c:	b083      	sub	sp, #12
 800ab6e:	af00      	add	r7, sp, #0
 800ab70:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ab78:	b2da      	uxtb	r2, r3
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	2204      	movs	r2, #4
 800ab84:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800ab88:	2300      	movs	r3, #0
}
 800ab8a:	4618      	mov	r0, r3
 800ab8c:	370c      	adds	r7, #12
 800ab8e:	46bd      	mov	sp, r7
 800ab90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab94:	4770      	bx	lr

0800ab96 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800ab96:	b480      	push	{r7}
 800ab98:	b083      	sub	sp, #12
 800ab9a:	af00      	add	r7, sp, #0
 800ab9c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aba4:	b2db      	uxtb	r3, r3
 800aba6:	2b04      	cmp	r3, #4
 800aba8:	d106      	bne.n	800abb8 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800abb0:	b2da      	uxtb	r2, r3
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800abb8:	2300      	movs	r3, #0
}
 800abba:	4618      	mov	r0, r3
 800abbc:	370c      	adds	r7, #12
 800abbe:	46bd      	mov	sp, r7
 800abc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abc4:	4770      	bx	lr

0800abc6 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800abc6:	b580      	push	{r7, lr}
 800abc8:	b082      	sub	sp, #8
 800abca:	af00      	add	r7, sp, #0
 800abcc:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800abd4:	b2db      	uxtb	r3, r3
 800abd6:	2b03      	cmp	r3, #3
 800abd8:	d110      	bne.n	800abfc <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800abe0:	2b00      	cmp	r3, #0
 800abe2:	d00b      	beq.n	800abfc <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800abea:	69db      	ldr	r3, [r3, #28]
 800abec:	2b00      	cmp	r3, #0
 800abee:	d005      	beq.n	800abfc <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800abf6:	69db      	ldr	r3, [r3, #28]
 800abf8:	6878      	ldr	r0, [r7, #4]
 800abfa:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800abfc:	2300      	movs	r3, #0
}
 800abfe:	4618      	mov	r0, r3
 800ac00:	3708      	adds	r7, #8
 800ac02:	46bd      	mov	sp, r7
 800ac04:	bd80      	pop	{r7, pc}

0800ac06 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800ac06:	b580      	push	{r7, lr}
 800ac08:	b082      	sub	sp, #8
 800ac0a:	af00      	add	r7, sp, #0
 800ac0c:	6078      	str	r0, [r7, #4]
 800ac0e:	460b      	mov	r3, r1
 800ac10:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	32ae      	adds	r2, #174	; 0xae
 800ac1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ac20:	2b00      	cmp	r3, #0
 800ac22:	d101      	bne.n	800ac28 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800ac24:	2303      	movs	r3, #3
 800ac26:	e01c      	b.n	800ac62 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ac2e:	b2db      	uxtb	r3, r3
 800ac30:	2b03      	cmp	r3, #3
 800ac32:	d115      	bne.n	800ac60 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	32ae      	adds	r2, #174	; 0xae
 800ac3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ac42:	6a1b      	ldr	r3, [r3, #32]
 800ac44:	2b00      	cmp	r3, #0
 800ac46:	d00b      	beq.n	800ac60 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	32ae      	adds	r2, #174	; 0xae
 800ac52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ac56:	6a1b      	ldr	r3, [r3, #32]
 800ac58:	78fa      	ldrb	r2, [r7, #3]
 800ac5a:	4611      	mov	r1, r2
 800ac5c:	6878      	ldr	r0, [r7, #4]
 800ac5e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800ac60:	2300      	movs	r3, #0
}
 800ac62:	4618      	mov	r0, r3
 800ac64:	3708      	adds	r7, #8
 800ac66:	46bd      	mov	sp, r7
 800ac68:	bd80      	pop	{r7, pc}

0800ac6a <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800ac6a:	b580      	push	{r7, lr}
 800ac6c:	b082      	sub	sp, #8
 800ac6e:	af00      	add	r7, sp, #0
 800ac70:	6078      	str	r0, [r7, #4]
 800ac72:	460b      	mov	r3, r1
 800ac74:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	32ae      	adds	r2, #174	; 0xae
 800ac80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ac84:	2b00      	cmp	r3, #0
 800ac86:	d101      	bne.n	800ac8c <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800ac88:	2303      	movs	r3, #3
 800ac8a:	e01c      	b.n	800acc6 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ac92:	b2db      	uxtb	r3, r3
 800ac94:	2b03      	cmp	r3, #3
 800ac96:	d115      	bne.n	800acc4 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	32ae      	adds	r2, #174	; 0xae
 800aca2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aca8:	2b00      	cmp	r3, #0
 800acaa:	d00b      	beq.n	800acc4 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	32ae      	adds	r2, #174	; 0xae
 800acb6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800acba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800acbc:	78fa      	ldrb	r2, [r7, #3]
 800acbe:	4611      	mov	r1, r2
 800acc0:	6878      	ldr	r0, [r7, #4]
 800acc2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800acc4:	2300      	movs	r3, #0
}
 800acc6:	4618      	mov	r0, r3
 800acc8:	3708      	adds	r7, #8
 800acca:	46bd      	mov	sp, r7
 800accc:	bd80      	pop	{r7, pc}

0800acce <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800acce:	b480      	push	{r7}
 800acd0:	b083      	sub	sp, #12
 800acd2:	af00      	add	r7, sp, #0
 800acd4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800acd6:	2300      	movs	r3, #0
}
 800acd8:	4618      	mov	r0, r3
 800acda:	370c      	adds	r7, #12
 800acdc:	46bd      	mov	sp, r7
 800acde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ace2:	4770      	bx	lr

0800ace4 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800ace4:	b580      	push	{r7, lr}
 800ace6:	b084      	sub	sp, #16
 800ace8:	af00      	add	r7, sp, #0
 800acea:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800acec:	2300      	movs	r3, #0
 800acee:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	2201      	movs	r2, #1
 800acf4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800acfe:	2b00      	cmp	r3, #0
 800ad00:	d00e      	beq.n	800ad20 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ad08:	685b      	ldr	r3, [r3, #4]
 800ad0a:	687a      	ldr	r2, [r7, #4]
 800ad0c:	6852      	ldr	r2, [r2, #4]
 800ad0e:	b2d2      	uxtb	r2, r2
 800ad10:	4611      	mov	r1, r2
 800ad12:	6878      	ldr	r0, [r7, #4]
 800ad14:	4798      	blx	r3
 800ad16:	4603      	mov	r3, r0
 800ad18:	2b00      	cmp	r3, #0
 800ad1a:	d001      	beq.n	800ad20 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800ad1c:	2303      	movs	r3, #3
 800ad1e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800ad20:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad22:	4618      	mov	r0, r3
 800ad24:	3710      	adds	r7, #16
 800ad26:	46bd      	mov	sp, r7
 800ad28:	bd80      	pop	{r7, pc}

0800ad2a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800ad2a:	b480      	push	{r7}
 800ad2c:	b083      	sub	sp, #12
 800ad2e:	af00      	add	r7, sp, #0
 800ad30:	6078      	str	r0, [r7, #4]
 800ad32:	460b      	mov	r3, r1
 800ad34:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800ad36:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800ad38:	4618      	mov	r0, r3
 800ad3a:	370c      	adds	r7, #12
 800ad3c:	46bd      	mov	sp, r7
 800ad3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad42:	4770      	bx	lr

0800ad44 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800ad44:	b480      	push	{r7}
 800ad46:	b083      	sub	sp, #12
 800ad48:	af00      	add	r7, sp, #0
 800ad4a:	6078      	str	r0, [r7, #4]
 800ad4c:	460b      	mov	r3, r1
 800ad4e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800ad50:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800ad52:	4618      	mov	r0, r3
 800ad54:	370c      	adds	r7, #12
 800ad56:	46bd      	mov	sp, r7
 800ad58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad5c:	4770      	bx	lr

0800ad5e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800ad5e:	b580      	push	{r7, lr}
 800ad60:	b086      	sub	sp, #24
 800ad62:	af00      	add	r7, sp, #0
 800ad64:	6078      	str	r0, [r7, #4]
 800ad66:	460b      	mov	r3, r1
 800ad68:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800ad72:	2300      	movs	r3, #0
 800ad74:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800ad76:	68fb      	ldr	r3, [r7, #12]
 800ad78:	885b      	ldrh	r3, [r3, #2]
 800ad7a:	b29a      	uxth	r2, r3
 800ad7c:	68fb      	ldr	r3, [r7, #12]
 800ad7e:	781b      	ldrb	r3, [r3, #0]
 800ad80:	b29b      	uxth	r3, r3
 800ad82:	429a      	cmp	r2, r3
 800ad84:	d920      	bls.n	800adc8 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800ad86:	68fb      	ldr	r3, [r7, #12]
 800ad88:	781b      	ldrb	r3, [r3, #0]
 800ad8a:	b29b      	uxth	r3, r3
 800ad8c:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800ad8e:	e013      	b.n	800adb8 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800ad90:	f107 030a 	add.w	r3, r7, #10
 800ad94:	4619      	mov	r1, r3
 800ad96:	6978      	ldr	r0, [r7, #20]
 800ad98:	f000 f81b 	bl	800add2 <USBD_GetNextDesc>
 800ad9c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800ad9e:	697b      	ldr	r3, [r7, #20]
 800ada0:	785b      	ldrb	r3, [r3, #1]
 800ada2:	2b05      	cmp	r3, #5
 800ada4:	d108      	bne.n	800adb8 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800ada6:	697b      	ldr	r3, [r7, #20]
 800ada8:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800adaa:	693b      	ldr	r3, [r7, #16]
 800adac:	789b      	ldrb	r3, [r3, #2]
 800adae:	78fa      	ldrb	r2, [r7, #3]
 800adb0:	429a      	cmp	r2, r3
 800adb2:	d008      	beq.n	800adc6 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800adb4:	2300      	movs	r3, #0
 800adb6:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800adb8:	68fb      	ldr	r3, [r7, #12]
 800adba:	885b      	ldrh	r3, [r3, #2]
 800adbc:	b29a      	uxth	r2, r3
 800adbe:	897b      	ldrh	r3, [r7, #10]
 800adc0:	429a      	cmp	r2, r3
 800adc2:	d8e5      	bhi.n	800ad90 <USBD_GetEpDesc+0x32>
 800adc4:	e000      	b.n	800adc8 <USBD_GetEpDesc+0x6a>
          break;
 800adc6:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800adc8:	693b      	ldr	r3, [r7, #16]
}
 800adca:	4618      	mov	r0, r3
 800adcc:	3718      	adds	r7, #24
 800adce:	46bd      	mov	sp, r7
 800add0:	bd80      	pop	{r7, pc}

0800add2 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800add2:	b480      	push	{r7}
 800add4:	b085      	sub	sp, #20
 800add6:	af00      	add	r7, sp, #0
 800add8:	6078      	str	r0, [r7, #4]
 800adda:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800ade0:	683b      	ldr	r3, [r7, #0]
 800ade2:	881a      	ldrh	r2, [r3, #0]
 800ade4:	68fb      	ldr	r3, [r7, #12]
 800ade6:	781b      	ldrb	r3, [r3, #0]
 800ade8:	b29b      	uxth	r3, r3
 800adea:	4413      	add	r3, r2
 800adec:	b29a      	uxth	r2, r3
 800adee:	683b      	ldr	r3, [r7, #0]
 800adf0:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800adf2:	68fb      	ldr	r3, [r7, #12]
 800adf4:	781b      	ldrb	r3, [r3, #0]
 800adf6:	461a      	mov	r2, r3
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	4413      	add	r3, r2
 800adfc:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800adfe:	68fb      	ldr	r3, [r7, #12]
}
 800ae00:	4618      	mov	r0, r3
 800ae02:	3714      	adds	r7, #20
 800ae04:	46bd      	mov	sp, r7
 800ae06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae0a:	4770      	bx	lr

0800ae0c <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800ae0c:	b480      	push	{r7}
 800ae0e:	b087      	sub	sp, #28
 800ae10:	af00      	add	r7, sp, #0
 800ae12:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800ae18:	697b      	ldr	r3, [r7, #20]
 800ae1a:	781b      	ldrb	r3, [r3, #0]
 800ae1c:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800ae1e:	697b      	ldr	r3, [r7, #20]
 800ae20:	3301      	adds	r3, #1
 800ae22:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800ae24:	697b      	ldr	r3, [r7, #20]
 800ae26:	781b      	ldrb	r3, [r3, #0]
 800ae28:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800ae2a:	8a3b      	ldrh	r3, [r7, #16]
 800ae2c:	021b      	lsls	r3, r3, #8
 800ae2e:	b21a      	sxth	r2, r3
 800ae30:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800ae34:	4313      	orrs	r3, r2
 800ae36:	b21b      	sxth	r3, r3
 800ae38:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800ae3a:	89fb      	ldrh	r3, [r7, #14]
}
 800ae3c:	4618      	mov	r0, r3
 800ae3e:	371c      	adds	r7, #28
 800ae40:	46bd      	mov	sp, r7
 800ae42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae46:	4770      	bx	lr

0800ae48 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ae48:	b580      	push	{r7, lr}
 800ae4a:	b084      	sub	sp, #16
 800ae4c:	af00      	add	r7, sp, #0
 800ae4e:	6078      	str	r0, [r7, #4]
 800ae50:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ae52:	2300      	movs	r3, #0
 800ae54:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ae56:	683b      	ldr	r3, [r7, #0]
 800ae58:	781b      	ldrb	r3, [r3, #0]
 800ae5a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ae5e:	2b40      	cmp	r3, #64	; 0x40
 800ae60:	d005      	beq.n	800ae6e <USBD_StdDevReq+0x26>
 800ae62:	2b40      	cmp	r3, #64	; 0x40
 800ae64:	d857      	bhi.n	800af16 <USBD_StdDevReq+0xce>
 800ae66:	2b00      	cmp	r3, #0
 800ae68:	d00f      	beq.n	800ae8a <USBD_StdDevReq+0x42>
 800ae6a:	2b20      	cmp	r3, #32
 800ae6c:	d153      	bne.n	800af16 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	32ae      	adds	r2, #174	; 0xae
 800ae78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae7c:	689b      	ldr	r3, [r3, #8]
 800ae7e:	6839      	ldr	r1, [r7, #0]
 800ae80:	6878      	ldr	r0, [r7, #4]
 800ae82:	4798      	blx	r3
 800ae84:	4603      	mov	r3, r0
 800ae86:	73fb      	strb	r3, [r7, #15]
      break;
 800ae88:	e04a      	b.n	800af20 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ae8a:	683b      	ldr	r3, [r7, #0]
 800ae8c:	785b      	ldrb	r3, [r3, #1]
 800ae8e:	2b09      	cmp	r3, #9
 800ae90:	d83b      	bhi.n	800af0a <USBD_StdDevReq+0xc2>
 800ae92:	a201      	add	r2, pc, #4	; (adr r2, 800ae98 <USBD_StdDevReq+0x50>)
 800ae94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae98:	0800aeed 	.word	0x0800aeed
 800ae9c:	0800af01 	.word	0x0800af01
 800aea0:	0800af0b 	.word	0x0800af0b
 800aea4:	0800aef7 	.word	0x0800aef7
 800aea8:	0800af0b 	.word	0x0800af0b
 800aeac:	0800aecb 	.word	0x0800aecb
 800aeb0:	0800aec1 	.word	0x0800aec1
 800aeb4:	0800af0b 	.word	0x0800af0b
 800aeb8:	0800aee3 	.word	0x0800aee3
 800aebc:	0800aed5 	.word	0x0800aed5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800aec0:	6839      	ldr	r1, [r7, #0]
 800aec2:	6878      	ldr	r0, [r7, #4]
 800aec4:	f000 fa3c 	bl	800b340 <USBD_GetDescriptor>
          break;
 800aec8:	e024      	b.n	800af14 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800aeca:	6839      	ldr	r1, [r7, #0]
 800aecc:	6878      	ldr	r0, [r7, #4]
 800aece:	f000 fba1 	bl	800b614 <USBD_SetAddress>
          break;
 800aed2:	e01f      	b.n	800af14 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800aed4:	6839      	ldr	r1, [r7, #0]
 800aed6:	6878      	ldr	r0, [r7, #4]
 800aed8:	f000 fbe0 	bl	800b69c <USBD_SetConfig>
 800aedc:	4603      	mov	r3, r0
 800aede:	73fb      	strb	r3, [r7, #15]
          break;
 800aee0:	e018      	b.n	800af14 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800aee2:	6839      	ldr	r1, [r7, #0]
 800aee4:	6878      	ldr	r0, [r7, #4]
 800aee6:	f000 fc83 	bl	800b7f0 <USBD_GetConfig>
          break;
 800aeea:	e013      	b.n	800af14 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800aeec:	6839      	ldr	r1, [r7, #0]
 800aeee:	6878      	ldr	r0, [r7, #4]
 800aef0:	f000 fcb4 	bl	800b85c <USBD_GetStatus>
          break;
 800aef4:	e00e      	b.n	800af14 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800aef6:	6839      	ldr	r1, [r7, #0]
 800aef8:	6878      	ldr	r0, [r7, #4]
 800aefa:	f000 fce3 	bl	800b8c4 <USBD_SetFeature>
          break;
 800aefe:	e009      	b.n	800af14 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800af00:	6839      	ldr	r1, [r7, #0]
 800af02:	6878      	ldr	r0, [r7, #4]
 800af04:	f000 fd07 	bl	800b916 <USBD_ClrFeature>
          break;
 800af08:	e004      	b.n	800af14 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800af0a:	6839      	ldr	r1, [r7, #0]
 800af0c:	6878      	ldr	r0, [r7, #4]
 800af0e:	f000 fd5e 	bl	800b9ce <USBD_CtlError>
          break;
 800af12:	bf00      	nop
      }
      break;
 800af14:	e004      	b.n	800af20 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800af16:	6839      	ldr	r1, [r7, #0]
 800af18:	6878      	ldr	r0, [r7, #4]
 800af1a:	f000 fd58 	bl	800b9ce <USBD_CtlError>
      break;
 800af1e:	bf00      	nop
  }

  return ret;
 800af20:	7bfb      	ldrb	r3, [r7, #15]
}
 800af22:	4618      	mov	r0, r3
 800af24:	3710      	adds	r7, #16
 800af26:	46bd      	mov	sp, r7
 800af28:	bd80      	pop	{r7, pc}
 800af2a:	bf00      	nop

0800af2c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800af2c:	b580      	push	{r7, lr}
 800af2e:	b084      	sub	sp, #16
 800af30:	af00      	add	r7, sp, #0
 800af32:	6078      	str	r0, [r7, #4]
 800af34:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800af36:	2300      	movs	r3, #0
 800af38:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800af3a:	683b      	ldr	r3, [r7, #0]
 800af3c:	781b      	ldrb	r3, [r3, #0]
 800af3e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800af42:	2b40      	cmp	r3, #64	; 0x40
 800af44:	d005      	beq.n	800af52 <USBD_StdItfReq+0x26>
 800af46:	2b40      	cmp	r3, #64	; 0x40
 800af48:	d852      	bhi.n	800aff0 <USBD_StdItfReq+0xc4>
 800af4a:	2b00      	cmp	r3, #0
 800af4c:	d001      	beq.n	800af52 <USBD_StdItfReq+0x26>
 800af4e:	2b20      	cmp	r3, #32
 800af50:	d14e      	bne.n	800aff0 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800af58:	b2db      	uxtb	r3, r3
 800af5a:	3b01      	subs	r3, #1
 800af5c:	2b02      	cmp	r3, #2
 800af5e:	d840      	bhi.n	800afe2 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800af60:	683b      	ldr	r3, [r7, #0]
 800af62:	889b      	ldrh	r3, [r3, #4]
 800af64:	b2db      	uxtb	r3, r3
 800af66:	2b01      	cmp	r3, #1
 800af68:	d836      	bhi.n	800afd8 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800af6a:	683b      	ldr	r3, [r7, #0]
 800af6c:	889b      	ldrh	r3, [r3, #4]
 800af6e:	b2db      	uxtb	r3, r3
 800af70:	4619      	mov	r1, r3
 800af72:	6878      	ldr	r0, [r7, #4]
 800af74:	f7ff fed9 	bl	800ad2a <USBD_CoreFindIF>
 800af78:	4603      	mov	r3, r0
 800af7a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800af7c:	7bbb      	ldrb	r3, [r7, #14]
 800af7e:	2bff      	cmp	r3, #255	; 0xff
 800af80:	d01d      	beq.n	800afbe <USBD_StdItfReq+0x92>
 800af82:	7bbb      	ldrb	r3, [r7, #14]
 800af84:	2b00      	cmp	r3, #0
 800af86:	d11a      	bne.n	800afbe <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800af88:	7bba      	ldrb	r2, [r7, #14]
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	32ae      	adds	r2, #174	; 0xae
 800af8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af92:	689b      	ldr	r3, [r3, #8]
 800af94:	2b00      	cmp	r3, #0
 800af96:	d00f      	beq.n	800afb8 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800af98:	7bba      	ldrb	r2, [r7, #14]
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800afa0:	7bba      	ldrb	r2, [r7, #14]
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	32ae      	adds	r2, #174	; 0xae
 800afa6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800afaa:	689b      	ldr	r3, [r3, #8]
 800afac:	6839      	ldr	r1, [r7, #0]
 800afae:	6878      	ldr	r0, [r7, #4]
 800afb0:	4798      	blx	r3
 800afb2:	4603      	mov	r3, r0
 800afb4:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800afb6:	e004      	b.n	800afc2 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800afb8:	2303      	movs	r3, #3
 800afba:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800afbc:	e001      	b.n	800afc2 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800afbe:	2303      	movs	r3, #3
 800afc0:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800afc2:	683b      	ldr	r3, [r7, #0]
 800afc4:	88db      	ldrh	r3, [r3, #6]
 800afc6:	2b00      	cmp	r3, #0
 800afc8:	d110      	bne.n	800afec <USBD_StdItfReq+0xc0>
 800afca:	7bfb      	ldrb	r3, [r7, #15]
 800afcc:	2b00      	cmp	r3, #0
 800afce:	d10d      	bne.n	800afec <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800afd0:	6878      	ldr	r0, [r7, #4]
 800afd2:	f000 fdaa 	bl	800bb2a <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800afd6:	e009      	b.n	800afec <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800afd8:	6839      	ldr	r1, [r7, #0]
 800afda:	6878      	ldr	r0, [r7, #4]
 800afdc:	f000 fcf7 	bl	800b9ce <USBD_CtlError>
          break;
 800afe0:	e004      	b.n	800afec <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800afe2:	6839      	ldr	r1, [r7, #0]
 800afe4:	6878      	ldr	r0, [r7, #4]
 800afe6:	f000 fcf2 	bl	800b9ce <USBD_CtlError>
          break;
 800afea:	e000      	b.n	800afee <USBD_StdItfReq+0xc2>
          break;
 800afec:	bf00      	nop
      }
      break;
 800afee:	e004      	b.n	800affa <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800aff0:	6839      	ldr	r1, [r7, #0]
 800aff2:	6878      	ldr	r0, [r7, #4]
 800aff4:	f000 fceb 	bl	800b9ce <USBD_CtlError>
      break;
 800aff8:	bf00      	nop
  }

  return ret;
 800affa:	7bfb      	ldrb	r3, [r7, #15]
}
 800affc:	4618      	mov	r0, r3
 800affe:	3710      	adds	r7, #16
 800b000:	46bd      	mov	sp, r7
 800b002:	bd80      	pop	{r7, pc}

0800b004 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b004:	b580      	push	{r7, lr}
 800b006:	b084      	sub	sp, #16
 800b008:	af00      	add	r7, sp, #0
 800b00a:	6078      	str	r0, [r7, #4]
 800b00c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800b00e:	2300      	movs	r3, #0
 800b010:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800b012:	683b      	ldr	r3, [r7, #0]
 800b014:	889b      	ldrh	r3, [r3, #4]
 800b016:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b018:	683b      	ldr	r3, [r7, #0]
 800b01a:	781b      	ldrb	r3, [r3, #0]
 800b01c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b020:	2b40      	cmp	r3, #64	; 0x40
 800b022:	d007      	beq.n	800b034 <USBD_StdEPReq+0x30>
 800b024:	2b40      	cmp	r3, #64	; 0x40
 800b026:	f200 817f 	bhi.w	800b328 <USBD_StdEPReq+0x324>
 800b02a:	2b00      	cmp	r3, #0
 800b02c:	d02a      	beq.n	800b084 <USBD_StdEPReq+0x80>
 800b02e:	2b20      	cmp	r3, #32
 800b030:	f040 817a 	bne.w	800b328 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800b034:	7bbb      	ldrb	r3, [r7, #14]
 800b036:	4619      	mov	r1, r3
 800b038:	6878      	ldr	r0, [r7, #4]
 800b03a:	f7ff fe83 	bl	800ad44 <USBD_CoreFindEP>
 800b03e:	4603      	mov	r3, r0
 800b040:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b042:	7b7b      	ldrb	r3, [r7, #13]
 800b044:	2bff      	cmp	r3, #255	; 0xff
 800b046:	f000 8174 	beq.w	800b332 <USBD_StdEPReq+0x32e>
 800b04a:	7b7b      	ldrb	r3, [r7, #13]
 800b04c:	2b00      	cmp	r3, #0
 800b04e:	f040 8170 	bne.w	800b332 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800b052:	7b7a      	ldrb	r2, [r7, #13]
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800b05a:	7b7a      	ldrb	r2, [r7, #13]
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	32ae      	adds	r2, #174	; 0xae
 800b060:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b064:	689b      	ldr	r3, [r3, #8]
 800b066:	2b00      	cmp	r3, #0
 800b068:	f000 8163 	beq.w	800b332 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800b06c:	7b7a      	ldrb	r2, [r7, #13]
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	32ae      	adds	r2, #174	; 0xae
 800b072:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b076:	689b      	ldr	r3, [r3, #8]
 800b078:	6839      	ldr	r1, [r7, #0]
 800b07a:	6878      	ldr	r0, [r7, #4]
 800b07c:	4798      	blx	r3
 800b07e:	4603      	mov	r3, r0
 800b080:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800b082:	e156      	b.n	800b332 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b084:	683b      	ldr	r3, [r7, #0]
 800b086:	785b      	ldrb	r3, [r3, #1]
 800b088:	2b03      	cmp	r3, #3
 800b08a:	d008      	beq.n	800b09e <USBD_StdEPReq+0x9a>
 800b08c:	2b03      	cmp	r3, #3
 800b08e:	f300 8145 	bgt.w	800b31c <USBD_StdEPReq+0x318>
 800b092:	2b00      	cmp	r3, #0
 800b094:	f000 809b 	beq.w	800b1ce <USBD_StdEPReq+0x1ca>
 800b098:	2b01      	cmp	r3, #1
 800b09a:	d03c      	beq.n	800b116 <USBD_StdEPReq+0x112>
 800b09c:	e13e      	b.n	800b31c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b0a4:	b2db      	uxtb	r3, r3
 800b0a6:	2b02      	cmp	r3, #2
 800b0a8:	d002      	beq.n	800b0b0 <USBD_StdEPReq+0xac>
 800b0aa:	2b03      	cmp	r3, #3
 800b0ac:	d016      	beq.n	800b0dc <USBD_StdEPReq+0xd8>
 800b0ae:	e02c      	b.n	800b10a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b0b0:	7bbb      	ldrb	r3, [r7, #14]
 800b0b2:	2b00      	cmp	r3, #0
 800b0b4:	d00d      	beq.n	800b0d2 <USBD_StdEPReq+0xce>
 800b0b6:	7bbb      	ldrb	r3, [r7, #14]
 800b0b8:	2b80      	cmp	r3, #128	; 0x80
 800b0ba:	d00a      	beq.n	800b0d2 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800b0bc:	7bbb      	ldrb	r3, [r7, #14]
 800b0be:	4619      	mov	r1, r3
 800b0c0:	6878      	ldr	r0, [r7, #4]
 800b0c2:	f001 f94f 	bl	800c364 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b0c6:	2180      	movs	r1, #128	; 0x80
 800b0c8:	6878      	ldr	r0, [r7, #4]
 800b0ca:	f001 f94b 	bl	800c364 <USBD_LL_StallEP>
 800b0ce:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b0d0:	e020      	b.n	800b114 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800b0d2:	6839      	ldr	r1, [r7, #0]
 800b0d4:	6878      	ldr	r0, [r7, #4]
 800b0d6:	f000 fc7a 	bl	800b9ce <USBD_CtlError>
              break;
 800b0da:	e01b      	b.n	800b114 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b0dc:	683b      	ldr	r3, [r7, #0]
 800b0de:	885b      	ldrh	r3, [r3, #2]
 800b0e0:	2b00      	cmp	r3, #0
 800b0e2:	d10e      	bne.n	800b102 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800b0e4:	7bbb      	ldrb	r3, [r7, #14]
 800b0e6:	2b00      	cmp	r3, #0
 800b0e8:	d00b      	beq.n	800b102 <USBD_StdEPReq+0xfe>
 800b0ea:	7bbb      	ldrb	r3, [r7, #14]
 800b0ec:	2b80      	cmp	r3, #128	; 0x80
 800b0ee:	d008      	beq.n	800b102 <USBD_StdEPReq+0xfe>
 800b0f0:	683b      	ldr	r3, [r7, #0]
 800b0f2:	88db      	ldrh	r3, [r3, #6]
 800b0f4:	2b00      	cmp	r3, #0
 800b0f6:	d104      	bne.n	800b102 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800b0f8:	7bbb      	ldrb	r3, [r7, #14]
 800b0fa:	4619      	mov	r1, r3
 800b0fc:	6878      	ldr	r0, [r7, #4]
 800b0fe:	f001 f931 	bl	800c364 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800b102:	6878      	ldr	r0, [r7, #4]
 800b104:	f000 fd11 	bl	800bb2a <USBD_CtlSendStatus>

              break;
 800b108:	e004      	b.n	800b114 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800b10a:	6839      	ldr	r1, [r7, #0]
 800b10c:	6878      	ldr	r0, [r7, #4]
 800b10e:	f000 fc5e 	bl	800b9ce <USBD_CtlError>
              break;
 800b112:	bf00      	nop
          }
          break;
 800b114:	e107      	b.n	800b326 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b11c:	b2db      	uxtb	r3, r3
 800b11e:	2b02      	cmp	r3, #2
 800b120:	d002      	beq.n	800b128 <USBD_StdEPReq+0x124>
 800b122:	2b03      	cmp	r3, #3
 800b124:	d016      	beq.n	800b154 <USBD_StdEPReq+0x150>
 800b126:	e04b      	b.n	800b1c0 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b128:	7bbb      	ldrb	r3, [r7, #14]
 800b12a:	2b00      	cmp	r3, #0
 800b12c:	d00d      	beq.n	800b14a <USBD_StdEPReq+0x146>
 800b12e:	7bbb      	ldrb	r3, [r7, #14]
 800b130:	2b80      	cmp	r3, #128	; 0x80
 800b132:	d00a      	beq.n	800b14a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800b134:	7bbb      	ldrb	r3, [r7, #14]
 800b136:	4619      	mov	r1, r3
 800b138:	6878      	ldr	r0, [r7, #4]
 800b13a:	f001 f913 	bl	800c364 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b13e:	2180      	movs	r1, #128	; 0x80
 800b140:	6878      	ldr	r0, [r7, #4]
 800b142:	f001 f90f 	bl	800c364 <USBD_LL_StallEP>
 800b146:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b148:	e040      	b.n	800b1cc <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800b14a:	6839      	ldr	r1, [r7, #0]
 800b14c:	6878      	ldr	r0, [r7, #4]
 800b14e:	f000 fc3e 	bl	800b9ce <USBD_CtlError>
              break;
 800b152:	e03b      	b.n	800b1cc <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b154:	683b      	ldr	r3, [r7, #0]
 800b156:	885b      	ldrh	r3, [r3, #2]
 800b158:	2b00      	cmp	r3, #0
 800b15a:	d136      	bne.n	800b1ca <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800b15c:	7bbb      	ldrb	r3, [r7, #14]
 800b15e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b162:	2b00      	cmp	r3, #0
 800b164:	d004      	beq.n	800b170 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800b166:	7bbb      	ldrb	r3, [r7, #14]
 800b168:	4619      	mov	r1, r3
 800b16a:	6878      	ldr	r0, [r7, #4]
 800b16c:	f001 f919 	bl	800c3a2 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800b170:	6878      	ldr	r0, [r7, #4]
 800b172:	f000 fcda 	bl	800bb2a <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800b176:	7bbb      	ldrb	r3, [r7, #14]
 800b178:	4619      	mov	r1, r3
 800b17a:	6878      	ldr	r0, [r7, #4]
 800b17c:	f7ff fde2 	bl	800ad44 <USBD_CoreFindEP>
 800b180:	4603      	mov	r3, r0
 800b182:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b184:	7b7b      	ldrb	r3, [r7, #13]
 800b186:	2bff      	cmp	r3, #255	; 0xff
 800b188:	d01f      	beq.n	800b1ca <USBD_StdEPReq+0x1c6>
 800b18a:	7b7b      	ldrb	r3, [r7, #13]
 800b18c:	2b00      	cmp	r3, #0
 800b18e:	d11c      	bne.n	800b1ca <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800b190:	7b7a      	ldrb	r2, [r7, #13]
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800b198:	7b7a      	ldrb	r2, [r7, #13]
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	32ae      	adds	r2, #174	; 0xae
 800b19e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b1a2:	689b      	ldr	r3, [r3, #8]
 800b1a4:	2b00      	cmp	r3, #0
 800b1a6:	d010      	beq.n	800b1ca <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800b1a8:	7b7a      	ldrb	r2, [r7, #13]
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	32ae      	adds	r2, #174	; 0xae
 800b1ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b1b2:	689b      	ldr	r3, [r3, #8]
 800b1b4:	6839      	ldr	r1, [r7, #0]
 800b1b6:	6878      	ldr	r0, [r7, #4]
 800b1b8:	4798      	blx	r3
 800b1ba:	4603      	mov	r3, r0
 800b1bc:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800b1be:	e004      	b.n	800b1ca <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800b1c0:	6839      	ldr	r1, [r7, #0]
 800b1c2:	6878      	ldr	r0, [r7, #4]
 800b1c4:	f000 fc03 	bl	800b9ce <USBD_CtlError>
              break;
 800b1c8:	e000      	b.n	800b1cc <USBD_StdEPReq+0x1c8>
              break;
 800b1ca:	bf00      	nop
          }
          break;
 800b1cc:	e0ab      	b.n	800b326 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b1d4:	b2db      	uxtb	r3, r3
 800b1d6:	2b02      	cmp	r3, #2
 800b1d8:	d002      	beq.n	800b1e0 <USBD_StdEPReq+0x1dc>
 800b1da:	2b03      	cmp	r3, #3
 800b1dc:	d032      	beq.n	800b244 <USBD_StdEPReq+0x240>
 800b1de:	e097      	b.n	800b310 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b1e0:	7bbb      	ldrb	r3, [r7, #14]
 800b1e2:	2b00      	cmp	r3, #0
 800b1e4:	d007      	beq.n	800b1f6 <USBD_StdEPReq+0x1f2>
 800b1e6:	7bbb      	ldrb	r3, [r7, #14]
 800b1e8:	2b80      	cmp	r3, #128	; 0x80
 800b1ea:	d004      	beq.n	800b1f6 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800b1ec:	6839      	ldr	r1, [r7, #0]
 800b1ee:	6878      	ldr	r0, [r7, #4]
 800b1f0:	f000 fbed 	bl	800b9ce <USBD_CtlError>
                break;
 800b1f4:	e091      	b.n	800b31a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b1f6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b1fa:	2b00      	cmp	r3, #0
 800b1fc:	da0b      	bge.n	800b216 <USBD_StdEPReq+0x212>
 800b1fe:	7bbb      	ldrb	r3, [r7, #14]
 800b200:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b204:	4613      	mov	r3, r2
 800b206:	009b      	lsls	r3, r3, #2
 800b208:	4413      	add	r3, r2
 800b20a:	009b      	lsls	r3, r3, #2
 800b20c:	3310      	adds	r3, #16
 800b20e:	687a      	ldr	r2, [r7, #4]
 800b210:	4413      	add	r3, r2
 800b212:	3304      	adds	r3, #4
 800b214:	e00b      	b.n	800b22e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b216:	7bbb      	ldrb	r3, [r7, #14]
 800b218:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b21c:	4613      	mov	r3, r2
 800b21e:	009b      	lsls	r3, r3, #2
 800b220:	4413      	add	r3, r2
 800b222:	009b      	lsls	r3, r3, #2
 800b224:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b228:	687a      	ldr	r2, [r7, #4]
 800b22a:	4413      	add	r3, r2
 800b22c:	3304      	adds	r3, #4
 800b22e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800b230:	68bb      	ldr	r3, [r7, #8]
 800b232:	2200      	movs	r2, #0
 800b234:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b236:	68bb      	ldr	r3, [r7, #8]
 800b238:	2202      	movs	r2, #2
 800b23a:	4619      	mov	r1, r3
 800b23c:	6878      	ldr	r0, [r7, #4]
 800b23e:	f000 fc37 	bl	800bab0 <USBD_CtlSendData>
              break;
 800b242:	e06a      	b.n	800b31a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800b244:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b248:	2b00      	cmp	r3, #0
 800b24a:	da11      	bge.n	800b270 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800b24c:	7bbb      	ldrb	r3, [r7, #14]
 800b24e:	f003 020f 	and.w	r2, r3, #15
 800b252:	6879      	ldr	r1, [r7, #4]
 800b254:	4613      	mov	r3, r2
 800b256:	009b      	lsls	r3, r3, #2
 800b258:	4413      	add	r3, r2
 800b25a:	009b      	lsls	r3, r3, #2
 800b25c:	440b      	add	r3, r1
 800b25e:	3324      	adds	r3, #36	; 0x24
 800b260:	881b      	ldrh	r3, [r3, #0]
 800b262:	2b00      	cmp	r3, #0
 800b264:	d117      	bne.n	800b296 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800b266:	6839      	ldr	r1, [r7, #0]
 800b268:	6878      	ldr	r0, [r7, #4]
 800b26a:	f000 fbb0 	bl	800b9ce <USBD_CtlError>
                  break;
 800b26e:	e054      	b.n	800b31a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800b270:	7bbb      	ldrb	r3, [r7, #14]
 800b272:	f003 020f 	and.w	r2, r3, #15
 800b276:	6879      	ldr	r1, [r7, #4]
 800b278:	4613      	mov	r3, r2
 800b27a:	009b      	lsls	r3, r3, #2
 800b27c:	4413      	add	r3, r2
 800b27e:	009b      	lsls	r3, r3, #2
 800b280:	440b      	add	r3, r1
 800b282:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800b286:	881b      	ldrh	r3, [r3, #0]
 800b288:	2b00      	cmp	r3, #0
 800b28a:	d104      	bne.n	800b296 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800b28c:	6839      	ldr	r1, [r7, #0]
 800b28e:	6878      	ldr	r0, [r7, #4]
 800b290:	f000 fb9d 	bl	800b9ce <USBD_CtlError>
                  break;
 800b294:	e041      	b.n	800b31a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b296:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b29a:	2b00      	cmp	r3, #0
 800b29c:	da0b      	bge.n	800b2b6 <USBD_StdEPReq+0x2b2>
 800b29e:	7bbb      	ldrb	r3, [r7, #14]
 800b2a0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b2a4:	4613      	mov	r3, r2
 800b2a6:	009b      	lsls	r3, r3, #2
 800b2a8:	4413      	add	r3, r2
 800b2aa:	009b      	lsls	r3, r3, #2
 800b2ac:	3310      	adds	r3, #16
 800b2ae:	687a      	ldr	r2, [r7, #4]
 800b2b0:	4413      	add	r3, r2
 800b2b2:	3304      	adds	r3, #4
 800b2b4:	e00b      	b.n	800b2ce <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b2b6:	7bbb      	ldrb	r3, [r7, #14]
 800b2b8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b2bc:	4613      	mov	r3, r2
 800b2be:	009b      	lsls	r3, r3, #2
 800b2c0:	4413      	add	r3, r2
 800b2c2:	009b      	lsls	r3, r3, #2
 800b2c4:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b2c8:	687a      	ldr	r2, [r7, #4]
 800b2ca:	4413      	add	r3, r2
 800b2cc:	3304      	adds	r3, #4
 800b2ce:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800b2d0:	7bbb      	ldrb	r3, [r7, #14]
 800b2d2:	2b00      	cmp	r3, #0
 800b2d4:	d002      	beq.n	800b2dc <USBD_StdEPReq+0x2d8>
 800b2d6:	7bbb      	ldrb	r3, [r7, #14]
 800b2d8:	2b80      	cmp	r3, #128	; 0x80
 800b2da:	d103      	bne.n	800b2e4 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800b2dc:	68bb      	ldr	r3, [r7, #8]
 800b2de:	2200      	movs	r2, #0
 800b2e0:	601a      	str	r2, [r3, #0]
 800b2e2:	e00e      	b.n	800b302 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800b2e4:	7bbb      	ldrb	r3, [r7, #14]
 800b2e6:	4619      	mov	r1, r3
 800b2e8:	6878      	ldr	r0, [r7, #4]
 800b2ea:	f001 f879 	bl	800c3e0 <USBD_LL_IsStallEP>
 800b2ee:	4603      	mov	r3, r0
 800b2f0:	2b00      	cmp	r3, #0
 800b2f2:	d003      	beq.n	800b2fc <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800b2f4:	68bb      	ldr	r3, [r7, #8]
 800b2f6:	2201      	movs	r2, #1
 800b2f8:	601a      	str	r2, [r3, #0]
 800b2fa:	e002      	b.n	800b302 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800b2fc:	68bb      	ldr	r3, [r7, #8]
 800b2fe:	2200      	movs	r2, #0
 800b300:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b302:	68bb      	ldr	r3, [r7, #8]
 800b304:	2202      	movs	r2, #2
 800b306:	4619      	mov	r1, r3
 800b308:	6878      	ldr	r0, [r7, #4]
 800b30a:	f000 fbd1 	bl	800bab0 <USBD_CtlSendData>
              break;
 800b30e:	e004      	b.n	800b31a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800b310:	6839      	ldr	r1, [r7, #0]
 800b312:	6878      	ldr	r0, [r7, #4]
 800b314:	f000 fb5b 	bl	800b9ce <USBD_CtlError>
              break;
 800b318:	bf00      	nop
          }
          break;
 800b31a:	e004      	b.n	800b326 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800b31c:	6839      	ldr	r1, [r7, #0]
 800b31e:	6878      	ldr	r0, [r7, #4]
 800b320:	f000 fb55 	bl	800b9ce <USBD_CtlError>
          break;
 800b324:	bf00      	nop
      }
      break;
 800b326:	e005      	b.n	800b334 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800b328:	6839      	ldr	r1, [r7, #0]
 800b32a:	6878      	ldr	r0, [r7, #4]
 800b32c:	f000 fb4f 	bl	800b9ce <USBD_CtlError>
      break;
 800b330:	e000      	b.n	800b334 <USBD_StdEPReq+0x330>
      break;
 800b332:	bf00      	nop
  }

  return ret;
 800b334:	7bfb      	ldrb	r3, [r7, #15]
}
 800b336:	4618      	mov	r0, r3
 800b338:	3710      	adds	r7, #16
 800b33a:	46bd      	mov	sp, r7
 800b33c:	bd80      	pop	{r7, pc}
	...

0800b340 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b340:	b580      	push	{r7, lr}
 800b342:	b084      	sub	sp, #16
 800b344:	af00      	add	r7, sp, #0
 800b346:	6078      	str	r0, [r7, #4]
 800b348:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b34a:	2300      	movs	r3, #0
 800b34c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800b34e:	2300      	movs	r3, #0
 800b350:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800b352:	2300      	movs	r3, #0
 800b354:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800b356:	683b      	ldr	r3, [r7, #0]
 800b358:	885b      	ldrh	r3, [r3, #2]
 800b35a:	0a1b      	lsrs	r3, r3, #8
 800b35c:	b29b      	uxth	r3, r3
 800b35e:	3b01      	subs	r3, #1
 800b360:	2b06      	cmp	r3, #6
 800b362:	f200 8128 	bhi.w	800b5b6 <USBD_GetDescriptor+0x276>
 800b366:	a201      	add	r2, pc, #4	; (adr r2, 800b36c <USBD_GetDescriptor+0x2c>)
 800b368:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b36c:	0800b389 	.word	0x0800b389
 800b370:	0800b3a1 	.word	0x0800b3a1
 800b374:	0800b3e1 	.word	0x0800b3e1
 800b378:	0800b5b7 	.word	0x0800b5b7
 800b37c:	0800b5b7 	.word	0x0800b5b7
 800b380:	0800b557 	.word	0x0800b557
 800b384:	0800b583 	.word	0x0800b583
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b38e:	681b      	ldr	r3, [r3, #0]
 800b390:	687a      	ldr	r2, [r7, #4]
 800b392:	7c12      	ldrb	r2, [r2, #16]
 800b394:	f107 0108 	add.w	r1, r7, #8
 800b398:	4610      	mov	r0, r2
 800b39a:	4798      	blx	r3
 800b39c:	60f8      	str	r0, [r7, #12]
      break;
 800b39e:	e112      	b.n	800b5c6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	7c1b      	ldrb	r3, [r3, #16]
 800b3a4:	2b00      	cmp	r3, #0
 800b3a6:	d10d      	bne.n	800b3c4 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b3ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b3b0:	f107 0208 	add.w	r2, r7, #8
 800b3b4:	4610      	mov	r0, r2
 800b3b6:	4798      	blx	r3
 800b3b8:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b3ba:	68fb      	ldr	r3, [r7, #12]
 800b3bc:	3301      	adds	r3, #1
 800b3be:	2202      	movs	r2, #2
 800b3c0:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800b3c2:	e100      	b.n	800b5c6 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b3ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3cc:	f107 0208 	add.w	r2, r7, #8
 800b3d0:	4610      	mov	r0, r2
 800b3d2:	4798      	blx	r3
 800b3d4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b3d6:	68fb      	ldr	r3, [r7, #12]
 800b3d8:	3301      	adds	r3, #1
 800b3da:	2202      	movs	r2, #2
 800b3dc:	701a      	strb	r2, [r3, #0]
      break;
 800b3de:	e0f2      	b.n	800b5c6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800b3e0:	683b      	ldr	r3, [r7, #0]
 800b3e2:	885b      	ldrh	r3, [r3, #2]
 800b3e4:	b2db      	uxtb	r3, r3
 800b3e6:	2b05      	cmp	r3, #5
 800b3e8:	f200 80ac 	bhi.w	800b544 <USBD_GetDescriptor+0x204>
 800b3ec:	a201      	add	r2, pc, #4	; (adr r2, 800b3f4 <USBD_GetDescriptor+0xb4>)
 800b3ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b3f2:	bf00      	nop
 800b3f4:	0800b40d 	.word	0x0800b40d
 800b3f8:	0800b441 	.word	0x0800b441
 800b3fc:	0800b475 	.word	0x0800b475
 800b400:	0800b4a9 	.word	0x0800b4a9
 800b404:	0800b4dd 	.word	0x0800b4dd
 800b408:	0800b511 	.word	0x0800b511
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b412:	685b      	ldr	r3, [r3, #4]
 800b414:	2b00      	cmp	r3, #0
 800b416:	d00b      	beq.n	800b430 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b41e:	685b      	ldr	r3, [r3, #4]
 800b420:	687a      	ldr	r2, [r7, #4]
 800b422:	7c12      	ldrb	r2, [r2, #16]
 800b424:	f107 0108 	add.w	r1, r7, #8
 800b428:	4610      	mov	r0, r2
 800b42a:	4798      	blx	r3
 800b42c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b42e:	e091      	b.n	800b554 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b430:	6839      	ldr	r1, [r7, #0]
 800b432:	6878      	ldr	r0, [r7, #4]
 800b434:	f000 facb 	bl	800b9ce <USBD_CtlError>
            err++;
 800b438:	7afb      	ldrb	r3, [r7, #11]
 800b43a:	3301      	adds	r3, #1
 800b43c:	72fb      	strb	r3, [r7, #11]
          break;
 800b43e:	e089      	b.n	800b554 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b446:	689b      	ldr	r3, [r3, #8]
 800b448:	2b00      	cmp	r3, #0
 800b44a:	d00b      	beq.n	800b464 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b452:	689b      	ldr	r3, [r3, #8]
 800b454:	687a      	ldr	r2, [r7, #4]
 800b456:	7c12      	ldrb	r2, [r2, #16]
 800b458:	f107 0108 	add.w	r1, r7, #8
 800b45c:	4610      	mov	r0, r2
 800b45e:	4798      	blx	r3
 800b460:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b462:	e077      	b.n	800b554 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b464:	6839      	ldr	r1, [r7, #0]
 800b466:	6878      	ldr	r0, [r7, #4]
 800b468:	f000 fab1 	bl	800b9ce <USBD_CtlError>
            err++;
 800b46c:	7afb      	ldrb	r3, [r7, #11]
 800b46e:	3301      	adds	r3, #1
 800b470:	72fb      	strb	r3, [r7, #11]
          break;
 800b472:	e06f      	b.n	800b554 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b47a:	68db      	ldr	r3, [r3, #12]
 800b47c:	2b00      	cmp	r3, #0
 800b47e:	d00b      	beq.n	800b498 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b486:	68db      	ldr	r3, [r3, #12]
 800b488:	687a      	ldr	r2, [r7, #4]
 800b48a:	7c12      	ldrb	r2, [r2, #16]
 800b48c:	f107 0108 	add.w	r1, r7, #8
 800b490:	4610      	mov	r0, r2
 800b492:	4798      	blx	r3
 800b494:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b496:	e05d      	b.n	800b554 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b498:	6839      	ldr	r1, [r7, #0]
 800b49a:	6878      	ldr	r0, [r7, #4]
 800b49c:	f000 fa97 	bl	800b9ce <USBD_CtlError>
            err++;
 800b4a0:	7afb      	ldrb	r3, [r7, #11]
 800b4a2:	3301      	adds	r3, #1
 800b4a4:	72fb      	strb	r3, [r7, #11]
          break;
 800b4a6:	e055      	b.n	800b554 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b4ae:	691b      	ldr	r3, [r3, #16]
 800b4b0:	2b00      	cmp	r3, #0
 800b4b2:	d00b      	beq.n	800b4cc <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b4ba:	691b      	ldr	r3, [r3, #16]
 800b4bc:	687a      	ldr	r2, [r7, #4]
 800b4be:	7c12      	ldrb	r2, [r2, #16]
 800b4c0:	f107 0108 	add.w	r1, r7, #8
 800b4c4:	4610      	mov	r0, r2
 800b4c6:	4798      	blx	r3
 800b4c8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b4ca:	e043      	b.n	800b554 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b4cc:	6839      	ldr	r1, [r7, #0]
 800b4ce:	6878      	ldr	r0, [r7, #4]
 800b4d0:	f000 fa7d 	bl	800b9ce <USBD_CtlError>
            err++;
 800b4d4:	7afb      	ldrb	r3, [r7, #11]
 800b4d6:	3301      	adds	r3, #1
 800b4d8:	72fb      	strb	r3, [r7, #11]
          break;
 800b4da:	e03b      	b.n	800b554 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b4e2:	695b      	ldr	r3, [r3, #20]
 800b4e4:	2b00      	cmp	r3, #0
 800b4e6:	d00b      	beq.n	800b500 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b4ee:	695b      	ldr	r3, [r3, #20]
 800b4f0:	687a      	ldr	r2, [r7, #4]
 800b4f2:	7c12      	ldrb	r2, [r2, #16]
 800b4f4:	f107 0108 	add.w	r1, r7, #8
 800b4f8:	4610      	mov	r0, r2
 800b4fa:	4798      	blx	r3
 800b4fc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b4fe:	e029      	b.n	800b554 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b500:	6839      	ldr	r1, [r7, #0]
 800b502:	6878      	ldr	r0, [r7, #4]
 800b504:	f000 fa63 	bl	800b9ce <USBD_CtlError>
            err++;
 800b508:	7afb      	ldrb	r3, [r7, #11]
 800b50a:	3301      	adds	r3, #1
 800b50c:	72fb      	strb	r3, [r7, #11]
          break;
 800b50e:	e021      	b.n	800b554 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b516:	699b      	ldr	r3, [r3, #24]
 800b518:	2b00      	cmp	r3, #0
 800b51a:	d00b      	beq.n	800b534 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b522:	699b      	ldr	r3, [r3, #24]
 800b524:	687a      	ldr	r2, [r7, #4]
 800b526:	7c12      	ldrb	r2, [r2, #16]
 800b528:	f107 0108 	add.w	r1, r7, #8
 800b52c:	4610      	mov	r0, r2
 800b52e:	4798      	blx	r3
 800b530:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b532:	e00f      	b.n	800b554 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b534:	6839      	ldr	r1, [r7, #0]
 800b536:	6878      	ldr	r0, [r7, #4]
 800b538:	f000 fa49 	bl	800b9ce <USBD_CtlError>
            err++;
 800b53c:	7afb      	ldrb	r3, [r7, #11]
 800b53e:	3301      	adds	r3, #1
 800b540:	72fb      	strb	r3, [r7, #11]
          break;
 800b542:	e007      	b.n	800b554 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800b544:	6839      	ldr	r1, [r7, #0]
 800b546:	6878      	ldr	r0, [r7, #4]
 800b548:	f000 fa41 	bl	800b9ce <USBD_CtlError>
          err++;
 800b54c:	7afb      	ldrb	r3, [r7, #11]
 800b54e:	3301      	adds	r3, #1
 800b550:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800b552:	bf00      	nop
      }
      break;
 800b554:	e037      	b.n	800b5c6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	7c1b      	ldrb	r3, [r3, #16]
 800b55a:	2b00      	cmp	r3, #0
 800b55c:	d109      	bne.n	800b572 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b564:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b566:	f107 0208 	add.w	r2, r7, #8
 800b56a:	4610      	mov	r0, r2
 800b56c:	4798      	blx	r3
 800b56e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b570:	e029      	b.n	800b5c6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800b572:	6839      	ldr	r1, [r7, #0]
 800b574:	6878      	ldr	r0, [r7, #4]
 800b576:	f000 fa2a 	bl	800b9ce <USBD_CtlError>
        err++;
 800b57a:	7afb      	ldrb	r3, [r7, #11]
 800b57c:	3301      	adds	r3, #1
 800b57e:	72fb      	strb	r3, [r7, #11]
      break;
 800b580:	e021      	b.n	800b5c6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	7c1b      	ldrb	r3, [r3, #16]
 800b586:	2b00      	cmp	r3, #0
 800b588:	d10d      	bne.n	800b5a6 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b592:	f107 0208 	add.w	r2, r7, #8
 800b596:	4610      	mov	r0, r2
 800b598:	4798      	blx	r3
 800b59a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800b59c:	68fb      	ldr	r3, [r7, #12]
 800b59e:	3301      	adds	r3, #1
 800b5a0:	2207      	movs	r2, #7
 800b5a2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b5a4:	e00f      	b.n	800b5c6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800b5a6:	6839      	ldr	r1, [r7, #0]
 800b5a8:	6878      	ldr	r0, [r7, #4]
 800b5aa:	f000 fa10 	bl	800b9ce <USBD_CtlError>
        err++;
 800b5ae:	7afb      	ldrb	r3, [r7, #11]
 800b5b0:	3301      	adds	r3, #1
 800b5b2:	72fb      	strb	r3, [r7, #11]
      break;
 800b5b4:	e007      	b.n	800b5c6 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800b5b6:	6839      	ldr	r1, [r7, #0]
 800b5b8:	6878      	ldr	r0, [r7, #4]
 800b5ba:	f000 fa08 	bl	800b9ce <USBD_CtlError>
      err++;
 800b5be:	7afb      	ldrb	r3, [r7, #11]
 800b5c0:	3301      	adds	r3, #1
 800b5c2:	72fb      	strb	r3, [r7, #11]
      break;
 800b5c4:	bf00      	nop
  }

  if (err != 0U)
 800b5c6:	7afb      	ldrb	r3, [r7, #11]
 800b5c8:	2b00      	cmp	r3, #0
 800b5ca:	d11e      	bne.n	800b60a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800b5cc:	683b      	ldr	r3, [r7, #0]
 800b5ce:	88db      	ldrh	r3, [r3, #6]
 800b5d0:	2b00      	cmp	r3, #0
 800b5d2:	d016      	beq.n	800b602 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800b5d4:	893b      	ldrh	r3, [r7, #8]
 800b5d6:	2b00      	cmp	r3, #0
 800b5d8:	d00e      	beq.n	800b5f8 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800b5da:	683b      	ldr	r3, [r7, #0]
 800b5dc:	88da      	ldrh	r2, [r3, #6]
 800b5de:	893b      	ldrh	r3, [r7, #8]
 800b5e0:	4293      	cmp	r3, r2
 800b5e2:	bf28      	it	cs
 800b5e4:	4613      	movcs	r3, r2
 800b5e6:	b29b      	uxth	r3, r3
 800b5e8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800b5ea:	893b      	ldrh	r3, [r7, #8]
 800b5ec:	461a      	mov	r2, r3
 800b5ee:	68f9      	ldr	r1, [r7, #12]
 800b5f0:	6878      	ldr	r0, [r7, #4]
 800b5f2:	f000 fa5d 	bl	800bab0 <USBD_CtlSendData>
 800b5f6:	e009      	b.n	800b60c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800b5f8:	6839      	ldr	r1, [r7, #0]
 800b5fa:	6878      	ldr	r0, [r7, #4]
 800b5fc:	f000 f9e7 	bl	800b9ce <USBD_CtlError>
 800b600:	e004      	b.n	800b60c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800b602:	6878      	ldr	r0, [r7, #4]
 800b604:	f000 fa91 	bl	800bb2a <USBD_CtlSendStatus>
 800b608:	e000      	b.n	800b60c <USBD_GetDescriptor+0x2cc>
    return;
 800b60a:	bf00      	nop
  }
}
 800b60c:	3710      	adds	r7, #16
 800b60e:	46bd      	mov	sp, r7
 800b610:	bd80      	pop	{r7, pc}
 800b612:	bf00      	nop

0800b614 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b614:	b580      	push	{r7, lr}
 800b616:	b084      	sub	sp, #16
 800b618:	af00      	add	r7, sp, #0
 800b61a:	6078      	str	r0, [r7, #4]
 800b61c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800b61e:	683b      	ldr	r3, [r7, #0]
 800b620:	889b      	ldrh	r3, [r3, #4]
 800b622:	2b00      	cmp	r3, #0
 800b624:	d131      	bne.n	800b68a <USBD_SetAddress+0x76>
 800b626:	683b      	ldr	r3, [r7, #0]
 800b628:	88db      	ldrh	r3, [r3, #6]
 800b62a:	2b00      	cmp	r3, #0
 800b62c:	d12d      	bne.n	800b68a <USBD_SetAddress+0x76>
 800b62e:	683b      	ldr	r3, [r7, #0]
 800b630:	885b      	ldrh	r3, [r3, #2]
 800b632:	2b7f      	cmp	r3, #127	; 0x7f
 800b634:	d829      	bhi.n	800b68a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800b636:	683b      	ldr	r3, [r7, #0]
 800b638:	885b      	ldrh	r3, [r3, #2]
 800b63a:	b2db      	uxtb	r3, r3
 800b63c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b640:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b648:	b2db      	uxtb	r3, r3
 800b64a:	2b03      	cmp	r3, #3
 800b64c:	d104      	bne.n	800b658 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800b64e:	6839      	ldr	r1, [r7, #0]
 800b650:	6878      	ldr	r0, [r7, #4]
 800b652:	f000 f9bc 	bl	800b9ce <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b656:	e01d      	b.n	800b694 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	7bfa      	ldrb	r2, [r7, #15]
 800b65c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800b660:	7bfb      	ldrb	r3, [r7, #15]
 800b662:	4619      	mov	r1, r3
 800b664:	6878      	ldr	r0, [r7, #4]
 800b666:	f000 fee7 	bl	800c438 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800b66a:	6878      	ldr	r0, [r7, #4]
 800b66c:	f000 fa5d 	bl	800bb2a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800b670:	7bfb      	ldrb	r3, [r7, #15]
 800b672:	2b00      	cmp	r3, #0
 800b674:	d004      	beq.n	800b680 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	2202      	movs	r2, #2
 800b67a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b67e:	e009      	b.n	800b694 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	2201      	movs	r2, #1
 800b684:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b688:	e004      	b.n	800b694 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800b68a:	6839      	ldr	r1, [r7, #0]
 800b68c:	6878      	ldr	r0, [r7, #4]
 800b68e:	f000 f99e 	bl	800b9ce <USBD_CtlError>
  }
}
 800b692:	bf00      	nop
 800b694:	bf00      	nop
 800b696:	3710      	adds	r7, #16
 800b698:	46bd      	mov	sp, r7
 800b69a:	bd80      	pop	{r7, pc}

0800b69c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b69c:	b580      	push	{r7, lr}
 800b69e:	b084      	sub	sp, #16
 800b6a0:	af00      	add	r7, sp, #0
 800b6a2:	6078      	str	r0, [r7, #4]
 800b6a4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b6a6:	2300      	movs	r3, #0
 800b6a8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800b6aa:	683b      	ldr	r3, [r7, #0]
 800b6ac:	885b      	ldrh	r3, [r3, #2]
 800b6ae:	b2da      	uxtb	r2, r3
 800b6b0:	4b4e      	ldr	r3, [pc, #312]	; (800b7ec <USBD_SetConfig+0x150>)
 800b6b2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800b6b4:	4b4d      	ldr	r3, [pc, #308]	; (800b7ec <USBD_SetConfig+0x150>)
 800b6b6:	781b      	ldrb	r3, [r3, #0]
 800b6b8:	2b01      	cmp	r3, #1
 800b6ba:	d905      	bls.n	800b6c8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800b6bc:	6839      	ldr	r1, [r7, #0]
 800b6be:	6878      	ldr	r0, [r7, #4]
 800b6c0:	f000 f985 	bl	800b9ce <USBD_CtlError>
    return USBD_FAIL;
 800b6c4:	2303      	movs	r3, #3
 800b6c6:	e08c      	b.n	800b7e2 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b6ce:	b2db      	uxtb	r3, r3
 800b6d0:	2b02      	cmp	r3, #2
 800b6d2:	d002      	beq.n	800b6da <USBD_SetConfig+0x3e>
 800b6d4:	2b03      	cmp	r3, #3
 800b6d6:	d029      	beq.n	800b72c <USBD_SetConfig+0x90>
 800b6d8:	e075      	b.n	800b7c6 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800b6da:	4b44      	ldr	r3, [pc, #272]	; (800b7ec <USBD_SetConfig+0x150>)
 800b6dc:	781b      	ldrb	r3, [r3, #0]
 800b6de:	2b00      	cmp	r3, #0
 800b6e0:	d020      	beq.n	800b724 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800b6e2:	4b42      	ldr	r3, [pc, #264]	; (800b7ec <USBD_SetConfig+0x150>)
 800b6e4:	781b      	ldrb	r3, [r3, #0]
 800b6e6:	461a      	mov	r2, r3
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b6ec:	4b3f      	ldr	r3, [pc, #252]	; (800b7ec <USBD_SetConfig+0x150>)
 800b6ee:	781b      	ldrb	r3, [r3, #0]
 800b6f0:	4619      	mov	r1, r3
 800b6f2:	6878      	ldr	r0, [r7, #4]
 800b6f4:	f7fe ffe7 	bl	800a6c6 <USBD_SetClassConfig>
 800b6f8:	4603      	mov	r3, r0
 800b6fa:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800b6fc:	7bfb      	ldrb	r3, [r7, #15]
 800b6fe:	2b00      	cmp	r3, #0
 800b700:	d008      	beq.n	800b714 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800b702:	6839      	ldr	r1, [r7, #0]
 800b704:	6878      	ldr	r0, [r7, #4]
 800b706:	f000 f962 	bl	800b9ce <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	2202      	movs	r2, #2
 800b70e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b712:	e065      	b.n	800b7e0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800b714:	6878      	ldr	r0, [r7, #4]
 800b716:	f000 fa08 	bl	800bb2a <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	2203      	movs	r2, #3
 800b71e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800b722:	e05d      	b.n	800b7e0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800b724:	6878      	ldr	r0, [r7, #4]
 800b726:	f000 fa00 	bl	800bb2a <USBD_CtlSendStatus>
      break;
 800b72a:	e059      	b.n	800b7e0 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800b72c:	4b2f      	ldr	r3, [pc, #188]	; (800b7ec <USBD_SetConfig+0x150>)
 800b72e:	781b      	ldrb	r3, [r3, #0]
 800b730:	2b00      	cmp	r3, #0
 800b732:	d112      	bne.n	800b75a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	2202      	movs	r2, #2
 800b738:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800b73c:	4b2b      	ldr	r3, [pc, #172]	; (800b7ec <USBD_SetConfig+0x150>)
 800b73e:	781b      	ldrb	r3, [r3, #0]
 800b740:	461a      	mov	r2, r3
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b746:	4b29      	ldr	r3, [pc, #164]	; (800b7ec <USBD_SetConfig+0x150>)
 800b748:	781b      	ldrb	r3, [r3, #0]
 800b74a:	4619      	mov	r1, r3
 800b74c:	6878      	ldr	r0, [r7, #4]
 800b74e:	f7fe ffd6 	bl	800a6fe <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800b752:	6878      	ldr	r0, [r7, #4]
 800b754:	f000 f9e9 	bl	800bb2a <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b758:	e042      	b.n	800b7e0 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800b75a:	4b24      	ldr	r3, [pc, #144]	; (800b7ec <USBD_SetConfig+0x150>)
 800b75c:	781b      	ldrb	r3, [r3, #0]
 800b75e:	461a      	mov	r2, r3
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	685b      	ldr	r3, [r3, #4]
 800b764:	429a      	cmp	r2, r3
 800b766:	d02a      	beq.n	800b7be <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	685b      	ldr	r3, [r3, #4]
 800b76c:	b2db      	uxtb	r3, r3
 800b76e:	4619      	mov	r1, r3
 800b770:	6878      	ldr	r0, [r7, #4]
 800b772:	f7fe ffc4 	bl	800a6fe <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800b776:	4b1d      	ldr	r3, [pc, #116]	; (800b7ec <USBD_SetConfig+0x150>)
 800b778:	781b      	ldrb	r3, [r3, #0]
 800b77a:	461a      	mov	r2, r3
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b780:	4b1a      	ldr	r3, [pc, #104]	; (800b7ec <USBD_SetConfig+0x150>)
 800b782:	781b      	ldrb	r3, [r3, #0]
 800b784:	4619      	mov	r1, r3
 800b786:	6878      	ldr	r0, [r7, #4]
 800b788:	f7fe ff9d 	bl	800a6c6 <USBD_SetClassConfig>
 800b78c:	4603      	mov	r3, r0
 800b78e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800b790:	7bfb      	ldrb	r3, [r7, #15]
 800b792:	2b00      	cmp	r3, #0
 800b794:	d00f      	beq.n	800b7b6 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800b796:	6839      	ldr	r1, [r7, #0]
 800b798:	6878      	ldr	r0, [r7, #4]
 800b79a:	f000 f918 	bl	800b9ce <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	685b      	ldr	r3, [r3, #4]
 800b7a2:	b2db      	uxtb	r3, r3
 800b7a4:	4619      	mov	r1, r3
 800b7a6:	6878      	ldr	r0, [r7, #4]
 800b7a8:	f7fe ffa9 	bl	800a6fe <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	2202      	movs	r2, #2
 800b7b0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800b7b4:	e014      	b.n	800b7e0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800b7b6:	6878      	ldr	r0, [r7, #4]
 800b7b8:	f000 f9b7 	bl	800bb2a <USBD_CtlSendStatus>
      break;
 800b7bc:	e010      	b.n	800b7e0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800b7be:	6878      	ldr	r0, [r7, #4]
 800b7c0:	f000 f9b3 	bl	800bb2a <USBD_CtlSendStatus>
      break;
 800b7c4:	e00c      	b.n	800b7e0 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800b7c6:	6839      	ldr	r1, [r7, #0]
 800b7c8:	6878      	ldr	r0, [r7, #4]
 800b7ca:	f000 f900 	bl	800b9ce <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b7ce:	4b07      	ldr	r3, [pc, #28]	; (800b7ec <USBD_SetConfig+0x150>)
 800b7d0:	781b      	ldrb	r3, [r3, #0]
 800b7d2:	4619      	mov	r1, r3
 800b7d4:	6878      	ldr	r0, [r7, #4]
 800b7d6:	f7fe ff92 	bl	800a6fe <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800b7da:	2303      	movs	r3, #3
 800b7dc:	73fb      	strb	r3, [r7, #15]
      break;
 800b7de:	bf00      	nop
  }

  return ret;
 800b7e0:	7bfb      	ldrb	r3, [r7, #15]
}
 800b7e2:	4618      	mov	r0, r3
 800b7e4:	3710      	adds	r7, #16
 800b7e6:	46bd      	mov	sp, r7
 800b7e8:	bd80      	pop	{r7, pc}
 800b7ea:	bf00      	nop
 800b7ec:	20001280 	.word	0x20001280

0800b7f0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b7f0:	b580      	push	{r7, lr}
 800b7f2:	b082      	sub	sp, #8
 800b7f4:	af00      	add	r7, sp, #0
 800b7f6:	6078      	str	r0, [r7, #4]
 800b7f8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800b7fa:	683b      	ldr	r3, [r7, #0]
 800b7fc:	88db      	ldrh	r3, [r3, #6]
 800b7fe:	2b01      	cmp	r3, #1
 800b800:	d004      	beq.n	800b80c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800b802:	6839      	ldr	r1, [r7, #0]
 800b804:	6878      	ldr	r0, [r7, #4]
 800b806:	f000 f8e2 	bl	800b9ce <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800b80a:	e023      	b.n	800b854 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b812:	b2db      	uxtb	r3, r3
 800b814:	2b02      	cmp	r3, #2
 800b816:	dc02      	bgt.n	800b81e <USBD_GetConfig+0x2e>
 800b818:	2b00      	cmp	r3, #0
 800b81a:	dc03      	bgt.n	800b824 <USBD_GetConfig+0x34>
 800b81c:	e015      	b.n	800b84a <USBD_GetConfig+0x5a>
 800b81e:	2b03      	cmp	r3, #3
 800b820:	d00b      	beq.n	800b83a <USBD_GetConfig+0x4a>
 800b822:	e012      	b.n	800b84a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	2200      	movs	r2, #0
 800b828:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	3308      	adds	r3, #8
 800b82e:	2201      	movs	r2, #1
 800b830:	4619      	mov	r1, r3
 800b832:	6878      	ldr	r0, [r7, #4]
 800b834:	f000 f93c 	bl	800bab0 <USBD_CtlSendData>
        break;
 800b838:	e00c      	b.n	800b854 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	3304      	adds	r3, #4
 800b83e:	2201      	movs	r2, #1
 800b840:	4619      	mov	r1, r3
 800b842:	6878      	ldr	r0, [r7, #4]
 800b844:	f000 f934 	bl	800bab0 <USBD_CtlSendData>
        break;
 800b848:	e004      	b.n	800b854 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800b84a:	6839      	ldr	r1, [r7, #0]
 800b84c:	6878      	ldr	r0, [r7, #4]
 800b84e:	f000 f8be 	bl	800b9ce <USBD_CtlError>
        break;
 800b852:	bf00      	nop
}
 800b854:	bf00      	nop
 800b856:	3708      	adds	r7, #8
 800b858:	46bd      	mov	sp, r7
 800b85a:	bd80      	pop	{r7, pc}

0800b85c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b85c:	b580      	push	{r7, lr}
 800b85e:	b082      	sub	sp, #8
 800b860:	af00      	add	r7, sp, #0
 800b862:	6078      	str	r0, [r7, #4]
 800b864:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b86c:	b2db      	uxtb	r3, r3
 800b86e:	3b01      	subs	r3, #1
 800b870:	2b02      	cmp	r3, #2
 800b872:	d81e      	bhi.n	800b8b2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800b874:	683b      	ldr	r3, [r7, #0]
 800b876:	88db      	ldrh	r3, [r3, #6]
 800b878:	2b02      	cmp	r3, #2
 800b87a:	d004      	beq.n	800b886 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800b87c:	6839      	ldr	r1, [r7, #0]
 800b87e:	6878      	ldr	r0, [r7, #4]
 800b880:	f000 f8a5 	bl	800b9ce <USBD_CtlError>
        break;
 800b884:	e01a      	b.n	800b8bc <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	2201      	movs	r2, #1
 800b88a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800b892:	2b00      	cmp	r3, #0
 800b894:	d005      	beq.n	800b8a2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	68db      	ldr	r3, [r3, #12]
 800b89a:	f043 0202 	orr.w	r2, r3, #2
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	330c      	adds	r3, #12
 800b8a6:	2202      	movs	r2, #2
 800b8a8:	4619      	mov	r1, r3
 800b8aa:	6878      	ldr	r0, [r7, #4]
 800b8ac:	f000 f900 	bl	800bab0 <USBD_CtlSendData>
      break;
 800b8b0:	e004      	b.n	800b8bc <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800b8b2:	6839      	ldr	r1, [r7, #0]
 800b8b4:	6878      	ldr	r0, [r7, #4]
 800b8b6:	f000 f88a 	bl	800b9ce <USBD_CtlError>
      break;
 800b8ba:	bf00      	nop
  }
}
 800b8bc:	bf00      	nop
 800b8be:	3708      	adds	r7, #8
 800b8c0:	46bd      	mov	sp, r7
 800b8c2:	bd80      	pop	{r7, pc}

0800b8c4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b8c4:	b580      	push	{r7, lr}
 800b8c6:	b082      	sub	sp, #8
 800b8c8:	af00      	add	r7, sp, #0
 800b8ca:	6078      	str	r0, [r7, #4]
 800b8cc:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b8ce:	683b      	ldr	r3, [r7, #0]
 800b8d0:	885b      	ldrh	r3, [r3, #2]
 800b8d2:	2b01      	cmp	r3, #1
 800b8d4:	d107      	bne.n	800b8e6 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	2201      	movs	r2, #1
 800b8da:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800b8de:	6878      	ldr	r0, [r7, #4]
 800b8e0:	f000 f923 	bl	800bb2a <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800b8e4:	e013      	b.n	800b90e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800b8e6:	683b      	ldr	r3, [r7, #0]
 800b8e8:	885b      	ldrh	r3, [r3, #2]
 800b8ea:	2b02      	cmp	r3, #2
 800b8ec:	d10b      	bne.n	800b906 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800b8ee:	683b      	ldr	r3, [r7, #0]
 800b8f0:	889b      	ldrh	r3, [r3, #4]
 800b8f2:	0a1b      	lsrs	r3, r3, #8
 800b8f4:	b29b      	uxth	r3, r3
 800b8f6:	b2da      	uxtb	r2, r3
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800b8fe:	6878      	ldr	r0, [r7, #4]
 800b900:	f000 f913 	bl	800bb2a <USBD_CtlSendStatus>
}
 800b904:	e003      	b.n	800b90e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800b906:	6839      	ldr	r1, [r7, #0]
 800b908:	6878      	ldr	r0, [r7, #4]
 800b90a:	f000 f860 	bl	800b9ce <USBD_CtlError>
}
 800b90e:	bf00      	nop
 800b910:	3708      	adds	r7, #8
 800b912:	46bd      	mov	sp, r7
 800b914:	bd80      	pop	{r7, pc}

0800b916 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b916:	b580      	push	{r7, lr}
 800b918:	b082      	sub	sp, #8
 800b91a:	af00      	add	r7, sp, #0
 800b91c:	6078      	str	r0, [r7, #4]
 800b91e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b926:	b2db      	uxtb	r3, r3
 800b928:	3b01      	subs	r3, #1
 800b92a:	2b02      	cmp	r3, #2
 800b92c:	d80b      	bhi.n	800b946 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b92e:	683b      	ldr	r3, [r7, #0]
 800b930:	885b      	ldrh	r3, [r3, #2]
 800b932:	2b01      	cmp	r3, #1
 800b934:	d10c      	bne.n	800b950 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	2200      	movs	r2, #0
 800b93a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800b93e:	6878      	ldr	r0, [r7, #4]
 800b940:	f000 f8f3 	bl	800bb2a <USBD_CtlSendStatus>
      }
      break;
 800b944:	e004      	b.n	800b950 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800b946:	6839      	ldr	r1, [r7, #0]
 800b948:	6878      	ldr	r0, [r7, #4]
 800b94a:	f000 f840 	bl	800b9ce <USBD_CtlError>
      break;
 800b94e:	e000      	b.n	800b952 <USBD_ClrFeature+0x3c>
      break;
 800b950:	bf00      	nop
  }
}
 800b952:	bf00      	nop
 800b954:	3708      	adds	r7, #8
 800b956:	46bd      	mov	sp, r7
 800b958:	bd80      	pop	{r7, pc}

0800b95a <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800b95a:	b580      	push	{r7, lr}
 800b95c:	b084      	sub	sp, #16
 800b95e:	af00      	add	r7, sp, #0
 800b960:	6078      	str	r0, [r7, #4]
 800b962:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800b964:	683b      	ldr	r3, [r7, #0]
 800b966:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800b968:	68fb      	ldr	r3, [r7, #12]
 800b96a:	781a      	ldrb	r2, [r3, #0]
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800b970:	68fb      	ldr	r3, [r7, #12]
 800b972:	3301      	adds	r3, #1
 800b974:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800b976:	68fb      	ldr	r3, [r7, #12]
 800b978:	781a      	ldrb	r2, [r3, #0]
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800b97e:	68fb      	ldr	r3, [r7, #12]
 800b980:	3301      	adds	r3, #1
 800b982:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800b984:	68f8      	ldr	r0, [r7, #12]
 800b986:	f7ff fa41 	bl	800ae0c <SWAPBYTE>
 800b98a:	4603      	mov	r3, r0
 800b98c:	461a      	mov	r2, r3
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800b992:	68fb      	ldr	r3, [r7, #12]
 800b994:	3301      	adds	r3, #1
 800b996:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b998:	68fb      	ldr	r3, [r7, #12]
 800b99a:	3301      	adds	r3, #1
 800b99c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800b99e:	68f8      	ldr	r0, [r7, #12]
 800b9a0:	f7ff fa34 	bl	800ae0c <SWAPBYTE>
 800b9a4:	4603      	mov	r3, r0
 800b9a6:	461a      	mov	r2, r3
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800b9ac:	68fb      	ldr	r3, [r7, #12]
 800b9ae:	3301      	adds	r3, #1
 800b9b0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b9b2:	68fb      	ldr	r3, [r7, #12]
 800b9b4:	3301      	adds	r3, #1
 800b9b6:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800b9b8:	68f8      	ldr	r0, [r7, #12]
 800b9ba:	f7ff fa27 	bl	800ae0c <SWAPBYTE>
 800b9be:	4603      	mov	r3, r0
 800b9c0:	461a      	mov	r2, r3
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	80da      	strh	r2, [r3, #6]
}
 800b9c6:	bf00      	nop
 800b9c8:	3710      	adds	r7, #16
 800b9ca:	46bd      	mov	sp, r7
 800b9cc:	bd80      	pop	{r7, pc}

0800b9ce <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b9ce:	b580      	push	{r7, lr}
 800b9d0:	b082      	sub	sp, #8
 800b9d2:	af00      	add	r7, sp, #0
 800b9d4:	6078      	str	r0, [r7, #4]
 800b9d6:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800b9d8:	2180      	movs	r1, #128	; 0x80
 800b9da:	6878      	ldr	r0, [r7, #4]
 800b9dc:	f000 fcc2 	bl	800c364 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800b9e0:	2100      	movs	r1, #0
 800b9e2:	6878      	ldr	r0, [r7, #4]
 800b9e4:	f000 fcbe 	bl	800c364 <USBD_LL_StallEP>
}
 800b9e8:	bf00      	nop
 800b9ea:	3708      	adds	r7, #8
 800b9ec:	46bd      	mov	sp, r7
 800b9ee:	bd80      	pop	{r7, pc}

0800b9f0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800b9f0:	b580      	push	{r7, lr}
 800b9f2:	b086      	sub	sp, #24
 800b9f4:	af00      	add	r7, sp, #0
 800b9f6:	60f8      	str	r0, [r7, #12]
 800b9f8:	60b9      	str	r1, [r7, #8]
 800b9fa:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800b9fc:	2300      	movs	r3, #0
 800b9fe:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800ba00:	68fb      	ldr	r3, [r7, #12]
 800ba02:	2b00      	cmp	r3, #0
 800ba04:	d036      	beq.n	800ba74 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800ba06:	68fb      	ldr	r3, [r7, #12]
 800ba08:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800ba0a:	6938      	ldr	r0, [r7, #16]
 800ba0c:	f000 f836 	bl	800ba7c <USBD_GetLen>
 800ba10:	4603      	mov	r3, r0
 800ba12:	3301      	adds	r3, #1
 800ba14:	b29b      	uxth	r3, r3
 800ba16:	005b      	lsls	r3, r3, #1
 800ba18:	b29a      	uxth	r2, r3
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800ba1e:	7dfb      	ldrb	r3, [r7, #23]
 800ba20:	68ba      	ldr	r2, [r7, #8]
 800ba22:	4413      	add	r3, r2
 800ba24:	687a      	ldr	r2, [r7, #4]
 800ba26:	7812      	ldrb	r2, [r2, #0]
 800ba28:	701a      	strb	r2, [r3, #0]
  idx++;
 800ba2a:	7dfb      	ldrb	r3, [r7, #23]
 800ba2c:	3301      	adds	r3, #1
 800ba2e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800ba30:	7dfb      	ldrb	r3, [r7, #23]
 800ba32:	68ba      	ldr	r2, [r7, #8]
 800ba34:	4413      	add	r3, r2
 800ba36:	2203      	movs	r2, #3
 800ba38:	701a      	strb	r2, [r3, #0]
  idx++;
 800ba3a:	7dfb      	ldrb	r3, [r7, #23]
 800ba3c:	3301      	adds	r3, #1
 800ba3e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800ba40:	e013      	b.n	800ba6a <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800ba42:	7dfb      	ldrb	r3, [r7, #23]
 800ba44:	68ba      	ldr	r2, [r7, #8]
 800ba46:	4413      	add	r3, r2
 800ba48:	693a      	ldr	r2, [r7, #16]
 800ba4a:	7812      	ldrb	r2, [r2, #0]
 800ba4c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800ba4e:	693b      	ldr	r3, [r7, #16]
 800ba50:	3301      	adds	r3, #1
 800ba52:	613b      	str	r3, [r7, #16]
    idx++;
 800ba54:	7dfb      	ldrb	r3, [r7, #23]
 800ba56:	3301      	adds	r3, #1
 800ba58:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800ba5a:	7dfb      	ldrb	r3, [r7, #23]
 800ba5c:	68ba      	ldr	r2, [r7, #8]
 800ba5e:	4413      	add	r3, r2
 800ba60:	2200      	movs	r2, #0
 800ba62:	701a      	strb	r2, [r3, #0]
    idx++;
 800ba64:	7dfb      	ldrb	r3, [r7, #23]
 800ba66:	3301      	adds	r3, #1
 800ba68:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800ba6a:	693b      	ldr	r3, [r7, #16]
 800ba6c:	781b      	ldrb	r3, [r3, #0]
 800ba6e:	2b00      	cmp	r3, #0
 800ba70:	d1e7      	bne.n	800ba42 <USBD_GetString+0x52>
 800ba72:	e000      	b.n	800ba76 <USBD_GetString+0x86>
    return;
 800ba74:	bf00      	nop
  }
}
 800ba76:	3718      	adds	r7, #24
 800ba78:	46bd      	mov	sp, r7
 800ba7a:	bd80      	pop	{r7, pc}

0800ba7c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800ba7c:	b480      	push	{r7}
 800ba7e:	b085      	sub	sp, #20
 800ba80:	af00      	add	r7, sp, #0
 800ba82:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800ba84:	2300      	movs	r3, #0
 800ba86:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800ba8c:	e005      	b.n	800ba9a <USBD_GetLen+0x1e>
  {
    len++;
 800ba8e:	7bfb      	ldrb	r3, [r7, #15]
 800ba90:	3301      	adds	r3, #1
 800ba92:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800ba94:	68bb      	ldr	r3, [r7, #8]
 800ba96:	3301      	adds	r3, #1
 800ba98:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800ba9a:	68bb      	ldr	r3, [r7, #8]
 800ba9c:	781b      	ldrb	r3, [r3, #0]
 800ba9e:	2b00      	cmp	r3, #0
 800baa0:	d1f5      	bne.n	800ba8e <USBD_GetLen+0x12>
  }

  return len;
 800baa2:	7bfb      	ldrb	r3, [r7, #15]
}
 800baa4:	4618      	mov	r0, r3
 800baa6:	3714      	adds	r7, #20
 800baa8:	46bd      	mov	sp, r7
 800baaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baae:	4770      	bx	lr

0800bab0 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800bab0:	b580      	push	{r7, lr}
 800bab2:	b084      	sub	sp, #16
 800bab4:	af00      	add	r7, sp, #0
 800bab6:	60f8      	str	r0, [r7, #12]
 800bab8:	60b9      	str	r1, [r7, #8]
 800baba:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800babc:	68fb      	ldr	r3, [r7, #12]
 800babe:	2202      	movs	r2, #2
 800bac0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800bac4:	68fb      	ldr	r3, [r7, #12]
 800bac6:	687a      	ldr	r2, [r7, #4]
 800bac8:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800baca:	68fb      	ldr	r3, [r7, #12]
 800bacc:	687a      	ldr	r2, [r7, #4]
 800bace:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	68ba      	ldr	r2, [r7, #8]
 800bad4:	2100      	movs	r1, #0
 800bad6:	68f8      	ldr	r0, [r7, #12]
 800bad8:	f000 fccd 	bl	800c476 <USBD_LL_Transmit>

  return USBD_OK;
 800badc:	2300      	movs	r3, #0
}
 800bade:	4618      	mov	r0, r3
 800bae0:	3710      	adds	r7, #16
 800bae2:	46bd      	mov	sp, r7
 800bae4:	bd80      	pop	{r7, pc}

0800bae6 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800bae6:	b580      	push	{r7, lr}
 800bae8:	b084      	sub	sp, #16
 800baea:	af00      	add	r7, sp, #0
 800baec:	60f8      	str	r0, [r7, #12]
 800baee:	60b9      	str	r1, [r7, #8]
 800baf0:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	68ba      	ldr	r2, [r7, #8]
 800baf6:	2100      	movs	r1, #0
 800baf8:	68f8      	ldr	r0, [r7, #12]
 800bafa:	f000 fcbc 	bl	800c476 <USBD_LL_Transmit>

  return USBD_OK;
 800bafe:	2300      	movs	r3, #0
}
 800bb00:	4618      	mov	r0, r3
 800bb02:	3710      	adds	r7, #16
 800bb04:	46bd      	mov	sp, r7
 800bb06:	bd80      	pop	{r7, pc}

0800bb08 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800bb08:	b580      	push	{r7, lr}
 800bb0a:	b084      	sub	sp, #16
 800bb0c:	af00      	add	r7, sp, #0
 800bb0e:	60f8      	str	r0, [r7, #12]
 800bb10:	60b9      	str	r1, [r7, #8]
 800bb12:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	68ba      	ldr	r2, [r7, #8]
 800bb18:	2100      	movs	r1, #0
 800bb1a:	68f8      	ldr	r0, [r7, #12]
 800bb1c:	f000 fccc 	bl	800c4b8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800bb20:	2300      	movs	r3, #0
}
 800bb22:	4618      	mov	r0, r3
 800bb24:	3710      	adds	r7, #16
 800bb26:	46bd      	mov	sp, r7
 800bb28:	bd80      	pop	{r7, pc}

0800bb2a <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800bb2a:	b580      	push	{r7, lr}
 800bb2c:	b082      	sub	sp, #8
 800bb2e:	af00      	add	r7, sp, #0
 800bb30:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	2204      	movs	r2, #4
 800bb36:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800bb3a:	2300      	movs	r3, #0
 800bb3c:	2200      	movs	r2, #0
 800bb3e:	2100      	movs	r1, #0
 800bb40:	6878      	ldr	r0, [r7, #4]
 800bb42:	f000 fc98 	bl	800c476 <USBD_LL_Transmit>

  return USBD_OK;
 800bb46:	2300      	movs	r3, #0
}
 800bb48:	4618      	mov	r0, r3
 800bb4a:	3708      	adds	r7, #8
 800bb4c:	46bd      	mov	sp, r7
 800bb4e:	bd80      	pop	{r7, pc}

0800bb50 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800bb50:	b580      	push	{r7, lr}
 800bb52:	b082      	sub	sp, #8
 800bb54:	af00      	add	r7, sp, #0
 800bb56:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	2205      	movs	r2, #5
 800bb5c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bb60:	2300      	movs	r3, #0
 800bb62:	2200      	movs	r2, #0
 800bb64:	2100      	movs	r1, #0
 800bb66:	6878      	ldr	r0, [r7, #4]
 800bb68:	f000 fca6 	bl	800c4b8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800bb6c:	2300      	movs	r3, #0
}
 800bb6e:	4618      	mov	r0, r3
 800bb70:	3708      	adds	r7, #8
 800bb72:	46bd      	mov	sp, r7
 800bb74:	bd80      	pop	{r7, pc}
	...

0800bb78 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800bb78:	b580      	push	{r7, lr}
 800bb7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800bb7c:	2200      	movs	r2, #0
 800bb7e:	4912      	ldr	r1, [pc, #72]	; (800bbc8 <MX_USB_DEVICE_Init+0x50>)
 800bb80:	4812      	ldr	r0, [pc, #72]	; (800bbcc <MX_USB_DEVICE_Init+0x54>)
 800bb82:	f7fe fd08 	bl	800a596 <USBD_Init>
 800bb86:	4603      	mov	r3, r0
 800bb88:	2b00      	cmp	r3, #0
 800bb8a:	d001      	beq.n	800bb90 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800bb8c:	f7f5 fd6c 	bl	8001668 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_MSC) != USBD_OK)
 800bb90:	490f      	ldr	r1, [pc, #60]	; (800bbd0 <MX_USB_DEVICE_Init+0x58>)
 800bb92:	480e      	ldr	r0, [pc, #56]	; (800bbcc <MX_USB_DEVICE_Init+0x54>)
 800bb94:	f7fe fd2f 	bl	800a5f6 <USBD_RegisterClass>
 800bb98:	4603      	mov	r3, r0
 800bb9a:	2b00      	cmp	r3, #0
 800bb9c:	d001      	beq.n	800bba2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800bb9e:	f7f5 fd63 	bl	8001668 <Error_Handler>
  }
  if (USBD_MSC_RegisterStorage(&hUsbDeviceFS, &USBD_Storage_Interface_fops_FS) != USBD_OK)
 800bba2:	490c      	ldr	r1, [pc, #48]	; (800bbd4 <MX_USB_DEVICE_Init+0x5c>)
 800bba4:	4809      	ldr	r0, [pc, #36]	; (800bbcc <MX_USB_DEVICE_Init+0x54>)
 800bba6:	f7fc fef9 	bl	800899c <USBD_MSC_RegisterStorage>
 800bbaa:	4603      	mov	r3, r0
 800bbac:	2b00      	cmp	r3, #0
 800bbae:	d001      	beq.n	800bbb4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800bbb0:	f7f5 fd5a 	bl	8001668 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800bbb4:	4805      	ldr	r0, [pc, #20]	; (800bbcc <MX_USB_DEVICE_Init+0x54>)
 800bbb6:	f7fe fd54 	bl	800a662 <USBD_Start>
 800bbba:	4603      	mov	r3, r0
 800bbbc:	2b00      	cmp	r3, #0
 800bbbe:	d001      	beq.n	800bbc4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800bbc0:	f7f5 fd52 	bl	8001668 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800bbc4:	bf00      	nop
 800bbc6:	bd80      	pop	{r7, pc}
 800bbc8:	200000b8 	.word	0x200000b8
 800bbcc:	20001284 	.word	0x20001284
 800bbd0:	20000010 	.word	0x20000010
 800bbd4:	20000108 	.word	0x20000108

0800bbd8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bbd8:	b480      	push	{r7}
 800bbda:	b083      	sub	sp, #12
 800bbdc:	af00      	add	r7, sp, #0
 800bbde:	4603      	mov	r3, r0
 800bbe0:	6039      	str	r1, [r7, #0]
 800bbe2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800bbe4:	683b      	ldr	r3, [r7, #0]
 800bbe6:	2212      	movs	r2, #18
 800bbe8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800bbea:	4b03      	ldr	r3, [pc, #12]	; (800bbf8 <USBD_FS_DeviceDescriptor+0x20>)
}
 800bbec:	4618      	mov	r0, r3
 800bbee:	370c      	adds	r7, #12
 800bbf0:	46bd      	mov	sp, r7
 800bbf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbf6:	4770      	bx	lr
 800bbf8:	200000d4 	.word	0x200000d4

0800bbfc <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bbfc:	b480      	push	{r7}
 800bbfe:	b083      	sub	sp, #12
 800bc00:	af00      	add	r7, sp, #0
 800bc02:	4603      	mov	r3, r0
 800bc04:	6039      	str	r1, [r7, #0]
 800bc06:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800bc08:	683b      	ldr	r3, [r7, #0]
 800bc0a:	2204      	movs	r2, #4
 800bc0c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800bc0e:	4b03      	ldr	r3, [pc, #12]	; (800bc1c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800bc10:	4618      	mov	r0, r3
 800bc12:	370c      	adds	r7, #12
 800bc14:	46bd      	mov	sp, r7
 800bc16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc1a:	4770      	bx	lr
 800bc1c:	200000e8 	.word	0x200000e8

0800bc20 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bc20:	b580      	push	{r7, lr}
 800bc22:	b082      	sub	sp, #8
 800bc24:	af00      	add	r7, sp, #0
 800bc26:	4603      	mov	r3, r0
 800bc28:	6039      	str	r1, [r7, #0]
 800bc2a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800bc2c:	79fb      	ldrb	r3, [r7, #7]
 800bc2e:	2b00      	cmp	r3, #0
 800bc30:	d105      	bne.n	800bc3e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800bc32:	683a      	ldr	r2, [r7, #0]
 800bc34:	4907      	ldr	r1, [pc, #28]	; (800bc54 <USBD_FS_ProductStrDescriptor+0x34>)
 800bc36:	4808      	ldr	r0, [pc, #32]	; (800bc58 <USBD_FS_ProductStrDescriptor+0x38>)
 800bc38:	f7ff feda 	bl	800b9f0 <USBD_GetString>
 800bc3c:	e004      	b.n	800bc48 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800bc3e:	683a      	ldr	r2, [r7, #0]
 800bc40:	4904      	ldr	r1, [pc, #16]	; (800bc54 <USBD_FS_ProductStrDescriptor+0x34>)
 800bc42:	4805      	ldr	r0, [pc, #20]	; (800bc58 <USBD_FS_ProductStrDescriptor+0x38>)
 800bc44:	f7ff fed4 	bl	800b9f0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800bc48:	4b02      	ldr	r3, [pc, #8]	; (800bc54 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800bc4a:	4618      	mov	r0, r3
 800bc4c:	3708      	adds	r7, #8
 800bc4e:	46bd      	mov	sp, r7
 800bc50:	bd80      	pop	{r7, pc}
 800bc52:	bf00      	nop
 800bc54:	20001560 	.word	0x20001560
 800bc58:	0800c618 	.word	0x0800c618

0800bc5c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bc5c:	b580      	push	{r7, lr}
 800bc5e:	b082      	sub	sp, #8
 800bc60:	af00      	add	r7, sp, #0
 800bc62:	4603      	mov	r3, r0
 800bc64:	6039      	str	r1, [r7, #0]
 800bc66:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800bc68:	683a      	ldr	r2, [r7, #0]
 800bc6a:	4904      	ldr	r1, [pc, #16]	; (800bc7c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800bc6c:	4804      	ldr	r0, [pc, #16]	; (800bc80 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800bc6e:	f7ff febf 	bl	800b9f0 <USBD_GetString>
  return USBD_StrDesc;
 800bc72:	4b02      	ldr	r3, [pc, #8]	; (800bc7c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800bc74:	4618      	mov	r0, r3
 800bc76:	3708      	adds	r7, #8
 800bc78:	46bd      	mov	sp, r7
 800bc7a:	bd80      	pop	{r7, pc}
 800bc7c:	20001560 	.word	0x20001560
 800bc80:	0800c624 	.word	0x0800c624

0800bc84 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bc84:	b580      	push	{r7, lr}
 800bc86:	b082      	sub	sp, #8
 800bc88:	af00      	add	r7, sp, #0
 800bc8a:	4603      	mov	r3, r0
 800bc8c:	6039      	str	r1, [r7, #0]
 800bc8e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800bc90:	683b      	ldr	r3, [r7, #0]
 800bc92:	221a      	movs	r2, #26
 800bc94:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800bc96:	f000 f843 	bl	800bd20 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800bc9a:	4b02      	ldr	r3, [pc, #8]	; (800bca4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800bc9c:	4618      	mov	r0, r3
 800bc9e:	3708      	adds	r7, #8
 800bca0:	46bd      	mov	sp, r7
 800bca2:	bd80      	pop	{r7, pc}
 800bca4:	200000ec 	.word	0x200000ec

0800bca8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bca8:	b580      	push	{r7, lr}
 800bcaa:	b082      	sub	sp, #8
 800bcac:	af00      	add	r7, sp, #0
 800bcae:	4603      	mov	r3, r0
 800bcb0:	6039      	str	r1, [r7, #0]
 800bcb2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800bcb4:	79fb      	ldrb	r3, [r7, #7]
 800bcb6:	2b00      	cmp	r3, #0
 800bcb8:	d105      	bne.n	800bcc6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800bcba:	683a      	ldr	r2, [r7, #0]
 800bcbc:	4907      	ldr	r1, [pc, #28]	; (800bcdc <USBD_FS_ConfigStrDescriptor+0x34>)
 800bcbe:	4808      	ldr	r0, [pc, #32]	; (800bce0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800bcc0:	f7ff fe96 	bl	800b9f0 <USBD_GetString>
 800bcc4:	e004      	b.n	800bcd0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800bcc6:	683a      	ldr	r2, [r7, #0]
 800bcc8:	4904      	ldr	r1, [pc, #16]	; (800bcdc <USBD_FS_ConfigStrDescriptor+0x34>)
 800bcca:	4805      	ldr	r0, [pc, #20]	; (800bce0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800bccc:	f7ff fe90 	bl	800b9f0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800bcd0:	4b02      	ldr	r3, [pc, #8]	; (800bcdc <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800bcd2:	4618      	mov	r0, r3
 800bcd4:	3708      	adds	r7, #8
 800bcd6:	46bd      	mov	sp, r7
 800bcd8:	bd80      	pop	{r7, pc}
 800bcda:	bf00      	nop
 800bcdc:	20001560 	.word	0x20001560
 800bce0:	0800c638 	.word	0x0800c638

0800bce4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bce4:	b580      	push	{r7, lr}
 800bce6:	b082      	sub	sp, #8
 800bce8:	af00      	add	r7, sp, #0
 800bcea:	4603      	mov	r3, r0
 800bcec:	6039      	str	r1, [r7, #0]
 800bcee:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800bcf0:	79fb      	ldrb	r3, [r7, #7]
 800bcf2:	2b00      	cmp	r3, #0
 800bcf4:	d105      	bne.n	800bd02 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800bcf6:	683a      	ldr	r2, [r7, #0]
 800bcf8:	4907      	ldr	r1, [pc, #28]	; (800bd18 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800bcfa:	4808      	ldr	r0, [pc, #32]	; (800bd1c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800bcfc:	f7ff fe78 	bl	800b9f0 <USBD_GetString>
 800bd00:	e004      	b.n	800bd0c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800bd02:	683a      	ldr	r2, [r7, #0]
 800bd04:	4904      	ldr	r1, [pc, #16]	; (800bd18 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800bd06:	4805      	ldr	r0, [pc, #20]	; (800bd1c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800bd08:	f7ff fe72 	bl	800b9f0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800bd0c:	4b02      	ldr	r3, [pc, #8]	; (800bd18 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800bd0e:	4618      	mov	r0, r3
 800bd10:	3708      	adds	r7, #8
 800bd12:	46bd      	mov	sp, r7
 800bd14:	bd80      	pop	{r7, pc}
 800bd16:	bf00      	nop
 800bd18:	20001560 	.word	0x20001560
 800bd1c:	0800c644 	.word	0x0800c644

0800bd20 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800bd20:	b580      	push	{r7, lr}
 800bd22:	b084      	sub	sp, #16
 800bd24:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800bd26:	4b0f      	ldr	r3, [pc, #60]	; (800bd64 <Get_SerialNum+0x44>)
 800bd28:	681b      	ldr	r3, [r3, #0]
 800bd2a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800bd2c:	4b0e      	ldr	r3, [pc, #56]	; (800bd68 <Get_SerialNum+0x48>)
 800bd2e:	681b      	ldr	r3, [r3, #0]
 800bd30:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800bd32:	4b0e      	ldr	r3, [pc, #56]	; (800bd6c <Get_SerialNum+0x4c>)
 800bd34:	681b      	ldr	r3, [r3, #0]
 800bd36:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800bd38:	68fa      	ldr	r2, [r7, #12]
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	4413      	add	r3, r2
 800bd3e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800bd40:	68fb      	ldr	r3, [r7, #12]
 800bd42:	2b00      	cmp	r3, #0
 800bd44:	d009      	beq.n	800bd5a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800bd46:	2208      	movs	r2, #8
 800bd48:	4909      	ldr	r1, [pc, #36]	; (800bd70 <Get_SerialNum+0x50>)
 800bd4a:	68f8      	ldr	r0, [r7, #12]
 800bd4c:	f000 f814 	bl	800bd78 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800bd50:	2204      	movs	r2, #4
 800bd52:	4908      	ldr	r1, [pc, #32]	; (800bd74 <Get_SerialNum+0x54>)
 800bd54:	68b8      	ldr	r0, [r7, #8]
 800bd56:	f000 f80f 	bl	800bd78 <IntToUnicode>
  }
}
 800bd5a:	bf00      	nop
 800bd5c:	3710      	adds	r7, #16
 800bd5e:	46bd      	mov	sp, r7
 800bd60:	bd80      	pop	{r7, pc}
 800bd62:	bf00      	nop
 800bd64:	1fff7a10 	.word	0x1fff7a10
 800bd68:	1fff7a14 	.word	0x1fff7a14
 800bd6c:	1fff7a18 	.word	0x1fff7a18
 800bd70:	200000ee 	.word	0x200000ee
 800bd74:	200000fe 	.word	0x200000fe

0800bd78 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800bd78:	b480      	push	{r7}
 800bd7a:	b087      	sub	sp, #28
 800bd7c:	af00      	add	r7, sp, #0
 800bd7e:	60f8      	str	r0, [r7, #12]
 800bd80:	60b9      	str	r1, [r7, #8]
 800bd82:	4613      	mov	r3, r2
 800bd84:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800bd86:	2300      	movs	r3, #0
 800bd88:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800bd8a:	2300      	movs	r3, #0
 800bd8c:	75fb      	strb	r3, [r7, #23]
 800bd8e:	e027      	b.n	800bde0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800bd90:	68fb      	ldr	r3, [r7, #12]
 800bd92:	0f1b      	lsrs	r3, r3, #28
 800bd94:	2b09      	cmp	r3, #9
 800bd96:	d80b      	bhi.n	800bdb0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800bd98:	68fb      	ldr	r3, [r7, #12]
 800bd9a:	0f1b      	lsrs	r3, r3, #28
 800bd9c:	b2da      	uxtb	r2, r3
 800bd9e:	7dfb      	ldrb	r3, [r7, #23]
 800bda0:	005b      	lsls	r3, r3, #1
 800bda2:	4619      	mov	r1, r3
 800bda4:	68bb      	ldr	r3, [r7, #8]
 800bda6:	440b      	add	r3, r1
 800bda8:	3230      	adds	r2, #48	; 0x30
 800bdaa:	b2d2      	uxtb	r2, r2
 800bdac:	701a      	strb	r2, [r3, #0]
 800bdae:	e00a      	b.n	800bdc6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800bdb0:	68fb      	ldr	r3, [r7, #12]
 800bdb2:	0f1b      	lsrs	r3, r3, #28
 800bdb4:	b2da      	uxtb	r2, r3
 800bdb6:	7dfb      	ldrb	r3, [r7, #23]
 800bdb8:	005b      	lsls	r3, r3, #1
 800bdba:	4619      	mov	r1, r3
 800bdbc:	68bb      	ldr	r3, [r7, #8]
 800bdbe:	440b      	add	r3, r1
 800bdc0:	3237      	adds	r2, #55	; 0x37
 800bdc2:	b2d2      	uxtb	r2, r2
 800bdc4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800bdc6:	68fb      	ldr	r3, [r7, #12]
 800bdc8:	011b      	lsls	r3, r3, #4
 800bdca:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800bdcc:	7dfb      	ldrb	r3, [r7, #23]
 800bdce:	005b      	lsls	r3, r3, #1
 800bdd0:	3301      	adds	r3, #1
 800bdd2:	68ba      	ldr	r2, [r7, #8]
 800bdd4:	4413      	add	r3, r2
 800bdd6:	2200      	movs	r2, #0
 800bdd8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800bdda:	7dfb      	ldrb	r3, [r7, #23]
 800bddc:	3301      	adds	r3, #1
 800bdde:	75fb      	strb	r3, [r7, #23]
 800bde0:	7dfa      	ldrb	r2, [r7, #23]
 800bde2:	79fb      	ldrb	r3, [r7, #7]
 800bde4:	429a      	cmp	r2, r3
 800bde6:	d3d3      	bcc.n	800bd90 <IntToUnicode+0x18>
  }
}
 800bde8:	bf00      	nop
 800bdea:	bf00      	nop
 800bdec:	371c      	adds	r7, #28
 800bdee:	46bd      	mov	sp, r7
 800bdf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdf4:	4770      	bx	lr

0800bdf6 <STORAGE_Init_FS>:
  * @brief  Initializes the storage unit (medium) over USB FS IP
  * @param  lun: Logical unit number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Init_FS(uint8_t lun)
{
 800bdf6:	b480      	push	{r7}
 800bdf8:	b083      	sub	sp, #12
 800bdfa:	af00      	add	r7, sp, #0
 800bdfc:	4603      	mov	r3, r0
 800bdfe:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 2 */
 UNUSED(lun);

  return (USBD_OK);
 800be00:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 800be02:	4618      	mov	r0, r3
 800be04:	370c      	adds	r7, #12
 800be06:	46bd      	mov	sp, r7
 800be08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be0c:	4770      	bx	lr

0800be0e <STORAGE_GetCapacity_FS>:
  * @param  block_num: Number of total block number.
  * @param  block_size: Block size.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_GetCapacity_FS(uint8_t lun, uint32_t *block_num, uint16_t *block_size)
{
 800be0e:	b480      	push	{r7}
 800be10:	b085      	sub	sp, #20
 800be12:	af00      	add	r7, sp, #0
 800be14:	4603      	mov	r3, r0
 800be16:	60b9      	str	r1, [r7, #8]
 800be18:	607a      	str	r2, [r7, #4]
 800be1a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 3 */
  UNUSED(lun);

  *block_num  = W25Q_SECTORS;
 800be1c:	68bb      	ldr	r3, [r7, #8]
 800be1e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800be22:	601a      	str	r2, [r3, #0]
  *block_size = W25Q_SECTOR_SIZE;
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800be2a:	801a      	strh	r2, [r3, #0]
  return (USBD_OK);
 800be2c:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800be2e:	4618      	mov	r0, r3
 800be30:	3714      	adds	r7, #20
 800be32:	46bd      	mov	sp, r7
 800be34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be38:	4770      	bx	lr

0800be3a <STORAGE_IsReady_FS>:
  * @brief   Checks whether the medium is ready.
  * @param  lun:  Logical unit number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsReady_FS(uint8_t lun)
{
 800be3a:	b480      	push	{r7}
 800be3c:	b083      	sub	sp, #12
 800be3e:	af00      	add	r7, sp, #0
 800be40:	4603      	mov	r3, r0
 800be42:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 4 */
  UNUSED(lun);
  /*if(W25Q_Busy()){
    return (USBD_FAIL);
  }*/
  return (USBD_OK);
 800be44:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800be46:	4618      	mov	r0, r3
 800be48:	370c      	adds	r7, #12
 800be4a:	46bd      	mov	sp, r7
 800be4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be50:	4770      	bx	lr

0800be52 <STORAGE_IsWriteProtected_FS>:
  * @brief  Checks whether the medium is write protected.
  * @param  lun: Logical unit number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsWriteProtected_FS(uint8_t lun)
{
 800be52:	b480      	push	{r7}
 800be54:	b083      	sub	sp, #12
 800be56:	af00      	add	r7, sp, #0
 800be58:	4603      	mov	r3, r0
 800be5a:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 5 */
  UNUSED(lun);

  return (USBD_OK);
 800be5c:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800be5e:	4618      	mov	r0, r3
 800be60:	370c      	adds	r7, #12
 800be62:	46bd      	mov	sp, r7
 800be64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be68:	4770      	bx	lr

0800be6a <STORAGE_Read_FS>:
  * @param  blk_addr: Logical block address.
  * @param  blk_len: Blocks number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Read_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 800be6a:	b580      	push	{r7, lr}
 800be6c:	b086      	sub	sp, #24
 800be6e:	af00      	add	r7, sp, #0
 800be70:	60b9      	str	r1, [r7, #8]
 800be72:	607a      	str	r2, [r7, #4]
 800be74:	461a      	mov	r2, r3
 800be76:	4603      	mov	r3, r0
 800be78:	73fb      	strb	r3, [r7, #15]
 800be7a:	4613      	mov	r3, r2
 800be7c:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 6 */
  UNUSED(lun);
  uint16_t i = 0;
 800be7e:	2300      	movs	r3, #0
 800be80:	82fb      	strh	r3, [r7, #22]
  while(i != blk_len){
 800be82:	e00f      	b.n	800bea4 <STORAGE_Read_FS+0x3a>
	W25Q_Read_Sector(&buf[W25Q_SECTOR_SIZE * i], blk_addr + i);
 800be84:	8afb      	ldrh	r3, [r7, #22]
 800be86:	031b      	lsls	r3, r3, #12
 800be88:	461a      	mov	r2, r3
 800be8a:	68bb      	ldr	r3, [r7, #8]
 800be8c:	1898      	adds	r0, r3, r2
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	b29a      	uxth	r2, r3
 800be92:	8afb      	ldrh	r3, [r7, #22]
 800be94:	4413      	add	r3, r2
 800be96:	b29b      	uxth	r3, r3
 800be98:	4619      	mov	r1, r3
 800be9a:	f7f5 f90e 	bl	80010ba <W25Q_Read_Sector>
    i++;
 800be9e:	8afb      	ldrh	r3, [r7, #22]
 800bea0:	3301      	adds	r3, #1
 800bea2:	82fb      	strh	r3, [r7, #22]
  while(i != blk_len){
 800bea4:	8afa      	ldrh	r2, [r7, #22]
 800bea6:	89bb      	ldrh	r3, [r7, #12]
 800bea8:	429a      	cmp	r2, r3
 800beaa:	d1eb      	bne.n	800be84 <STORAGE_Read_FS+0x1a>
  }

  return (USBD_OK);
 800beac:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800beae:	4618      	mov	r0, r3
 800beb0:	3718      	adds	r7, #24
 800beb2:	46bd      	mov	sp, r7
 800beb4:	bd80      	pop	{r7, pc}

0800beb6 <STORAGE_Write_FS>:
  * @param  blk_addr: Logical block address.
  * @param  blk_len: Blocks number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Write_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 800beb6:	b580      	push	{r7, lr}
 800beb8:	b086      	sub	sp, #24
 800beba:	af00      	add	r7, sp, #0
 800bebc:	60b9      	str	r1, [r7, #8]
 800bebe:	607a      	str	r2, [r7, #4]
 800bec0:	461a      	mov	r2, r3
 800bec2:	4603      	mov	r3, r0
 800bec4:	73fb      	strb	r3, [r7, #15]
 800bec6:	4613      	mov	r3, r2
 800bec8:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 7 */
  UNUSED(lun);

  uint16_t i = 0;
 800beca:	2300      	movs	r3, #0
 800becc:	82fb      	strh	r3, [r7, #22]
  while(i != blk_len){
 800bece:	e015      	b.n	800befc <STORAGE_Write_FS+0x46>
    W25Q_Erase_Sector(blk_addr + i);
 800bed0:	8afa      	ldrh	r2, [r7, #22]
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	4413      	add	r3, r2
 800bed6:	4618      	mov	r0, r3
 800bed8:	f7f5 f86d 	bl	8000fb6 <W25Q_Erase_Sector>
	W25Q_Write_Sector(&buf[W25Q_SECTOR_SIZE * i], blk_addr + i);
 800bedc:	8afb      	ldrh	r3, [r7, #22]
 800bede:	031b      	lsls	r3, r3, #12
 800bee0:	461a      	mov	r2, r3
 800bee2:	68bb      	ldr	r3, [r7, #8]
 800bee4:	1898      	adds	r0, r3, r2
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	b29a      	uxth	r2, r3
 800beea:	8afb      	ldrh	r3, [r7, #22]
 800beec:	4413      	add	r3, r2
 800beee:	b29b      	uxth	r3, r3
 800bef0:	4619      	mov	r1, r3
 800bef2:	f7f5 f895 	bl	8001020 <W25Q_Write_Sector>
    i++;
 800bef6:	8afb      	ldrh	r3, [r7, #22]
 800bef8:	3301      	adds	r3, #1
 800befa:	82fb      	strh	r3, [r7, #22]
  while(i != blk_len){
 800befc:	8afa      	ldrh	r2, [r7, #22]
 800befe:	89bb      	ldrh	r3, [r7, #12]
 800bf00:	429a      	cmp	r2, r3
 800bf02:	d1e5      	bne.n	800bed0 <STORAGE_Write_FS+0x1a>
  }

  return (USBD_OK);
 800bf04:	2300      	movs	r3, #0
  /* USER CODE END 7 */
}
 800bf06:	4618      	mov	r0, r3
 800bf08:	3718      	adds	r7, #24
 800bf0a:	46bd      	mov	sp, r7
 800bf0c:	bd80      	pop	{r7, pc}

0800bf0e <STORAGE_GetMaxLun_FS>:
  * @brief  Returns the Max Supported LUNs.
  * @param  None
  * @retval Lun(s) number.
  */
int8_t STORAGE_GetMaxLun_FS(void)
{
 800bf0e:	b480      	push	{r7}
 800bf10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  return (STORAGE_LUN_NBR - 1);
 800bf12:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 800bf14:	4618      	mov	r0, r3
 800bf16:	46bd      	mov	sp, r7
 800bf18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf1c:	4770      	bx	lr
	...

0800bf20 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800bf20:	b580      	push	{r7, lr}
 800bf22:	b08a      	sub	sp, #40	; 0x28
 800bf24:	af00      	add	r7, sp, #0
 800bf26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800bf28:	f107 0314 	add.w	r3, r7, #20
 800bf2c:	2200      	movs	r2, #0
 800bf2e:	601a      	str	r2, [r3, #0]
 800bf30:	605a      	str	r2, [r3, #4]
 800bf32:	609a      	str	r2, [r3, #8]
 800bf34:	60da      	str	r2, [r3, #12]
 800bf36:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	681b      	ldr	r3, [r3, #0]
 800bf3c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800bf40:	d13a      	bne.n	800bfb8 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800bf42:	2300      	movs	r3, #0
 800bf44:	613b      	str	r3, [r7, #16]
 800bf46:	4b1e      	ldr	r3, [pc, #120]	; (800bfc0 <HAL_PCD_MspInit+0xa0>)
 800bf48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bf4a:	4a1d      	ldr	r2, [pc, #116]	; (800bfc0 <HAL_PCD_MspInit+0xa0>)
 800bf4c:	f043 0301 	orr.w	r3, r3, #1
 800bf50:	6313      	str	r3, [r2, #48]	; 0x30
 800bf52:	4b1b      	ldr	r3, [pc, #108]	; (800bfc0 <HAL_PCD_MspInit+0xa0>)
 800bf54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bf56:	f003 0301 	and.w	r3, r3, #1
 800bf5a:	613b      	str	r3, [r7, #16]
 800bf5c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800bf5e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800bf62:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bf64:	2302      	movs	r3, #2
 800bf66:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bf68:	2300      	movs	r3, #0
 800bf6a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800bf6c:	2303      	movs	r3, #3
 800bf6e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800bf70:	230a      	movs	r3, #10
 800bf72:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800bf74:	f107 0314 	add.w	r3, r7, #20
 800bf78:	4619      	mov	r1, r3
 800bf7a:	4812      	ldr	r0, [pc, #72]	; (800bfc4 <HAL_PCD_MspInit+0xa4>)
 800bf7c:	f7f6 fb18 	bl	80025b0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800bf80:	4b0f      	ldr	r3, [pc, #60]	; (800bfc0 <HAL_PCD_MspInit+0xa0>)
 800bf82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bf84:	4a0e      	ldr	r2, [pc, #56]	; (800bfc0 <HAL_PCD_MspInit+0xa0>)
 800bf86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bf8a:	6353      	str	r3, [r2, #52]	; 0x34
 800bf8c:	2300      	movs	r3, #0
 800bf8e:	60fb      	str	r3, [r7, #12]
 800bf90:	4b0b      	ldr	r3, [pc, #44]	; (800bfc0 <HAL_PCD_MspInit+0xa0>)
 800bf92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bf94:	4a0a      	ldr	r2, [pc, #40]	; (800bfc0 <HAL_PCD_MspInit+0xa0>)
 800bf96:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800bf9a:	6453      	str	r3, [r2, #68]	; 0x44
 800bf9c:	4b08      	ldr	r3, [pc, #32]	; (800bfc0 <HAL_PCD_MspInit+0xa0>)
 800bf9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bfa0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800bfa4:	60fb      	str	r3, [r7, #12]
 800bfa6:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800bfa8:	2200      	movs	r2, #0
 800bfaa:	2100      	movs	r1, #0
 800bfac:	2043      	movs	r0, #67	; 0x43
 800bfae:	f7f5 febc 	bl	8001d2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800bfb2:	2043      	movs	r0, #67	; 0x43
 800bfb4:	f7f5 fed5 	bl	8001d62 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800bfb8:	bf00      	nop
 800bfba:	3728      	adds	r7, #40	; 0x28
 800bfbc:	46bd      	mov	sp, r7
 800bfbe:	bd80      	pop	{r7, pc}
 800bfc0:	40023800 	.word	0x40023800
 800bfc4:	40020000 	.word	0x40020000

0800bfc8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bfc8:	b580      	push	{r7, lr}
 800bfca:	b082      	sub	sp, #8
 800bfcc:	af00      	add	r7, sp, #0
 800bfce:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800bfdc:	4619      	mov	r1, r3
 800bfde:	4610      	mov	r0, r2
 800bfe0:	f7fe fba7 	bl	800a732 <USBD_LL_SetupStage>
}
 800bfe4:	bf00      	nop
 800bfe6:	3708      	adds	r7, #8
 800bfe8:	46bd      	mov	sp, r7
 800bfea:	bd80      	pop	{r7, pc}

0800bfec <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bfec:	b580      	push	{r7, lr}
 800bfee:	b082      	sub	sp, #8
 800bff0:	af00      	add	r7, sp, #0
 800bff2:	6078      	str	r0, [r7, #4]
 800bff4:	460b      	mov	r3, r1
 800bff6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800bffe:	78fa      	ldrb	r2, [r7, #3]
 800c000:	6879      	ldr	r1, [r7, #4]
 800c002:	4613      	mov	r3, r2
 800c004:	00db      	lsls	r3, r3, #3
 800c006:	4413      	add	r3, r2
 800c008:	009b      	lsls	r3, r3, #2
 800c00a:	440b      	add	r3, r1
 800c00c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800c010:	681a      	ldr	r2, [r3, #0]
 800c012:	78fb      	ldrb	r3, [r7, #3]
 800c014:	4619      	mov	r1, r3
 800c016:	f7fe fbe1 	bl	800a7dc <USBD_LL_DataOutStage>
}
 800c01a:	bf00      	nop
 800c01c:	3708      	adds	r7, #8
 800c01e:	46bd      	mov	sp, r7
 800c020:	bd80      	pop	{r7, pc}

0800c022 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c022:	b580      	push	{r7, lr}
 800c024:	b082      	sub	sp, #8
 800c026:	af00      	add	r7, sp, #0
 800c028:	6078      	str	r0, [r7, #4]
 800c02a:	460b      	mov	r3, r1
 800c02c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800c034:	78fa      	ldrb	r2, [r7, #3]
 800c036:	6879      	ldr	r1, [r7, #4]
 800c038:	4613      	mov	r3, r2
 800c03a:	00db      	lsls	r3, r3, #3
 800c03c:	4413      	add	r3, r2
 800c03e:	009b      	lsls	r3, r3, #2
 800c040:	440b      	add	r3, r1
 800c042:	334c      	adds	r3, #76	; 0x4c
 800c044:	681a      	ldr	r2, [r3, #0]
 800c046:	78fb      	ldrb	r3, [r7, #3]
 800c048:	4619      	mov	r1, r3
 800c04a:	f7fe fc7a 	bl	800a942 <USBD_LL_DataInStage>
}
 800c04e:	bf00      	nop
 800c050:	3708      	adds	r7, #8
 800c052:	46bd      	mov	sp, r7
 800c054:	bd80      	pop	{r7, pc}

0800c056 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c056:	b580      	push	{r7, lr}
 800c058:	b082      	sub	sp, #8
 800c05a:	af00      	add	r7, sp, #0
 800c05c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c064:	4618      	mov	r0, r3
 800c066:	f7fe fdae 	bl	800abc6 <USBD_LL_SOF>
}
 800c06a:	bf00      	nop
 800c06c:	3708      	adds	r7, #8
 800c06e:	46bd      	mov	sp, r7
 800c070:	bd80      	pop	{r7, pc}

0800c072 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c072:	b580      	push	{r7, lr}
 800c074:	b084      	sub	sp, #16
 800c076:	af00      	add	r7, sp, #0
 800c078:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800c07a:	2301      	movs	r3, #1
 800c07c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	68db      	ldr	r3, [r3, #12]
 800c082:	2b02      	cmp	r3, #2
 800c084:	d001      	beq.n	800c08a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800c086:	f7f5 faef 	bl	8001668 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c090:	7bfa      	ldrb	r2, [r7, #15]
 800c092:	4611      	mov	r1, r2
 800c094:	4618      	mov	r0, r3
 800c096:	f7fe fd58 	bl	800ab4a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c0a0:	4618      	mov	r0, r3
 800c0a2:	f7fe fd00 	bl	800aaa6 <USBD_LL_Reset>
}
 800c0a6:	bf00      	nop
 800c0a8:	3710      	adds	r7, #16
 800c0aa:	46bd      	mov	sp, r7
 800c0ac:	bd80      	pop	{r7, pc}
	...

0800c0b0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c0b0:	b580      	push	{r7, lr}
 800c0b2:	b082      	sub	sp, #8
 800c0b4:	af00      	add	r7, sp, #0
 800c0b6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c0be:	4618      	mov	r0, r3
 800c0c0:	f7fe fd53 	bl	800ab6a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	681b      	ldr	r3, [r3, #0]
 800c0c8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c0cc:	681b      	ldr	r3, [r3, #0]
 800c0ce:	687a      	ldr	r2, [r7, #4]
 800c0d0:	6812      	ldr	r2, [r2, #0]
 800c0d2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800c0d6:	f043 0301 	orr.w	r3, r3, #1
 800c0da:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	6a1b      	ldr	r3, [r3, #32]
 800c0e0:	2b00      	cmp	r3, #0
 800c0e2:	d005      	beq.n	800c0f0 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c0e4:	4b04      	ldr	r3, [pc, #16]	; (800c0f8 <HAL_PCD_SuspendCallback+0x48>)
 800c0e6:	691b      	ldr	r3, [r3, #16]
 800c0e8:	4a03      	ldr	r2, [pc, #12]	; (800c0f8 <HAL_PCD_SuspendCallback+0x48>)
 800c0ea:	f043 0306 	orr.w	r3, r3, #6
 800c0ee:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800c0f0:	bf00      	nop
 800c0f2:	3708      	adds	r7, #8
 800c0f4:	46bd      	mov	sp, r7
 800c0f6:	bd80      	pop	{r7, pc}
 800c0f8:	e000ed00 	.word	0xe000ed00

0800c0fc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c0fc:	b580      	push	{r7, lr}
 800c0fe:	b082      	sub	sp, #8
 800c100:	af00      	add	r7, sp, #0
 800c102:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c10a:	4618      	mov	r0, r3
 800c10c:	f7fe fd43 	bl	800ab96 <USBD_LL_Resume>
}
 800c110:	bf00      	nop
 800c112:	3708      	adds	r7, #8
 800c114:	46bd      	mov	sp, r7
 800c116:	bd80      	pop	{r7, pc}

0800c118 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c118:	b580      	push	{r7, lr}
 800c11a:	b082      	sub	sp, #8
 800c11c:	af00      	add	r7, sp, #0
 800c11e:	6078      	str	r0, [r7, #4]
 800c120:	460b      	mov	r3, r1
 800c122:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c12a:	78fa      	ldrb	r2, [r7, #3]
 800c12c:	4611      	mov	r1, r2
 800c12e:	4618      	mov	r0, r3
 800c130:	f7fe fd9b 	bl	800ac6a <USBD_LL_IsoOUTIncomplete>
}
 800c134:	bf00      	nop
 800c136:	3708      	adds	r7, #8
 800c138:	46bd      	mov	sp, r7
 800c13a:	bd80      	pop	{r7, pc}

0800c13c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c13c:	b580      	push	{r7, lr}
 800c13e:	b082      	sub	sp, #8
 800c140:	af00      	add	r7, sp, #0
 800c142:	6078      	str	r0, [r7, #4]
 800c144:	460b      	mov	r3, r1
 800c146:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c14e:	78fa      	ldrb	r2, [r7, #3]
 800c150:	4611      	mov	r1, r2
 800c152:	4618      	mov	r0, r3
 800c154:	f7fe fd57 	bl	800ac06 <USBD_LL_IsoINIncomplete>
}
 800c158:	bf00      	nop
 800c15a:	3708      	adds	r7, #8
 800c15c:	46bd      	mov	sp, r7
 800c15e:	bd80      	pop	{r7, pc}

0800c160 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c160:	b580      	push	{r7, lr}
 800c162:	b082      	sub	sp, #8
 800c164:	af00      	add	r7, sp, #0
 800c166:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c16e:	4618      	mov	r0, r3
 800c170:	f7fe fdad 	bl	800acce <USBD_LL_DevConnected>
}
 800c174:	bf00      	nop
 800c176:	3708      	adds	r7, #8
 800c178:	46bd      	mov	sp, r7
 800c17a:	bd80      	pop	{r7, pc}

0800c17c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c17c:	b580      	push	{r7, lr}
 800c17e:	b082      	sub	sp, #8
 800c180:	af00      	add	r7, sp, #0
 800c182:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c18a:	4618      	mov	r0, r3
 800c18c:	f7fe fdaa 	bl	800ace4 <USBD_LL_DevDisconnected>
}
 800c190:	bf00      	nop
 800c192:	3708      	adds	r7, #8
 800c194:	46bd      	mov	sp, r7
 800c196:	bd80      	pop	{r7, pc}

0800c198 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800c198:	b580      	push	{r7, lr}
 800c19a:	b082      	sub	sp, #8
 800c19c:	af00      	add	r7, sp, #0
 800c19e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	781b      	ldrb	r3, [r3, #0]
 800c1a4:	2b00      	cmp	r3, #0
 800c1a6:	d13c      	bne.n	800c222 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800c1a8:	4a20      	ldr	r2, [pc, #128]	; (800c22c <USBD_LL_Init+0x94>)
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	4a1e      	ldr	r2, [pc, #120]	; (800c22c <USBD_LL_Init+0x94>)
 800c1b4:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800c1b8:	4b1c      	ldr	r3, [pc, #112]	; (800c22c <USBD_LL_Init+0x94>)
 800c1ba:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800c1be:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800c1c0:	4b1a      	ldr	r3, [pc, #104]	; (800c22c <USBD_LL_Init+0x94>)
 800c1c2:	2204      	movs	r2, #4
 800c1c4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800c1c6:	4b19      	ldr	r3, [pc, #100]	; (800c22c <USBD_LL_Init+0x94>)
 800c1c8:	2202      	movs	r2, #2
 800c1ca:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800c1cc:	4b17      	ldr	r3, [pc, #92]	; (800c22c <USBD_LL_Init+0x94>)
 800c1ce:	2200      	movs	r2, #0
 800c1d0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800c1d2:	4b16      	ldr	r3, [pc, #88]	; (800c22c <USBD_LL_Init+0x94>)
 800c1d4:	2202      	movs	r2, #2
 800c1d6:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800c1d8:	4b14      	ldr	r3, [pc, #80]	; (800c22c <USBD_LL_Init+0x94>)
 800c1da:	2200      	movs	r2, #0
 800c1dc:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800c1de:	4b13      	ldr	r3, [pc, #76]	; (800c22c <USBD_LL_Init+0x94>)
 800c1e0:	2200      	movs	r2, #0
 800c1e2:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800c1e4:	4b11      	ldr	r3, [pc, #68]	; (800c22c <USBD_LL_Init+0x94>)
 800c1e6:	2200      	movs	r2, #0
 800c1e8:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800c1ea:	4b10      	ldr	r3, [pc, #64]	; (800c22c <USBD_LL_Init+0x94>)
 800c1ec:	2200      	movs	r2, #0
 800c1ee:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800c1f0:	4b0e      	ldr	r3, [pc, #56]	; (800c22c <USBD_LL_Init+0x94>)
 800c1f2:	2200      	movs	r2, #0
 800c1f4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800c1f6:	480d      	ldr	r0, [pc, #52]	; (800c22c <USBD_LL_Init+0x94>)
 800c1f8:	f7f6 fba8 	bl	800294c <HAL_PCD_Init>
 800c1fc:	4603      	mov	r3, r0
 800c1fe:	2b00      	cmp	r3, #0
 800c200:	d001      	beq.n	800c206 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800c202:	f7f5 fa31 	bl	8001668 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800c206:	2180      	movs	r1, #128	; 0x80
 800c208:	4808      	ldr	r0, [pc, #32]	; (800c22c <USBD_LL_Init+0x94>)
 800c20a:	f7f7 fe66 	bl	8003eda <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800c20e:	2240      	movs	r2, #64	; 0x40
 800c210:	2100      	movs	r1, #0
 800c212:	4806      	ldr	r0, [pc, #24]	; (800c22c <USBD_LL_Init+0x94>)
 800c214:	f7f7 fe1a 	bl	8003e4c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800c218:	2280      	movs	r2, #128	; 0x80
 800c21a:	2101      	movs	r1, #1
 800c21c:	4803      	ldr	r0, [pc, #12]	; (800c22c <USBD_LL_Init+0x94>)
 800c21e:	f7f7 fe15 	bl	8003e4c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800c222:	2300      	movs	r3, #0
}
 800c224:	4618      	mov	r0, r3
 800c226:	3708      	adds	r7, #8
 800c228:	46bd      	mov	sp, r7
 800c22a:	bd80      	pop	{r7, pc}
 800c22c:	20001760 	.word	0x20001760

0800c230 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800c230:	b580      	push	{r7, lr}
 800c232:	b084      	sub	sp, #16
 800c234:	af00      	add	r7, sp, #0
 800c236:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c238:	2300      	movs	r3, #0
 800c23a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c23c:	2300      	movs	r3, #0
 800c23e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c246:	4618      	mov	r0, r3
 800c248:	f7f6 fc9d 	bl	8002b86 <HAL_PCD_Start>
 800c24c:	4603      	mov	r3, r0
 800c24e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c250:	7bfb      	ldrb	r3, [r7, #15]
 800c252:	4618      	mov	r0, r3
 800c254:	f000 f97c 	bl	800c550 <USBD_Get_USB_Status>
 800c258:	4603      	mov	r3, r0
 800c25a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c25c:	7bbb      	ldrb	r3, [r7, #14]
}
 800c25e:	4618      	mov	r0, r3
 800c260:	3710      	adds	r7, #16
 800c262:	46bd      	mov	sp, r7
 800c264:	bd80      	pop	{r7, pc}

0800c266 <USBD_LL_Stop>:
  * @brief  Stops the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Stop(USBD_HandleTypeDef *pdev)
{
 800c266:	b580      	push	{r7, lr}
 800c268:	b084      	sub	sp, #16
 800c26a:	af00      	add	r7, sp, #0
 800c26c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c26e:	2300      	movs	r3, #0
 800c270:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c272:	2300      	movs	r3, #0
 800c274:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Stop(pdev->pData);
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c27c:	4618      	mov	r0, r3
 800c27e:	f7f6 fcb5 	bl	8002bec <HAL_PCD_Stop>
 800c282:	4603      	mov	r3, r0
 800c284:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c286:	7bfb      	ldrb	r3, [r7, #15]
 800c288:	4618      	mov	r0, r3
 800c28a:	f000 f961 	bl	800c550 <USBD_Get_USB_Status>
 800c28e:	4603      	mov	r3, r0
 800c290:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c292:	7bbb      	ldrb	r3, [r7, #14]
}
 800c294:	4618      	mov	r0, r3
 800c296:	3710      	adds	r7, #16
 800c298:	46bd      	mov	sp, r7
 800c29a:	bd80      	pop	{r7, pc}

0800c29c <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800c29c:	b580      	push	{r7, lr}
 800c29e:	b084      	sub	sp, #16
 800c2a0:	af00      	add	r7, sp, #0
 800c2a2:	6078      	str	r0, [r7, #4]
 800c2a4:	4608      	mov	r0, r1
 800c2a6:	4611      	mov	r1, r2
 800c2a8:	461a      	mov	r2, r3
 800c2aa:	4603      	mov	r3, r0
 800c2ac:	70fb      	strb	r3, [r7, #3]
 800c2ae:	460b      	mov	r3, r1
 800c2b0:	70bb      	strb	r3, [r7, #2]
 800c2b2:	4613      	mov	r3, r2
 800c2b4:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c2b6:	2300      	movs	r3, #0
 800c2b8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c2ba:	2300      	movs	r3, #0
 800c2bc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800c2c4:	78bb      	ldrb	r3, [r7, #2]
 800c2c6:	883a      	ldrh	r2, [r7, #0]
 800c2c8:	78f9      	ldrb	r1, [r7, #3]
 800c2ca:	f7f7 f98c 	bl	80035e6 <HAL_PCD_EP_Open>
 800c2ce:	4603      	mov	r3, r0
 800c2d0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c2d2:	7bfb      	ldrb	r3, [r7, #15]
 800c2d4:	4618      	mov	r0, r3
 800c2d6:	f000 f93b 	bl	800c550 <USBD_Get_USB_Status>
 800c2da:	4603      	mov	r3, r0
 800c2dc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c2de:	7bbb      	ldrb	r3, [r7, #14]
}
 800c2e0:	4618      	mov	r0, r3
 800c2e2:	3710      	adds	r7, #16
 800c2e4:	46bd      	mov	sp, r7
 800c2e6:	bd80      	pop	{r7, pc}

0800c2e8 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c2e8:	b580      	push	{r7, lr}
 800c2ea:	b084      	sub	sp, #16
 800c2ec:	af00      	add	r7, sp, #0
 800c2ee:	6078      	str	r0, [r7, #4]
 800c2f0:	460b      	mov	r3, r1
 800c2f2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c2f4:	2300      	movs	r3, #0
 800c2f6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c2f8:	2300      	movs	r3, #0
 800c2fa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c302:	78fa      	ldrb	r2, [r7, #3]
 800c304:	4611      	mov	r1, r2
 800c306:	4618      	mov	r0, r3
 800c308:	f7f7 f9d5 	bl	80036b6 <HAL_PCD_EP_Close>
 800c30c:	4603      	mov	r3, r0
 800c30e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c310:	7bfb      	ldrb	r3, [r7, #15]
 800c312:	4618      	mov	r0, r3
 800c314:	f000 f91c 	bl	800c550 <USBD_Get_USB_Status>
 800c318:	4603      	mov	r3, r0
 800c31a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c31c:	7bbb      	ldrb	r3, [r7, #14]
}
 800c31e:	4618      	mov	r0, r3
 800c320:	3710      	adds	r7, #16
 800c322:	46bd      	mov	sp, r7
 800c324:	bd80      	pop	{r7, pc}

0800c326 <USBD_LL_FlushEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_FlushEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c326:	b580      	push	{r7, lr}
 800c328:	b084      	sub	sp, #16
 800c32a:	af00      	add	r7, sp, #0
 800c32c:	6078      	str	r0, [r7, #4]
 800c32e:	460b      	mov	r3, r1
 800c330:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c332:	2300      	movs	r3, #0
 800c334:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c336:	2300      	movs	r3, #0
 800c338:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c340:	78fa      	ldrb	r2, [r7, #3]
 800c342:	4611      	mov	r1, r2
 800c344:	4618      	mov	r0, r3
 800c346:	f7f7 fb98 	bl	8003a7a <HAL_PCD_EP_Flush>
 800c34a:	4603      	mov	r3, r0
 800c34c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c34e:	7bfb      	ldrb	r3, [r7, #15]
 800c350:	4618      	mov	r0, r3
 800c352:	f000 f8fd 	bl	800c550 <USBD_Get_USB_Status>
 800c356:	4603      	mov	r3, r0
 800c358:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c35a:	7bbb      	ldrb	r3, [r7, #14]
}
 800c35c:	4618      	mov	r0, r3
 800c35e:	3710      	adds	r7, #16
 800c360:	46bd      	mov	sp, r7
 800c362:	bd80      	pop	{r7, pc}

0800c364 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c364:	b580      	push	{r7, lr}
 800c366:	b084      	sub	sp, #16
 800c368:	af00      	add	r7, sp, #0
 800c36a:	6078      	str	r0, [r7, #4]
 800c36c:	460b      	mov	r3, r1
 800c36e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c370:	2300      	movs	r3, #0
 800c372:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c374:	2300      	movs	r3, #0
 800c376:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c37e:	78fa      	ldrb	r2, [r7, #3]
 800c380:	4611      	mov	r1, r2
 800c382:	4618      	mov	r0, r3
 800c384:	f7f7 fa8e 	bl	80038a4 <HAL_PCD_EP_SetStall>
 800c388:	4603      	mov	r3, r0
 800c38a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c38c:	7bfb      	ldrb	r3, [r7, #15]
 800c38e:	4618      	mov	r0, r3
 800c390:	f000 f8de 	bl	800c550 <USBD_Get_USB_Status>
 800c394:	4603      	mov	r3, r0
 800c396:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c398:	7bbb      	ldrb	r3, [r7, #14]
}
 800c39a:	4618      	mov	r0, r3
 800c39c:	3710      	adds	r7, #16
 800c39e:	46bd      	mov	sp, r7
 800c3a0:	bd80      	pop	{r7, pc}

0800c3a2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c3a2:	b580      	push	{r7, lr}
 800c3a4:	b084      	sub	sp, #16
 800c3a6:	af00      	add	r7, sp, #0
 800c3a8:	6078      	str	r0, [r7, #4]
 800c3aa:	460b      	mov	r3, r1
 800c3ac:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c3ae:	2300      	movs	r3, #0
 800c3b0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c3b2:	2300      	movs	r3, #0
 800c3b4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c3bc:	78fa      	ldrb	r2, [r7, #3]
 800c3be:	4611      	mov	r1, r2
 800c3c0:	4618      	mov	r0, r3
 800c3c2:	f7f7 fad3 	bl	800396c <HAL_PCD_EP_ClrStall>
 800c3c6:	4603      	mov	r3, r0
 800c3c8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c3ca:	7bfb      	ldrb	r3, [r7, #15]
 800c3cc:	4618      	mov	r0, r3
 800c3ce:	f000 f8bf 	bl	800c550 <USBD_Get_USB_Status>
 800c3d2:	4603      	mov	r3, r0
 800c3d4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c3d6:	7bbb      	ldrb	r3, [r7, #14]
}
 800c3d8:	4618      	mov	r0, r3
 800c3da:	3710      	adds	r7, #16
 800c3dc:	46bd      	mov	sp, r7
 800c3de:	bd80      	pop	{r7, pc}

0800c3e0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c3e0:	b480      	push	{r7}
 800c3e2:	b085      	sub	sp, #20
 800c3e4:	af00      	add	r7, sp, #0
 800c3e6:	6078      	str	r0, [r7, #4]
 800c3e8:	460b      	mov	r3, r1
 800c3ea:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c3f2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800c3f4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c3f8:	2b00      	cmp	r3, #0
 800c3fa:	da0b      	bge.n	800c414 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800c3fc:	78fb      	ldrb	r3, [r7, #3]
 800c3fe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c402:	68f9      	ldr	r1, [r7, #12]
 800c404:	4613      	mov	r3, r2
 800c406:	00db      	lsls	r3, r3, #3
 800c408:	4413      	add	r3, r2
 800c40a:	009b      	lsls	r3, r3, #2
 800c40c:	440b      	add	r3, r1
 800c40e:	333e      	adds	r3, #62	; 0x3e
 800c410:	781b      	ldrb	r3, [r3, #0]
 800c412:	e00b      	b.n	800c42c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800c414:	78fb      	ldrb	r3, [r7, #3]
 800c416:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c41a:	68f9      	ldr	r1, [r7, #12]
 800c41c:	4613      	mov	r3, r2
 800c41e:	00db      	lsls	r3, r3, #3
 800c420:	4413      	add	r3, r2
 800c422:	009b      	lsls	r3, r3, #2
 800c424:	440b      	add	r3, r1
 800c426:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800c42a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800c42c:	4618      	mov	r0, r3
 800c42e:	3714      	adds	r7, #20
 800c430:	46bd      	mov	sp, r7
 800c432:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c436:	4770      	bx	lr

0800c438 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800c438:	b580      	push	{r7, lr}
 800c43a:	b084      	sub	sp, #16
 800c43c:	af00      	add	r7, sp, #0
 800c43e:	6078      	str	r0, [r7, #4]
 800c440:	460b      	mov	r3, r1
 800c442:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c444:	2300      	movs	r3, #0
 800c446:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c448:	2300      	movs	r3, #0
 800c44a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c452:	78fa      	ldrb	r2, [r7, #3]
 800c454:	4611      	mov	r1, r2
 800c456:	4618      	mov	r0, r3
 800c458:	f7f7 f8a0 	bl	800359c <HAL_PCD_SetAddress>
 800c45c:	4603      	mov	r3, r0
 800c45e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c460:	7bfb      	ldrb	r3, [r7, #15]
 800c462:	4618      	mov	r0, r3
 800c464:	f000 f874 	bl	800c550 <USBD_Get_USB_Status>
 800c468:	4603      	mov	r3, r0
 800c46a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c46c:	7bbb      	ldrb	r3, [r7, #14]
}
 800c46e:	4618      	mov	r0, r3
 800c470:	3710      	adds	r7, #16
 800c472:	46bd      	mov	sp, r7
 800c474:	bd80      	pop	{r7, pc}

0800c476 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c476:	b580      	push	{r7, lr}
 800c478:	b086      	sub	sp, #24
 800c47a:	af00      	add	r7, sp, #0
 800c47c:	60f8      	str	r0, [r7, #12]
 800c47e:	607a      	str	r2, [r7, #4]
 800c480:	603b      	str	r3, [r7, #0]
 800c482:	460b      	mov	r3, r1
 800c484:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c486:	2300      	movs	r3, #0
 800c488:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c48a:	2300      	movs	r3, #0
 800c48c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800c48e:	68fb      	ldr	r3, [r7, #12]
 800c490:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800c494:	7af9      	ldrb	r1, [r7, #11]
 800c496:	683b      	ldr	r3, [r7, #0]
 800c498:	687a      	ldr	r2, [r7, #4]
 800c49a:	f7f7 f9b9 	bl	8003810 <HAL_PCD_EP_Transmit>
 800c49e:	4603      	mov	r3, r0
 800c4a0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c4a2:	7dfb      	ldrb	r3, [r7, #23]
 800c4a4:	4618      	mov	r0, r3
 800c4a6:	f000 f853 	bl	800c550 <USBD_Get_USB_Status>
 800c4aa:	4603      	mov	r3, r0
 800c4ac:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c4ae:	7dbb      	ldrb	r3, [r7, #22]
}
 800c4b0:	4618      	mov	r0, r3
 800c4b2:	3718      	adds	r7, #24
 800c4b4:	46bd      	mov	sp, r7
 800c4b6:	bd80      	pop	{r7, pc}

0800c4b8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c4b8:	b580      	push	{r7, lr}
 800c4ba:	b086      	sub	sp, #24
 800c4bc:	af00      	add	r7, sp, #0
 800c4be:	60f8      	str	r0, [r7, #12]
 800c4c0:	607a      	str	r2, [r7, #4]
 800c4c2:	603b      	str	r3, [r7, #0]
 800c4c4:	460b      	mov	r3, r1
 800c4c6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c4c8:	2300      	movs	r3, #0
 800c4ca:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c4cc:	2300      	movs	r3, #0
 800c4ce:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800c4d0:	68fb      	ldr	r3, [r7, #12]
 800c4d2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800c4d6:	7af9      	ldrb	r1, [r7, #11]
 800c4d8:	683b      	ldr	r3, [r7, #0]
 800c4da:	687a      	ldr	r2, [r7, #4]
 800c4dc:	f7f7 f935 	bl	800374a <HAL_PCD_EP_Receive>
 800c4e0:	4603      	mov	r3, r0
 800c4e2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c4e4:	7dfb      	ldrb	r3, [r7, #23]
 800c4e6:	4618      	mov	r0, r3
 800c4e8:	f000 f832 	bl	800c550 <USBD_Get_USB_Status>
 800c4ec:	4603      	mov	r3, r0
 800c4ee:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c4f0:	7dbb      	ldrb	r3, [r7, #22]
}
 800c4f2:	4618      	mov	r0, r3
 800c4f4:	3718      	adds	r7, #24
 800c4f6:	46bd      	mov	sp, r7
 800c4f8:	bd80      	pop	{r7, pc}

0800c4fa <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c4fa:	b580      	push	{r7, lr}
 800c4fc:	b082      	sub	sp, #8
 800c4fe:	af00      	add	r7, sp, #0
 800c500:	6078      	str	r0, [r7, #4]
 800c502:	460b      	mov	r3, r1
 800c504:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c50c:	78fa      	ldrb	r2, [r7, #3]
 800c50e:	4611      	mov	r1, r2
 800c510:	4618      	mov	r0, r3
 800c512:	f7f7 f965 	bl	80037e0 <HAL_PCD_EP_GetRxCount>
 800c516:	4603      	mov	r3, r0
}
 800c518:	4618      	mov	r0, r3
 800c51a:	3708      	adds	r7, #8
 800c51c:	46bd      	mov	sp, r7
 800c51e:	bd80      	pop	{r7, pc}

0800c520 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800c520:	b480      	push	{r7}
 800c522:	b083      	sub	sp, #12
 800c524:	af00      	add	r7, sp, #0
 800c526:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_MSC_BOT_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800c528:	4b03      	ldr	r3, [pc, #12]	; (800c538 <USBD_static_malloc+0x18>)
}
 800c52a:	4618      	mov	r0, r3
 800c52c:	370c      	adds	r7, #12
 800c52e:	46bd      	mov	sp, r7
 800c530:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c534:	4770      	bx	lr
 800c536:	bf00      	nop
 800c538:	20001c6c 	.word	0x20001c6c

0800c53c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800c53c:	b480      	push	{r7}
 800c53e:	b083      	sub	sp, #12
 800c540:	af00      	add	r7, sp, #0
 800c542:	6078      	str	r0, [r7, #4]

}
 800c544:	bf00      	nop
 800c546:	370c      	adds	r7, #12
 800c548:	46bd      	mov	sp, r7
 800c54a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c54e:	4770      	bx	lr

0800c550 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800c550:	b480      	push	{r7}
 800c552:	b085      	sub	sp, #20
 800c554:	af00      	add	r7, sp, #0
 800c556:	4603      	mov	r3, r0
 800c558:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c55a:	2300      	movs	r3, #0
 800c55c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800c55e:	79fb      	ldrb	r3, [r7, #7]
 800c560:	2b03      	cmp	r3, #3
 800c562:	d817      	bhi.n	800c594 <USBD_Get_USB_Status+0x44>
 800c564:	a201      	add	r2, pc, #4	; (adr r2, 800c56c <USBD_Get_USB_Status+0x1c>)
 800c566:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c56a:	bf00      	nop
 800c56c:	0800c57d 	.word	0x0800c57d
 800c570:	0800c583 	.word	0x0800c583
 800c574:	0800c589 	.word	0x0800c589
 800c578:	0800c58f 	.word	0x0800c58f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800c57c:	2300      	movs	r3, #0
 800c57e:	73fb      	strb	r3, [r7, #15]
    break;
 800c580:	e00b      	b.n	800c59a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c582:	2303      	movs	r3, #3
 800c584:	73fb      	strb	r3, [r7, #15]
    break;
 800c586:	e008      	b.n	800c59a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c588:	2301      	movs	r3, #1
 800c58a:	73fb      	strb	r3, [r7, #15]
    break;
 800c58c:	e005      	b.n	800c59a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c58e:	2303      	movs	r3, #3
 800c590:	73fb      	strb	r3, [r7, #15]
    break;
 800c592:	e002      	b.n	800c59a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800c594:	2303      	movs	r3, #3
 800c596:	73fb      	strb	r3, [r7, #15]
    break;
 800c598:	bf00      	nop
  }
  return usb_status;
 800c59a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c59c:	4618      	mov	r0, r3
 800c59e:	3714      	adds	r7, #20
 800c5a0:	46bd      	mov	sp, r7
 800c5a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5a6:	4770      	bx	lr

0800c5a8 <__libc_init_array>:
 800c5a8:	b570      	push	{r4, r5, r6, lr}
 800c5aa:	4d0d      	ldr	r5, [pc, #52]	; (800c5e0 <__libc_init_array+0x38>)
 800c5ac:	4c0d      	ldr	r4, [pc, #52]	; (800c5e4 <__libc_init_array+0x3c>)
 800c5ae:	1b64      	subs	r4, r4, r5
 800c5b0:	10a4      	asrs	r4, r4, #2
 800c5b2:	2600      	movs	r6, #0
 800c5b4:	42a6      	cmp	r6, r4
 800c5b6:	d109      	bne.n	800c5cc <__libc_init_array+0x24>
 800c5b8:	4d0b      	ldr	r5, [pc, #44]	; (800c5e8 <__libc_init_array+0x40>)
 800c5ba:	4c0c      	ldr	r4, [pc, #48]	; (800c5ec <__libc_init_array+0x44>)
 800c5bc:	f000 f820 	bl	800c600 <_init>
 800c5c0:	1b64      	subs	r4, r4, r5
 800c5c2:	10a4      	asrs	r4, r4, #2
 800c5c4:	2600      	movs	r6, #0
 800c5c6:	42a6      	cmp	r6, r4
 800c5c8:	d105      	bne.n	800c5d6 <__libc_init_array+0x2e>
 800c5ca:	bd70      	pop	{r4, r5, r6, pc}
 800c5cc:	f855 3b04 	ldr.w	r3, [r5], #4
 800c5d0:	4798      	blx	r3
 800c5d2:	3601      	adds	r6, #1
 800c5d4:	e7ee      	b.n	800c5b4 <__libc_init_array+0xc>
 800c5d6:	f855 3b04 	ldr.w	r3, [r5], #4
 800c5da:	4798      	blx	r3
 800c5dc:	3601      	adds	r6, #1
 800c5de:	e7f2      	b.n	800c5c6 <__libc_init_array+0x1e>
 800c5e0:	0800c698 	.word	0x0800c698
 800c5e4:	0800c698 	.word	0x0800c698
 800c5e8:	0800c698 	.word	0x0800c698
 800c5ec:	0800c69c 	.word	0x0800c69c

0800c5f0 <memset>:
 800c5f0:	4402      	add	r2, r0
 800c5f2:	4603      	mov	r3, r0
 800c5f4:	4293      	cmp	r3, r2
 800c5f6:	d100      	bne.n	800c5fa <memset+0xa>
 800c5f8:	4770      	bx	lr
 800c5fa:	f803 1b01 	strb.w	r1, [r3], #1
 800c5fe:	e7f9      	b.n	800c5f4 <memset+0x4>

0800c600 <_init>:
 800c600:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c602:	bf00      	nop
 800c604:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c606:	bc08      	pop	{r3}
 800c608:	469e      	mov	lr, r3
 800c60a:	4770      	bx	lr

0800c60c <_fini>:
 800c60c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c60e:	bf00      	nop
 800c610:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c612:	bc08      	pop	{r3}
 800c614:	469e      	mov	lr, r3
 800c616:	4770      	bx	lr
