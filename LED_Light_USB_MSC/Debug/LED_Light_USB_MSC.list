
LED_Light_USB_MSC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c728  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  0800c8bc  0800c8bc  0001c8bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c934  0800c934  00020128  2**0
                  CONTENTS
  4 .ARM          00000008  0800c934  0800c934  0001c934  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c93c  0800c93c  00020128  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c93c  0800c93c  0001c93c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c940  0800c940  0001c940  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000128  20000000  0800c944  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002bc8  20000128  0800ca6c  00020128  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002cf0  0800ca6c  00022cf0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020128  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b1e6  00000000  00000000  00020158  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004984  00000000  00000000  0003b33e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001718  00000000  00000000  0003fcc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000014f0  00000000  00000000  000413e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001bde5  00000000  00000000  000428d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001eda5  00000000  00000000  0005e6b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009243e  00000000  00000000  0007d45a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0010f898  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005d2c  00000000  00000000  0010f8e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000128 	.word	0x20000128
 80001b0:	00000000 	.word	0x00000000
 80001b4:	0800c8a4 	.word	0x0800c8a4

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	2000012c 	.word	0x2000012c
 80001d0:	0800c8a4 	.word	0x0800c8a4

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b974 	b.w	80004d4 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9d08      	ldr	r5, [sp, #32]
 800020a:	4604      	mov	r4, r0
 800020c:	468e      	mov	lr, r1
 800020e:	2b00      	cmp	r3, #0
 8000210:	d14d      	bne.n	80002ae <__udivmoddi4+0xaa>
 8000212:	428a      	cmp	r2, r1
 8000214:	4694      	mov	ip, r2
 8000216:	d969      	bls.n	80002ec <__udivmoddi4+0xe8>
 8000218:	fab2 f282 	clz	r2, r2
 800021c:	b152      	cbz	r2, 8000234 <__udivmoddi4+0x30>
 800021e:	fa01 f302 	lsl.w	r3, r1, r2
 8000222:	f1c2 0120 	rsb	r1, r2, #32
 8000226:	fa20 f101 	lsr.w	r1, r0, r1
 800022a:	fa0c fc02 	lsl.w	ip, ip, r2
 800022e:	ea41 0e03 	orr.w	lr, r1, r3
 8000232:	4094      	lsls	r4, r2
 8000234:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000238:	0c21      	lsrs	r1, r4, #16
 800023a:	fbbe f6f8 	udiv	r6, lr, r8
 800023e:	fa1f f78c 	uxth.w	r7, ip
 8000242:	fb08 e316 	mls	r3, r8, r6, lr
 8000246:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024a:	fb06 f107 	mul.w	r1, r6, r7
 800024e:	4299      	cmp	r1, r3
 8000250:	d90a      	bls.n	8000268 <__udivmoddi4+0x64>
 8000252:	eb1c 0303 	adds.w	r3, ip, r3
 8000256:	f106 30ff 	add.w	r0, r6, #4294967295
 800025a:	f080 811f 	bcs.w	800049c <__udivmoddi4+0x298>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 811c 	bls.w	800049c <__udivmoddi4+0x298>
 8000264:	3e02      	subs	r6, #2
 8000266:	4463      	add	r3, ip
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000270:	fb08 3310 	mls	r3, r8, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 f707 	mul.w	r7, r0, r7
 800027c:	42a7      	cmp	r7, r4
 800027e:	d90a      	bls.n	8000296 <__udivmoddi4+0x92>
 8000280:	eb1c 0404 	adds.w	r4, ip, r4
 8000284:	f100 33ff 	add.w	r3, r0, #4294967295
 8000288:	f080 810a 	bcs.w	80004a0 <__udivmoddi4+0x29c>
 800028c:	42a7      	cmp	r7, r4
 800028e:	f240 8107 	bls.w	80004a0 <__udivmoddi4+0x29c>
 8000292:	4464      	add	r4, ip
 8000294:	3802      	subs	r0, #2
 8000296:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029a:	1be4      	subs	r4, r4, r7
 800029c:	2600      	movs	r6, #0
 800029e:	b11d      	cbz	r5, 80002a8 <__udivmoddi4+0xa4>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c5 4300 	strd	r4, r3, [r5]
 80002a8:	4631      	mov	r1, r6
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d909      	bls.n	80002c6 <__udivmoddi4+0xc2>
 80002b2:	2d00      	cmp	r5, #0
 80002b4:	f000 80ef 	beq.w	8000496 <__udivmoddi4+0x292>
 80002b8:	2600      	movs	r6, #0
 80002ba:	e9c5 0100 	strd	r0, r1, [r5]
 80002be:	4630      	mov	r0, r6
 80002c0:	4631      	mov	r1, r6
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	fab3 f683 	clz	r6, r3
 80002ca:	2e00      	cmp	r6, #0
 80002cc:	d14a      	bne.n	8000364 <__udivmoddi4+0x160>
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d302      	bcc.n	80002d8 <__udivmoddi4+0xd4>
 80002d2:	4282      	cmp	r2, r0
 80002d4:	f200 80f9 	bhi.w	80004ca <__udivmoddi4+0x2c6>
 80002d8:	1a84      	subs	r4, r0, r2
 80002da:	eb61 0303 	sbc.w	r3, r1, r3
 80002de:	2001      	movs	r0, #1
 80002e0:	469e      	mov	lr, r3
 80002e2:	2d00      	cmp	r5, #0
 80002e4:	d0e0      	beq.n	80002a8 <__udivmoddi4+0xa4>
 80002e6:	e9c5 4e00 	strd	r4, lr, [r5]
 80002ea:	e7dd      	b.n	80002a8 <__udivmoddi4+0xa4>
 80002ec:	b902      	cbnz	r2, 80002f0 <__udivmoddi4+0xec>
 80002ee:	deff      	udf	#255	; 0xff
 80002f0:	fab2 f282 	clz	r2, r2
 80002f4:	2a00      	cmp	r2, #0
 80002f6:	f040 8092 	bne.w	800041e <__udivmoddi4+0x21a>
 80002fa:	eba1 010c 	sub.w	r1, r1, ip
 80002fe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000302:	fa1f fe8c 	uxth.w	lr, ip
 8000306:	2601      	movs	r6, #1
 8000308:	0c20      	lsrs	r0, r4, #16
 800030a:	fbb1 f3f7 	udiv	r3, r1, r7
 800030e:	fb07 1113 	mls	r1, r7, r3, r1
 8000312:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000316:	fb0e f003 	mul.w	r0, lr, r3
 800031a:	4288      	cmp	r0, r1
 800031c:	d908      	bls.n	8000330 <__udivmoddi4+0x12c>
 800031e:	eb1c 0101 	adds.w	r1, ip, r1
 8000322:	f103 38ff 	add.w	r8, r3, #4294967295
 8000326:	d202      	bcs.n	800032e <__udivmoddi4+0x12a>
 8000328:	4288      	cmp	r0, r1
 800032a:	f200 80cb 	bhi.w	80004c4 <__udivmoddi4+0x2c0>
 800032e:	4643      	mov	r3, r8
 8000330:	1a09      	subs	r1, r1, r0
 8000332:	b2a4      	uxth	r4, r4
 8000334:	fbb1 f0f7 	udiv	r0, r1, r7
 8000338:	fb07 1110 	mls	r1, r7, r0, r1
 800033c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000340:	fb0e fe00 	mul.w	lr, lr, r0
 8000344:	45a6      	cmp	lr, r4
 8000346:	d908      	bls.n	800035a <__udivmoddi4+0x156>
 8000348:	eb1c 0404 	adds.w	r4, ip, r4
 800034c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000350:	d202      	bcs.n	8000358 <__udivmoddi4+0x154>
 8000352:	45a6      	cmp	lr, r4
 8000354:	f200 80bb 	bhi.w	80004ce <__udivmoddi4+0x2ca>
 8000358:	4608      	mov	r0, r1
 800035a:	eba4 040e 	sub.w	r4, r4, lr
 800035e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000362:	e79c      	b.n	800029e <__udivmoddi4+0x9a>
 8000364:	f1c6 0720 	rsb	r7, r6, #32
 8000368:	40b3      	lsls	r3, r6
 800036a:	fa22 fc07 	lsr.w	ip, r2, r7
 800036e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000372:	fa20 f407 	lsr.w	r4, r0, r7
 8000376:	fa01 f306 	lsl.w	r3, r1, r6
 800037a:	431c      	orrs	r4, r3
 800037c:	40f9      	lsrs	r1, r7
 800037e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000382:	fa00 f306 	lsl.w	r3, r0, r6
 8000386:	fbb1 f8f9 	udiv	r8, r1, r9
 800038a:	0c20      	lsrs	r0, r4, #16
 800038c:	fa1f fe8c 	uxth.w	lr, ip
 8000390:	fb09 1118 	mls	r1, r9, r8, r1
 8000394:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000398:	fb08 f00e 	mul.w	r0, r8, lr
 800039c:	4288      	cmp	r0, r1
 800039e:	fa02 f206 	lsl.w	r2, r2, r6
 80003a2:	d90b      	bls.n	80003bc <__udivmoddi4+0x1b8>
 80003a4:	eb1c 0101 	adds.w	r1, ip, r1
 80003a8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003ac:	f080 8088 	bcs.w	80004c0 <__udivmoddi4+0x2bc>
 80003b0:	4288      	cmp	r0, r1
 80003b2:	f240 8085 	bls.w	80004c0 <__udivmoddi4+0x2bc>
 80003b6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ba:	4461      	add	r1, ip
 80003bc:	1a09      	subs	r1, r1, r0
 80003be:	b2a4      	uxth	r4, r4
 80003c0:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c4:	fb09 1110 	mls	r1, r9, r0, r1
 80003c8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003cc:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d0:	458e      	cmp	lr, r1
 80003d2:	d908      	bls.n	80003e6 <__udivmoddi4+0x1e2>
 80003d4:	eb1c 0101 	adds.w	r1, ip, r1
 80003d8:	f100 34ff 	add.w	r4, r0, #4294967295
 80003dc:	d26c      	bcs.n	80004b8 <__udivmoddi4+0x2b4>
 80003de:	458e      	cmp	lr, r1
 80003e0:	d96a      	bls.n	80004b8 <__udivmoddi4+0x2b4>
 80003e2:	3802      	subs	r0, #2
 80003e4:	4461      	add	r1, ip
 80003e6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ea:	fba0 9402 	umull	r9, r4, r0, r2
 80003ee:	eba1 010e 	sub.w	r1, r1, lr
 80003f2:	42a1      	cmp	r1, r4
 80003f4:	46c8      	mov	r8, r9
 80003f6:	46a6      	mov	lr, r4
 80003f8:	d356      	bcc.n	80004a8 <__udivmoddi4+0x2a4>
 80003fa:	d053      	beq.n	80004a4 <__udivmoddi4+0x2a0>
 80003fc:	b15d      	cbz	r5, 8000416 <__udivmoddi4+0x212>
 80003fe:	ebb3 0208 	subs.w	r2, r3, r8
 8000402:	eb61 010e 	sbc.w	r1, r1, lr
 8000406:	fa01 f707 	lsl.w	r7, r1, r7
 800040a:	fa22 f306 	lsr.w	r3, r2, r6
 800040e:	40f1      	lsrs	r1, r6
 8000410:	431f      	orrs	r7, r3
 8000412:	e9c5 7100 	strd	r7, r1, [r5]
 8000416:	2600      	movs	r6, #0
 8000418:	4631      	mov	r1, r6
 800041a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041e:	f1c2 0320 	rsb	r3, r2, #32
 8000422:	40d8      	lsrs	r0, r3
 8000424:	fa0c fc02 	lsl.w	ip, ip, r2
 8000428:	fa21 f303 	lsr.w	r3, r1, r3
 800042c:	4091      	lsls	r1, r2
 800042e:	4301      	orrs	r1, r0
 8000430:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000434:	fa1f fe8c 	uxth.w	lr, ip
 8000438:	fbb3 f0f7 	udiv	r0, r3, r7
 800043c:	fb07 3610 	mls	r6, r7, r0, r3
 8000440:	0c0b      	lsrs	r3, r1, #16
 8000442:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000446:	fb00 f60e 	mul.w	r6, r0, lr
 800044a:	429e      	cmp	r6, r3
 800044c:	fa04 f402 	lsl.w	r4, r4, r2
 8000450:	d908      	bls.n	8000464 <__udivmoddi4+0x260>
 8000452:	eb1c 0303 	adds.w	r3, ip, r3
 8000456:	f100 38ff 	add.w	r8, r0, #4294967295
 800045a:	d22f      	bcs.n	80004bc <__udivmoddi4+0x2b8>
 800045c:	429e      	cmp	r6, r3
 800045e:	d92d      	bls.n	80004bc <__udivmoddi4+0x2b8>
 8000460:	3802      	subs	r0, #2
 8000462:	4463      	add	r3, ip
 8000464:	1b9b      	subs	r3, r3, r6
 8000466:	b289      	uxth	r1, r1
 8000468:	fbb3 f6f7 	udiv	r6, r3, r7
 800046c:	fb07 3316 	mls	r3, r7, r6, r3
 8000470:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000474:	fb06 f30e 	mul.w	r3, r6, lr
 8000478:	428b      	cmp	r3, r1
 800047a:	d908      	bls.n	800048e <__udivmoddi4+0x28a>
 800047c:	eb1c 0101 	adds.w	r1, ip, r1
 8000480:	f106 38ff 	add.w	r8, r6, #4294967295
 8000484:	d216      	bcs.n	80004b4 <__udivmoddi4+0x2b0>
 8000486:	428b      	cmp	r3, r1
 8000488:	d914      	bls.n	80004b4 <__udivmoddi4+0x2b0>
 800048a:	3e02      	subs	r6, #2
 800048c:	4461      	add	r1, ip
 800048e:	1ac9      	subs	r1, r1, r3
 8000490:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000494:	e738      	b.n	8000308 <__udivmoddi4+0x104>
 8000496:	462e      	mov	r6, r5
 8000498:	4628      	mov	r0, r5
 800049a:	e705      	b.n	80002a8 <__udivmoddi4+0xa4>
 800049c:	4606      	mov	r6, r0
 800049e:	e6e3      	b.n	8000268 <__udivmoddi4+0x64>
 80004a0:	4618      	mov	r0, r3
 80004a2:	e6f8      	b.n	8000296 <__udivmoddi4+0x92>
 80004a4:	454b      	cmp	r3, r9
 80004a6:	d2a9      	bcs.n	80003fc <__udivmoddi4+0x1f8>
 80004a8:	ebb9 0802 	subs.w	r8, r9, r2
 80004ac:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b0:	3801      	subs	r0, #1
 80004b2:	e7a3      	b.n	80003fc <__udivmoddi4+0x1f8>
 80004b4:	4646      	mov	r6, r8
 80004b6:	e7ea      	b.n	800048e <__udivmoddi4+0x28a>
 80004b8:	4620      	mov	r0, r4
 80004ba:	e794      	b.n	80003e6 <__udivmoddi4+0x1e2>
 80004bc:	4640      	mov	r0, r8
 80004be:	e7d1      	b.n	8000464 <__udivmoddi4+0x260>
 80004c0:	46d0      	mov	r8, sl
 80004c2:	e77b      	b.n	80003bc <__udivmoddi4+0x1b8>
 80004c4:	3b02      	subs	r3, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	e732      	b.n	8000330 <__udivmoddi4+0x12c>
 80004ca:	4630      	mov	r0, r6
 80004cc:	e709      	b.n	80002e2 <__udivmoddi4+0xde>
 80004ce:	4464      	add	r4, ip
 80004d0:	3802      	subs	r0, #2
 80004d2:	e742      	b.n	800035a <__udivmoddi4+0x156>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <Animation_PWM_Pulse_Interrupt>:
void Animation_Timer_Error_Interrupt(){
	HAL_TIM_PWM_Stop_IT(&htim1, TIM_CHANNEL_1);
	animation_i = 0;
	animation_busy = 0;
}
void Animation_PWM_Pulse_Interrupt(){
 80004d8:	b580      	push	{r7, lr}
 80004da:	af00      	add	r7, sp, #0
	if(animation_i < ((animation_data_config.image_size * 8) + animation_data_config.stop_pulses)){
 80004dc:	4b2b      	ldr	r3, [pc, #172]	; (800058c <Animation_PWM_Pulse_Interrupt+0xb4>)
 80004de:	68db      	ldr	r3, [r3, #12]
 80004e0:	00db      	lsls	r3, r3, #3
 80004e2:	4a2a      	ldr	r2, [pc, #168]	; (800058c <Animation_PWM_Pulse_Interrupt+0xb4>)
 80004e4:	88d2      	ldrh	r2, [r2, #6]
 80004e6:	441a      	add	r2, r3
 80004e8:	4b29      	ldr	r3, [pc, #164]	; (8000590 <Animation_PWM_Pulse_Interrupt+0xb8>)
 80004ea:	681b      	ldr	r3, [r3, #0]
 80004ec:	429a      	cmp	r2, r3
 80004ee:	d944      	bls.n	800057a <Animation_PWM_Pulse_Interrupt+0xa2>
		if((animation_i + 1) >= ((animation_data_config.image_size * 8) + 1)){
 80004f0:	4b27      	ldr	r3, [pc, #156]	; (8000590 <Animation_PWM_Pulse_Interrupt+0xb8>)
 80004f2:	681b      	ldr	r3, [r3, #0]
 80004f4:	1c5a      	adds	r2, r3, #1
 80004f6:	4b25      	ldr	r3, [pc, #148]	; (800058c <Animation_PWM_Pulse_Interrupt+0xb4>)
 80004f8:	68db      	ldr	r3, [r3, #12]
 80004fa:	00db      	lsls	r3, r3, #3
 80004fc:	3301      	adds	r3, #1
 80004fe:	429a      	cmp	r2, r3
 8000500:	d304      	bcc.n	800050c <Animation_PWM_Pulse_Interrupt+0x34>
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 8000502:	4b24      	ldr	r3, [pc, #144]	; (8000594 <Animation_PWM_Pulse_Interrupt+0xbc>)
 8000504:	681b      	ldr	r3, [r3, #0]
 8000506:	2200      	movs	r2, #0
 8000508:	635a      	str	r2, [r3, #52]	; 0x34
 800050a:	e030      	b.n	800056e <Animation_PWM_Pulse_Interrupt+0x96>
		}else{
			switch(animation_mode){
 800050c:	4b22      	ldr	r3, [pc, #136]	; (8000598 <Animation_PWM_Pulse_Interrupt+0xc0>)
 800050e:	781b      	ldrb	r3, [r3, #0]
 8000510:	2b00      	cmp	r3, #0
 8000512:	d002      	beq.n	800051a <Animation_PWM_Pulse_Interrupt+0x42>
 8000514:	2b01      	cmp	r3, #1
 8000516:	d017      	beq.n	8000548 <Animation_PWM_Pulse_Interrupt+0x70>
 8000518:	e029      	b.n	800056e <Animation_PWM_Pulse_Interrupt+0x96>
				case ANIMATION_MODE_COLOR:
					Animation_Set_Bit((uint8_t)(((uint32_t)animation_color >> ((uint32_t)animation_i % 24)) & (uint32_t)1));
 800051a:	4b20      	ldr	r3, [pc, #128]	; (800059c <Animation_PWM_Pulse_Interrupt+0xc4>)
 800051c:	6818      	ldr	r0, [r3, #0]
 800051e:	4b1c      	ldr	r3, [pc, #112]	; (8000590 <Animation_PWM_Pulse_Interrupt+0xb8>)
 8000520:	6819      	ldr	r1, [r3, #0]
 8000522:	4b1f      	ldr	r3, [pc, #124]	; (80005a0 <Animation_PWM_Pulse_Interrupt+0xc8>)
 8000524:	fba3 2301 	umull	r2, r3, r3, r1
 8000528:	091a      	lsrs	r2, r3, #4
 800052a:	4613      	mov	r3, r2
 800052c:	005b      	lsls	r3, r3, #1
 800052e:	4413      	add	r3, r2
 8000530:	00db      	lsls	r3, r3, #3
 8000532:	1aca      	subs	r2, r1, r3
 8000534:	fa20 f302 	lsr.w	r3, r0, r2
 8000538:	b2db      	uxtb	r3, r3
 800053a:	f003 0301 	and.w	r3, r3, #1
 800053e:	b2db      	uxtb	r3, r3
 8000540:	4618      	mov	r0, r3
 8000542:	f000 f83d 	bl	80005c0 <Animation_Set_Bit>
				break;
 8000546:	e012      	b.n	800056e <Animation_PWM_Pulse_Interrupt+0x96>
				case ANIMATION_MODE_IMAGE:
					Animation_Set_Bit(Animation_Data_Get_Bit(animation_image, animation_i / 8, animation_i % 8));
 8000548:	4b16      	ldr	r3, [pc, #88]	; (80005a4 <Animation_PWM_Pulse_Interrupt+0xcc>)
 800054a:	8818      	ldrh	r0, [r3, #0]
 800054c:	4b10      	ldr	r3, [pc, #64]	; (8000590 <Animation_PWM_Pulse_Interrupt+0xb8>)
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	08d9      	lsrs	r1, r3, #3
 8000552:	4b0f      	ldr	r3, [pc, #60]	; (8000590 <Animation_PWM_Pulse_Interrupt+0xb8>)
 8000554:	681b      	ldr	r3, [r3, #0]
 8000556:	b2db      	uxtb	r3, r3
 8000558:	f003 0307 	and.w	r3, r3, #7
 800055c:	b2db      	uxtb	r3, r3
 800055e:	461a      	mov	r2, r3
 8000560:	f000 f9ea 	bl	8000938 <Animation_Data_Get_Bit>
 8000564:	4603      	mov	r3, r0
 8000566:	4618      	mov	r0, r3
 8000568:	f000 f82a 	bl	80005c0 <Animation_Set_Bit>
				break;
 800056c:	bf00      	nop
			}
		}
		animation_i++;
 800056e:	4b08      	ldr	r3, [pc, #32]	; (8000590 <Animation_PWM_Pulse_Interrupt+0xb8>)
 8000570:	681b      	ldr	r3, [r3, #0]
 8000572:	3301      	adds	r3, #1
 8000574:	4a06      	ldr	r2, [pc, #24]	; (8000590 <Animation_PWM_Pulse_Interrupt+0xb8>)
 8000576:	6013      	str	r3, [r2, #0]
	}else{
		HAL_TIM_PWM_Stop_IT(&htim1, TIM_CHANNEL_1);
		animation_busy = 0;
	}
}
 8000578:	e006      	b.n	8000588 <Animation_PWM_Pulse_Interrupt+0xb0>
		HAL_TIM_PWM_Stop_IT(&htim1, TIM_CHANNEL_1);
 800057a:	2100      	movs	r1, #0
 800057c:	4805      	ldr	r0, [pc, #20]	; (8000594 <Animation_PWM_Pulse_Interrupt+0xbc>)
 800057e:	f005 fd6b 	bl	8006058 <HAL_TIM_PWM_Stop_IT>
		animation_busy = 0;
 8000582:	4b09      	ldr	r3, [pc, #36]	; (80005a8 <Animation_PWM_Pulse_Interrupt+0xd0>)
 8000584:	2200      	movs	r2, #0
 8000586:	701a      	strb	r2, [r3, #0]
}
 8000588:	bf00      	nop
 800058a:	bd80      	pop	{r7, pc}
 800058c:	20000154 	.word	0x20000154
 8000590:	20000150 	.word	0x20000150
 8000594:	20001240 	.word	0x20001240
 8000598:	20000145 	.word	0x20000145
 800059c:	20000148 	.word	0x20000148
 80005a0:	aaaaaaab 	.word	0xaaaaaaab
 80005a4:	2000014c 	.word	0x2000014c
 80005a8:	20000144 	.word	0x20000144

080005ac <Animation_Busy>:

uint8_t Animation_Busy(){
 80005ac:	b580      	push	{r7, lr}
 80005ae:	af00      	add	r7, sp, #0
	Animation_Data_Buffer();
 80005b0:	f000 faf4 	bl	8000b9c <Animation_Data_Buffer>
	return animation_busy;
 80005b4:	4b01      	ldr	r3, [pc, #4]	; (80005bc <Animation_Busy+0x10>)
 80005b6:	781b      	ldrb	r3, [r3, #0]
}
 80005b8:	4618      	mov	r0, r3
 80005ba:	bd80      	pop	{r7, pc}
 80005bc:	20000144 	.word	0x20000144

080005c0 <Animation_Set_Bit>:
void Animation_Set_Bit(uint8_t bit){
 80005c0:	b480      	push	{r7}
 80005c2:	b083      	sub	sp, #12
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	4603      	mov	r3, r0
 80005c8:	71fb      	strb	r3, [r7, #7]
	if(bit){
 80005ca:	79fb      	ldrb	r3, [r7, #7]
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d005      	beq.n	80005dc <Animation_Set_Bit+0x1c>
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, animation_data_config.bit_1);
 80005d0:	4b08      	ldr	r3, [pc, #32]	; (80005f4 <Animation_Set_Bit+0x34>)
 80005d2:	791a      	ldrb	r2, [r3, #4]
 80005d4:	4b08      	ldr	r3, [pc, #32]	; (80005f8 <Animation_Set_Bit+0x38>)
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	635a      	str	r2, [r3, #52]	; 0x34
	}else{
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, animation_data_config.bit_0);
	}
}
 80005da:	e004      	b.n	80005e6 <Animation_Set_Bit+0x26>
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, animation_data_config.bit_0);
 80005dc:	4b05      	ldr	r3, [pc, #20]	; (80005f4 <Animation_Set_Bit+0x34>)
 80005de:	78da      	ldrb	r2, [r3, #3]
 80005e0:	4b05      	ldr	r3, [pc, #20]	; (80005f8 <Animation_Set_Bit+0x38>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	635a      	str	r2, [r3, #52]	; 0x34
}
 80005e6:	bf00      	nop
 80005e8:	370c      	adds	r7, #12
 80005ea:	46bd      	mov	sp, r7
 80005ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f0:	4770      	bx	lr
 80005f2:	bf00      	nop
 80005f4:	20000154 	.word	0x20000154
 80005f8:	20001240 	.word	0x20001240

080005fc <Animation_Display_Color>:
void Animation_Stop(){
	HAL_TIM_PWM_Stop_IT(&htim1, TIM_CHANNEL_1);
	animation_i = 0;
	animation_busy = 0;
}
void Animation_Display_Color(uint32_t color){
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b084      	sub	sp, #16
 8000600:	af00      	add	r7, sp, #0
 8000602:	6078      	str	r0, [r7, #4]
	if(animation_data_config.image_size){
 8000604:	4b53      	ldr	r3, [pc, #332]	; (8000754 <Animation_Display_Color+0x158>)
 8000606:	68db      	ldr	r3, [r3, #12]
 8000608:	2b00      	cmp	r3, #0
 800060a:	f000 809f 	beq.w	800074c <Animation_Display_Color+0x150>
		uint8_t color_a = (uint8_t)((uint32_t)color >> 16);
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	0c1b      	lsrs	r3, r3, #16
 8000612:	73fb      	strb	r3, [r7, #15]
		color_a = (color_a & 0xF0) >> 4 | (color_a & 0x0F) << 4;
 8000614:	7bfb      	ldrb	r3, [r7, #15]
 8000616:	091b      	lsrs	r3, r3, #4
 8000618:	b2db      	uxtb	r3, r3
 800061a:	b25a      	sxtb	r2, r3
 800061c:	7bfb      	ldrb	r3, [r7, #15]
 800061e:	011b      	lsls	r3, r3, #4
 8000620:	b25b      	sxtb	r3, r3
 8000622:	4313      	orrs	r3, r2
 8000624:	b25b      	sxtb	r3, r3
 8000626:	73fb      	strb	r3, [r7, #15]
		color_a = (color_a & 0xCC) >> 2 | (color_a & 0x33) << 2;
 8000628:	7bfb      	ldrb	r3, [r7, #15]
 800062a:	109b      	asrs	r3, r3, #2
 800062c:	b25b      	sxtb	r3, r3
 800062e:	f003 0333 	and.w	r3, r3, #51	; 0x33
 8000632:	b25a      	sxtb	r2, r3
 8000634:	7bfb      	ldrb	r3, [r7, #15]
 8000636:	009b      	lsls	r3, r3, #2
 8000638:	b25b      	sxtb	r3, r3
 800063a:	f023 0333 	bic.w	r3, r3, #51	; 0x33
 800063e:	b25b      	sxtb	r3, r3
 8000640:	4313      	orrs	r3, r2
 8000642:	b25b      	sxtb	r3, r3
 8000644:	73fb      	strb	r3, [r7, #15]
		color_a = (color_a & 0xAA) >> 1 | (color_a & 0x55) << 1;
 8000646:	7bfb      	ldrb	r3, [r7, #15]
 8000648:	105b      	asrs	r3, r3, #1
 800064a:	b25b      	sxtb	r3, r3
 800064c:	f003 0355 	and.w	r3, r3, #85	; 0x55
 8000650:	b25a      	sxtb	r2, r3
 8000652:	7bfb      	ldrb	r3, [r7, #15]
 8000654:	005b      	lsls	r3, r3, #1
 8000656:	b25b      	sxtb	r3, r3
 8000658:	f023 0355 	bic.w	r3, r3, #85	; 0x55
 800065c:	b25b      	sxtb	r3, r3
 800065e:	4313      	orrs	r3, r2
 8000660:	b25b      	sxtb	r3, r3
 8000662:	73fb      	strb	r3, [r7, #15]
		uint8_t color_b = (uint8_t)((uint32_t)color >> 8);
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	0a1b      	lsrs	r3, r3, #8
 8000668:	73bb      	strb	r3, [r7, #14]
		color_b = (color_b & 0xF0) >> 4 | (color_b & 0x0F) << 4;
 800066a:	7bbb      	ldrb	r3, [r7, #14]
 800066c:	091b      	lsrs	r3, r3, #4
 800066e:	b2db      	uxtb	r3, r3
 8000670:	b25a      	sxtb	r2, r3
 8000672:	7bbb      	ldrb	r3, [r7, #14]
 8000674:	011b      	lsls	r3, r3, #4
 8000676:	b25b      	sxtb	r3, r3
 8000678:	4313      	orrs	r3, r2
 800067a:	b25b      	sxtb	r3, r3
 800067c:	73bb      	strb	r3, [r7, #14]
		color_b = (color_b & 0xCC) >> 2 | (color_b & 0x33) << 2;
 800067e:	7bbb      	ldrb	r3, [r7, #14]
 8000680:	109b      	asrs	r3, r3, #2
 8000682:	b25b      	sxtb	r3, r3
 8000684:	f003 0333 	and.w	r3, r3, #51	; 0x33
 8000688:	b25a      	sxtb	r2, r3
 800068a:	7bbb      	ldrb	r3, [r7, #14]
 800068c:	009b      	lsls	r3, r3, #2
 800068e:	b25b      	sxtb	r3, r3
 8000690:	f023 0333 	bic.w	r3, r3, #51	; 0x33
 8000694:	b25b      	sxtb	r3, r3
 8000696:	4313      	orrs	r3, r2
 8000698:	b25b      	sxtb	r3, r3
 800069a:	73bb      	strb	r3, [r7, #14]
		color_b = (color_b & 0xAA) >> 1 | (color_b & 0x55) << 1;
 800069c:	7bbb      	ldrb	r3, [r7, #14]
 800069e:	105b      	asrs	r3, r3, #1
 80006a0:	b25b      	sxtb	r3, r3
 80006a2:	f003 0355 	and.w	r3, r3, #85	; 0x55
 80006a6:	b25a      	sxtb	r2, r3
 80006a8:	7bbb      	ldrb	r3, [r7, #14]
 80006aa:	005b      	lsls	r3, r3, #1
 80006ac:	b25b      	sxtb	r3, r3
 80006ae:	f023 0355 	bic.w	r3, r3, #85	; 0x55
 80006b2:	b25b      	sxtb	r3, r3
 80006b4:	4313      	orrs	r3, r2
 80006b6:	b25b      	sxtb	r3, r3
 80006b8:	73bb      	strb	r3, [r7, #14]
		uint8_t color_c = (uint8_t)((uint32_t)color);
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	737b      	strb	r3, [r7, #13]
		color_c = (color_c & 0xF0) >> 4 | (color_c & 0x0F) << 4;
 80006be:	7b7b      	ldrb	r3, [r7, #13]
 80006c0:	091b      	lsrs	r3, r3, #4
 80006c2:	b2db      	uxtb	r3, r3
 80006c4:	b25a      	sxtb	r2, r3
 80006c6:	7b7b      	ldrb	r3, [r7, #13]
 80006c8:	011b      	lsls	r3, r3, #4
 80006ca:	b25b      	sxtb	r3, r3
 80006cc:	4313      	orrs	r3, r2
 80006ce:	b25b      	sxtb	r3, r3
 80006d0:	737b      	strb	r3, [r7, #13]
		color_c = (color_c & 0xCC) >> 2 | (color_c & 0x33) << 2;
 80006d2:	7b7b      	ldrb	r3, [r7, #13]
 80006d4:	109b      	asrs	r3, r3, #2
 80006d6:	b25b      	sxtb	r3, r3
 80006d8:	f003 0333 	and.w	r3, r3, #51	; 0x33
 80006dc:	b25a      	sxtb	r2, r3
 80006de:	7b7b      	ldrb	r3, [r7, #13]
 80006e0:	009b      	lsls	r3, r3, #2
 80006e2:	b25b      	sxtb	r3, r3
 80006e4:	f023 0333 	bic.w	r3, r3, #51	; 0x33
 80006e8:	b25b      	sxtb	r3, r3
 80006ea:	4313      	orrs	r3, r2
 80006ec:	b25b      	sxtb	r3, r3
 80006ee:	737b      	strb	r3, [r7, #13]
		color_c = (color_c & 0xAA) >> 1 | (color_c & 0x55) << 1;
 80006f0:	7b7b      	ldrb	r3, [r7, #13]
 80006f2:	105b      	asrs	r3, r3, #1
 80006f4:	b25b      	sxtb	r3, r3
 80006f6:	f003 0355 	and.w	r3, r3, #85	; 0x55
 80006fa:	b25a      	sxtb	r2, r3
 80006fc:	7b7b      	ldrb	r3, [r7, #13]
 80006fe:	005b      	lsls	r3, r3, #1
 8000700:	b25b      	sxtb	r3, r3
 8000702:	f023 0355 	bic.w	r3, r3, #85	; 0x55
 8000706:	b25b      	sxtb	r3, r3
 8000708:	4313      	orrs	r3, r2
 800070a:	b25b      	sxtb	r3, r3
 800070c:	737b      	strb	r3, [r7, #13]

		animation_busy = 1;
 800070e:	4b12      	ldr	r3, [pc, #72]	; (8000758 <Animation_Display_Color+0x15c>)
 8000710:	2201      	movs	r2, #1
 8000712:	701a      	strb	r2, [r3, #0]
		animation_i = 0;
 8000714:	4b11      	ldr	r3, [pc, #68]	; (800075c <Animation_Display_Color+0x160>)
 8000716:	2200      	movs	r2, #0
 8000718:	601a      	str	r2, [r3, #0]
		animation_color = ((uint32_t)color_a <<16) | ((uint32_t)color_b <<8) | (uint32_t)color_c;
 800071a:	7bfb      	ldrb	r3, [r7, #15]
 800071c:	041a      	lsls	r2, r3, #16
 800071e:	7bbb      	ldrb	r3, [r7, #14]
 8000720:	021b      	lsls	r3, r3, #8
 8000722:	431a      	orrs	r2, r3
 8000724:	7b7b      	ldrb	r3, [r7, #13]
 8000726:	4313      	orrs	r3, r2
 8000728:	4a0d      	ldr	r2, [pc, #52]	; (8000760 <Animation_Display_Color+0x164>)
 800072a:	6013      	str	r3, [r2, #0]
		animation_mode = ANIMATION_MODE_COLOR;
 800072c:	4b0d      	ldr	r3, [pc, #52]	; (8000764 <Animation_Display_Color+0x168>)
 800072e:	2200      	movs	r2, #0
 8000730:	701a      	strb	r2, [r3, #0]

		HAL_TIM_PWM_PulseFinishedCallback(&htim1);
 8000732:	480d      	ldr	r0, [pc, #52]	; (8000768 <Animation_Display_Color+0x16c>)
 8000734:	f000 fc0e 	bl	8000f54 <HAL_TIM_PWM_PulseFinishedCallback>
		HAL_TIM_PWM_Start_IT(&htim1, TIM_CHANNEL_1);
 8000738:	2100      	movs	r1, #0
 800073a:	480b      	ldr	r0, [pc, #44]	; (8000768 <Animation_Display_Color+0x16c>)
 800073c:	f005 fb8e 	bl	8005e5c <HAL_TIM_PWM_Start_IT>
		while(Animation_Busy());
 8000740:	bf00      	nop
 8000742:	f7ff ff33 	bl	80005ac <Animation_Busy>
 8000746:	4603      	mov	r3, r0
 8000748:	2b00      	cmp	r3, #0
 800074a:	d1fa      	bne.n	8000742 <Animation_Display_Color+0x146>
	}
}
 800074c:	bf00      	nop
 800074e:	3710      	adds	r7, #16
 8000750:	46bd      	mov	sp, r7
 8000752:	bd80      	pop	{r7, pc}
 8000754:	20000154 	.word	0x20000154
 8000758:	20000144 	.word	0x20000144
 800075c:	20000150 	.word	0x20000150
 8000760:	20000148 	.word	0x20000148
 8000764:	20000145 	.word	0x20000145
 8000768:	20001240 	.word	0x20001240

0800076c <Animation_Display_Image>:
void Animation_Display_Image(uint16_t image){
 800076c:	b580      	push	{r7, lr}
 800076e:	b082      	sub	sp, #8
 8000770:	af00      	add	r7, sp, #0
 8000772:	4603      	mov	r3, r0
 8000774:	80fb      	strh	r3, [r7, #6]
	if((image < animation_data_config.images) && animation_data_config.image_size){
 8000776:	88fa      	ldrh	r2, [r7, #6]
 8000778:	4b14      	ldr	r3, [pc, #80]	; (80007cc <Animation_Display_Image+0x60>)
 800077a:	689b      	ldr	r3, [r3, #8]
 800077c:	429a      	cmp	r2, r3
 800077e:	d220      	bcs.n	80007c2 <Animation_Display_Image+0x56>
 8000780:	4b12      	ldr	r3, [pc, #72]	; (80007cc <Animation_Display_Image+0x60>)
 8000782:	68db      	ldr	r3, [r3, #12]
 8000784:	2b00      	cmp	r3, #0
 8000786:	d01c      	beq.n	80007c2 <Animation_Display_Image+0x56>
		animation_busy = 1;
 8000788:	4b11      	ldr	r3, [pc, #68]	; (80007d0 <Animation_Display_Image+0x64>)
 800078a:	2201      	movs	r2, #1
 800078c:	701a      	strb	r2, [r3, #0]
		animation_image = image;
 800078e:	4a11      	ldr	r2, [pc, #68]	; (80007d4 <Animation_Display_Image+0x68>)
 8000790:	88fb      	ldrh	r3, [r7, #6]
 8000792:	8013      	strh	r3, [r2, #0]
		animation_i = 0;
 8000794:	4b10      	ldr	r3, [pc, #64]	; (80007d8 <Animation_Display_Image+0x6c>)
 8000796:	2200      	movs	r2, #0
 8000798:	601a      	str	r2, [r3, #0]
		animation_mode = ANIMATION_MODE_IMAGE;
 800079a:	4b10      	ldr	r3, [pc, #64]	; (80007dc <Animation_Display_Image+0x70>)
 800079c:	2201      	movs	r2, #1
 800079e:	701a      	strb	r2, [r3, #0]

		Animation_Data_Prefetch(image);
 80007a0:	88fb      	ldrh	r3, [r7, #6]
 80007a2:	4618      	mov	r0, r3
 80007a4:	f000 f846 	bl	8000834 <Animation_Data_Prefetch>
		HAL_TIM_PWM_PulseFinishedCallback(&htim1);
 80007a8:	480d      	ldr	r0, [pc, #52]	; (80007e0 <Animation_Display_Image+0x74>)
 80007aa:	f000 fbd3 	bl	8000f54 <HAL_TIM_PWM_PulseFinishedCallback>
		HAL_TIM_PWM_Start_IT(&htim1, TIM_CHANNEL_1);
 80007ae:	2100      	movs	r1, #0
 80007b0:	480b      	ldr	r0, [pc, #44]	; (80007e0 <Animation_Display_Image+0x74>)
 80007b2:	f005 fb53 	bl	8005e5c <HAL_TIM_PWM_Start_IT>
		while(Animation_Busy());
 80007b6:	bf00      	nop
 80007b8:	f7ff fef8 	bl	80005ac <Animation_Busy>
 80007bc:	4603      	mov	r3, r0
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d1fa      	bne.n	80007b8 <Animation_Display_Image+0x4c>
	}
}
 80007c2:	bf00      	nop
 80007c4:	3708      	adds	r7, #8
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bd80      	pop	{r7, pc}
 80007ca:	bf00      	nop
 80007cc:	20000154 	.word	0x20000154
 80007d0:	20000144 	.word	0x20000144
 80007d4:	2000014c 	.word	0x2000014c
 80007d8:	20000150 	.word	0x20000150
 80007dc:	20000145 	.word	0x20000145
 80007e0:	20001240 	.word	0x20001240

080007e4 <Animation_Init>:
void Animation_Init(){
 80007e4:	b580      	push	{r7, lr}
 80007e6:	af00      	add	r7, sp, #0
	Animation_Data_Init();
 80007e8:	f000 f8e2 	bl	80009b0 <Animation_Data_Init>

	if(animation_data_config.images && animation_data_config.image_size){
 80007ec:	4b0f      	ldr	r3, [pc, #60]	; (800082c <Animation_Init+0x48>)
 80007ee:	689b      	ldr	r3, [r3, #8]
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d018      	beq.n	8000826 <Animation_Init+0x42>
 80007f4:	4b0d      	ldr	r3, [pc, #52]	; (800082c <Animation_Init+0x48>)
 80007f6:	68db      	ldr	r3, [r3, #12]
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d014      	beq.n	8000826 <Animation_Init+0x42>
		htim1.Init.Prescaler = animation_data_config.clkdiv;
 80007fc:	4b0b      	ldr	r3, [pc, #44]	; (800082c <Animation_Init+0x48>)
 80007fe:	881b      	ldrh	r3, [r3, #0]
 8000800:	461a      	mov	r2, r3
 8000802:	4b0b      	ldr	r3, [pc, #44]	; (8000830 <Animation_Init+0x4c>)
 8000804:	605a      	str	r2, [r3, #4]
		htim1.Init.Period = animation_data_config.pulse;
 8000806:	4b09      	ldr	r3, [pc, #36]	; (800082c <Animation_Init+0x48>)
 8000808:	789b      	ldrb	r3, [r3, #2]
 800080a:	461a      	mov	r2, r3
 800080c:	4b08      	ldr	r3, [pc, #32]	; (8000830 <Animation_Init+0x4c>)
 800080e:	60da      	str	r2, [r3, #12]
		if(HAL_TIM_Base_Init(&htim1) != HAL_OK){Error_Handler();}
 8000810:	4807      	ldr	r0, [pc, #28]	; (8000830 <Animation_Init+0x4c>)
 8000812:	f005 fa7b 	bl	8005d0c <HAL_TIM_Base_Init>
 8000816:	4603      	mov	r3, r0
 8000818:	2b00      	cmp	r3, #0
 800081a:	d001      	beq.n	8000820 <Animation_Init+0x3c>
 800081c:	f001 f874 	bl	8001908 <Error_Handler>
		Animation_Display_Color(0);
 8000820:	2000      	movs	r0, #0
 8000822:	f7ff feeb 	bl	80005fc <Animation_Display_Color>
	}
}
 8000826:	bf00      	nop
 8000828:	bd80      	pop	{r7, pc}
 800082a:	bf00      	nop
 800082c:	20000154 	.word	0x20000154
 8000830:	20001240 	.word	0x20001240

08000834 <Animation_Data_Prefetch>:
static uint8_t animation_data[ANIMATION_DATA_BUFFER_SIZE];
static uint32_t animation_data_buffered = 0;
static uint8_t animation_data_buffering_rq = 0;
static uint16_t animation_data_buffering_image = 0;

void Animation_Data_Prefetch(uint16_t image){
 8000834:	b580      	push	{r7, lr}
 8000836:	b084      	sub	sp, #16
 8000838:	af00      	add	r7, sp, #0
 800083a:	4603      	mov	r3, r0
 800083c:	80fb      	strh	r3, [r7, #6]
	uint32_t data_size = 0;
 800083e:	2300      	movs	r3, #0
 8000840:	60fb      	str	r3, [r7, #12]
	if(animation_data_config.image_size < ANIMATION_DATA_BUFFER_SIZE){
 8000842:	4b11      	ldr	r3, [pc, #68]	; (8000888 <Animation_Data_Prefetch+0x54>)
 8000844:	68db      	ldr	r3, [r3, #12]
 8000846:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800084a:	d203      	bcs.n	8000854 <Animation_Data_Prefetch+0x20>
		data_size = animation_data_config.image_size;
 800084c:	4b0e      	ldr	r3, [pc, #56]	; (8000888 <Animation_Data_Prefetch+0x54>)
 800084e:	68db      	ldr	r3, [r3, #12]
 8000850:	60fb      	str	r3, [r7, #12]
 8000852:	e002      	b.n	800085a <Animation_Data_Prefetch+0x26>
	}else{
		data_size = ANIMATION_DATA_BUFFER_SIZE;
 8000854:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000858:	60fb      	str	r3, [r7, #12]
	}
	W25Q_Read(animation_data, ANIMATION_DATA_HEADER_SIZE + (animation_data_config.image_size * image), data_size);
 800085a:	4b0b      	ldr	r3, [pc, #44]	; (8000888 <Animation_Data_Prefetch+0x54>)
 800085c:	68db      	ldr	r3, [r3, #12]
 800085e:	88fa      	ldrh	r2, [r7, #6]
 8000860:	fb02 f303 	mul.w	r3, r2, r3
 8000864:	3313      	adds	r3, #19
 8000866:	68fa      	ldr	r2, [r7, #12]
 8000868:	b292      	uxth	r2, r2
 800086a:	4619      	mov	r1, r3
 800086c:	4807      	ldr	r0, [pc, #28]	; (800088c <Animation_Data_Prefetch+0x58>)
 800086e:	f000 fde5 	bl	800143c <W25Q_Read>
	animation_data_buffered = data_size;
 8000872:	4a07      	ldr	r2, [pc, #28]	; (8000890 <Animation_Data_Prefetch+0x5c>)
 8000874:	68fb      	ldr	r3, [r7, #12]
 8000876:	6013      	str	r3, [r2, #0]
	animation_data_buffering_rq = 0;
 8000878:	4b06      	ldr	r3, [pc, #24]	; (8000894 <Animation_Data_Prefetch+0x60>)
 800087a:	2200      	movs	r2, #0
 800087c:	701a      	strb	r2, [r3, #0]
}
 800087e:	bf00      	nop
 8000880:	3710      	adds	r7, #16
 8000882:	46bd      	mov	sp, r7
 8000884:	bd80      	pop	{r7, pc}
 8000886:	bf00      	nop
 8000888:	20000154 	.word	0x20000154
 800088c:	20000164 	.word	0x20000164
 8000890:	20001164 	.word	0x20001164
 8000894:	20001168 	.word	0x20001168

08000898 <Animation_Data_Read>:
void Animation_Data_Read(uint16_t image){
 8000898:	b580      	push	{r7, lr}
 800089a:	b084      	sub	sp, #16
 800089c:	af00      	add	r7, sp, #0
 800089e:	4603      	mov	r3, r0
 80008a0:	80fb      	strh	r3, [r7, #6]
	uint32_t data_size = 0;
 80008a2:	2300      	movs	r3, #0
 80008a4:	60fb      	str	r3, [r7, #12]
	if((animation_data_config.image_size - animation_data_buffered) < ANIMATION_DATA_BUFFER_SIZE_HALF){
 80008a6:	4b20      	ldr	r3, [pc, #128]	; (8000928 <Animation_Data_Read+0x90>)
 80008a8:	68da      	ldr	r2, [r3, #12]
 80008aa:	4b20      	ldr	r3, [pc, #128]	; (800092c <Animation_Data_Read+0x94>)
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	1ad3      	subs	r3, r2, r3
 80008b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80008b4:	d206      	bcs.n	80008c4 <Animation_Data_Read+0x2c>
		data_size = animation_data_config.image_size - animation_data_buffered;
 80008b6:	4b1c      	ldr	r3, [pc, #112]	; (8000928 <Animation_Data_Read+0x90>)
 80008b8:	68da      	ldr	r2, [r3, #12]
 80008ba:	4b1c      	ldr	r3, [pc, #112]	; (800092c <Animation_Data_Read+0x94>)
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	1ad3      	subs	r3, r2, r3
 80008c0:	60fb      	str	r3, [r7, #12]
 80008c2:	e002      	b.n	80008ca <Animation_Data_Read+0x32>
	}else{
		data_size = ANIMATION_DATA_BUFFER_SIZE_HALF;
 80008c4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80008c8:	60fb      	str	r3, [r7, #12]
	}

	if(!(animation_data_buffered % ANIMATION_DATA_BUFFER_SIZE)){
 80008ca:	4b18      	ldr	r3, [pc, #96]	; (800092c <Animation_Data_Read+0x94>)
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d10f      	bne.n	80008f6 <Animation_Data_Read+0x5e>
		//If requested byte 0 of buffer
		W25Q_Read_DMA(&animation_data[0], data_size, ANIMATION_DATA_HEADER_SIZE + (animation_data_config.image_size * image) + animation_data_buffered);
 80008d6:	68fb      	ldr	r3, [r7, #12]
 80008d8:	b299      	uxth	r1, r3
 80008da:	4b13      	ldr	r3, [pc, #76]	; (8000928 <Animation_Data_Read+0x90>)
 80008dc:	68db      	ldr	r3, [r3, #12]
 80008de:	88fa      	ldrh	r2, [r7, #6]
 80008e0:	fb03 f202 	mul.w	r2, r3, r2
 80008e4:	4b11      	ldr	r3, [pc, #68]	; (800092c <Animation_Data_Read+0x94>)
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	4413      	add	r3, r2
 80008ea:	3313      	adds	r3, #19
 80008ec:	461a      	mov	r2, r3
 80008ee:	4810      	ldr	r0, [pc, #64]	; (8000930 <Animation_Data_Read+0x98>)
 80008f0:	f000 fd6c 	bl	80013cc <W25Q_Read_DMA>
 80008f4:	e00e      	b.n	8000914 <Animation_Data_Read+0x7c>
	}else{
		//If requested middle right byte of buffer
		W25Q_Read_DMA(&animation_data[ANIMATION_DATA_BUFFER_SIZE_HALF], data_size, ANIMATION_DATA_HEADER_SIZE + (animation_data_config.image_size * image) + animation_data_buffered);
 80008f6:	68fb      	ldr	r3, [r7, #12]
 80008f8:	b299      	uxth	r1, r3
 80008fa:	4b0b      	ldr	r3, [pc, #44]	; (8000928 <Animation_Data_Read+0x90>)
 80008fc:	68db      	ldr	r3, [r3, #12]
 80008fe:	88fa      	ldrh	r2, [r7, #6]
 8000900:	fb03 f202 	mul.w	r2, r3, r2
 8000904:	4b09      	ldr	r3, [pc, #36]	; (800092c <Animation_Data_Read+0x94>)
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	4413      	add	r3, r2
 800090a:	3313      	adds	r3, #19
 800090c:	461a      	mov	r2, r3
 800090e:	4809      	ldr	r0, [pc, #36]	; (8000934 <Animation_Data_Read+0x9c>)
 8000910:	f000 fd5c 	bl	80013cc <W25Q_Read_DMA>
	}

	animation_data_buffered += data_size;
 8000914:	4b05      	ldr	r3, [pc, #20]	; (800092c <Animation_Data_Read+0x94>)
 8000916:	681a      	ldr	r2, [r3, #0]
 8000918:	68fb      	ldr	r3, [r7, #12]
 800091a:	4413      	add	r3, r2
 800091c:	4a03      	ldr	r2, [pc, #12]	; (800092c <Animation_Data_Read+0x94>)
 800091e:	6013      	str	r3, [r2, #0]
}
 8000920:	bf00      	nop
 8000922:	3710      	adds	r7, #16
 8000924:	46bd      	mov	sp, r7
 8000926:	bd80      	pop	{r7, pc}
 8000928:	20000154 	.word	0x20000154
 800092c:	20001164 	.word	0x20001164
 8000930:	20000164 	.word	0x20000164
 8000934:	20000964 	.word	0x20000964

08000938 <Animation_Data_Get_Bit>:
uint8_t Animation_Data_Get_Bit(uint16_t image, uint32_t byte, uint8_t bit){
 8000938:	b480      	push	{r7}
 800093a:	b083      	sub	sp, #12
 800093c:	af00      	add	r7, sp, #0
 800093e:	4603      	mov	r3, r0
 8000940:	6039      	str	r1, [r7, #0]
 8000942:	80fb      	strh	r3, [r7, #6]
 8000944:	4613      	mov	r3, r2
 8000946:	717b      	strb	r3, [r7, #5]
	if(byte && !(byte % ANIMATION_DATA_BUFFER_SIZE_HALF) && !bit){
 8000948:	683b      	ldr	r3, [r7, #0]
 800094a:	2b00      	cmp	r3, #0
 800094c:	d013      	beq.n	8000976 <Animation_Data_Get_Bit+0x3e>
 800094e:	683b      	ldr	r3, [r7, #0]
 8000950:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000954:	2b00      	cmp	r3, #0
 8000956:	d10e      	bne.n	8000976 <Animation_Data_Get_Bit+0x3e>
 8000958:	797b      	ldrb	r3, [r7, #5]
 800095a:	2b00      	cmp	r3, #0
 800095c:	d10b      	bne.n	8000976 <Animation_Data_Get_Bit+0x3e>
		//If requested first bit of first byte from first or second half of buffer
		if(animation_data_buffered < animation_data_config.image_size){
 800095e:	4b0f      	ldr	r3, [pc, #60]	; (800099c <Animation_Data_Get_Bit+0x64>)
 8000960:	68da      	ldr	r2, [r3, #12]
 8000962:	4b0f      	ldr	r3, [pc, #60]	; (80009a0 <Animation_Data_Get_Bit+0x68>)
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	429a      	cmp	r2, r3
 8000968:	d905      	bls.n	8000976 <Animation_Data_Get_Bit+0x3e>
			animation_data_buffering_image = image;
 800096a:	4a0e      	ldr	r2, [pc, #56]	; (80009a4 <Animation_Data_Get_Bit+0x6c>)
 800096c:	88fb      	ldrh	r3, [r7, #6]
 800096e:	8013      	strh	r3, [r2, #0]
			animation_data_buffering_rq = 1;
 8000970:	4b0d      	ldr	r3, [pc, #52]	; (80009a8 <Animation_Data_Get_Bit+0x70>)
 8000972:	2201      	movs	r2, #1
 8000974:	701a      	strb	r2, [r3, #0]
		}
	}

	return (animation_data[byte % ANIMATION_DATA_BUFFER_SIZE] >> bit) & 1;
 8000976:	683b      	ldr	r3, [r7, #0]
 8000978:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800097c:	4a0b      	ldr	r2, [pc, #44]	; (80009ac <Animation_Data_Get_Bit+0x74>)
 800097e:	5cd3      	ldrb	r3, [r2, r3]
 8000980:	461a      	mov	r2, r3
 8000982:	797b      	ldrb	r3, [r7, #5]
 8000984:	fa42 f303 	asr.w	r3, r2, r3
 8000988:	b2db      	uxtb	r3, r3
 800098a:	f003 0301 	and.w	r3, r3, #1
 800098e:	b2db      	uxtb	r3, r3
}
 8000990:	4618      	mov	r0, r3
 8000992:	370c      	adds	r7, #12
 8000994:	46bd      	mov	sp, r7
 8000996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099a:	4770      	bx	lr
 800099c:	20000154 	.word	0x20000154
 80009a0:	20001164 	.word	0x20001164
 80009a4:	2000116a 	.word	0x2000116a
 80009a8:	20001168 	.word	0x20001168
 80009ac:	20000164 	.word	0x20000164

080009b0 <Animation_Data_Init>:
void Animation_Data_Init(){
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b086      	sub	sp, #24
 80009b4:	af00      	add	r7, sp, #0
	uint8_t data_error = 0;
 80009b6:	2300      	movs	r3, #0
 80009b8:	75fb      	strb	r3, [r7, #23]
	//Check size
	uint32_t data_size = 0;
 80009ba:	2300      	movs	r3, #0
 80009bc:	60bb      	str	r3, [r7, #8]
	W25Q_Read((uint8_t *)&data_size, 0, 4);
 80009be:	f107 0308 	add.w	r3, r7, #8
 80009c2:	2204      	movs	r2, #4
 80009c4:	2100      	movs	r1, #0
 80009c6:	4618      	mov	r0, r3
 80009c8:	f000 fd38 	bl	800143c <W25Q_Read>
	if((data_size > ANIMATION_DATA_HEADER_SIZE) && (data_size <= ANIMATION_DATA_MAX_SIZE)){
 80009cc:	68bb      	ldr	r3, [r7, #8]
 80009ce:	2b13      	cmp	r3, #19
 80009d0:	f240 80c0 	bls.w	8000b54 <Animation_Data_Init+0x1a4>
 80009d4:	68bb      	ldr	r3, [r7, #8]
 80009d6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80009da:	f200 80bb 	bhi.w	8000b54 <Animation_Data_Init+0x1a4>
		//Read CRC
		uint32_t data_crc = 0;
 80009de:	2300      	movs	r3, #0
 80009e0:	607b      	str	r3, [r7, #4]
		W25Q_Read((uint8_t *)&data_crc, data_size - 4, 4);
 80009e2:	68bb      	ldr	r3, [r7, #8]
 80009e4:	1f19      	subs	r1, r3, #4
 80009e6:	1d3b      	adds	r3, r7, #4
 80009e8:	2204      	movs	r2, #4
 80009ea:	4618      	mov	r0, r3
 80009ec:	f000 fd26 	bl	800143c <W25Q_Read>

		//Subtract CRC length
		data_size -= 4;
 80009f0:	68bb      	ldr	r3, [r7, #8]
 80009f2:	3b04      	subs	r3, #4
 80009f4:	60bb      	str	r3, [r7, #8]
		//Calculate actual CRC
		uint32_t i = 0;
 80009f6:	2300      	movs	r3, #0
 80009f8:	613b      	str	r3, [r7, #16]
		uint32_t data_crc_actual = 0;
 80009fa:	2300      	movs	r3, #0
 80009fc:	60fb      	str	r3, [r7, #12]
		if(data_size < ANIMATION_DATA_BUFFER_SIZE){
 80009fe:	68bb      	ldr	r3, [r7, #8]
 8000a00:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000a04:	d213      	bcs.n	8000a2e <Animation_Data_Init+0x7e>
			W25Q_Read(&animation_data[0], 0, data_size);
 8000a06:	68bb      	ldr	r3, [r7, #8]
 8000a08:	b29b      	uxth	r3, r3
 8000a0a:	461a      	mov	r2, r3
 8000a0c:	2100      	movs	r1, #0
 8000a0e:	4860      	ldr	r0, [pc, #384]	; (8000b90 <Animation_Data_Init+0x1e0>)
 8000a10:	f000 fd14 	bl	800143c <W25Q_Read>
			data_crc_actual = HAL_CRC_Calculate(&hcrc, (uint32_t *)&animation_data[0], data_size / 4);
 8000a14:	68bb      	ldr	r3, [r7, #8]
 8000a16:	089b      	lsrs	r3, r3, #2
 8000a18:	461a      	mov	r2, r3
 8000a1a:	495d      	ldr	r1, [pc, #372]	; (8000b90 <Animation_Data_Init+0x1e0>)
 8000a1c:	485d      	ldr	r0, [pc, #372]	; (8000b94 <Animation_Data_Init+0x1e4>)
 8000a1e:	f001 fb51 	bl	80020c4 <HAL_CRC_Calculate>
 8000a22:	60f8      	str	r0, [r7, #12]
			i += data_size;
 8000a24:	68bb      	ldr	r3, [r7, #8]
 8000a26:	693a      	ldr	r2, [r7, #16]
 8000a28:	4413      	add	r3, r2
 8000a2a:	613b      	str	r3, [r7, #16]
 8000a2c:	e040      	b.n	8000ab0 <Animation_Data_Init+0x100>
		}else{
			W25Q_Read(&animation_data[0], i, ANIMATION_DATA_BUFFER_SIZE);
 8000a2e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000a32:	6939      	ldr	r1, [r7, #16]
 8000a34:	4856      	ldr	r0, [pc, #344]	; (8000b90 <Animation_Data_Init+0x1e0>)
 8000a36:	f000 fd01 	bl	800143c <W25Q_Read>
			data_crc_actual = HAL_CRC_Calculate(&hcrc, (uint32_t *)&animation_data[0], ANIMATION_DATA_BUFFER_SIZE / 4);
 8000a3a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000a3e:	4954      	ldr	r1, [pc, #336]	; (8000b90 <Animation_Data_Init+0x1e0>)
 8000a40:	4854      	ldr	r0, [pc, #336]	; (8000b94 <Animation_Data_Init+0x1e4>)
 8000a42:	f001 fb3f 	bl	80020c4 <HAL_CRC_Calculate>
 8000a46:	60f8      	str	r0, [r7, #12]
			i += ANIMATION_DATA_BUFFER_SIZE;
 8000a48:	693b      	ldr	r3, [r7, #16]
 8000a4a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000a4e:	613b      	str	r3, [r7, #16]
		}
		while(i != data_size){
 8000a50:	e02e      	b.n	8000ab0 <Animation_Data_Init+0x100>
			if((data_size - i) < ANIMATION_DATA_BUFFER_SIZE){
 8000a52:	68ba      	ldr	r2, [r7, #8]
 8000a54:	693b      	ldr	r3, [r7, #16]
 8000a56:	1ad3      	subs	r3, r2, r3
 8000a58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000a5c:	d217      	bcs.n	8000a8e <Animation_Data_Init+0xde>
				W25Q_Read(&animation_data[0], i, data_size - i);
 8000a5e:	68bb      	ldr	r3, [r7, #8]
 8000a60:	b29a      	uxth	r2, r3
 8000a62:	693b      	ldr	r3, [r7, #16]
 8000a64:	b29b      	uxth	r3, r3
 8000a66:	1ad3      	subs	r3, r2, r3
 8000a68:	b29b      	uxth	r3, r3
 8000a6a:	461a      	mov	r2, r3
 8000a6c:	6939      	ldr	r1, [r7, #16]
 8000a6e:	4848      	ldr	r0, [pc, #288]	; (8000b90 <Animation_Data_Init+0x1e0>)
 8000a70:	f000 fce4 	bl	800143c <W25Q_Read>
				data_crc_actual = HAL_CRC_Accumulate(&hcrc, (uint32_t *)&animation_data[0], (data_size - i) / 4);
 8000a74:	68ba      	ldr	r2, [r7, #8]
 8000a76:	693b      	ldr	r3, [r7, #16]
 8000a78:	1ad3      	subs	r3, r2, r3
 8000a7a:	089b      	lsrs	r3, r3, #2
 8000a7c:	461a      	mov	r2, r3
 8000a7e:	4944      	ldr	r1, [pc, #272]	; (8000b90 <Animation_Data_Init+0x1e0>)
 8000a80:	4844      	ldr	r0, [pc, #272]	; (8000b94 <Animation_Data_Init+0x1e4>)
 8000a82:	f001 faf4 	bl	800206e <HAL_CRC_Accumulate>
 8000a86:	60f8      	str	r0, [r7, #12]
				i += data_size - i;
 8000a88:	68bb      	ldr	r3, [r7, #8]
 8000a8a:	613b      	str	r3, [r7, #16]
 8000a8c:	e010      	b.n	8000ab0 <Animation_Data_Init+0x100>
			}else{
				W25Q_Read(&animation_data[0], i, ANIMATION_DATA_BUFFER_SIZE);
 8000a8e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000a92:	6939      	ldr	r1, [r7, #16]
 8000a94:	483e      	ldr	r0, [pc, #248]	; (8000b90 <Animation_Data_Init+0x1e0>)
 8000a96:	f000 fcd1 	bl	800143c <W25Q_Read>
				data_crc_actual = HAL_CRC_Accumulate(&hcrc, (uint32_t *)&animation_data[0], ANIMATION_DATA_BUFFER_SIZE / 4);
 8000a9a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000a9e:	493c      	ldr	r1, [pc, #240]	; (8000b90 <Animation_Data_Init+0x1e0>)
 8000aa0:	483c      	ldr	r0, [pc, #240]	; (8000b94 <Animation_Data_Init+0x1e4>)
 8000aa2:	f001 fae4 	bl	800206e <HAL_CRC_Accumulate>
 8000aa6:	60f8      	str	r0, [r7, #12]
				i += ANIMATION_DATA_BUFFER_SIZE;
 8000aa8:	693b      	ldr	r3, [r7, #16]
 8000aaa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000aae:	613b      	str	r3, [r7, #16]
		while(i != data_size){
 8000ab0:	68bb      	ldr	r3, [r7, #8]
 8000ab2:	693a      	ldr	r2, [r7, #16]
 8000ab4:	429a      	cmp	r2, r3
 8000ab6:	d1cc      	bne.n	8000a52 <Animation_Data_Init+0xa2>
			}
		}

		//Check CRC
		if(data_crc_actual == data_crc){
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	68fa      	ldr	r2, [r7, #12]
 8000abc:	429a      	cmp	r2, r3
 8000abe:	d146      	bne.n	8000b4e <Animation_Data_Init+0x19e>
			//Read animation data configuration
			uint32_t data = 0;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	603b      	str	r3, [r7, #0]
			W25Q_Read((uint8_t *)&data, 4, 2);
 8000ac4:	463b      	mov	r3, r7
 8000ac6:	2202      	movs	r2, #2
 8000ac8:	2104      	movs	r1, #4
 8000aca:	4618      	mov	r0, r3
 8000acc:	f000 fcb6 	bl	800143c <W25Q_Read>
			animation_data_config.clkdiv = *(uint16_t *)&data;
 8000ad0:	463b      	mov	r3, r7
 8000ad2:	881a      	ldrh	r2, [r3, #0]
 8000ad4:	4b30      	ldr	r3, [pc, #192]	; (8000b98 <Animation_Data_Init+0x1e8>)
 8000ad6:	801a      	strh	r2, [r3, #0]
			W25Q_Read((uint8_t *)&data, 6, 1);
 8000ad8:	463b      	mov	r3, r7
 8000ada:	2201      	movs	r2, #1
 8000adc:	2106      	movs	r1, #6
 8000ade:	4618      	mov	r0, r3
 8000ae0:	f000 fcac 	bl	800143c <W25Q_Read>
			animation_data_config.pulse = *(uint8_t *)&data;
 8000ae4:	463b      	mov	r3, r7
 8000ae6:	781a      	ldrb	r2, [r3, #0]
 8000ae8:	4b2b      	ldr	r3, [pc, #172]	; (8000b98 <Animation_Data_Init+0x1e8>)
 8000aea:	709a      	strb	r2, [r3, #2]
			W25Q_Read((uint8_t *)&data, 7, 1);
 8000aec:	463b      	mov	r3, r7
 8000aee:	2201      	movs	r2, #1
 8000af0:	2107      	movs	r1, #7
 8000af2:	4618      	mov	r0, r3
 8000af4:	f000 fca2 	bl	800143c <W25Q_Read>
			animation_data_config.bit_0 = *(uint8_t *)&data;
 8000af8:	463b      	mov	r3, r7
 8000afa:	781a      	ldrb	r2, [r3, #0]
 8000afc:	4b26      	ldr	r3, [pc, #152]	; (8000b98 <Animation_Data_Init+0x1e8>)
 8000afe:	70da      	strb	r2, [r3, #3]
			W25Q_Read((uint8_t *)&data, 8, 1);
 8000b00:	463b      	mov	r3, r7
 8000b02:	2201      	movs	r2, #1
 8000b04:	2108      	movs	r1, #8
 8000b06:	4618      	mov	r0, r3
 8000b08:	f000 fc98 	bl	800143c <W25Q_Read>
			animation_data_config.bit_1 = *(uint8_t *)&data;
 8000b0c:	463b      	mov	r3, r7
 8000b0e:	781a      	ldrb	r2, [r3, #0]
 8000b10:	4b21      	ldr	r3, [pc, #132]	; (8000b98 <Animation_Data_Init+0x1e8>)
 8000b12:	711a      	strb	r2, [r3, #4]
			W25Q_Read((uint8_t *)&data, 9, 2);
 8000b14:	463b      	mov	r3, r7
 8000b16:	2202      	movs	r2, #2
 8000b18:	2109      	movs	r1, #9
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	f000 fc8e 	bl	800143c <W25Q_Read>
			animation_data_config.stop_pulses = *(uint16_t *)&data;
 8000b20:	463b      	mov	r3, r7
 8000b22:	881a      	ldrh	r2, [r3, #0]
 8000b24:	4b1c      	ldr	r3, [pc, #112]	; (8000b98 <Animation_Data_Init+0x1e8>)
 8000b26:	80da      	strh	r2, [r3, #6]
			W25Q_Read((uint8_t *)&data, 11, 4);
 8000b28:	463b      	mov	r3, r7
 8000b2a:	2204      	movs	r2, #4
 8000b2c:	210b      	movs	r1, #11
 8000b2e:	4618      	mov	r0, r3
 8000b30:	f000 fc84 	bl	800143c <W25Q_Read>
			animation_data_config.images = *(uint32_t *)&data;
 8000b34:	683b      	ldr	r3, [r7, #0]
 8000b36:	4a18      	ldr	r2, [pc, #96]	; (8000b98 <Animation_Data_Init+0x1e8>)
 8000b38:	6093      	str	r3, [r2, #8]
			W25Q_Read((uint8_t *)&data, 15, 4);
 8000b3a:	463b      	mov	r3, r7
 8000b3c:	2204      	movs	r2, #4
 8000b3e:	210f      	movs	r1, #15
 8000b40:	4618      	mov	r0, r3
 8000b42:	f000 fc7b 	bl	800143c <W25Q_Read>
			animation_data_config.image_size = *(uint32_t *)&data;
 8000b46:	683b      	ldr	r3, [r7, #0]
 8000b48:	4a13      	ldr	r2, [pc, #76]	; (8000b98 <Animation_Data_Init+0x1e8>)
 8000b4a:	60d3      	str	r3, [r2, #12]
	if((data_size > ANIMATION_DATA_HEADER_SIZE) && (data_size <= ANIMATION_DATA_MAX_SIZE)){
 8000b4c:	e004      	b.n	8000b58 <Animation_Data_Init+0x1a8>
		}else{
			data_error = 1;
 8000b4e:	2301      	movs	r3, #1
 8000b50:	75fb      	strb	r3, [r7, #23]
	if((data_size > ANIMATION_DATA_HEADER_SIZE) && (data_size <= ANIMATION_DATA_MAX_SIZE)){
 8000b52:	e001      	b.n	8000b58 <Animation_Data_Init+0x1a8>
		}
	}else{
		data_error = 1;
 8000b54:	2301      	movs	r3, #1
 8000b56:	75fb      	strb	r3, [r7, #23]
	}

	//Reading correct data failed
	if(data_error){
 8000b58:	7dfb      	ldrb	r3, [r7, #23]
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d014      	beq.n	8000b88 <Animation_Data_Init+0x1d8>
		animation_data_config.clkdiv = 0;
 8000b5e:	4b0e      	ldr	r3, [pc, #56]	; (8000b98 <Animation_Data_Init+0x1e8>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	801a      	strh	r2, [r3, #0]
		animation_data_config.pulse = 0;
 8000b64:	4b0c      	ldr	r3, [pc, #48]	; (8000b98 <Animation_Data_Init+0x1e8>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	709a      	strb	r2, [r3, #2]
		animation_data_config.bit_0 = 0;
 8000b6a:	4b0b      	ldr	r3, [pc, #44]	; (8000b98 <Animation_Data_Init+0x1e8>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	70da      	strb	r2, [r3, #3]
		animation_data_config.bit_1 = 0;
 8000b70:	4b09      	ldr	r3, [pc, #36]	; (8000b98 <Animation_Data_Init+0x1e8>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	711a      	strb	r2, [r3, #4]
		animation_data_config.stop_pulses = 0;
 8000b76:	4b08      	ldr	r3, [pc, #32]	; (8000b98 <Animation_Data_Init+0x1e8>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	80da      	strh	r2, [r3, #6]
		animation_data_config.images = 0;
 8000b7c:	4b06      	ldr	r3, [pc, #24]	; (8000b98 <Animation_Data_Init+0x1e8>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	609a      	str	r2, [r3, #8]
		animation_data_config.image_size = 0;
 8000b82:	4b05      	ldr	r3, [pc, #20]	; (8000b98 <Animation_Data_Init+0x1e8>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	60da      	str	r2, [r3, #12]
	}
}
 8000b88:	bf00      	nop
 8000b8a:	3718      	adds	r7, #24
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bd80      	pop	{r7, pc}
 8000b90:	20000164 	.word	0x20000164
 8000b94:	20001180 	.word	0x20001180
 8000b98:	20000154 	.word	0x20000154

08000b9c <Animation_Data_Buffer>:

void Animation_Data_Buffer(){
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	af00      	add	r7, sp, #0
	if(animation_data_buffering_rq){
 8000ba0:	4b06      	ldr	r3, [pc, #24]	; (8000bbc <Animation_Data_Buffer+0x20>)
 8000ba2:	781b      	ldrb	r3, [r3, #0]
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d007      	beq.n	8000bb8 <Animation_Data_Buffer+0x1c>
		animation_data_buffering_rq = 0;
 8000ba8:	4b04      	ldr	r3, [pc, #16]	; (8000bbc <Animation_Data_Buffer+0x20>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	701a      	strb	r2, [r3, #0]
		Animation_Data_Read(animation_data_buffering_image);
 8000bae:	4b04      	ldr	r3, [pc, #16]	; (8000bc0 <Animation_Data_Buffer+0x24>)
 8000bb0:	881b      	ldrh	r3, [r3, #0]
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	f7ff fe70 	bl	8000898 <Animation_Data_Read>
	}
}
 8000bb8:	bf00      	nop
 8000bba:	bd80      	pop	{r7, pc}
 8000bbc:	20001168 	.word	0x20001168
 8000bc0:	2000116a 	.word	0x2000116a

08000bc4 <Example_Animation_Play>:
uint32_t example_run = 0;
uint32_t example_current_animation = 0;
uint32_t example_current_animation_played_times = 0;
uint32_t example_current_animation_image = 0;

void Example_Animation_Play(uint32_t ntimes, uint32_t from_image, uint32_t length, uint32_t delay){
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b084      	sub	sp, #16
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	60f8      	str	r0, [r7, #12]
 8000bcc:	60b9      	str	r1, [r7, #8]
 8000bce:	607a      	str	r2, [r7, #4]
 8000bd0:	603b      	str	r3, [r7, #0]
	if(example_current_animation_played_times < ntimes){
 8000bd2:	4b19      	ldr	r3, [pc, #100]	; (8000c38 <Example_Animation_Play+0x74>)
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	68fa      	ldr	r2, [r7, #12]
 8000bd8:	429a      	cmp	r2, r3
 8000bda:	d920      	bls.n	8000c1e <Example_Animation_Play+0x5a>
		if(example_current_animation_image < length){
 8000bdc:	4b17      	ldr	r3, [pc, #92]	; (8000c3c <Example_Animation_Play+0x78>)
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	687a      	ldr	r2, [r7, #4]
 8000be2:	429a      	cmp	r2, r3
 8000be4:	d912      	bls.n	8000c0c <Example_Animation_Play+0x48>
			Animation_Display_Image(from_image + example_current_animation_image);
 8000be6:	68bb      	ldr	r3, [r7, #8]
 8000be8:	b29a      	uxth	r2, r3
 8000bea:	4b14      	ldr	r3, [pc, #80]	; (8000c3c <Example_Animation_Play+0x78>)
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	b29b      	uxth	r3, r3
 8000bf0:	4413      	add	r3, r2
 8000bf2:	b29b      	uxth	r3, r3
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	f7ff fdb9 	bl	800076c <Animation_Display_Image>
			example_current_animation_image++;
 8000bfa:	4b10      	ldr	r3, [pc, #64]	; (8000c3c <Example_Animation_Play+0x78>)
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	3301      	adds	r3, #1
 8000c00:	4a0e      	ldr	r2, [pc, #56]	; (8000c3c <Example_Animation_Play+0x78>)
 8000c02:	6013      	str	r3, [r2, #0]
			HAL_Delay(delay);
 8000c04:	6838      	ldr	r0, [r7, #0]
 8000c06:	f001 f8e1 	bl	8001dcc <HAL_Delay>
		}
	}else{
		example_current_animation_played_times = 0;
		example_current_animation++;
	}
}
 8000c0a:	e010      	b.n	8000c2e <Example_Animation_Play+0x6a>
			example_current_animation_image = 0;
 8000c0c:	4b0b      	ldr	r3, [pc, #44]	; (8000c3c <Example_Animation_Play+0x78>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	601a      	str	r2, [r3, #0]
			example_current_animation_played_times++;
 8000c12:	4b09      	ldr	r3, [pc, #36]	; (8000c38 <Example_Animation_Play+0x74>)
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	3301      	adds	r3, #1
 8000c18:	4a07      	ldr	r2, [pc, #28]	; (8000c38 <Example_Animation_Play+0x74>)
 8000c1a:	6013      	str	r3, [r2, #0]
}
 8000c1c:	e007      	b.n	8000c2e <Example_Animation_Play+0x6a>
		example_current_animation_played_times = 0;
 8000c1e:	4b06      	ldr	r3, [pc, #24]	; (8000c38 <Example_Animation_Play+0x74>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	601a      	str	r2, [r3, #0]
		example_current_animation++;
 8000c24:	4b06      	ldr	r3, [pc, #24]	; (8000c40 <Example_Animation_Play+0x7c>)
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	3301      	adds	r3, #1
 8000c2a:	4a05      	ldr	r2, [pc, #20]	; (8000c40 <Example_Animation_Play+0x7c>)
 8000c2c:	6013      	str	r3, [r2, #0]
}
 8000c2e:	bf00      	nop
 8000c30:	3710      	adds	r7, #16
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	bf00      	nop
 8000c38:	20001174 	.word	0x20001174
 8000c3c:	20001178 	.word	0x20001178
 8000c40:	20001170 	.word	0x20001170

08000c44 <App_Loop>:
///PART OF EXAMPLE ANIMATION TO HERE

void App_Loop(){
 8000c44:	b580      	push	{r7, lr}
 8000c46:	af00      	add	r7, sp, #0
	if(!USB_Enabled() && USB_Det_State()){
 8000c48:	f000 fa0a 	bl	8001060 <USB_Enabled>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d117      	bne.n	8000c82 <App_Loop+0x3e>
 8000c52:	f000 f9f9 	bl	8001048 <USB_Det_State>
 8000c56:	4603      	mov	r3, r0
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d012      	beq.n	8000c82 <App_Loop+0x3e>
		///PART OF EXAMPLE ANIMATION FROM HERE
		example_run = 0;
 8000c5c:	4b6d      	ldr	r3, [pc, #436]	; (8000e14 <App_Loop+0x1d0>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	601a      	str	r2, [r3, #0]
		example_current_animation = 0;
 8000c62:	4b6d      	ldr	r3, [pc, #436]	; (8000e18 <App_Loop+0x1d4>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	601a      	str	r2, [r3, #0]
		example_current_animation_played_times = 0;
 8000c68:	4b6c      	ldr	r3, [pc, #432]	; (8000e1c <App_Loop+0x1d8>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	601a      	str	r2, [r3, #0]
		example_current_animation_image = 0;
 8000c6e:	4b6c      	ldr	r3, [pc, #432]	; (8000e20 <App_Loop+0x1dc>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	601a      	str	r2, [r3, #0]
		///PART OF EXAMPLE ANIMATION TO HERE

		Animation_Display_Color(0);
 8000c74:	2000      	movs	r0, #0
 8000c76:	f7ff fcc1 	bl	80005fc <Animation_Display_Color>
		USB_Enable(1);
 8000c7a:	2001      	movs	r0, #1
 8000c7c:	f000 f9fc 	bl	8001078 <USB_Enable>
 8000c80:	e014      	b.n	8000cac <App_Loop+0x68>
	}else if(USB_Enabled() && !USB_Det_State()){
 8000c82:	f000 f9ed 	bl	8001060 <USB_Enabled>
 8000c86:	4603      	mov	r3, r0
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d00f      	beq.n	8000cac <App_Loop+0x68>
 8000c8c:	f000 f9dc 	bl	8001048 <USB_Det_State>
 8000c90:	4603      	mov	r3, r0
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d10a      	bne.n	8000cac <App_Loop+0x68>
		USB_Enable(0);
 8000c96:	2000      	movs	r0, #0
 8000c98:	f000 f9ee 	bl	8001078 <USB_Enable>
		LED_Set(LED_ON);
 8000c9c:	2001      	movs	r0, #1
 8000c9e:	f000 f96b 	bl	8000f78 <LED_Set>
		Animation_Init();
 8000ca2:	f7ff fd9f 	bl	80007e4 <Animation_Init>
		LED_Set(LED_OFF);
 8000ca6:	2000      	movs	r0, #0
 8000ca8:	f000 f966 	bl	8000f78 <LED_Set>
	}
	
	if(!USB_Enabled()){
 8000cac:	f000 f9d8 	bl	8001060 <USB_Enabled>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	f040 80ab 	bne.w	8000e0e <App_Loop+0x1ca>
		if(!animation_data_config.images || !animation_data_config.image_size){
 8000cb8:	4b5a      	ldr	r3, [pc, #360]	; (8000e24 <App_Loop+0x1e0>)
 8000cba:	689b      	ldr	r3, [r3, #8]
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d003      	beq.n	8000cc8 <App_Loop+0x84>
 8000cc0:	4b58      	ldr	r3, [pc, #352]	; (8000e24 <App_Loop+0x1e0>)
 8000cc2:	68db      	ldr	r3, [r3, #12]
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d10d      	bne.n	8000ce4 <App_Loop+0xa0>
			LED_Set(1 - LED_State());
 8000cc8:	f000 f976 	bl	8000fb8 <LED_State>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	f1c3 0301 	rsb	r3, r3, #1
 8000cd2:	b2db      	uxtb	r3, r3
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	f000 f94f 	bl	8000f78 <LED_Set>
			HAL_Delay(300);
 8000cda:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000cde:	f001 f875 	bl	8001dcc <HAL_Delay>
				HAL_Delay(100);
			}
			///PART OF EXAMPLE ANIMATION TO HERE
		}
	}
}
 8000ce2:	e094      	b.n	8000e0e <App_Loop+0x1ca>
			if(LED_State()){
 8000ce4:	f000 f968 	bl	8000fb8 <LED_State>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d002      	beq.n	8000cf4 <App_Loop+0xb0>
				LED_Set(LED_OFF);
 8000cee:	2000      	movs	r0, #0
 8000cf0:	f000 f942 	bl	8000f78 <LED_Set>
			if(!Button_State()){
 8000cf4:	f000 f8e4 	bl	8000ec0 <Button_State>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d121      	bne.n	8000d42 <App_Loop+0xfe>
				example_run = 1 - example_run;
 8000cfe:	4b45      	ldr	r3, [pc, #276]	; (8000e14 <App_Loop+0x1d0>)
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	f1c3 0301 	rsb	r3, r3, #1
 8000d06:	4a43      	ldr	r2, [pc, #268]	; (8000e14 <App_Loop+0x1d0>)
 8000d08:	6013      	str	r3, [r2, #0]
				if(!example_run){
 8000d0a:	4b42      	ldr	r3, [pc, #264]	; (8000e14 <App_Loop+0x1d0>)
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d10e      	bne.n	8000d30 <App_Loop+0xec>
					example_run = 0;
 8000d12:	4b40      	ldr	r3, [pc, #256]	; (8000e14 <App_Loop+0x1d0>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	601a      	str	r2, [r3, #0]
					example_current_animation = 0;
 8000d18:	4b3f      	ldr	r3, [pc, #252]	; (8000e18 <App_Loop+0x1d4>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	601a      	str	r2, [r3, #0]
					example_current_animation_played_times = 0;
 8000d1e:	4b3f      	ldr	r3, [pc, #252]	; (8000e1c <App_Loop+0x1d8>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	601a      	str	r2, [r3, #0]
					example_current_animation_image = 0;
 8000d24:	4b3e      	ldr	r3, [pc, #248]	; (8000e20 <App_Loop+0x1dc>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	601a      	str	r2, [r3, #0]
					Animation_Display_Color(0);
 8000d2a:	2000      	movs	r0, #0
 8000d2c:	f7ff fc66 	bl	80005fc <Animation_Display_Color>
				while(!Button_State());
 8000d30:	bf00      	nop
 8000d32:	f000 f8c5 	bl	8000ec0 <Button_State>
 8000d36:	4603      	mov	r3, r0
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d0fa      	beq.n	8000d32 <App_Loop+0xee>
				HAL_Delay(200);
 8000d3c:	20c8      	movs	r0, #200	; 0xc8
 8000d3e:	f001 f845 	bl	8001dcc <HAL_Delay>
			if(example_run && (animation_data_config.images == 35)){
 8000d42:	4b34      	ldr	r3, [pc, #208]	; (8000e14 <App_Loop+0x1d0>)
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d050      	beq.n	8000dec <App_Loop+0x1a8>
 8000d4a:	4b36      	ldr	r3, [pc, #216]	; (8000e24 <App_Loop+0x1e0>)
 8000d4c:	689b      	ldr	r3, [r3, #8]
 8000d4e:	2b23      	cmp	r3, #35	; 0x23
 8000d50:	d14c      	bne.n	8000dec <App_Loop+0x1a8>
				switch(example_current_animation){
 8000d52:	4b31      	ldr	r3, [pc, #196]	; (8000e18 <App_Loop+0x1d4>)
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	2b06      	cmp	r3, #6
 8000d58:	d84b      	bhi.n	8000df2 <App_Loop+0x1ae>
 8000d5a:	a201      	add	r2, pc, #4	; (adr r2, 8000d60 <App_Loop+0x11c>)
 8000d5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d60:	08000d7d 	.word	0x08000d7d
 8000d64:	08000d8b 	.word	0x08000d8b
 8000d68:	08000d99 	.word	0x08000d99
 8000d6c:	08000da9 	.word	0x08000da9
 8000d70:	08000db9 	.word	0x08000db9
 8000d74:	08000dd7 	.word	0x08000dd7
 8000d78:	08000de5 	.word	0x08000de5
						Example_Animation_Play(8, 0, 8, 50);
 8000d7c:	2332      	movs	r3, #50	; 0x32
 8000d7e:	2208      	movs	r2, #8
 8000d80:	2100      	movs	r1, #0
 8000d82:	2008      	movs	r0, #8
 8000d84:	f7ff ff1e 	bl	8000bc4 <Example_Animation_Play>
					break;
 8000d88:	e033      	b.n	8000df2 <App_Loop+0x1ae>
						Example_Animation_Play(8, 8, 8, 50);
 8000d8a:	2332      	movs	r3, #50	; 0x32
 8000d8c:	2208      	movs	r2, #8
 8000d8e:	2108      	movs	r1, #8
 8000d90:	2008      	movs	r0, #8
 8000d92:	f7ff ff17 	bl	8000bc4 <Example_Animation_Play>
					break;
 8000d96:	e02c      	b.n	8000df2 <App_Loop+0x1ae>
						Example_Animation_Play(4, 16, 2, 1000);
 8000d98:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d9c:	2202      	movs	r2, #2
 8000d9e:	2110      	movs	r1, #16
 8000da0:	2004      	movs	r0, #4
 8000da2:	f7ff ff0f 	bl	8000bc4 <Example_Animation_Play>
					break;
 8000da6:	e024      	b.n	8000df2 <App_Loop+0x1ae>
						Example_Animation_Play(2, 18, 2, 1000);
 8000da8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dac:	2202      	movs	r2, #2
 8000dae:	2112      	movs	r1, #18
 8000db0:	2002      	movs	r0, #2
 8000db2:	f7ff ff07 	bl	8000bc4 <Example_Animation_Play>
					break;
 8000db6:	e01c      	b.n	8000df2 <App_Loop+0x1ae>
						Example_Animation_Play(1, 20, 11, 50);
 8000db8:	2332      	movs	r3, #50	; 0x32
 8000dba:	220b      	movs	r2, #11
 8000dbc:	2114      	movs	r1, #20
 8000dbe:	2001      	movs	r0, #1
 8000dc0:	f7ff ff00 	bl	8000bc4 <Example_Animation_Play>
						if(example_current_animation == 5){
 8000dc4:	4b14      	ldr	r3, [pc, #80]	; (8000e18 <App_Loop+0x1d4>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	2b05      	cmp	r3, #5
 8000dca:	d111      	bne.n	8000df0 <App_Loop+0x1ac>
							HAL_Delay(2000);
 8000dcc:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000dd0:	f000 fffc 	bl	8001dcc <HAL_Delay>
					break;
 8000dd4:	e00c      	b.n	8000df0 <App_Loop+0x1ac>
						Example_Animation_Play(6, 31, 4, 250);
 8000dd6:	23fa      	movs	r3, #250	; 0xfa
 8000dd8:	2204      	movs	r2, #4
 8000dda:	211f      	movs	r1, #31
 8000ddc:	2006      	movs	r0, #6
 8000dde:	f7ff fef1 	bl	8000bc4 <Example_Animation_Play>
					break;
 8000de2:	e006      	b.n	8000df2 <App_Loop+0x1ae>
						example_current_animation = 0;
 8000de4:	4b0c      	ldr	r3, [pc, #48]	; (8000e18 <App_Loop+0x1d4>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	601a      	str	r2, [r3, #0]
					break;
 8000dea:	e002      	b.n	8000df2 <App_Loop+0x1ae>
			}
 8000dec:	bf00      	nop
 8000dee:	e000      	b.n	8000df2 <App_Loop+0x1ae>
					break;
 8000df0:	bf00      	nop
			if(example_run && (animation_data_config.images == 1)){
 8000df2:	4b08      	ldr	r3, [pc, #32]	; (8000e14 <App_Loop+0x1d0>)
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d009      	beq.n	8000e0e <App_Loop+0x1ca>
 8000dfa:	4b0a      	ldr	r3, [pc, #40]	; (8000e24 <App_Loop+0x1e0>)
 8000dfc:	689b      	ldr	r3, [r3, #8]
 8000dfe:	2b01      	cmp	r3, #1
 8000e00:	d105      	bne.n	8000e0e <App_Loop+0x1ca>
				Animation_Display_Image(0);
 8000e02:	2000      	movs	r0, #0
 8000e04:	f7ff fcb2 	bl	800076c <Animation_Display_Image>
				HAL_Delay(100);
 8000e08:	2064      	movs	r0, #100	; 0x64
 8000e0a:	f000 ffdf 	bl	8001dcc <HAL_Delay>
}
 8000e0e:	bf00      	nop
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	bf00      	nop
 8000e14:	2000116c 	.word	0x2000116c
 8000e18:	20001170 	.word	0x20001170
 8000e1c:	20001174 	.word	0x20001174
 8000e20:	20001178 	.word	0x20001178
 8000e24:	20000154 	.word	0x20000154

08000e28 <App_Init>:
void App_Init(){
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	af00      	add	r7, sp, #0
	LED_Set(LED_ON);
 8000e2c:	2001      	movs	r0, #1
 8000e2e:	f000 f8a3 	bl	8000f78 <LED_Set>
	USB_Init();
 8000e32:	f000 f945 	bl	80010c0 <USB_Init>
	Button_Init();
 8000e36:	f000 f84f 	bl	8000ed8 <Button_Init>
	Animation_Init();
 8000e3a:	f7ff fcd3 	bl	80007e4 <Animation_Init>
	LED_Set(LED_OFF);
 8000e3e:	2000      	movs	r0, #0
 8000e40:	f000 f89a 	bl	8000f78 <LED_Set>
}
 8000e44:	bf00      	nop
 8000e46:	bd80      	pop	{r7, pc}

08000e48 <Button_Interrupt>:
#include "main.h"
#include "button.h"

static uint8_t button_state = 0;

void Button_Interrupt(){
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	af00      	add	r7, sp, #0
	button_state = Button_Debounce_Read();
 8000e4c:	f000 f808 	bl	8000e60 <Button_Debounce_Read>
 8000e50:	4603      	mov	r3, r0
 8000e52:	461a      	mov	r2, r3
 8000e54:	4b01      	ldr	r3, [pc, #4]	; (8000e5c <Button_Interrupt+0x14>)
 8000e56:	701a      	strb	r2, [r3, #0]
}
 8000e58:	bf00      	nop
 8000e5a:	bd80      	pop	{r7, pc}
 8000e5c:	2000117c 	.word	0x2000117c

08000e60 <Button_Debounce_Read>:

uint8_t Button_Debounce_Read(){
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b082      	sub	sp, #8
 8000e64:	af00      	add	r7, sp, #0
	uint8_t level;
	uint8_t d = 0;
 8000e66:	2300      	movs	r3, #0
 8000e68:	71bb      	strb	r3, [r7, #6]
	uint8_t i = 0;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	717b      	strb	r3, [r7, #5]
	while(d != 1){
 8000e6e:	e01d      	b.n	8000eac <Button_Debounce_Read+0x4c>
		i = 0;
 8000e70:	2300      	movs	r3, #0
 8000e72:	717b      	strb	r3, [r7, #5]
		level = HAL_GPIO_ReadPin(BUTTON_GPIO_Port, BUTTON_Pin);
 8000e74:	2101      	movs	r1, #1
 8000e76:	4811      	ldr	r0, [pc, #68]	; (8000ebc <Button_Debounce_Read+0x5c>)
 8000e78:	f001 fe6e 	bl	8002b58 <HAL_GPIO_ReadPin>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	71fb      	strb	r3, [r7, #7]
		while(i != BUTTON_DEBOUNCE_SAMPLES){
 8000e80:	e011      	b.n	8000ea6 <Button_Debounce_Read+0x46>
			i++;
 8000e82:	797b      	ldrb	r3, [r7, #5]
 8000e84:	3301      	adds	r3, #1
 8000e86:	717b      	strb	r3, [r7, #5]
			if(HAL_GPIO_ReadPin(BUTTON_GPIO_Port, BUTTON_Pin) != level){
 8000e88:	2101      	movs	r1, #1
 8000e8a:	480c      	ldr	r0, [pc, #48]	; (8000ebc <Button_Debounce_Read+0x5c>)
 8000e8c:	f001 fe64 	bl	8002b58 <HAL_GPIO_ReadPin>
 8000e90:	4603      	mov	r3, r0
 8000e92:	461a      	mov	r2, r3
 8000e94:	79fb      	ldrb	r3, [r7, #7]
 8000e96:	4293      	cmp	r3, r2
 8000e98:	d000      	beq.n	8000e9c <Button_Debounce_Read+0x3c>
				break;
 8000e9a:	e007      	b.n	8000eac <Button_Debounce_Read+0x4c>
			}
			if(i == BUTTON_DEBOUNCE_SAMPLES){
 8000e9c:	797b      	ldrb	r3, [r7, #5]
 8000e9e:	2b0a      	cmp	r3, #10
 8000ea0:	d101      	bne.n	8000ea6 <Button_Debounce_Read+0x46>
				d = 1;
 8000ea2:	2301      	movs	r3, #1
 8000ea4:	71bb      	strb	r3, [r7, #6]
		while(i != BUTTON_DEBOUNCE_SAMPLES){
 8000ea6:	797b      	ldrb	r3, [r7, #5]
 8000ea8:	2b0a      	cmp	r3, #10
 8000eaa:	d1ea      	bne.n	8000e82 <Button_Debounce_Read+0x22>
	while(d != 1){
 8000eac:	79bb      	ldrb	r3, [r7, #6]
 8000eae:	2b01      	cmp	r3, #1
 8000eb0:	d1de      	bne.n	8000e70 <Button_Debounce_Read+0x10>
			}
		}
	}
	return level;
 8000eb2:	79fb      	ldrb	r3, [r7, #7]
}
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	3708      	adds	r7, #8
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	bd80      	pop	{r7, pc}
 8000ebc:	40020000 	.word	0x40020000

08000ec0 <Button_State>:

uint8_t Button_State(){
 8000ec0:	b480      	push	{r7}
 8000ec2:	af00      	add	r7, sp, #0
	return button_state;
 8000ec4:	4b03      	ldr	r3, [pc, #12]	; (8000ed4 <Button_State+0x14>)
 8000ec6:	781b      	ldrb	r3, [r3, #0]
}
 8000ec8:	4618      	mov	r0, r3
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed0:	4770      	bx	lr
 8000ed2:	bf00      	nop
 8000ed4:	2000117c 	.word	0x2000117c

08000ed8 <Button_Init>:
void Button_Init(){
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	af00      	add	r7, sp, #0
	Button_Interrupt();
 8000edc:	f7ff ffb4 	bl	8000e48 <Button_Interrupt>
 8000ee0:	bf00      	nop
 8000ee2:	bd80      	pop	{r7, pc}

08000ee4 <HAL_SPI_ErrorCallback>:
#include "button.h"
#include "animation.h"
#include "w25q.h"
#include "usb.h"

void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi){
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b082      	sub	sp, #8
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
	if(hspi->Instance == SPI1){
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	4a04      	ldr	r2, [pc, #16]	; (8000f04 <HAL_SPI_ErrorCallback+0x20>)
 8000ef2:	4293      	cmp	r3, r2
 8000ef4:	d101      	bne.n	8000efa <HAL_SPI_ErrorCallback+0x16>
		W25Q_SPI_Error_Interrupt();
 8000ef6:	f000 f8ed 	bl	80010d4 <W25Q_SPI_Error_Interrupt>
	}
}
 8000efa:	bf00      	nop
 8000efc:	3708      	adds	r7, #8
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	40013000 	.word	0x40013000

08000f08 <HAL_SPI_RxCpltCallback>:
void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi){
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b082      	sub	sp, #8
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
	if(hspi->Instance == SPI1){
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	4a04      	ldr	r2, [pc, #16]	; (8000f28 <HAL_SPI_RxCpltCallback+0x20>)
 8000f16:	4293      	cmp	r3, r2
 8000f18:	d101      	bne.n	8000f1e <HAL_SPI_RxCpltCallback+0x16>
		W25Q_SPI_Receive_DMA_Interrupt();
 8000f1a:	f000 f8e7 	bl	80010ec <W25Q_SPI_Receive_DMA_Interrupt>
	}
}
 8000f1e:	bf00      	nop
 8000f20:	3708      	adds	r7, #8
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}
 8000f26:	bf00      	nop
 8000f28:	40013000 	.word	0x40013000

08000f2c <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b082      	sub	sp, #8
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	4603      	mov	r3, r0
 8000f34:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == BUTTON_Pin){
 8000f36:	88fb      	ldrh	r3, [r7, #6]
 8000f38:	2b01      	cmp	r3, #1
 8000f3a:	d102      	bne.n	8000f42 <HAL_GPIO_EXTI_Callback+0x16>
		Button_Interrupt();
 8000f3c:	f7ff ff84 	bl	8000e48 <Button_Interrupt>
	}
	else if(GPIO_Pin == USB_DET_Pin){
		USB_Det_Interrupt();
	}
}
 8000f40:	e004      	b.n	8000f4c <HAL_GPIO_EXTI_Callback+0x20>
	else if(GPIO_Pin == USB_DET_Pin){
 8000f42:	88fb      	ldrh	r3, [r7, #6]
 8000f44:	2b40      	cmp	r3, #64	; 0x40
 8000f46:	d101      	bne.n	8000f4c <HAL_GPIO_EXTI_Callback+0x20>
		USB_Det_Interrupt();
 8000f48:	f000 f842 	bl	8000fd0 <USB_Det_Interrupt>
}
 8000f4c:	bf00      	nop
 8000f4e:	3708      	adds	r7, #8
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bd80      	pop	{r7, pc}

08000f54 <HAL_TIM_PWM_PulseFinishedCallback>:
void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim){
	if(htim->Instance == TIM1){
		Animation_Timer_Error_Interrupt();
	}
}
void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim){
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b082      	sub	sp, #8
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM1){
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	4a04      	ldr	r2, [pc, #16]	; (8000f74 <HAL_TIM_PWM_PulseFinishedCallback+0x20>)
 8000f62:	4293      	cmp	r3, r2
 8000f64:	d101      	bne.n	8000f6a <HAL_TIM_PWM_PulseFinishedCallback+0x16>
		Animation_PWM_Pulse_Interrupt();
 8000f66:	f7ff fab7 	bl	80004d8 <Animation_PWM_Pulse_Interrupt>
	}
}
 8000f6a:	bf00      	nop
 8000f6c:	3708      	adds	r7, #8
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	bf00      	nop
 8000f74:	40010000 	.word	0x40010000

08000f78 <LED_Set>:
#include "main.h"
#include "led.h"

static uint8_t led_state = LED_OFF;

void LED_Set(uint8_t state){
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b082      	sub	sp, #8
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	4603      	mov	r3, r0
 8000f80:	71fb      	strb	r3, [r7, #7]
	led_state = state;
 8000f82:	4a0b      	ldr	r2, [pc, #44]	; (8000fb0 <LED_Set+0x38>)
 8000f84:	79fb      	ldrb	r3, [r7, #7]
 8000f86:	7013      	strb	r3, [r2, #0]
	if(state){
 8000f88:	79fb      	ldrb	r3, [r7, #7]
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d006      	beq.n	8000f9c <LED_Set+0x24>
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000f8e:	2200      	movs	r2, #0
 8000f90:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f94:	4807      	ldr	r0, [pc, #28]	; (8000fb4 <LED_Set+0x3c>)
 8000f96:	f001 fdf7 	bl	8002b88 <HAL_GPIO_WritePin>
	}else{
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
	}
}
 8000f9a:	e005      	b.n	8000fa8 <LED_Set+0x30>
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8000f9c:	2201      	movs	r2, #1
 8000f9e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000fa2:	4804      	ldr	r0, [pc, #16]	; (8000fb4 <LED_Set+0x3c>)
 8000fa4:	f001 fdf0 	bl	8002b88 <HAL_GPIO_WritePin>
}
 8000fa8:	bf00      	nop
 8000faa:	3708      	adds	r7, #8
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bd80      	pop	{r7, pc}
 8000fb0:	2000117d 	.word	0x2000117d
 8000fb4:	40020800 	.word	0x40020800

08000fb8 <LED_State>:
uint8_t LED_State(){
 8000fb8:	b480      	push	{r7}
 8000fba:	af00      	add	r7, sp, #0
	return led_state;
 8000fbc:	4b03      	ldr	r3, [pc, #12]	; (8000fcc <LED_State+0x14>)
 8000fbe:	781b      	ldrb	r3, [r3, #0]
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc8:	4770      	bx	lr
 8000fca:	bf00      	nop
 8000fcc:	2000117d 	.word	0x2000117d

08000fd0 <USB_Det_Interrupt>:
extern USBD_HandleTypeDef hUsbDeviceFS;

static uint8_t usb_det_state = 0;
static uint8_t usb_enabled = 1;

void USB_Det_Interrupt(){
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	af00      	add	r7, sp, #0
	usb_det_state = USB_Det_Debounce_Read();
 8000fd4:	f000 f808 	bl	8000fe8 <USB_Det_Debounce_Read>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	461a      	mov	r2, r3
 8000fdc:	4b01      	ldr	r3, [pc, #4]	; (8000fe4 <USB_Det_Interrupt+0x14>)
 8000fde:	701a      	strb	r2, [r3, #0]
}
 8000fe0:	bf00      	nop
 8000fe2:	bd80      	pop	{r7, pc}
 8000fe4:	2000117e 	.word	0x2000117e

08000fe8 <USB_Det_Debounce_Read>:

uint8_t USB_Det_Debounce_Read(){
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b082      	sub	sp, #8
 8000fec:	af00      	add	r7, sp, #0
	uint8_t level;
	uint8_t d = 0;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	71bb      	strb	r3, [r7, #6]
	uint8_t i = 0;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	717b      	strb	r3, [r7, #5]
	while(d != 1){
 8000ff6:	e01d      	b.n	8001034 <USB_Det_Debounce_Read+0x4c>
		i = 0;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	717b      	strb	r3, [r7, #5]
		level = HAL_GPIO_ReadPin(USB_DET_GPIO_Port, USB_DET_Pin);
 8000ffc:	2140      	movs	r1, #64	; 0x40
 8000ffe:	4811      	ldr	r0, [pc, #68]	; (8001044 <USB_Det_Debounce_Read+0x5c>)
 8001000:	f001 fdaa 	bl	8002b58 <HAL_GPIO_ReadPin>
 8001004:	4603      	mov	r3, r0
 8001006:	71fb      	strb	r3, [r7, #7]
		while(i != USB_DET_DEBOUNCE_SAMPLES){
 8001008:	e011      	b.n	800102e <USB_Det_Debounce_Read+0x46>
			i++;
 800100a:	797b      	ldrb	r3, [r7, #5]
 800100c:	3301      	adds	r3, #1
 800100e:	717b      	strb	r3, [r7, #5]
			if(HAL_GPIO_ReadPin(USB_DET_GPIO_Port, USB_DET_Pin) != level){
 8001010:	2140      	movs	r1, #64	; 0x40
 8001012:	480c      	ldr	r0, [pc, #48]	; (8001044 <USB_Det_Debounce_Read+0x5c>)
 8001014:	f001 fda0 	bl	8002b58 <HAL_GPIO_ReadPin>
 8001018:	4603      	mov	r3, r0
 800101a:	461a      	mov	r2, r3
 800101c:	79fb      	ldrb	r3, [r7, #7]
 800101e:	4293      	cmp	r3, r2
 8001020:	d000      	beq.n	8001024 <USB_Det_Debounce_Read+0x3c>
				break;
 8001022:	e007      	b.n	8001034 <USB_Det_Debounce_Read+0x4c>
			}
			if(i == USB_DET_DEBOUNCE_SAMPLES){
 8001024:	797b      	ldrb	r3, [r7, #5]
 8001026:	2b0a      	cmp	r3, #10
 8001028:	d101      	bne.n	800102e <USB_Det_Debounce_Read+0x46>
				d = 1;
 800102a:	2301      	movs	r3, #1
 800102c:	71bb      	strb	r3, [r7, #6]
		while(i != USB_DET_DEBOUNCE_SAMPLES){
 800102e:	797b      	ldrb	r3, [r7, #5]
 8001030:	2b0a      	cmp	r3, #10
 8001032:	d1ea      	bne.n	800100a <USB_Det_Debounce_Read+0x22>
	while(d != 1){
 8001034:	79bb      	ldrb	r3, [r7, #6]
 8001036:	2b01      	cmp	r3, #1
 8001038:	d1de      	bne.n	8000ff8 <USB_Det_Debounce_Read+0x10>
			}
		}
	}
	return level;
 800103a:	79fb      	ldrb	r3, [r7, #7]
}
 800103c:	4618      	mov	r0, r3
 800103e:	3708      	adds	r7, #8
 8001040:	46bd      	mov	sp, r7
 8001042:	bd80      	pop	{r7, pc}
 8001044:	40020400 	.word	0x40020400

08001048 <USB_Det_State>:

uint8_t USB_Det_State(){
 8001048:	b480      	push	{r7}
 800104a:	af00      	add	r7, sp, #0
	return usb_det_state;
 800104c:	4b03      	ldr	r3, [pc, #12]	; (800105c <USB_Det_State+0x14>)
 800104e:	781b      	ldrb	r3, [r3, #0]
}
 8001050:	4618      	mov	r0, r3
 8001052:	46bd      	mov	sp, r7
 8001054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001058:	4770      	bx	lr
 800105a:	bf00      	nop
 800105c:	2000117e 	.word	0x2000117e

08001060 <USB_Enabled>:
uint8_t USB_Enabled(){
 8001060:	b480      	push	{r7}
 8001062:	af00      	add	r7, sp, #0
	return usb_enabled;
 8001064:	4b03      	ldr	r3, [pc, #12]	; (8001074 <USB_Enabled+0x14>)
 8001066:	781b      	ldrb	r3, [r3, #0]
}
 8001068:	4618      	mov	r0, r3
 800106a:	46bd      	mov	sp, r7
 800106c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001070:	4770      	bx	lr
 8001072:	bf00      	nop
 8001074:	20000000 	.word	0x20000000

08001078 <USB_Enable>:
void USB_Enable(uint8_t enable){
 8001078:	b580      	push	{r7, lr}
 800107a:	b082      	sub	sp, #8
 800107c:	af00      	add	r7, sp, #0
 800107e:	4603      	mov	r3, r0
 8001080:	71fb      	strb	r3, [r7, #7]
	if(enable){
 8001082:	79fb      	ldrb	r3, [r7, #7]
 8001084:	2b00      	cmp	r3, #0
 8001086:	d008      	beq.n	800109a <USB_Enable+0x22>
		if(USBD_Start(&hUsbDeviceFS) != USBD_OK){Error_Handler();}
 8001088:	480b      	ldr	r0, [pc, #44]	; (80010b8 <USB_Enable+0x40>)
 800108a:	f009 fc3a 	bl	800a902 <USBD_Start>
 800108e:	4603      	mov	r3, r0
 8001090:	2b00      	cmp	r3, #0
 8001092:	d00a      	beq.n	80010aa <USB_Enable+0x32>
 8001094:	f000 fc38 	bl	8001908 <Error_Handler>
 8001098:	e007      	b.n	80010aa <USB_Enable+0x32>
	}else{
		if(USBD_Stop(&hUsbDeviceFS) != USBD_OK){Error_Handler();}
 800109a:	4807      	ldr	r0, [pc, #28]	; (80010b8 <USB_Enable+0x40>)
 800109c:	f009 fc3d 	bl	800a91a <USBD_Stop>
 80010a0:	4603      	mov	r3, r0
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d001      	beq.n	80010aa <USB_Enable+0x32>
 80010a6:	f000 fc2f 	bl	8001908 <Error_Handler>
	}
	usb_enabled = enable;
 80010aa:	4a04      	ldr	r2, [pc, #16]	; (80010bc <USB_Enable+0x44>)
 80010ac:	79fb      	ldrb	r3, [r7, #7]
 80010ae:	7013      	strb	r3, [r2, #0]
}
 80010b0:	bf00      	nop
 80010b2:	3708      	adds	r7, #8
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bd80      	pop	{r7, pc}
 80010b8:	20001290 	.word	0x20001290
 80010bc:	20000000 	.word	0x20000000

080010c0 <USB_Init>:
void USB_Init(){
 80010c0:	b580      	push	{r7, lr}
 80010c2:	af00      	add	r7, sp, #0
	USB_Det_Interrupt();
 80010c4:	f7ff ff84 	bl	8000fd0 <USB_Det_Interrupt>
	USB_Enable(0);
 80010c8:	2000      	movs	r0, #0
 80010ca:	f7ff ffd5 	bl	8001078 <USB_Enable>
 80010ce:	bf00      	nop
 80010d0:	bd80      	pop	{r7, pc}
	...

080010d4 <W25Q_SPI_Error_Interrupt>:

extern SPI_HandleTypeDef hspi1;
uint8_t w25q_dma_busy = 0;

//Hardware
void W25Q_SPI_Error_Interrupt(){
 80010d4:	b580      	push	{r7, lr}
 80010d6:	af00      	add	r7, sp, #0
	W25Q_Set_CS(1);
 80010d8:	2001      	movs	r0, #1
 80010da:	f000 f84d 	bl	8001178 <W25Q_Set_CS>
	w25q_dma_busy = 0;
 80010de:	4b02      	ldr	r3, [pc, #8]	; (80010e8 <W25Q_SPI_Error_Interrupt+0x14>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	701a      	strb	r2, [r3, #0]
}
 80010e4:	bf00      	nop
 80010e6:	bd80      	pop	{r7, pc}
 80010e8:	2000117f 	.word	0x2000117f

080010ec <W25Q_SPI_Receive_DMA_Interrupt>:
void W25Q_SPI_Receive_DMA_Interrupt(){
 80010ec:	b580      	push	{r7, lr}
 80010ee:	af00      	add	r7, sp, #0
	W25Q_Set_CS(1);
 80010f0:	2001      	movs	r0, #1
 80010f2:	f000 f841 	bl	8001178 <W25Q_Set_CS>
	w25q_dma_busy = 0;
 80010f6:	4b02      	ldr	r3, [pc, #8]	; (8001100 <W25Q_SPI_Receive_DMA_Interrupt+0x14>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	701a      	strb	r2, [r3, #0]
}
 80010fc:	bf00      	nop
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	2000117f 	.word	0x2000117f

08001104 <W25Q_SPI_Receive_DMA>:
void W25Q_SPI_Receive_DMA(uint8_t *data, uint16_t length){
 8001104:	b580      	push	{r7, lr}
 8001106:	b082      	sub	sp, #8
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
 800110c:	460b      	mov	r3, r1
 800110e:	807b      	strh	r3, [r7, #2]
	HAL_SPI_Receive_DMA(&hspi1, data, length);
 8001110:	887b      	ldrh	r3, [r7, #2]
 8001112:	461a      	mov	r2, r3
 8001114:	6879      	ldr	r1, [r7, #4]
 8001116:	4803      	ldr	r0, [pc, #12]	; (8001124 <W25Q_SPI_Receive_DMA+0x20>)
 8001118:	f004 f8f4 	bl	8005304 <HAL_SPI_Receive_DMA>
}
 800111c:	bf00      	nop
 800111e:	3708      	adds	r7, #8
 8001120:	46bd      	mov	sp, r7
 8001122:	bd80      	pop	{r7, pc}
 8001124:	20001188 	.word	0x20001188

08001128 <W25Q_SPI_Receive>:
void W25Q_SPI_Receive(uint8_t *data, uint16_t length){
 8001128:	b580      	push	{r7, lr}
 800112a:	b082      	sub	sp, #8
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
 8001130:	460b      	mov	r3, r1
 8001132:	807b      	strh	r3, [r7, #2]
	HAL_SPI_Receive(&hspi1, data, length, W25Q_BLOCKING_TIMEOUT);
 8001134:	887a      	ldrh	r2, [r7, #2]
 8001136:	f242 7310 	movw	r3, #10000	; 0x2710
 800113a:	6879      	ldr	r1, [r7, #4]
 800113c:	4803      	ldr	r0, [pc, #12]	; (800114c <W25Q_SPI_Receive+0x24>)
 800113e:	f003 fe2e 	bl	8004d9e <HAL_SPI_Receive>
}
 8001142:	bf00      	nop
 8001144:	3708      	adds	r7, #8
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}
 800114a:	bf00      	nop
 800114c:	20001188 	.word	0x20001188

08001150 <W25Q_SPI_Transmit>:
void W25Q_SPI_Transmit(uint8_t *data, uint16_t length){
 8001150:	b580      	push	{r7, lr}
 8001152:	b082      	sub	sp, #8
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
 8001158:	460b      	mov	r3, r1
 800115a:	807b      	strh	r3, [r7, #2]
	HAL_SPI_Transmit(&hspi1, data, length, W25Q_BLOCKING_TIMEOUT);
 800115c:	887a      	ldrh	r2, [r7, #2]
 800115e:	f242 7310 	movw	r3, #10000	; 0x2710
 8001162:	6879      	ldr	r1, [r7, #4]
 8001164:	4803      	ldr	r0, [pc, #12]	; (8001174 <W25Q_SPI_Transmit+0x24>)
 8001166:	f003 fcde 	bl	8004b26 <HAL_SPI_Transmit>
}
 800116a:	bf00      	nop
 800116c:	3708      	adds	r7, #8
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}
 8001172:	bf00      	nop
 8001174:	20001188 	.word	0x20001188

08001178 <W25Q_Set_CS>:
void W25Q_Set_CS(uint8_t cs){
 8001178:	b580      	push	{r7, lr}
 800117a:	b082      	sub	sp, #8
 800117c:	af00      	add	r7, sp, #0
 800117e:	4603      	mov	r3, r0
 8001180:	71fb      	strb	r3, [r7, #7]
	if(!cs){
 8001182:	79fb      	ldrb	r3, [r7, #7]
 8001184:	2b00      	cmp	r3, #0
 8001186:	d105      	bne.n	8001194 <W25Q_Set_CS+0x1c>
		HAL_GPIO_WritePin(FLASH_CS_GPIO_Port, FLASH_CS_Pin, GPIO_PIN_RESET);
 8001188:	2200      	movs	r2, #0
 800118a:	2110      	movs	r1, #16
 800118c:	4806      	ldr	r0, [pc, #24]	; (80011a8 <W25Q_Set_CS+0x30>)
 800118e:	f001 fcfb 	bl	8002b88 <HAL_GPIO_WritePin>
	}else{
		HAL_GPIO_WritePin(FLASH_CS_GPIO_Port, FLASH_CS_Pin, GPIO_PIN_SET);
	}
}
 8001192:	e004      	b.n	800119e <W25Q_Set_CS+0x26>
		HAL_GPIO_WritePin(FLASH_CS_GPIO_Port, FLASH_CS_Pin, GPIO_PIN_SET);
 8001194:	2201      	movs	r2, #1
 8001196:	2110      	movs	r1, #16
 8001198:	4803      	ldr	r0, [pc, #12]	; (80011a8 <W25Q_Set_CS+0x30>)
 800119a:	f001 fcf5 	bl	8002b88 <HAL_GPIO_WritePin>
}
 800119e:	bf00      	nop
 80011a0:	3708      	adds	r7, #8
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	bf00      	nop
 80011a8:	40020000 	.word	0x40020000

080011ac <W25Q_Write_Enable>:

//USB Side Commands
void W25Q_Write_Enable(uint8_t enable){
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b084      	sub	sp, #16
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	4603      	mov	r3, r0
 80011b4:	71fb      	strb	r3, [r7, #7]
	W25Q_Set_CS(0);
 80011b6:	2000      	movs	r0, #0
 80011b8:	f7ff ffde 	bl	8001178 <W25Q_Set_CS>
	uint8_t cmd = W25Q_CMD_WRIRE_ENABLE;
 80011bc:	2306      	movs	r3, #6
 80011be:	73fb      	strb	r3, [r7, #15]
	if(!enable){
 80011c0:	79fb      	ldrb	r3, [r7, #7]
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d101      	bne.n	80011ca <W25Q_Write_Enable+0x1e>
		cmd = W25Q_CMD_WRITE_DISABLE;
 80011c6:	2304      	movs	r3, #4
 80011c8:	73fb      	strb	r3, [r7, #15]
	}
	W25Q_SPI_Transmit(&cmd, 1);
 80011ca:	f107 030f 	add.w	r3, r7, #15
 80011ce:	2101      	movs	r1, #1
 80011d0:	4618      	mov	r0, r3
 80011d2:	f7ff ffbd 	bl	8001150 <W25Q_SPI_Transmit>
	W25Q_Set_CS(1);
 80011d6:	2001      	movs	r0, #1
 80011d8:	f7ff ffce 	bl	8001178 <W25Q_Set_CS>
}
 80011dc:	bf00      	nop
 80011de:	3710      	adds	r7, #16
 80011e0:	46bd      	mov	sp, r7
 80011e2:	bd80      	pop	{r7, pc}

080011e4 <W25Q_Busy>:
uint8_t W25Q_Busy(){
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b082      	sub	sp, #8
 80011e8:	af00      	add	r7, sp, #0
	W25Q_Set_CS(0);
 80011ea:	2000      	movs	r0, #0
 80011ec:	f7ff ffc4 	bl	8001178 <W25Q_Set_CS>
	uint8_t tmp = W25Q_CMD_READ_STATUS_R1;
 80011f0:	2305      	movs	r3, #5
 80011f2:	71fb      	strb	r3, [r7, #7]
	W25Q_SPI_Transmit(&tmp, 1);
 80011f4:	1dfb      	adds	r3, r7, #7
 80011f6:	2101      	movs	r1, #1
 80011f8:	4618      	mov	r0, r3
 80011fa:	f7ff ffa9 	bl	8001150 <W25Q_SPI_Transmit>
	W25Q_SPI_Receive(&tmp, 1);
 80011fe:	1dfb      	adds	r3, r7, #7
 8001200:	2101      	movs	r1, #1
 8001202:	4618      	mov	r0, r3
 8001204:	f7ff ff90 	bl	8001128 <W25Q_SPI_Receive>
	W25Q_Set_CS(1);
 8001208:	2001      	movs	r0, #1
 800120a:	f7ff ffb5 	bl	8001178 <W25Q_Set_CS>
	return (tmp & 1);
 800120e:	79fb      	ldrb	r3, [r7, #7]
 8001210:	f003 0301 	and.w	r3, r3, #1
 8001214:	b2db      	uxtb	r3, r3
}
 8001216:	4618      	mov	r0, r3
 8001218:	3708      	adds	r7, #8
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}

0800121e <W25Q_Erase_Sector>:
void W25Q_Erase_Sector(uint16_t sector){
 800121e:	b580      	push	{r7, lr}
 8001220:	b084      	sub	sp, #16
 8001222:	af00      	add	r7, sp, #0
 8001224:	4603      	mov	r3, r0
 8001226:	80fb      	strh	r3, [r7, #6]
	while(W25Q_Busy());
 8001228:	bf00      	nop
 800122a:	f7ff ffdb 	bl	80011e4 <W25Q_Busy>
 800122e:	4603      	mov	r3, r0
 8001230:	2b00      	cmp	r3, #0
 8001232:	d1fa      	bne.n	800122a <W25Q_Erase_Sector+0xc>
	W25Q_Write_Enable(1);
 8001234:	2001      	movs	r0, #1
 8001236:	f7ff ffb9 	bl	80011ac <W25Q_Write_Enable>
	while(W25Q_Busy());
 800123a:	bf00      	nop
 800123c:	f7ff ffd2 	bl	80011e4 <W25Q_Busy>
 8001240:	4603      	mov	r3, r0
 8001242:	2b00      	cmp	r3, #0
 8001244:	d1fa      	bne.n	800123c <W25Q_Erase_Sector+0x1e>
	W25Q_Set_CS(0);
 8001246:	2000      	movs	r0, #0
 8001248:	f7ff ff96 	bl	8001178 <W25Q_Set_CS>
	uint8_t cmd = W25Q_CMD_SECTOR_ERASE;
 800124c:	2320      	movs	r3, #32
 800124e:	73fb      	strb	r3, [r7, #15]
	W25Q_SPI_Transmit(&cmd, 1);
 8001250:	f107 030f 	add.w	r3, r7, #15
 8001254:	2101      	movs	r1, #1
 8001256:	4618      	mov	r0, r3
 8001258:	f7ff ff7a 	bl	8001150 <W25Q_SPI_Transmit>
	uint32_t address = sector * W25Q_SECTOR_SIZE;
 800125c:	88fb      	ldrh	r3, [r7, #6]
 800125e:	031b      	lsls	r3, r3, #12
 8001260:	60bb      	str	r3, [r7, #8]
	address = ((address >> 16) & 0xff) | (address & 0xff00) | ((address << 16) & 0xff0000);
 8001262:	68bb      	ldr	r3, [r7, #8]
 8001264:	0c1b      	lsrs	r3, r3, #16
 8001266:	b2da      	uxtb	r2, r3
 8001268:	68bb      	ldr	r3, [r7, #8]
 800126a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800126e:	431a      	orrs	r2, r3
 8001270:	68bb      	ldr	r3, [r7, #8]
 8001272:	041b      	lsls	r3, r3, #16
 8001274:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8001278:	4313      	orrs	r3, r2
 800127a:	60bb      	str	r3, [r7, #8]
	W25Q_SPI_Transmit((uint8_t *)&address, 3);
 800127c:	f107 0308 	add.w	r3, r7, #8
 8001280:	2103      	movs	r1, #3
 8001282:	4618      	mov	r0, r3
 8001284:	f7ff ff64 	bl	8001150 <W25Q_SPI_Transmit>
	W25Q_Set_CS(1);
 8001288:	2001      	movs	r0, #1
 800128a:	f7ff ff75 	bl	8001178 <W25Q_Set_CS>
	while(W25Q_Busy());
 800128e:	bf00      	nop
 8001290:	f7ff ffa8 	bl	80011e4 <W25Q_Busy>
 8001294:	4603      	mov	r3, r0
 8001296:	2b00      	cmp	r3, #0
 8001298:	d1fa      	bne.n	8001290 <W25Q_Erase_Sector+0x72>
}
 800129a:	bf00      	nop
 800129c:	bf00      	nop
 800129e:	3710      	adds	r7, #16
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bd80      	pop	{r7, pc}

080012a4 <W25Q_Write_Sector>:
void W25Q_Write_Sector(uint8_t* data, uint16_t sector){
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b086      	sub	sp, #24
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
 80012ac:	460b      	mov	r3, r1
 80012ae:	807b      	strh	r3, [r7, #2]
	uint8_t cmd = W25Q_CMD_PAGE_PROGRAM;
 80012b0:	2302      	movs	r3, #2
 80012b2:	73fb      	strb	r3, [r7, #15]
	uint32_t address = sector * W25Q_SECTOR_SIZE;
 80012b4:	887b      	ldrh	r3, [r7, #2]
 80012b6:	031b      	lsls	r3, r3, #12
 80012b8:	617b      	str	r3, [r7, #20]
	uint32_t i = 0;
 80012ba:	2300      	movs	r3, #0
 80012bc:	613b      	str	r3, [r7, #16]
	while(i != W25Q_SECTOR_SIZE / W25Q_PAGE_SIZE){
 80012be:	e03d      	b.n	800133c <W25Q_Write_Sector+0x98>
		while(W25Q_Busy());
 80012c0:	bf00      	nop
 80012c2:	f7ff ff8f 	bl	80011e4 <W25Q_Busy>
 80012c6:	4603      	mov	r3, r0
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d1fa      	bne.n	80012c2 <W25Q_Write_Sector+0x1e>
		W25Q_Write_Enable(1);
 80012cc:	2001      	movs	r0, #1
 80012ce:	f7ff ff6d 	bl	80011ac <W25Q_Write_Enable>
		while(W25Q_Busy());
 80012d2:	bf00      	nop
 80012d4:	f7ff ff86 	bl	80011e4 <W25Q_Busy>
 80012d8:	4603      	mov	r3, r0
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d1fa      	bne.n	80012d4 <W25Q_Write_Sector+0x30>
		W25Q_Set_CS(0);
 80012de:	2000      	movs	r0, #0
 80012e0:	f7ff ff4a 	bl	8001178 <W25Q_Set_CS>
		W25Q_SPI_Transmit(&cmd, 1);
 80012e4:	f107 030f 	add.w	r3, r7, #15
 80012e8:	2101      	movs	r1, #1
 80012ea:	4618      	mov	r0, r3
 80012ec:	f7ff ff30 	bl	8001150 <W25Q_SPI_Transmit>
		uint32_t address_lsb = ((address >> 16) & 0xff) | (address & 0xff00) | ((address << 16) & 0xff0000);
 80012f0:	697b      	ldr	r3, [r7, #20]
 80012f2:	0c1b      	lsrs	r3, r3, #16
 80012f4:	b2da      	uxtb	r2, r3
 80012f6:	697b      	ldr	r3, [r7, #20]
 80012f8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80012fc:	431a      	orrs	r2, r3
 80012fe:	697b      	ldr	r3, [r7, #20]
 8001300:	041b      	lsls	r3, r3, #16
 8001302:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8001306:	4313      	orrs	r3, r2
 8001308:	60bb      	str	r3, [r7, #8]
		W25Q_SPI_Transmit((uint8_t *)&address_lsb, 3);
 800130a:	f107 0308 	add.w	r3, r7, #8
 800130e:	2103      	movs	r1, #3
 8001310:	4618      	mov	r0, r3
 8001312:	f7ff ff1d 	bl	8001150 <W25Q_SPI_Transmit>
		W25Q_SPI_Transmit(&data[W25Q_PAGE_SIZE * i], W25Q_PAGE_SIZE);
 8001316:	693b      	ldr	r3, [r7, #16]
 8001318:	021b      	lsls	r3, r3, #8
 800131a:	687a      	ldr	r2, [r7, #4]
 800131c:	4413      	add	r3, r2
 800131e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001322:	4618      	mov	r0, r3
 8001324:	f7ff ff14 	bl	8001150 <W25Q_SPI_Transmit>
		W25Q_Set_CS(1);
 8001328:	2001      	movs	r0, #1
 800132a:	f7ff ff25 	bl	8001178 <W25Q_Set_CS>
		address += W25Q_PAGE_SIZE;
 800132e:	697b      	ldr	r3, [r7, #20]
 8001330:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001334:	617b      	str	r3, [r7, #20]
		i++;
 8001336:	693b      	ldr	r3, [r7, #16]
 8001338:	3301      	adds	r3, #1
 800133a:	613b      	str	r3, [r7, #16]
	while(i != W25Q_SECTOR_SIZE / W25Q_PAGE_SIZE){
 800133c:	693b      	ldr	r3, [r7, #16]
 800133e:	2b10      	cmp	r3, #16
 8001340:	d1be      	bne.n	80012c0 <W25Q_Write_Sector+0x1c>
	}
	while(W25Q_Busy());
 8001342:	bf00      	nop
 8001344:	f7ff ff4e 	bl	80011e4 <W25Q_Busy>
 8001348:	4603      	mov	r3, r0
 800134a:	2b00      	cmp	r3, #0
 800134c:	d1fa      	bne.n	8001344 <W25Q_Write_Sector+0xa0>
}
 800134e:	bf00      	nop
 8001350:	bf00      	nop
 8001352:	3718      	adds	r7, #24
 8001354:	46bd      	mov	sp, r7
 8001356:	bd80      	pop	{r7, pc}

08001358 <W25Q_Read_Sector>:
void W25Q_Read_Sector(uint8_t *data, uint16_t sector){
 8001358:	b580      	push	{r7, lr}
 800135a:	b084      	sub	sp, #16
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
 8001360:	460b      	mov	r3, r1
 8001362:	807b      	strh	r3, [r7, #2]
	while(W25Q_Busy());
 8001364:	bf00      	nop
 8001366:	f7ff ff3d 	bl	80011e4 <W25Q_Busy>
 800136a:	4603      	mov	r3, r0
 800136c:	2b00      	cmp	r3, #0
 800136e:	d1fa      	bne.n	8001366 <W25Q_Read_Sector+0xe>
	W25Q_Set_CS(0);
 8001370:	2000      	movs	r0, #0
 8001372:	f7ff ff01 	bl	8001178 <W25Q_Set_CS>
	uint8_t cmd = W25Q_CMD_FAST_READ;
 8001376:	230b      	movs	r3, #11
 8001378:	73fb      	strb	r3, [r7, #15]
	W25Q_SPI_Transmit(&cmd, 1);
 800137a:	f107 030f 	add.w	r3, r7, #15
 800137e:	2101      	movs	r1, #1
 8001380:	4618      	mov	r0, r3
 8001382:	f7ff fee5 	bl	8001150 <W25Q_SPI_Transmit>

	uint32_t address = sector * W25Q_SECTOR_SIZE;
 8001386:	887b      	ldrh	r3, [r7, #2]
 8001388:	031b      	lsls	r3, r3, #12
 800138a:	60bb      	str	r3, [r7, #8]
	address = ((address >> 16) & 0xff) | (address & 0xff00) | ((address << 16) & 0xff0000);
 800138c:	68bb      	ldr	r3, [r7, #8]
 800138e:	0c1b      	lsrs	r3, r3, #16
 8001390:	b2da      	uxtb	r2, r3
 8001392:	68bb      	ldr	r3, [r7, #8]
 8001394:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8001398:	431a      	orrs	r2, r3
 800139a:	68bb      	ldr	r3, [r7, #8]
 800139c:	041b      	lsls	r3, r3, #16
 800139e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80013a2:	4313      	orrs	r3, r2
 80013a4:	60bb      	str	r3, [r7, #8]
	W25Q_SPI_Transmit((uint8_t *)&address, 4);
 80013a6:	f107 0308 	add.w	r3, r7, #8
 80013aa:	2104      	movs	r1, #4
 80013ac:	4618      	mov	r0, r3
 80013ae:	f7ff fecf 	bl	8001150 <W25Q_SPI_Transmit>

	W25Q_SPI_Receive(data, W25Q_SECTOR_SIZE);
 80013b2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80013b6:	6878      	ldr	r0, [r7, #4]
 80013b8:	f7ff feb6 	bl	8001128 <W25Q_SPI_Receive>
 	W25Q_Set_CS(1);
 80013bc:	2001      	movs	r0, #1
 80013be:	f7ff fedb 	bl	8001178 <W25Q_Set_CS>
}
 80013c2:	bf00      	nop
 80013c4:	3710      	adds	r7, #16
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}
	...

080013cc <W25Q_Read_DMA>:
	W25Q_Set_CS(1);
	while(W25Q_Busy());
}

//App
void W25Q_Read_DMA(uint8_t *data, uint16_t length, uint32_t address){
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b086      	sub	sp, #24
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	60f8      	str	r0, [r7, #12]
 80013d4:	460b      	mov	r3, r1
 80013d6:	607a      	str	r2, [r7, #4]
 80013d8:	817b      	strh	r3, [r7, #10]
	while(w25q_dma_busy);
 80013da:	bf00      	nop
 80013dc:	4b16      	ldr	r3, [pc, #88]	; (8001438 <W25Q_Read_DMA+0x6c>)
 80013de:	781b      	ldrb	r3, [r3, #0]
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d1fb      	bne.n	80013dc <W25Q_Read_DMA+0x10>
	w25q_dma_busy = 1;
 80013e4:	4b14      	ldr	r3, [pc, #80]	; (8001438 <W25Q_Read_DMA+0x6c>)
 80013e6:	2201      	movs	r2, #1
 80013e8:	701a      	strb	r2, [r3, #0]
	W25Q_Set_CS(0);
 80013ea:	2000      	movs	r0, #0
 80013ec:	f7ff fec4 	bl	8001178 <W25Q_Set_CS>
	uint8_t cmd = W25Q_CMD_FAST_READ;
 80013f0:	230b      	movs	r3, #11
 80013f2:	75fb      	strb	r3, [r7, #23]
	W25Q_SPI_Transmit(&cmd, 1);
 80013f4:	f107 0317 	add.w	r3, r7, #23
 80013f8:	2101      	movs	r1, #1
 80013fa:	4618      	mov	r0, r3
 80013fc:	f7ff fea8 	bl	8001150 <W25Q_SPI_Transmit>

	address = ((address >> 16) & 0xff) | (address & 0xff00) | ((address << 16) & 0xff0000);
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	0c1b      	lsrs	r3, r3, #16
 8001404:	b2da      	uxtb	r2, r3
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800140c:	431a      	orrs	r2, r3
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	041b      	lsls	r3, r3, #16
 8001412:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8001416:	4313      	orrs	r3, r2
 8001418:	607b      	str	r3, [r7, #4]
	W25Q_SPI_Transmit((uint8_t *)&address, 4);
 800141a:	1d3b      	adds	r3, r7, #4
 800141c:	2104      	movs	r1, #4
 800141e:	4618      	mov	r0, r3
 8001420:	f7ff fe96 	bl	8001150 <W25Q_SPI_Transmit>

	W25Q_SPI_Receive_DMA(data, length);
 8001424:	897b      	ldrh	r3, [r7, #10]
 8001426:	4619      	mov	r1, r3
 8001428:	68f8      	ldr	r0, [r7, #12]
 800142a:	f7ff fe6b 	bl	8001104 <W25Q_SPI_Receive_DMA>
}
 800142e:	bf00      	nop
 8001430:	3718      	adds	r7, #24
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}
 8001436:	bf00      	nop
 8001438:	2000117f 	.word	0x2000117f

0800143c <W25Q_Read>:
void W25Q_Read(uint8_t *data, uint32_t address, uint16_t length){
 800143c:	b580      	push	{r7, lr}
 800143e:	b086      	sub	sp, #24
 8001440:	af00      	add	r7, sp, #0
 8001442:	60f8      	str	r0, [r7, #12]
 8001444:	60b9      	str	r1, [r7, #8]
 8001446:	4613      	mov	r3, r2
 8001448:	80fb      	strh	r3, [r7, #6]
	while(W25Q_Busy());
 800144a:	bf00      	nop
 800144c:	f7ff feca 	bl	80011e4 <W25Q_Busy>
 8001450:	4603      	mov	r3, r0
 8001452:	2b00      	cmp	r3, #0
 8001454:	d1fa      	bne.n	800144c <W25Q_Read+0x10>
	W25Q_Set_CS(0);
 8001456:	2000      	movs	r0, #0
 8001458:	f7ff fe8e 	bl	8001178 <W25Q_Set_CS>
	uint8_t cmd = W25Q_CMD_FAST_READ;
 800145c:	230b      	movs	r3, #11
 800145e:	75fb      	strb	r3, [r7, #23]
	W25Q_SPI_Transmit(&cmd, 1);
 8001460:	f107 0317 	add.w	r3, r7, #23
 8001464:	2101      	movs	r1, #1
 8001466:	4618      	mov	r0, r3
 8001468:	f7ff fe72 	bl	8001150 <W25Q_SPI_Transmit>

	address = ((address >> 16) & 0xff) | (address & 0xff00) | ((address << 16) & 0xff0000);
 800146c:	68bb      	ldr	r3, [r7, #8]
 800146e:	0c1b      	lsrs	r3, r3, #16
 8001470:	b2da      	uxtb	r2, r3
 8001472:	68bb      	ldr	r3, [r7, #8]
 8001474:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8001478:	431a      	orrs	r2, r3
 800147a:	68bb      	ldr	r3, [r7, #8]
 800147c:	041b      	lsls	r3, r3, #16
 800147e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8001482:	4313      	orrs	r3, r2
 8001484:	60bb      	str	r3, [r7, #8]
	W25Q_SPI_Transmit((uint8_t *)&address, 4);
 8001486:	f107 0308 	add.w	r3, r7, #8
 800148a:	2104      	movs	r1, #4
 800148c:	4618      	mov	r0, r3
 800148e:	f7ff fe5f 	bl	8001150 <W25Q_SPI_Transmit>

	W25Q_SPI_Receive(data, length);
 8001492:	88fb      	ldrh	r3, [r7, #6]
 8001494:	4619      	mov	r1, r3
 8001496:	68f8      	ldr	r0, [r7, #12]
 8001498:	f7ff fe46 	bl	8001128 <W25Q_SPI_Receive>
 	W25Q_Set_CS(1);
 800149c:	2001      	movs	r0, #1
 800149e:	f7ff fe6b 	bl	8001178 <W25Q_Set_CS>
}
 80014a2:	bf00      	nop
 80014a4:	3718      	adds	r7, #24
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}

080014aa <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014aa:	b580      	push	{r7, lr}
 80014ac:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014ae:	f000 fc30 	bl	8001d12 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014b2:	f000 f811 	bl	80014d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014b6:	f000 f985 	bl	80017c4 <MX_GPIO_Init>
  MX_DMA_Init();
 80014ba:	f000 f963 	bl	8001784 <MX_DMA_Init>
  MX_TIM1_Init();
 80014be:	f000 f8c1 	bl	8001644 <MX_TIM1_Init>
  MX_CRC_Init();
 80014c2:	f000 f875 	bl	80015b0 <MX_CRC_Init>
  MX_SPI1_Init();
 80014c6:	f000 f887 	bl	80015d8 <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 80014ca:	f00a fca5 	bl	800be18 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  App_Init();
 80014ce:	f7ff fcab 	bl	8000e28 <App_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    App_Loop();
 80014d2:	f7ff fbb7 	bl	8000c44 <App_Loop>
 80014d6:	e7fc      	b.n	80014d2 <main+0x28>

080014d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b094      	sub	sp, #80	; 0x50
 80014dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014de:	f107 0320 	add.w	r3, r7, #32
 80014e2:	2230      	movs	r2, #48	; 0x30
 80014e4:	2100      	movs	r1, #0
 80014e6:	4618      	mov	r0, r3
 80014e8:	f00b f9d4 	bl	800c894 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014ec:	f107 030c 	add.w	r3, r7, #12
 80014f0:	2200      	movs	r2, #0
 80014f2:	601a      	str	r2, [r3, #0]
 80014f4:	605a      	str	r2, [r3, #4]
 80014f6:	609a      	str	r2, [r3, #8]
 80014f8:	60da      	str	r2, [r3, #12]
 80014fa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80014fc:	2300      	movs	r3, #0
 80014fe:	60bb      	str	r3, [r7, #8]
 8001500:	4b29      	ldr	r3, [pc, #164]	; (80015a8 <SystemClock_Config+0xd0>)
 8001502:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001504:	4a28      	ldr	r2, [pc, #160]	; (80015a8 <SystemClock_Config+0xd0>)
 8001506:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800150a:	6413      	str	r3, [r2, #64]	; 0x40
 800150c:	4b26      	ldr	r3, [pc, #152]	; (80015a8 <SystemClock_Config+0xd0>)
 800150e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001510:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001514:	60bb      	str	r3, [r7, #8]
 8001516:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001518:	2300      	movs	r3, #0
 800151a:	607b      	str	r3, [r7, #4]
 800151c:	4b23      	ldr	r3, [pc, #140]	; (80015ac <SystemClock_Config+0xd4>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001524:	4a21      	ldr	r2, [pc, #132]	; (80015ac <SystemClock_Config+0xd4>)
 8001526:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800152a:	6013      	str	r3, [r2, #0]
 800152c:	4b1f      	ldr	r3, [pc, #124]	; (80015ac <SystemClock_Config+0xd4>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001534:	607b      	str	r3, [r7, #4]
 8001536:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001538:	2301      	movs	r3, #1
 800153a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800153c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001540:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001542:	2302      	movs	r3, #2
 8001544:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001546:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800154a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 800154c:	2319      	movs	r3, #25
 800154e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001550:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001554:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001556:	2304      	movs	r3, #4
 8001558:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800155a:	2307      	movs	r3, #7
 800155c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800155e:	f107 0320 	add.w	r3, r7, #32
 8001562:	4618      	mov	r0, r3
 8001564:	f002 fe26 	bl	80041b4 <HAL_RCC_OscConfig>
 8001568:	4603      	mov	r3, r0
 800156a:	2b00      	cmp	r3, #0
 800156c:	d001      	beq.n	8001572 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800156e:	f000 f9cb 	bl	8001908 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001572:	230f      	movs	r3, #15
 8001574:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001576:	2302      	movs	r3, #2
 8001578:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800157a:	2300      	movs	r3, #0
 800157c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800157e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001582:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001584:	2300      	movs	r3, #0
 8001586:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001588:	f107 030c 	add.w	r3, r7, #12
 800158c:	2102      	movs	r1, #2
 800158e:	4618      	mov	r0, r3
 8001590:	f003 f888 	bl	80046a4 <HAL_RCC_ClockConfig>
 8001594:	4603      	mov	r3, r0
 8001596:	2b00      	cmp	r3, #0
 8001598:	d001      	beq.n	800159e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800159a:	f000 f9b5 	bl	8001908 <Error_Handler>
  }
}
 800159e:	bf00      	nop
 80015a0:	3750      	adds	r7, #80	; 0x50
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}
 80015a6:	bf00      	nop
 80015a8:	40023800 	.word	0x40023800
 80015ac:	40007000 	.word	0x40007000

080015b0 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80015b4:	4b06      	ldr	r3, [pc, #24]	; (80015d0 <MX_CRC_Init+0x20>)
 80015b6:	4a07      	ldr	r2, [pc, #28]	; (80015d4 <MX_CRC_Init+0x24>)
 80015b8:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80015ba:	4805      	ldr	r0, [pc, #20]	; (80015d0 <MX_CRC_Init+0x20>)
 80015bc:	f000 fd3b 	bl	8002036 <HAL_CRC_Init>
 80015c0:	4603      	mov	r3, r0
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d001      	beq.n	80015ca <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 80015c6:	f000 f99f 	bl	8001908 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80015ca:	bf00      	nop
 80015cc:	bd80      	pop	{r7, pc}
 80015ce:	bf00      	nop
 80015d0:	20001180 	.word	0x20001180
 80015d4:	40023000 	.word	0x40023000

080015d8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80015dc:	4b17      	ldr	r3, [pc, #92]	; (800163c <MX_SPI1_Init+0x64>)
 80015de:	4a18      	ldr	r2, [pc, #96]	; (8001640 <MX_SPI1_Init+0x68>)
 80015e0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80015e2:	4b16      	ldr	r3, [pc, #88]	; (800163c <MX_SPI1_Init+0x64>)
 80015e4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80015e8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80015ea:	4b14      	ldr	r3, [pc, #80]	; (800163c <MX_SPI1_Init+0x64>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80015f0:	4b12      	ldr	r3, [pc, #72]	; (800163c <MX_SPI1_Init+0x64>)
 80015f2:	2200      	movs	r2, #0
 80015f4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80015f6:	4b11      	ldr	r3, [pc, #68]	; (800163c <MX_SPI1_Init+0x64>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80015fc:	4b0f      	ldr	r3, [pc, #60]	; (800163c <MX_SPI1_Init+0x64>)
 80015fe:	2200      	movs	r2, #0
 8001600:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001602:	4b0e      	ldr	r3, [pc, #56]	; (800163c <MX_SPI1_Init+0x64>)
 8001604:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001608:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800160a:	4b0c      	ldr	r3, [pc, #48]	; (800163c <MX_SPI1_Init+0x64>)
 800160c:	2200      	movs	r2, #0
 800160e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001610:	4b0a      	ldr	r3, [pc, #40]	; (800163c <MX_SPI1_Init+0x64>)
 8001612:	2200      	movs	r2, #0
 8001614:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001616:	4b09      	ldr	r3, [pc, #36]	; (800163c <MX_SPI1_Init+0x64>)
 8001618:	2200      	movs	r2, #0
 800161a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800161c:	4b07      	ldr	r3, [pc, #28]	; (800163c <MX_SPI1_Init+0x64>)
 800161e:	2200      	movs	r2, #0
 8001620:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001622:	4b06      	ldr	r3, [pc, #24]	; (800163c <MX_SPI1_Init+0x64>)
 8001624:	220a      	movs	r2, #10
 8001626:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001628:	4804      	ldr	r0, [pc, #16]	; (800163c <MX_SPI1_Init+0x64>)
 800162a:	f003 f9f3 	bl	8004a14 <HAL_SPI_Init>
 800162e:	4603      	mov	r3, r0
 8001630:	2b00      	cmp	r3, #0
 8001632:	d001      	beq.n	8001638 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001634:	f000 f968 	bl	8001908 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001638:	bf00      	nop
 800163a:	bd80      	pop	{r7, pc}
 800163c:	20001188 	.word	0x20001188
 8001640:	40013000 	.word	0x40013000

08001644 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b096      	sub	sp, #88	; 0x58
 8001648:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800164a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800164e:	2200      	movs	r2, #0
 8001650:	601a      	str	r2, [r3, #0]
 8001652:	605a      	str	r2, [r3, #4]
 8001654:	609a      	str	r2, [r3, #8]
 8001656:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001658:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800165c:	2200      	movs	r2, #0
 800165e:	601a      	str	r2, [r3, #0]
 8001660:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001662:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001666:	2200      	movs	r2, #0
 8001668:	601a      	str	r2, [r3, #0]
 800166a:	605a      	str	r2, [r3, #4]
 800166c:	609a      	str	r2, [r3, #8]
 800166e:	60da      	str	r2, [r3, #12]
 8001670:	611a      	str	r2, [r3, #16]
 8001672:	615a      	str	r2, [r3, #20]
 8001674:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001676:	1d3b      	adds	r3, r7, #4
 8001678:	2220      	movs	r2, #32
 800167a:	2100      	movs	r1, #0
 800167c:	4618      	mov	r0, r3
 800167e:	f00b f909 	bl	800c894 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001682:	4b3e      	ldr	r3, [pc, #248]	; (800177c <MX_TIM1_Init+0x138>)
 8001684:	4a3e      	ldr	r2, [pc, #248]	; (8001780 <MX_TIM1_Init+0x13c>)
 8001686:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 3;
 8001688:	4b3c      	ldr	r3, [pc, #240]	; (800177c <MX_TIM1_Init+0x138>)
 800168a:	2203      	movs	r2, #3
 800168c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800168e:	4b3b      	ldr	r3, [pc, #236]	; (800177c <MX_TIM1_Init+0x138>)
 8001690:	2200      	movs	r2, #0
 8001692:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 104;
 8001694:	4b39      	ldr	r3, [pc, #228]	; (800177c <MX_TIM1_Init+0x138>)
 8001696:	2268      	movs	r2, #104	; 0x68
 8001698:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800169a:	4b38      	ldr	r3, [pc, #224]	; (800177c <MX_TIM1_Init+0x138>)
 800169c:	2200      	movs	r2, #0
 800169e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80016a0:	4b36      	ldr	r3, [pc, #216]	; (800177c <MX_TIM1_Init+0x138>)
 80016a2:	2200      	movs	r2, #0
 80016a4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80016a6:	4b35      	ldr	r3, [pc, #212]	; (800177c <MX_TIM1_Init+0x138>)
 80016a8:	2280      	movs	r2, #128	; 0x80
 80016aa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80016ac:	4833      	ldr	r0, [pc, #204]	; (800177c <MX_TIM1_Init+0x138>)
 80016ae:	f004 fb2d 	bl	8005d0c <HAL_TIM_Base_Init>
 80016b2:	4603      	mov	r3, r0
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d001      	beq.n	80016bc <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 80016b8:	f000 f926 	bl	8001908 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016c0:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80016c2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80016c6:	4619      	mov	r1, r3
 80016c8:	482c      	ldr	r0, [pc, #176]	; (800177c <MX_TIM1_Init+0x138>)
 80016ca:	f004 ff41 	bl	8006550 <HAL_TIM_ConfigClockSource>
 80016ce:	4603      	mov	r3, r0
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d001      	beq.n	80016d8 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 80016d4:	f000 f918 	bl	8001908 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80016d8:	4828      	ldr	r0, [pc, #160]	; (800177c <MX_TIM1_Init+0x138>)
 80016da:	f004 fb66 	bl	8005daa <HAL_TIM_PWM_Init>
 80016de:	4603      	mov	r3, r0
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d001      	beq.n	80016e8 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 80016e4:	f000 f910 	bl	8001908 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016e8:	2300      	movs	r3, #0
 80016ea:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016ec:	2300      	movs	r3, #0
 80016ee:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80016f0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80016f4:	4619      	mov	r1, r3
 80016f6:	4821      	ldr	r0, [pc, #132]	; (800177c <MX_TIM1_Init+0x138>)
 80016f8:	f005 fae6 	bl	8006cc8 <HAL_TIMEx_MasterConfigSynchronization>
 80016fc:	4603      	mov	r3, r0
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d001      	beq.n	8001706 <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 8001702:	f000 f901 	bl	8001908 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001706:	2360      	movs	r3, #96	; 0x60
 8001708:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800170a:	2300      	movs	r3, #0
 800170c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800170e:	2300      	movs	r3, #0
 8001710:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001712:	2300      	movs	r3, #0
 8001714:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001716:	2300      	movs	r3, #0
 8001718:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800171a:	2300      	movs	r3, #0
 800171c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800171e:	2300      	movs	r3, #0
 8001720:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001722:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001726:	2200      	movs	r2, #0
 8001728:	4619      	mov	r1, r3
 800172a:	4814      	ldr	r0, [pc, #80]	; (800177c <MX_TIM1_Init+0x138>)
 800172c:	f004 fe4e 	bl	80063cc <HAL_TIM_PWM_ConfigChannel>
 8001730:	4603      	mov	r3, r0
 8001732:	2b00      	cmp	r3, #0
 8001734:	d001      	beq.n	800173a <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8001736:	f000 f8e7 	bl	8001908 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800173a:	2300      	movs	r3, #0
 800173c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800173e:	2300      	movs	r3, #0
 8001740:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001742:	2300      	movs	r3, #0
 8001744:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001746:	2300      	movs	r3, #0
 8001748:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800174a:	2300      	movs	r3, #0
 800174c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800174e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001752:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001754:	2300      	movs	r3, #0
 8001756:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001758:	1d3b      	adds	r3, r7, #4
 800175a:	4619      	mov	r1, r3
 800175c:	4807      	ldr	r0, [pc, #28]	; (800177c <MX_TIM1_Init+0x138>)
 800175e:	f005 fb21 	bl	8006da4 <HAL_TIMEx_ConfigBreakDeadTime>
 8001762:	4603      	mov	r3, r0
 8001764:	2b00      	cmp	r3, #0
 8001766:	d001      	beq.n	800176c <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8001768:	f000 f8ce 	bl	8001908 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800176c:	4803      	ldr	r0, [pc, #12]	; (800177c <MX_TIM1_Init+0x138>)
 800176e:	f000 f9dd 	bl	8001b2c <HAL_TIM_MspPostInit>

}
 8001772:	bf00      	nop
 8001774:	3758      	adds	r7, #88	; 0x58
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}
 800177a:	bf00      	nop
 800177c:	20001240 	.word	0x20001240
 8001780:	40010000 	.word	0x40010000

08001784 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b082      	sub	sp, #8
 8001788:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800178a:	2300      	movs	r3, #0
 800178c:	607b      	str	r3, [r7, #4]
 800178e:	4b0c      	ldr	r3, [pc, #48]	; (80017c0 <MX_DMA_Init+0x3c>)
 8001790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001792:	4a0b      	ldr	r2, [pc, #44]	; (80017c0 <MX_DMA_Init+0x3c>)
 8001794:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001798:	6313      	str	r3, [r2, #48]	; 0x30
 800179a:	4b09      	ldr	r3, [pc, #36]	; (80017c0 <MX_DMA_Init+0x3c>)
 800179c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800179e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017a2:	607b      	str	r3, [r7, #4]
 80017a4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80017a6:	2200      	movs	r2, #0
 80017a8:	2100      	movs	r1, #0
 80017aa:	2038      	movs	r0, #56	; 0x38
 80017ac:	f000 fc0d 	bl	8001fca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80017b0:	2038      	movs	r0, #56	; 0x38
 80017b2:	f000 fc26 	bl	8002002 <HAL_NVIC_EnableIRQ>

}
 80017b6:	bf00      	nop
 80017b8:	3708      	adds	r7, #8
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	bf00      	nop
 80017c0:	40023800 	.word	0x40023800

080017c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b08a      	sub	sp, #40	; 0x28
 80017c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017ca:	f107 0314 	add.w	r3, r7, #20
 80017ce:	2200      	movs	r2, #0
 80017d0:	601a      	str	r2, [r3, #0]
 80017d2:	605a      	str	r2, [r3, #4]
 80017d4:	609a      	str	r2, [r3, #8]
 80017d6:	60da      	str	r2, [r3, #12]
 80017d8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017da:	2300      	movs	r3, #0
 80017dc:	613b      	str	r3, [r7, #16]
 80017de:	4b46      	ldr	r3, [pc, #280]	; (80018f8 <MX_GPIO_Init+0x134>)
 80017e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017e2:	4a45      	ldr	r2, [pc, #276]	; (80018f8 <MX_GPIO_Init+0x134>)
 80017e4:	f043 0304 	orr.w	r3, r3, #4
 80017e8:	6313      	str	r3, [r2, #48]	; 0x30
 80017ea:	4b43      	ldr	r3, [pc, #268]	; (80018f8 <MX_GPIO_Init+0x134>)
 80017ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ee:	f003 0304 	and.w	r3, r3, #4
 80017f2:	613b      	str	r3, [r7, #16]
 80017f4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80017f6:	2300      	movs	r3, #0
 80017f8:	60fb      	str	r3, [r7, #12]
 80017fa:	4b3f      	ldr	r3, [pc, #252]	; (80018f8 <MX_GPIO_Init+0x134>)
 80017fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017fe:	4a3e      	ldr	r2, [pc, #248]	; (80018f8 <MX_GPIO_Init+0x134>)
 8001800:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001804:	6313      	str	r3, [r2, #48]	; 0x30
 8001806:	4b3c      	ldr	r3, [pc, #240]	; (80018f8 <MX_GPIO_Init+0x134>)
 8001808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800180a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800180e:	60fb      	str	r3, [r7, #12]
 8001810:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001812:	2300      	movs	r3, #0
 8001814:	60bb      	str	r3, [r7, #8]
 8001816:	4b38      	ldr	r3, [pc, #224]	; (80018f8 <MX_GPIO_Init+0x134>)
 8001818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800181a:	4a37      	ldr	r2, [pc, #220]	; (80018f8 <MX_GPIO_Init+0x134>)
 800181c:	f043 0301 	orr.w	r3, r3, #1
 8001820:	6313      	str	r3, [r2, #48]	; 0x30
 8001822:	4b35      	ldr	r3, [pc, #212]	; (80018f8 <MX_GPIO_Init+0x134>)
 8001824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001826:	f003 0301 	and.w	r3, r3, #1
 800182a:	60bb      	str	r3, [r7, #8]
 800182c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800182e:	2300      	movs	r3, #0
 8001830:	607b      	str	r3, [r7, #4]
 8001832:	4b31      	ldr	r3, [pc, #196]	; (80018f8 <MX_GPIO_Init+0x134>)
 8001834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001836:	4a30      	ldr	r2, [pc, #192]	; (80018f8 <MX_GPIO_Init+0x134>)
 8001838:	f043 0302 	orr.w	r3, r3, #2
 800183c:	6313      	str	r3, [r2, #48]	; 0x30
 800183e:	4b2e      	ldr	r3, [pc, #184]	; (80018f8 <MX_GPIO_Init+0x134>)
 8001840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001842:	f003 0302 	and.w	r3, r3, #2
 8001846:	607b      	str	r3, [r7, #4]
 8001848:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 800184a:	2201      	movs	r2, #1
 800184c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001850:	482a      	ldr	r0, [pc, #168]	; (80018fc <MX_GPIO_Init+0x138>)
 8001852:	f001 f999 	bl	8002b88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FLASH_CS_GPIO_Port, FLASH_CS_Pin, GPIO_PIN_SET);
 8001856:	2201      	movs	r2, #1
 8001858:	2110      	movs	r1, #16
 800185a:	4829      	ldr	r0, [pc, #164]	; (8001900 <MX_GPIO_Init+0x13c>)
 800185c:	f001 f994 	bl	8002b88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8001860:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001864:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001866:	2301      	movs	r3, #1
 8001868:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800186a:	2301      	movs	r3, #1
 800186c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800186e:	2300      	movs	r3, #0
 8001870:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001872:	f107 0314 	add.w	r3, r7, #20
 8001876:	4619      	mov	r1, r3
 8001878:	4820      	ldr	r0, [pc, #128]	; (80018fc <MX_GPIO_Init+0x138>)
 800187a:	f000 ffe9 	bl	8002850 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 800187e:	2301      	movs	r3, #1
 8001880:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001882:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8001886:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001888:	2301      	movs	r3, #1
 800188a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 800188c:	f107 0314 	add.w	r3, r7, #20
 8001890:	4619      	mov	r1, r3
 8001892:	481b      	ldr	r0, [pc, #108]	; (8001900 <MX_GPIO_Init+0x13c>)
 8001894:	f000 ffdc 	bl	8002850 <HAL_GPIO_Init>

  /*Configure GPIO pin : FLASH_CS_Pin */
  GPIO_InitStruct.Pin = FLASH_CS_Pin;
 8001898:	2310      	movs	r3, #16
 800189a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800189c:	2301      	movs	r3, #1
 800189e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80018a0:	2301      	movs	r3, #1
 80018a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018a4:	2303      	movs	r3, #3
 80018a6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(FLASH_CS_GPIO_Port, &GPIO_InitStruct);
 80018a8:	f107 0314 	add.w	r3, r7, #20
 80018ac:	4619      	mov	r1, r3
 80018ae:	4814      	ldr	r0, [pc, #80]	; (8001900 <MX_GPIO_Init+0x13c>)
 80018b0:	f000 ffce 	bl	8002850 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_DET_Pin */
  GPIO_InitStruct.Pin = USB_DET_Pin;
 80018b4:	2340      	movs	r3, #64	; 0x40
 80018b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80018b8:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 80018bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80018be:	2302      	movs	r3, #2
 80018c0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USB_DET_GPIO_Port, &GPIO_InitStruct);
 80018c2:	f107 0314 	add.w	r3, r7, #20
 80018c6:	4619      	mov	r1, r3
 80018c8:	480e      	ldr	r0, [pc, #56]	; (8001904 <MX_GPIO_Init+0x140>)
 80018ca:	f000 ffc1 	bl	8002850 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 1, 0);
 80018ce:	2200      	movs	r2, #0
 80018d0:	2101      	movs	r1, #1
 80018d2:	2006      	movs	r0, #6
 80018d4:	f000 fb79 	bl	8001fca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80018d8:	2006      	movs	r0, #6
 80018da:	f000 fb92 	bl	8002002 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 1, 0);
 80018de:	2200      	movs	r2, #0
 80018e0:	2101      	movs	r1, #1
 80018e2:	2017      	movs	r0, #23
 80018e4:	f000 fb71 	bl	8001fca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80018e8:	2017      	movs	r0, #23
 80018ea:	f000 fb8a 	bl	8002002 <HAL_NVIC_EnableIRQ>

}
 80018ee:	bf00      	nop
 80018f0:	3728      	adds	r7, #40	; 0x28
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bd80      	pop	{r7, pc}
 80018f6:	bf00      	nop
 80018f8:	40023800 	.word	0x40023800
 80018fc:	40020800 	.word	0x40020800
 8001900:	40020000 	.word	0x40020000
 8001904:	40020400 	.word	0x40020400

08001908 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001908:	b480      	push	{r7}
 800190a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800190c:	b672      	cpsid	i
}
 800190e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001910:	e7fe      	b.n	8001910 <Error_Handler+0x8>
	...

08001914 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001914:	b480      	push	{r7}
 8001916:	b083      	sub	sp, #12
 8001918:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800191a:	2300      	movs	r3, #0
 800191c:	607b      	str	r3, [r7, #4]
 800191e:	4b10      	ldr	r3, [pc, #64]	; (8001960 <HAL_MspInit+0x4c>)
 8001920:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001922:	4a0f      	ldr	r2, [pc, #60]	; (8001960 <HAL_MspInit+0x4c>)
 8001924:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001928:	6453      	str	r3, [r2, #68]	; 0x44
 800192a:	4b0d      	ldr	r3, [pc, #52]	; (8001960 <HAL_MspInit+0x4c>)
 800192c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800192e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001932:	607b      	str	r3, [r7, #4]
 8001934:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001936:	2300      	movs	r3, #0
 8001938:	603b      	str	r3, [r7, #0]
 800193a:	4b09      	ldr	r3, [pc, #36]	; (8001960 <HAL_MspInit+0x4c>)
 800193c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800193e:	4a08      	ldr	r2, [pc, #32]	; (8001960 <HAL_MspInit+0x4c>)
 8001940:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001944:	6413      	str	r3, [r2, #64]	; 0x40
 8001946:	4b06      	ldr	r3, [pc, #24]	; (8001960 <HAL_MspInit+0x4c>)
 8001948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800194a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800194e:	603b      	str	r3, [r7, #0]
 8001950:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001952:	bf00      	nop
 8001954:	370c      	adds	r7, #12
 8001956:	46bd      	mov	sp, r7
 8001958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195c:	4770      	bx	lr
 800195e:	bf00      	nop
 8001960:	40023800 	.word	0x40023800

08001964 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001964:	b480      	push	{r7}
 8001966:	b085      	sub	sp, #20
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	4a0b      	ldr	r2, [pc, #44]	; (80019a0 <HAL_CRC_MspInit+0x3c>)
 8001972:	4293      	cmp	r3, r2
 8001974:	d10d      	bne.n	8001992 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001976:	2300      	movs	r3, #0
 8001978:	60fb      	str	r3, [r7, #12]
 800197a:	4b0a      	ldr	r3, [pc, #40]	; (80019a4 <HAL_CRC_MspInit+0x40>)
 800197c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800197e:	4a09      	ldr	r2, [pc, #36]	; (80019a4 <HAL_CRC_MspInit+0x40>)
 8001980:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001984:	6313      	str	r3, [r2, #48]	; 0x30
 8001986:	4b07      	ldr	r3, [pc, #28]	; (80019a4 <HAL_CRC_MspInit+0x40>)
 8001988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800198a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800198e:	60fb      	str	r3, [r7, #12]
 8001990:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8001992:	bf00      	nop
 8001994:	3714      	adds	r7, #20
 8001996:	46bd      	mov	sp, r7
 8001998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199c:	4770      	bx	lr
 800199e:	bf00      	nop
 80019a0:	40023000 	.word	0x40023000
 80019a4:	40023800 	.word	0x40023800

080019a8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b08a      	sub	sp, #40	; 0x28
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019b0:	f107 0314 	add.w	r3, r7, #20
 80019b4:	2200      	movs	r2, #0
 80019b6:	601a      	str	r2, [r3, #0]
 80019b8:	605a      	str	r2, [r3, #4]
 80019ba:	609a      	str	r2, [r3, #8]
 80019bc:	60da      	str	r2, [r3, #12]
 80019be:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	4a34      	ldr	r2, [pc, #208]	; (8001a98 <HAL_SPI_MspInit+0xf0>)
 80019c6:	4293      	cmp	r3, r2
 80019c8:	d161      	bne.n	8001a8e <HAL_SPI_MspInit+0xe6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80019ca:	2300      	movs	r3, #0
 80019cc:	613b      	str	r3, [r7, #16]
 80019ce:	4b33      	ldr	r3, [pc, #204]	; (8001a9c <HAL_SPI_MspInit+0xf4>)
 80019d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019d2:	4a32      	ldr	r2, [pc, #200]	; (8001a9c <HAL_SPI_MspInit+0xf4>)
 80019d4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80019d8:	6453      	str	r3, [r2, #68]	; 0x44
 80019da:	4b30      	ldr	r3, [pc, #192]	; (8001a9c <HAL_SPI_MspInit+0xf4>)
 80019dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019de:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80019e2:	613b      	str	r3, [r7, #16]
 80019e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019e6:	2300      	movs	r3, #0
 80019e8:	60fb      	str	r3, [r7, #12]
 80019ea:	4b2c      	ldr	r3, [pc, #176]	; (8001a9c <HAL_SPI_MspInit+0xf4>)
 80019ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ee:	4a2b      	ldr	r2, [pc, #172]	; (8001a9c <HAL_SPI_MspInit+0xf4>)
 80019f0:	f043 0301 	orr.w	r3, r3, #1
 80019f4:	6313      	str	r3, [r2, #48]	; 0x30
 80019f6:	4b29      	ldr	r3, [pc, #164]	; (8001a9c <HAL_SPI_MspInit+0xf4>)
 80019f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019fa:	f003 0301 	and.w	r3, r3, #1
 80019fe:	60fb      	str	r3, [r7, #12]
 8001a00:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = FLASH_SCK_Pin|FLASH_MISO_Pin|FLASH_MOSI_Pin;
 8001a02:	23e0      	movs	r3, #224	; 0xe0
 8001a04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a06:	2302      	movs	r3, #2
 8001a08:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a0e:	2303      	movs	r3, #3
 8001a10:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001a12:	2305      	movs	r3, #5
 8001a14:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a16:	f107 0314 	add.w	r3, r7, #20
 8001a1a:	4619      	mov	r1, r3
 8001a1c:	4820      	ldr	r0, [pc, #128]	; (8001aa0 <HAL_SPI_MspInit+0xf8>)
 8001a1e:	f000 ff17 	bl	8002850 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream0;
 8001a22:	4b20      	ldr	r3, [pc, #128]	; (8001aa4 <HAL_SPI_MspInit+0xfc>)
 8001a24:	4a20      	ldr	r2, [pc, #128]	; (8001aa8 <HAL_SPI_MspInit+0x100>)
 8001a26:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 8001a28:	4b1e      	ldr	r3, [pc, #120]	; (8001aa4 <HAL_SPI_MspInit+0xfc>)
 8001a2a:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8001a2e:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001a30:	4b1c      	ldr	r3, [pc, #112]	; (8001aa4 <HAL_SPI_MspInit+0xfc>)
 8001a32:	2200      	movs	r2, #0
 8001a34:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a36:	4b1b      	ldr	r3, [pc, #108]	; (8001aa4 <HAL_SPI_MspInit+0xfc>)
 8001a38:	2200      	movs	r2, #0
 8001a3a:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001a3c:	4b19      	ldr	r3, [pc, #100]	; (8001aa4 <HAL_SPI_MspInit+0xfc>)
 8001a3e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001a42:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001a44:	4b17      	ldr	r3, [pc, #92]	; (8001aa4 <HAL_SPI_MspInit+0xfc>)
 8001a46:	2200      	movs	r2, #0
 8001a48:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001a4a:	4b16      	ldr	r3, [pc, #88]	; (8001aa4 <HAL_SPI_MspInit+0xfc>)
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8001a50:	4b14      	ldr	r3, [pc, #80]	; (8001aa4 <HAL_SPI_MspInit+0xfc>)
 8001a52:	2200      	movs	r2, #0
 8001a54:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001a56:	4b13      	ldr	r3, [pc, #76]	; (8001aa4 <HAL_SPI_MspInit+0xfc>)
 8001a58:	2200      	movs	r2, #0
 8001a5a:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001a5c:	4b11      	ldr	r3, [pc, #68]	; (8001aa4 <HAL_SPI_MspInit+0xfc>)
 8001a5e:	2200      	movs	r2, #0
 8001a60:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8001a62:	4810      	ldr	r0, [pc, #64]	; (8001aa4 <HAL_SPI_MspInit+0xfc>)
 8001a64:	f000 fb62 	bl	800212c <HAL_DMA_Init>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d001      	beq.n	8001a72 <HAL_SPI_MspInit+0xca>
    {
      Error_Handler();
 8001a6e:	f7ff ff4b 	bl	8001908 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	4a0b      	ldr	r2, [pc, #44]	; (8001aa4 <HAL_SPI_MspInit+0xfc>)
 8001a76:	64da      	str	r2, [r3, #76]	; 0x4c
 8001a78:	4a0a      	ldr	r2, [pc, #40]	; (8001aa4 <HAL_SPI_MspInit+0xfc>)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8001a7e:	2200      	movs	r2, #0
 8001a80:	2100      	movs	r1, #0
 8001a82:	2023      	movs	r0, #35	; 0x23
 8001a84:	f000 faa1 	bl	8001fca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8001a88:	2023      	movs	r0, #35	; 0x23
 8001a8a:	f000 faba 	bl	8002002 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001a8e:	bf00      	nop
 8001a90:	3728      	adds	r7, #40	; 0x28
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}
 8001a96:	bf00      	nop
 8001a98:	40013000 	.word	0x40013000
 8001a9c:	40023800 	.word	0x40023800
 8001aa0:	40020000 	.word	0x40020000
 8001aa4:	200011e0 	.word	0x200011e0
 8001aa8:	40026410 	.word	0x40026410

08001aac <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b084      	sub	sp, #16
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	4a1a      	ldr	r2, [pc, #104]	; (8001b24 <HAL_TIM_Base_MspInit+0x78>)
 8001aba:	4293      	cmp	r3, r2
 8001abc:	d12d      	bne.n	8001b1a <HAL_TIM_Base_MspInit+0x6e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001abe:	2300      	movs	r3, #0
 8001ac0:	60fb      	str	r3, [r7, #12]
 8001ac2:	4b19      	ldr	r3, [pc, #100]	; (8001b28 <HAL_TIM_Base_MspInit+0x7c>)
 8001ac4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ac6:	4a18      	ldr	r2, [pc, #96]	; (8001b28 <HAL_TIM_Base_MspInit+0x7c>)
 8001ac8:	f043 0301 	orr.w	r3, r3, #1
 8001acc:	6453      	str	r3, [r2, #68]	; 0x44
 8001ace:	4b16      	ldr	r3, [pc, #88]	; (8001b28 <HAL_TIM_Base_MspInit+0x7c>)
 8001ad0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ad2:	f003 0301 	and.w	r3, r3, #1
 8001ad6:	60fb      	str	r3, [r7, #12]
 8001ad8:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8001ada:	2200      	movs	r2, #0
 8001adc:	2100      	movs	r1, #0
 8001ade:	2018      	movs	r0, #24
 8001ae0:	f000 fa73 	bl	8001fca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8001ae4:	2018      	movs	r0, #24
 8001ae6:	f000 fa8c 	bl	8002002 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8001aea:	2200      	movs	r2, #0
 8001aec:	2100      	movs	r1, #0
 8001aee:	2019      	movs	r0, #25
 8001af0:	f000 fa6b 	bl	8001fca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001af4:	2019      	movs	r0, #25
 8001af6:	f000 fa84 	bl	8002002 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8001afa:	2200      	movs	r2, #0
 8001afc:	2100      	movs	r1, #0
 8001afe:	201a      	movs	r0, #26
 8001b00:	f000 fa63 	bl	8001fca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8001b04:	201a      	movs	r0, #26
 8001b06:	f000 fa7c 	bl	8002002 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	2100      	movs	r1, #0
 8001b0e:	201b      	movs	r0, #27
 8001b10:	f000 fa5b 	bl	8001fca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001b14:	201b      	movs	r0, #27
 8001b16:	f000 fa74 	bl	8002002 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001b1a:	bf00      	nop
 8001b1c:	3710      	adds	r7, #16
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}
 8001b22:	bf00      	nop
 8001b24:	40010000 	.word	0x40010000
 8001b28:	40023800 	.word	0x40023800

08001b2c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b088      	sub	sp, #32
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b34:	f107 030c 	add.w	r3, r7, #12
 8001b38:	2200      	movs	r2, #0
 8001b3a:	601a      	str	r2, [r3, #0]
 8001b3c:	605a      	str	r2, [r3, #4]
 8001b3e:	609a      	str	r2, [r3, #8]
 8001b40:	60da      	str	r2, [r3, #12]
 8001b42:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	4a12      	ldr	r2, [pc, #72]	; (8001b94 <HAL_TIM_MspPostInit+0x68>)
 8001b4a:	4293      	cmp	r3, r2
 8001b4c:	d11e      	bne.n	8001b8c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b4e:	2300      	movs	r3, #0
 8001b50:	60bb      	str	r3, [r7, #8]
 8001b52:	4b11      	ldr	r3, [pc, #68]	; (8001b98 <HAL_TIM_MspPostInit+0x6c>)
 8001b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b56:	4a10      	ldr	r2, [pc, #64]	; (8001b98 <HAL_TIM_MspPostInit+0x6c>)
 8001b58:	f043 0301 	orr.w	r3, r3, #1
 8001b5c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b5e:	4b0e      	ldr	r3, [pc, #56]	; (8001b98 <HAL_TIM_MspPostInit+0x6c>)
 8001b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b62:	f003 0301 	and.w	r3, r3, #1
 8001b66:	60bb      	str	r3, [r7, #8]
 8001b68:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = LED_STRIPE_Pin;
 8001b6a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b6e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b70:	2302      	movs	r3, #2
 8001b72:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001b74:	2302      	movs	r3, #2
 8001b76:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b78:	2303      	movs	r3, #3
 8001b7a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001b7c:	2301      	movs	r3, #1
 8001b7e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(LED_STRIPE_GPIO_Port, &GPIO_InitStruct);
 8001b80:	f107 030c 	add.w	r3, r7, #12
 8001b84:	4619      	mov	r1, r3
 8001b86:	4805      	ldr	r0, [pc, #20]	; (8001b9c <HAL_TIM_MspPostInit+0x70>)
 8001b88:	f000 fe62 	bl	8002850 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001b8c:	bf00      	nop
 8001b8e:	3720      	adds	r7, #32
 8001b90:	46bd      	mov	sp, r7
 8001b92:	bd80      	pop	{r7, pc}
 8001b94:	40010000 	.word	0x40010000
 8001b98:	40023800 	.word	0x40023800
 8001b9c:	40020000 	.word	0x40020000

08001ba0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ba4:	e7fe      	b.n	8001ba4 <NMI_Handler+0x4>

08001ba6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ba6:	b480      	push	{r7}
 8001ba8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001baa:	e7fe      	b.n	8001baa <HardFault_Handler+0x4>

08001bac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001bac:	b480      	push	{r7}
 8001bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001bb0:	e7fe      	b.n	8001bb0 <MemManage_Handler+0x4>

08001bb2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001bb2:	b480      	push	{r7}
 8001bb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001bb6:	e7fe      	b.n	8001bb6 <BusFault_Handler+0x4>

08001bb8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001bbc:	e7fe      	b.n	8001bbc <UsageFault_Handler+0x4>

08001bbe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001bbe:	b480      	push	{r7}
 8001bc0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001bc2:	bf00      	nop
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bca:	4770      	bx	lr

08001bcc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001bd0:	bf00      	nop
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd8:	4770      	bx	lr

08001bda <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001bda:	b480      	push	{r7}
 8001bdc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001bde:	bf00      	nop
 8001be0:	46bd      	mov	sp, r7
 8001be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be6:	4770      	bx	lr

08001be8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001bec:	f000 f8ce 	bl	8001d8c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001bf0:	bf00      	nop
 8001bf2:	bd80      	pop	{r7, pc}

08001bf4 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_Pin);
 8001bf8:	2001      	movs	r0, #1
 8001bfa:	f000 ffdf 	bl	8002bbc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001bfe:	bf00      	nop
 8001c00:	bd80      	pop	{r7, pc}

08001c02 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001c02:	b580      	push	{r7, lr}
 8001c04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USB_DET_Pin);
 8001c06:	2040      	movs	r0, #64	; 0x40
 8001c08:	f000 ffd8 	bl	8002bbc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001c0c:	bf00      	nop
 8001c0e:	bd80      	pop	{r7, pc}

08001c10 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001c14:	4802      	ldr	r0, [pc, #8]	; (8001c20 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 8001c16:	f004 fad1 	bl	80061bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8001c1a:	bf00      	nop
 8001c1c:	bd80      	pop	{r7, pc}
 8001c1e:	bf00      	nop
 8001c20:	20001240 	.word	0x20001240

08001c24 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001c28:	4802      	ldr	r0, [pc, #8]	; (8001c34 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001c2a:	f004 fac7 	bl	80061bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001c2e:	bf00      	nop
 8001c30:	bd80      	pop	{r7, pc}
 8001c32:	bf00      	nop
 8001c34:	20001240 	.word	0x20001240

08001c38 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001c3c:	4802      	ldr	r0, [pc, #8]	; (8001c48 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8001c3e:	f004 fabd 	bl	80061bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8001c42:	bf00      	nop
 8001c44:	bd80      	pop	{r7, pc}
 8001c46:	bf00      	nop
 8001c48:	20001240 	.word	0x20001240

08001c4c <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001c50:	4802      	ldr	r0, [pc, #8]	; (8001c5c <TIM1_CC_IRQHandler+0x10>)
 8001c52:	f004 fab3 	bl	80061bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8001c56:	bf00      	nop
 8001c58:	bd80      	pop	{r7, pc}
 8001c5a:	bf00      	nop
 8001c5c:	20001240 	.word	0x20001240

08001c60 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001c64:	4802      	ldr	r0, [pc, #8]	; (8001c70 <SPI1_IRQHandler+0x10>)
 8001c66:	f003 fd17 	bl	8005698 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8001c6a:	bf00      	nop
 8001c6c:	bd80      	pop	{r7, pc}
 8001c6e:	bf00      	nop
 8001c70:	20001188 	.word	0x20001188

08001c74 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8001c78:	4802      	ldr	r0, [pc, #8]	; (8001c84 <DMA2_Stream0_IRQHandler+0x10>)
 8001c7a:	f000 fb7f 	bl	800237c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001c7e:	bf00      	nop
 8001c80:	bd80      	pop	{r7, pc}
 8001c82:	bf00      	nop
 8001c84:	200011e0 	.word	0x200011e0

08001c88 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001c8c:	4802      	ldr	r0, [pc, #8]	; (8001c98 <OTG_FS_IRQHandler+0x10>)
 8001c8e:	f001 f936 	bl	8002efe <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001c92:	bf00      	nop
 8001c94:	bd80      	pop	{r7, pc}
 8001c96:	bf00      	nop
 8001c98:	2000176c 	.word	0x2000176c

08001c9c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ca0:	4b06      	ldr	r3, [pc, #24]	; (8001cbc <SystemInit+0x20>)
 8001ca2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ca6:	4a05      	ldr	r2, [pc, #20]	; (8001cbc <SystemInit+0x20>)
 8001ca8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001cac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001cb0:	bf00      	nop
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb8:	4770      	bx	lr
 8001cba:	bf00      	nop
 8001cbc:	e000ed00 	.word	0xe000ed00

08001cc0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001cc0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001cf8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001cc4:	480d      	ldr	r0, [pc, #52]	; (8001cfc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001cc6:	490e      	ldr	r1, [pc, #56]	; (8001d00 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001cc8:	4a0e      	ldr	r2, [pc, #56]	; (8001d04 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001cca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ccc:	e002      	b.n	8001cd4 <LoopCopyDataInit>

08001cce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001cce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001cd0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001cd2:	3304      	adds	r3, #4

08001cd4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001cd4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001cd6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001cd8:	d3f9      	bcc.n	8001cce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001cda:	4a0b      	ldr	r2, [pc, #44]	; (8001d08 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001cdc:	4c0b      	ldr	r4, [pc, #44]	; (8001d0c <LoopFillZerobss+0x26>)
  movs r3, #0
 8001cde:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ce0:	e001      	b.n	8001ce6 <LoopFillZerobss>

08001ce2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ce2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ce4:	3204      	adds	r2, #4

08001ce6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ce6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ce8:	d3fb      	bcc.n	8001ce2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001cea:	f7ff ffd7 	bl	8001c9c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001cee:	f00a fdad 	bl	800c84c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001cf2:	f7ff fbda 	bl	80014aa <main>
  bx  lr    
 8001cf6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001cf8:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001cfc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d00:	20000128 	.word	0x20000128
  ldr r2, =_sidata
 8001d04:	0800c944 	.word	0x0800c944
  ldr r2, =_sbss
 8001d08:	20000128 	.word	0x20000128
  ldr r4, =_ebss
 8001d0c:	20002cf0 	.word	0x20002cf0

08001d10 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001d10:	e7fe      	b.n	8001d10 <ADC_IRQHandler>

08001d12 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d12:	b580      	push	{r7, lr}
 8001d14:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d16:	2003      	movs	r0, #3
 8001d18:	f000 f94c 	bl	8001fb4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d1c:	200f      	movs	r0, #15
 8001d1e:	f000 f805 	bl	8001d2c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d22:	f7ff fdf7 	bl	8001914 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d26:	2300      	movs	r3, #0
}
 8001d28:	4618      	mov	r0, r3
 8001d2a:	bd80      	pop	{r7, pc}

08001d2c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b082      	sub	sp, #8
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d34:	4b12      	ldr	r3, [pc, #72]	; (8001d80 <HAL_InitTick+0x54>)
 8001d36:	681a      	ldr	r2, [r3, #0]
 8001d38:	4b12      	ldr	r3, [pc, #72]	; (8001d84 <HAL_InitTick+0x58>)
 8001d3a:	781b      	ldrb	r3, [r3, #0]
 8001d3c:	4619      	mov	r1, r3
 8001d3e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d42:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d46:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	f000 f967 	bl	800201e <HAL_SYSTICK_Config>
 8001d50:	4603      	mov	r3, r0
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d001      	beq.n	8001d5a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001d56:	2301      	movs	r3, #1
 8001d58:	e00e      	b.n	8001d78 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	2b0f      	cmp	r3, #15
 8001d5e:	d80a      	bhi.n	8001d76 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d60:	2200      	movs	r2, #0
 8001d62:	6879      	ldr	r1, [r7, #4]
 8001d64:	f04f 30ff 	mov.w	r0, #4294967295
 8001d68:	f000 f92f 	bl	8001fca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d6c:	4a06      	ldr	r2, [pc, #24]	; (8001d88 <HAL_InitTick+0x5c>)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d72:	2300      	movs	r3, #0
 8001d74:	e000      	b.n	8001d78 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001d76:	2301      	movs	r3, #1
}
 8001d78:	4618      	mov	r0, r3
 8001d7a:	3708      	adds	r7, #8
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	bd80      	pop	{r7, pc}
 8001d80:	20000004 	.word	0x20000004
 8001d84:	2000000c 	.word	0x2000000c
 8001d88:	20000008 	.word	0x20000008

08001d8c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d90:	4b06      	ldr	r3, [pc, #24]	; (8001dac <HAL_IncTick+0x20>)
 8001d92:	781b      	ldrb	r3, [r3, #0]
 8001d94:	461a      	mov	r2, r3
 8001d96:	4b06      	ldr	r3, [pc, #24]	; (8001db0 <HAL_IncTick+0x24>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	4413      	add	r3, r2
 8001d9c:	4a04      	ldr	r2, [pc, #16]	; (8001db0 <HAL_IncTick+0x24>)
 8001d9e:	6013      	str	r3, [r2, #0]
}
 8001da0:	bf00      	nop
 8001da2:	46bd      	mov	sp, r7
 8001da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da8:	4770      	bx	lr
 8001daa:	bf00      	nop
 8001dac:	2000000c 	.word	0x2000000c
 8001db0:	20001288 	.word	0x20001288

08001db4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001db4:	b480      	push	{r7}
 8001db6:	af00      	add	r7, sp, #0
  return uwTick;
 8001db8:	4b03      	ldr	r3, [pc, #12]	; (8001dc8 <HAL_GetTick+0x14>)
 8001dba:	681b      	ldr	r3, [r3, #0]
}
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc4:	4770      	bx	lr
 8001dc6:	bf00      	nop
 8001dc8:	20001288 	.word	0x20001288

08001dcc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b084      	sub	sp, #16
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001dd4:	f7ff ffee 	bl	8001db4 <HAL_GetTick>
 8001dd8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001de4:	d005      	beq.n	8001df2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001de6:	4b0a      	ldr	r3, [pc, #40]	; (8001e10 <HAL_Delay+0x44>)
 8001de8:	781b      	ldrb	r3, [r3, #0]
 8001dea:	461a      	mov	r2, r3
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	4413      	add	r3, r2
 8001df0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001df2:	bf00      	nop
 8001df4:	f7ff ffde 	bl	8001db4 <HAL_GetTick>
 8001df8:	4602      	mov	r2, r0
 8001dfa:	68bb      	ldr	r3, [r7, #8]
 8001dfc:	1ad3      	subs	r3, r2, r3
 8001dfe:	68fa      	ldr	r2, [r7, #12]
 8001e00:	429a      	cmp	r2, r3
 8001e02:	d8f7      	bhi.n	8001df4 <HAL_Delay+0x28>
  {
  }
}
 8001e04:	bf00      	nop
 8001e06:	bf00      	nop
 8001e08:	3710      	adds	r7, #16
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}
 8001e0e:	bf00      	nop
 8001e10:	2000000c 	.word	0x2000000c

08001e14 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e14:	b480      	push	{r7}
 8001e16:	b085      	sub	sp, #20
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	f003 0307 	and.w	r3, r3, #7
 8001e22:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e24:	4b0c      	ldr	r3, [pc, #48]	; (8001e58 <__NVIC_SetPriorityGrouping+0x44>)
 8001e26:	68db      	ldr	r3, [r3, #12]
 8001e28:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e2a:	68ba      	ldr	r2, [r7, #8]
 8001e2c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e30:	4013      	ands	r3, r2
 8001e32:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e38:	68bb      	ldr	r3, [r7, #8]
 8001e3a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e3c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001e40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e44:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e46:	4a04      	ldr	r2, [pc, #16]	; (8001e58 <__NVIC_SetPriorityGrouping+0x44>)
 8001e48:	68bb      	ldr	r3, [r7, #8]
 8001e4a:	60d3      	str	r3, [r2, #12]
}
 8001e4c:	bf00      	nop
 8001e4e:	3714      	adds	r7, #20
 8001e50:	46bd      	mov	sp, r7
 8001e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e56:	4770      	bx	lr
 8001e58:	e000ed00 	.word	0xe000ed00

08001e5c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e60:	4b04      	ldr	r3, [pc, #16]	; (8001e74 <__NVIC_GetPriorityGrouping+0x18>)
 8001e62:	68db      	ldr	r3, [r3, #12]
 8001e64:	0a1b      	lsrs	r3, r3, #8
 8001e66:	f003 0307 	and.w	r3, r3, #7
}
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e72:	4770      	bx	lr
 8001e74:	e000ed00 	.word	0xe000ed00

08001e78 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	b083      	sub	sp, #12
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	4603      	mov	r3, r0
 8001e80:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	db0b      	blt.n	8001ea2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e8a:	79fb      	ldrb	r3, [r7, #7]
 8001e8c:	f003 021f 	and.w	r2, r3, #31
 8001e90:	4907      	ldr	r1, [pc, #28]	; (8001eb0 <__NVIC_EnableIRQ+0x38>)
 8001e92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e96:	095b      	lsrs	r3, r3, #5
 8001e98:	2001      	movs	r0, #1
 8001e9a:	fa00 f202 	lsl.w	r2, r0, r2
 8001e9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001ea2:	bf00      	nop
 8001ea4:	370c      	adds	r7, #12
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eac:	4770      	bx	lr
 8001eae:	bf00      	nop
 8001eb0:	e000e100 	.word	0xe000e100

08001eb4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	b083      	sub	sp, #12
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	4603      	mov	r3, r0
 8001ebc:	6039      	str	r1, [r7, #0]
 8001ebe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ec0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	db0a      	blt.n	8001ede <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	b2da      	uxtb	r2, r3
 8001ecc:	490c      	ldr	r1, [pc, #48]	; (8001f00 <__NVIC_SetPriority+0x4c>)
 8001ece:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ed2:	0112      	lsls	r2, r2, #4
 8001ed4:	b2d2      	uxtb	r2, r2
 8001ed6:	440b      	add	r3, r1
 8001ed8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001edc:	e00a      	b.n	8001ef4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	b2da      	uxtb	r2, r3
 8001ee2:	4908      	ldr	r1, [pc, #32]	; (8001f04 <__NVIC_SetPriority+0x50>)
 8001ee4:	79fb      	ldrb	r3, [r7, #7]
 8001ee6:	f003 030f 	and.w	r3, r3, #15
 8001eea:	3b04      	subs	r3, #4
 8001eec:	0112      	lsls	r2, r2, #4
 8001eee:	b2d2      	uxtb	r2, r2
 8001ef0:	440b      	add	r3, r1
 8001ef2:	761a      	strb	r2, [r3, #24]
}
 8001ef4:	bf00      	nop
 8001ef6:	370c      	adds	r7, #12
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efe:	4770      	bx	lr
 8001f00:	e000e100 	.word	0xe000e100
 8001f04:	e000ed00 	.word	0xe000ed00

08001f08 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	b089      	sub	sp, #36	; 0x24
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	60f8      	str	r0, [r7, #12]
 8001f10:	60b9      	str	r1, [r7, #8]
 8001f12:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	f003 0307 	and.w	r3, r3, #7
 8001f1a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f1c:	69fb      	ldr	r3, [r7, #28]
 8001f1e:	f1c3 0307 	rsb	r3, r3, #7
 8001f22:	2b04      	cmp	r3, #4
 8001f24:	bf28      	it	cs
 8001f26:	2304      	movcs	r3, #4
 8001f28:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f2a:	69fb      	ldr	r3, [r7, #28]
 8001f2c:	3304      	adds	r3, #4
 8001f2e:	2b06      	cmp	r3, #6
 8001f30:	d902      	bls.n	8001f38 <NVIC_EncodePriority+0x30>
 8001f32:	69fb      	ldr	r3, [r7, #28]
 8001f34:	3b03      	subs	r3, #3
 8001f36:	e000      	b.n	8001f3a <NVIC_EncodePriority+0x32>
 8001f38:	2300      	movs	r3, #0
 8001f3a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f3c:	f04f 32ff 	mov.w	r2, #4294967295
 8001f40:	69bb      	ldr	r3, [r7, #24]
 8001f42:	fa02 f303 	lsl.w	r3, r2, r3
 8001f46:	43da      	mvns	r2, r3
 8001f48:	68bb      	ldr	r3, [r7, #8]
 8001f4a:	401a      	ands	r2, r3
 8001f4c:	697b      	ldr	r3, [r7, #20]
 8001f4e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f50:	f04f 31ff 	mov.w	r1, #4294967295
 8001f54:	697b      	ldr	r3, [r7, #20]
 8001f56:	fa01 f303 	lsl.w	r3, r1, r3
 8001f5a:	43d9      	mvns	r1, r3
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f60:	4313      	orrs	r3, r2
         );
}
 8001f62:	4618      	mov	r0, r3
 8001f64:	3724      	adds	r7, #36	; 0x24
 8001f66:	46bd      	mov	sp, r7
 8001f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6c:	4770      	bx	lr
	...

08001f70 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b082      	sub	sp, #8
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	3b01      	subs	r3, #1
 8001f7c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f80:	d301      	bcc.n	8001f86 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f82:	2301      	movs	r3, #1
 8001f84:	e00f      	b.n	8001fa6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f86:	4a0a      	ldr	r2, [pc, #40]	; (8001fb0 <SysTick_Config+0x40>)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	3b01      	subs	r3, #1
 8001f8c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f8e:	210f      	movs	r1, #15
 8001f90:	f04f 30ff 	mov.w	r0, #4294967295
 8001f94:	f7ff ff8e 	bl	8001eb4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f98:	4b05      	ldr	r3, [pc, #20]	; (8001fb0 <SysTick_Config+0x40>)
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f9e:	4b04      	ldr	r3, [pc, #16]	; (8001fb0 <SysTick_Config+0x40>)
 8001fa0:	2207      	movs	r2, #7
 8001fa2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001fa4:	2300      	movs	r3, #0
}
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	3708      	adds	r7, #8
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bd80      	pop	{r7, pc}
 8001fae:	bf00      	nop
 8001fb0:	e000e010 	.word	0xe000e010

08001fb4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b082      	sub	sp, #8
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001fbc:	6878      	ldr	r0, [r7, #4]
 8001fbe:	f7ff ff29 	bl	8001e14 <__NVIC_SetPriorityGrouping>
}
 8001fc2:	bf00      	nop
 8001fc4:	3708      	adds	r7, #8
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd80      	pop	{r7, pc}

08001fca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001fca:	b580      	push	{r7, lr}
 8001fcc:	b086      	sub	sp, #24
 8001fce:	af00      	add	r7, sp, #0
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	60b9      	str	r1, [r7, #8]
 8001fd4:	607a      	str	r2, [r7, #4]
 8001fd6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001fdc:	f7ff ff3e 	bl	8001e5c <__NVIC_GetPriorityGrouping>
 8001fe0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001fe2:	687a      	ldr	r2, [r7, #4]
 8001fe4:	68b9      	ldr	r1, [r7, #8]
 8001fe6:	6978      	ldr	r0, [r7, #20]
 8001fe8:	f7ff ff8e 	bl	8001f08 <NVIC_EncodePriority>
 8001fec:	4602      	mov	r2, r0
 8001fee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ff2:	4611      	mov	r1, r2
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	f7ff ff5d 	bl	8001eb4 <__NVIC_SetPriority>
}
 8001ffa:	bf00      	nop
 8001ffc:	3718      	adds	r7, #24
 8001ffe:	46bd      	mov	sp, r7
 8002000:	bd80      	pop	{r7, pc}

08002002 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002002:	b580      	push	{r7, lr}
 8002004:	b082      	sub	sp, #8
 8002006:	af00      	add	r7, sp, #0
 8002008:	4603      	mov	r3, r0
 800200a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800200c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002010:	4618      	mov	r0, r3
 8002012:	f7ff ff31 	bl	8001e78 <__NVIC_EnableIRQ>
}
 8002016:	bf00      	nop
 8002018:	3708      	adds	r7, #8
 800201a:	46bd      	mov	sp, r7
 800201c:	bd80      	pop	{r7, pc}

0800201e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800201e:	b580      	push	{r7, lr}
 8002020:	b082      	sub	sp, #8
 8002022:	af00      	add	r7, sp, #0
 8002024:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002026:	6878      	ldr	r0, [r7, #4]
 8002028:	f7ff ffa2 	bl	8001f70 <SysTick_Config>
 800202c:	4603      	mov	r3, r0
}
 800202e:	4618      	mov	r0, r3
 8002030:	3708      	adds	r7, #8
 8002032:	46bd      	mov	sp, r7
 8002034:	bd80      	pop	{r7, pc}

08002036 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8002036:	b580      	push	{r7, lr}
 8002038:	b082      	sub	sp, #8
 800203a:	af00      	add	r7, sp, #0
 800203c:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	2b00      	cmp	r3, #0
 8002042:	d101      	bne.n	8002048 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8002044:	2301      	movs	r3, #1
 8002046:	e00e      	b.n	8002066 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	795b      	ldrb	r3, [r3, #5]
 800204c:	b2db      	uxtb	r3, r3
 800204e:	2b00      	cmp	r3, #0
 8002050:	d105      	bne.n	800205e <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	2200      	movs	r2, #0
 8002056:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8002058:	6878      	ldr	r0, [r7, #4]
 800205a:	f7ff fc83 	bl	8001964 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	2201      	movs	r2, #1
 8002062:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002064:	2300      	movs	r3, #0
}
 8002066:	4618      	mov	r0, r3
 8002068:	3708      	adds	r7, #8
 800206a:	46bd      	mov	sp, r7
 800206c:	bd80      	pop	{r7, pc}

0800206e <HAL_CRC_Accumulate>:
  * @param  pBuffer pointer to the input data buffer.
  * @param  BufferLength input data buffer length (number of uint32_t words).
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Accumulate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 800206e:	b480      	push	{r7}
 8002070:	b087      	sub	sp, #28
 8002072:	af00      	add	r7, sp, #0
 8002074:	60f8      	str	r0, [r7, #12]
 8002076:	60b9      	str	r1, [r7, #8]
 8002078:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 800207a:	2300      	movs	r3, #0
 800207c:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	2202      	movs	r2, #2
 8002082:	715a      	strb	r2, [r3, #5]

  /* Enter Data to the CRC calculator */
  for (index = 0U; index < BufferLength; index++)
 8002084:	2300      	movs	r3, #0
 8002086:	617b      	str	r3, [r7, #20]
 8002088:	e00a      	b.n	80020a0 <HAL_CRC_Accumulate+0x32>
  {
    hcrc->Instance->DR = pBuffer[index];
 800208a:	697b      	ldr	r3, [r7, #20]
 800208c:	009b      	lsls	r3, r3, #2
 800208e:	68ba      	ldr	r2, [r7, #8]
 8002090:	441a      	add	r2, r3
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	6812      	ldr	r2, [r2, #0]
 8002098:	601a      	str	r2, [r3, #0]
  for (index = 0U; index < BufferLength; index++)
 800209a:	697b      	ldr	r3, [r7, #20]
 800209c:	3301      	adds	r3, #1
 800209e:	617b      	str	r3, [r7, #20]
 80020a0:	697a      	ldr	r2, [r7, #20]
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	429a      	cmp	r2, r3
 80020a6:	d3f0      	bcc.n	800208a <HAL_CRC_Accumulate+0x1c>
  }
  temp = hcrc->Instance->DR;
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	2201      	movs	r2, #1
 80020b4:	715a      	strb	r2, [r3, #5]

  /* Return the CRC computed value */
  return temp;
 80020b6:	693b      	ldr	r3, [r7, #16]
}
 80020b8:	4618      	mov	r0, r3
 80020ba:	371c      	adds	r7, #28
 80020bc:	46bd      	mov	sp, r7
 80020be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c2:	4770      	bx	lr

080020c4 <HAL_CRC_Calculate>:
  * @param  pBuffer pointer to the input data buffer.
  * @param  BufferLength input data buffer length (number of uint32_t words).
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 80020c4:	b480      	push	{r7}
 80020c6:	b087      	sub	sp, #28
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	60f8      	str	r0, [r7, #12]
 80020cc:	60b9      	str	r1, [r7, #8]
 80020ce:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 80020d0:	2300      	movs	r3, #0
 80020d2:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	2202      	movs	r2, #2
 80020d8:	715a      	strb	r2, [r3, #5]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	689a      	ldr	r2, [r3, #8]
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f042 0201 	orr.w	r2, r2, #1
 80020e8:	609a      	str	r2, [r3, #8]

  /* Enter 32-bit input data to the CRC calculator */
  for (index = 0U; index < BufferLength; index++)
 80020ea:	2300      	movs	r3, #0
 80020ec:	617b      	str	r3, [r7, #20]
 80020ee:	e00a      	b.n	8002106 <HAL_CRC_Calculate+0x42>
  {
    hcrc->Instance->DR = pBuffer[index];
 80020f0:	697b      	ldr	r3, [r7, #20]
 80020f2:	009b      	lsls	r3, r3, #2
 80020f4:	68ba      	ldr	r2, [r7, #8]
 80020f6:	441a      	add	r2, r3
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	6812      	ldr	r2, [r2, #0]
 80020fe:	601a      	str	r2, [r3, #0]
  for (index = 0U; index < BufferLength; index++)
 8002100:	697b      	ldr	r3, [r7, #20]
 8002102:	3301      	adds	r3, #1
 8002104:	617b      	str	r3, [r7, #20]
 8002106:	697a      	ldr	r2, [r7, #20]
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	429a      	cmp	r2, r3
 800210c:	d3f0      	bcc.n	80020f0 <HAL_CRC_Calculate+0x2c>
  }
  temp = hcrc->Instance->DR;
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	2201      	movs	r2, #1
 800211a:	715a      	strb	r2, [r3, #5]

  /* Return the CRC computed value */
  return temp;
 800211c:	693b      	ldr	r3, [r7, #16]
}
 800211e:	4618      	mov	r0, r3
 8002120:	371c      	adds	r7, #28
 8002122:	46bd      	mov	sp, r7
 8002124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002128:	4770      	bx	lr
	...

0800212c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b086      	sub	sp, #24
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002134:	2300      	movs	r3, #0
 8002136:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002138:	f7ff fe3c 	bl	8001db4 <HAL_GetTick>
 800213c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	2b00      	cmp	r3, #0
 8002142:	d101      	bne.n	8002148 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002144:	2301      	movs	r3, #1
 8002146:	e099      	b.n	800227c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2202      	movs	r2, #2
 800214c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2200      	movs	r2, #0
 8002154:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	681a      	ldr	r2, [r3, #0]
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f022 0201 	bic.w	r2, r2, #1
 8002166:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002168:	e00f      	b.n	800218a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800216a:	f7ff fe23 	bl	8001db4 <HAL_GetTick>
 800216e:	4602      	mov	r2, r0
 8002170:	693b      	ldr	r3, [r7, #16]
 8002172:	1ad3      	subs	r3, r2, r3
 8002174:	2b05      	cmp	r3, #5
 8002176:	d908      	bls.n	800218a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	2220      	movs	r2, #32
 800217c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	2203      	movs	r2, #3
 8002182:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002186:	2303      	movs	r3, #3
 8002188:	e078      	b.n	800227c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f003 0301 	and.w	r3, r3, #1
 8002194:	2b00      	cmp	r3, #0
 8002196:	d1e8      	bne.n	800216a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80021a0:	697a      	ldr	r2, [r7, #20]
 80021a2:	4b38      	ldr	r3, [pc, #224]	; (8002284 <HAL_DMA_Init+0x158>)
 80021a4:	4013      	ands	r3, r2
 80021a6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	685a      	ldr	r2, [r3, #4]
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	689b      	ldr	r3, [r3, #8]
 80021b0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80021b6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	691b      	ldr	r3, [r3, #16]
 80021bc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80021c2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	699b      	ldr	r3, [r3, #24]
 80021c8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80021ce:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6a1b      	ldr	r3, [r3, #32]
 80021d4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80021d6:	697a      	ldr	r2, [r7, #20]
 80021d8:	4313      	orrs	r3, r2
 80021da:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021e0:	2b04      	cmp	r3, #4
 80021e2:	d107      	bne.n	80021f4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ec:	4313      	orrs	r3, r2
 80021ee:	697a      	ldr	r2, [r7, #20]
 80021f0:	4313      	orrs	r3, r2
 80021f2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	697a      	ldr	r2, [r7, #20]
 80021fa:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	695b      	ldr	r3, [r3, #20]
 8002202:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002204:	697b      	ldr	r3, [r7, #20]
 8002206:	f023 0307 	bic.w	r3, r3, #7
 800220a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002210:	697a      	ldr	r2, [r7, #20]
 8002212:	4313      	orrs	r3, r2
 8002214:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800221a:	2b04      	cmp	r3, #4
 800221c:	d117      	bne.n	800224e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002222:	697a      	ldr	r2, [r7, #20]
 8002224:	4313      	orrs	r3, r2
 8002226:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800222c:	2b00      	cmp	r3, #0
 800222e:	d00e      	beq.n	800224e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002230:	6878      	ldr	r0, [r7, #4]
 8002232:	f000 fa91 	bl	8002758 <DMA_CheckFifoParam>
 8002236:	4603      	mov	r3, r0
 8002238:	2b00      	cmp	r3, #0
 800223a:	d008      	beq.n	800224e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2240      	movs	r2, #64	; 0x40
 8002240:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	2201      	movs	r2, #1
 8002246:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800224a:	2301      	movs	r3, #1
 800224c:	e016      	b.n	800227c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	697a      	ldr	r2, [r7, #20]
 8002254:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002256:	6878      	ldr	r0, [r7, #4]
 8002258:	f000 fa48 	bl	80026ec <DMA_CalcBaseAndBitshift>
 800225c:	4603      	mov	r3, r0
 800225e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002264:	223f      	movs	r2, #63	; 0x3f
 8002266:	409a      	lsls	r2, r3
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2200      	movs	r2, #0
 8002270:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	2201      	movs	r2, #1
 8002276:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800227a:	2300      	movs	r3, #0
}
 800227c:	4618      	mov	r0, r3
 800227e:	3718      	adds	r7, #24
 8002280:	46bd      	mov	sp, r7
 8002282:	bd80      	pop	{r7, pc}
 8002284:	f010803f 	.word	0xf010803f

08002288 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b086      	sub	sp, #24
 800228c:	af00      	add	r7, sp, #0
 800228e:	60f8      	str	r0, [r7, #12]
 8002290:	60b9      	str	r1, [r7, #8]
 8002292:	607a      	str	r2, [r7, #4]
 8002294:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002296:	2300      	movs	r3, #0
 8002298:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800229e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80022a6:	2b01      	cmp	r3, #1
 80022a8:	d101      	bne.n	80022ae <HAL_DMA_Start_IT+0x26>
 80022aa:	2302      	movs	r3, #2
 80022ac:	e040      	b.n	8002330 <HAL_DMA_Start_IT+0xa8>
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	2201      	movs	r2, #1
 80022b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80022bc:	b2db      	uxtb	r3, r3
 80022be:	2b01      	cmp	r3, #1
 80022c0:	d12f      	bne.n	8002322 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	2202      	movs	r2, #2
 80022c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	2200      	movs	r2, #0
 80022ce:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	687a      	ldr	r2, [r7, #4]
 80022d4:	68b9      	ldr	r1, [r7, #8]
 80022d6:	68f8      	ldr	r0, [r7, #12]
 80022d8:	f000 f9da 	bl	8002690 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022e0:	223f      	movs	r2, #63	; 0x3f
 80022e2:	409a      	lsls	r2, r3
 80022e4:	693b      	ldr	r3, [r7, #16]
 80022e6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	681a      	ldr	r2, [r3, #0]
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f042 0216 	orr.w	r2, r2, #22
 80022f6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d007      	beq.n	8002310 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	681a      	ldr	r2, [r3, #0]
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f042 0208 	orr.w	r2, r2, #8
 800230e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	681a      	ldr	r2, [r3, #0]
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f042 0201 	orr.w	r2, r2, #1
 800231e:	601a      	str	r2, [r3, #0]
 8002320:	e005      	b.n	800232e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	2200      	movs	r2, #0
 8002326:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800232a:	2302      	movs	r3, #2
 800232c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800232e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002330:	4618      	mov	r0, r3
 8002332:	3718      	adds	r7, #24
 8002334:	46bd      	mov	sp, r7
 8002336:	bd80      	pop	{r7, pc}

08002338 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002338:	b480      	push	{r7}
 800233a:	b083      	sub	sp, #12
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002346:	b2db      	uxtb	r3, r3
 8002348:	2b02      	cmp	r3, #2
 800234a:	d004      	beq.n	8002356 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	2280      	movs	r2, #128	; 0x80
 8002350:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002352:	2301      	movs	r3, #1
 8002354:	e00c      	b.n	8002370 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	2205      	movs	r2, #5
 800235a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	681a      	ldr	r2, [r3, #0]
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f022 0201 	bic.w	r2, r2, #1
 800236c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800236e:	2300      	movs	r3, #0
}
 8002370:	4618      	mov	r0, r3
 8002372:	370c      	adds	r7, #12
 8002374:	46bd      	mov	sp, r7
 8002376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237a:	4770      	bx	lr

0800237c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b086      	sub	sp, #24
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002384:	2300      	movs	r3, #0
 8002386:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002388:	4b8e      	ldr	r3, [pc, #568]	; (80025c4 <HAL_DMA_IRQHandler+0x248>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4a8e      	ldr	r2, [pc, #568]	; (80025c8 <HAL_DMA_IRQHandler+0x24c>)
 800238e:	fba2 2303 	umull	r2, r3, r2, r3
 8002392:	0a9b      	lsrs	r3, r3, #10
 8002394:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800239a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800239c:	693b      	ldr	r3, [r7, #16]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023a6:	2208      	movs	r2, #8
 80023a8:	409a      	lsls	r2, r3
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	4013      	ands	r3, r2
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d01a      	beq.n	80023e8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f003 0304 	and.w	r3, r3, #4
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d013      	beq.n	80023e8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	681a      	ldr	r2, [r3, #0]
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f022 0204 	bic.w	r2, r2, #4
 80023ce:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023d4:	2208      	movs	r2, #8
 80023d6:	409a      	lsls	r2, r3
 80023d8:	693b      	ldr	r3, [r7, #16]
 80023da:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023e0:	f043 0201 	orr.w	r2, r3, #1
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023ec:	2201      	movs	r2, #1
 80023ee:	409a      	lsls	r2, r3
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	4013      	ands	r3, r2
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d012      	beq.n	800241e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	695b      	ldr	r3, [r3, #20]
 80023fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002402:	2b00      	cmp	r3, #0
 8002404:	d00b      	beq.n	800241e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800240a:	2201      	movs	r2, #1
 800240c:	409a      	lsls	r2, r3
 800240e:	693b      	ldr	r3, [r7, #16]
 8002410:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002416:	f043 0202 	orr.w	r2, r3, #2
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002422:	2204      	movs	r2, #4
 8002424:	409a      	lsls	r2, r3
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	4013      	ands	r3, r2
 800242a:	2b00      	cmp	r3, #0
 800242c:	d012      	beq.n	8002454 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f003 0302 	and.w	r3, r3, #2
 8002438:	2b00      	cmp	r3, #0
 800243a:	d00b      	beq.n	8002454 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002440:	2204      	movs	r2, #4
 8002442:	409a      	lsls	r2, r3
 8002444:	693b      	ldr	r3, [r7, #16]
 8002446:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800244c:	f043 0204 	orr.w	r2, r3, #4
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002458:	2210      	movs	r2, #16
 800245a:	409a      	lsls	r2, r3
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	4013      	ands	r3, r2
 8002460:	2b00      	cmp	r3, #0
 8002462:	d043      	beq.n	80024ec <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f003 0308 	and.w	r3, r3, #8
 800246e:	2b00      	cmp	r3, #0
 8002470:	d03c      	beq.n	80024ec <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002476:	2210      	movs	r2, #16
 8002478:	409a      	lsls	r2, r3
 800247a:	693b      	ldr	r3, [r7, #16]
 800247c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002488:	2b00      	cmp	r3, #0
 800248a:	d018      	beq.n	80024be <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002496:	2b00      	cmp	r3, #0
 8002498:	d108      	bne.n	80024ac <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d024      	beq.n	80024ec <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024a6:	6878      	ldr	r0, [r7, #4]
 80024a8:	4798      	blx	r3
 80024aa:	e01f      	b.n	80024ec <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d01b      	beq.n	80024ec <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024b8:	6878      	ldr	r0, [r7, #4]
 80024ba:	4798      	blx	r3
 80024bc:	e016      	b.n	80024ec <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d107      	bne.n	80024dc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	681a      	ldr	r2, [r3, #0]
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f022 0208 	bic.w	r2, r2, #8
 80024da:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d003      	beq.n	80024ec <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024e8:	6878      	ldr	r0, [r7, #4]
 80024ea:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024f0:	2220      	movs	r2, #32
 80024f2:	409a      	lsls	r2, r3
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	4013      	ands	r3, r2
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	f000 808f 	beq.w	800261c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f003 0310 	and.w	r3, r3, #16
 8002508:	2b00      	cmp	r3, #0
 800250a:	f000 8087 	beq.w	800261c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002512:	2220      	movs	r2, #32
 8002514:	409a      	lsls	r2, r3
 8002516:	693b      	ldr	r3, [r7, #16]
 8002518:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002520:	b2db      	uxtb	r3, r3
 8002522:	2b05      	cmp	r3, #5
 8002524:	d136      	bne.n	8002594 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	681a      	ldr	r2, [r3, #0]
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f022 0216 	bic.w	r2, r2, #22
 8002534:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	695a      	ldr	r2, [r3, #20]
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002544:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800254a:	2b00      	cmp	r3, #0
 800254c:	d103      	bne.n	8002556 <HAL_DMA_IRQHandler+0x1da>
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002552:	2b00      	cmp	r3, #0
 8002554:	d007      	beq.n	8002566 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	681a      	ldr	r2, [r3, #0]
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f022 0208 	bic.w	r2, r2, #8
 8002564:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800256a:	223f      	movs	r2, #63	; 0x3f
 800256c:	409a      	lsls	r2, r3
 800256e:	693b      	ldr	r3, [r7, #16]
 8002570:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	2201      	movs	r2, #1
 8002576:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	2200      	movs	r2, #0
 800257e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002586:	2b00      	cmp	r3, #0
 8002588:	d07e      	beq.n	8002688 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800258e:	6878      	ldr	r0, [r7, #4]
 8002590:	4798      	blx	r3
        }
        return;
 8002592:	e079      	b.n	8002688 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d01d      	beq.n	80025de <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d10d      	bne.n	80025cc <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d031      	beq.n	800261c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025bc:	6878      	ldr	r0, [r7, #4]
 80025be:	4798      	blx	r3
 80025c0:	e02c      	b.n	800261c <HAL_DMA_IRQHandler+0x2a0>
 80025c2:	bf00      	nop
 80025c4:	20000004 	.word	0x20000004
 80025c8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d023      	beq.n	800261c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025d8:	6878      	ldr	r0, [r7, #4]
 80025da:	4798      	blx	r3
 80025dc:	e01e      	b.n	800261c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d10f      	bne.n	800260c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	681a      	ldr	r2, [r3, #0]
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f022 0210 	bic.w	r2, r2, #16
 80025fa:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2201      	movs	r2, #1
 8002600:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2200      	movs	r2, #0
 8002608:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002610:	2b00      	cmp	r3, #0
 8002612:	d003      	beq.n	800261c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002618:	6878      	ldr	r0, [r7, #4]
 800261a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002620:	2b00      	cmp	r3, #0
 8002622:	d032      	beq.n	800268a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002628:	f003 0301 	and.w	r3, r3, #1
 800262c:	2b00      	cmp	r3, #0
 800262e:	d022      	beq.n	8002676 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2205      	movs	r2, #5
 8002634:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	681a      	ldr	r2, [r3, #0]
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f022 0201 	bic.w	r2, r2, #1
 8002646:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002648:	68bb      	ldr	r3, [r7, #8]
 800264a:	3301      	adds	r3, #1
 800264c:	60bb      	str	r3, [r7, #8]
 800264e:	697a      	ldr	r2, [r7, #20]
 8002650:	429a      	cmp	r2, r3
 8002652:	d307      	bcc.n	8002664 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f003 0301 	and.w	r3, r3, #1
 800265e:	2b00      	cmp	r3, #0
 8002660:	d1f2      	bne.n	8002648 <HAL_DMA_IRQHandler+0x2cc>
 8002662:	e000      	b.n	8002666 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002664:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	2201      	movs	r2, #1
 800266a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	2200      	movs	r2, #0
 8002672:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800267a:	2b00      	cmp	r3, #0
 800267c:	d005      	beq.n	800268a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002682:	6878      	ldr	r0, [r7, #4]
 8002684:	4798      	blx	r3
 8002686:	e000      	b.n	800268a <HAL_DMA_IRQHandler+0x30e>
        return;
 8002688:	bf00      	nop
    }
  }
}
 800268a:	3718      	adds	r7, #24
 800268c:	46bd      	mov	sp, r7
 800268e:	bd80      	pop	{r7, pc}

08002690 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002690:	b480      	push	{r7}
 8002692:	b085      	sub	sp, #20
 8002694:	af00      	add	r7, sp, #0
 8002696:	60f8      	str	r0, [r7, #12]
 8002698:	60b9      	str	r1, [r7, #8]
 800269a:	607a      	str	r2, [r7, #4]
 800269c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	681a      	ldr	r2, [r3, #0]
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80026ac:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	683a      	ldr	r2, [r7, #0]
 80026b4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	689b      	ldr	r3, [r3, #8]
 80026ba:	2b40      	cmp	r3, #64	; 0x40
 80026bc:	d108      	bne.n	80026d0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	687a      	ldr	r2, [r7, #4]
 80026c4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	68ba      	ldr	r2, [r7, #8]
 80026cc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80026ce:	e007      	b.n	80026e0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	68ba      	ldr	r2, [r7, #8]
 80026d6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	687a      	ldr	r2, [r7, #4]
 80026de:	60da      	str	r2, [r3, #12]
}
 80026e0:	bf00      	nop
 80026e2:	3714      	adds	r7, #20
 80026e4:	46bd      	mov	sp, r7
 80026e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ea:	4770      	bx	lr

080026ec <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80026ec:	b480      	push	{r7}
 80026ee:	b085      	sub	sp, #20
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	b2db      	uxtb	r3, r3
 80026fa:	3b10      	subs	r3, #16
 80026fc:	4a14      	ldr	r2, [pc, #80]	; (8002750 <DMA_CalcBaseAndBitshift+0x64>)
 80026fe:	fba2 2303 	umull	r2, r3, r2, r3
 8002702:	091b      	lsrs	r3, r3, #4
 8002704:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002706:	4a13      	ldr	r2, [pc, #76]	; (8002754 <DMA_CalcBaseAndBitshift+0x68>)
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	4413      	add	r3, r2
 800270c:	781b      	ldrb	r3, [r3, #0]
 800270e:	461a      	mov	r2, r3
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	2b03      	cmp	r3, #3
 8002718:	d909      	bls.n	800272e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002722:	f023 0303 	bic.w	r3, r3, #3
 8002726:	1d1a      	adds	r2, r3, #4
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	659a      	str	r2, [r3, #88]	; 0x58
 800272c:	e007      	b.n	800273e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002736:	f023 0303 	bic.w	r3, r3, #3
 800273a:	687a      	ldr	r2, [r7, #4]
 800273c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002742:	4618      	mov	r0, r3
 8002744:	3714      	adds	r7, #20
 8002746:	46bd      	mov	sp, r7
 8002748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274c:	4770      	bx	lr
 800274e:	bf00      	nop
 8002750:	aaaaaaab 	.word	0xaaaaaaab
 8002754:	0800c908 	.word	0x0800c908

08002758 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002758:	b480      	push	{r7}
 800275a:	b085      	sub	sp, #20
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002760:	2300      	movs	r3, #0
 8002762:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002768:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	699b      	ldr	r3, [r3, #24]
 800276e:	2b00      	cmp	r3, #0
 8002770:	d11f      	bne.n	80027b2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002772:	68bb      	ldr	r3, [r7, #8]
 8002774:	2b03      	cmp	r3, #3
 8002776:	d856      	bhi.n	8002826 <DMA_CheckFifoParam+0xce>
 8002778:	a201      	add	r2, pc, #4	; (adr r2, 8002780 <DMA_CheckFifoParam+0x28>)
 800277a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800277e:	bf00      	nop
 8002780:	08002791 	.word	0x08002791
 8002784:	080027a3 	.word	0x080027a3
 8002788:	08002791 	.word	0x08002791
 800278c:	08002827 	.word	0x08002827
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002794:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002798:	2b00      	cmp	r3, #0
 800279a:	d046      	beq.n	800282a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800279c:	2301      	movs	r3, #1
 800279e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80027a0:	e043      	b.n	800282a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027a6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80027aa:	d140      	bne.n	800282e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80027ac:	2301      	movs	r3, #1
 80027ae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80027b0:	e03d      	b.n	800282e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	699b      	ldr	r3, [r3, #24]
 80027b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80027ba:	d121      	bne.n	8002800 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80027bc:	68bb      	ldr	r3, [r7, #8]
 80027be:	2b03      	cmp	r3, #3
 80027c0:	d837      	bhi.n	8002832 <DMA_CheckFifoParam+0xda>
 80027c2:	a201      	add	r2, pc, #4	; (adr r2, 80027c8 <DMA_CheckFifoParam+0x70>)
 80027c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027c8:	080027d9 	.word	0x080027d9
 80027cc:	080027df 	.word	0x080027df
 80027d0:	080027d9 	.word	0x080027d9
 80027d4:	080027f1 	.word	0x080027f1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80027d8:	2301      	movs	r3, #1
 80027da:	73fb      	strb	r3, [r7, #15]
      break;
 80027dc:	e030      	b.n	8002840 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027e2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d025      	beq.n	8002836 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80027ea:	2301      	movs	r3, #1
 80027ec:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80027ee:	e022      	b.n	8002836 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027f4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80027f8:	d11f      	bne.n	800283a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80027fa:	2301      	movs	r3, #1
 80027fc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80027fe:	e01c      	b.n	800283a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002800:	68bb      	ldr	r3, [r7, #8]
 8002802:	2b02      	cmp	r3, #2
 8002804:	d903      	bls.n	800280e <DMA_CheckFifoParam+0xb6>
 8002806:	68bb      	ldr	r3, [r7, #8]
 8002808:	2b03      	cmp	r3, #3
 800280a:	d003      	beq.n	8002814 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800280c:	e018      	b.n	8002840 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800280e:	2301      	movs	r3, #1
 8002810:	73fb      	strb	r3, [r7, #15]
      break;
 8002812:	e015      	b.n	8002840 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002818:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800281c:	2b00      	cmp	r3, #0
 800281e:	d00e      	beq.n	800283e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002820:	2301      	movs	r3, #1
 8002822:	73fb      	strb	r3, [r7, #15]
      break;
 8002824:	e00b      	b.n	800283e <DMA_CheckFifoParam+0xe6>
      break;
 8002826:	bf00      	nop
 8002828:	e00a      	b.n	8002840 <DMA_CheckFifoParam+0xe8>
      break;
 800282a:	bf00      	nop
 800282c:	e008      	b.n	8002840 <DMA_CheckFifoParam+0xe8>
      break;
 800282e:	bf00      	nop
 8002830:	e006      	b.n	8002840 <DMA_CheckFifoParam+0xe8>
      break;
 8002832:	bf00      	nop
 8002834:	e004      	b.n	8002840 <DMA_CheckFifoParam+0xe8>
      break;
 8002836:	bf00      	nop
 8002838:	e002      	b.n	8002840 <DMA_CheckFifoParam+0xe8>
      break;   
 800283a:	bf00      	nop
 800283c:	e000      	b.n	8002840 <DMA_CheckFifoParam+0xe8>
      break;
 800283e:	bf00      	nop
    }
  } 
  
  return status; 
 8002840:	7bfb      	ldrb	r3, [r7, #15]
}
 8002842:	4618      	mov	r0, r3
 8002844:	3714      	adds	r7, #20
 8002846:	46bd      	mov	sp, r7
 8002848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284c:	4770      	bx	lr
 800284e:	bf00      	nop

08002850 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002850:	b480      	push	{r7}
 8002852:	b089      	sub	sp, #36	; 0x24
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
 8002858:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800285a:	2300      	movs	r3, #0
 800285c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800285e:	2300      	movs	r3, #0
 8002860:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002862:	2300      	movs	r3, #0
 8002864:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002866:	2300      	movs	r3, #0
 8002868:	61fb      	str	r3, [r7, #28]
 800286a:	e159      	b.n	8002b20 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800286c:	2201      	movs	r2, #1
 800286e:	69fb      	ldr	r3, [r7, #28]
 8002870:	fa02 f303 	lsl.w	r3, r2, r3
 8002874:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	697a      	ldr	r2, [r7, #20]
 800287c:	4013      	ands	r3, r2
 800287e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002880:	693a      	ldr	r2, [r7, #16]
 8002882:	697b      	ldr	r3, [r7, #20]
 8002884:	429a      	cmp	r2, r3
 8002886:	f040 8148 	bne.w	8002b1a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	685b      	ldr	r3, [r3, #4]
 800288e:	f003 0303 	and.w	r3, r3, #3
 8002892:	2b01      	cmp	r3, #1
 8002894:	d005      	beq.n	80028a2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800289e:	2b02      	cmp	r3, #2
 80028a0:	d130      	bne.n	8002904 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	689b      	ldr	r3, [r3, #8]
 80028a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80028a8:	69fb      	ldr	r3, [r7, #28]
 80028aa:	005b      	lsls	r3, r3, #1
 80028ac:	2203      	movs	r2, #3
 80028ae:	fa02 f303 	lsl.w	r3, r2, r3
 80028b2:	43db      	mvns	r3, r3
 80028b4:	69ba      	ldr	r2, [r7, #24]
 80028b6:	4013      	ands	r3, r2
 80028b8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	68da      	ldr	r2, [r3, #12]
 80028be:	69fb      	ldr	r3, [r7, #28]
 80028c0:	005b      	lsls	r3, r3, #1
 80028c2:	fa02 f303 	lsl.w	r3, r2, r3
 80028c6:	69ba      	ldr	r2, [r7, #24]
 80028c8:	4313      	orrs	r3, r2
 80028ca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	69ba      	ldr	r2, [r7, #24]
 80028d0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	685b      	ldr	r3, [r3, #4]
 80028d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80028d8:	2201      	movs	r2, #1
 80028da:	69fb      	ldr	r3, [r7, #28]
 80028dc:	fa02 f303 	lsl.w	r3, r2, r3
 80028e0:	43db      	mvns	r3, r3
 80028e2:	69ba      	ldr	r2, [r7, #24]
 80028e4:	4013      	ands	r3, r2
 80028e6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	685b      	ldr	r3, [r3, #4]
 80028ec:	091b      	lsrs	r3, r3, #4
 80028ee:	f003 0201 	and.w	r2, r3, #1
 80028f2:	69fb      	ldr	r3, [r7, #28]
 80028f4:	fa02 f303 	lsl.w	r3, r2, r3
 80028f8:	69ba      	ldr	r2, [r7, #24]
 80028fa:	4313      	orrs	r3, r2
 80028fc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	69ba      	ldr	r2, [r7, #24]
 8002902:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	685b      	ldr	r3, [r3, #4]
 8002908:	f003 0303 	and.w	r3, r3, #3
 800290c:	2b03      	cmp	r3, #3
 800290e:	d017      	beq.n	8002940 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	68db      	ldr	r3, [r3, #12]
 8002914:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002916:	69fb      	ldr	r3, [r7, #28]
 8002918:	005b      	lsls	r3, r3, #1
 800291a:	2203      	movs	r2, #3
 800291c:	fa02 f303 	lsl.w	r3, r2, r3
 8002920:	43db      	mvns	r3, r3
 8002922:	69ba      	ldr	r2, [r7, #24]
 8002924:	4013      	ands	r3, r2
 8002926:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	689a      	ldr	r2, [r3, #8]
 800292c:	69fb      	ldr	r3, [r7, #28]
 800292e:	005b      	lsls	r3, r3, #1
 8002930:	fa02 f303 	lsl.w	r3, r2, r3
 8002934:	69ba      	ldr	r2, [r7, #24]
 8002936:	4313      	orrs	r3, r2
 8002938:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	69ba      	ldr	r2, [r7, #24]
 800293e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	685b      	ldr	r3, [r3, #4]
 8002944:	f003 0303 	and.w	r3, r3, #3
 8002948:	2b02      	cmp	r3, #2
 800294a:	d123      	bne.n	8002994 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800294c:	69fb      	ldr	r3, [r7, #28]
 800294e:	08da      	lsrs	r2, r3, #3
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	3208      	adds	r2, #8
 8002954:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002958:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800295a:	69fb      	ldr	r3, [r7, #28]
 800295c:	f003 0307 	and.w	r3, r3, #7
 8002960:	009b      	lsls	r3, r3, #2
 8002962:	220f      	movs	r2, #15
 8002964:	fa02 f303 	lsl.w	r3, r2, r3
 8002968:	43db      	mvns	r3, r3
 800296a:	69ba      	ldr	r2, [r7, #24]
 800296c:	4013      	ands	r3, r2
 800296e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	691a      	ldr	r2, [r3, #16]
 8002974:	69fb      	ldr	r3, [r7, #28]
 8002976:	f003 0307 	and.w	r3, r3, #7
 800297a:	009b      	lsls	r3, r3, #2
 800297c:	fa02 f303 	lsl.w	r3, r2, r3
 8002980:	69ba      	ldr	r2, [r7, #24]
 8002982:	4313      	orrs	r3, r2
 8002984:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002986:	69fb      	ldr	r3, [r7, #28]
 8002988:	08da      	lsrs	r2, r3, #3
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	3208      	adds	r2, #8
 800298e:	69b9      	ldr	r1, [r7, #24]
 8002990:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800299a:	69fb      	ldr	r3, [r7, #28]
 800299c:	005b      	lsls	r3, r3, #1
 800299e:	2203      	movs	r2, #3
 80029a0:	fa02 f303 	lsl.w	r3, r2, r3
 80029a4:	43db      	mvns	r3, r3
 80029a6:	69ba      	ldr	r2, [r7, #24]
 80029a8:	4013      	ands	r3, r2
 80029aa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	685b      	ldr	r3, [r3, #4]
 80029b0:	f003 0203 	and.w	r2, r3, #3
 80029b4:	69fb      	ldr	r3, [r7, #28]
 80029b6:	005b      	lsls	r3, r3, #1
 80029b8:	fa02 f303 	lsl.w	r3, r2, r3
 80029bc:	69ba      	ldr	r2, [r7, #24]
 80029be:	4313      	orrs	r3, r2
 80029c0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	69ba      	ldr	r2, [r7, #24]
 80029c6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	685b      	ldr	r3, [r3, #4]
 80029cc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	f000 80a2 	beq.w	8002b1a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029d6:	2300      	movs	r3, #0
 80029d8:	60fb      	str	r3, [r7, #12]
 80029da:	4b57      	ldr	r3, [pc, #348]	; (8002b38 <HAL_GPIO_Init+0x2e8>)
 80029dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029de:	4a56      	ldr	r2, [pc, #344]	; (8002b38 <HAL_GPIO_Init+0x2e8>)
 80029e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80029e4:	6453      	str	r3, [r2, #68]	; 0x44
 80029e6:	4b54      	ldr	r3, [pc, #336]	; (8002b38 <HAL_GPIO_Init+0x2e8>)
 80029e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029ee:	60fb      	str	r3, [r7, #12]
 80029f0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80029f2:	4a52      	ldr	r2, [pc, #328]	; (8002b3c <HAL_GPIO_Init+0x2ec>)
 80029f4:	69fb      	ldr	r3, [r7, #28]
 80029f6:	089b      	lsrs	r3, r3, #2
 80029f8:	3302      	adds	r3, #2
 80029fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002a00:	69fb      	ldr	r3, [r7, #28]
 8002a02:	f003 0303 	and.w	r3, r3, #3
 8002a06:	009b      	lsls	r3, r3, #2
 8002a08:	220f      	movs	r2, #15
 8002a0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a0e:	43db      	mvns	r3, r3
 8002a10:	69ba      	ldr	r2, [r7, #24]
 8002a12:	4013      	ands	r3, r2
 8002a14:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	4a49      	ldr	r2, [pc, #292]	; (8002b40 <HAL_GPIO_Init+0x2f0>)
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	d019      	beq.n	8002a52 <HAL_GPIO_Init+0x202>
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	4a48      	ldr	r2, [pc, #288]	; (8002b44 <HAL_GPIO_Init+0x2f4>)
 8002a22:	4293      	cmp	r3, r2
 8002a24:	d013      	beq.n	8002a4e <HAL_GPIO_Init+0x1fe>
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	4a47      	ldr	r2, [pc, #284]	; (8002b48 <HAL_GPIO_Init+0x2f8>)
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d00d      	beq.n	8002a4a <HAL_GPIO_Init+0x1fa>
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	4a46      	ldr	r2, [pc, #280]	; (8002b4c <HAL_GPIO_Init+0x2fc>)
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d007      	beq.n	8002a46 <HAL_GPIO_Init+0x1f6>
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	4a45      	ldr	r2, [pc, #276]	; (8002b50 <HAL_GPIO_Init+0x300>)
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d101      	bne.n	8002a42 <HAL_GPIO_Init+0x1f2>
 8002a3e:	2304      	movs	r3, #4
 8002a40:	e008      	b.n	8002a54 <HAL_GPIO_Init+0x204>
 8002a42:	2307      	movs	r3, #7
 8002a44:	e006      	b.n	8002a54 <HAL_GPIO_Init+0x204>
 8002a46:	2303      	movs	r3, #3
 8002a48:	e004      	b.n	8002a54 <HAL_GPIO_Init+0x204>
 8002a4a:	2302      	movs	r3, #2
 8002a4c:	e002      	b.n	8002a54 <HAL_GPIO_Init+0x204>
 8002a4e:	2301      	movs	r3, #1
 8002a50:	e000      	b.n	8002a54 <HAL_GPIO_Init+0x204>
 8002a52:	2300      	movs	r3, #0
 8002a54:	69fa      	ldr	r2, [r7, #28]
 8002a56:	f002 0203 	and.w	r2, r2, #3
 8002a5a:	0092      	lsls	r2, r2, #2
 8002a5c:	4093      	lsls	r3, r2
 8002a5e:	69ba      	ldr	r2, [r7, #24]
 8002a60:	4313      	orrs	r3, r2
 8002a62:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002a64:	4935      	ldr	r1, [pc, #212]	; (8002b3c <HAL_GPIO_Init+0x2ec>)
 8002a66:	69fb      	ldr	r3, [r7, #28]
 8002a68:	089b      	lsrs	r3, r3, #2
 8002a6a:	3302      	adds	r3, #2
 8002a6c:	69ba      	ldr	r2, [r7, #24]
 8002a6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002a72:	4b38      	ldr	r3, [pc, #224]	; (8002b54 <HAL_GPIO_Init+0x304>)
 8002a74:	689b      	ldr	r3, [r3, #8]
 8002a76:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a78:	693b      	ldr	r3, [r7, #16]
 8002a7a:	43db      	mvns	r3, r3
 8002a7c:	69ba      	ldr	r2, [r7, #24]
 8002a7e:	4013      	ands	r3, r2
 8002a80:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	685b      	ldr	r3, [r3, #4]
 8002a86:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d003      	beq.n	8002a96 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002a8e:	69ba      	ldr	r2, [r7, #24]
 8002a90:	693b      	ldr	r3, [r7, #16]
 8002a92:	4313      	orrs	r3, r2
 8002a94:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002a96:	4a2f      	ldr	r2, [pc, #188]	; (8002b54 <HAL_GPIO_Init+0x304>)
 8002a98:	69bb      	ldr	r3, [r7, #24]
 8002a9a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002a9c:	4b2d      	ldr	r3, [pc, #180]	; (8002b54 <HAL_GPIO_Init+0x304>)
 8002a9e:	68db      	ldr	r3, [r3, #12]
 8002aa0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002aa2:	693b      	ldr	r3, [r7, #16]
 8002aa4:	43db      	mvns	r3, r3
 8002aa6:	69ba      	ldr	r2, [r7, #24]
 8002aa8:	4013      	ands	r3, r2
 8002aaa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	685b      	ldr	r3, [r3, #4]
 8002ab0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d003      	beq.n	8002ac0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002ab8:	69ba      	ldr	r2, [r7, #24]
 8002aba:	693b      	ldr	r3, [r7, #16]
 8002abc:	4313      	orrs	r3, r2
 8002abe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002ac0:	4a24      	ldr	r2, [pc, #144]	; (8002b54 <HAL_GPIO_Init+0x304>)
 8002ac2:	69bb      	ldr	r3, [r7, #24]
 8002ac4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002ac6:	4b23      	ldr	r3, [pc, #140]	; (8002b54 <HAL_GPIO_Init+0x304>)
 8002ac8:	685b      	ldr	r3, [r3, #4]
 8002aca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002acc:	693b      	ldr	r3, [r7, #16]
 8002ace:	43db      	mvns	r3, r3
 8002ad0:	69ba      	ldr	r2, [r7, #24]
 8002ad2:	4013      	ands	r3, r2
 8002ad4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	685b      	ldr	r3, [r3, #4]
 8002ada:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d003      	beq.n	8002aea <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002ae2:	69ba      	ldr	r2, [r7, #24]
 8002ae4:	693b      	ldr	r3, [r7, #16]
 8002ae6:	4313      	orrs	r3, r2
 8002ae8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002aea:	4a1a      	ldr	r2, [pc, #104]	; (8002b54 <HAL_GPIO_Init+0x304>)
 8002aec:	69bb      	ldr	r3, [r7, #24]
 8002aee:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002af0:	4b18      	ldr	r3, [pc, #96]	; (8002b54 <HAL_GPIO_Init+0x304>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002af6:	693b      	ldr	r3, [r7, #16]
 8002af8:	43db      	mvns	r3, r3
 8002afa:	69ba      	ldr	r2, [r7, #24]
 8002afc:	4013      	ands	r3, r2
 8002afe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	685b      	ldr	r3, [r3, #4]
 8002b04:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d003      	beq.n	8002b14 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002b0c:	69ba      	ldr	r2, [r7, #24]
 8002b0e:	693b      	ldr	r3, [r7, #16]
 8002b10:	4313      	orrs	r3, r2
 8002b12:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002b14:	4a0f      	ldr	r2, [pc, #60]	; (8002b54 <HAL_GPIO_Init+0x304>)
 8002b16:	69bb      	ldr	r3, [r7, #24]
 8002b18:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b1a:	69fb      	ldr	r3, [r7, #28]
 8002b1c:	3301      	adds	r3, #1
 8002b1e:	61fb      	str	r3, [r7, #28]
 8002b20:	69fb      	ldr	r3, [r7, #28]
 8002b22:	2b0f      	cmp	r3, #15
 8002b24:	f67f aea2 	bls.w	800286c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002b28:	bf00      	nop
 8002b2a:	bf00      	nop
 8002b2c:	3724      	adds	r7, #36	; 0x24
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b34:	4770      	bx	lr
 8002b36:	bf00      	nop
 8002b38:	40023800 	.word	0x40023800
 8002b3c:	40013800 	.word	0x40013800
 8002b40:	40020000 	.word	0x40020000
 8002b44:	40020400 	.word	0x40020400
 8002b48:	40020800 	.word	0x40020800
 8002b4c:	40020c00 	.word	0x40020c00
 8002b50:	40021000 	.word	0x40021000
 8002b54:	40013c00 	.word	0x40013c00

08002b58 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002b58:	b480      	push	{r7}
 8002b5a:	b085      	sub	sp, #20
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
 8002b60:	460b      	mov	r3, r1
 8002b62:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	691a      	ldr	r2, [r3, #16]
 8002b68:	887b      	ldrh	r3, [r7, #2]
 8002b6a:	4013      	ands	r3, r2
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d002      	beq.n	8002b76 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002b70:	2301      	movs	r3, #1
 8002b72:	73fb      	strb	r3, [r7, #15]
 8002b74:	e001      	b.n	8002b7a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002b76:	2300      	movs	r3, #0
 8002b78:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002b7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	3714      	adds	r7, #20
 8002b80:	46bd      	mov	sp, r7
 8002b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b86:	4770      	bx	lr

08002b88 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b88:	b480      	push	{r7}
 8002b8a:	b083      	sub	sp, #12
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
 8002b90:	460b      	mov	r3, r1
 8002b92:	807b      	strh	r3, [r7, #2]
 8002b94:	4613      	mov	r3, r2
 8002b96:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002b98:	787b      	ldrb	r3, [r7, #1]
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d003      	beq.n	8002ba6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b9e:	887a      	ldrh	r2, [r7, #2]
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002ba4:	e003      	b.n	8002bae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002ba6:	887b      	ldrh	r3, [r7, #2]
 8002ba8:	041a      	lsls	r2, r3, #16
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	619a      	str	r2, [r3, #24]
}
 8002bae:	bf00      	nop
 8002bb0:	370c      	adds	r7, #12
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb8:	4770      	bx	lr
	...

08002bbc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b082      	sub	sp, #8
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	4603      	mov	r3, r0
 8002bc4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002bc6:	4b08      	ldr	r3, [pc, #32]	; (8002be8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002bc8:	695a      	ldr	r2, [r3, #20]
 8002bca:	88fb      	ldrh	r3, [r7, #6]
 8002bcc:	4013      	ands	r3, r2
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d006      	beq.n	8002be0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002bd2:	4a05      	ldr	r2, [pc, #20]	; (8002be8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002bd4:	88fb      	ldrh	r3, [r7, #6]
 8002bd6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002bd8:	88fb      	ldrh	r3, [r7, #6]
 8002bda:	4618      	mov	r0, r3
 8002bdc:	f7fe f9a6 	bl	8000f2c <HAL_GPIO_EXTI_Callback>
  }
}
 8002be0:	bf00      	nop
 8002be2:	3708      	adds	r7, #8
 8002be4:	46bd      	mov	sp, r7
 8002be6:	bd80      	pop	{r7, pc}
 8002be8:	40013c00 	.word	0x40013c00

08002bec <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002bec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002bee:	b08f      	sub	sp, #60	; 0x3c
 8002bf0:	af0a      	add	r7, sp, #40	; 0x28
 8002bf2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d101      	bne.n	8002bfe <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	e10f      	b.n	8002e1e <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002c0a:	b2db      	uxtb	r3, r3
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d106      	bne.n	8002c1e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	2200      	movs	r2, #0
 8002c14:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002c18:	6878      	ldr	r0, [r7, #4]
 8002c1a:	f009 fad3 	bl	800c1c4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	2203      	movs	r2, #3
 8002c22:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002c26:	68bb      	ldr	r3, [r7, #8]
 8002c28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d102      	bne.n	8002c38 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	2200      	movs	r2, #0
 8002c36:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	f004 fa2c 	bl	800709a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	603b      	str	r3, [r7, #0]
 8002c48:	687e      	ldr	r6, [r7, #4]
 8002c4a:	466d      	mov	r5, sp
 8002c4c:	f106 0410 	add.w	r4, r6, #16
 8002c50:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002c52:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002c54:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002c56:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002c58:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002c5c:	e885 0003 	stmia.w	r5, {r0, r1}
 8002c60:	1d33      	adds	r3, r6, #4
 8002c62:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002c64:	6838      	ldr	r0, [r7, #0]
 8002c66:	f004 f903 	bl	8006e70 <USB_CoreInit>
 8002c6a:	4603      	mov	r3, r0
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d005      	beq.n	8002c7c <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2202      	movs	r2, #2
 8002c74:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002c78:	2301      	movs	r3, #1
 8002c7a:	e0d0      	b.n	8002e1e <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	2100      	movs	r1, #0
 8002c82:	4618      	mov	r0, r3
 8002c84:	f004 fa1a 	bl	80070bc <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c88:	2300      	movs	r3, #0
 8002c8a:	73fb      	strb	r3, [r7, #15]
 8002c8c:	e04a      	b.n	8002d24 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002c8e:	7bfa      	ldrb	r2, [r7, #15]
 8002c90:	6879      	ldr	r1, [r7, #4]
 8002c92:	4613      	mov	r3, r2
 8002c94:	00db      	lsls	r3, r3, #3
 8002c96:	4413      	add	r3, r2
 8002c98:	009b      	lsls	r3, r3, #2
 8002c9a:	440b      	add	r3, r1
 8002c9c:	333d      	adds	r3, #61	; 0x3d
 8002c9e:	2201      	movs	r2, #1
 8002ca0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002ca2:	7bfa      	ldrb	r2, [r7, #15]
 8002ca4:	6879      	ldr	r1, [r7, #4]
 8002ca6:	4613      	mov	r3, r2
 8002ca8:	00db      	lsls	r3, r3, #3
 8002caa:	4413      	add	r3, r2
 8002cac:	009b      	lsls	r3, r3, #2
 8002cae:	440b      	add	r3, r1
 8002cb0:	333c      	adds	r3, #60	; 0x3c
 8002cb2:	7bfa      	ldrb	r2, [r7, #15]
 8002cb4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002cb6:	7bfa      	ldrb	r2, [r7, #15]
 8002cb8:	7bfb      	ldrb	r3, [r7, #15]
 8002cba:	b298      	uxth	r0, r3
 8002cbc:	6879      	ldr	r1, [r7, #4]
 8002cbe:	4613      	mov	r3, r2
 8002cc0:	00db      	lsls	r3, r3, #3
 8002cc2:	4413      	add	r3, r2
 8002cc4:	009b      	lsls	r3, r3, #2
 8002cc6:	440b      	add	r3, r1
 8002cc8:	3344      	adds	r3, #68	; 0x44
 8002cca:	4602      	mov	r2, r0
 8002ccc:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002cce:	7bfa      	ldrb	r2, [r7, #15]
 8002cd0:	6879      	ldr	r1, [r7, #4]
 8002cd2:	4613      	mov	r3, r2
 8002cd4:	00db      	lsls	r3, r3, #3
 8002cd6:	4413      	add	r3, r2
 8002cd8:	009b      	lsls	r3, r3, #2
 8002cda:	440b      	add	r3, r1
 8002cdc:	3340      	adds	r3, #64	; 0x40
 8002cde:	2200      	movs	r2, #0
 8002ce0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002ce2:	7bfa      	ldrb	r2, [r7, #15]
 8002ce4:	6879      	ldr	r1, [r7, #4]
 8002ce6:	4613      	mov	r3, r2
 8002ce8:	00db      	lsls	r3, r3, #3
 8002cea:	4413      	add	r3, r2
 8002cec:	009b      	lsls	r3, r3, #2
 8002cee:	440b      	add	r3, r1
 8002cf0:	3348      	adds	r3, #72	; 0x48
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002cf6:	7bfa      	ldrb	r2, [r7, #15]
 8002cf8:	6879      	ldr	r1, [r7, #4]
 8002cfa:	4613      	mov	r3, r2
 8002cfc:	00db      	lsls	r3, r3, #3
 8002cfe:	4413      	add	r3, r2
 8002d00:	009b      	lsls	r3, r3, #2
 8002d02:	440b      	add	r3, r1
 8002d04:	334c      	adds	r3, #76	; 0x4c
 8002d06:	2200      	movs	r2, #0
 8002d08:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002d0a:	7bfa      	ldrb	r2, [r7, #15]
 8002d0c:	6879      	ldr	r1, [r7, #4]
 8002d0e:	4613      	mov	r3, r2
 8002d10:	00db      	lsls	r3, r3, #3
 8002d12:	4413      	add	r3, r2
 8002d14:	009b      	lsls	r3, r3, #2
 8002d16:	440b      	add	r3, r1
 8002d18:	3354      	adds	r3, #84	; 0x54
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d1e:	7bfb      	ldrb	r3, [r7, #15]
 8002d20:	3301      	adds	r3, #1
 8002d22:	73fb      	strb	r3, [r7, #15]
 8002d24:	7bfa      	ldrb	r2, [r7, #15]
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	685b      	ldr	r3, [r3, #4]
 8002d2a:	429a      	cmp	r2, r3
 8002d2c:	d3af      	bcc.n	8002c8e <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d2e:	2300      	movs	r3, #0
 8002d30:	73fb      	strb	r3, [r7, #15]
 8002d32:	e044      	b.n	8002dbe <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002d34:	7bfa      	ldrb	r2, [r7, #15]
 8002d36:	6879      	ldr	r1, [r7, #4]
 8002d38:	4613      	mov	r3, r2
 8002d3a:	00db      	lsls	r3, r3, #3
 8002d3c:	4413      	add	r3, r2
 8002d3e:	009b      	lsls	r3, r3, #2
 8002d40:	440b      	add	r3, r1
 8002d42:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002d46:	2200      	movs	r2, #0
 8002d48:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002d4a:	7bfa      	ldrb	r2, [r7, #15]
 8002d4c:	6879      	ldr	r1, [r7, #4]
 8002d4e:	4613      	mov	r3, r2
 8002d50:	00db      	lsls	r3, r3, #3
 8002d52:	4413      	add	r3, r2
 8002d54:	009b      	lsls	r3, r3, #2
 8002d56:	440b      	add	r3, r1
 8002d58:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002d5c:	7bfa      	ldrb	r2, [r7, #15]
 8002d5e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002d60:	7bfa      	ldrb	r2, [r7, #15]
 8002d62:	6879      	ldr	r1, [r7, #4]
 8002d64:	4613      	mov	r3, r2
 8002d66:	00db      	lsls	r3, r3, #3
 8002d68:	4413      	add	r3, r2
 8002d6a:	009b      	lsls	r3, r3, #2
 8002d6c:	440b      	add	r3, r1
 8002d6e:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002d72:	2200      	movs	r2, #0
 8002d74:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002d76:	7bfa      	ldrb	r2, [r7, #15]
 8002d78:	6879      	ldr	r1, [r7, #4]
 8002d7a:	4613      	mov	r3, r2
 8002d7c:	00db      	lsls	r3, r3, #3
 8002d7e:	4413      	add	r3, r2
 8002d80:	009b      	lsls	r3, r3, #2
 8002d82:	440b      	add	r3, r1
 8002d84:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002d88:	2200      	movs	r2, #0
 8002d8a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002d8c:	7bfa      	ldrb	r2, [r7, #15]
 8002d8e:	6879      	ldr	r1, [r7, #4]
 8002d90:	4613      	mov	r3, r2
 8002d92:	00db      	lsls	r3, r3, #3
 8002d94:	4413      	add	r3, r2
 8002d96:	009b      	lsls	r3, r3, #2
 8002d98:	440b      	add	r3, r1
 8002d9a:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002d9e:	2200      	movs	r2, #0
 8002da0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002da2:	7bfa      	ldrb	r2, [r7, #15]
 8002da4:	6879      	ldr	r1, [r7, #4]
 8002da6:	4613      	mov	r3, r2
 8002da8:	00db      	lsls	r3, r3, #3
 8002daa:	4413      	add	r3, r2
 8002dac:	009b      	lsls	r3, r3, #2
 8002dae:	440b      	add	r3, r1
 8002db0:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002db4:	2200      	movs	r2, #0
 8002db6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002db8:	7bfb      	ldrb	r3, [r7, #15]
 8002dba:	3301      	adds	r3, #1
 8002dbc:	73fb      	strb	r3, [r7, #15]
 8002dbe:	7bfa      	ldrb	r2, [r7, #15]
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	685b      	ldr	r3, [r3, #4]
 8002dc4:	429a      	cmp	r2, r3
 8002dc6:	d3b5      	bcc.n	8002d34 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	603b      	str	r3, [r7, #0]
 8002dce:	687e      	ldr	r6, [r7, #4]
 8002dd0:	466d      	mov	r5, sp
 8002dd2:	f106 0410 	add.w	r4, r6, #16
 8002dd6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002dd8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002dda:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002ddc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002dde:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002de2:	e885 0003 	stmia.w	r5, {r0, r1}
 8002de6:	1d33      	adds	r3, r6, #4
 8002de8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002dea:	6838      	ldr	r0, [r7, #0]
 8002dec:	f004 f9b2 	bl	8007154 <USB_DevInit>
 8002df0:	4603      	mov	r3, r0
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d005      	beq.n	8002e02 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	2202      	movs	r2, #2
 8002dfa:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002dfe:	2301      	movs	r3, #1
 8002e00:	e00d      	b.n	8002e1e <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	2200      	movs	r2, #0
 8002e06:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	2201      	movs	r2, #1
 8002e0e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	4618      	mov	r0, r3
 8002e18:	f005 fb01 	bl	800841e <USB_DevDisconnect>

  return HAL_OK;
 8002e1c:	2300      	movs	r3, #0
}
 8002e1e:	4618      	mov	r0, r3
 8002e20:	3714      	adds	r7, #20
 8002e22:	46bd      	mov	sp, r7
 8002e24:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002e26 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002e26:	b580      	push	{r7, lr}
 8002e28:	b084      	sub	sp, #16
 8002e2a:	af00      	add	r7, sp, #0
 8002e2c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002e3a:	2b01      	cmp	r3, #1
 8002e3c:	d101      	bne.n	8002e42 <HAL_PCD_Start+0x1c>
 8002e3e:	2302      	movs	r3, #2
 8002e40:	e020      	b.n	8002e84 <HAL_PCD_Start+0x5e>
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	2201      	movs	r2, #1
 8002e46:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e4e:	2b01      	cmp	r3, #1
 8002e50:	d109      	bne.n	8002e66 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002e56:	2b01      	cmp	r3, #1
 8002e58:	d005      	beq.n	8002e66 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e5e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	f004 f904 	bl	8007078 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	4618      	mov	r0, r3
 8002e76:	f005 fab1 	bl	80083dc <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002e82:	2300      	movs	r3, #0
}
 8002e84:	4618      	mov	r0, r3
 8002e86:	3710      	adds	r7, #16
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	bd80      	pop	{r7, pc}

08002e8c <HAL_PCD_Stop>:
  * @brief  Stop the USB device.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Stop(PCD_HandleTypeDef *hpcd)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b084      	sub	sp, #16
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002ea0:	2b01      	cmp	r3, #1
 8002ea2:	d101      	bne.n	8002ea8 <HAL_PCD_Stop+0x1c>
 8002ea4:	2302      	movs	r3, #2
 8002ea6:	e026      	b.n	8002ef6 <HAL_PCD_Stop+0x6a>
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2201      	movs	r2, #1
 8002eac:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  __HAL_PCD_DISABLE(hpcd);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	f004 f8f0 	bl	800709a <USB_DisableGlobalInt>
  (void)USB_DevDisconnect(hpcd->Instance);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	f005 faad 	bl	800841e <USB_DevDisconnect>

  (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	2110      	movs	r1, #16
 8002eca:	4618      	mov	r0, r3
 8002ecc:	f004 faa6 	bl	800741c <USB_FlushTxFifo>

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ed4:	2b01      	cmp	r3, #1
 8002ed6:	d109      	bne.n	8002eec <HAL_PCD_Stop+0x60>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002edc:	2b01      	cmp	r3, #1
 8002ede:	d005      	beq.n	8002eec <HAL_PCD_Stop+0x60>
  {
    /* Disable USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ee4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_UNLOCK(hpcd);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2200      	movs	r2, #0
 8002ef0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002ef4:	2300      	movs	r3, #0
}
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	3710      	adds	r7, #16
 8002efa:	46bd      	mov	sp, r7
 8002efc:	bd80      	pop	{r7, pc}

08002efe <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002efe:	b590      	push	{r4, r7, lr}
 8002f00:	b08d      	sub	sp, #52	; 0x34
 8002f02:	af00      	add	r7, sp, #0
 8002f04:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002f0c:	6a3b      	ldr	r3, [r7, #32]
 8002f0e:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4618      	mov	r0, r3
 8002f16:	f005 fb36 	bl	8008586 <USB_GetMode>
 8002f1a:	4603      	mov	r3, r0
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	f040 848a 	bne.w	8003836 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	4618      	mov	r0, r3
 8002f28:	f005 fa9a 	bl	8008460 <USB_ReadInterrupts>
 8002f2c:	4603      	mov	r3, r0
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	f000 8480 	beq.w	8003834 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002f34:	69fb      	ldr	r3, [r7, #28]
 8002f36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f3a:	689b      	ldr	r3, [r3, #8]
 8002f3c:	0a1b      	lsrs	r3, r3, #8
 8002f3e:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	f005 fa87 	bl	8008460 <USB_ReadInterrupts>
 8002f52:	4603      	mov	r3, r0
 8002f54:	f003 0302 	and.w	r3, r3, #2
 8002f58:	2b02      	cmp	r3, #2
 8002f5a:	d107      	bne.n	8002f6c <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	695a      	ldr	r2, [r3, #20]
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f002 0202 	and.w	r2, r2, #2
 8002f6a:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	4618      	mov	r0, r3
 8002f72:	f005 fa75 	bl	8008460 <USB_ReadInterrupts>
 8002f76:	4603      	mov	r3, r0
 8002f78:	f003 0310 	and.w	r3, r3, #16
 8002f7c:	2b10      	cmp	r3, #16
 8002f7e:	d161      	bne.n	8003044 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	699a      	ldr	r2, [r3, #24]
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f022 0210 	bic.w	r2, r2, #16
 8002f8e:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002f90:	6a3b      	ldr	r3, [r7, #32]
 8002f92:	6a1b      	ldr	r3, [r3, #32]
 8002f94:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002f96:	69bb      	ldr	r3, [r7, #24]
 8002f98:	f003 020f 	and.w	r2, r3, #15
 8002f9c:	4613      	mov	r3, r2
 8002f9e:	00db      	lsls	r3, r3, #3
 8002fa0:	4413      	add	r3, r2
 8002fa2:	009b      	lsls	r3, r3, #2
 8002fa4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002fa8:	687a      	ldr	r2, [r7, #4]
 8002faa:	4413      	add	r3, r2
 8002fac:	3304      	adds	r3, #4
 8002fae:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002fb0:	69bb      	ldr	r3, [r7, #24]
 8002fb2:	0c5b      	lsrs	r3, r3, #17
 8002fb4:	f003 030f 	and.w	r3, r3, #15
 8002fb8:	2b02      	cmp	r3, #2
 8002fba:	d124      	bne.n	8003006 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002fbc:	69ba      	ldr	r2, [r7, #24]
 8002fbe:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002fc2:	4013      	ands	r3, r2
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d035      	beq.n	8003034 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002fc8:	697b      	ldr	r3, [r7, #20]
 8002fca:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002fcc:	69bb      	ldr	r3, [r7, #24]
 8002fce:	091b      	lsrs	r3, r3, #4
 8002fd0:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002fd2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002fd6:	b29b      	uxth	r3, r3
 8002fd8:	461a      	mov	r2, r3
 8002fda:	6a38      	ldr	r0, [r7, #32]
 8002fdc:	f005 f8ac 	bl	8008138 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002fe0:	697b      	ldr	r3, [r7, #20]
 8002fe2:	691a      	ldr	r2, [r3, #16]
 8002fe4:	69bb      	ldr	r3, [r7, #24]
 8002fe6:	091b      	lsrs	r3, r3, #4
 8002fe8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002fec:	441a      	add	r2, r3
 8002fee:	697b      	ldr	r3, [r7, #20]
 8002ff0:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002ff2:	697b      	ldr	r3, [r7, #20]
 8002ff4:	6a1a      	ldr	r2, [r3, #32]
 8002ff6:	69bb      	ldr	r3, [r7, #24]
 8002ff8:	091b      	lsrs	r3, r3, #4
 8002ffa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002ffe:	441a      	add	r2, r3
 8003000:	697b      	ldr	r3, [r7, #20]
 8003002:	621a      	str	r2, [r3, #32]
 8003004:	e016      	b.n	8003034 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8003006:	69bb      	ldr	r3, [r7, #24]
 8003008:	0c5b      	lsrs	r3, r3, #17
 800300a:	f003 030f 	and.w	r3, r3, #15
 800300e:	2b06      	cmp	r3, #6
 8003010:	d110      	bne.n	8003034 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003018:	2208      	movs	r2, #8
 800301a:	4619      	mov	r1, r3
 800301c:	6a38      	ldr	r0, [r7, #32]
 800301e:	f005 f88b 	bl	8008138 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003022:	697b      	ldr	r3, [r7, #20]
 8003024:	6a1a      	ldr	r2, [r3, #32]
 8003026:	69bb      	ldr	r3, [r7, #24]
 8003028:	091b      	lsrs	r3, r3, #4
 800302a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800302e:	441a      	add	r2, r3
 8003030:	697b      	ldr	r3, [r7, #20]
 8003032:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	699a      	ldr	r2, [r3, #24]
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f042 0210 	orr.w	r2, r2, #16
 8003042:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	4618      	mov	r0, r3
 800304a:	f005 fa09 	bl	8008460 <USB_ReadInterrupts>
 800304e:	4603      	mov	r3, r0
 8003050:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003054:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003058:	f040 80a7 	bne.w	80031aa <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800305c:	2300      	movs	r3, #0
 800305e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	4618      	mov	r0, r3
 8003066:	f005 fa0e 	bl	8008486 <USB_ReadDevAllOutEpInterrupt>
 800306a:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800306c:	e099      	b.n	80031a2 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800306e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003070:	f003 0301 	and.w	r3, r3, #1
 8003074:	2b00      	cmp	r3, #0
 8003076:	f000 808e 	beq.w	8003196 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003080:	b2d2      	uxtb	r2, r2
 8003082:	4611      	mov	r1, r2
 8003084:	4618      	mov	r0, r3
 8003086:	f005 fa32 	bl	80084ee <USB_ReadDevOutEPInterrupt>
 800308a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800308c:	693b      	ldr	r3, [r7, #16]
 800308e:	f003 0301 	and.w	r3, r3, #1
 8003092:	2b00      	cmp	r3, #0
 8003094:	d00c      	beq.n	80030b0 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003098:	015a      	lsls	r2, r3, #5
 800309a:	69fb      	ldr	r3, [r7, #28]
 800309c:	4413      	add	r3, r2
 800309e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030a2:	461a      	mov	r2, r3
 80030a4:	2301      	movs	r3, #1
 80030a6:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80030a8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80030aa:	6878      	ldr	r0, [r7, #4]
 80030ac:	f000 fef0 	bl	8003e90 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80030b0:	693b      	ldr	r3, [r7, #16]
 80030b2:	f003 0308 	and.w	r3, r3, #8
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d00c      	beq.n	80030d4 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80030ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030bc:	015a      	lsls	r2, r3, #5
 80030be:	69fb      	ldr	r3, [r7, #28]
 80030c0:	4413      	add	r3, r2
 80030c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030c6:	461a      	mov	r2, r3
 80030c8:	2308      	movs	r3, #8
 80030ca:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80030cc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80030ce:	6878      	ldr	r0, [r7, #4]
 80030d0:	f000 ffc6 	bl	8004060 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80030d4:	693b      	ldr	r3, [r7, #16]
 80030d6:	f003 0310 	and.w	r3, r3, #16
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d008      	beq.n	80030f0 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80030de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030e0:	015a      	lsls	r2, r3, #5
 80030e2:	69fb      	ldr	r3, [r7, #28]
 80030e4:	4413      	add	r3, r2
 80030e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030ea:	461a      	mov	r2, r3
 80030ec:	2310      	movs	r3, #16
 80030ee:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80030f0:	693b      	ldr	r3, [r7, #16]
 80030f2:	f003 0302 	and.w	r3, r3, #2
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d030      	beq.n	800315c <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80030fa:	6a3b      	ldr	r3, [r7, #32]
 80030fc:	695b      	ldr	r3, [r3, #20]
 80030fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003102:	2b80      	cmp	r3, #128	; 0x80
 8003104:	d109      	bne.n	800311a <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8003106:	69fb      	ldr	r3, [r7, #28]
 8003108:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800310c:	685b      	ldr	r3, [r3, #4]
 800310e:	69fa      	ldr	r2, [r7, #28]
 8003110:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003114:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003118:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800311a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800311c:	4613      	mov	r3, r2
 800311e:	00db      	lsls	r3, r3, #3
 8003120:	4413      	add	r3, r2
 8003122:	009b      	lsls	r3, r3, #2
 8003124:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003128:	687a      	ldr	r2, [r7, #4]
 800312a:	4413      	add	r3, r2
 800312c:	3304      	adds	r3, #4
 800312e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003130:	697b      	ldr	r3, [r7, #20]
 8003132:	78db      	ldrb	r3, [r3, #3]
 8003134:	2b01      	cmp	r3, #1
 8003136:	d108      	bne.n	800314a <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8003138:	697b      	ldr	r3, [r7, #20]
 800313a:	2200      	movs	r2, #0
 800313c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800313e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003140:	b2db      	uxtb	r3, r3
 8003142:	4619      	mov	r1, r3
 8003144:	6878      	ldr	r0, [r7, #4]
 8003146:	f009 f939 	bl	800c3bc <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800314a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800314c:	015a      	lsls	r2, r3, #5
 800314e:	69fb      	ldr	r3, [r7, #28]
 8003150:	4413      	add	r3, r2
 8003152:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003156:	461a      	mov	r2, r3
 8003158:	2302      	movs	r3, #2
 800315a:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800315c:	693b      	ldr	r3, [r7, #16]
 800315e:	f003 0320 	and.w	r3, r3, #32
 8003162:	2b00      	cmp	r3, #0
 8003164:	d008      	beq.n	8003178 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003168:	015a      	lsls	r2, r3, #5
 800316a:	69fb      	ldr	r3, [r7, #28]
 800316c:	4413      	add	r3, r2
 800316e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003172:	461a      	mov	r2, r3
 8003174:	2320      	movs	r3, #32
 8003176:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003178:	693b      	ldr	r3, [r7, #16]
 800317a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800317e:	2b00      	cmp	r3, #0
 8003180:	d009      	beq.n	8003196 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003184:	015a      	lsls	r2, r3, #5
 8003186:	69fb      	ldr	r3, [r7, #28]
 8003188:	4413      	add	r3, r2
 800318a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800318e:	461a      	mov	r2, r3
 8003190:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003194:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003198:	3301      	adds	r3, #1
 800319a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800319c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800319e:	085b      	lsrs	r3, r3, #1
 80031a0:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80031a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	f47f af62 	bne.w	800306e <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	4618      	mov	r0, r3
 80031b0:	f005 f956 	bl	8008460 <USB_ReadInterrupts>
 80031b4:	4603      	mov	r3, r0
 80031b6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80031ba:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80031be:	f040 80db 	bne.w	8003378 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	4618      	mov	r0, r3
 80031c8:	f005 f977 	bl	80084ba <USB_ReadDevAllInEpInterrupt>
 80031cc:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80031ce:	2300      	movs	r3, #0
 80031d0:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80031d2:	e0cd      	b.n	8003370 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80031d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031d6:	f003 0301 	and.w	r3, r3, #1
 80031da:	2b00      	cmp	r3, #0
 80031dc:	f000 80c2 	beq.w	8003364 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031e6:	b2d2      	uxtb	r2, r2
 80031e8:	4611      	mov	r1, r2
 80031ea:	4618      	mov	r0, r3
 80031ec:	f005 f99d 	bl	800852a <USB_ReadDevInEPInterrupt>
 80031f0:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80031f2:	693b      	ldr	r3, [r7, #16]
 80031f4:	f003 0301 	and.w	r3, r3, #1
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d057      	beq.n	80032ac <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80031fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031fe:	f003 030f 	and.w	r3, r3, #15
 8003202:	2201      	movs	r2, #1
 8003204:	fa02 f303 	lsl.w	r3, r2, r3
 8003208:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800320a:	69fb      	ldr	r3, [r7, #28]
 800320c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003210:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	43db      	mvns	r3, r3
 8003216:	69f9      	ldr	r1, [r7, #28]
 8003218:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800321c:	4013      	ands	r3, r2
 800321e:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003222:	015a      	lsls	r2, r3, #5
 8003224:	69fb      	ldr	r3, [r7, #28]
 8003226:	4413      	add	r3, r2
 8003228:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800322c:	461a      	mov	r2, r3
 800322e:	2301      	movs	r3, #1
 8003230:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	691b      	ldr	r3, [r3, #16]
 8003236:	2b01      	cmp	r3, #1
 8003238:	d132      	bne.n	80032a0 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800323a:	6879      	ldr	r1, [r7, #4]
 800323c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800323e:	4613      	mov	r3, r2
 8003240:	00db      	lsls	r3, r3, #3
 8003242:	4413      	add	r3, r2
 8003244:	009b      	lsls	r3, r3, #2
 8003246:	440b      	add	r3, r1
 8003248:	334c      	adds	r3, #76	; 0x4c
 800324a:	6819      	ldr	r1, [r3, #0]
 800324c:	6878      	ldr	r0, [r7, #4]
 800324e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003250:	4613      	mov	r3, r2
 8003252:	00db      	lsls	r3, r3, #3
 8003254:	4413      	add	r3, r2
 8003256:	009b      	lsls	r3, r3, #2
 8003258:	4403      	add	r3, r0
 800325a:	3348      	adds	r3, #72	; 0x48
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	4419      	add	r1, r3
 8003260:	6878      	ldr	r0, [r7, #4]
 8003262:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003264:	4613      	mov	r3, r2
 8003266:	00db      	lsls	r3, r3, #3
 8003268:	4413      	add	r3, r2
 800326a:	009b      	lsls	r3, r3, #2
 800326c:	4403      	add	r3, r0
 800326e:	334c      	adds	r3, #76	; 0x4c
 8003270:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003274:	2b00      	cmp	r3, #0
 8003276:	d113      	bne.n	80032a0 <HAL_PCD_IRQHandler+0x3a2>
 8003278:	6879      	ldr	r1, [r7, #4]
 800327a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800327c:	4613      	mov	r3, r2
 800327e:	00db      	lsls	r3, r3, #3
 8003280:	4413      	add	r3, r2
 8003282:	009b      	lsls	r3, r3, #2
 8003284:	440b      	add	r3, r1
 8003286:	3354      	adds	r3, #84	; 0x54
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	2b00      	cmp	r3, #0
 800328c:	d108      	bne.n	80032a0 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6818      	ldr	r0, [r3, #0]
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003298:	461a      	mov	r2, r3
 800329a:	2101      	movs	r1, #1
 800329c:	f005 f9a4 	bl	80085e8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80032a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032a2:	b2db      	uxtb	r3, r3
 80032a4:	4619      	mov	r1, r3
 80032a6:	6878      	ldr	r0, [r7, #4]
 80032a8:	f009 f80d 	bl	800c2c6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80032ac:	693b      	ldr	r3, [r7, #16]
 80032ae:	f003 0308 	and.w	r3, r3, #8
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d008      	beq.n	80032c8 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80032b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032b8:	015a      	lsls	r2, r3, #5
 80032ba:	69fb      	ldr	r3, [r7, #28]
 80032bc:	4413      	add	r3, r2
 80032be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80032c2:	461a      	mov	r2, r3
 80032c4:	2308      	movs	r3, #8
 80032c6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80032c8:	693b      	ldr	r3, [r7, #16]
 80032ca:	f003 0310 	and.w	r3, r3, #16
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d008      	beq.n	80032e4 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80032d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032d4:	015a      	lsls	r2, r3, #5
 80032d6:	69fb      	ldr	r3, [r7, #28]
 80032d8:	4413      	add	r3, r2
 80032da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80032de:	461a      	mov	r2, r3
 80032e0:	2310      	movs	r3, #16
 80032e2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80032e4:	693b      	ldr	r3, [r7, #16]
 80032e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d008      	beq.n	8003300 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80032ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032f0:	015a      	lsls	r2, r3, #5
 80032f2:	69fb      	ldr	r3, [r7, #28]
 80032f4:	4413      	add	r3, r2
 80032f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80032fa:	461a      	mov	r2, r3
 80032fc:	2340      	movs	r3, #64	; 0x40
 80032fe:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003300:	693b      	ldr	r3, [r7, #16]
 8003302:	f003 0302 	and.w	r3, r3, #2
 8003306:	2b00      	cmp	r3, #0
 8003308:	d023      	beq.n	8003352 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800330a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800330c:	6a38      	ldr	r0, [r7, #32]
 800330e:	f004 f885 	bl	800741c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8003312:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003314:	4613      	mov	r3, r2
 8003316:	00db      	lsls	r3, r3, #3
 8003318:	4413      	add	r3, r2
 800331a:	009b      	lsls	r3, r3, #2
 800331c:	3338      	adds	r3, #56	; 0x38
 800331e:	687a      	ldr	r2, [r7, #4]
 8003320:	4413      	add	r3, r2
 8003322:	3304      	adds	r3, #4
 8003324:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003326:	697b      	ldr	r3, [r7, #20]
 8003328:	78db      	ldrb	r3, [r3, #3]
 800332a:	2b01      	cmp	r3, #1
 800332c:	d108      	bne.n	8003340 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800332e:	697b      	ldr	r3, [r7, #20]
 8003330:	2200      	movs	r2, #0
 8003332:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003336:	b2db      	uxtb	r3, r3
 8003338:	4619      	mov	r1, r3
 800333a:	6878      	ldr	r0, [r7, #4]
 800333c:	f009 f850 	bl	800c3e0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003342:	015a      	lsls	r2, r3, #5
 8003344:	69fb      	ldr	r3, [r7, #28]
 8003346:	4413      	add	r3, r2
 8003348:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800334c:	461a      	mov	r2, r3
 800334e:	2302      	movs	r3, #2
 8003350:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003352:	693b      	ldr	r3, [r7, #16]
 8003354:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003358:	2b00      	cmp	r3, #0
 800335a:	d003      	beq.n	8003364 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800335c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800335e:	6878      	ldr	r0, [r7, #4]
 8003360:	f000 fd08 	bl	8003d74 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003366:	3301      	adds	r3, #1
 8003368:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800336a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800336c:	085b      	lsrs	r3, r3, #1
 800336e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003370:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003372:	2b00      	cmp	r3, #0
 8003374:	f47f af2e 	bne.w	80031d4 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	4618      	mov	r0, r3
 800337e:	f005 f86f 	bl	8008460 <USB_ReadInterrupts>
 8003382:	4603      	mov	r3, r0
 8003384:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003388:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800338c:	d122      	bne.n	80033d4 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800338e:	69fb      	ldr	r3, [r7, #28]
 8003390:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003394:	685b      	ldr	r3, [r3, #4]
 8003396:	69fa      	ldr	r2, [r7, #28]
 8003398:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800339c:	f023 0301 	bic.w	r3, r3, #1
 80033a0:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80033a8:	2b01      	cmp	r3, #1
 80033aa:	d108      	bne.n	80033be <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2200      	movs	r2, #0
 80033b0:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80033b4:	2100      	movs	r1, #0
 80033b6:	6878      	ldr	r0, [r7, #4]
 80033b8:	f000 fef0 	bl	800419c <HAL_PCDEx_LPM_Callback>
 80033bc:	e002      	b.n	80033c4 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80033be:	6878      	ldr	r0, [r7, #4]
 80033c0:	f008 ffee 	bl	800c3a0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	695a      	ldr	r2, [r3, #20]
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80033d2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	4618      	mov	r0, r3
 80033da:	f005 f841 	bl	8008460 <USB_ReadInterrupts>
 80033de:	4603      	mov	r3, r0
 80033e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80033e4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80033e8:	d112      	bne.n	8003410 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80033ea:	69fb      	ldr	r3, [r7, #28]
 80033ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80033f0:	689b      	ldr	r3, [r3, #8]
 80033f2:	f003 0301 	and.w	r3, r3, #1
 80033f6:	2b01      	cmp	r3, #1
 80033f8:	d102      	bne.n	8003400 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80033fa:	6878      	ldr	r0, [r7, #4]
 80033fc:	f008 ffaa 	bl	800c354 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	695a      	ldr	r2, [r3, #20]
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800340e:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	4618      	mov	r0, r3
 8003416:	f005 f823 	bl	8008460 <USB_ReadInterrupts>
 800341a:	4603      	mov	r3, r0
 800341c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003420:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003424:	f040 80b7 	bne.w	8003596 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003428:	69fb      	ldr	r3, [r7, #28]
 800342a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800342e:	685b      	ldr	r3, [r3, #4]
 8003430:	69fa      	ldr	r2, [r7, #28]
 8003432:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003436:	f023 0301 	bic.w	r3, r3, #1
 800343a:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	2110      	movs	r1, #16
 8003442:	4618      	mov	r0, r3
 8003444:	f003 ffea 	bl	800741c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003448:	2300      	movs	r3, #0
 800344a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800344c:	e046      	b.n	80034dc <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800344e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003450:	015a      	lsls	r2, r3, #5
 8003452:	69fb      	ldr	r3, [r7, #28]
 8003454:	4413      	add	r3, r2
 8003456:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800345a:	461a      	mov	r2, r3
 800345c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003460:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003462:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003464:	015a      	lsls	r2, r3, #5
 8003466:	69fb      	ldr	r3, [r7, #28]
 8003468:	4413      	add	r3, r2
 800346a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003472:	0151      	lsls	r1, r2, #5
 8003474:	69fa      	ldr	r2, [r7, #28]
 8003476:	440a      	add	r2, r1
 8003478:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800347c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003480:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003482:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003484:	015a      	lsls	r2, r3, #5
 8003486:	69fb      	ldr	r3, [r7, #28]
 8003488:	4413      	add	r3, r2
 800348a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800348e:	461a      	mov	r2, r3
 8003490:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003494:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003496:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003498:	015a      	lsls	r2, r3, #5
 800349a:	69fb      	ldr	r3, [r7, #28]
 800349c:	4413      	add	r3, r2
 800349e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80034a6:	0151      	lsls	r1, r2, #5
 80034a8:	69fa      	ldr	r2, [r7, #28]
 80034aa:	440a      	add	r2, r1
 80034ac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80034b0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80034b4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80034b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034b8:	015a      	lsls	r2, r3, #5
 80034ba:	69fb      	ldr	r3, [r7, #28]
 80034bc:	4413      	add	r3, r2
 80034be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80034c6:	0151      	lsls	r1, r2, #5
 80034c8:	69fa      	ldr	r2, [r7, #28]
 80034ca:	440a      	add	r2, r1
 80034cc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80034d0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80034d4:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80034d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034d8:	3301      	adds	r3, #1
 80034da:	62fb      	str	r3, [r7, #44]	; 0x2c
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	685b      	ldr	r3, [r3, #4]
 80034e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80034e2:	429a      	cmp	r2, r3
 80034e4:	d3b3      	bcc.n	800344e <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80034e6:	69fb      	ldr	r3, [r7, #28]
 80034e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80034ec:	69db      	ldr	r3, [r3, #28]
 80034ee:	69fa      	ldr	r2, [r7, #28]
 80034f0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80034f4:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80034f8:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d016      	beq.n	8003530 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003502:	69fb      	ldr	r3, [r7, #28]
 8003504:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003508:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800350c:	69fa      	ldr	r2, [r7, #28]
 800350e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003512:	f043 030b 	orr.w	r3, r3, #11
 8003516:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800351a:	69fb      	ldr	r3, [r7, #28]
 800351c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003520:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003522:	69fa      	ldr	r2, [r7, #28]
 8003524:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003528:	f043 030b 	orr.w	r3, r3, #11
 800352c:	6453      	str	r3, [r2, #68]	; 0x44
 800352e:	e015      	b.n	800355c <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003530:	69fb      	ldr	r3, [r7, #28]
 8003532:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003536:	695b      	ldr	r3, [r3, #20]
 8003538:	69fa      	ldr	r2, [r7, #28]
 800353a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800353e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003542:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8003546:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003548:	69fb      	ldr	r3, [r7, #28]
 800354a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800354e:	691b      	ldr	r3, [r3, #16]
 8003550:	69fa      	ldr	r2, [r7, #28]
 8003552:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003556:	f043 030b 	orr.w	r3, r3, #11
 800355a:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800355c:	69fb      	ldr	r3, [r7, #28]
 800355e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	69fa      	ldr	r2, [r7, #28]
 8003566:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800356a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800356e:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6818      	ldr	r0, [r3, #0]
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	691b      	ldr	r3, [r3, #16]
 8003578:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003580:	461a      	mov	r2, r3
 8003582:	f005 f831 	bl	80085e8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	695a      	ldr	r2, [r3, #20]
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003594:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	4618      	mov	r0, r3
 800359c:	f004 ff60 	bl	8008460 <USB_ReadInterrupts>
 80035a0:	4603      	mov	r3, r0
 80035a2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80035a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80035aa:	d124      	bne.n	80035f6 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	4618      	mov	r0, r3
 80035b2:	f004 fff6 	bl	80085a2 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	4618      	mov	r0, r3
 80035bc:	f003 ffab 	bl	8007516 <USB_GetDevSpeed>
 80035c0:	4603      	mov	r3, r0
 80035c2:	461a      	mov	r2, r3
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681c      	ldr	r4, [r3, #0]
 80035cc:	f001 fa16 	bl	80049fc <HAL_RCC_GetHCLKFreq>
 80035d0:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80035d6:	b2db      	uxtb	r3, r3
 80035d8:	461a      	mov	r2, r3
 80035da:	4620      	mov	r0, r4
 80035dc:	f003 fcaa 	bl	8006f34 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80035e0:	6878      	ldr	r0, [r7, #4]
 80035e2:	f008 fe98 	bl	800c316 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	695a      	ldr	r2, [r3, #20]
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80035f4:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	4618      	mov	r0, r3
 80035fc:	f004 ff30 	bl	8008460 <USB_ReadInterrupts>
 8003600:	4603      	mov	r3, r0
 8003602:	f003 0308 	and.w	r3, r3, #8
 8003606:	2b08      	cmp	r3, #8
 8003608:	d10a      	bne.n	8003620 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800360a:	6878      	ldr	r0, [r7, #4]
 800360c:	f008 fe75 	bl	800c2fa <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	695a      	ldr	r2, [r3, #20]
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f002 0208 	and.w	r2, r2, #8
 800361e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	4618      	mov	r0, r3
 8003626:	f004 ff1b 	bl	8008460 <USB_ReadInterrupts>
 800362a:	4603      	mov	r3, r0
 800362c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003630:	2b80      	cmp	r3, #128	; 0x80
 8003632:	d122      	bne.n	800367a <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8003634:	6a3b      	ldr	r3, [r7, #32]
 8003636:	699b      	ldr	r3, [r3, #24]
 8003638:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800363c:	6a3b      	ldr	r3, [r7, #32]
 800363e:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003640:	2301      	movs	r3, #1
 8003642:	627b      	str	r3, [r7, #36]	; 0x24
 8003644:	e014      	b.n	8003670 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003646:	6879      	ldr	r1, [r7, #4]
 8003648:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800364a:	4613      	mov	r3, r2
 800364c:	00db      	lsls	r3, r3, #3
 800364e:	4413      	add	r3, r2
 8003650:	009b      	lsls	r3, r3, #2
 8003652:	440b      	add	r3, r1
 8003654:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003658:	781b      	ldrb	r3, [r3, #0]
 800365a:	2b01      	cmp	r3, #1
 800365c:	d105      	bne.n	800366a <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800365e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003660:	b2db      	uxtb	r3, r3
 8003662:	4619      	mov	r1, r3
 8003664:	6878      	ldr	r0, [r7, #4]
 8003666:	f000 fb27 	bl	8003cb8 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800366a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800366c:	3301      	adds	r3, #1
 800366e:	627b      	str	r3, [r7, #36]	; 0x24
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	685b      	ldr	r3, [r3, #4]
 8003674:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003676:	429a      	cmp	r2, r3
 8003678:	d3e5      	bcc.n	8003646 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	4618      	mov	r0, r3
 8003680:	f004 feee 	bl	8008460 <USB_ReadInterrupts>
 8003684:	4603      	mov	r3, r0
 8003686:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800368a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800368e:	d13b      	bne.n	8003708 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003690:	2301      	movs	r3, #1
 8003692:	627b      	str	r3, [r7, #36]	; 0x24
 8003694:	e02b      	b.n	80036ee <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003698:	015a      	lsls	r2, r3, #5
 800369a:	69fb      	ldr	r3, [r7, #28]
 800369c:	4413      	add	r3, r2
 800369e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80036a6:	6879      	ldr	r1, [r7, #4]
 80036a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036aa:	4613      	mov	r3, r2
 80036ac:	00db      	lsls	r3, r3, #3
 80036ae:	4413      	add	r3, r2
 80036b0:	009b      	lsls	r3, r3, #2
 80036b2:	440b      	add	r3, r1
 80036b4:	3340      	adds	r3, #64	; 0x40
 80036b6:	781b      	ldrb	r3, [r3, #0]
 80036b8:	2b01      	cmp	r3, #1
 80036ba:	d115      	bne.n	80036e8 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80036bc:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80036be:	2b00      	cmp	r3, #0
 80036c0:	da12      	bge.n	80036e8 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80036c2:	6879      	ldr	r1, [r7, #4]
 80036c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036c6:	4613      	mov	r3, r2
 80036c8:	00db      	lsls	r3, r3, #3
 80036ca:	4413      	add	r3, r2
 80036cc:	009b      	lsls	r3, r3, #2
 80036ce:	440b      	add	r3, r1
 80036d0:	333f      	adds	r3, #63	; 0x3f
 80036d2:	2201      	movs	r2, #1
 80036d4:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80036d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036d8:	b2db      	uxtb	r3, r3
 80036da:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80036de:	b2db      	uxtb	r3, r3
 80036e0:	4619      	mov	r1, r3
 80036e2:	6878      	ldr	r0, [r7, #4]
 80036e4:	f000 fae8 	bl	8003cb8 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80036e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ea:	3301      	adds	r3, #1
 80036ec:	627b      	str	r3, [r7, #36]	; 0x24
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	685b      	ldr	r3, [r3, #4]
 80036f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036f4:	429a      	cmp	r2, r3
 80036f6:	d3ce      	bcc.n	8003696 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	695a      	ldr	r2, [r3, #20]
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8003706:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	4618      	mov	r0, r3
 800370e:	f004 fea7 	bl	8008460 <USB_ReadInterrupts>
 8003712:	4603      	mov	r3, r0
 8003714:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003718:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800371c:	d155      	bne.n	80037ca <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800371e:	2301      	movs	r3, #1
 8003720:	627b      	str	r3, [r7, #36]	; 0x24
 8003722:	e045      	b.n	80037b0 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8003724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003726:	015a      	lsls	r2, r3, #5
 8003728:	69fb      	ldr	r3, [r7, #28]
 800372a:	4413      	add	r3, r2
 800372c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003734:	6879      	ldr	r1, [r7, #4]
 8003736:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003738:	4613      	mov	r3, r2
 800373a:	00db      	lsls	r3, r3, #3
 800373c:	4413      	add	r3, r2
 800373e:	009b      	lsls	r3, r3, #2
 8003740:	440b      	add	r3, r1
 8003742:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003746:	781b      	ldrb	r3, [r3, #0]
 8003748:	2b01      	cmp	r3, #1
 800374a:	d12e      	bne.n	80037aa <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800374c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800374e:	2b00      	cmp	r3, #0
 8003750:	da2b      	bge.n	80037aa <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8003752:	69bb      	ldr	r3, [r7, #24]
 8003754:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 800375e:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003762:	429a      	cmp	r2, r3
 8003764:	d121      	bne.n	80037aa <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8003766:	6879      	ldr	r1, [r7, #4]
 8003768:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800376a:	4613      	mov	r3, r2
 800376c:	00db      	lsls	r3, r3, #3
 800376e:	4413      	add	r3, r2
 8003770:	009b      	lsls	r3, r3, #2
 8003772:	440b      	add	r3, r1
 8003774:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003778:	2201      	movs	r2, #1
 800377a:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800377c:	6a3b      	ldr	r3, [r7, #32]
 800377e:	699b      	ldr	r3, [r3, #24]
 8003780:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003784:	6a3b      	ldr	r3, [r7, #32]
 8003786:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8003788:	6a3b      	ldr	r3, [r7, #32]
 800378a:	695b      	ldr	r3, [r3, #20]
 800378c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003790:	2b00      	cmp	r3, #0
 8003792:	d10a      	bne.n	80037aa <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8003794:	69fb      	ldr	r3, [r7, #28]
 8003796:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800379a:	685b      	ldr	r3, [r3, #4]
 800379c:	69fa      	ldr	r2, [r7, #28]
 800379e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80037a2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80037a6:	6053      	str	r3, [r2, #4]
            break;
 80037a8:	e007      	b.n	80037ba <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80037aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037ac:	3301      	adds	r3, #1
 80037ae:	627b      	str	r3, [r7, #36]	; 0x24
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	685b      	ldr	r3, [r3, #4]
 80037b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037b6:	429a      	cmp	r2, r3
 80037b8:	d3b4      	bcc.n	8003724 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	695a      	ldr	r2, [r3, #20]
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80037c8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	4618      	mov	r0, r3
 80037d0:	f004 fe46 	bl	8008460 <USB_ReadInterrupts>
 80037d4:	4603      	mov	r3, r0
 80037d6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80037da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037de:	d10a      	bne.n	80037f6 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80037e0:	6878      	ldr	r0, [r7, #4]
 80037e2:	f008 fe0f 	bl	800c404 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	695a      	ldr	r2, [r3, #20]
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80037f4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	4618      	mov	r0, r3
 80037fc:	f004 fe30 	bl	8008460 <USB_ReadInterrupts>
 8003800:	4603      	mov	r3, r0
 8003802:	f003 0304 	and.w	r3, r3, #4
 8003806:	2b04      	cmp	r3, #4
 8003808:	d115      	bne.n	8003836 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	685b      	ldr	r3, [r3, #4]
 8003810:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003812:	69bb      	ldr	r3, [r7, #24]
 8003814:	f003 0304 	and.w	r3, r3, #4
 8003818:	2b00      	cmp	r3, #0
 800381a:	d002      	beq.n	8003822 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800381c:	6878      	ldr	r0, [r7, #4]
 800381e:	f008 fdff 	bl	800c420 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	6859      	ldr	r1, [r3, #4]
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	69ba      	ldr	r2, [r7, #24]
 800382e:	430a      	orrs	r2, r1
 8003830:	605a      	str	r2, [r3, #4]
 8003832:	e000      	b.n	8003836 <HAL_PCD_IRQHandler+0x938>
      return;
 8003834:	bf00      	nop
    }
  }
}
 8003836:	3734      	adds	r7, #52	; 0x34
 8003838:	46bd      	mov	sp, r7
 800383a:	bd90      	pop	{r4, r7, pc}

0800383c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	b082      	sub	sp, #8
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
 8003844:	460b      	mov	r3, r1
 8003846:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800384e:	2b01      	cmp	r3, #1
 8003850:	d101      	bne.n	8003856 <HAL_PCD_SetAddress+0x1a>
 8003852:	2302      	movs	r3, #2
 8003854:	e013      	b.n	800387e <HAL_PCD_SetAddress+0x42>
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2201      	movs	r2, #1
 800385a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	78fa      	ldrb	r2, [r7, #3]
 8003862:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	78fa      	ldrb	r2, [r7, #3]
 800386c:	4611      	mov	r1, r2
 800386e:	4618      	mov	r0, r3
 8003870:	f004 fd8e 	bl	8008390 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2200      	movs	r2, #0
 8003878:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800387c:	2300      	movs	r3, #0
}
 800387e:	4618      	mov	r0, r3
 8003880:	3708      	adds	r7, #8
 8003882:	46bd      	mov	sp, r7
 8003884:	bd80      	pop	{r7, pc}

08003886 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003886:	b580      	push	{r7, lr}
 8003888:	b084      	sub	sp, #16
 800388a:	af00      	add	r7, sp, #0
 800388c:	6078      	str	r0, [r7, #4]
 800388e:	4608      	mov	r0, r1
 8003890:	4611      	mov	r1, r2
 8003892:	461a      	mov	r2, r3
 8003894:	4603      	mov	r3, r0
 8003896:	70fb      	strb	r3, [r7, #3]
 8003898:	460b      	mov	r3, r1
 800389a:	803b      	strh	r3, [r7, #0]
 800389c:	4613      	mov	r3, r2
 800389e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80038a0:	2300      	movs	r3, #0
 80038a2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80038a4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	da0f      	bge.n	80038cc <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80038ac:	78fb      	ldrb	r3, [r7, #3]
 80038ae:	f003 020f 	and.w	r2, r3, #15
 80038b2:	4613      	mov	r3, r2
 80038b4:	00db      	lsls	r3, r3, #3
 80038b6:	4413      	add	r3, r2
 80038b8:	009b      	lsls	r3, r3, #2
 80038ba:	3338      	adds	r3, #56	; 0x38
 80038bc:	687a      	ldr	r2, [r7, #4]
 80038be:	4413      	add	r3, r2
 80038c0:	3304      	adds	r3, #4
 80038c2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	2201      	movs	r2, #1
 80038c8:	705a      	strb	r2, [r3, #1]
 80038ca:	e00f      	b.n	80038ec <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80038cc:	78fb      	ldrb	r3, [r7, #3]
 80038ce:	f003 020f 	and.w	r2, r3, #15
 80038d2:	4613      	mov	r3, r2
 80038d4:	00db      	lsls	r3, r3, #3
 80038d6:	4413      	add	r3, r2
 80038d8:	009b      	lsls	r3, r3, #2
 80038da:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80038de:	687a      	ldr	r2, [r7, #4]
 80038e0:	4413      	add	r3, r2
 80038e2:	3304      	adds	r3, #4
 80038e4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	2200      	movs	r2, #0
 80038ea:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80038ec:	78fb      	ldrb	r3, [r7, #3]
 80038ee:	f003 030f 	and.w	r3, r3, #15
 80038f2:	b2da      	uxtb	r2, r3
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80038f8:	883a      	ldrh	r2, [r7, #0]
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	78ba      	ldrb	r2, [r7, #2]
 8003902:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	785b      	ldrb	r3, [r3, #1]
 8003908:	2b00      	cmp	r3, #0
 800390a:	d004      	beq.n	8003916 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	781b      	ldrb	r3, [r3, #0]
 8003910:	b29a      	uxth	r2, r3
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003916:	78bb      	ldrb	r3, [r7, #2]
 8003918:	2b02      	cmp	r3, #2
 800391a:	d102      	bne.n	8003922 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	2200      	movs	r2, #0
 8003920:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003928:	2b01      	cmp	r3, #1
 800392a:	d101      	bne.n	8003930 <HAL_PCD_EP_Open+0xaa>
 800392c:	2302      	movs	r3, #2
 800392e:	e00e      	b.n	800394e <HAL_PCD_EP_Open+0xc8>
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2201      	movs	r2, #1
 8003934:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	68f9      	ldr	r1, [r7, #12]
 800393e:	4618      	mov	r0, r3
 8003940:	f003 fe0e 	bl	8007560 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2200      	movs	r2, #0
 8003948:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 800394c:	7afb      	ldrb	r3, [r7, #11]
}
 800394e:	4618      	mov	r0, r3
 8003950:	3710      	adds	r7, #16
 8003952:	46bd      	mov	sp, r7
 8003954:	bd80      	pop	{r7, pc}

08003956 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003956:	b580      	push	{r7, lr}
 8003958:	b084      	sub	sp, #16
 800395a:	af00      	add	r7, sp, #0
 800395c:	6078      	str	r0, [r7, #4]
 800395e:	460b      	mov	r3, r1
 8003960:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003962:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003966:	2b00      	cmp	r3, #0
 8003968:	da0f      	bge.n	800398a <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800396a:	78fb      	ldrb	r3, [r7, #3]
 800396c:	f003 020f 	and.w	r2, r3, #15
 8003970:	4613      	mov	r3, r2
 8003972:	00db      	lsls	r3, r3, #3
 8003974:	4413      	add	r3, r2
 8003976:	009b      	lsls	r3, r3, #2
 8003978:	3338      	adds	r3, #56	; 0x38
 800397a:	687a      	ldr	r2, [r7, #4]
 800397c:	4413      	add	r3, r2
 800397e:	3304      	adds	r3, #4
 8003980:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	2201      	movs	r2, #1
 8003986:	705a      	strb	r2, [r3, #1]
 8003988:	e00f      	b.n	80039aa <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800398a:	78fb      	ldrb	r3, [r7, #3]
 800398c:	f003 020f 	and.w	r2, r3, #15
 8003990:	4613      	mov	r3, r2
 8003992:	00db      	lsls	r3, r3, #3
 8003994:	4413      	add	r3, r2
 8003996:	009b      	lsls	r3, r3, #2
 8003998:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800399c:	687a      	ldr	r2, [r7, #4]
 800399e:	4413      	add	r3, r2
 80039a0:	3304      	adds	r3, #4
 80039a2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	2200      	movs	r2, #0
 80039a8:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80039aa:	78fb      	ldrb	r3, [r7, #3]
 80039ac:	f003 030f 	and.w	r3, r3, #15
 80039b0:	b2da      	uxtb	r2, r3
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80039bc:	2b01      	cmp	r3, #1
 80039be:	d101      	bne.n	80039c4 <HAL_PCD_EP_Close+0x6e>
 80039c0:	2302      	movs	r3, #2
 80039c2:	e00e      	b.n	80039e2 <HAL_PCD_EP_Close+0x8c>
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2201      	movs	r2, #1
 80039c8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	68f9      	ldr	r1, [r7, #12]
 80039d2:	4618      	mov	r0, r3
 80039d4:	f003 fe4c 	bl	8007670 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2200      	movs	r2, #0
 80039dc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 80039e0:	2300      	movs	r3, #0
}
 80039e2:	4618      	mov	r0, r3
 80039e4:	3710      	adds	r7, #16
 80039e6:	46bd      	mov	sp, r7
 80039e8:	bd80      	pop	{r7, pc}

080039ea <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80039ea:	b580      	push	{r7, lr}
 80039ec:	b086      	sub	sp, #24
 80039ee:	af00      	add	r7, sp, #0
 80039f0:	60f8      	str	r0, [r7, #12]
 80039f2:	607a      	str	r2, [r7, #4]
 80039f4:	603b      	str	r3, [r7, #0]
 80039f6:	460b      	mov	r3, r1
 80039f8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80039fa:	7afb      	ldrb	r3, [r7, #11]
 80039fc:	f003 020f 	and.w	r2, r3, #15
 8003a00:	4613      	mov	r3, r2
 8003a02:	00db      	lsls	r3, r3, #3
 8003a04:	4413      	add	r3, r2
 8003a06:	009b      	lsls	r3, r3, #2
 8003a08:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003a0c:	68fa      	ldr	r2, [r7, #12]
 8003a0e:	4413      	add	r3, r2
 8003a10:	3304      	adds	r3, #4
 8003a12:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003a14:	697b      	ldr	r3, [r7, #20]
 8003a16:	687a      	ldr	r2, [r7, #4]
 8003a18:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8003a1a:	697b      	ldr	r3, [r7, #20]
 8003a1c:	683a      	ldr	r2, [r7, #0]
 8003a1e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003a20:	697b      	ldr	r3, [r7, #20]
 8003a22:	2200      	movs	r2, #0
 8003a24:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8003a26:	697b      	ldr	r3, [r7, #20]
 8003a28:	2200      	movs	r2, #0
 8003a2a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003a2c:	7afb      	ldrb	r3, [r7, #11]
 8003a2e:	f003 030f 	and.w	r3, r3, #15
 8003a32:	b2da      	uxtb	r2, r3
 8003a34:	697b      	ldr	r3, [r7, #20]
 8003a36:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	691b      	ldr	r3, [r3, #16]
 8003a3c:	2b01      	cmp	r3, #1
 8003a3e:	d102      	bne.n	8003a46 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003a40:	687a      	ldr	r2, [r7, #4]
 8003a42:	697b      	ldr	r3, [r7, #20]
 8003a44:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003a46:	7afb      	ldrb	r3, [r7, #11]
 8003a48:	f003 030f 	and.w	r3, r3, #15
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d109      	bne.n	8003a64 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	6818      	ldr	r0, [r3, #0]
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	691b      	ldr	r3, [r3, #16]
 8003a58:	b2db      	uxtb	r3, r3
 8003a5a:	461a      	mov	r2, r3
 8003a5c:	6979      	ldr	r1, [r7, #20]
 8003a5e:	f004 f92b 	bl	8007cb8 <USB_EP0StartXfer>
 8003a62:	e008      	b.n	8003a76 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	6818      	ldr	r0, [r3, #0]
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	691b      	ldr	r3, [r3, #16]
 8003a6c:	b2db      	uxtb	r3, r3
 8003a6e:	461a      	mov	r2, r3
 8003a70:	6979      	ldr	r1, [r7, #20]
 8003a72:	f003 fed9 	bl	8007828 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003a76:	2300      	movs	r3, #0
}
 8003a78:	4618      	mov	r0, r3
 8003a7a:	3718      	adds	r7, #24
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	bd80      	pop	{r7, pc}

08003a80 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003a80:	b480      	push	{r7}
 8003a82:	b083      	sub	sp, #12
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
 8003a88:	460b      	mov	r3, r1
 8003a8a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003a8c:	78fb      	ldrb	r3, [r7, #3]
 8003a8e:	f003 020f 	and.w	r2, r3, #15
 8003a92:	6879      	ldr	r1, [r7, #4]
 8003a94:	4613      	mov	r3, r2
 8003a96:	00db      	lsls	r3, r3, #3
 8003a98:	4413      	add	r3, r2
 8003a9a:	009b      	lsls	r3, r3, #2
 8003a9c:	440b      	add	r3, r1
 8003a9e:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8003aa2:	681b      	ldr	r3, [r3, #0]
}
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	370c      	adds	r7, #12
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aae:	4770      	bx	lr

08003ab0 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	b086      	sub	sp, #24
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	60f8      	str	r0, [r7, #12]
 8003ab8:	607a      	str	r2, [r7, #4]
 8003aba:	603b      	str	r3, [r7, #0]
 8003abc:	460b      	mov	r3, r1
 8003abe:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003ac0:	7afb      	ldrb	r3, [r7, #11]
 8003ac2:	f003 020f 	and.w	r2, r3, #15
 8003ac6:	4613      	mov	r3, r2
 8003ac8:	00db      	lsls	r3, r3, #3
 8003aca:	4413      	add	r3, r2
 8003acc:	009b      	lsls	r3, r3, #2
 8003ace:	3338      	adds	r3, #56	; 0x38
 8003ad0:	68fa      	ldr	r2, [r7, #12]
 8003ad2:	4413      	add	r3, r2
 8003ad4:	3304      	adds	r3, #4
 8003ad6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003ad8:	697b      	ldr	r3, [r7, #20]
 8003ada:	687a      	ldr	r2, [r7, #4]
 8003adc:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8003ade:	697b      	ldr	r3, [r7, #20]
 8003ae0:	683a      	ldr	r2, [r7, #0]
 8003ae2:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003ae4:	697b      	ldr	r3, [r7, #20]
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8003aea:	697b      	ldr	r3, [r7, #20]
 8003aec:	2201      	movs	r2, #1
 8003aee:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003af0:	7afb      	ldrb	r3, [r7, #11]
 8003af2:	f003 030f 	and.w	r3, r3, #15
 8003af6:	b2da      	uxtb	r2, r3
 8003af8:	697b      	ldr	r3, [r7, #20]
 8003afa:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	691b      	ldr	r3, [r3, #16]
 8003b00:	2b01      	cmp	r3, #1
 8003b02:	d102      	bne.n	8003b0a <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003b04:	687a      	ldr	r2, [r7, #4]
 8003b06:	697b      	ldr	r3, [r7, #20]
 8003b08:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003b0a:	7afb      	ldrb	r3, [r7, #11]
 8003b0c:	f003 030f 	and.w	r3, r3, #15
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d109      	bne.n	8003b28 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	6818      	ldr	r0, [r3, #0]
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	691b      	ldr	r3, [r3, #16]
 8003b1c:	b2db      	uxtb	r3, r3
 8003b1e:	461a      	mov	r2, r3
 8003b20:	6979      	ldr	r1, [r7, #20]
 8003b22:	f004 f8c9 	bl	8007cb8 <USB_EP0StartXfer>
 8003b26:	e008      	b.n	8003b3a <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	6818      	ldr	r0, [r3, #0]
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	691b      	ldr	r3, [r3, #16]
 8003b30:	b2db      	uxtb	r3, r3
 8003b32:	461a      	mov	r2, r3
 8003b34:	6979      	ldr	r1, [r7, #20]
 8003b36:	f003 fe77 	bl	8007828 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003b3a:	2300      	movs	r3, #0
}
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	3718      	adds	r7, #24
 8003b40:	46bd      	mov	sp, r7
 8003b42:	bd80      	pop	{r7, pc}

08003b44 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b084      	sub	sp, #16
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
 8003b4c:	460b      	mov	r3, r1
 8003b4e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003b50:	78fb      	ldrb	r3, [r7, #3]
 8003b52:	f003 020f 	and.w	r2, r3, #15
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	685b      	ldr	r3, [r3, #4]
 8003b5a:	429a      	cmp	r2, r3
 8003b5c:	d901      	bls.n	8003b62 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003b5e:	2301      	movs	r3, #1
 8003b60:	e050      	b.n	8003c04 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003b62:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	da0f      	bge.n	8003b8a <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003b6a:	78fb      	ldrb	r3, [r7, #3]
 8003b6c:	f003 020f 	and.w	r2, r3, #15
 8003b70:	4613      	mov	r3, r2
 8003b72:	00db      	lsls	r3, r3, #3
 8003b74:	4413      	add	r3, r2
 8003b76:	009b      	lsls	r3, r3, #2
 8003b78:	3338      	adds	r3, #56	; 0x38
 8003b7a:	687a      	ldr	r2, [r7, #4]
 8003b7c:	4413      	add	r3, r2
 8003b7e:	3304      	adds	r3, #4
 8003b80:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	2201      	movs	r2, #1
 8003b86:	705a      	strb	r2, [r3, #1]
 8003b88:	e00d      	b.n	8003ba6 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003b8a:	78fa      	ldrb	r2, [r7, #3]
 8003b8c:	4613      	mov	r3, r2
 8003b8e:	00db      	lsls	r3, r3, #3
 8003b90:	4413      	add	r3, r2
 8003b92:	009b      	lsls	r3, r3, #2
 8003b94:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003b98:	687a      	ldr	r2, [r7, #4]
 8003b9a:	4413      	add	r3, r2
 8003b9c:	3304      	adds	r3, #4
 8003b9e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	2201      	movs	r2, #1
 8003baa:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003bac:	78fb      	ldrb	r3, [r7, #3]
 8003bae:	f003 030f 	and.w	r3, r3, #15
 8003bb2:	b2da      	uxtb	r2, r3
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003bbe:	2b01      	cmp	r3, #1
 8003bc0:	d101      	bne.n	8003bc6 <HAL_PCD_EP_SetStall+0x82>
 8003bc2:	2302      	movs	r3, #2
 8003bc4:	e01e      	b.n	8003c04 <HAL_PCD_EP_SetStall+0xc0>
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	2201      	movs	r2, #1
 8003bca:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	68f9      	ldr	r1, [r7, #12]
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	f004 fb07 	bl	80081e8 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003bda:	78fb      	ldrb	r3, [r7, #3]
 8003bdc:	f003 030f 	and.w	r3, r3, #15
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d10a      	bne.n	8003bfa <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6818      	ldr	r0, [r3, #0]
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	691b      	ldr	r3, [r3, #16]
 8003bec:	b2d9      	uxtb	r1, r3
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003bf4:	461a      	mov	r2, r3
 8003bf6:	f004 fcf7 	bl	80085e8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003c02:	2300      	movs	r3, #0
}
 8003c04:	4618      	mov	r0, r3
 8003c06:	3710      	adds	r7, #16
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	bd80      	pop	{r7, pc}

08003c0c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	b084      	sub	sp, #16
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
 8003c14:	460b      	mov	r3, r1
 8003c16:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003c18:	78fb      	ldrb	r3, [r7, #3]
 8003c1a:	f003 020f 	and.w	r2, r3, #15
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	685b      	ldr	r3, [r3, #4]
 8003c22:	429a      	cmp	r2, r3
 8003c24:	d901      	bls.n	8003c2a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003c26:	2301      	movs	r3, #1
 8003c28:	e042      	b.n	8003cb0 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003c2a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	da0f      	bge.n	8003c52 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003c32:	78fb      	ldrb	r3, [r7, #3]
 8003c34:	f003 020f 	and.w	r2, r3, #15
 8003c38:	4613      	mov	r3, r2
 8003c3a:	00db      	lsls	r3, r3, #3
 8003c3c:	4413      	add	r3, r2
 8003c3e:	009b      	lsls	r3, r3, #2
 8003c40:	3338      	adds	r3, #56	; 0x38
 8003c42:	687a      	ldr	r2, [r7, #4]
 8003c44:	4413      	add	r3, r2
 8003c46:	3304      	adds	r3, #4
 8003c48:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	2201      	movs	r2, #1
 8003c4e:	705a      	strb	r2, [r3, #1]
 8003c50:	e00f      	b.n	8003c72 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003c52:	78fb      	ldrb	r3, [r7, #3]
 8003c54:	f003 020f 	and.w	r2, r3, #15
 8003c58:	4613      	mov	r3, r2
 8003c5a:	00db      	lsls	r3, r3, #3
 8003c5c:	4413      	add	r3, r2
 8003c5e:	009b      	lsls	r3, r3, #2
 8003c60:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003c64:	687a      	ldr	r2, [r7, #4]
 8003c66:	4413      	add	r3, r2
 8003c68:	3304      	adds	r3, #4
 8003c6a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	2200      	movs	r2, #0
 8003c70:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	2200      	movs	r2, #0
 8003c76:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003c78:	78fb      	ldrb	r3, [r7, #3]
 8003c7a:	f003 030f 	and.w	r3, r3, #15
 8003c7e:	b2da      	uxtb	r2, r3
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003c8a:	2b01      	cmp	r3, #1
 8003c8c:	d101      	bne.n	8003c92 <HAL_PCD_EP_ClrStall+0x86>
 8003c8e:	2302      	movs	r3, #2
 8003c90:	e00e      	b.n	8003cb0 <HAL_PCD_EP_ClrStall+0xa4>
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	2201      	movs	r2, #1
 8003c96:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	68f9      	ldr	r1, [r7, #12]
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	f004 fb0f 	bl	80082c4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	2200      	movs	r2, #0
 8003caa:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003cae:	2300      	movs	r3, #0
}
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	3710      	adds	r7, #16
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	bd80      	pop	{r7, pc}

08003cb8 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b084      	sub	sp, #16
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
 8003cc0:	460b      	mov	r3, r1
 8003cc2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003cc4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	da0c      	bge.n	8003ce6 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003ccc:	78fb      	ldrb	r3, [r7, #3]
 8003cce:	f003 020f 	and.w	r2, r3, #15
 8003cd2:	4613      	mov	r3, r2
 8003cd4:	00db      	lsls	r3, r3, #3
 8003cd6:	4413      	add	r3, r2
 8003cd8:	009b      	lsls	r3, r3, #2
 8003cda:	3338      	adds	r3, #56	; 0x38
 8003cdc:	687a      	ldr	r2, [r7, #4]
 8003cde:	4413      	add	r3, r2
 8003ce0:	3304      	adds	r3, #4
 8003ce2:	60fb      	str	r3, [r7, #12]
 8003ce4:	e00c      	b.n	8003d00 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003ce6:	78fb      	ldrb	r3, [r7, #3]
 8003ce8:	f003 020f 	and.w	r2, r3, #15
 8003cec:	4613      	mov	r3, r2
 8003cee:	00db      	lsls	r3, r3, #3
 8003cf0:	4413      	add	r3, r2
 8003cf2:	009b      	lsls	r3, r3, #2
 8003cf4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003cf8:	687a      	ldr	r2, [r7, #4]
 8003cfa:	4413      	add	r3, r2
 8003cfc:	3304      	adds	r3, #4
 8003cfe:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	68f9      	ldr	r1, [r7, #12]
 8003d06:	4618      	mov	r0, r3
 8003d08:	f004 f92e 	bl	8007f68 <USB_EPStopXfer>
 8003d0c:	4603      	mov	r3, r0
 8003d0e:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003d10:	7afb      	ldrb	r3, [r7, #11]
}
 8003d12:	4618      	mov	r0, r3
 8003d14:	3710      	adds	r7, #16
 8003d16:	46bd      	mov	sp, r7
 8003d18:	bd80      	pop	{r7, pc}

08003d1a <HAL_PCD_EP_Flush>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Flush(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003d1a:	b580      	push	{r7, lr}
 8003d1c:	b082      	sub	sp, #8
 8003d1e:	af00      	add	r7, sp, #0
 8003d20:	6078      	str	r0, [r7, #4]
 8003d22:	460b      	mov	r3, r1
 8003d24:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003d2c:	2b01      	cmp	r3, #1
 8003d2e:	d101      	bne.n	8003d34 <HAL_PCD_EP_Flush+0x1a>
 8003d30:	2302      	movs	r3, #2
 8003d32:	e01b      	b.n	8003d6c <HAL_PCD_EP_Flush+0x52>
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2201      	movs	r2, #1
 8003d38:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((ep_addr & 0x80U) == 0x80U)
 8003d3c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	da09      	bge.n	8003d58 <HAL_PCD_EP_Flush+0x3e>
  {
    (void)USB_FlushTxFifo(hpcd->Instance, (uint32_t)ep_addr & EP_ADDR_MSK);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681a      	ldr	r2, [r3, #0]
 8003d48:	78fb      	ldrb	r3, [r7, #3]
 8003d4a:	f003 030f 	and.w	r3, r3, #15
 8003d4e:	4619      	mov	r1, r3
 8003d50:	4610      	mov	r0, r2
 8003d52:	f003 fb63 	bl	800741c <USB_FlushTxFifo>
 8003d56:	e004      	b.n	8003d62 <HAL_PCD_EP_Flush+0x48>
  }
  else
  {
    (void)USB_FlushRxFifo(hpcd->Instance);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	f003 fb91 	bl	8007484 <USB_FlushRxFifo>
  }

  __HAL_UNLOCK(hpcd);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	2200      	movs	r2, #0
 8003d66:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003d6a:	2300      	movs	r3, #0
}
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	3708      	adds	r7, #8
 8003d70:	46bd      	mov	sp, r7
 8003d72:	bd80      	pop	{r7, pc}

08003d74 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	b08a      	sub	sp, #40	; 0x28
 8003d78:	af02      	add	r7, sp, #8
 8003d7a:	6078      	str	r0, [r7, #4]
 8003d7c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d84:	697b      	ldr	r3, [r7, #20]
 8003d86:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003d88:	683a      	ldr	r2, [r7, #0]
 8003d8a:	4613      	mov	r3, r2
 8003d8c:	00db      	lsls	r3, r3, #3
 8003d8e:	4413      	add	r3, r2
 8003d90:	009b      	lsls	r3, r3, #2
 8003d92:	3338      	adds	r3, #56	; 0x38
 8003d94:	687a      	ldr	r2, [r7, #4]
 8003d96:	4413      	add	r3, r2
 8003d98:	3304      	adds	r3, #4
 8003d9a:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	6a1a      	ldr	r2, [r3, #32]
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	699b      	ldr	r3, [r3, #24]
 8003da4:	429a      	cmp	r2, r3
 8003da6:	d901      	bls.n	8003dac <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003da8:	2301      	movs	r3, #1
 8003daa:	e06c      	b.n	8003e86 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	699a      	ldr	r2, [r3, #24]
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	6a1b      	ldr	r3, [r3, #32]
 8003db4:	1ad3      	subs	r3, r2, r3
 8003db6:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	68db      	ldr	r3, [r3, #12]
 8003dbc:	69fa      	ldr	r2, [r7, #28]
 8003dbe:	429a      	cmp	r2, r3
 8003dc0:	d902      	bls.n	8003dc8 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	68db      	ldr	r3, [r3, #12]
 8003dc6:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003dc8:	69fb      	ldr	r3, [r7, #28]
 8003dca:	3303      	adds	r3, #3
 8003dcc:	089b      	lsrs	r3, r3, #2
 8003dce:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003dd0:	e02b      	b.n	8003e2a <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	699a      	ldr	r2, [r3, #24]
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	6a1b      	ldr	r3, [r3, #32]
 8003dda:	1ad3      	subs	r3, r2, r3
 8003ddc:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	68db      	ldr	r3, [r3, #12]
 8003de2:	69fa      	ldr	r2, [r7, #28]
 8003de4:	429a      	cmp	r2, r3
 8003de6:	d902      	bls.n	8003dee <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	68db      	ldr	r3, [r3, #12]
 8003dec:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003dee:	69fb      	ldr	r3, [r7, #28]
 8003df0:	3303      	adds	r3, #3
 8003df2:	089b      	lsrs	r3, r3, #2
 8003df4:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	6919      	ldr	r1, [r3, #16]
 8003dfa:	683b      	ldr	r3, [r7, #0]
 8003dfc:	b2da      	uxtb	r2, r3
 8003dfe:	69fb      	ldr	r3, [r7, #28]
 8003e00:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003e06:	b2db      	uxtb	r3, r3
 8003e08:	9300      	str	r3, [sp, #0]
 8003e0a:	4603      	mov	r3, r0
 8003e0c:	6978      	ldr	r0, [r7, #20]
 8003e0e:	f004 f955 	bl	80080bc <USB_WritePacket>

    ep->xfer_buff  += len;
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	691a      	ldr	r2, [r3, #16]
 8003e16:	69fb      	ldr	r3, [r7, #28]
 8003e18:	441a      	add	r2, r3
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	6a1a      	ldr	r2, [r3, #32]
 8003e22:	69fb      	ldr	r3, [r7, #28]
 8003e24:	441a      	add	r2, r3
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	015a      	lsls	r2, r3, #5
 8003e2e:	693b      	ldr	r3, [r7, #16]
 8003e30:	4413      	add	r3, r2
 8003e32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e36:	699b      	ldr	r3, [r3, #24]
 8003e38:	b29b      	uxth	r3, r3
 8003e3a:	69ba      	ldr	r2, [r7, #24]
 8003e3c:	429a      	cmp	r2, r3
 8003e3e:	d809      	bhi.n	8003e54 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	6a1a      	ldr	r2, [r3, #32]
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003e48:	429a      	cmp	r2, r3
 8003e4a:	d203      	bcs.n	8003e54 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	699b      	ldr	r3, [r3, #24]
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d1be      	bne.n	8003dd2 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	699a      	ldr	r2, [r3, #24]
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	6a1b      	ldr	r3, [r3, #32]
 8003e5c:	429a      	cmp	r2, r3
 8003e5e:	d811      	bhi.n	8003e84 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	f003 030f 	and.w	r3, r3, #15
 8003e66:	2201      	movs	r2, #1
 8003e68:	fa02 f303 	lsl.w	r3, r2, r3
 8003e6c:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003e6e:	693b      	ldr	r3, [r7, #16]
 8003e70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e74:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003e76:	68bb      	ldr	r3, [r7, #8]
 8003e78:	43db      	mvns	r3, r3
 8003e7a:	6939      	ldr	r1, [r7, #16]
 8003e7c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003e80:	4013      	ands	r3, r2
 8003e82:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003e84:	2300      	movs	r3, #0
}
 8003e86:	4618      	mov	r0, r3
 8003e88:	3720      	adds	r7, #32
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	bd80      	pop	{r7, pc}
	...

08003e90 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003e90:	b580      	push	{r7, lr}
 8003e92:	b088      	sub	sp, #32
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]
 8003e98:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ea0:	69fb      	ldr	r3, [r7, #28]
 8003ea2:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003ea4:	69fb      	ldr	r3, [r7, #28]
 8003ea6:	333c      	adds	r3, #60	; 0x3c
 8003ea8:	3304      	adds	r3, #4
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	015a      	lsls	r2, r3, #5
 8003eb2:	69bb      	ldr	r3, [r7, #24]
 8003eb4:	4413      	add	r3, r2
 8003eb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003eba:	689b      	ldr	r3, [r3, #8]
 8003ebc:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	691b      	ldr	r3, [r3, #16]
 8003ec2:	2b01      	cmp	r3, #1
 8003ec4:	d17b      	bne.n	8003fbe <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003ec6:	693b      	ldr	r3, [r7, #16]
 8003ec8:	f003 0308 	and.w	r3, r3, #8
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d015      	beq.n	8003efc <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003ed0:	697b      	ldr	r3, [r7, #20]
 8003ed2:	4a61      	ldr	r2, [pc, #388]	; (8004058 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003ed4:	4293      	cmp	r3, r2
 8003ed6:	f240 80b9 	bls.w	800404c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003eda:	693b      	ldr	r3, [r7, #16]
 8003edc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	f000 80b3 	beq.w	800404c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003ee6:	683b      	ldr	r3, [r7, #0]
 8003ee8:	015a      	lsls	r2, r3, #5
 8003eea:	69bb      	ldr	r3, [r7, #24]
 8003eec:	4413      	add	r3, r2
 8003eee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ef2:	461a      	mov	r2, r3
 8003ef4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003ef8:	6093      	str	r3, [r2, #8]
 8003efa:	e0a7      	b.n	800404c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003efc:	693b      	ldr	r3, [r7, #16]
 8003efe:	f003 0320 	and.w	r3, r3, #32
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d009      	beq.n	8003f1a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003f06:	683b      	ldr	r3, [r7, #0]
 8003f08:	015a      	lsls	r2, r3, #5
 8003f0a:	69bb      	ldr	r3, [r7, #24]
 8003f0c:	4413      	add	r3, r2
 8003f0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f12:	461a      	mov	r2, r3
 8003f14:	2320      	movs	r3, #32
 8003f16:	6093      	str	r3, [r2, #8]
 8003f18:	e098      	b.n	800404c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003f1a:	693b      	ldr	r3, [r7, #16]
 8003f1c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	f040 8093 	bne.w	800404c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003f26:	697b      	ldr	r3, [r7, #20]
 8003f28:	4a4b      	ldr	r2, [pc, #300]	; (8004058 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003f2a:	4293      	cmp	r3, r2
 8003f2c:	d90f      	bls.n	8003f4e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003f2e:	693b      	ldr	r3, [r7, #16]
 8003f30:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d00a      	beq.n	8003f4e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003f38:	683b      	ldr	r3, [r7, #0]
 8003f3a:	015a      	lsls	r2, r3, #5
 8003f3c:	69bb      	ldr	r3, [r7, #24]
 8003f3e:	4413      	add	r3, r2
 8003f40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f44:	461a      	mov	r2, r3
 8003f46:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003f4a:	6093      	str	r3, [r2, #8]
 8003f4c:	e07e      	b.n	800404c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8003f4e:	683a      	ldr	r2, [r7, #0]
 8003f50:	4613      	mov	r3, r2
 8003f52:	00db      	lsls	r3, r3, #3
 8003f54:	4413      	add	r3, r2
 8003f56:	009b      	lsls	r3, r3, #2
 8003f58:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003f5c:	687a      	ldr	r2, [r7, #4]
 8003f5e:	4413      	add	r3, r2
 8003f60:	3304      	adds	r3, #4
 8003f62:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	69da      	ldr	r2, [r3, #28]
 8003f68:	683b      	ldr	r3, [r7, #0]
 8003f6a:	0159      	lsls	r1, r3, #5
 8003f6c:	69bb      	ldr	r3, [r7, #24]
 8003f6e:	440b      	add	r3, r1
 8003f70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f74:	691b      	ldr	r3, [r3, #16]
 8003f76:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f7a:	1ad2      	subs	r2, r2, r3
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d114      	bne.n	8003fb0 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	699b      	ldr	r3, [r3, #24]
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d109      	bne.n	8003fa2 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6818      	ldr	r0, [r3, #0]
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003f98:	461a      	mov	r2, r3
 8003f9a:	2101      	movs	r1, #1
 8003f9c:	f004 fb24 	bl	80085e8 <USB_EP0_OutStart>
 8003fa0:	e006      	b.n	8003fb0 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	691a      	ldr	r2, [r3, #16]
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	6a1b      	ldr	r3, [r3, #32]
 8003faa:	441a      	add	r2, r3
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003fb0:	683b      	ldr	r3, [r7, #0]
 8003fb2:	b2db      	uxtb	r3, r3
 8003fb4:	4619      	mov	r1, r3
 8003fb6:	6878      	ldr	r0, [r7, #4]
 8003fb8:	f008 f96a 	bl	800c290 <HAL_PCD_DataOutStageCallback>
 8003fbc:	e046      	b.n	800404c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003fbe:	697b      	ldr	r3, [r7, #20]
 8003fc0:	4a26      	ldr	r2, [pc, #152]	; (800405c <PCD_EP_OutXfrComplete_int+0x1cc>)
 8003fc2:	4293      	cmp	r3, r2
 8003fc4:	d124      	bne.n	8004010 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003fc6:	693b      	ldr	r3, [r7, #16]
 8003fc8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d00a      	beq.n	8003fe6 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003fd0:	683b      	ldr	r3, [r7, #0]
 8003fd2:	015a      	lsls	r2, r3, #5
 8003fd4:	69bb      	ldr	r3, [r7, #24]
 8003fd6:	4413      	add	r3, r2
 8003fd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fdc:	461a      	mov	r2, r3
 8003fde:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003fe2:	6093      	str	r3, [r2, #8]
 8003fe4:	e032      	b.n	800404c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003fe6:	693b      	ldr	r3, [r7, #16]
 8003fe8:	f003 0320 	and.w	r3, r3, #32
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d008      	beq.n	8004002 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	015a      	lsls	r2, r3, #5
 8003ff4:	69bb      	ldr	r3, [r7, #24]
 8003ff6:	4413      	add	r3, r2
 8003ff8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ffc:	461a      	mov	r2, r3
 8003ffe:	2320      	movs	r3, #32
 8004000:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004002:	683b      	ldr	r3, [r7, #0]
 8004004:	b2db      	uxtb	r3, r3
 8004006:	4619      	mov	r1, r3
 8004008:	6878      	ldr	r0, [r7, #4]
 800400a:	f008 f941 	bl	800c290 <HAL_PCD_DataOutStageCallback>
 800400e:	e01d      	b.n	800404c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	2b00      	cmp	r3, #0
 8004014:	d114      	bne.n	8004040 <PCD_EP_OutXfrComplete_int+0x1b0>
 8004016:	6879      	ldr	r1, [r7, #4]
 8004018:	683a      	ldr	r2, [r7, #0]
 800401a:	4613      	mov	r3, r2
 800401c:	00db      	lsls	r3, r3, #3
 800401e:	4413      	add	r3, r2
 8004020:	009b      	lsls	r3, r3, #2
 8004022:	440b      	add	r3, r1
 8004024:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	2b00      	cmp	r3, #0
 800402c:	d108      	bne.n	8004040 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6818      	ldr	r0, [r3, #0]
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004038:	461a      	mov	r2, r3
 800403a:	2100      	movs	r1, #0
 800403c:	f004 fad4 	bl	80085e8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	b2db      	uxtb	r3, r3
 8004044:	4619      	mov	r1, r3
 8004046:	6878      	ldr	r0, [r7, #4]
 8004048:	f008 f922 	bl	800c290 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800404c:	2300      	movs	r3, #0
}
 800404e:	4618      	mov	r0, r3
 8004050:	3720      	adds	r7, #32
 8004052:	46bd      	mov	sp, r7
 8004054:	bd80      	pop	{r7, pc}
 8004056:	bf00      	nop
 8004058:	4f54300a 	.word	0x4f54300a
 800405c:	4f54310a 	.word	0x4f54310a

08004060 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004060:	b580      	push	{r7, lr}
 8004062:	b086      	sub	sp, #24
 8004064:	af00      	add	r7, sp, #0
 8004066:	6078      	str	r0, [r7, #4]
 8004068:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004070:	697b      	ldr	r3, [r7, #20]
 8004072:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004074:	697b      	ldr	r3, [r7, #20]
 8004076:	333c      	adds	r3, #60	; 0x3c
 8004078:	3304      	adds	r3, #4
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	015a      	lsls	r2, r3, #5
 8004082:	693b      	ldr	r3, [r7, #16]
 8004084:	4413      	add	r3, r2
 8004086:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800408a:	689b      	ldr	r3, [r3, #8]
 800408c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	4a15      	ldr	r2, [pc, #84]	; (80040e8 <PCD_EP_OutSetupPacket_int+0x88>)
 8004092:	4293      	cmp	r3, r2
 8004094:	d90e      	bls.n	80040b4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004096:	68bb      	ldr	r3, [r7, #8]
 8004098:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800409c:	2b00      	cmp	r3, #0
 800409e:	d009      	beq.n	80040b4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	015a      	lsls	r2, r3, #5
 80040a4:	693b      	ldr	r3, [r7, #16]
 80040a6:	4413      	add	r3, r2
 80040a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040ac:	461a      	mov	r2, r3
 80040ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80040b2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80040b4:	6878      	ldr	r0, [r7, #4]
 80040b6:	f008 f8d9 	bl	800c26c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	4a0a      	ldr	r2, [pc, #40]	; (80040e8 <PCD_EP_OutSetupPacket_int+0x88>)
 80040be:	4293      	cmp	r3, r2
 80040c0:	d90c      	bls.n	80040dc <PCD_EP_OutSetupPacket_int+0x7c>
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	691b      	ldr	r3, [r3, #16]
 80040c6:	2b01      	cmp	r3, #1
 80040c8:	d108      	bne.n	80040dc <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6818      	ldr	r0, [r3, #0]
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80040d4:	461a      	mov	r2, r3
 80040d6:	2101      	movs	r1, #1
 80040d8:	f004 fa86 	bl	80085e8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80040dc:	2300      	movs	r3, #0
}
 80040de:	4618      	mov	r0, r3
 80040e0:	3718      	adds	r7, #24
 80040e2:	46bd      	mov	sp, r7
 80040e4:	bd80      	pop	{r7, pc}
 80040e6:	bf00      	nop
 80040e8:	4f54300a 	.word	0x4f54300a

080040ec <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80040ec:	b480      	push	{r7}
 80040ee:	b085      	sub	sp, #20
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
 80040f4:	460b      	mov	r3, r1
 80040f6:	70fb      	strb	r3, [r7, #3]
 80040f8:	4613      	mov	r3, r2
 80040fa:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004102:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004104:	78fb      	ldrb	r3, [r7, #3]
 8004106:	2b00      	cmp	r3, #0
 8004108:	d107      	bne.n	800411a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800410a:	883b      	ldrh	r3, [r7, #0]
 800410c:	0419      	lsls	r1, r3, #16
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	68ba      	ldr	r2, [r7, #8]
 8004114:	430a      	orrs	r2, r1
 8004116:	629a      	str	r2, [r3, #40]	; 0x28
 8004118:	e028      	b.n	800416c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004120:	0c1b      	lsrs	r3, r3, #16
 8004122:	68ba      	ldr	r2, [r7, #8]
 8004124:	4413      	add	r3, r2
 8004126:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004128:	2300      	movs	r3, #0
 800412a:	73fb      	strb	r3, [r7, #15]
 800412c:	e00d      	b.n	800414a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681a      	ldr	r2, [r3, #0]
 8004132:	7bfb      	ldrb	r3, [r7, #15]
 8004134:	3340      	adds	r3, #64	; 0x40
 8004136:	009b      	lsls	r3, r3, #2
 8004138:	4413      	add	r3, r2
 800413a:	685b      	ldr	r3, [r3, #4]
 800413c:	0c1b      	lsrs	r3, r3, #16
 800413e:	68ba      	ldr	r2, [r7, #8]
 8004140:	4413      	add	r3, r2
 8004142:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004144:	7bfb      	ldrb	r3, [r7, #15]
 8004146:	3301      	adds	r3, #1
 8004148:	73fb      	strb	r3, [r7, #15]
 800414a:	7bfa      	ldrb	r2, [r7, #15]
 800414c:	78fb      	ldrb	r3, [r7, #3]
 800414e:	3b01      	subs	r3, #1
 8004150:	429a      	cmp	r2, r3
 8004152:	d3ec      	bcc.n	800412e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004154:	883b      	ldrh	r3, [r7, #0]
 8004156:	0418      	lsls	r0, r3, #16
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6819      	ldr	r1, [r3, #0]
 800415c:	78fb      	ldrb	r3, [r7, #3]
 800415e:	3b01      	subs	r3, #1
 8004160:	68ba      	ldr	r2, [r7, #8]
 8004162:	4302      	orrs	r2, r0
 8004164:	3340      	adds	r3, #64	; 0x40
 8004166:	009b      	lsls	r3, r3, #2
 8004168:	440b      	add	r3, r1
 800416a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800416c:	2300      	movs	r3, #0
}
 800416e:	4618      	mov	r0, r3
 8004170:	3714      	adds	r7, #20
 8004172:	46bd      	mov	sp, r7
 8004174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004178:	4770      	bx	lr

0800417a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800417a:	b480      	push	{r7}
 800417c:	b083      	sub	sp, #12
 800417e:	af00      	add	r7, sp, #0
 8004180:	6078      	str	r0, [r7, #4]
 8004182:	460b      	mov	r3, r1
 8004184:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	887a      	ldrh	r2, [r7, #2]
 800418c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800418e:	2300      	movs	r3, #0
}
 8004190:	4618      	mov	r0, r3
 8004192:	370c      	adds	r7, #12
 8004194:	46bd      	mov	sp, r7
 8004196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419a:	4770      	bx	lr

0800419c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800419c:	b480      	push	{r7}
 800419e:	b083      	sub	sp, #12
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
 80041a4:	460b      	mov	r3, r1
 80041a6:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80041a8:	bf00      	nop
 80041aa:	370c      	adds	r7, #12
 80041ac:	46bd      	mov	sp, r7
 80041ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b2:	4770      	bx	lr

080041b4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80041b4:	b580      	push	{r7, lr}
 80041b6:	b086      	sub	sp, #24
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d101      	bne.n	80041c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80041c2:	2301      	movs	r3, #1
 80041c4:	e267      	b.n	8004696 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f003 0301 	and.w	r3, r3, #1
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d075      	beq.n	80042be <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80041d2:	4b88      	ldr	r3, [pc, #544]	; (80043f4 <HAL_RCC_OscConfig+0x240>)
 80041d4:	689b      	ldr	r3, [r3, #8]
 80041d6:	f003 030c 	and.w	r3, r3, #12
 80041da:	2b04      	cmp	r3, #4
 80041dc:	d00c      	beq.n	80041f8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80041de:	4b85      	ldr	r3, [pc, #532]	; (80043f4 <HAL_RCC_OscConfig+0x240>)
 80041e0:	689b      	ldr	r3, [r3, #8]
 80041e2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80041e6:	2b08      	cmp	r3, #8
 80041e8:	d112      	bne.n	8004210 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80041ea:	4b82      	ldr	r3, [pc, #520]	; (80043f4 <HAL_RCC_OscConfig+0x240>)
 80041ec:	685b      	ldr	r3, [r3, #4]
 80041ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80041f2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80041f6:	d10b      	bne.n	8004210 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041f8:	4b7e      	ldr	r3, [pc, #504]	; (80043f4 <HAL_RCC_OscConfig+0x240>)
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004200:	2b00      	cmp	r3, #0
 8004202:	d05b      	beq.n	80042bc <HAL_RCC_OscConfig+0x108>
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	685b      	ldr	r3, [r3, #4]
 8004208:	2b00      	cmp	r3, #0
 800420a:	d157      	bne.n	80042bc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800420c:	2301      	movs	r3, #1
 800420e:	e242      	b.n	8004696 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	685b      	ldr	r3, [r3, #4]
 8004214:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004218:	d106      	bne.n	8004228 <HAL_RCC_OscConfig+0x74>
 800421a:	4b76      	ldr	r3, [pc, #472]	; (80043f4 <HAL_RCC_OscConfig+0x240>)
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	4a75      	ldr	r2, [pc, #468]	; (80043f4 <HAL_RCC_OscConfig+0x240>)
 8004220:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004224:	6013      	str	r3, [r2, #0]
 8004226:	e01d      	b.n	8004264 <HAL_RCC_OscConfig+0xb0>
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	685b      	ldr	r3, [r3, #4]
 800422c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004230:	d10c      	bne.n	800424c <HAL_RCC_OscConfig+0x98>
 8004232:	4b70      	ldr	r3, [pc, #448]	; (80043f4 <HAL_RCC_OscConfig+0x240>)
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	4a6f      	ldr	r2, [pc, #444]	; (80043f4 <HAL_RCC_OscConfig+0x240>)
 8004238:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800423c:	6013      	str	r3, [r2, #0]
 800423e:	4b6d      	ldr	r3, [pc, #436]	; (80043f4 <HAL_RCC_OscConfig+0x240>)
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	4a6c      	ldr	r2, [pc, #432]	; (80043f4 <HAL_RCC_OscConfig+0x240>)
 8004244:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004248:	6013      	str	r3, [r2, #0]
 800424a:	e00b      	b.n	8004264 <HAL_RCC_OscConfig+0xb0>
 800424c:	4b69      	ldr	r3, [pc, #420]	; (80043f4 <HAL_RCC_OscConfig+0x240>)
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	4a68      	ldr	r2, [pc, #416]	; (80043f4 <HAL_RCC_OscConfig+0x240>)
 8004252:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004256:	6013      	str	r3, [r2, #0]
 8004258:	4b66      	ldr	r3, [pc, #408]	; (80043f4 <HAL_RCC_OscConfig+0x240>)
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	4a65      	ldr	r2, [pc, #404]	; (80043f4 <HAL_RCC_OscConfig+0x240>)
 800425e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004262:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	685b      	ldr	r3, [r3, #4]
 8004268:	2b00      	cmp	r3, #0
 800426a:	d013      	beq.n	8004294 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800426c:	f7fd fda2 	bl	8001db4 <HAL_GetTick>
 8004270:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004272:	e008      	b.n	8004286 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004274:	f7fd fd9e 	bl	8001db4 <HAL_GetTick>
 8004278:	4602      	mov	r2, r0
 800427a:	693b      	ldr	r3, [r7, #16]
 800427c:	1ad3      	subs	r3, r2, r3
 800427e:	2b64      	cmp	r3, #100	; 0x64
 8004280:	d901      	bls.n	8004286 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004282:	2303      	movs	r3, #3
 8004284:	e207      	b.n	8004696 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004286:	4b5b      	ldr	r3, [pc, #364]	; (80043f4 <HAL_RCC_OscConfig+0x240>)
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800428e:	2b00      	cmp	r3, #0
 8004290:	d0f0      	beq.n	8004274 <HAL_RCC_OscConfig+0xc0>
 8004292:	e014      	b.n	80042be <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004294:	f7fd fd8e 	bl	8001db4 <HAL_GetTick>
 8004298:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800429a:	e008      	b.n	80042ae <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800429c:	f7fd fd8a 	bl	8001db4 <HAL_GetTick>
 80042a0:	4602      	mov	r2, r0
 80042a2:	693b      	ldr	r3, [r7, #16]
 80042a4:	1ad3      	subs	r3, r2, r3
 80042a6:	2b64      	cmp	r3, #100	; 0x64
 80042a8:	d901      	bls.n	80042ae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80042aa:	2303      	movs	r3, #3
 80042ac:	e1f3      	b.n	8004696 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80042ae:	4b51      	ldr	r3, [pc, #324]	; (80043f4 <HAL_RCC_OscConfig+0x240>)
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d1f0      	bne.n	800429c <HAL_RCC_OscConfig+0xe8>
 80042ba:	e000      	b.n	80042be <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f003 0302 	and.w	r3, r3, #2
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d063      	beq.n	8004392 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80042ca:	4b4a      	ldr	r3, [pc, #296]	; (80043f4 <HAL_RCC_OscConfig+0x240>)
 80042cc:	689b      	ldr	r3, [r3, #8]
 80042ce:	f003 030c 	and.w	r3, r3, #12
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d00b      	beq.n	80042ee <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80042d6:	4b47      	ldr	r3, [pc, #284]	; (80043f4 <HAL_RCC_OscConfig+0x240>)
 80042d8:	689b      	ldr	r3, [r3, #8]
 80042da:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80042de:	2b08      	cmp	r3, #8
 80042e0:	d11c      	bne.n	800431c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80042e2:	4b44      	ldr	r3, [pc, #272]	; (80043f4 <HAL_RCC_OscConfig+0x240>)
 80042e4:	685b      	ldr	r3, [r3, #4]
 80042e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d116      	bne.n	800431c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80042ee:	4b41      	ldr	r3, [pc, #260]	; (80043f4 <HAL_RCC_OscConfig+0x240>)
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f003 0302 	and.w	r3, r3, #2
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d005      	beq.n	8004306 <HAL_RCC_OscConfig+0x152>
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	68db      	ldr	r3, [r3, #12]
 80042fe:	2b01      	cmp	r3, #1
 8004300:	d001      	beq.n	8004306 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004302:	2301      	movs	r3, #1
 8004304:	e1c7      	b.n	8004696 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004306:	4b3b      	ldr	r3, [pc, #236]	; (80043f4 <HAL_RCC_OscConfig+0x240>)
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	691b      	ldr	r3, [r3, #16]
 8004312:	00db      	lsls	r3, r3, #3
 8004314:	4937      	ldr	r1, [pc, #220]	; (80043f4 <HAL_RCC_OscConfig+0x240>)
 8004316:	4313      	orrs	r3, r2
 8004318:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800431a:	e03a      	b.n	8004392 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	68db      	ldr	r3, [r3, #12]
 8004320:	2b00      	cmp	r3, #0
 8004322:	d020      	beq.n	8004366 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004324:	4b34      	ldr	r3, [pc, #208]	; (80043f8 <HAL_RCC_OscConfig+0x244>)
 8004326:	2201      	movs	r2, #1
 8004328:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800432a:	f7fd fd43 	bl	8001db4 <HAL_GetTick>
 800432e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004330:	e008      	b.n	8004344 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004332:	f7fd fd3f 	bl	8001db4 <HAL_GetTick>
 8004336:	4602      	mov	r2, r0
 8004338:	693b      	ldr	r3, [r7, #16]
 800433a:	1ad3      	subs	r3, r2, r3
 800433c:	2b02      	cmp	r3, #2
 800433e:	d901      	bls.n	8004344 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004340:	2303      	movs	r3, #3
 8004342:	e1a8      	b.n	8004696 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004344:	4b2b      	ldr	r3, [pc, #172]	; (80043f4 <HAL_RCC_OscConfig+0x240>)
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f003 0302 	and.w	r3, r3, #2
 800434c:	2b00      	cmp	r3, #0
 800434e:	d0f0      	beq.n	8004332 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004350:	4b28      	ldr	r3, [pc, #160]	; (80043f4 <HAL_RCC_OscConfig+0x240>)
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	691b      	ldr	r3, [r3, #16]
 800435c:	00db      	lsls	r3, r3, #3
 800435e:	4925      	ldr	r1, [pc, #148]	; (80043f4 <HAL_RCC_OscConfig+0x240>)
 8004360:	4313      	orrs	r3, r2
 8004362:	600b      	str	r3, [r1, #0]
 8004364:	e015      	b.n	8004392 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004366:	4b24      	ldr	r3, [pc, #144]	; (80043f8 <HAL_RCC_OscConfig+0x244>)
 8004368:	2200      	movs	r2, #0
 800436a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800436c:	f7fd fd22 	bl	8001db4 <HAL_GetTick>
 8004370:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004372:	e008      	b.n	8004386 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004374:	f7fd fd1e 	bl	8001db4 <HAL_GetTick>
 8004378:	4602      	mov	r2, r0
 800437a:	693b      	ldr	r3, [r7, #16]
 800437c:	1ad3      	subs	r3, r2, r3
 800437e:	2b02      	cmp	r3, #2
 8004380:	d901      	bls.n	8004386 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004382:	2303      	movs	r3, #3
 8004384:	e187      	b.n	8004696 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004386:	4b1b      	ldr	r3, [pc, #108]	; (80043f4 <HAL_RCC_OscConfig+0x240>)
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f003 0302 	and.w	r3, r3, #2
 800438e:	2b00      	cmp	r3, #0
 8004390:	d1f0      	bne.n	8004374 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f003 0308 	and.w	r3, r3, #8
 800439a:	2b00      	cmp	r3, #0
 800439c:	d036      	beq.n	800440c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	695b      	ldr	r3, [r3, #20]
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d016      	beq.n	80043d4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80043a6:	4b15      	ldr	r3, [pc, #84]	; (80043fc <HAL_RCC_OscConfig+0x248>)
 80043a8:	2201      	movs	r2, #1
 80043aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043ac:	f7fd fd02 	bl	8001db4 <HAL_GetTick>
 80043b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80043b2:	e008      	b.n	80043c6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80043b4:	f7fd fcfe 	bl	8001db4 <HAL_GetTick>
 80043b8:	4602      	mov	r2, r0
 80043ba:	693b      	ldr	r3, [r7, #16]
 80043bc:	1ad3      	subs	r3, r2, r3
 80043be:	2b02      	cmp	r3, #2
 80043c0:	d901      	bls.n	80043c6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80043c2:	2303      	movs	r3, #3
 80043c4:	e167      	b.n	8004696 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80043c6:	4b0b      	ldr	r3, [pc, #44]	; (80043f4 <HAL_RCC_OscConfig+0x240>)
 80043c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043ca:	f003 0302 	and.w	r3, r3, #2
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d0f0      	beq.n	80043b4 <HAL_RCC_OscConfig+0x200>
 80043d2:	e01b      	b.n	800440c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80043d4:	4b09      	ldr	r3, [pc, #36]	; (80043fc <HAL_RCC_OscConfig+0x248>)
 80043d6:	2200      	movs	r2, #0
 80043d8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80043da:	f7fd fceb 	bl	8001db4 <HAL_GetTick>
 80043de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80043e0:	e00e      	b.n	8004400 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80043e2:	f7fd fce7 	bl	8001db4 <HAL_GetTick>
 80043e6:	4602      	mov	r2, r0
 80043e8:	693b      	ldr	r3, [r7, #16]
 80043ea:	1ad3      	subs	r3, r2, r3
 80043ec:	2b02      	cmp	r3, #2
 80043ee:	d907      	bls.n	8004400 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80043f0:	2303      	movs	r3, #3
 80043f2:	e150      	b.n	8004696 <HAL_RCC_OscConfig+0x4e2>
 80043f4:	40023800 	.word	0x40023800
 80043f8:	42470000 	.word	0x42470000
 80043fc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004400:	4b88      	ldr	r3, [pc, #544]	; (8004624 <HAL_RCC_OscConfig+0x470>)
 8004402:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004404:	f003 0302 	and.w	r3, r3, #2
 8004408:	2b00      	cmp	r3, #0
 800440a:	d1ea      	bne.n	80043e2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f003 0304 	and.w	r3, r3, #4
 8004414:	2b00      	cmp	r3, #0
 8004416:	f000 8097 	beq.w	8004548 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800441a:	2300      	movs	r3, #0
 800441c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800441e:	4b81      	ldr	r3, [pc, #516]	; (8004624 <HAL_RCC_OscConfig+0x470>)
 8004420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004422:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004426:	2b00      	cmp	r3, #0
 8004428:	d10f      	bne.n	800444a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800442a:	2300      	movs	r3, #0
 800442c:	60bb      	str	r3, [r7, #8]
 800442e:	4b7d      	ldr	r3, [pc, #500]	; (8004624 <HAL_RCC_OscConfig+0x470>)
 8004430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004432:	4a7c      	ldr	r2, [pc, #496]	; (8004624 <HAL_RCC_OscConfig+0x470>)
 8004434:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004438:	6413      	str	r3, [r2, #64]	; 0x40
 800443a:	4b7a      	ldr	r3, [pc, #488]	; (8004624 <HAL_RCC_OscConfig+0x470>)
 800443c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800443e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004442:	60bb      	str	r3, [r7, #8]
 8004444:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004446:	2301      	movs	r3, #1
 8004448:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800444a:	4b77      	ldr	r3, [pc, #476]	; (8004628 <HAL_RCC_OscConfig+0x474>)
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004452:	2b00      	cmp	r3, #0
 8004454:	d118      	bne.n	8004488 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004456:	4b74      	ldr	r3, [pc, #464]	; (8004628 <HAL_RCC_OscConfig+0x474>)
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	4a73      	ldr	r2, [pc, #460]	; (8004628 <HAL_RCC_OscConfig+0x474>)
 800445c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004460:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004462:	f7fd fca7 	bl	8001db4 <HAL_GetTick>
 8004466:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004468:	e008      	b.n	800447c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800446a:	f7fd fca3 	bl	8001db4 <HAL_GetTick>
 800446e:	4602      	mov	r2, r0
 8004470:	693b      	ldr	r3, [r7, #16]
 8004472:	1ad3      	subs	r3, r2, r3
 8004474:	2b02      	cmp	r3, #2
 8004476:	d901      	bls.n	800447c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004478:	2303      	movs	r3, #3
 800447a:	e10c      	b.n	8004696 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800447c:	4b6a      	ldr	r3, [pc, #424]	; (8004628 <HAL_RCC_OscConfig+0x474>)
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004484:	2b00      	cmp	r3, #0
 8004486:	d0f0      	beq.n	800446a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	689b      	ldr	r3, [r3, #8]
 800448c:	2b01      	cmp	r3, #1
 800448e:	d106      	bne.n	800449e <HAL_RCC_OscConfig+0x2ea>
 8004490:	4b64      	ldr	r3, [pc, #400]	; (8004624 <HAL_RCC_OscConfig+0x470>)
 8004492:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004494:	4a63      	ldr	r2, [pc, #396]	; (8004624 <HAL_RCC_OscConfig+0x470>)
 8004496:	f043 0301 	orr.w	r3, r3, #1
 800449a:	6713      	str	r3, [r2, #112]	; 0x70
 800449c:	e01c      	b.n	80044d8 <HAL_RCC_OscConfig+0x324>
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	689b      	ldr	r3, [r3, #8]
 80044a2:	2b05      	cmp	r3, #5
 80044a4:	d10c      	bne.n	80044c0 <HAL_RCC_OscConfig+0x30c>
 80044a6:	4b5f      	ldr	r3, [pc, #380]	; (8004624 <HAL_RCC_OscConfig+0x470>)
 80044a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044aa:	4a5e      	ldr	r2, [pc, #376]	; (8004624 <HAL_RCC_OscConfig+0x470>)
 80044ac:	f043 0304 	orr.w	r3, r3, #4
 80044b0:	6713      	str	r3, [r2, #112]	; 0x70
 80044b2:	4b5c      	ldr	r3, [pc, #368]	; (8004624 <HAL_RCC_OscConfig+0x470>)
 80044b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044b6:	4a5b      	ldr	r2, [pc, #364]	; (8004624 <HAL_RCC_OscConfig+0x470>)
 80044b8:	f043 0301 	orr.w	r3, r3, #1
 80044bc:	6713      	str	r3, [r2, #112]	; 0x70
 80044be:	e00b      	b.n	80044d8 <HAL_RCC_OscConfig+0x324>
 80044c0:	4b58      	ldr	r3, [pc, #352]	; (8004624 <HAL_RCC_OscConfig+0x470>)
 80044c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044c4:	4a57      	ldr	r2, [pc, #348]	; (8004624 <HAL_RCC_OscConfig+0x470>)
 80044c6:	f023 0301 	bic.w	r3, r3, #1
 80044ca:	6713      	str	r3, [r2, #112]	; 0x70
 80044cc:	4b55      	ldr	r3, [pc, #340]	; (8004624 <HAL_RCC_OscConfig+0x470>)
 80044ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044d0:	4a54      	ldr	r2, [pc, #336]	; (8004624 <HAL_RCC_OscConfig+0x470>)
 80044d2:	f023 0304 	bic.w	r3, r3, #4
 80044d6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	689b      	ldr	r3, [r3, #8]
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d015      	beq.n	800450c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044e0:	f7fd fc68 	bl	8001db4 <HAL_GetTick>
 80044e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044e6:	e00a      	b.n	80044fe <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80044e8:	f7fd fc64 	bl	8001db4 <HAL_GetTick>
 80044ec:	4602      	mov	r2, r0
 80044ee:	693b      	ldr	r3, [r7, #16]
 80044f0:	1ad3      	subs	r3, r2, r3
 80044f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80044f6:	4293      	cmp	r3, r2
 80044f8:	d901      	bls.n	80044fe <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80044fa:	2303      	movs	r3, #3
 80044fc:	e0cb      	b.n	8004696 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044fe:	4b49      	ldr	r3, [pc, #292]	; (8004624 <HAL_RCC_OscConfig+0x470>)
 8004500:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004502:	f003 0302 	and.w	r3, r3, #2
 8004506:	2b00      	cmp	r3, #0
 8004508:	d0ee      	beq.n	80044e8 <HAL_RCC_OscConfig+0x334>
 800450a:	e014      	b.n	8004536 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800450c:	f7fd fc52 	bl	8001db4 <HAL_GetTick>
 8004510:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004512:	e00a      	b.n	800452a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004514:	f7fd fc4e 	bl	8001db4 <HAL_GetTick>
 8004518:	4602      	mov	r2, r0
 800451a:	693b      	ldr	r3, [r7, #16]
 800451c:	1ad3      	subs	r3, r2, r3
 800451e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004522:	4293      	cmp	r3, r2
 8004524:	d901      	bls.n	800452a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004526:	2303      	movs	r3, #3
 8004528:	e0b5      	b.n	8004696 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800452a:	4b3e      	ldr	r3, [pc, #248]	; (8004624 <HAL_RCC_OscConfig+0x470>)
 800452c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800452e:	f003 0302 	and.w	r3, r3, #2
 8004532:	2b00      	cmp	r3, #0
 8004534:	d1ee      	bne.n	8004514 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004536:	7dfb      	ldrb	r3, [r7, #23]
 8004538:	2b01      	cmp	r3, #1
 800453a:	d105      	bne.n	8004548 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800453c:	4b39      	ldr	r3, [pc, #228]	; (8004624 <HAL_RCC_OscConfig+0x470>)
 800453e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004540:	4a38      	ldr	r2, [pc, #224]	; (8004624 <HAL_RCC_OscConfig+0x470>)
 8004542:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004546:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	699b      	ldr	r3, [r3, #24]
 800454c:	2b00      	cmp	r3, #0
 800454e:	f000 80a1 	beq.w	8004694 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004552:	4b34      	ldr	r3, [pc, #208]	; (8004624 <HAL_RCC_OscConfig+0x470>)
 8004554:	689b      	ldr	r3, [r3, #8]
 8004556:	f003 030c 	and.w	r3, r3, #12
 800455a:	2b08      	cmp	r3, #8
 800455c:	d05c      	beq.n	8004618 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	699b      	ldr	r3, [r3, #24]
 8004562:	2b02      	cmp	r3, #2
 8004564:	d141      	bne.n	80045ea <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004566:	4b31      	ldr	r3, [pc, #196]	; (800462c <HAL_RCC_OscConfig+0x478>)
 8004568:	2200      	movs	r2, #0
 800456a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800456c:	f7fd fc22 	bl	8001db4 <HAL_GetTick>
 8004570:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004572:	e008      	b.n	8004586 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004574:	f7fd fc1e 	bl	8001db4 <HAL_GetTick>
 8004578:	4602      	mov	r2, r0
 800457a:	693b      	ldr	r3, [r7, #16]
 800457c:	1ad3      	subs	r3, r2, r3
 800457e:	2b02      	cmp	r3, #2
 8004580:	d901      	bls.n	8004586 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004582:	2303      	movs	r3, #3
 8004584:	e087      	b.n	8004696 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004586:	4b27      	ldr	r3, [pc, #156]	; (8004624 <HAL_RCC_OscConfig+0x470>)
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800458e:	2b00      	cmp	r3, #0
 8004590:	d1f0      	bne.n	8004574 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	69da      	ldr	r2, [r3, #28]
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6a1b      	ldr	r3, [r3, #32]
 800459a:	431a      	orrs	r2, r3
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045a0:	019b      	lsls	r3, r3, #6
 80045a2:	431a      	orrs	r2, r3
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045a8:	085b      	lsrs	r3, r3, #1
 80045aa:	3b01      	subs	r3, #1
 80045ac:	041b      	lsls	r3, r3, #16
 80045ae:	431a      	orrs	r2, r3
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045b4:	061b      	lsls	r3, r3, #24
 80045b6:	491b      	ldr	r1, [pc, #108]	; (8004624 <HAL_RCC_OscConfig+0x470>)
 80045b8:	4313      	orrs	r3, r2
 80045ba:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80045bc:	4b1b      	ldr	r3, [pc, #108]	; (800462c <HAL_RCC_OscConfig+0x478>)
 80045be:	2201      	movs	r2, #1
 80045c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045c2:	f7fd fbf7 	bl	8001db4 <HAL_GetTick>
 80045c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80045c8:	e008      	b.n	80045dc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80045ca:	f7fd fbf3 	bl	8001db4 <HAL_GetTick>
 80045ce:	4602      	mov	r2, r0
 80045d0:	693b      	ldr	r3, [r7, #16]
 80045d2:	1ad3      	subs	r3, r2, r3
 80045d4:	2b02      	cmp	r3, #2
 80045d6:	d901      	bls.n	80045dc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80045d8:	2303      	movs	r3, #3
 80045da:	e05c      	b.n	8004696 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80045dc:	4b11      	ldr	r3, [pc, #68]	; (8004624 <HAL_RCC_OscConfig+0x470>)
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d0f0      	beq.n	80045ca <HAL_RCC_OscConfig+0x416>
 80045e8:	e054      	b.n	8004694 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80045ea:	4b10      	ldr	r3, [pc, #64]	; (800462c <HAL_RCC_OscConfig+0x478>)
 80045ec:	2200      	movs	r2, #0
 80045ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045f0:	f7fd fbe0 	bl	8001db4 <HAL_GetTick>
 80045f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045f6:	e008      	b.n	800460a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80045f8:	f7fd fbdc 	bl	8001db4 <HAL_GetTick>
 80045fc:	4602      	mov	r2, r0
 80045fe:	693b      	ldr	r3, [r7, #16]
 8004600:	1ad3      	subs	r3, r2, r3
 8004602:	2b02      	cmp	r3, #2
 8004604:	d901      	bls.n	800460a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004606:	2303      	movs	r3, #3
 8004608:	e045      	b.n	8004696 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800460a:	4b06      	ldr	r3, [pc, #24]	; (8004624 <HAL_RCC_OscConfig+0x470>)
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004612:	2b00      	cmp	r3, #0
 8004614:	d1f0      	bne.n	80045f8 <HAL_RCC_OscConfig+0x444>
 8004616:	e03d      	b.n	8004694 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	699b      	ldr	r3, [r3, #24]
 800461c:	2b01      	cmp	r3, #1
 800461e:	d107      	bne.n	8004630 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004620:	2301      	movs	r3, #1
 8004622:	e038      	b.n	8004696 <HAL_RCC_OscConfig+0x4e2>
 8004624:	40023800 	.word	0x40023800
 8004628:	40007000 	.word	0x40007000
 800462c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004630:	4b1b      	ldr	r3, [pc, #108]	; (80046a0 <HAL_RCC_OscConfig+0x4ec>)
 8004632:	685b      	ldr	r3, [r3, #4]
 8004634:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	699b      	ldr	r3, [r3, #24]
 800463a:	2b01      	cmp	r3, #1
 800463c:	d028      	beq.n	8004690 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004648:	429a      	cmp	r2, r3
 800464a:	d121      	bne.n	8004690 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004656:	429a      	cmp	r2, r3
 8004658:	d11a      	bne.n	8004690 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800465a:	68fa      	ldr	r2, [r7, #12]
 800465c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004660:	4013      	ands	r3, r2
 8004662:	687a      	ldr	r2, [r7, #4]
 8004664:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004666:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004668:	4293      	cmp	r3, r2
 800466a:	d111      	bne.n	8004690 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004676:	085b      	lsrs	r3, r3, #1
 8004678:	3b01      	subs	r3, #1
 800467a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800467c:	429a      	cmp	r2, r3
 800467e:	d107      	bne.n	8004690 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800468a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800468c:	429a      	cmp	r2, r3
 800468e:	d001      	beq.n	8004694 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004690:	2301      	movs	r3, #1
 8004692:	e000      	b.n	8004696 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004694:	2300      	movs	r3, #0
}
 8004696:	4618      	mov	r0, r3
 8004698:	3718      	adds	r7, #24
 800469a:	46bd      	mov	sp, r7
 800469c:	bd80      	pop	{r7, pc}
 800469e:	bf00      	nop
 80046a0:	40023800 	.word	0x40023800

080046a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80046a4:	b580      	push	{r7, lr}
 80046a6:	b084      	sub	sp, #16
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]
 80046ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d101      	bne.n	80046b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80046b4:	2301      	movs	r3, #1
 80046b6:	e0cc      	b.n	8004852 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80046b8:	4b68      	ldr	r3, [pc, #416]	; (800485c <HAL_RCC_ClockConfig+0x1b8>)
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f003 0307 	and.w	r3, r3, #7
 80046c0:	683a      	ldr	r2, [r7, #0]
 80046c2:	429a      	cmp	r2, r3
 80046c4:	d90c      	bls.n	80046e0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046c6:	4b65      	ldr	r3, [pc, #404]	; (800485c <HAL_RCC_ClockConfig+0x1b8>)
 80046c8:	683a      	ldr	r2, [r7, #0]
 80046ca:	b2d2      	uxtb	r2, r2
 80046cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80046ce:	4b63      	ldr	r3, [pc, #396]	; (800485c <HAL_RCC_ClockConfig+0x1b8>)
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f003 0307 	and.w	r3, r3, #7
 80046d6:	683a      	ldr	r2, [r7, #0]
 80046d8:	429a      	cmp	r2, r3
 80046da:	d001      	beq.n	80046e0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80046dc:	2301      	movs	r3, #1
 80046de:	e0b8      	b.n	8004852 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f003 0302 	and.w	r3, r3, #2
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d020      	beq.n	800472e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f003 0304 	and.w	r3, r3, #4
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d005      	beq.n	8004704 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80046f8:	4b59      	ldr	r3, [pc, #356]	; (8004860 <HAL_RCC_ClockConfig+0x1bc>)
 80046fa:	689b      	ldr	r3, [r3, #8]
 80046fc:	4a58      	ldr	r2, [pc, #352]	; (8004860 <HAL_RCC_ClockConfig+0x1bc>)
 80046fe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004702:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f003 0308 	and.w	r3, r3, #8
 800470c:	2b00      	cmp	r3, #0
 800470e:	d005      	beq.n	800471c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004710:	4b53      	ldr	r3, [pc, #332]	; (8004860 <HAL_RCC_ClockConfig+0x1bc>)
 8004712:	689b      	ldr	r3, [r3, #8]
 8004714:	4a52      	ldr	r2, [pc, #328]	; (8004860 <HAL_RCC_ClockConfig+0x1bc>)
 8004716:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800471a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800471c:	4b50      	ldr	r3, [pc, #320]	; (8004860 <HAL_RCC_ClockConfig+0x1bc>)
 800471e:	689b      	ldr	r3, [r3, #8]
 8004720:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	689b      	ldr	r3, [r3, #8]
 8004728:	494d      	ldr	r1, [pc, #308]	; (8004860 <HAL_RCC_ClockConfig+0x1bc>)
 800472a:	4313      	orrs	r3, r2
 800472c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f003 0301 	and.w	r3, r3, #1
 8004736:	2b00      	cmp	r3, #0
 8004738:	d044      	beq.n	80047c4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	685b      	ldr	r3, [r3, #4]
 800473e:	2b01      	cmp	r3, #1
 8004740:	d107      	bne.n	8004752 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004742:	4b47      	ldr	r3, [pc, #284]	; (8004860 <HAL_RCC_ClockConfig+0x1bc>)
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800474a:	2b00      	cmp	r3, #0
 800474c:	d119      	bne.n	8004782 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800474e:	2301      	movs	r3, #1
 8004750:	e07f      	b.n	8004852 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	685b      	ldr	r3, [r3, #4]
 8004756:	2b02      	cmp	r3, #2
 8004758:	d003      	beq.n	8004762 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800475e:	2b03      	cmp	r3, #3
 8004760:	d107      	bne.n	8004772 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004762:	4b3f      	ldr	r3, [pc, #252]	; (8004860 <HAL_RCC_ClockConfig+0x1bc>)
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800476a:	2b00      	cmp	r3, #0
 800476c:	d109      	bne.n	8004782 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800476e:	2301      	movs	r3, #1
 8004770:	e06f      	b.n	8004852 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004772:	4b3b      	ldr	r3, [pc, #236]	; (8004860 <HAL_RCC_ClockConfig+0x1bc>)
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f003 0302 	and.w	r3, r3, #2
 800477a:	2b00      	cmp	r3, #0
 800477c:	d101      	bne.n	8004782 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800477e:	2301      	movs	r3, #1
 8004780:	e067      	b.n	8004852 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004782:	4b37      	ldr	r3, [pc, #220]	; (8004860 <HAL_RCC_ClockConfig+0x1bc>)
 8004784:	689b      	ldr	r3, [r3, #8]
 8004786:	f023 0203 	bic.w	r2, r3, #3
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	685b      	ldr	r3, [r3, #4]
 800478e:	4934      	ldr	r1, [pc, #208]	; (8004860 <HAL_RCC_ClockConfig+0x1bc>)
 8004790:	4313      	orrs	r3, r2
 8004792:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004794:	f7fd fb0e 	bl	8001db4 <HAL_GetTick>
 8004798:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800479a:	e00a      	b.n	80047b2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800479c:	f7fd fb0a 	bl	8001db4 <HAL_GetTick>
 80047a0:	4602      	mov	r2, r0
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	1ad3      	subs	r3, r2, r3
 80047a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80047aa:	4293      	cmp	r3, r2
 80047ac:	d901      	bls.n	80047b2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80047ae:	2303      	movs	r3, #3
 80047b0:	e04f      	b.n	8004852 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047b2:	4b2b      	ldr	r3, [pc, #172]	; (8004860 <HAL_RCC_ClockConfig+0x1bc>)
 80047b4:	689b      	ldr	r3, [r3, #8]
 80047b6:	f003 020c 	and.w	r2, r3, #12
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	685b      	ldr	r3, [r3, #4]
 80047be:	009b      	lsls	r3, r3, #2
 80047c0:	429a      	cmp	r2, r3
 80047c2:	d1eb      	bne.n	800479c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80047c4:	4b25      	ldr	r3, [pc, #148]	; (800485c <HAL_RCC_ClockConfig+0x1b8>)
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f003 0307 	and.w	r3, r3, #7
 80047cc:	683a      	ldr	r2, [r7, #0]
 80047ce:	429a      	cmp	r2, r3
 80047d0:	d20c      	bcs.n	80047ec <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047d2:	4b22      	ldr	r3, [pc, #136]	; (800485c <HAL_RCC_ClockConfig+0x1b8>)
 80047d4:	683a      	ldr	r2, [r7, #0]
 80047d6:	b2d2      	uxtb	r2, r2
 80047d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80047da:	4b20      	ldr	r3, [pc, #128]	; (800485c <HAL_RCC_ClockConfig+0x1b8>)
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f003 0307 	and.w	r3, r3, #7
 80047e2:	683a      	ldr	r2, [r7, #0]
 80047e4:	429a      	cmp	r2, r3
 80047e6:	d001      	beq.n	80047ec <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80047e8:	2301      	movs	r3, #1
 80047ea:	e032      	b.n	8004852 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f003 0304 	and.w	r3, r3, #4
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d008      	beq.n	800480a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80047f8:	4b19      	ldr	r3, [pc, #100]	; (8004860 <HAL_RCC_ClockConfig+0x1bc>)
 80047fa:	689b      	ldr	r3, [r3, #8]
 80047fc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	68db      	ldr	r3, [r3, #12]
 8004804:	4916      	ldr	r1, [pc, #88]	; (8004860 <HAL_RCC_ClockConfig+0x1bc>)
 8004806:	4313      	orrs	r3, r2
 8004808:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f003 0308 	and.w	r3, r3, #8
 8004812:	2b00      	cmp	r3, #0
 8004814:	d009      	beq.n	800482a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004816:	4b12      	ldr	r3, [pc, #72]	; (8004860 <HAL_RCC_ClockConfig+0x1bc>)
 8004818:	689b      	ldr	r3, [r3, #8]
 800481a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	691b      	ldr	r3, [r3, #16]
 8004822:	00db      	lsls	r3, r3, #3
 8004824:	490e      	ldr	r1, [pc, #56]	; (8004860 <HAL_RCC_ClockConfig+0x1bc>)
 8004826:	4313      	orrs	r3, r2
 8004828:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800482a:	f000 f821 	bl	8004870 <HAL_RCC_GetSysClockFreq>
 800482e:	4602      	mov	r2, r0
 8004830:	4b0b      	ldr	r3, [pc, #44]	; (8004860 <HAL_RCC_ClockConfig+0x1bc>)
 8004832:	689b      	ldr	r3, [r3, #8]
 8004834:	091b      	lsrs	r3, r3, #4
 8004836:	f003 030f 	and.w	r3, r3, #15
 800483a:	490a      	ldr	r1, [pc, #40]	; (8004864 <HAL_RCC_ClockConfig+0x1c0>)
 800483c:	5ccb      	ldrb	r3, [r1, r3]
 800483e:	fa22 f303 	lsr.w	r3, r2, r3
 8004842:	4a09      	ldr	r2, [pc, #36]	; (8004868 <HAL_RCC_ClockConfig+0x1c4>)
 8004844:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004846:	4b09      	ldr	r3, [pc, #36]	; (800486c <HAL_RCC_ClockConfig+0x1c8>)
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	4618      	mov	r0, r3
 800484c:	f7fd fa6e 	bl	8001d2c <HAL_InitTick>

  return HAL_OK;
 8004850:	2300      	movs	r3, #0
}
 8004852:	4618      	mov	r0, r3
 8004854:	3710      	adds	r7, #16
 8004856:	46bd      	mov	sp, r7
 8004858:	bd80      	pop	{r7, pc}
 800485a:	bf00      	nop
 800485c:	40023c00 	.word	0x40023c00
 8004860:	40023800 	.word	0x40023800
 8004864:	0800c8f8 	.word	0x0800c8f8
 8004868:	20000004 	.word	0x20000004
 800486c:	20000008 	.word	0x20000008

08004870 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004870:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004874:	b090      	sub	sp, #64	; 0x40
 8004876:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004878:	2300      	movs	r3, #0
 800487a:	637b      	str	r3, [r7, #52]	; 0x34
 800487c:	2300      	movs	r3, #0
 800487e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004880:	2300      	movs	r3, #0
 8004882:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8004884:	2300      	movs	r3, #0
 8004886:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004888:	4b59      	ldr	r3, [pc, #356]	; (80049f0 <HAL_RCC_GetSysClockFreq+0x180>)
 800488a:	689b      	ldr	r3, [r3, #8]
 800488c:	f003 030c 	and.w	r3, r3, #12
 8004890:	2b08      	cmp	r3, #8
 8004892:	d00d      	beq.n	80048b0 <HAL_RCC_GetSysClockFreq+0x40>
 8004894:	2b08      	cmp	r3, #8
 8004896:	f200 80a1 	bhi.w	80049dc <HAL_RCC_GetSysClockFreq+0x16c>
 800489a:	2b00      	cmp	r3, #0
 800489c:	d002      	beq.n	80048a4 <HAL_RCC_GetSysClockFreq+0x34>
 800489e:	2b04      	cmp	r3, #4
 80048a0:	d003      	beq.n	80048aa <HAL_RCC_GetSysClockFreq+0x3a>
 80048a2:	e09b      	b.n	80049dc <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80048a4:	4b53      	ldr	r3, [pc, #332]	; (80049f4 <HAL_RCC_GetSysClockFreq+0x184>)
 80048a6:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80048a8:	e09b      	b.n	80049e2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80048aa:	4b53      	ldr	r3, [pc, #332]	; (80049f8 <HAL_RCC_GetSysClockFreq+0x188>)
 80048ac:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80048ae:	e098      	b.n	80049e2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80048b0:	4b4f      	ldr	r3, [pc, #316]	; (80049f0 <HAL_RCC_GetSysClockFreq+0x180>)
 80048b2:	685b      	ldr	r3, [r3, #4]
 80048b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80048b8:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80048ba:	4b4d      	ldr	r3, [pc, #308]	; (80049f0 <HAL_RCC_GetSysClockFreq+0x180>)
 80048bc:	685b      	ldr	r3, [r3, #4]
 80048be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d028      	beq.n	8004918 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80048c6:	4b4a      	ldr	r3, [pc, #296]	; (80049f0 <HAL_RCC_GetSysClockFreq+0x180>)
 80048c8:	685b      	ldr	r3, [r3, #4]
 80048ca:	099b      	lsrs	r3, r3, #6
 80048cc:	2200      	movs	r2, #0
 80048ce:	623b      	str	r3, [r7, #32]
 80048d0:	627a      	str	r2, [r7, #36]	; 0x24
 80048d2:	6a3b      	ldr	r3, [r7, #32]
 80048d4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80048d8:	2100      	movs	r1, #0
 80048da:	4b47      	ldr	r3, [pc, #284]	; (80049f8 <HAL_RCC_GetSysClockFreq+0x188>)
 80048dc:	fb03 f201 	mul.w	r2, r3, r1
 80048e0:	2300      	movs	r3, #0
 80048e2:	fb00 f303 	mul.w	r3, r0, r3
 80048e6:	4413      	add	r3, r2
 80048e8:	4a43      	ldr	r2, [pc, #268]	; (80049f8 <HAL_RCC_GetSysClockFreq+0x188>)
 80048ea:	fba0 1202 	umull	r1, r2, r0, r2
 80048ee:	62fa      	str	r2, [r7, #44]	; 0x2c
 80048f0:	460a      	mov	r2, r1
 80048f2:	62ba      	str	r2, [r7, #40]	; 0x28
 80048f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80048f6:	4413      	add	r3, r2
 80048f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80048fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048fc:	2200      	movs	r2, #0
 80048fe:	61bb      	str	r3, [r7, #24]
 8004900:	61fa      	str	r2, [r7, #28]
 8004902:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004906:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800490a:	f7fb fc63 	bl	80001d4 <__aeabi_uldivmod>
 800490e:	4602      	mov	r2, r0
 8004910:	460b      	mov	r3, r1
 8004912:	4613      	mov	r3, r2
 8004914:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004916:	e053      	b.n	80049c0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004918:	4b35      	ldr	r3, [pc, #212]	; (80049f0 <HAL_RCC_GetSysClockFreq+0x180>)
 800491a:	685b      	ldr	r3, [r3, #4]
 800491c:	099b      	lsrs	r3, r3, #6
 800491e:	2200      	movs	r2, #0
 8004920:	613b      	str	r3, [r7, #16]
 8004922:	617a      	str	r2, [r7, #20]
 8004924:	693b      	ldr	r3, [r7, #16]
 8004926:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800492a:	f04f 0b00 	mov.w	fp, #0
 800492e:	4652      	mov	r2, sl
 8004930:	465b      	mov	r3, fp
 8004932:	f04f 0000 	mov.w	r0, #0
 8004936:	f04f 0100 	mov.w	r1, #0
 800493a:	0159      	lsls	r1, r3, #5
 800493c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004940:	0150      	lsls	r0, r2, #5
 8004942:	4602      	mov	r2, r0
 8004944:	460b      	mov	r3, r1
 8004946:	ebb2 080a 	subs.w	r8, r2, sl
 800494a:	eb63 090b 	sbc.w	r9, r3, fp
 800494e:	f04f 0200 	mov.w	r2, #0
 8004952:	f04f 0300 	mov.w	r3, #0
 8004956:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800495a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800495e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004962:	ebb2 0408 	subs.w	r4, r2, r8
 8004966:	eb63 0509 	sbc.w	r5, r3, r9
 800496a:	f04f 0200 	mov.w	r2, #0
 800496e:	f04f 0300 	mov.w	r3, #0
 8004972:	00eb      	lsls	r3, r5, #3
 8004974:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004978:	00e2      	lsls	r2, r4, #3
 800497a:	4614      	mov	r4, r2
 800497c:	461d      	mov	r5, r3
 800497e:	eb14 030a 	adds.w	r3, r4, sl
 8004982:	603b      	str	r3, [r7, #0]
 8004984:	eb45 030b 	adc.w	r3, r5, fp
 8004988:	607b      	str	r3, [r7, #4]
 800498a:	f04f 0200 	mov.w	r2, #0
 800498e:	f04f 0300 	mov.w	r3, #0
 8004992:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004996:	4629      	mov	r1, r5
 8004998:	028b      	lsls	r3, r1, #10
 800499a:	4621      	mov	r1, r4
 800499c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80049a0:	4621      	mov	r1, r4
 80049a2:	028a      	lsls	r2, r1, #10
 80049a4:	4610      	mov	r0, r2
 80049a6:	4619      	mov	r1, r3
 80049a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049aa:	2200      	movs	r2, #0
 80049ac:	60bb      	str	r3, [r7, #8]
 80049ae:	60fa      	str	r2, [r7, #12]
 80049b0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80049b4:	f7fb fc0e 	bl	80001d4 <__aeabi_uldivmod>
 80049b8:	4602      	mov	r2, r0
 80049ba:	460b      	mov	r3, r1
 80049bc:	4613      	mov	r3, r2
 80049be:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80049c0:	4b0b      	ldr	r3, [pc, #44]	; (80049f0 <HAL_RCC_GetSysClockFreq+0x180>)
 80049c2:	685b      	ldr	r3, [r3, #4]
 80049c4:	0c1b      	lsrs	r3, r3, #16
 80049c6:	f003 0303 	and.w	r3, r3, #3
 80049ca:	3301      	adds	r3, #1
 80049cc:	005b      	lsls	r3, r3, #1
 80049ce:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80049d0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80049d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80049d8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80049da:	e002      	b.n	80049e2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80049dc:	4b05      	ldr	r3, [pc, #20]	; (80049f4 <HAL_RCC_GetSysClockFreq+0x184>)
 80049de:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80049e0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80049e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80049e4:	4618      	mov	r0, r3
 80049e6:	3740      	adds	r7, #64	; 0x40
 80049e8:	46bd      	mov	sp, r7
 80049ea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80049ee:	bf00      	nop
 80049f0:	40023800 	.word	0x40023800
 80049f4:	00f42400 	.word	0x00f42400
 80049f8:	017d7840 	.word	0x017d7840

080049fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80049fc:	b480      	push	{r7}
 80049fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004a00:	4b03      	ldr	r3, [pc, #12]	; (8004a10 <HAL_RCC_GetHCLKFreq+0x14>)
 8004a02:	681b      	ldr	r3, [r3, #0]
}
 8004a04:	4618      	mov	r0, r3
 8004a06:	46bd      	mov	sp, r7
 8004a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0c:	4770      	bx	lr
 8004a0e:	bf00      	nop
 8004a10:	20000004 	.word	0x20000004

08004a14 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004a14:	b580      	push	{r7, lr}
 8004a16:	b082      	sub	sp, #8
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d101      	bne.n	8004a26 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004a22:	2301      	movs	r3, #1
 8004a24:	e07b      	b.n	8004b1e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d108      	bne.n	8004a40 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	685b      	ldr	r3, [r3, #4]
 8004a32:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004a36:	d009      	beq.n	8004a4c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	61da      	str	r2, [r3, #28]
 8004a3e:	e005      	b.n	8004a4c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	2200      	movs	r2, #0
 8004a44:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	2200      	movs	r2, #0
 8004a4a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2200      	movs	r2, #0
 8004a50:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004a58:	b2db      	uxtb	r3, r3
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d106      	bne.n	8004a6c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	2200      	movs	r2, #0
 8004a62:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004a66:	6878      	ldr	r0, [r7, #4]
 8004a68:	f7fc ff9e 	bl	80019a8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2202      	movs	r2, #2
 8004a70:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	681a      	ldr	r2, [r3, #0]
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a82:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	685b      	ldr	r3, [r3, #4]
 8004a88:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	689b      	ldr	r3, [r3, #8]
 8004a90:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004a94:	431a      	orrs	r2, r3
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	68db      	ldr	r3, [r3, #12]
 8004a9a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a9e:	431a      	orrs	r2, r3
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	691b      	ldr	r3, [r3, #16]
 8004aa4:	f003 0302 	and.w	r3, r3, #2
 8004aa8:	431a      	orrs	r2, r3
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	695b      	ldr	r3, [r3, #20]
 8004aae:	f003 0301 	and.w	r3, r3, #1
 8004ab2:	431a      	orrs	r2, r3
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	699b      	ldr	r3, [r3, #24]
 8004ab8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004abc:	431a      	orrs	r2, r3
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	69db      	ldr	r3, [r3, #28]
 8004ac2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004ac6:	431a      	orrs	r2, r3
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	6a1b      	ldr	r3, [r3, #32]
 8004acc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ad0:	ea42 0103 	orr.w	r1, r2, r3
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ad8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	430a      	orrs	r2, r1
 8004ae2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	699b      	ldr	r3, [r3, #24]
 8004ae8:	0c1b      	lsrs	r3, r3, #16
 8004aea:	f003 0104 	and.w	r1, r3, #4
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004af2:	f003 0210 	and.w	r2, r3, #16
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	430a      	orrs	r2, r1
 8004afc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	69da      	ldr	r2, [r3, #28]
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004b0c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	2200      	movs	r2, #0
 8004b12:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2201      	movs	r2, #1
 8004b18:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004b1c:	2300      	movs	r3, #0
}
 8004b1e:	4618      	mov	r0, r3
 8004b20:	3708      	adds	r7, #8
 8004b22:	46bd      	mov	sp, r7
 8004b24:	bd80      	pop	{r7, pc}

08004b26 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b26:	b580      	push	{r7, lr}
 8004b28:	b088      	sub	sp, #32
 8004b2a:	af00      	add	r7, sp, #0
 8004b2c:	60f8      	str	r0, [r7, #12]
 8004b2e:	60b9      	str	r1, [r7, #8]
 8004b30:	603b      	str	r3, [r7, #0]
 8004b32:	4613      	mov	r3, r2
 8004b34:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004b36:	2300      	movs	r3, #0
 8004b38:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004b40:	2b01      	cmp	r3, #1
 8004b42:	d101      	bne.n	8004b48 <HAL_SPI_Transmit+0x22>
 8004b44:	2302      	movs	r3, #2
 8004b46:	e126      	b.n	8004d96 <HAL_SPI_Transmit+0x270>
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	2201      	movs	r2, #1
 8004b4c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004b50:	f7fd f930 	bl	8001db4 <HAL_GetTick>
 8004b54:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004b56:	88fb      	ldrh	r3, [r7, #6]
 8004b58:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004b60:	b2db      	uxtb	r3, r3
 8004b62:	2b01      	cmp	r3, #1
 8004b64:	d002      	beq.n	8004b6c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004b66:	2302      	movs	r3, #2
 8004b68:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004b6a:	e10b      	b.n	8004d84 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004b6c:	68bb      	ldr	r3, [r7, #8]
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d002      	beq.n	8004b78 <HAL_SPI_Transmit+0x52>
 8004b72:	88fb      	ldrh	r3, [r7, #6]
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d102      	bne.n	8004b7e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004b78:	2301      	movs	r3, #1
 8004b7a:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004b7c:	e102      	b.n	8004d84 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	2203      	movs	r2, #3
 8004b82:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	2200      	movs	r2, #0
 8004b8a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	68ba      	ldr	r2, [r7, #8]
 8004b90:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	88fa      	ldrh	r2, [r7, #6]
 8004b96:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	88fa      	ldrh	r2, [r7, #6]
 8004b9c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	2200      	movs	r2, #0
 8004ba8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	2200      	movs	r2, #0
 8004bae:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	2200      	movs	r2, #0
 8004bba:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	689b      	ldr	r3, [r3, #8]
 8004bc0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004bc4:	d10f      	bne.n	8004be6 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	681a      	ldr	r2, [r3, #0]
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004bd4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	681a      	ldr	r2, [r3, #0]
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004be4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bf0:	2b40      	cmp	r3, #64	; 0x40
 8004bf2:	d007      	beq.n	8004c04 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	681a      	ldr	r2, [r3, #0]
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004c02:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	68db      	ldr	r3, [r3, #12]
 8004c08:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c0c:	d14b      	bne.n	8004ca6 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	685b      	ldr	r3, [r3, #4]
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d002      	beq.n	8004c1c <HAL_SPI_Transmit+0xf6>
 8004c16:	8afb      	ldrh	r3, [r7, #22]
 8004c18:	2b01      	cmp	r3, #1
 8004c1a:	d13e      	bne.n	8004c9a <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c20:	881a      	ldrh	r2, [r3, #0]
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c2c:	1c9a      	adds	r2, r3, #2
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004c36:	b29b      	uxth	r3, r3
 8004c38:	3b01      	subs	r3, #1
 8004c3a:	b29a      	uxth	r2, r3
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004c40:	e02b      	b.n	8004c9a <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	689b      	ldr	r3, [r3, #8]
 8004c48:	f003 0302 	and.w	r3, r3, #2
 8004c4c:	2b02      	cmp	r3, #2
 8004c4e:	d112      	bne.n	8004c76 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c54:	881a      	ldrh	r2, [r3, #0]
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c60:	1c9a      	adds	r2, r3, #2
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004c6a:	b29b      	uxth	r3, r3
 8004c6c:	3b01      	subs	r3, #1
 8004c6e:	b29a      	uxth	r2, r3
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	86da      	strh	r2, [r3, #54]	; 0x36
 8004c74:	e011      	b.n	8004c9a <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004c76:	f7fd f89d 	bl	8001db4 <HAL_GetTick>
 8004c7a:	4602      	mov	r2, r0
 8004c7c:	69bb      	ldr	r3, [r7, #24]
 8004c7e:	1ad3      	subs	r3, r2, r3
 8004c80:	683a      	ldr	r2, [r7, #0]
 8004c82:	429a      	cmp	r2, r3
 8004c84:	d803      	bhi.n	8004c8e <HAL_SPI_Transmit+0x168>
 8004c86:	683b      	ldr	r3, [r7, #0]
 8004c88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c8c:	d102      	bne.n	8004c94 <HAL_SPI_Transmit+0x16e>
 8004c8e:	683b      	ldr	r3, [r7, #0]
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d102      	bne.n	8004c9a <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8004c94:	2303      	movs	r3, #3
 8004c96:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004c98:	e074      	b.n	8004d84 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004c9e:	b29b      	uxth	r3, r3
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d1ce      	bne.n	8004c42 <HAL_SPI_Transmit+0x11c>
 8004ca4:	e04c      	b.n	8004d40 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	685b      	ldr	r3, [r3, #4]
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d002      	beq.n	8004cb4 <HAL_SPI_Transmit+0x18e>
 8004cae:	8afb      	ldrh	r3, [r7, #22]
 8004cb0:	2b01      	cmp	r3, #1
 8004cb2:	d140      	bne.n	8004d36 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	330c      	adds	r3, #12
 8004cbe:	7812      	ldrb	r2, [r2, #0]
 8004cc0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cc6:	1c5a      	adds	r2, r3, #1
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004cd0:	b29b      	uxth	r3, r3
 8004cd2:	3b01      	subs	r3, #1
 8004cd4:	b29a      	uxth	r2, r3
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004cda:	e02c      	b.n	8004d36 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	689b      	ldr	r3, [r3, #8]
 8004ce2:	f003 0302 	and.w	r3, r3, #2
 8004ce6:	2b02      	cmp	r3, #2
 8004ce8:	d113      	bne.n	8004d12 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	330c      	adds	r3, #12
 8004cf4:	7812      	ldrb	r2, [r2, #0]
 8004cf6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cfc:	1c5a      	adds	r2, r3, #1
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004d06:	b29b      	uxth	r3, r3
 8004d08:	3b01      	subs	r3, #1
 8004d0a:	b29a      	uxth	r2, r3
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	86da      	strh	r2, [r3, #54]	; 0x36
 8004d10:	e011      	b.n	8004d36 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004d12:	f7fd f84f 	bl	8001db4 <HAL_GetTick>
 8004d16:	4602      	mov	r2, r0
 8004d18:	69bb      	ldr	r3, [r7, #24]
 8004d1a:	1ad3      	subs	r3, r2, r3
 8004d1c:	683a      	ldr	r2, [r7, #0]
 8004d1e:	429a      	cmp	r2, r3
 8004d20:	d803      	bhi.n	8004d2a <HAL_SPI_Transmit+0x204>
 8004d22:	683b      	ldr	r3, [r7, #0]
 8004d24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d28:	d102      	bne.n	8004d30 <HAL_SPI_Transmit+0x20a>
 8004d2a:	683b      	ldr	r3, [r7, #0]
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d102      	bne.n	8004d36 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8004d30:	2303      	movs	r3, #3
 8004d32:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004d34:	e026      	b.n	8004d84 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004d3a:	b29b      	uxth	r3, r3
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d1cd      	bne.n	8004cdc <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004d40:	69ba      	ldr	r2, [r7, #24]
 8004d42:	6839      	ldr	r1, [r7, #0]
 8004d44:	68f8      	ldr	r0, [r7, #12]
 8004d46:	f000 ff9f 	bl	8005c88 <SPI_EndRxTxTransaction>
 8004d4a:	4603      	mov	r3, r0
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d002      	beq.n	8004d56 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	2220      	movs	r2, #32
 8004d54:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	689b      	ldr	r3, [r3, #8]
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d10a      	bne.n	8004d74 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004d5e:	2300      	movs	r3, #0
 8004d60:	613b      	str	r3, [r7, #16]
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	68db      	ldr	r3, [r3, #12]
 8004d68:	613b      	str	r3, [r7, #16]
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	689b      	ldr	r3, [r3, #8]
 8004d70:	613b      	str	r3, [r7, #16]
 8004d72:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d002      	beq.n	8004d82 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8004d7c:	2301      	movs	r3, #1
 8004d7e:	77fb      	strb	r3, [r7, #31]
 8004d80:	e000      	b.n	8004d84 <HAL_SPI_Transmit+0x25e>
  }

error:
 8004d82:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	2201      	movs	r2, #1
 8004d88:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	2200      	movs	r2, #0
 8004d90:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004d94:	7ffb      	ldrb	r3, [r7, #31]
}
 8004d96:	4618      	mov	r0, r3
 8004d98:	3720      	adds	r7, #32
 8004d9a:	46bd      	mov	sp, r7
 8004d9c:	bd80      	pop	{r7, pc}

08004d9e <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d9e:	b580      	push	{r7, lr}
 8004da0:	b088      	sub	sp, #32
 8004da2:	af02      	add	r7, sp, #8
 8004da4:	60f8      	str	r0, [r7, #12]
 8004da6:	60b9      	str	r1, [r7, #8]
 8004da8:	603b      	str	r3, [r7, #0]
 8004daa:	4613      	mov	r3, r2
 8004dac:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004dae:	2300      	movs	r3, #0
 8004db0:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	685b      	ldr	r3, [r3, #4]
 8004db6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004dba:	d112      	bne.n	8004de2 <HAL_SPI_Receive+0x44>
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	689b      	ldr	r3, [r3, #8]
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d10e      	bne.n	8004de2 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	2204      	movs	r2, #4
 8004dc8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004dcc:	88fa      	ldrh	r2, [r7, #6]
 8004dce:	683b      	ldr	r3, [r7, #0]
 8004dd0:	9300      	str	r3, [sp, #0]
 8004dd2:	4613      	mov	r3, r2
 8004dd4:	68ba      	ldr	r2, [r7, #8]
 8004dd6:	68b9      	ldr	r1, [r7, #8]
 8004dd8:	68f8      	ldr	r0, [r7, #12]
 8004dda:	f000 f8f1 	bl	8004fc0 <HAL_SPI_TransmitReceive>
 8004dde:	4603      	mov	r3, r0
 8004de0:	e0ea      	b.n	8004fb8 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004de8:	2b01      	cmp	r3, #1
 8004dea:	d101      	bne.n	8004df0 <HAL_SPI_Receive+0x52>
 8004dec:	2302      	movs	r3, #2
 8004dee:	e0e3      	b.n	8004fb8 <HAL_SPI_Receive+0x21a>
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	2201      	movs	r2, #1
 8004df4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004df8:	f7fc ffdc 	bl	8001db4 <HAL_GetTick>
 8004dfc:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004e04:	b2db      	uxtb	r3, r3
 8004e06:	2b01      	cmp	r3, #1
 8004e08:	d002      	beq.n	8004e10 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8004e0a:	2302      	movs	r3, #2
 8004e0c:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004e0e:	e0ca      	b.n	8004fa6 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8004e10:	68bb      	ldr	r3, [r7, #8]
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d002      	beq.n	8004e1c <HAL_SPI_Receive+0x7e>
 8004e16:	88fb      	ldrh	r3, [r7, #6]
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d102      	bne.n	8004e22 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004e1c:	2301      	movs	r3, #1
 8004e1e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004e20:	e0c1      	b.n	8004fa6 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	2204      	movs	r2, #4
 8004e26:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	2200      	movs	r2, #0
 8004e2e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	68ba      	ldr	r2, [r7, #8]
 8004e34:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	88fa      	ldrh	r2, [r7, #6]
 8004e3a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	88fa      	ldrh	r2, [r7, #6]
 8004e40:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	2200      	movs	r2, #0
 8004e46:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	2200      	movs	r2, #0
 8004e4c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	2200      	movs	r2, #0
 8004e52:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	2200      	movs	r2, #0
 8004e58:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	689b      	ldr	r3, [r3, #8]
 8004e64:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e68:	d10f      	bne.n	8004e8a <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	681a      	ldr	r2, [r3, #0]
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004e78:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	681a      	ldr	r2, [r3, #0]
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004e88:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e94:	2b40      	cmp	r3, #64	; 0x40
 8004e96:	d007      	beq.n	8004ea8 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	681a      	ldr	r2, [r3, #0]
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004ea6:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	68db      	ldr	r3, [r3, #12]
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d162      	bne.n	8004f76 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004eb0:	e02e      	b.n	8004f10 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	689b      	ldr	r3, [r3, #8]
 8004eb8:	f003 0301 	and.w	r3, r3, #1
 8004ebc:	2b01      	cmp	r3, #1
 8004ebe:	d115      	bne.n	8004eec <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f103 020c 	add.w	r2, r3, #12
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ecc:	7812      	ldrb	r2, [r2, #0]
 8004ece:	b2d2      	uxtb	r2, r2
 8004ed0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ed6:	1c5a      	adds	r2, r3, #1
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ee0:	b29b      	uxth	r3, r3
 8004ee2:	3b01      	subs	r3, #1
 8004ee4:	b29a      	uxth	r2, r3
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004eea:	e011      	b.n	8004f10 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004eec:	f7fc ff62 	bl	8001db4 <HAL_GetTick>
 8004ef0:	4602      	mov	r2, r0
 8004ef2:	693b      	ldr	r3, [r7, #16]
 8004ef4:	1ad3      	subs	r3, r2, r3
 8004ef6:	683a      	ldr	r2, [r7, #0]
 8004ef8:	429a      	cmp	r2, r3
 8004efa:	d803      	bhi.n	8004f04 <HAL_SPI_Receive+0x166>
 8004efc:	683b      	ldr	r3, [r7, #0]
 8004efe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f02:	d102      	bne.n	8004f0a <HAL_SPI_Receive+0x16c>
 8004f04:	683b      	ldr	r3, [r7, #0]
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d102      	bne.n	8004f10 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8004f0a:	2303      	movs	r3, #3
 8004f0c:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004f0e:	e04a      	b.n	8004fa6 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f14:	b29b      	uxth	r3, r3
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d1cb      	bne.n	8004eb2 <HAL_SPI_Receive+0x114>
 8004f1a:	e031      	b.n	8004f80 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	689b      	ldr	r3, [r3, #8]
 8004f22:	f003 0301 	and.w	r3, r3, #1
 8004f26:	2b01      	cmp	r3, #1
 8004f28:	d113      	bne.n	8004f52 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	68da      	ldr	r2, [r3, #12]
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f34:	b292      	uxth	r2, r2
 8004f36:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f3c:	1c9a      	adds	r2, r3, #2
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f46:	b29b      	uxth	r3, r3
 8004f48:	3b01      	subs	r3, #1
 8004f4a:	b29a      	uxth	r2, r3
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004f50:	e011      	b.n	8004f76 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004f52:	f7fc ff2f 	bl	8001db4 <HAL_GetTick>
 8004f56:	4602      	mov	r2, r0
 8004f58:	693b      	ldr	r3, [r7, #16]
 8004f5a:	1ad3      	subs	r3, r2, r3
 8004f5c:	683a      	ldr	r2, [r7, #0]
 8004f5e:	429a      	cmp	r2, r3
 8004f60:	d803      	bhi.n	8004f6a <HAL_SPI_Receive+0x1cc>
 8004f62:	683b      	ldr	r3, [r7, #0]
 8004f64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f68:	d102      	bne.n	8004f70 <HAL_SPI_Receive+0x1d2>
 8004f6a:	683b      	ldr	r3, [r7, #0]
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d102      	bne.n	8004f76 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8004f70:	2303      	movs	r3, #3
 8004f72:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004f74:	e017      	b.n	8004fa6 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f7a:	b29b      	uxth	r3, r3
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d1cd      	bne.n	8004f1c <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004f80:	693a      	ldr	r2, [r7, #16]
 8004f82:	6839      	ldr	r1, [r7, #0]
 8004f84:	68f8      	ldr	r0, [r7, #12]
 8004f86:	f000 fe19 	bl	8005bbc <SPI_EndRxTransaction>
 8004f8a:	4603      	mov	r3, r0
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d002      	beq.n	8004f96 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	2220      	movs	r2, #32
 8004f94:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d002      	beq.n	8004fa4 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8004f9e:	2301      	movs	r3, #1
 8004fa0:	75fb      	strb	r3, [r7, #23]
 8004fa2:	e000      	b.n	8004fa6 <HAL_SPI_Receive+0x208>
  }

error :
 8004fa4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	2201      	movs	r2, #1
 8004faa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	2200      	movs	r2, #0
 8004fb2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004fb6:	7dfb      	ldrb	r3, [r7, #23]
}
 8004fb8:	4618      	mov	r0, r3
 8004fba:	3718      	adds	r7, #24
 8004fbc:	46bd      	mov	sp, r7
 8004fbe:	bd80      	pop	{r7, pc}

08004fc0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004fc0:	b580      	push	{r7, lr}
 8004fc2:	b08c      	sub	sp, #48	; 0x30
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	60f8      	str	r0, [r7, #12]
 8004fc8:	60b9      	str	r1, [r7, #8]
 8004fca:	607a      	str	r2, [r7, #4]
 8004fcc:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004fce:	2301      	movs	r3, #1
 8004fd0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004fd2:	2300      	movs	r3, #0
 8004fd4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004fde:	2b01      	cmp	r3, #1
 8004fe0:	d101      	bne.n	8004fe6 <HAL_SPI_TransmitReceive+0x26>
 8004fe2:	2302      	movs	r3, #2
 8004fe4:	e18a      	b.n	80052fc <HAL_SPI_TransmitReceive+0x33c>
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	2201      	movs	r2, #1
 8004fea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004fee:	f7fc fee1 	bl	8001db4 <HAL_GetTick>
 8004ff2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004ffa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	685b      	ldr	r3, [r3, #4]
 8005002:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8005004:	887b      	ldrh	r3, [r7, #2]
 8005006:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005008:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800500c:	2b01      	cmp	r3, #1
 800500e:	d00f      	beq.n	8005030 <HAL_SPI_TransmitReceive+0x70>
 8005010:	69fb      	ldr	r3, [r7, #28]
 8005012:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005016:	d107      	bne.n	8005028 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	689b      	ldr	r3, [r3, #8]
 800501c:	2b00      	cmp	r3, #0
 800501e:	d103      	bne.n	8005028 <HAL_SPI_TransmitReceive+0x68>
 8005020:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005024:	2b04      	cmp	r3, #4
 8005026:	d003      	beq.n	8005030 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8005028:	2302      	movs	r3, #2
 800502a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800502e:	e15b      	b.n	80052e8 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005030:	68bb      	ldr	r3, [r7, #8]
 8005032:	2b00      	cmp	r3, #0
 8005034:	d005      	beq.n	8005042 <HAL_SPI_TransmitReceive+0x82>
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	2b00      	cmp	r3, #0
 800503a:	d002      	beq.n	8005042 <HAL_SPI_TransmitReceive+0x82>
 800503c:	887b      	ldrh	r3, [r7, #2]
 800503e:	2b00      	cmp	r3, #0
 8005040:	d103      	bne.n	800504a <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8005042:	2301      	movs	r3, #1
 8005044:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005048:	e14e      	b.n	80052e8 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005050:	b2db      	uxtb	r3, r3
 8005052:	2b04      	cmp	r3, #4
 8005054:	d003      	beq.n	800505e <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	2205      	movs	r2, #5
 800505a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	2200      	movs	r2, #0
 8005062:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	687a      	ldr	r2, [r7, #4]
 8005068:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	887a      	ldrh	r2, [r7, #2]
 800506e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	887a      	ldrh	r2, [r7, #2]
 8005074:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	68ba      	ldr	r2, [r7, #8]
 800507a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	887a      	ldrh	r2, [r7, #2]
 8005080:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	887a      	ldrh	r2, [r7, #2]
 8005086:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	2200      	movs	r2, #0
 800508c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	2200      	movs	r2, #0
 8005092:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800509e:	2b40      	cmp	r3, #64	; 0x40
 80050a0:	d007      	beq.n	80050b2 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	681a      	ldr	r2, [r3, #0]
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80050b0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	68db      	ldr	r3, [r3, #12]
 80050b6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80050ba:	d178      	bne.n	80051ae <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	685b      	ldr	r3, [r3, #4]
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d002      	beq.n	80050ca <HAL_SPI_TransmitReceive+0x10a>
 80050c4:	8b7b      	ldrh	r3, [r7, #26]
 80050c6:	2b01      	cmp	r3, #1
 80050c8:	d166      	bne.n	8005198 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050ce:	881a      	ldrh	r2, [r3, #0]
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050da:	1c9a      	adds	r2, r3, #2
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80050e4:	b29b      	uxth	r3, r3
 80050e6:	3b01      	subs	r3, #1
 80050e8:	b29a      	uxth	r2, r3
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80050ee:	e053      	b.n	8005198 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	689b      	ldr	r3, [r3, #8]
 80050f6:	f003 0302 	and.w	r3, r3, #2
 80050fa:	2b02      	cmp	r3, #2
 80050fc:	d11b      	bne.n	8005136 <HAL_SPI_TransmitReceive+0x176>
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005102:	b29b      	uxth	r3, r3
 8005104:	2b00      	cmp	r3, #0
 8005106:	d016      	beq.n	8005136 <HAL_SPI_TransmitReceive+0x176>
 8005108:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800510a:	2b01      	cmp	r3, #1
 800510c:	d113      	bne.n	8005136 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005112:	881a      	ldrh	r2, [r3, #0]
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800511e:	1c9a      	adds	r2, r3, #2
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005128:	b29b      	uxth	r3, r3
 800512a:	3b01      	subs	r3, #1
 800512c:	b29a      	uxth	r2, r3
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005132:	2300      	movs	r3, #0
 8005134:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	689b      	ldr	r3, [r3, #8]
 800513c:	f003 0301 	and.w	r3, r3, #1
 8005140:	2b01      	cmp	r3, #1
 8005142:	d119      	bne.n	8005178 <HAL_SPI_TransmitReceive+0x1b8>
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005148:	b29b      	uxth	r3, r3
 800514a:	2b00      	cmp	r3, #0
 800514c:	d014      	beq.n	8005178 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	68da      	ldr	r2, [r3, #12]
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005158:	b292      	uxth	r2, r2
 800515a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005160:	1c9a      	adds	r2, r3, #2
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800516a:	b29b      	uxth	r3, r3
 800516c:	3b01      	subs	r3, #1
 800516e:	b29a      	uxth	r2, r3
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005174:	2301      	movs	r3, #1
 8005176:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005178:	f7fc fe1c 	bl	8001db4 <HAL_GetTick>
 800517c:	4602      	mov	r2, r0
 800517e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005180:	1ad3      	subs	r3, r2, r3
 8005182:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005184:	429a      	cmp	r2, r3
 8005186:	d807      	bhi.n	8005198 <HAL_SPI_TransmitReceive+0x1d8>
 8005188:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800518a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800518e:	d003      	beq.n	8005198 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8005190:	2303      	movs	r3, #3
 8005192:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005196:	e0a7      	b.n	80052e8 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800519c:	b29b      	uxth	r3, r3
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d1a6      	bne.n	80050f0 <HAL_SPI_TransmitReceive+0x130>
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80051a6:	b29b      	uxth	r3, r3
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d1a1      	bne.n	80050f0 <HAL_SPI_TransmitReceive+0x130>
 80051ac:	e07c      	b.n	80052a8 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	685b      	ldr	r3, [r3, #4]
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d002      	beq.n	80051bc <HAL_SPI_TransmitReceive+0x1fc>
 80051b6:	8b7b      	ldrh	r3, [r7, #26]
 80051b8:	2b01      	cmp	r3, #1
 80051ba:	d16b      	bne.n	8005294 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	330c      	adds	r3, #12
 80051c6:	7812      	ldrb	r2, [r2, #0]
 80051c8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051ce:	1c5a      	adds	r2, r3, #1
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80051d8:	b29b      	uxth	r3, r3
 80051da:	3b01      	subs	r3, #1
 80051dc:	b29a      	uxth	r2, r3
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80051e2:	e057      	b.n	8005294 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	689b      	ldr	r3, [r3, #8]
 80051ea:	f003 0302 	and.w	r3, r3, #2
 80051ee:	2b02      	cmp	r3, #2
 80051f0:	d11c      	bne.n	800522c <HAL_SPI_TransmitReceive+0x26c>
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80051f6:	b29b      	uxth	r3, r3
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d017      	beq.n	800522c <HAL_SPI_TransmitReceive+0x26c>
 80051fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051fe:	2b01      	cmp	r3, #1
 8005200:	d114      	bne.n	800522c <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	330c      	adds	r3, #12
 800520c:	7812      	ldrb	r2, [r2, #0]
 800520e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005214:	1c5a      	adds	r2, r3, #1
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800521e:	b29b      	uxth	r3, r3
 8005220:	3b01      	subs	r3, #1
 8005222:	b29a      	uxth	r2, r3
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005228:	2300      	movs	r3, #0
 800522a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	689b      	ldr	r3, [r3, #8]
 8005232:	f003 0301 	and.w	r3, r3, #1
 8005236:	2b01      	cmp	r3, #1
 8005238:	d119      	bne.n	800526e <HAL_SPI_TransmitReceive+0x2ae>
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800523e:	b29b      	uxth	r3, r3
 8005240:	2b00      	cmp	r3, #0
 8005242:	d014      	beq.n	800526e <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	68da      	ldr	r2, [r3, #12]
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800524e:	b2d2      	uxtb	r2, r2
 8005250:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005256:	1c5a      	adds	r2, r3, #1
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005260:	b29b      	uxth	r3, r3
 8005262:	3b01      	subs	r3, #1
 8005264:	b29a      	uxth	r2, r3
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800526a:	2301      	movs	r3, #1
 800526c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800526e:	f7fc fda1 	bl	8001db4 <HAL_GetTick>
 8005272:	4602      	mov	r2, r0
 8005274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005276:	1ad3      	subs	r3, r2, r3
 8005278:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800527a:	429a      	cmp	r2, r3
 800527c:	d803      	bhi.n	8005286 <HAL_SPI_TransmitReceive+0x2c6>
 800527e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005280:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005284:	d102      	bne.n	800528c <HAL_SPI_TransmitReceive+0x2cc>
 8005286:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005288:	2b00      	cmp	r3, #0
 800528a:	d103      	bne.n	8005294 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800528c:	2303      	movs	r3, #3
 800528e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005292:	e029      	b.n	80052e8 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005298:	b29b      	uxth	r3, r3
 800529a:	2b00      	cmp	r3, #0
 800529c:	d1a2      	bne.n	80051e4 <HAL_SPI_TransmitReceive+0x224>
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80052a2:	b29b      	uxth	r3, r3
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d19d      	bne.n	80051e4 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80052a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052aa:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80052ac:	68f8      	ldr	r0, [r7, #12]
 80052ae:	f000 fceb 	bl	8005c88 <SPI_EndRxTxTransaction>
 80052b2:	4603      	mov	r3, r0
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d006      	beq.n	80052c6 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80052b8:	2301      	movs	r3, #1
 80052ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	2220      	movs	r2, #32
 80052c2:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80052c4:	e010      	b.n	80052e8 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	689b      	ldr	r3, [r3, #8]
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d10b      	bne.n	80052e6 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80052ce:	2300      	movs	r3, #0
 80052d0:	617b      	str	r3, [r7, #20]
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	68db      	ldr	r3, [r3, #12]
 80052d8:	617b      	str	r3, [r7, #20]
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	689b      	ldr	r3, [r3, #8]
 80052e0:	617b      	str	r3, [r7, #20]
 80052e2:	697b      	ldr	r3, [r7, #20]
 80052e4:	e000      	b.n	80052e8 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80052e6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	2201      	movs	r2, #1
 80052ec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	2200      	movs	r2, #0
 80052f4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80052f8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80052fc:	4618      	mov	r0, r3
 80052fe:	3730      	adds	r7, #48	; 0x30
 8005300:	46bd      	mov	sp, r7
 8005302:	bd80      	pop	{r7, pc}

08005304 <HAL_SPI_Receive_DMA>:
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8005304:	b580      	push	{r7, lr}
 8005306:	b086      	sub	sp, #24
 8005308:	af00      	add	r7, sp, #0
 800530a:	60f8      	str	r0, [r7, #12]
 800530c:	60b9      	str	r1, [r7, #8]
 800530e:	4613      	mov	r3, r2
 8005310:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005312:	2300      	movs	r3, #0
 8005314:	75fb      	strb	r3, [r7, #23]

  /* Check rx dma handle */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	689b      	ldr	r3, [r3, #8]
 800531a:	2b00      	cmp	r3, #0
 800531c:	d110      	bne.n	8005340 <HAL_SPI_Receive_DMA+0x3c>
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	685b      	ldr	r3, [r3, #4]
 8005322:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005326:	d10b      	bne.n	8005340 <HAL_SPI_Receive_DMA+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	2204      	movs	r2, #4
 800532c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    /* Check tx dma handle */
    assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 8005330:	88fb      	ldrh	r3, [r7, #6]
 8005332:	68ba      	ldr	r2, [r7, #8]
 8005334:	68b9      	ldr	r1, [r7, #8]
 8005336:	68f8      	ldr	r0, [r7, #12]
 8005338:	f000 f8ac 	bl	8005494 <HAL_SPI_TransmitReceive_DMA>
 800533c:	4603      	mov	r3, r0
 800533e:	e09f      	b.n	8005480 <HAL_SPI_Receive_DMA+0x17c>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005346:	2b01      	cmp	r3, #1
 8005348:	d101      	bne.n	800534e <HAL_SPI_Receive_DMA+0x4a>
 800534a:	2302      	movs	r3, #2
 800534c:	e098      	b.n	8005480 <HAL_SPI_Receive_DMA+0x17c>
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	2201      	movs	r2, #1
 8005352:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800535c:	b2db      	uxtb	r3, r3
 800535e:	2b01      	cmp	r3, #1
 8005360:	d002      	beq.n	8005368 <HAL_SPI_Receive_DMA+0x64>
  {
    errorcode = HAL_BUSY;
 8005362:	2302      	movs	r3, #2
 8005364:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005366:	e086      	b.n	8005476 <HAL_SPI_Receive_DMA+0x172>
  }

  if ((pData == NULL) || (Size == 0U))
 8005368:	68bb      	ldr	r3, [r7, #8]
 800536a:	2b00      	cmp	r3, #0
 800536c:	d002      	beq.n	8005374 <HAL_SPI_Receive_DMA+0x70>
 800536e:	88fb      	ldrh	r3, [r7, #6]
 8005370:	2b00      	cmp	r3, #0
 8005372:	d102      	bne.n	800537a <HAL_SPI_Receive_DMA+0x76>
  {
    errorcode = HAL_ERROR;
 8005374:	2301      	movs	r3, #1
 8005376:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005378:	e07d      	b.n	8005476 <HAL_SPI_Receive_DMA+0x172>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	2204      	movs	r2, #4
 800537e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	2200      	movs	r2, #0
 8005386:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	68ba      	ldr	r2, [r7, #8]
 800538c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	88fa      	ldrh	r2, [r7, #6]
 8005392:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	88fa      	ldrh	r2, [r7, #6]
 8005398:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	2200      	movs	r2, #0
 800539e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	2200      	movs	r2, #0
 80053a4:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->TxXferSize  = 0U;
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	2200      	movs	r2, #0
 80053aa:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	2200      	movs	r2, #0
 80053b0:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	689b      	ldr	r3, [r3, #8]
 80053b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80053ba:	d10f      	bne.n	80053dc <HAL_SPI_Receive_DMA+0xd8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	681a      	ldr	r2, [r3, #0]
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80053ca:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	681a      	ldr	r2, [r3, #0]
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80053da:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80053e0:	4a29      	ldr	r2, [pc, #164]	; (8005488 <HAL_SPI_Receive_DMA+0x184>)
 80053e2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80053e8:	4a28      	ldr	r2, [pc, #160]	; (800548c <HAL_SPI_Receive_DMA+0x188>)
 80053ea:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80053f0:	4a27      	ldr	r2, [pc, #156]	; (8005490 <HAL_SPI_Receive_DMA+0x18c>)
 80053f2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80053f8:	2200      	movs	r2, #0
 80053fa:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	330c      	adds	r3, #12
 8005406:	4619      	mov	r1, r3
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800540c:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005412:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8005414:	f7fc ff38 	bl	8002288 <HAL_DMA_Start_IT>
 8005418:	4603      	mov	r3, r0
 800541a:	2b00      	cmp	r3, #0
 800541c:	d00c      	beq.n	8005438 <HAL_SPI_Receive_DMA+0x134>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005422:	f043 0210 	orr.w	r2, r3, #16
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 800542a:	2301      	movs	r3, #1
 800542c:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	2201      	movs	r2, #1
 8005432:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8005436:	e01e      	b.n	8005476 <HAL_SPI_Receive_DMA+0x172>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005442:	2b40      	cmp	r3, #64	; 0x40
 8005444:	d007      	beq.n	8005456 <HAL_SPI_Receive_DMA+0x152>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	681a      	ldr	r2, [r3, #0]
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005454:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	685a      	ldr	r2, [r3, #4]
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	f042 0220 	orr.w	r2, r2, #32
 8005464:	605a      	str	r2, [r3, #4]

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	685a      	ldr	r2, [r3, #4]
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	f042 0201 	orr.w	r2, r2, #1
 8005474:	605a      	str	r2, [r3, #4]

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	2200      	movs	r2, #0
 800547a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800547e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005480:	4618      	mov	r0, r3
 8005482:	3718      	adds	r7, #24
 8005484:	46bd      	mov	sp, r7
 8005486:	bd80      	pop	{r7, pc}
 8005488:	08005a0d 	.word	0x08005a0d
 800548c:	080058d5 	.word	0x080058d5
 8005490:	08005a45 	.word	0x08005a45

08005494 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8005494:	b580      	push	{r7, lr}
 8005496:	b086      	sub	sp, #24
 8005498:	af00      	add	r7, sp, #0
 800549a:	60f8      	str	r0, [r7, #12]
 800549c:	60b9      	str	r1, [r7, #8]
 800549e:	607a      	str	r2, [r7, #4]
 80054a0:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80054a2:	2300      	movs	r3, #0
 80054a4:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80054ac:	2b01      	cmp	r3, #1
 80054ae:	d101      	bne.n	80054b4 <HAL_SPI_TransmitReceive_DMA+0x20>
 80054b0:	2302      	movs	r3, #2
 80054b2:	e0e3      	b.n	800567c <HAL_SPI_TransmitReceive_DMA+0x1e8>
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	2201      	movs	r2, #1
 80054b8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80054c2:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	685b      	ldr	r3, [r3, #4]
 80054c8:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 80054ca:	7dbb      	ldrb	r3, [r7, #22]
 80054cc:	2b01      	cmp	r3, #1
 80054ce:	d00d      	beq.n	80054ec <HAL_SPI_TransmitReceive_DMA+0x58>
 80054d0:	693b      	ldr	r3, [r7, #16]
 80054d2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80054d6:	d106      	bne.n	80054e6 <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	689b      	ldr	r3, [r3, #8]
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d102      	bne.n	80054e6 <HAL_SPI_TransmitReceive_DMA+0x52>
 80054e0:	7dbb      	ldrb	r3, [r7, #22]
 80054e2:	2b04      	cmp	r3, #4
 80054e4:	d002      	beq.n	80054ec <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 80054e6:	2302      	movs	r3, #2
 80054e8:	75fb      	strb	r3, [r7, #23]
    goto error;
 80054ea:	e0c2      	b.n	8005672 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80054ec:	68bb      	ldr	r3, [r7, #8]
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d005      	beq.n	80054fe <HAL_SPI_TransmitReceive_DMA+0x6a>
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d002      	beq.n	80054fe <HAL_SPI_TransmitReceive_DMA+0x6a>
 80054f8:	887b      	ldrh	r3, [r7, #2]
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d102      	bne.n	8005504 <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 80054fe:	2301      	movs	r3, #1
 8005500:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005502:	e0b6      	b.n	8005672 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800550a:	b2db      	uxtb	r3, r3
 800550c:	2b04      	cmp	r3, #4
 800550e:	d003      	beq.n	8005518 <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	2205      	movs	r2, #5
 8005514:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	2200      	movs	r2, #0
 800551c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	68ba      	ldr	r2, [r7, #8]
 8005522:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	887a      	ldrh	r2, [r7, #2]
 8005528:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	887a      	ldrh	r2, [r7, #2]
 800552e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	687a      	ldr	r2, [r7, #4]
 8005534:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	887a      	ldrh	r2, [r7, #2]
 800553a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	887a      	ldrh	r2, [r7, #2]
 8005540:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	2200      	movs	r2, #0
 8005546:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	2200      	movs	r2, #0
 800554c:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005554:	b2db      	uxtb	r3, r3
 8005556:	2b04      	cmp	r3, #4
 8005558:	d108      	bne.n	800556c <HAL_SPI_TransmitReceive_DMA+0xd8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800555e:	4a49      	ldr	r2, [pc, #292]	; (8005684 <HAL_SPI_TransmitReceive_DMA+0x1f0>)
 8005560:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005566:	4a48      	ldr	r2, [pc, #288]	; (8005688 <HAL_SPI_TransmitReceive_DMA+0x1f4>)
 8005568:	63da      	str	r2, [r3, #60]	; 0x3c
 800556a:	e007      	b.n	800557c <HAL_SPI_TransmitReceive_DMA+0xe8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005570:	4a46      	ldr	r2, [pc, #280]	; (800568c <HAL_SPI_TransmitReceive_DMA+0x1f8>)
 8005572:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005578:	4a45      	ldr	r2, [pc, #276]	; (8005690 <HAL_SPI_TransmitReceive_DMA+0x1fc>)
 800557a:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005580:	4a44      	ldr	r2, [pc, #272]	; (8005694 <HAL_SPI_TransmitReceive_DMA+0x200>)
 8005582:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005588:	2200      	movs	r2, #0
 800558a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	330c      	adds	r3, #12
 8005596:	4619      	mov	r1, r3
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800559c:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80055a2:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 80055a4:	f7fc fe70 	bl	8002288 <HAL_DMA_Start_IT>
 80055a8:	4603      	mov	r3, r0
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d00c      	beq.n	80055c8 <HAL_SPI_TransmitReceive_DMA+0x134>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055b2:	f043 0210 	orr.w	r2, r3, #16
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 80055ba:	2301      	movs	r3, #1
 80055bc:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	2201      	movs	r2, #1
 80055c2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 80055c6:	e054      	b.n	8005672 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	685a      	ldr	r2, [r3, #4]
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	f042 0201 	orr.w	r2, r2, #1
 80055d6:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80055dc:	2200      	movs	r2, #0
 80055de:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80055e4:	2200      	movs	r2, #0
 80055e6:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80055ec:	2200      	movs	r2, #0
 80055ee:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80055f4:	2200      	movs	r2, #0
 80055f6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	6c98      	ldr	r0, [r3, #72]	; 0x48
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005600:	4619      	mov	r1, r3
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	330c      	adds	r3, #12
 8005608:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800560e:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8005610:	f7fc fe3a 	bl	8002288 <HAL_DMA_Start_IT>
 8005614:	4603      	mov	r3, r0
 8005616:	2b00      	cmp	r3, #0
 8005618:	d00c      	beq.n	8005634 <HAL_SPI_TransmitReceive_DMA+0x1a0>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800561e:	f043 0210 	orr.w	r2, r3, #16
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8005626:	2301      	movs	r3, #1
 8005628:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	2201      	movs	r2, #1
 800562e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8005632:	e01e      	b.n	8005672 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800563e:	2b40      	cmp	r3, #64	; 0x40
 8005640:	d007      	beq.n	8005652 <HAL_SPI_TransmitReceive_DMA+0x1be>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	681a      	ldr	r2, [r3, #0]
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005650:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	685a      	ldr	r2, [r3, #4]
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	f042 0220 	orr.w	r2, r2, #32
 8005660:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	685a      	ldr	r2, [r3, #4]
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	f042 0202 	orr.w	r2, r2, #2
 8005670:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	2200      	movs	r2, #0
 8005676:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800567a:	7dfb      	ldrb	r3, [r7, #23]
}
 800567c:	4618      	mov	r0, r3
 800567e:	3718      	adds	r7, #24
 8005680:	46bd      	mov	sp, r7
 8005682:	bd80      	pop	{r7, pc}
 8005684:	08005a0d 	.word	0x08005a0d
 8005688:	080058d5 	.word	0x080058d5
 800568c:	08005a29 	.word	0x08005a29
 8005690:	0800597d 	.word	0x0800597d
 8005694:	08005a45 	.word	0x08005a45

08005698 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8005698:	b580      	push	{r7, lr}
 800569a:	b088      	sub	sp, #32
 800569c:	af00      	add	r7, sp, #0
 800569e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	685b      	ldr	r3, [r3, #4]
 80056a6:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	689b      	ldr	r3, [r3, #8]
 80056ae:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80056b0:	69bb      	ldr	r3, [r7, #24]
 80056b2:	099b      	lsrs	r3, r3, #6
 80056b4:	f003 0301 	and.w	r3, r3, #1
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d10f      	bne.n	80056dc <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80056bc:	69bb      	ldr	r3, [r7, #24]
 80056be:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d00a      	beq.n	80056dc <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80056c6:	69fb      	ldr	r3, [r7, #28]
 80056c8:	099b      	lsrs	r3, r3, #6
 80056ca:	f003 0301 	and.w	r3, r3, #1
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d004      	beq.n	80056dc <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056d6:	6878      	ldr	r0, [r7, #4]
 80056d8:	4798      	blx	r3
    return;
 80056da:	e0d7      	b.n	800588c <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80056dc:	69bb      	ldr	r3, [r7, #24]
 80056de:	085b      	lsrs	r3, r3, #1
 80056e0:	f003 0301 	and.w	r3, r3, #1
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d00a      	beq.n	80056fe <HAL_SPI_IRQHandler+0x66>
 80056e8:	69fb      	ldr	r3, [r7, #28]
 80056ea:	09db      	lsrs	r3, r3, #7
 80056ec:	f003 0301 	and.w	r3, r3, #1
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d004      	beq.n	80056fe <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056f8:	6878      	ldr	r0, [r7, #4]
 80056fa:	4798      	blx	r3
    return;
 80056fc:	e0c6      	b.n	800588c <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80056fe:	69bb      	ldr	r3, [r7, #24]
 8005700:	095b      	lsrs	r3, r3, #5
 8005702:	f003 0301 	and.w	r3, r3, #1
 8005706:	2b00      	cmp	r3, #0
 8005708:	d10c      	bne.n	8005724 <HAL_SPI_IRQHandler+0x8c>
 800570a:	69bb      	ldr	r3, [r7, #24]
 800570c:	099b      	lsrs	r3, r3, #6
 800570e:	f003 0301 	and.w	r3, r3, #1
 8005712:	2b00      	cmp	r3, #0
 8005714:	d106      	bne.n	8005724 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8005716:	69bb      	ldr	r3, [r7, #24]
 8005718:	0a1b      	lsrs	r3, r3, #8
 800571a:	f003 0301 	and.w	r3, r3, #1
 800571e:	2b00      	cmp	r3, #0
 8005720:	f000 80b4 	beq.w	800588c <HAL_SPI_IRQHandler+0x1f4>
 8005724:	69fb      	ldr	r3, [r7, #28]
 8005726:	095b      	lsrs	r3, r3, #5
 8005728:	f003 0301 	and.w	r3, r3, #1
 800572c:	2b00      	cmp	r3, #0
 800572e:	f000 80ad 	beq.w	800588c <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8005732:	69bb      	ldr	r3, [r7, #24]
 8005734:	099b      	lsrs	r3, r3, #6
 8005736:	f003 0301 	and.w	r3, r3, #1
 800573a:	2b00      	cmp	r3, #0
 800573c:	d023      	beq.n	8005786 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005744:	b2db      	uxtb	r3, r3
 8005746:	2b03      	cmp	r3, #3
 8005748:	d011      	beq.n	800576e <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800574e:	f043 0204 	orr.w	r2, r3, #4
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005756:	2300      	movs	r3, #0
 8005758:	617b      	str	r3, [r7, #20]
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	68db      	ldr	r3, [r3, #12]
 8005760:	617b      	str	r3, [r7, #20]
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	689b      	ldr	r3, [r3, #8]
 8005768:	617b      	str	r3, [r7, #20]
 800576a:	697b      	ldr	r3, [r7, #20]
 800576c:	e00b      	b.n	8005786 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800576e:	2300      	movs	r3, #0
 8005770:	613b      	str	r3, [r7, #16]
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	68db      	ldr	r3, [r3, #12]
 8005778:	613b      	str	r3, [r7, #16]
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	689b      	ldr	r3, [r3, #8]
 8005780:	613b      	str	r3, [r7, #16]
 8005782:	693b      	ldr	r3, [r7, #16]
        return;
 8005784:	e082      	b.n	800588c <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8005786:	69bb      	ldr	r3, [r7, #24]
 8005788:	095b      	lsrs	r3, r3, #5
 800578a:	f003 0301 	and.w	r3, r3, #1
 800578e:	2b00      	cmp	r3, #0
 8005790:	d014      	beq.n	80057bc <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005796:	f043 0201 	orr.w	r2, r3, #1
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800579e:	2300      	movs	r3, #0
 80057a0:	60fb      	str	r3, [r7, #12]
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	689b      	ldr	r3, [r3, #8]
 80057a8:	60fb      	str	r3, [r7, #12]
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	681a      	ldr	r2, [r3, #0]
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80057b8:	601a      	str	r2, [r3, #0]
 80057ba:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80057bc:	69bb      	ldr	r3, [r7, #24]
 80057be:	0a1b      	lsrs	r3, r3, #8
 80057c0:	f003 0301 	and.w	r3, r3, #1
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d00c      	beq.n	80057e2 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057cc:	f043 0208 	orr.w	r2, r3, #8
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80057d4:	2300      	movs	r3, #0
 80057d6:	60bb      	str	r3, [r7, #8]
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	689b      	ldr	r3, [r3, #8]
 80057de:	60bb      	str	r3, [r7, #8]
 80057e0:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d04f      	beq.n	800588a <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	685a      	ldr	r2, [r3, #4]
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80057f8:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	2201      	movs	r2, #1
 80057fe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8005802:	69fb      	ldr	r3, [r7, #28]
 8005804:	f003 0302 	and.w	r3, r3, #2
 8005808:	2b00      	cmp	r3, #0
 800580a:	d104      	bne.n	8005816 <HAL_SPI_IRQHandler+0x17e>
 800580c:	69fb      	ldr	r3, [r7, #28]
 800580e:	f003 0301 	and.w	r3, r3, #1
 8005812:	2b00      	cmp	r3, #0
 8005814:	d034      	beq.n	8005880 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	685a      	ldr	r2, [r3, #4]
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	f022 0203 	bic.w	r2, r2, #3
 8005824:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800582a:	2b00      	cmp	r3, #0
 800582c:	d011      	beq.n	8005852 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005832:	4a18      	ldr	r2, [pc, #96]	; (8005894 <HAL_SPI_IRQHandler+0x1fc>)
 8005834:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800583a:	4618      	mov	r0, r3
 800583c:	f7fc fd7c 	bl	8002338 <HAL_DMA_Abort_IT>
 8005840:	4603      	mov	r3, r0
 8005842:	2b00      	cmp	r3, #0
 8005844:	d005      	beq.n	8005852 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800584a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005856:	2b00      	cmp	r3, #0
 8005858:	d016      	beq.n	8005888 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800585e:	4a0d      	ldr	r2, [pc, #52]	; (8005894 <HAL_SPI_IRQHandler+0x1fc>)
 8005860:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005866:	4618      	mov	r0, r3
 8005868:	f7fc fd66 	bl	8002338 <HAL_DMA_Abort_IT>
 800586c:	4603      	mov	r3, r0
 800586e:	2b00      	cmp	r3, #0
 8005870:	d00a      	beq.n	8005888 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005876:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 800587e:	e003      	b.n	8005888 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8005880:	6878      	ldr	r0, [r7, #4]
 8005882:	f7fb fb2f 	bl	8000ee4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8005886:	e000      	b.n	800588a <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8005888:	bf00      	nop
    return;
 800588a:	bf00      	nop
  }
}
 800588c:	3720      	adds	r7, #32
 800588e:	46bd      	mov	sp, r7
 8005890:	bd80      	pop	{r7, pc}
 8005892:	bf00      	nop
 8005894:	08005a85 	.word	0x08005a85

08005898 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005898:	b480      	push	{r7}
 800589a:	b083      	sub	sp, #12
 800589c:	af00      	add	r7, sp, #0
 800589e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 80058a0:	bf00      	nop
 80058a2:	370c      	adds	r7, #12
 80058a4:	46bd      	mov	sp, r7
 80058a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058aa:	4770      	bx	lr

080058ac <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80058ac:	b480      	push	{r7}
 80058ae:	b083      	sub	sp, #12
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 80058b4:	bf00      	nop
 80058b6:	370c      	adds	r7, #12
 80058b8:	46bd      	mov	sp, r7
 80058ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058be:	4770      	bx	lr

080058c0 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80058c0:	b480      	push	{r7}
 80058c2:	b083      	sub	sp, #12
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 80058c8:	bf00      	nop
 80058ca:	370c      	adds	r7, #12
 80058cc:	46bd      	mov	sp, r7
 80058ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d2:	4770      	bx	lr

080058d4 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80058d4:	b580      	push	{r7, lr}
 80058d6:	b084      	sub	sp, #16
 80058d8:	af00      	add	r7, sp, #0
 80058da:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058e0:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80058e2:	f7fc fa67 	bl	8001db4 <HAL_GetTick>
 80058e6:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80058f6:	d03b      	beq.n	8005970 <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	685a      	ldr	r2, [r3, #4]
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	f022 0220 	bic.w	r2, r2, #32
 8005906:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	689b      	ldr	r3, [r3, #8]
 800590c:	2b00      	cmp	r3, #0
 800590e:	d10d      	bne.n	800592c <SPI_DMAReceiveCplt+0x58>
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	685b      	ldr	r3, [r3, #4]
 8005914:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005918:	d108      	bne.n	800592c <SPI_DMAReceiveCplt+0x58>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	685a      	ldr	r2, [r3, #4]
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	f022 0203 	bic.w	r2, r2, #3
 8005928:	605a      	str	r2, [r3, #4]
 800592a:	e007      	b.n	800593c <SPI_DMAReceiveCplt+0x68>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	685a      	ldr	r2, [r3, #4]
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	f022 0201 	bic.w	r2, r2, #1
 800593a:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800593c:	68ba      	ldr	r2, [r7, #8]
 800593e:	2164      	movs	r1, #100	; 0x64
 8005940:	68f8      	ldr	r0, [r7, #12]
 8005942:	f000 f93b 	bl	8005bbc <SPI_EndRxTransaction>
 8005946:	4603      	mov	r3, r0
 8005948:	2b00      	cmp	r3, #0
 800594a:	d002      	beq.n	8005952 <SPI_DMAReceiveCplt+0x7e>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	2220      	movs	r2, #32
 8005950:	655a      	str	r2, [r3, #84]	; 0x54
    }

    hspi->RxXferCount = 0U;
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	2200      	movs	r2, #0
 8005956:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	2201      	movs	r2, #1
 800595c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005964:	2b00      	cmp	r3, #0
 8005966:	d003      	beq.n	8005970 <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8005968:	68f8      	ldr	r0, [r7, #12]
 800596a:	f7fb fabb 	bl	8000ee4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800596e:	e002      	b.n	8005976 <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 8005970:	68f8      	ldr	r0, [r7, #12]
 8005972:	f7fb fac9 	bl	8000f08 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005976:	3710      	adds	r7, #16
 8005978:	46bd      	mov	sp, r7
 800597a:	bd80      	pop	{r7, pc}

0800597c <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800597c:	b580      	push	{r7, lr}
 800597e:	b084      	sub	sp, #16
 8005980:	af00      	add	r7, sp, #0
 8005982:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005988:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800598a:	f7fc fa13 	bl	8001db4 <HAL_GetTick>
 800598e:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800599a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800599e:	d02f      	beq.n	8005a00 <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	685a      	ldr	r2, [r3, #4]
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	f022 0220 	bic.w	r2, r2, #32
 80059ae:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80059b0:	68ba      	ldr	r2, [r7, #8]
 80059b2:	2164      	movs	r1, #100	; 0x64
 80059b4:	68f8      	ldr	r0, [r7, #12]
 80059b6:	f000 f967 	bl	8005c88 <SPI_EndRxTxTransaction>
 80059ba:	4603      	mov	r3, r0
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d005      	beq.n	80059cc <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059c4:	f043 0220 	orr.w	r2, r3, #32
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	685a      	ldr	r2, [r3, #4]
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	f022 0203 	bic.w	r2, r2, #3
 80059da:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	2200      	movs	r2, #0
 80059e0:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->RxXferCount = 0U;
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	2200      	movs	r2, #0
 80059e6:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	2201      	movs	r2, #1
 80059ec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d003      	beq.n	8005a00 <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80059f8:	68f8      	ldr	r0, [r7, #12]
 80059fa:	f7fb fa73 	bl	8000ee4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80059fe:	e002      	b.n	8005a06 <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 8005a00:	68f8      	ldr	r0, [r7, #12]
 8005a02:	f7ff ff49 	bl	8005898 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005a06:	3710      	adds	r7, #16
 8005a08:	46bd      	mov	sp, r7
 8005a0a:	bd80      	pop	{r7, pc}

08005a0c <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005a0c:	b580      	push	{r7, lr}
 8005a0e:	b084      	sub	sp, #16
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a18:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 8005a1a:	68f8      	ldr	r0, [r7, #12]
 8005a1c:	f7ff ff46 	bl	80058ac <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005a20:	bf00      	nop
 8005a22:	3710      	adds	r7, #16
 8005a24:	46bd      	mov	sp, r7
 8005a26:	bd80      	pop	{r7, pc}

08005a28 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005a28:	b580      	push	{r7, lr}
 8005a2a:	b084      	sub	sp, #16
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a34:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 8005a36:	68f8      	ldr	r0, [r7, #12]
 8005a38:	f7ff ff42 	bl	80058c0 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005a3c:	bf00      	nop
 8005a3e:	3710      	adds	r7, #16
 8005a40:	46bd      	mov	sp, r7
 8005a42:	bd80      	pop	{r7, pc}

08005a44 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8005a44:	b580      	push	{r7, lr}
 8005a46:	b084      	sub	sp, #16
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a50:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	685a      	ldr	r2, [r3, #4]
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	f022 0203 	bic.w	r2, r2, #3
 8005a60:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a66:	f043 0210 	orr.w	r2, r3, #16
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	2201      	movs	r2, #1
 8005a72:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8005a76:	68f8      	ldr	r0, [r7, #12]
 8005a78:	f7fb fa34 	bl	8000ee4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005a7c:	bf00      	nop
 8005a7e:	3710      	adds	r7, #16
 8005a80:	46bd      	mov	sp, r7
 8005a82:	bd80      	pop	{r7, pc}

08005a84 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005a84:	b580      	push	{r7, lr}
 8005a86:	b084      	sub	sp, #16
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a90:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	2200      	movs	r2, #0
 8005a96:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	2200      	movs	r2, #0
 8005a9c:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8005a9e:	68f8      	ldr	r0, [r7, #12]
 8005aa0:	f7fb fa20 	bl	8000ee4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005aa4:	bf00      	nop
 8005aa6:	3710      	adds	r7, #16
 8005aa8:	46bd      	mov	sp, r7
 8005aaa:	bd80      	pop	{r7, pc}

08005aac <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005aac:	b580      	push	{r7, lr}
 8005aae:	b088      	sub	sp, #32
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	60f8      	str	r0, [r7, #12]
 8005ab4:	60b9      	str	r1, [r7, #8]
 8005ab6:	603b      	str	r3, [r7, #0]
 8005ab8:	4613      	mov	r3, r2
 8005aba:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005abc:	f7fc f97a 	bl	8001db4 <HAL_GetTick>
 8005ac0:	4602      	mov	r2, r0
 8005ac2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ac4:	1a9b      	subs	r3, r3, r2
 8005ac6:	683a      	ldr	r2, [r7, #0]
 8005ac8:	4413      	add	r3, r2
 8005aca:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005acc:	f7fc f972 	bl	8001db4 <HAL_GetTick>
 8005ad0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005ad2:	4b39      	ldr	r3, [pc, #228]	; (8005bb8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	015b      	lsls	r3, r3, #5
 8005ad8:	0d1b      	lsrs	r3, r3, #20
 8005ada:	69fa      	ldr	r2, [r7, #28]
 8005adc:	fb02 f303 	mul.w	r3, r2, r3
 8005ae0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005ae2:	e054      	b.n	8005b8e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005ae4:	683b      	ldr	r3, [r7, #0]
 8005ae6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005aea:	d050      	beq.n	8005b8e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005aec:	f7fc f962 	bl	8001db4 <HAL_GetTick>
 8005af0:	4602      	mov	r2, r0
 8005af2:	69bb      	ldr	r3, [r7, #24]
 8005af4:	1ad3      	subs	r3, r2, r3
 8005af6:	69fa      	ldr	r2, [r7, #28]
 8005af8:	429a      	cmp	r2, r3
 8005afa:	d902      	bls.n	8005b02 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005afc:	69fb      	ldr	r3, [r7, #28]
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d13d      	bne.n	8005b7e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	685a      	ldr	r2, [r3, #4]
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005b10:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	685b      	ldr	r3, [r3, #4]
 8005b16:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005b1a:	d111      	bne.n	8005b40 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	689b      	ldr	r3, [r3, #8]
 8005b20:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005b24:	d004      	beq.n	8005b30 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	689b      	ldr	r3, [r3, #8]
 8005b2a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b2e:	d107      	bne.n	8005b40 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	681a      	ldr	r2, [r3, #0]
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005b3e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b44:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b48:	d10f      	bne.n	8005b6a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	681a      	ldr	r2, [r3, #0]
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005b58:	601a      	str	r2, [r3, #0]
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	681a      	ldr	r2, [r3, #0]
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005b68:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	2201      	movs	r2, #1
 8005b6e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	2200      	movs	r2, #0
 8005b76:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005b7a:	2303      	movs	r3, #3
 8005b7c:	e017      	b.n	8005bae <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005b7e:	697b      	ldr	r3, [r7, #20]
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d101      	bne.n	8005b88 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005b84:	2300      	movs	r3, #0
 8005b86:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005b88:	697b      	ldr	r3, [r7, #20]
 8005b8a:	3b01      	subs	r3, #1
 8005b8c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	689a      	ldr	r2, [r3, #8]
 8005b94:	68bb      	ldr	r3, [r7, #8]
 8005b96:	4013      	ands	r3, r2
 8005b98:	68ba      	ldr	r2, [r7, #8]
 8005b9a:	429a      	cmp	r2, r3
 8005b9c:	bf0c      	ite	eq
 8005b9e:	2301      	moveq	r3, #1
 8005ba0:	2300      	movne	r3, #0
 8005ba2:	b2db      	uxtb	r3, r3
 8005ba4:	461a      	mov	r2, r3
 8005ba6:	79fb      	ldrb	r3, [r7, #7]
 8005ba8:	429a      	cmp	r2, r3
 8005baa:	d19b      	bne.n	8005ae4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005bac:	2300      	movs	r3, #0
}
 8005bae:	4618      	mov	r0, r3
 8005bb0:	3720      	adds	r7, #32
 8005bb2:	46bd      	mov	sp, r7
 8005bb4:	bd80      	pop	{r7, pc}
 8005bb6:	bf00      	nop
 8005bb8:	20000004 	.word	0x20000004

08005bbc <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005bbc:	b580      	push	{r7, lr}
 8005bbe:	b086      	sub	sp, #24
 8005bc0:	af02      	add	r7, sp, #8
 8005bc2:	60f8      	str	r0, [r7, #12]
 8005bc4:	60b9      	str	r1, [r7, #8]
 8005bc6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	685b      	ldr	r3, [r3, #4]
 8005bcc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005bd0:	d111      	bne.n	8005bf6 <SPI_EndRxTransaction+0x3a>
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	689b      	ldr	r3, [r3, #8]
 8005bd6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005bda:	d004      	beq.n	8005be6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	689b      	ldr	r3, [r3, #8]
 8005be0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005be4:	d107      	bne.n	8005bf6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	681a      	ldr	r2, [r3, #0]
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005bf4:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	685b      	ldr	r3, [r3, #4]
 8005bfa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005bfe:	d12a      	bne.n	8005c56 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	689b      	ldr	r3, [r3, #8]
 8005c04:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c08:	d012      	beq.n	8005c30 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	9300      	str	r3, [sp, #0]
 8005c0e:	68bb      	ldr	r3, [r7, #8]
 8005c10:	2200      	movs	r2, #0
 8005c12:	2180      	movs	r1, #128	; 0x80
 8005c14:	68f8      	ldr	r0, [r7, #12]
 8005c16:	f7ff ff49 	bl	8005aac <SPI_WaitFlagStateUntilTimeout>
 8005c1a:	4603      	mov	r3, r0
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d02d      	beq.n	8005c7c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c24:	f043 0220 	orr.w	r2, r3, #32
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8005c2c:	2303      	movs	r3, #3
 8005c2e:	e026      	b.n	8005c7e <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	9300      	str	r3, [sp, #0]
 8005c34:	68bb      	ldr	r3, [r7, #8]
 8005c36:	2200      	movs	r2, #0
 8005c38:	2101      	movs	r1, #1
 8005c3a:	68f8      	ldr	r0, [r7, #12]
 8005c3c:	f7ff ff36 	bl	8005aac <SPI_WaitFlagStateUntilTimeout>
 8005c40:	4603      	mov	r3, r0
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d01a      	beq.n	8005c7c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c4a:	f043 0220 	orr.w	r2, r3, #32
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8005c52:	2303      	movs	r3, #3
 8005c54:	e013      	b.n	8005c7e <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	9300      	str	r3, [sp, #0]
 8005c5a:	68bb      	ldr	r3, [r7, #8]
 8005c5c:	2200      	movs	r2, #0
 8005c5e:	2101      	movs	r1, #1
 8005c60:	68f8      	ldr	r0, [r7, #12]
 8005c62:	f7ff ff23 	bl	8005aac <SPI_WaitFlagStateUntilTimeout>
 8005c66:	4603      	mov	r3, r0
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d007      	beq.n	8005c7c <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c70:	f043 0220 	orr.w	r2, r3, #32
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005c78:	2303      	movs	r3, #3
 8005c7a:	e000      	b.n	8005c7e <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8005c7c:	2300      	movs	r3, #0
}
 8005c7e:	4618      	mov	r0, r3
 8005c80:	3710      	adds	r7, #16
 8005c82:	46bd      	mov	sp, r7
 8005c84:	bd80      	pop	{r7, pc}
	...

08005c88 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005c88:	b580      	push	{r7, lr}
 8005c8a:	b088      	sub	sp, #32
 8005c8c:	af02      	add	r7, sp, #8
 8005c8e:	60f8      	str	r0, [r7, #12]
 8005c90:	60b9      	str	r1, [r7, #8]
 8005c92:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005c94:	4b1b      	ldr	r3, [pc, #108]	; (8005d04 <SPI_EndRxTxTransaction+0x7c>)
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	4a1b      	ldr	r2, [pc, #108]	; (8005d08 <SPI_EndRxTxTransaction+0x80>)
 8005c9a:	fba2 2303 	umull	r2, r3, r2, r3
 8005c9e:	0d5b      	lsrs	r3, r3, #21
 8005ca0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005ca4:	fb02 f303 	mul.w	r3, r2, r3
 8005ca8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	685b      	ldr	r3, [r3, #4]
 8005cae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005cb2:	d112      	bne.n	8005cda <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	9300      	str	r3, [sp, #0]
 8005cb8:	68bb      	ldr	r3, [r7, #8]
 8005cba:	2200      	movs	r2, #0
 8005cbc:	2180      	movs	r1, #128	; 0x80
 8005cbe:	68f8      	ldr	r0, [r7, #12]
 8005cc0:	f7ff fef4 	bl	8005aac <SPI_WaitFlagStateUntilTimeout>
 8005cc4:	4603      	mov	r3, r0
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d016      	beq.n	8005cf8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005cce:	f043 0220 	orr.w	r2, r3, #32
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005cd6:	2303      	movs	r3, #3
 8005cd8:	e00f      	b.n	8005cfa <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005cda:	697b      	ldr	r3, [r7, #20]
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d00a      	beq.n	8005cf6 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8005ce0:	697b      	ldr	r3, [r7, #20]
 8005ce2:	3b01      	subs	r3, #1
 8005ce4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	689b      	ldr	r3, [r3, #8]
 8005cec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005cf0:	2b80      	cmp	r3, #128	; 0x80
 8005cf2:	d0f2      	beq.n	8005cda <SPI_EndRxTxTransaction+0x52>
 8005cf4:	e000      	b.n	8005cf8 <SPI_EndRxTxTransaction+0x70>
        break;
 8005cf6:	bf00      	nop
  }

  return HAL_OK;
 8005cf8:	2300      	movs	r3, #0
}
 8005cfa:	4618      	mov	r0, r3
 8005cfc:	3718      	adds	r7, #24
 8005cfe:	46bd      	mov	sp, r7
 8005d00:	bd80      	pop	{r7, pc}
 8005d02:	bf00      	nop
 8005d04:	20000004 	.word	0x20000004
 8005d08:	165e9f81 	.word	0x165e9f81

08005d0c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005d0c:	b580      	push	{r7, lr}
 8005d0e:	b082      	sub	sp, #8
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d101      	bne.n	8005d1e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005d1a:	2301      	movs	r3, #1
 8005d1c:	e041      	b.n	8005da2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d24:	b2db      	uxtb	r3, r3
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d106      	bne.n	8005d38 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	2200      	movs	r2, #0
 8005d2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005d32:	6878      	ldr	r0, [r7, #4]
 8005d34:	f7fb feba 	bl	8001aac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	2202      	movs	r2, #2
 8005d3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681a      	ldr	r2, [r3, #0]
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	3304      	adds	r3, #4
 8005d48:	4619      	mov	r1, r3
 8005d4a:	4610      	mov	r0, r2
 8005d4c:	f000 fcf0 	bl	8006730 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	2201      	movs	r2, #1
 8005d54:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	2201      	movs	r2, #1
 8005d5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	2201      	movs	r2, #1
 8005d64:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	2201      	movs	r2, #1
 8005d6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	2201      	movs	r2, #1
 8005d74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	2201      	movs	r2, #1
 8005d7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	2201      	movs	r2, #1
 8005d84:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	2201      	movs	r2, #1
 8005d8c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	2201      	movs	r2, #1
 8005d94:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	2201      	movs	r2, #1
 8005d9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005da0:	2300      	movs	r3, #0
}
 8005da2:	4618      	mov	r0, r3
 8005da4:	3708      	adds	r7, #8
 8005da6:	46bd      	mov	sp, r7
 8005da8:	bd80      	pop	{r7, pc}

08005daa <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005daa:	b580      	push	{r7, lr}
 8005dac:	b082      	sub	sp, #8
 8005dae:	af00      	add	r7, sp, #0
 8005db0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d101      	bne.n	8005dbc <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005db8:	2301      	movs	r3, #1
 8005dba:	e041      	b.n	8005e40 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005dc2:	b2db      	uxtb	r3, r3
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d106      	bne.n	8005dd6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	2200      	movs	r2, #0
 8005dcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005dd0:	6878      	ldr	r0, [r7, #4]
 8005dd2:	f000 f839 	bl	8005e48 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	2202      	movs	r2, #2
 8005dda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681a      	ldr	r2, [r3, #0]
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	3304      	adds	r3, #4
 8005de6:	4619      	mov	r1, r3
 8005de8:	4610      	mov	r0, r2
 8005dea:	f000 fca1 	bl	8006730 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	2201      	movs	r2, #1
 8005df2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	2201      	movs	r2, #1
 8005dfa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	2201      	movs	r2, #1
 8005e02:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	2201      	movs	r2, #1
 8005e0a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	2201      	movs	r2, #1
 8005e12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	2201      	movs	r2, #1
 8005e1a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	2201      	movs	r2, #1
 8005e22:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	2201      	movs	r2, #1
 8005e2a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	2201      	movs	r2, #1
 8005e32:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	2201      	movs	r2, #1
 8005e3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005e3e:	2300      	movs	r3, #0
}
 8005e40:	4618      	mov	r0, r3
 8005e42:	3708      	adds	r7, #8
 8005e44:	46bd      	mov	sp, r7
 8005e46:	bd80      	pop	{r7, pc}

08005e48 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005e48:	b480      	push	{r7}
 8005e4a:	b083      	sub	sp, #12
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005e50:	bf00      	nop
 8005e52:	370c      	adds	r7, #12
 8005e54:	46bd      	mov	sp, r7
 8005e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e5a:	4770      	bx	lr

08005e5c <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005e5c:	b580      	push	{r7, lr}
 8005e5e:	b084      	sub	sp, #16
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	6078      	str	r0, [r7, #4]
 8005e64:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005e66:	2300      	movs	r3, #0
 8005e68:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005e6a:	683b      	ldr	r3, [r7, #0]
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d109      	bne.n	8005e84 <HAL_TIM_PWM_Start_IT+0x28>
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005e76:	b2db      	uxtb	r3, r3
 8005e78:	2b01      	cmp	r3, #1
 8005e7a:	bf14      	ite	ne
 8005e7c:	2301      	movne	r3, #1
 8005e7e:	2300      	moveq	r3, #0
 8005e80:	b2db      	uxtb	r3, r3
 8005e82:	e022      	b.n	8005eca <HAL_TIM_PWM_Start_IT+0x6e>
 8005e84:	683b      	ldr	r3, [r7, #0]
 8005e86:	2b04      	cmp	r3, #4
 8005e88:	d109      	bne.n	8005e9e <HAL_TIM_PWM_Start_IT+0x42>
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005e90:	b2db      	uxtb	r3, r3
 8005e92:	2b01      	cmp	r3, #1
 8005e94:	bf14      	ite	ne
 8005e96:	2301      	movne	r3, #1
 8005e98:	2300      	moveq	r3, #0
 8005e9a:	b2db      	uxtb	r3, r3
 8005e9c:	e015      	b.n	8005eca <HAL_TIM_PWM_Start_IT+0x6e>
 8005e9e:	683b      	ldr	r3, [r7, #0]
 8005ea0:	2b08      	cmp	r3, #8
 8005ea2:	d109      	bne.n	8005eb8 <HAL_TIM_PWM_Start_IT+0x5c>
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005eaa:	b2db      	uxtb	r3, r3
 8005eac:	2b01      	cmp	r3, #1
 8005eae:	bf14      	ite	ne
 8005eb0:	2301      	movne	r3, #1
 8005eb2:	2300      	moveq	r3, #0
 8005eb4:	b2db      	uxtb	r3, r3
 8005eb6:	e008      	b.n	8005eca <HAL_TIM_PWM_Start_IT+0x6e>
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005ebe:	b2db      	uxtb	r3, r3
 8005ec0:	2b01      	cmp	r3, #1
 8005ec2:	bf14      	ite	ne
 8005ec4:	2301      	movne	r3, #1
 8005ec6:	2300      	moveq	r3, #0
 8005ec8:	b2db      	uxtb	r3, r3
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d001      	beq.n	8005ed2 <HAL_TIM_PWM_Start_IT+0x76>
  {
    return HAL_ERROR;
 8005ece:	2301      	movs	r3, #1
 8005ed0:	e0b3      	b.n	800603a <HAL_TIM_PWM_Start_IT+0x1de>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005ed2:	683b      	ldr	r3, [r7, #0]
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d104      	bne.n	8005ee2 <HAL_TIM_PWM_Start_IT+0x86>
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	2202      	movs	r2, #2
 8005edc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005ee0:	e013      	b.n	8005f0a <HAL_TIM_PWM_Start_IT+0xae>
 8005ee2:	683b      	ldr	r3, [r7, #0]
 8005ee4:	2b04      	cmp	r3, #4
 8005ee6:	d104      	bne.n	8005ef2 <HAL_TIM_PWM_Start_IT+0x96>
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	2202      	movs	r2, #2
 8005eec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005ef0:	e00b      	b.n	8005f0a <HAL_TIM_PWM_Start_IT+0xae>
 8005ef2:	683b      	ldr	r3, [r7, #0]
 8005ef4:	2b08      	cmp	r3, #8
 8005ef6:	d104      	bne.n	8005f02 <HAL_TIM_PWM_Start_IT+0xa6>
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	2202      	movs	r2, #2
 8005efc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005f00:	e003      	b.n	8005f0a <HAL_TIM_PWM_Start_IT+0xae>
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	2202      	movs	r2, #2
 8005f06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  switch (Channel)
 8005f0a:	683b      	ldr	r3, [r7, #0]
 8005f0c:	2b0c      	cmp	r3, #12
 8005f0e:	d841      	bhi.n	8005f94 <HAL_TIM_PWM_Start_IT+0x138>
 8005f10:	a201      	add	r2, pc, #4	; (adr r2, 8005f18 <HAL_TIM_PWM_Start_IT+0xbc>)
 8005f12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f16:	bf00      	nop
 8005f18:	08005f4d 	.word	0x08005f4d
 8005f1c:	08005f95 	.word	0x08005f95
 8005f20:	08005f95 	.word	0x08005f95
 8005f24:	08005f95 	.word	0x08005f95
 8005f28:	08005f5f 	.word	0x08005f5f
 8005f2c:	08005f95 	.word	0x08005f95
 8005f30:	08005f95 	.word	0x08005f95
 8005f34:	08005f95 	.word	0x08005f95
 8005f38:	08005f71 	.word	0x08005f71
 8005f3c:	08005f95 	.word	0x08005f95
 8005f40:	08005f95 	.word	0x08005f95
 8005f44:	08005f95 	.word	0x08005f95
 8005f48:	08005f83 	.word	0x08005f83
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	68da      	ldr	r2, [r3, #12]
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	f042 0202 	orr.w	r2, r2, #2
 8005f5a:	60da      	str	r2, [r3, #12]
      break;
 8005f5c:	e01d      	b.n	8005f9a <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	68da      	ldr	r2, [r3, #12]
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	f042 0204 	orr.w	r2, r2, #4
 8005f6c:	60da      	str	r2, [r3, #12]
      break;
 8005f6e:	e014      	b.n	8005f9a <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	68da      	ldr	r2, [r3, #12]
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	f042 0208 	orr.w	r2, r2, #8
 8005f7e:	60da      	str	r2, [r3, #12]
      break;
 8005f80:	e00b      	b.n	8005f9a <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	68da      	ldr	r2, [r3, #12]
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	f042 0210 	orr.w	r2, r2, #16
 8005f90:	60da      	str	r2, [r3, #12]
      break;
 8005f92:	e002      	b.n	8005f9a <HAL_TIM_PWM_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 8005f94:	2301      	movs	r3, #1
 8005f96:	73fb      	strb	r3, [r7, #15]
      break;
 8005f98:	bf00      	nop
  }

  if (status == HAL_OK)
 8005f9a:	7bfb      	ldrb	r3, [r7, #15]
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d14b      	bne.n	8006038 <HAL_TIM_PWM_Start_IT+0x1dc>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	2201      	movs	r2, #1
 8005fa6:	6839      	ldr	r1, [r7, #0]
 8005fa8:	4618      	mov	r0, r3
 8005faa:	f000 fe67 	bl	8006c7c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	4a24      	ldr	r2, [pc, #144]	; (8006044 <HAL_TIM_PWM_Start_IT+0x1e8>)
 8005fb4:	4293      	cmp	r3, r2
 8005fb6:	d107      	bne.n	8005fc8 <HAL_TIM_PWM_Start_IT+0x16c>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005fc6:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	4a1d      	ldr	r2, [pc, #116]	; (8006044 <HAL_TIM_PWM_Start_IT+0x1e8>)
 8005fce:	4293      	cmp	r3, r2
 8005fd0:	d018      	beq.n	8006004 <HAL_TIM_PWM_Start_IT+0x1a8>
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005fda:	d013      	beq.n	8006004 <HAL_TIM_PWM_Start_IT+0x1a8>
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	4a19      	ldr	r2, [pc, #100]	; (8006048 <HAL_TIM_PWM_Start_IT+0x1ec>)
 8005fe2:	4293      	cmp	r3, r2
 8005fe4:	d00e      	beq.n	8006004 <HAL_TIM_PWM_Start_IT+0x1a8>
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	4a18      	ldr	r2, [pc, #96]	; (800604c <HAL_TIM_PWM_Start_IT+0x1f0>)
 8005fec:	4293      	cmp	r3, r2
 8005fee:	d009      	beq.n	8006004 <HAL_TIM_PWM_Start_IT+0x1a8>
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	4a16      	ldr	r2, [pc, #88]	; (8006050 <HAL_TIM_PWM_Start_IT+0x1f4>)
 8005ff6:	4293      	cmp	r3, r2
 8005ff8:	d004      	beq.n	8006004 <HAL_TIM_PWM_Start_IT+0x1a8>
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	4a15      	ldr	r2, [pc, #84]	; (8006054 <HAL_TIM_PWM_Start_IT+0x1f8>)
 8006000:	4293      	cmp	r3, r2
 8006002:	d111      	bne.n	8006028 <HAL_TIM_PWM_Start_IT+0x1cc>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	689b      	ldr	r3, [r3, #8]
 800600a:	f003 0307 	and.w	r3, r3, #7
 800600e:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006010:	68bb      	ldr	r3, [r7, #8]
 8006012:	2b06      	cmp	r3, #6
 8006014:	d010      	beq.n	8006038 <HAL_TIM_PWM_Start_IT+0x1dc>
      {
        __HAL_TIM_ENABLE(htim);
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	681a      	ldr	r2, [r3, #0]
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	f042 0201 	orr.w	r2, r2, #1
 8006024:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006026:	e007      	b.n	8006038 <HAL_TIM_PWM_Start_IT+0x1dc>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	681a      	ldr	r2, [r3, #0]
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	f042 0201 	orr.w	r2, r2, #1
 8006036:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8006038:	7bfb      	ldrb	r3, [r7, #15]
}
 800603a:	4618      	mov	r0, r3
 800603c:	3710      	adds	r7, #16
 800603e:	46bd      	mov	sp, r7
 8006040:	bd80      	pop	{r7, pc}
 8006042:	bf00      	nop
 8006044:	40010000 	.word	0x40010000
 8006048:	40000400 	.word	0x40000400
 800604c:	40000800 	.word	0x40000800
 8006050:	40000c00 	.word	0x40000c00
 8006054:	40014000 	.word	0x40014000

08006058 <HAL_TIM_PWM_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006058:	b580      	push	{r7, lr}
 800605a:	b084      	sub	sp, #16
 800605c:	af00      	add	r7, sp, #0
 800605e:	6078      	str	r0, [r7, #4]
 8006060:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006062:	2300      	movs	r3, #0
 8006064:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8006066:	683b      	ldr	r3, [r7, #0]
 8006068:	2b0c      	cmp	r3, #12
 800606a:	d841      	bhi.n	80060f0 <HAL_TIM_PWM_Stop_IT+0x98>
 800606c:	a201      	add	r2, pc, #4	; (adr r2, 8006074 <HAL_TIM_PWM_Stop_IT+0x1c>)
 800606e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006072:	bf00      	nop
 8006074:	080060a9 	.word	0x080060a9
 8006078:	080060f1 	.word	0x080060f1
 800607c:	080060f1 	.word	0x080060f1
 8006080:	080060f1 	.word	0x080060f1
 8006084:	080060bb 	.word	0x080060bb
 8006088:	080060f1 	.word	0x080060f1
 800608c:	080060f1 	.word	0x080060f1
 8006090:	080060f1 	.word	0x080060f1
 8006094:	080060cd 	.word	0x080060cd
 8006098:	080060f1 	.word	0x080060f1
 800609c:	080060f1 	.word	0x080060f1
 80060a0:	080060f1 	.word	0x080060f1
 80060a4:	080060df 	.word	0x080060df
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	68da      	ldr	r2, [r3, #12]
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	f022 0202 	bic.w	r2, r2, #2
 80060b6:	60da      	str	r2, [r3, #12]
      break;
 80060b8:	e01d      	b.n	80060f6 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	68da      	ldr	r2, [r3, #12]
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	f022 0204 	bic.w	r2, r2, #4
 80060c8:	60da      	str	r2, [r3, #12]
      break;
 80060ca:	e014      	b.n	80060f6 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	68da      	ldr	r2, [r3, #12]
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	f022 0208 	bic.w	r2, r2, #8
 80060da:	60da      	str	r2, [r3, #12]
      break;
 80060dc:	e00b      	b.n	80060f6 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	68da      	ldr	r2, [r3, #12]
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	f022 0210 	bic.w	r2, r2, #16
 80060ec:	60da      	str	r2, [r3, #12]
      break;
 80060ee:	e002      	b.n	80060f6 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 80060f0:	2301      	movs	r3, #1
 80060f2:	73fb      	strb	r3, [r7, #15]
      break;
 80060f4:	bf00      	nop
  }

  if (status == HAL_OK)
 80060f6:	7bfb      	ldrb	r3, [r7, #15]
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d157      	bne.n	80061ac <HAL_TIM_PWM_Stop_IT+0x154>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	2200      	movs	r2, #0
 8006102:	6839      	ldr	r1, [r7, #0]
 8006104:	4618      	mov	r0, r3
 8006106:	f000 fdb9 	bl	8006c7c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	4a2a      	ldr	r2, [pc, #168]	; (80061b8 <HAL_TIM_PWM_Stop_IT+0x160>)
 8006110:	4293      	cmp	r3, r2
 8006112:	d117      	bne.n	8006144 <HAL_TIM_PWM_Stop_IT+0xec>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	6a1a      	ldr	r2, [r3, #32]
 800611a:	f241 1311 	movw	r3, #4369	; 0x1111
 800611e:	4013      	ands	r3, r2
 8006120:	2b00      	cmp	r3, #0
 8006122:	d10f      	bne.n	8006144 <HAL_TIM_PWM_Stop_IT+0xec>
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	6a1a      	ldr	r2, [r3, #32]
 800612a:	f240 4344 	movw	r3, #1092	; 0x444
 800612e:	4013      	ands	r3, r2
 8006130:	2b00      	cmp	r3, #0
 8006132:	d107      	bne.n	8006144 <HAL_TIM_PWM_Stop_IT+0xec>
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006142:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	6a1a      	ldr	r2, [r3, #32]
 800614a:	f241 1311 	movw	r3, #4369	; 0x1111
 800614e:	4013      	ands	r3, r2
 8006150:	2b00      	cmp	r3, #0
 8006152:	d10f      	bne.n	8006174 <HAL_TIM_PWM_Stop_IT+0x11c>
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	6a1a      	ldr	r2, [r3, #32]
 800615a:	f240 4344 	movw	r3, #1092	; 0x444
 800615e:	4013      	ands	r3, r2
 8006160:	2b00      	cmp	r3, #0
 8006162:	d107      	bne.n	8006174 <HAL_TIM_PWM_Stop_IT+0x11c>
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	681a      	ldr	r2, [r3, #0]
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	f022 0201 	bic.w	r2, r2, #1
 8006172:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8006174:	683b      	ldr	r3, [r7, #0]
 8006176:	2b00      	cmp	r3, #0
 8006178:	d104      	bne.n	8006184 <HAL_TIM_PWM_Stop_IT+0x12c>
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	2201      	movs	r2, #1
 800617e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006182:	e013      	b.n	80061ac <HAL_TIM_PWM_Stop_IT+0x154>
 8006184:	683b      	ldr	r3, [r7, #0]
 8006186:	2b04      	cmp	r3, #4
 8006188:	d104      	bne.n	8006194 <HAL_TIM_PWM_Stop_IT+0x13c>
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	2201      	movs	r2, #1
 800618e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006192:	e00b      	b.n	80061ac <HAL_TIM_PWM_Stop_IT+0x154>
 8006194:	683b      	ldr	r3, [r7, #0]
 8006196:	2b08      	cmp	r3, #8
 8006198:	d104      	bne.n	80061a4 <HAL_TIM_PWM_Stop_IT+0x14c>
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	2201      	movs	r2, #1
 800619e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80061a2:	e003      	b.n	80061ac <HAL_TIM_PWM_Stop_IT+0x154>
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	2201      	movs	r2, #1
 80061a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 80061ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80061ae:	4618      	mov	r0, r3
 80061b0:	3710      	adds	r7, #16
 80061b2:	46bd      	mov	sp, r7
 80061b4:	bd80      	pop	{r7, pc}
 80061b6:	bf00      	nop
 80061b8:	40010000 	.word	0x40010000

080061bc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80061bc:	b580      	push	{r7, lr}
 80061be:	b082      	sub	sp, #8
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	691b      	ldr	r3, [r3, #16]
 80061ca:	f003 0302 	and.w	r3, r3, #2
 80061ce:	2b02      	cmp	r3, #2
 80061d0:	d122      	bne.n	8006218 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	68db      	ldr	r3, [r3, #12]
 80061d8:	f003 0302 	and.w	r3, r3, #2
 80061dc:	2b02      	cmp	r3, #2
 80061de:	d11b      	bne.n	8006218 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	f06f 0202 	mvn.w	r2, #2
 80061e8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	2201      	movs	r2, #1
 80061ee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	699b      	ldr	r3, [r3, #24]
 80061f6:	f003 0303 	and.w	r3, r3, #3
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d003      	beq.n	8006206 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80061fe:	6878      	ldr	r0, [r7, #4]
 8006200:	f000 fa81 	bl	8006706 <HAL_TIM_IC_CaptureCallback>
 8006204:	e005      	b.n	8006212 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006206:	6878      	ldr	r0, [r7, #4]
 8006208:	f000 fa73 	bl	80066f2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800620c:	6878      	ldr	r0, [r7, #4]
 800620e:	f7fa fea1 	bl	8000f54 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	2200      	movs	r2, #0
 8006216:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	691b      	ldr	r3, [r3, #16]
 800621e:	f003 0304 	and.w	r3, r3, #4
 8006222:	2b04      	cmp	r3, #4
 8006224:	d122      	bne.n	800626c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	68db      	ldr	r3, [r3, #12]
 800622c:	f003 0304 	and.w	r3, r3, #4
 8006230:	2b04      	cmp	r3, #4
 8006232:	d11b      	bne.n	800626c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	f06f 0204 	mvn.w	r2, #4
 800623c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	2202      	movs	r2, #2
 8006242:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	699b      	ldr	r3, [r3, #24]
 800624a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800624e:	2b00      	cmp	r3, #0
 8006250:	d003      	beq.n	800625a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006252:	6878      	ldr	r0, [r7, #4]
 8006254:	f000 fa57 	bl	8006706 <HAL_TIM_IC_CaptureCallback>
 8006258:	e005      	b.n	8006266 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800625a:	6878      	ldr	r0, [r7, #4]
 800625c:	f000 fa49 	bl	80066f2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006260:	6878      	ldr	r0, [r7, #4]
 8006262:	f7fa fe77 	bl	8000f54 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	2200      	movs	r2, #0
 800626a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	691b      	ldr	r3, [r3, #16]
 8006272:	f003 0308 	and.w	r3, r3, #8
 8006276:	2b08      	cmp	r3, #8
 8006278:	d122      	bne.n	80062c0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	68db      	ldr	r3, [r3, #12]
 8006280:	f003 0308 	and.w	r3, r3, #8
 8006284:	2b08      	cmp	r3, #8
 8006286:	d11b      	bne.n	80062c0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	f06f 0208 	mvn.w	r2, #8
 8006290:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	2204      	movs	r2, #4
 8006296:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	69db      	ldr	r3, [r3, #28]
 800629e:	f003 0303 	and.w	r3, r3, #3
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d003      	beq.n	80062ae <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80062a6:	6878      	ldr	r0, [r7, #4]
 80062a8:	f000 fa2d 	bl	8006706 <HAL_TIM_IC_CaptureCallback>
 80062ac:	e005      	b.n	80062ba <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80062ae:	6878      	ldr	r0, [r7, #4]
 80062b0:	f000 fa1f 	bl	80066f2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80062b4:	6878      	ldr	r0, [r7, #4]
 80062b6:	f7fa fe4d 	bl	8000f54 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	2200      	movs	r2, #0
 80062be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	691b      	ldr	r3, [r3, #16]
 80062c6:	f003 0310 	and.w	r3, r3, #16
 80062ca:	2b10      	cmp	r3, #16
 80062cc:	d122      	bne.n	8006314 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	68db      	ldr	r3, [r3, #12]
 80062d4:	f003 0310 	and.w	r3, r3, #16
 80062d8:	2b10      	cmp	r3, #16
 80062da:	d11b      	bne.n	8006314 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	f06f 0210 	mvn.w	r2, #16
 80062e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	2208      	movs	r2, #8
 80062ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	69db      	ldr	r3, [r3, #28]
 80062f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d003      	beq.n	8006302 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80062fa:	6878      	ldr	r0, [r7, #4]
 80062fc:	f000 fa03 	bl	8006706 <HAL_TIM_IC_CaptureCallback>
 8006300:	e005      	b.n	800630e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006302:	6878      	ldr	r0, [r7, #4]
 8006304:	f000 f9f5 	bl	80066f2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006308:	6878      	ldr	r0, [r7, #4]
 800630a:	f7fa fe23 	bl	8000f54 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	2200      	movs	r2, #0
 8006312:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	691b      	ldr	r3, [r3, #16]
 800631a:	f003 0301 	and.w	r3, r3, #1
 800631e:	2b01      	cmp	r3, #1
 8006320:	d10e      	bne.n	8006340 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	68db      	ldr	r3, [r3, #12]
 8006328:	f003 0301 	and.w	r3, r3, #1
 800632c:	2b01      	cmp	r3, #1
 800632e:	d107      	bne.n	8006340 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	f06f 0201 	mvn.w	r2, #1
 8006338:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800633a:	6878      	ldr	r0, [r7, #4]
 800633c:	f000 f9cf 	bl	80066de <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	691b      	ldr	r3, [r3, #16]
 8006346:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800634a:	2b80      	cmp	r3, #128	; 0x80
 800634c:	d10e      	bne.n	800636c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	68db      	ldr	r3, [r3, #12]
 8006354:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006358:	2b80      	cmp	r3, #128	; 0x80
 800635a:	d107      	bne.n	800636c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006364:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006366:	6878      	ldr	r0, [r7, #4]
 8006368:	f000 fd78 	bl	8006e5c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	691b      	ldr	r3, [r3, #16]
 8006372:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006376:	2b40      	cmp	r3, #64	; 0x40
 8006378:	d10e      	bne.n	8006398 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	68db      	ldr	r3, [r3, #12]
 8006380:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006384:	2b40      	cmp	r3, #64	; 0x40
 8006386:	d107      	bne.n	8006398 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006390:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006392:	6878      	ldr	r0, [r7, #4]
 8006394:	f000 f9c1 	bl	800671a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	691b      	ldr	r3, [r3, #16]
 800639e:	f003 0320 	and.w	r3, r3, #32
 80063a2:	2b20      	cmp	r3, #32
 80063a4:	d10e      	bne.n	80063c4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	68db      	ldr	r3, [r3, #12]
 80063ac:	f003 0320 	and.w	r3, r3, #32
 80063b0:	2b20      	cmp	r3, #32
 80063b2:	d107      	bne.n	80063c4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	f06f 0220 	mvn.w	r2, #32
 80063bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80063be:	6878      	ldr	r0, [r7, #4]
 80063c0:	f000 fd42 	bl	8006e48 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80063c4:	bf00      	nop
 80063c6:	3708      	adds	r7, #8
 80063c8:	46bd      	mov	sp, r7
 80063ca:	bd80      	pop	{r7, pc}

080063cc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80063cc:	b580      	push	{r7, lr}
 80063ce:	b086      	sub	sp, #24
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	60f8      	str	r0, [r7, #12]
 80063d4:	60b9      	str	r1, [r7, #8]
 80063d6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80063d8:	2300      	movs	r3, #0
 80063da:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80063e2:	2b01      	cmp	r3, #1
 80063e4:	d101      	bne.n	80063ea <HAL_TIM_PWM_ConfigChannel+0x1e>
 80063e6:	2302      	movs	r3, #2
 80063e8:	e0ae      	b.n	8006548 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	2201      	movs	r2, #1
 80063ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	2b0c      	cmp	r3, #12
 80063f6:	f200 809f 	bhi.w	8006538 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80063fa:	a201      	add	r2, pc, #4	; (adr r2, 8006400 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80063fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006400:	08006435 	.word	0x08006435
 8006404:	08006539 	.word	0x08006539
 8006408:	08006539 	.word	0x08006539
 800640c:	08006539 	.word	0x08006539
 8006410:	08006475 	.word	0x08006475
 8006414:	08006539 	.word	0x08006539
 8006418:	08006539 	.word	0x08006539
 800641c:	08006539 	.word	0x08006539
 8006420:	080064b7 	.word	0x080064b7
 8006424:	08006539 	.word	0x08006539
 8006428:	08006539 	.word	0x08006539
 800642c:	08006539 	.word	0x08006539
 8006430:	080064f7 	.word	0x080064f7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	68b9      	ldr	r1, [r7, #8]
 800643a:	4618      	mov	r0, r3
 800643c:	f000 f9f8 	bl	8006830 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	699a      	ldr	r2, [r3, #24]
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	f042 0208 	orr.w	r2, r2, #8
 800644e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	699a      	ldr	r2, [r3, #24]
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	f022 0204 	bic.w	r2, r2, #4
 800645e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	6999      	ldr	r1, [r3, #24]
 8006466:	68bb      	ldr	r3, [r7, #8]
 8006468:	691a      	ldr	r2, [r3, #16]
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	430a      	orrs	r2, r1
 8006470:	619a      	str	r2, [r3, #24]
      break;
 8006472:	e064      	b.n	800653e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	68b9      	ldr	r1, [r7, #8]
 800647a:	4618      	mov	r0, r3
 800647c:	f000 fa3e 	bl	80068fc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	699a      	ldr	r2, [r3, #24]
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800648e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	699a      	ldr	r2, [r3, #24]
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800649e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	6999      	ldr	r1, [r3, #24]
 80064a6:	68bb      	ldr	r3, [r7, #8]
 80064a8:	691b      	ldr	r3, [r3, #16]
 80064aa:	021a      	lsls	r2, r3, #8
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	430a      	orrs	r2, r1
 80064b2:	619a      	str	r2, [r3, #24]
      break;
 80064b4:	e043      	b.n	800653e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	68b9      	ldr	r1, [r7, #8]
 80064bc:	4618      	mov	r0, r3
 80064be:	f000 fa89 	bl	80069d4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	69da      	ldr	r2, [r3, #28]
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	f042 0208 	orr.w	r2, r2, #8
 80064d0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	69da      	ldr	r2, [r3, #28]
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	f022 0204 	bic.w	r2, r2, #4
 80064e0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	69d9      	ldr	r1, [r3, #28]
 80064e8:	68bb      	ldr	r3, [r7, #8]
 80064ea:	691a      	ldr	r2, [r3, #16]
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	430a      	orrs	r2, r1
 80064f2:	61da      	str	r2, [r3, #28]
      break;
 80064f4:	e023      	b.n	800653e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	68b9      	ldr	r1, [r7, #8]
 80064fc:	4618      	mov	r0, r3
 80064fe:	f000 fad3 	bl	8006aa8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	69da      	ldr	r2, [r3, #28]
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006510:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	69da      	ldr	r2, [r3, #28]
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006520:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	69d9      	ldr	r1, [r3, #28]
 8006528:	68bb      	ldr	r3, [r7, #8]
 800652a:	691b      	ldr	r3, [r3, #16]
 800652c:	021a      	lsls	r2, r3, #8
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	430a      	orrs	r2, r1
 8006534:	61da      	str	r2, [r3, #28]
      break;
 8006536:	e002      	b.n	800653e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006538:	2301      	movs	r3, #1
 800653a:	75fb      	strb	r3, [r7, #23]
      break;
 800653c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	2200      	movs	r2, #0
 8006542:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006546:	7dfb      	ldrb	r3, [r7, #23]
}
 8006548:	4618      	mov	r0, r3
 800654a:	3718      	adds	r7, #24
 800654c:	46bd      	mov	sp, r7
 800654e:	bd80      	pop	{r7, pc}

08006550 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006550:	b580      	push	{r7, lr}
 8006552:	b084      	sub	sp, #16
 8006554:	af00      	add	r7, sp, #0
 8006556:	6078      	str	r0, [r7, #4]
 8006558:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800655a:	2300      	movs	r3, #0
 800655c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006564:	2b01      	cmp	r3, #1
 8006566:	d101      	bne.n	800656c <HAL_TIM_ConfigClockSource+0x1c>
 8006568:	2302      	movs	r3, #2
 800656a:	e0b4      	b.n	80066d6 <HAL_TIM_ConfigClockSource+0x186>
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	2201      	movs	r2, #1
 8006570:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	2202      	movs	r2, #2
 8006578:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	689b      	ldr	r3, [r3, #8]
 8006582:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006584:	68bb      	ldr	r3, [r7, #8]
 8006586:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800658a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800658c:	68bb      	ldr	r3, [r7, #8]
 800658e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006592:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	68ba      	ldr	r2, [r7, #8]
 800659a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800659c:	683b      	ldr	r3, [r7, #0]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80065a4:	d03e      	beq.n	8006624 <HAL_TIM_ConfigClockSource+0xd4>
 80065a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80065aa:	f200 8087 	bhi.w	80066bc <HAL_TIM_ConfigClockSource+0x16c>
 80065ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80065b2:	f000 8086 	beq.w	80066c2 <HAL_TIM_ConfigClockSource+0x172>
 80065b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80065ba:	d87f      	bhi.n	80066bc <HAL_TIM_ConfigClockSource+0x16c>
 80065bc:	2b70      	cmp	r3, #112	; 0x70
 80065be:	d01a      	beq.n	80065f6 <HAL_TIM_ConfigClockSource+0xa6>
 80065c0:	2b70      	cmp	r3, #112	; 0x70
 80065c2:	d87b      	bhi.n	80066bc <HAL_TIM_ConfigClockSource+0x16c>
 80065c4:	2b60      	cmp	r3, #96	; 0x60
 80065c6:	d050      	beq.n	800666a <HAL_TIM_ConfigClockSource+0x11a>
 80065c8:	2b60      	cmp	r3, #96	; 0x60
 80065ca:	d877      	bhi.n	80066bc <HAL_TIM_ConfigClockSource+0x16c>
 80065cc:	2b50      	cmp	r3, #80	; 0x50
 80065ce:	d03c      	beq.n	800664a <HAL_TIM_ConfigClockSource+0xfa>
 80065d0:	2b50      	cmp	r3, #80	; 0x50
 80065d2:	d873      	bhi.n	80066bc <HAL_TIM_ConfigClockSource+0x16c>
 80065d4:	2b40      	cmp	r3, #64	; 0x40
 80065d6:	d058      	beq.n	800668a <HAL_TIM_ConfigClockSource+0x13a>
 80065d8:	2b40      	cmp	r3, #64	; 0x40
 80065da:	d86f      	bhi.n	80066bc <HAL_TIM_ConfigClockSource+0x16c>
 80065dc:	2b30      	cmp	r3, #48	; 0x30
 80065de:	d064      	beq.n	80066aa <HAL_TIM_ConfigClockSource+0x15a>
 80065e0:	2b30      	cmp	r3, #48	; 0x30
 80065e2:	d86b      	bhi.n	80066bc <HAL_TIM_ConfigClockSource+0x16c>
 80065e4:	2b20      	cmp	r3, #32
 80065e6:	d060      	beq.n	80066aa <HAL_TIM_ConfigClockSource+0x15a>
 80065e8:	2b20      	cmp	r3, #32
 80065ea:	d867      	bhi.n	80066bc <HAL_TIM_ConfigClockSource+0x16c>
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d05c      	beq.n	80066aa <HAL_TIM_ConfigClockSource+0x15a>
 80065f0:	2b10      	cmp	r3, #16
 80065f2:	d05a      	beq.n	80066aa <HAL_TIM_ConfigClockSource+0x15a>
 80065f4:	e062      	b.n	80066bc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	6818      	ldr	r0, [r3, #0]
 80065fa:	683b      	ldr	r3, [r7, #0]
 80065fc:	6899      	ldr	r1, [r3, #8]
 80065fe:	683b      	ldr	r3, [r7, #0]
 8006600:	685a      	ldr	r2, [r3, #4]
 8006602:	683b      	ldr	r3, [r7, #0]
 8006604:	68db      	ldr	r3, [r3, #12]
 8006606:	f000 fb19 	bl	8006c3c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	689b      	ldr	r3, [r3, #8]
 8006610:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006612:	68bb      	ldr	r3, [r7, #8]
 8006614:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006618:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	68ba      	ldr	r2, [r7, #8]
 8006620:	609a      	str	r2, [r3, #8]
      break;
 8006622:	e04f      	b.n	80066c4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	6818      	ldr	r0, [r3, #0]
 8006628:	683b      	ldr	r3, [r7, #0]
 800662a:	6899      	ldr	r1, [r3, #8]
 800662c:	683b      	ldr	r3, [r7, #0]
 800662e:	685a      	ldr	r2, [r3, #4]
 8006630:	683b      	ldr	r3, [r7, #0]
 8006632:	68db      	ldr	r3, [r3, #12]
 8006634:	f000 fb02 	bl	8006c3c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	689a      	ldr	r2, [r3, #8]
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006646:	609a      	str	r2, [r3, #8]
      break;
 8006648:	e03c      	b.n	80066c4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	6818      	ldr	r0, [r3, #0]
 800664e:	683b      	ldr	r3, [r7, #0]
 8006650:	6859      	ldr	r1, [r3, #4]
 8006652:	683b      	ldr	r3, [r7, #0]
 8006654:	68db      	ldr	r3, [r3, #12]
 8006656:	461a      	mov	r2, r3
 8006658:	f000 fa76 	bl	8006b48 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	2150      	movs	r1, #80	; 0x50
 8006662:	4618      	mov	r0, r3
 8006664:	f000 facf 	bl	8006c06 <TIM_ITRx_SetConfig>
      break;
 8006668:	e02c      	b.n	80066c4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	6818      	ldr	r0, [r3, #0]
 800666e:	683b      	ldr	r3, [r7, #0]
 8006670:	6859      	ldr	r1, [r3, #4]
 8006672:	683b      	ldr	r3, [r7, #0]
 8006674:	68db      	ldr	r3, [r3, #12]
 8006676:	461a      	mov	r2, r3
 8006678:	f000 fa95 	bl	8006ba6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	2160      	movs	r1, #96	; 0x60
 8006682:	4618      	mov	r0, r3
 8006684:	f000 fabf 	bl	8006c06 <TIM_ITRx_SetConfig>
      break;
 8006688:	e01c      	b.n	80066c4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	6818      	ldr	r0, [r3, #0]
 800668e:	683b      	ldr	r3, [r7, #0]
 8006690:	6859      	ldr	r1, [r3, #4]
 8006692:	683b      	ldr	r3, [r7, #0]
 8006694:	68db      	ldr	r3, [r3, #12]
 8006696:	461a      	mov	r2, r3
 8006698:	f000 fa56 	bl	8006b48 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	2140      	movs	r1, #64	; 0x40
 80066a2:	4618      	mov	r0, r3
 80066a4:	f000 faaf 	bl	8006c06 <TIM_ITRx_SetConfig>
      break;
 80066a8:	e00c      	b.n	80066c4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681a      	ldr	r2, [r3, #0]
 80066ae:	683b      	ldr	r3, [r7, #0]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	4619      	mov	r1, r3
 80066b4:	4610      	mov	r0, r2
 80066b6:	f000 faa6 	bl	8006c06 <TIM_ITRx_SetConfig>
      break;
 80066ba:	e003      	b.n	80066c4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80066bc:	2301      	movs	r3, #1
 80066be:	73fb      	strb	r3, [r7, #15]
      break;
 80066c0:	e000      	b.n	80066c4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80066c2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	2201      	movs	r2, #1
 80066c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	2200      	movs	r2, #0
 80066d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80066d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80066d6:	4618      	mov	r0, r3
 80066d8:	3710      	adds	r7, #16
 80066da:	46bd      	mov	sp, r7
 80066dc:	bd80      	pop	{r7, pc}

080066de <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80066de:	b480      	push	{r7}
 80066e0:	b083      	sub	sp, #12
 80066e2:	af00      	add	r7, sp, #0
 80066e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80066e6:	bf00      	nop
 80066e8:	370c      	adds	r7, #12
 80066ea:	46bd      	mov	sp, r7
 80066ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f0:	4770      	bx	lr

080066f2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80066f2:	b480      	push	{r7}
 80066f4:	b083      	sub	sp, #12
 80066f6:	af00      	add	r7, sp, #0
 80066f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80066fa:	bf00      	nop
 80066fc:	370c      	adds	r7, #12
 80066fe:	46bd      	mov	sp, r7
 8006700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006704:	4770      	bx	lr

08006706 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006706:	b480      	push	{r7}
 8006708:	b083      	sub	sp, #12
 800670a:	af00      	add	r7, sp, #0
 800670c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800670e:	bf00      	nop
 8006710:	370c      	adds	r7, #12
 8006712:	46bd      	mov	sp, r7
 8006714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006718:	4770      	bx	lr

0800671a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800671a:	b480      	push	{r7}
 800671c:	b083      	sub	sp, #12
 800671e:	af00      	add	r7, sp, #0
 8006720:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006722:	bf00      	nop
 8006724:	370c      	adds	r7, #12
 8006726:	46bd      	mov	sp, r7
 8006728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800672c:	4770      	bx	lr
	...

08006730 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006730:	b480      	push	{r7}
 8006732:	b085      	sub	sp, #20
 8006734:	af00      	add	r7, sp, #0
 8006736:	6078      	str	r0, [r7, #4]
 8006738:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	4a34      	ldr	r2, [pc, #208]	; (8006814 <TIM_Base_SetConfig+0xe4>)
 8006744:	4293      	cmp	r3, r2
 8006746:	d00f      	beq.n	8006768 <TIM_Base_SetConfig+0x38>
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800674e:	d00b      	beq.n	8006768 <TIM_Base_SetConfig+0x38>
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	4a31      	ldr	r2, [pc, #196]	; (8006818 <TIM_Base_SetConfig+0xe8>)
 8006754:	4293      	cmp	r3, r2
 8006756:	d007      	beq.n	8006768 <TIM_Base_SetConfig+0x38>
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	4a30      	ldr	r2, [pc, #192]	; (800681c <TIM_Base_SetConfig+0xec>)
 800675c:	4293      	cmp	r3, r2
 800675e:	d003      	beq.n	8006768 <TIM_Base_SetConfig+0x38>
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	4a2f      	ldr	r2, [pc, #188]	; (8006820 <TIM_Base_SetConfig+0xf0>)
 8006764:	4293      	cmp	r3, r2
 8006766:	d108      	bne.n	800677a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800676e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006770:	683b      	ldr	r3, [r7, #0]
 8006772:	685b      	ldr	r3, [r3, #4]
 8006774:	68fa      	ldr	r2, [r7, #12]
 8006776:	4313      	orrs	r3, r2
 8006778:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	4a25      	ldr	r2, [pc, #148]	; (8006814 <TIM_Base_SetConfig+0xe4>)
 800677e:	4293      	cmp	r3, r2
 8006780:	d01b      	beq.n	80067ba <TIM_Base_SetConfig+0x8a>
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006788:	d017      	beq.n	80067ba <TIM_Base_SetConfig+0x8a>
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	4a22      	ldr	r2, [pc, #136]	; (8006818 <TIM_Base_SetConfig+0xe8>)
 800678e:	4293      	cmp	r3, r2
 8006790:	d013      	beq.n	80067ba <TIM_Base_SetConfig+0x8a>
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	4a21      	ldr	r2, [pc, #132]	; (800681c <TIM_Base_SetConfig+0xec>)
 8006796:	4293      	cmp	r3, r2
 8006798:	d00f      	beq.n	80067ba <TIM_Base_SetConfig+0x8a>
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	4a20      	ldr	r2, [pc, #128]	; (8006820 <TIM_Base_SetConfig+0xf0>)
 800679e:	4293      	cmp	r3, r2
 80067a0:	d00b      	beq.n	80067ba <TIM_Base_SetConfig+0x8a>
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	4a1f      	ldr	r2, [pc, #124]	; (8006824 <TIM_Base_SetConfig+0xf4>)
 80067a6:	4293      	cmp	r3, r2
 80067a8:	d007      	beq.n	80067ba <TIM_Base_SetConfig+0x8a>
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	4a1e      	ldr	r2, [pc, #120]	; (8006828 <TIM_Base_SetConfig+0xf8>)
 80067ae:	4293      	cmp	r3, r2
 80067b0:	d003      	beq.n	80067ba <TIM_Base_SetConfig+0x8a>
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	4a1d      	ldr	r2, [pc, #116]	; (800682c <TIM_Base_SetConfig+0xfc>)
 80067b6:	4293      	cmp	r3, r2
 80067b8:	d108      	bne.n	80067cc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80067c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80067c2:	683b      	ldr	r3, [r7, #0]
 80067c4:	68db      	ldr	r3, [r3, #12]
 80067c6:	68fa      	ldr	r2, [r7, #12]
 80067c8:	4313      	orrs	r3, r2
 80067ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80067d2:	683b      	ldr	r3, [r7, #0]
 80067d4:	695b      	ldr	r3, [r3, #20]
 80067d6:	4313      	orrs	r3, r2
 80067d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	68fa      	ldr	r2, [r7, #12]
 80067de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80067e0:	683b      	ldr	r3, [r7, #0]
 80067e2:	689a      	ldr	r2, [r3, #8]
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80067e8:	683b      	ldr	r3, [r7, #0]
 80067ea:	681a      	ldr	r2, [r3, #0]
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	4a08      	ldr	r2, [pc, #32]	; (8006814 <TIM_Base_SetConfig+0xe4>)
 80067f4:	4293      	cmp	r3, r2
 80067f6:	d103      	bne.n	8006800 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80067f8:	683b      	ldr	r3, [r7, #0]
 80067fa:	691a      	ldr	r2, [r3, #16]
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	2201      	movs	r2, #1
 8006804:	615a      	str	r2, [r3, #20]
}
 8006806:	bf00      	nop
 8006808:	3714      	adds	r7, #20
 800680a:	46bd      	mov	sp, r7
 800680c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006810:	4770      	bx	lr
 8006812:	bf00      	nop
 8006814:	40010000 	.word	0x40010000
 8006818:	40000400 	.word	0x40000400
 800681c:	40000800 	.word	0x40000800
 8006820:	40000c00 	.word	0x40000c00
 8006824:	40014000 	.word	0x40014000
 8006828:	40014400 	.word	0x40014400
 800682c:	40014800 	.word	0x40014800

08006830 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006830:	b480      	push	{r7}
 8006832:	b087      	sub	sp, #28
 8006834:	af00      	add	r7, sp, #0
 8006836:	6078      	str	r0, [r7, #4]
 8006838:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	6a1b      	ldr	r3, [r3, #32]
 800683e:	f023 0201 	bic.w	r2, r3, #1
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	6a1b      	ldr	r3, [r3, #32]
 800684a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	685b      	ldr	r3, [r3, #4]
 8006850:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	699b      	ldr	r3, [r3, #24]
 8006856:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800685e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	f023 0303 	bic.w	r3, r3, #3
 8006866:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006868:	683b      	ldr	r3, [r7, #0]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	68fa      	ldr	r2, [r7, #12]
 800686e:	4313      	orrs	r3, r2
 8006870:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006872:	697b      	ldr	r3, [r7, #20]
 8006874:	f023 0302 	bic.w	r3, r3, #2
 8006878:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800687a:	683b      	ldr	r3, [r7, #0]
 800687c:	689b      	ldr	r3, [r3, #8]
 800687e:	697a      	ldr	r2, [r7, #20]
 8006880:	4313      	orrs	r3, r2
 8006882:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	4a1c      	ldr	r2, [pc, #112]	; (80068f8 <TIM_OC1_SetConfig+0xc8>)
 8006888:	4293      	cmp	r3, r2
 800688a:	d10c      	bne.n	80068a6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800688c:	697b      	ldr	r3, [r7, #20]
 800688e:	f023 0308 	bic.w	r3, r3, #8
 8006892:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006894:	683b      	ldr	r3, [r7, #0]
 8006896:	68db      	ldr	r3, [r3, #12]
 8006898:	697a      	ldr	r2, [r7, #20]
 800689a:	4313      	orrs	r3, r2
 800689c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800689e:	697b      	ldr	r3, [r7, #20]
 80068a0:	f023 0304 	bic.w	r3, r3, #4
 80068a4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	4a13      	ldr	r2, [pc, #76]	; (80068f8 <TIM_OC1_SetConfig+0xc8>)
 80068aa:	4293      	cmp	r3, r2
 80068ac:	d111      	bne.n	80068d2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80068ae:	693b      	ldr	r3, [r7, #16]
 80068b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80068b4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80068b6:	693b      	ldr	r3, [r7, #16]
 80068b8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80068bc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80068be:	683b      	ldr	r3, [r7, #0]
 80068c0:	695b      	ldr	r3, [r3, #20]
 80068c2:	693a      	ldr	r2, [r7, #16]
 80068c4:	4313      	orrs	r3, r2
 80068c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80068c8:	683b      	ldr	r3, [r7, #0]
 80068ca:	699b      	ldr	r3, [r3, #24]
 80068cc:	693a      	ldr	r2, [r7, #16]
 80068ce:	4313      	orrs	r3, r2
 80068d0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	693a      	ldr	r2, [r7, #16]
 80068d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	68fa      	ldr	r2, [r7, #12]
 80068dc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80068de:	683b      	ldr	r3, [r7, #0]
 80068e0:	685a      	ldr	r2, [r3, #4]
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	697a      	ldr	r2, [r7, #20]
 80068ea:	621a      	str	r2, [r3, #32]
}
 80068ec:	bf00      	nop
 80068ee:	371c      	adds	r7, #28
 80068f0:	46bd      	mov	sp, r7
 80068f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f6:	4770      	bx	lr
 80068f8:	40010000 	.word	0x40010000

080068fc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80068fc:	b480      	push	{r7}
 80068fe:	b087      	sub	sp, #28
 8006900:	af00      	add	r7, sp, #0
 8006902:	6078      	str	r0, [r7, #4]
 8006904:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	6a1b      	ldr	r3, [r3, #32]
 800690a:	f023 0210 	bic.w	r2, r3, #16
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	6a1b      	ldr	r3, [r3, #32]
 8006916:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	685b      	ldr	r3, [r3, #4]
 800691c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	699b      	ldr	r3, [r3, #24]
 8006922:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800692a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006932:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006934:	683b      	ldr	r3, [r7, #0]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	021b      	lsls	r3, r3, #8
 800693a:	68fa      	ldr	r2, [r7, #12]
 800693c:	4313      	orrs	r3, r2
 800693e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006940:	697b      	ldr	r3, [r7, #20]
 8006942:	f023 0320 	bic.w	r3, r3, #32
 8006946:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006948:	683b      	ldr	r3, [r7, #0]
 800694a:	689b      	ldr	r3, [r3, #8]
 800694c:	011b      	lsls	r3, r3, #4
 800694e:	697a      	ldr	r2, [r7, #20]
 8006950:	4313      	orrs	r3, r2
 8006952:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	4a1e      	ldr	r2, [pc, #120]	; (80069d0 <TIM_OC2_SetConfig+0xd4>)
 8006958:	4293      	cmp	r3, r2
 800695a:	d10d      	bne.n	8006978 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800695c:	697b      	ldr	r3, [r7, #20]
 800695e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006962:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006964:	683b      	ldr	r3, [r7, #0]
 8006966:	68db      	ldr	r3, [r3, #12]
 8006968:	011b      	lsls	r3, r3, #4
 800696a:	697a      	ldr	r2, [r7, #20]
 800696c:	4313      	orrs	r3, r2
 800696e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006970:	697b      	ldr	r3, [r7, #20]
 8006972:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006976:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	4a15      	ldr	r2, [pc, #84]	; (80069d0 <TIM_OC2_SetConfig+0xd4>)
 800697c:	4293      	cmp	r3, r2
 800697e:	d113      	bne.n	80069a8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006980:	693b      	ldr	r3, [r7, #16]
 8006982:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006986:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006988:	693b      	ldr	r3, [r7, #16]
 800698a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800698e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006990:	683b      	ldr	r3, [r7, #0]
 8006992:	695b      	ldr	r3, [r3, #20]
 8006994:	009b      	lsls	r3, r3, #2
 8006996:	693a      	ldr	r2, [r7, #16]
 8006998:	4313      	orrs	r3, r2
 800699a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800699c:	683b      	ldr	r3, [r7, #0]
 800699e:	699b      	ldr	r3, [r3, #24]
 80069a0:	009b      	lsls	r3, r3, #2
 80069a2:	693a      	ldr	r2, [r7, #16]
 80069a4:	4313      	orrs	r3, r2
 80069a6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	693a      	ldr	r2, [r7, #16]
 80069ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	68fa      	ldr	r2, [r7, #12]
 80069b2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80069b4:	683b      	ldr	r3, [r7, #0]
 80069b6:	685a      	ldr	r2, [r3, #4]
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	697a      	ldr	r2, [r7, #20]
 80069c0:	621a      	str	r2, [r3, #32]
}
 80069c2:	bf00      	nop
 80069c4:	371c      	adds	r7, #28
 80069c6:	46bd      	mov	sp, r7
 80069c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069cc:	4770      	bx	lr
 80069ce:	bf00      	nop
 80069d0:	40010000 	.word	0x40010000

080069d4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80069d4:	b480      	push	{r7}
 80069d6:	b087      	sub	sp, #28
 80069d8:	af00      	add	r7, sp, #0
 80069da:	6078      	str	r0, [r7, #4]
 80069dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	6a1b      	ldr	r3, [r3, #32]
 80069e2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	6a1b      	ldr	r3, [r3, #32]
 80069ee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	685b      	ldr	r3, [r3, #4]
 80069f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	69db      	ldr	r3, [r3, #28]
 80069fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	f023 0303 	bic.w	r3, r3, #3
 8006a0a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006a0c:	683b      	ldr	r3, [r7, #0]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	68fa      	ldr	r2, [r7, #12]
 8006a12:	4313      	orrs	r3, r2
 8006a14:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006a16:	697b      	ldr	r3, [r7, #20]
 8006a18:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006a1c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006a1e:	683b      	ldr	r3, [r7, #0]
 8006a20:	689b      	ldr	r3, [r3, #8]
 8006a22:	021b      	lsls	r3, r3, #8
 8006a24:	697a      	ldr	r2, [r7, #20]
 8006a26:	4313      	orrs	r3, r2
 8006a28:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	4a1d      	ldr	r2, [pc, #116]	; (8006aa4 <TIM_OC3_SetConfig+0xd0>)
 8006a2e:	4293      	cmp	r3, r2
 8006a30:	d10d      	bne.n	8006a4e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006a32:	697b      	ldr	r3, [r7, #20]
 8006a34:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006a38:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006a3a:	683b      	ldr	r3, [r7, #0]
 8006a3c:	68db      	ldr	r3, [r3, #12]
 8006a3e:	021b      	lsls	r3, r3, #8
 8006a40:	697a      	ldr	r2, [r7, #20]
 8006a42:	4313      	orrs	r3, r2
 8006a44:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006a46:	697b      	ldr	r3, [r7, #20]
 8006a48:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006a4c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	4a14      	ldr	r2, [pc, #80]	; (8006aa4 <TIM_OC3_SetConfig+0xd0>)
 8006a52:	4293      	cmp	r3, r2
 8006a54:	d113      	bne.n	8006a7e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006a56:	693b      	ldr	r3, [r7, #16]
 8006a58:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006a5c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006a5e:	693b      	ldr	r3, [r7, #16]
 8006a60:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006a64:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006a66:	683b      	ldr	r3, [r7, #0]
 8006a68:	695b      	ldr	r3, [r3, #20]
 8006a6a:	011b      	lsls	r3, r3, #4
 8006a6c:	693a      	ldr	r2, [r7, #16]
 8006a6e:	4313      	orrs	r3, r2
 8006a70:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006a72:	683b      	ldr	r3, [r7, #0]
 8006a74:	699b      	ldr	r3, [r3, #24]
 8006a76:	011b      	lsls	r3, r3, #4
 8006a78:	693a      	ldr	r2, [r7, #16]
 8006a7a:	4313      	orrs	r3, r2
 8006a7c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	693a      	ldr	r2, [r7, #16]
 8006a82:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	68fa      	ldr	r2, [r7, #12]
 8006a88:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006a8a:	683b      	ldr	r3, [r7, #0]
 8006a8c:	685a      	ldr	r2, [r3, #4]
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	697a      	ldr	r2, [r7, #20]
 8006a96:	621a      	str	r2, [r3, #32]
}
 8006a98:	bf00      	nop
 8006a9a:	371c      	adds	r7, #28
 8006a9c:	46bd      	mov	sp, r7
 8006a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa2:	4770      	bx	lr
 8006aa4:	40010000 	.word	0x40010000

08006aa8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006aa8:	b480      	push	{r7}
 8006aaa:	b087      	sub	sp, #28
 8006aac:	af00      	add	r7, sp, #0
 8006aae:	6078      	str	r0, [r7, #4]
 8006ab0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	6a1b      	ldr	r3, [r3, #32]
 8006ab6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	6a1b      	ldr	r3, [r3, #32]
 8006ac2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	685b      	ldr	r3, [r3, #4]
 8006ac8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	69db      	ldr	r3, [r3, #28]
 8006ace:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006ad6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006ade:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006ae0:	683b      	ldr	r3, [r7, #0]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	021b      	lsls	r3, r3, #8
 8006ae6:	68fa      	ldr	r2, [r7, #12]
 8006ae8:	4313      	orrs	r3, r2
 8006aea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006aec:	693b      	ldr	r3, [r7, #16]
 8006aee:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006af2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006af4:	683b      	ldr	r3, [r7, #0]
 8006af6:	689b      	ldr	r3, [r3, #8]
 8006af8:	031b      	lsls	r3, r3, #12
 8006afa:	693a      	ldr	r2, [r7, #16]
 8006afc:	4313      	orrs	r3, r2
 8006afe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	4a10      	ldr	r2, [pc, #64]	; (8006b44 <TIM_OC4_SetConfig+0x9c>)
 8006b04:	4293      	cmp	r3, r2
 8006b06:	d109      	bne.n	8006b1c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006b08:	697b      	ldr	r3, [r7, #20]
 8006b0a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006b0e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006b10:	683b      	ldr	r3, [r7, #0]
 8006b12:	695b      	ldr	r3, [r3, #20]
 8006b14:	019b      	lsls	r3, r3, #6
 8006b16:	697a      	ldr	r2, [r7, #20]
 8006b18:	4313      	orrs	r3, r2
 8006b1a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	697a      	ldr	r2, [r7, #20]
 8006b20:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	68fa      	ldr	r2, [r7, #12]
 8006b26:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006b28:	683b      	ldr	r3, [r7, #0]
 8006b2a:	685a      	ldr	r2, [r3, #4]
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	693a      	ldr	r2, [r7, #16]
 8006b34:	621a      	str	r2, [r3, #32]
}
 8006b36:	bf00      	nop
 8006b38:	371c      	adds	r7, #28
 8006b3a:	46bd      	mov	sp, r7
 8006b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b40:	4770      	bx	lr
 8006b42:	bf00      	nop
 8006b44:	40010000 	.word	0x40010000

08006b48 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006b48:	b480      	push	{r7}
 8006b4a:	b087      	sub	sp, #28
 8006b4c:	af00      	add	r7, sp, #0
 8006b4e:	60f8      	str	r0, [r7, #12]
 8006b50:	60b9      	str	r1, [r7, #8]
 8006b52:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	6a1b      	ldr	r3, [r3, #32]
 8006b58:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	6a1b      	ldr	r3, [r3, #32]
 8006b5e:	f023 0201 	bic.w	r2, r3, #1
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	699b      	ldr	r3, [r3, #24]
 8006b6a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006b6c:	693b      	ldr	r3, [r7, #16]
 8006b6e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006b72:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	011b      	lsls	r3, r3, #4
 8006b78:	693a      	ldr	r2, [r7, #16]
 8006b7a:	4313      	orrs	r3, r2
 8006b7c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006b7e:	697b      	ldr	r3, [r7, #20]
 8006b80:	f023 030a 	bic.w	r3, r3, #10
 8006b84:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006b86:	697a      	ldr	r2, [r7, #20]
 8006b88:	68bb      	ldr	r3, [r7, #8]
 8006b8a:	4313      	orrs	r3, r2
 8006b8c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	693a      	ldr	r2, [r7, #16]
 8006b92:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	697a      	ldr	r2, [r7, #20]
 8006b98:	621a      	str	r2, [r3, #32]
}
 8006b9a:	bf00      	nop
 8006b9c:	371c      	adds	r7, #28
 8006b9e:	46bd      	mov	sp, r7
 8006ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba4:	4770      	bx	lr

08006ba6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006ba6:	b480      	push	{r7}
 8006ba8:	b087      	sub	sp, #28
 8006baa:	af00      	add	r7, sp, #0
 8006bac:	60f8      	str	r0, [r7, #12]
 8006bae:	60b9      	str	r1, [r7, #8]
 8006bb0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	6a1b      	ldr	r3, [r3, #32]
 8006bb6:	f023 0210 	bic.w	r2, r3, #16
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	699b      	ldr	r3, [r3, #24]
 8006bc2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	6a1b      	ldr	r3, [r3, #32]
 8006bc8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006bca:	697b      	ldr	r3, [r7, #20]
 8006bcc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006bd0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	031b      	lsls	r3, r3, #12
 8006bd6:	697a      	ldr	r2, [r7, #20]
 8006bd8:	4313      	orrs	r3, r2
 8006bda:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006bdc:	693b      	ldr	r3, [r7, #16]
 8006bde:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006be2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006be4:	68bb      	ldr	r3, [r7, #8]
 8006be6:	011b      	lsls	r3, r3, #4
 8006be8:	693a      	ldr	r2, [r7, #16]
 8006bea:	4313      	orrs	r3, r2
 8006bec:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	697a      	ldr	r2, [r7, #20]
 8006bf2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	693a      	ldr	r2, [r7, #16]
 8006bf8:	621a      	str	r2, [r3, #32]
}
 8006bfa:	bf00      	nop
 8006bfc:	371c      	adds	r7, #28
 8006bfe:	46bd      	mov	sp, r7
 8006c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c04:	4770      	bx	lr

08006c06 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006c06:	b480      	push	{r7}
 8006c08:	b085      	sub	sp, #20
 8006c0a:	af00      	add	r7, sp, #0
 8006c0c:	6078      	str	r0, [r7, #4]
 8006c0e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	689b      	ldr	r3, [r3, #8]
 8006c14:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c1c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006c1e:	683a      	ldr	r2, [r7, #0]
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	4313      	orrs	r3, r2
 8006c24:	f043 0307 	orr.w	r3, r3, #7
 8006c28:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	68fa      	ldr	r2, [r7, #12]
 8006c2e:	609a      	str	r2, [r3, #8]
}
 8006c30:	bf00      	nop
 8006c32:	3714      	adds	r7, #20
 8006c34:	46bd      	mov	sp, r7
 8006c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c3a:	4770      	bx	lr

08006c3c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006c3c:	b480      	push	{r7}
 8006c3e:	b087      	sub	sp, #28
 8006c40:	af00      	add	r7, sp, #0
 8006c42:	60f8      	str	r0, [r7, #12]
 8006c44:	60b9      	str	r1, [r7, #8]
 8006c46:	607a      	str	r2, [r7, #4]
 8006c48:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	689b      	ldr	r3, [r3, #8]
 8006c4e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006c50:	697b      	ldr	r3, [r7, #20]
 8006c52:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006c56:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006c58:	683b      	ldr	r3, [r7, #0]
 8006c5a:	021a      	lsls	r2, r3, #8
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	431a      	orrs	r2, r3
 8006c60:	68bb      	ldr	r3, [r7, #8]
 8006c62:	4313      	orrs	r3, r2
 8006c64:	697a      	ldr	r2, [r7, #20]
 8006c66:	4313      	orrs	r3, r2
 8006c68:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	697a      	ldr	r2, [r7, #20]
 8006c6e:	609a      	str	r2, [r3, #8]
}
 8006c70:	bf00      	nop
 8006c72:	371c      	adds	r7, #28
 8006c74:	46bd      	mov	sp, r7
 8006c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c7a:	4770      	bx	lr

08006c7c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006c7c:	b480      	push	{r7}
 8006c7e:	b087      	sub	sp, #28
 8006c80:	af00      	add	r7, sp, #0
 8006c82:	60f8      	str	r0, [r7, #12]
 8006c84:	60b9      	str	r1, [r7, #8]
 8006c86:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006c88:	68bb      	ldr	r3, [r7, #8]
 8006c8a:	f003 031f 	and.w	r3, r3, #31
 8006c8e:	2201      	movs	r2, #1
 8006c90:	fa02 f303 	lsl.w	r3, r2, r3
 8006c94:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	6a1a      	ldr	r2, [r3, #32]
 8006c9a:	697b      	ldr	r3, [r7, #20]
 8006c9c:	43db      	mvns	r3, r3
 8006c9e:	401a      	ands	r2, r3
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	6a1a      	ldr	r2, [r3, #32]
 8006ca8:	68bb      	ldr	r3, [r7, #8]
 8006caa:	f003 031f 	and.w	r3, r3, #31
 8006cae:	6879      	ldr	r1, [r7, #4]
 8006cb0:	fa01 f303 	lsl.w	r3, r1, r3
 8006cb4:	431a      	orrs	r2, r3
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	621a      	str	r2, [r3, #32]
}
 8006cba:	bf00      	nop
 8006cbc:	371c      	adds	r7, #28
 8006cbe:	46bd      	mov	sp, r7
 8006cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc4:	4770      	bx	lr
	...

08006cc8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006cc8:	b480      	push	{r7}
 8006cca:	b085      	sub	sp, #20
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	6078      	str	r0, [r7, #4]
 8006cd0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006cd8:	2b01      	cmp	r3, #1
 8006cda:	d101      	bne.n	8006ce0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006cdc:	2302      	movs	r3, #2
 8006cde:	e050      	b.n	8006d82 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	2201      	movs	r2, #1
 8006ce4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	2202      	movs	r2, #2
 8006cec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	685b      	ldr	r3, [r3, #4]
 8006cf6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	689b      	ldr	r3, [r3, #8]
 8006cfe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d06:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006d08:	683b      	ldr	r3, [r7, #0]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	68fa      	ldr	r2, [r7, #12]
 8006d0e:	4313      	orrs	r3, r2
 8006d10:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	68fa      	ldr	r2, [r7, #12]
 8006d18:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	4a1c      	ldr	r2, [pc, #112]	; (8006d90 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006d20:	4293      	cmp	r3, r2
 8006d22:	d018      	beq.n	8006d56 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d2c:	d013      	beq.n	8006d56 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	4a18      	ldr	r2, [pc, #96]	; (8006d94 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006d34:	4293      	cmp	r3, r2
 8006d36:	d00e      	beq.n	8006d56 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	4a16      	ldr	r2, [pc, #88]	; (8006d98 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006d3e:	4293      	cmp	r3, r2
 8006d40:	d009      	beq.n	8006d56 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	4a15      	ldr	r2, [pc, #84]	; (8006d9c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006d48:	4293      	cmp	r3, r2
 8006d4a:	d004      	beq.n	8006d56 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	4a13      	ldr	r2, [pc, #76]	; (8006da0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8006d52:	4293      	cmp	r3, r2
 8006d54:	d10c      	bne.n	8006d70 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006d56:	68bb      	ldr	r3, [r7, #8]
 8006d58:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006d5c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006d5e:	683b      	ldr	r3, [r7, #0]
 8006d60:	685b      	ldr	r3, [r3, #4]
 8006d62:	68ba      	ldr	r2, [r7, #8]
 8006d64:	4313      	orrs	r3, r2
 8006d66:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	68ba      	ldr	r2, [r7, #8]
 8006d6e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	2201      	movs	r2, #1
 8006d74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	2200      	movs	r2, #0
 8006d7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006d80:	2300      	movs	r3, #0
}
 8006d82:	4618      	mov	r0, r3
 8006d84:	3714      	adds	r7, #20
 8006d86:	46bd      	mov	sp, r7
 8006d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d8c:	4770      	bx	lr
 8006d8e:	bf00      	nop
 8006d90:	40010000 	.word	0x40010000
 8006d94:	40000400 	.word	0x40000400
 8006d98:	40000800 	.word	0x40000800
 8006d9c:	40000c00 	.word	0x40000c00
 8006da0:	40014000 	.word	0x40014000

08006da4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006da4:	b480      	push	{r7}
 8006da6:	b085      	sub	sp, #20
 8006da8:	af00      	add	r7, sp, #0
 8006daa:	6078      	str	r0, [r7, #4]
 8006dac:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006dae:	2300      	movs	r3, #0
 8006db0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006db8:	2b01      	cmp	r3, #1
 8006dba:	d101      	bne.n	8006dc0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006dbc:	2302      	movs	r3, #2
 8006dbe:	e03d      	b.n	8006e3c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	2201      	movs	r2, #1
 8006dc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006dce:	683b      	ldr	r3, [r7, #0]
 8006dd0:	68db      	ldr	r3, [r3, #12]
 8006dd2:	4313      	orrs	r3, r2
 8006dd4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006ddc:	683b      	ldr	r3, [r7, #0]
 8006dde:	689b      	ldr	r3, [r3, #8]
 8006de0:	4313      	orrs	r3, r2
 8006de2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006dea:	683b      	ldr	r3, [r7, #0]
 8006dec:	685b      	ldr	r3, [r3, #4]
 8006dee:	4313      	orrs	r3, r2
 8006df0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006df8:	683b      	ldr	r3, [r7, #0]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	4313      	orrs	r3, r2
 8006dfe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006e06:	683b      	ldr	r3, [r7, #0]
 8006e08:	691b      	ldr	r3, [r3, #16]
 8006e0a:	4313      	orrs	r3, r2
 8006e0c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006e14:	683b      	ldr	r3, [r7, #0]
 8006e16:	695b      	ldr	r3, [r3, #20]
 8006e18:	4313      	orrs	r3, r2
 8006e1a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006e22:	683b      	ldr	r3, [r7, #0]
 8006e24:	69db      	ldr	r3, [r3, #28]
 8006e26:	4313      	orrs	r3, r2
 8006e28:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	68fa      	ldr	r2, [r7, #12]
 8006e30:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	2200      	movs	r2, #0
 8006e36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006e3a:	2300      	movs	r3, #0
}
 8006e3c:	4618      	mov	r0, r3
 8006e3e:	3714      	adds	r7, #20
 8006e40:	46bd      	mov	sp, r7
 8006e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e46:	4770      	bx	lr

08006e48 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006e48:	b480      	push	{r7}
 8006e4a:	b083      	sub	sp, #12
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006e50:	bf00      	nop
 8006e52:	370c      	adds	r7, #12
 8006e54:	46bd      	mov	sp, r7
 8006e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e5a:	4770      	bx	lr

08006e5c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006e5c:	b480      	push	{r7}
 8006e5e:	b083      	sub	sp, #12
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006e64:	bf00      	nop
 8006e66:	370c      	adds	r7, #12
 8006e68:	46bd      	mov	sp, r7
 8006e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e6e:	4770      	bx	lr

08006e70 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006e70:	b084      	sub	sp, #16
 8006e72:	b580      	push	{r7, lr}
 8006e74:	b084      	sub	sp, #16
 8006e76:	af00      	add	r7, sp, #0
 8006e78:	6078      	str	r0, [r7, #4]
 8006e7a:	f107 001c 	add.w	r0, r7, #28
 8006e7e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006e82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e84:	2b01      	cmp	r3, #1
 8006e86:	d122      	bne.n	8006ece <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e8c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	68db      	ldr	r3, [r3, #12]
 8006e98:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8006e9c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006ea0:	687a      	ldr	r2, [r7, #4]
 8006ea2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	68db      	ldr	r3, [r3, #12]
 8006ea8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006eb0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006eb2:	2b01      	cmp	r3, #1
 8006eb4:	d105      	bne.n	8006ec2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	68db      	ldr	r3, [r3, #12]
 8006eba:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006ec2:	6878      	ldr	r0, [r7, #4]
 8006ec4:	f001 fbee 	bl	80086a4 <USB_CoreReset>
 8006ec8:	4603      	mov	r3, r0
 8006eca:	73fb      	strb	r3, [r7, #15]
 8006ecc:	e01a      	b.n	8006f04 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	68db      	ldr	r3, [r3, #12]
 8006ed2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006eda:	6878      	ldr	r0, [r7, #4]
 8006edc:	f001 fbe2 	bl	80086a4 <USB_CoreReset>
 8006ee0:	4603      	mov	r3, r0
 8006ee2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006ee4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d106      	bne.n	8006ef8 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006eee:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	639a      	str	r2, [r3, #56]	; 0x38
 8006ef6:	e005      	b.n	8006f04 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006efc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006f04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f06:	2b01      	cmp	r3, #1
 8006f08:	d10b      	bne.n	8006f22 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	689b      	ldr	r3, [r3, #8]
 8006f0e:	f043 0206 	orr.w	r2, r3, #6
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	689b      	ldr	r3, [r3, #8]
 8006f1a:	f043 0220 	orr.w	r2, r3, #32
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006f22:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f24:	4618      	mov	r0, r3
 8006f26:	3710      	adds	r7, #16
 8006f28:	46bd      	mov	sp, r7
 8006f2a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006f2e:	b004      	add	sp, #16
 8006f30:	4770      	bx	lr
	...

08006f34 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8006f34:	b480      	push	{r7}
 8006f36:	b087      	sub	sp, #28
 8006f38:	af00      	add	r7, sp, #0
 8006f3a:	60f8      	str	r0, [r7, #12]
 8006f3c:	60b9      	str	r1, [r7, #8]
 8006f3e:	4613      	mov	r3, r2
 8006f40:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8006f42:	79fb      	ldrb	r3, [r7, #7]
 8006f44:	2b02      	cmp	r3, #2
 8006f46:	d165      	bne.n	8007014 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8006f48:	68bb      	ldr	r3, [r7, #8]
 8006f4a:	4a41      	ldr	r2, [pc, #260]	; (8007050 <USB_SetTurnaroundTime+0x11c>)
 8006f4c:	4293      	cmp	r3, r2
 8006f4e:	d906      	bls.n	8006f5e <USB_SetTurnaroundTime+0x2a>
 8006f50:	68bb      	ldr	r3, [r7, #8]
 8006f52:	4a40      	ldr	r2, [pc, #256]	; (8007054 <USB_SetTurnaroundTime+0x120>)
 8006f54:	4293      	cmp	r3, r2
 8006f56:	d202      	bcs.n	8006f5e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8006f58:	230f      	movs	r3, #15
 8006f5a:	617b      	str	r3, [r7, #20]
 8006f5c:	e062      	b.n	8007024 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8006f5e:	68bb      	ldr	r3, [r7, #8]
 8006f60:	4a3c      	ldr	r2, [pc, #240]	; (8007054 <USB_SetTurnaroundTime+0x120>)
 8006f62:	4293      	cmp	r3, r2
 8006f64:	d306      	bcc.n	8006f74 <USB_SetTurnaroundTime+0x40>
 8006f66:	68bb      	ldr	r3, [r7, #8]
 8006f68:	4a3b      	ldr	r2, [pc, #236]	; (8007058 <USB_SetTurnaroundTime+0x124>)
 8006f6a:	4293      	cmp	r3, r2
 8006f6c:	d202      	bcs.n	8006f74 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8006f6e:	230e      	movs	r3, #14
 8006f70:	617b      	str	r3, [r7, #20]
 8006f72:	e057      	b.n	8007024 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8006f74:	68bb      	ldr	r3, [r7, #8]
 8006f76:	4a38      	ldr	r2, [pc, #224]	; (8007058 <USB_SetTurnaroundTime+0x124>)
 8006f78:	4293      	cmp	r3, r2
 8006f7a:	d306      	bcc.n	8006f8a <USB_SetTurnaroundTime+0x56>
 8006f7c:	68bb      	ldr	r3, [r7, #8]
 8006f7e:	4a37      	ldr	r2, [pc, #220]	; (800705c <USB_SetTurnaroundTime+0x128>)
 8006f80:	4293      	cmp	r3, r2
 8006f82:	d202      	bcs.n	8006f8a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8006f84:	230d      	movs	r3, #13
 8006f86:	617b      	str	r3, [r7, #20]
 8006f88:	e04c      	b.n	8007024 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8006f8a:	68bb      	ldr	r3, [r7, #8]
 8006f8c:	4a33      	ldr	r2, [pc, #204]	; (800705c <USB_SetTurnaroundTime+0x128>)
 8006f8e:	4293      	cmp	r3, r2
 8006f90:	d306      	bcc.n	8006fa0 <USB_SetTurnaroundTime+0x6c>
 8006f92:	68bb      	ldr	r3, [r7, #8]
 8006f94:	4a32      	ldr	r2, [pc, #200]	; (8007060 <USB_SetTurnaroundTime+0x12c>)
 8006f96:	4293      	cmp	r3, r2
 8006f98:	d802      	bhi.n	8006fa0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8006f9a:	230c      	movs	r3, #12
 8006f9c:	617b      	str	r3, [r7, #20]
 8006f9e:	e041      	b.n	8007024 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8006fa0:	68bb      	ldr	r3, [r7, #8]
 8006fa2:	4a2f      	ldr	r2, [pc, #188]	; (8007060 <USB_SetTurnaroundTime+0x12c>)
 8006fa4:	4293      	cmp	r3, r2
 8006fa6:	d906      	bls.n	8006fb6 <USB_SetTurnaroundTime+0x82>
 8006fa8:	68bb      	ldr	r3, [r7, #8]
 8006faa:	4a2e      	ldr	r2, [pc, #184]	; (8007064 <USB_SetTurnaroundTime+0x130>)
 8006fac:	4293      	cmp	r3, r2
 8006fae:	d802      	bhi.n	8006fb6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8006fb0:	230b      	movs	r3, #11
 8006fb2:	617b      	str	r3, [r7, #20]
 8006fb4:	e036      	b.n	8007024 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8006fb6:	68bb      	ldr	r3, [r7, #8]
 8006fb8:	4a2a      	ldr	r2, [pc, #168]	; (8007064 <USB_SetTurnaroundTime+0x130>)
 8006fba:	4293      	cmp	r3, r2
 8006fbc:	d906      	bls.n	8006fcc <USB_SetTurnaroundTime+0x98>
 8006fbe:	68bb      	ldr	r3, [r7, #8]
 8006fc0:	4a29      	ldr	r2, [pc, #164]	; (8007068 <USB_SetTurnaroundTime+0x134>)
 8006fc2:	4293      	cmp	r3, r2
 8006fc4:	d802      	bhi.n	8006fcc <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8006fc6:	230a      	movs	r3, #10
 8006fc8:	617b      	str	r3, [r7, #20]
 8006fca:	e02b      	b.n	8007024 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8006fcc:	68bb      	ldr	r3, [r7, #8]
 8006fce:	4a26      	ldr	r2, [pc, #152]	; (8007068 <USB_SetTurnaroundTime+0x134>)
 8006fd0:	4293      	cmp	r3, r2
 8006fd2:	d906      	bls.n	8006fe2 <USB_SetTurnaroundTime+0xae>
 8006fd4:	68bb      	ldr	r3, [r7, #8]
 8006fd6:	4a25      	ldr	r2, [pc, #148]	; (800706c <USB_SetTurnaroundTime+0x138>)
 8006fd8:	4293      	cmp	r3, r2
 8006fda:	d202      	bcs.n	8006fe2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8006fdc:	2309      	movs	r3, #9
 8006fde:	617b      	str	r3, [r7, #20]
 8006fe0:	e020      	b.n	8007024 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8006fe2:	68bb      	ldr	r3, [r7, #8]
 8006fe4:	4a21      	ldr	r2, [pc, #132]	; (800706c <USB_SetTurnaroundTime+0x138>)
 8006fe6:	4293      	cmp	r3, r2
 8006fe8:	d306      	bcc.n	8006ff8 <USB_SetTurnaroundTime+0xc4>
 8006fea:	68bb      	ldr	r3, [r7, #8]
 8006fec:	4a20      	ldr	r2, [pc, #128]	; (8007070 <USB_SetTurnaroundTime+0x13c>)
 8006fee:	4293      	cmp	r3, r2
 8006ff0:	d802      	bhi.n	8006ff8 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8006ff2:	2308      	movs	r3, #8
 8006ff4:	617b      	str	r3, [r7, #20]
 8006ff6:	e015      	b.n	8007024 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8006ff8:	68bb      	ldr	r3, [r7, #8]
 8006ffa:	4a1d      	ldr	r2, [pc, #116]	; (8007070 <USB_SetTurnaroundTime+0x13c>)
 8006ffc:	4293      	cmp	r3, r2
 8006ffe:	d906      	bls.n	800700e <USB_SetTurnaroundTime+0xda>
 8007000:	68bb      	ldr	r3, [r7, #8]
 8007002:	4a1c      	ldr	r2, [pc, #112]	; (8007074 <USB_SetTurnaroundTime+0x140>)
 8007004:	4293      	cmp	r3, r2
 8007006:	d202      	bcs.n	800700e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8007008:	2307      	movs	r3, #7
 800700a:	617b      	str	r3, [r7, #20]
 800700c:	e00a      	b.n	8007024 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800700e:	2306      	movs	r3, #6
 8007010:	617b      	str	r3, [r7, #20]
 8007012:	e007      	b.n	8007024 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8007014:	79fb      	ldrb	r3, [r7, #7]
 8007016:	2b00      	cmp	r3, #0
 8007018:	d102      	bne.n	8007020 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800701a:	2309      	movs	r3, #9
 800701c:	617b      	str	r3, [r7, #20]
 800701e:	e001      	b.n	8007024 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8007020:	2309      	movs	r3, #9
 8007022:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	68db      	ldr	r3, [r3, #12]
 8007028:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	68da      	ldr	r2, [r3, #12]
 8007034:	697b      	ldr	r3, [r7, #20]
 8007036:	029b      	lsls	r3, r3, #10
 8007038:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800703c:	431a      	orrs	r2, r3
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007042:	2300      	movs	r3, #0
}
 8007044:	4618      	mov	r0, r3
 8007046:	371c      	adds	r7, #28
 8007048:	46bd      	mov	sp, r7
 800704a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800704e:	4770      	bx	lr
 8007050:	00d8acbf 	.word	0x00d8acbf
 8007054:	00e4e1c0 	.word	0x00e4e1c0
 8007058:	00f42400 	.word	0x00f42400
 800705c:	01067380 	.word	0x01067380
 8007060:	011a499f 	.word	0x011a499f
 8007064:	01312cff 	.word	0x01312cff
 8007068:	014ca43f 	.word	0x014ca43f
 800706c:	016e3600 	.word	0x016e3600
 8007070:	01a6ab1f 	.word	0x01a6ab1f
 8007074:	01e84800 	.word	0x01e84800

08007078 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007078:	b480      	push	{r7}
 800707a:	b083      	sub	sp, #12
 800707c:	af00      	add	r7, sp, #0
 800707e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	689b      	ldr	r3, [r3, #8]
 8007084:	f043 0201 	orr.w	r2, r3, #1
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800708c:	2300      	movs	r3, #0
}
 800708e:	4618      	mov	r0, r3
 8007090:	370c      	adds	r7, #12
 8007092:	46bd      	mov	sp, r7
 8007094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007098:	4770      	bx	lr

0800709a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800709a:	b480      	push	{r7}
 800709c:	b083      	sub	sp, #12
 800709e:	af00      	add	r7, sp, #0
 80070a0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	689b      	ldr	r3, [r3, #8]
 80070a6:	f023 0201 	bic.w	r2, r3, #1
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80070ae:	2300      	movs	r3, #0
}
 80070b0:	4618      	mov	r0, r3
 80070b2:	370c      	adds	r7, #12
 80070b4:	46bd      	mov	sp, r7
 80070b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ba:	4770      	bx	lr

080070bc <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80070bc:	b580      	push	{r7, lr}
 80070be:	b084      	sub	sp, #16
 80070c0:	af00      	add	r7, sp, #0
 80070c2:	6078      	str	r0, [r7, #4]
 80070c4:	460b      	mov	r3, r1
 80070c6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80070c8:	2300      	movs	r3, #0
 80070ca:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	68db      	ldr	r3, [r3, #12]
 80070d0:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80070d8:	78fb      	ldrb	r3, [r7, #3]
 80070da:	2b01      	cmp	r3, #1
 80070dc:	d115      	bne.n	800710a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	68db      	ldr	r3, [r3, #12]
 80070e2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80070ea:	2001      	movs	r0, #1
 80070ec:	f7fa fe6e 	bl	8001dcc <HAL_Delay>
      ms++;
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	3301      	adds	r3, #1
 80070f4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80070f6:	6878      	ldr	r0, [r7, #4]
 80070f8:	f001 fa45 	bl	8008586 <USB_GetMode>
 80070fc:	4603      	mov	r3, r0
 80070fe:	2b01      	cmp	r3, #1
 8007100:	d01e      	beq.n	8007140 <USB_SetCurrentMode+0x84>
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	2b31      	cmp	r3, #49	; 0x31
 8007106:	d9f0      	bls.n	80070ea <USB_SetCurrentMode+0x2e>
 8007108:	e01a      	b.n	8007140 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800710a:	78fb      	ldrb	r3, [r7, #3]
 800710c:	2b00      	cmp	r3, #0
 800710e:	d115      	bne.n	800713c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	68db      	ldr	r3, [r3, #12]
 8007114:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800711c:	2001      	movs	r0, #1
 800711e:	f7fa fe55 	bl	8001dcc <HAL_Delay>
      ms++;
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	3301      	adds	r3, #1
 8007126:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8007128:	6878      	ldr	r0, [r7, #4]
 800712a:	f001 fa2c 	bl	8008586 <USB_GetMode>
 800712e:	4603      	mov	r3, r0
 8007130:	2b00      	cmp	r3, #0
 8007132:	d005      	beq.n	8007140 <USB_SetCurrentMode+0x84>
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	2b31      	cmp	r3, #49	; 0x31
 8007138:	d9f0      	bls.n	800711c <USB_SetCurrentMode+0x60>
 800713a:	e001      	b.n	8007140 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800713c:	2301      	movs	r3, #1
 800713e:	e005      	b.n	800714c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	2b32      	cmp	r3, #50	; 0x32
 8007144:	d101      	bne.n	800714a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007146:	2301      	movs	r3, #1
 8007148:	e000      	b.n	800714c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800714a:	2300      	movs	r3, #0
}
 800714c:	4618      	mov	r0, r3
 800714e:	3710      	adds	r7, #16
 8007150:	46bd      	mov	sp, r7
 8007152:	bd80      	pop	{r7, pc}

08007154 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007154:	b084      	sub	sp, #16
 8007156:	b580      	push	{r7, lr}
 8007158:	b086      	sub	sp, #24
 800715a:	af00      	add	r7, sp, #0
 800715c:	6078      	str	r0, [r7, #4]
 800715e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8007162:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007166:	2300      	movs	r3, #0
 8007168:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800716e:	2300      	movs	r3, #0
 8007170:	613b      	str	r3, [r7, #16]
 8007172:	e009      	b.n	8007188 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007174:	687a      	ldr	r2, [r7, #4]
 8007176:	693b      	ldr	r3, [r7, #16]
 8007178:	3340      	adds	r3, #64	; 0x40
 800717a:	009b      	lsls	r3, r3, #2
 800717c:	4413      	add	r3, r2
 800717e:	2200      	movs	r2, #0
 8007180:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8007182:	693b      	ldr	r3, [r7, #16]
 8007184:	3301      	adds	r3, #1
 8007186:	613b      	str	r3, [r7, #16]
 8007188:	693b      	ldr	r3, [r7, #16]
 800718a:	2b0e      	cmp	r3, #14
 800718c:	d9f2      	bls.n	8007174 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800718e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007190:	2b00      	cmp	r3, #0
 8007192:	d11c      	bne.n	80071ce <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800719a:	685b      	ldr	r3, [r3, #4]
 800719c:	68fa      	ldr	r2, [r7, #12]
 800719e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80071a2:	f043 0302 	orr.w	r3, r3, #2
 80071a6:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071ac:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071b8:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071c4:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	639a      	str	r2, [r3, #56]	; 0x38
 80071cc:	e00b      	b.n	80071e6 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071d2:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071de:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80071ec:	461a      	mov	r2, r3
 80071ee:	2300      	movs	r3, #0
 80071f0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80071f8:	4619      	mov	r1, r3
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007200:	461a      	mov	r2, r3
 8007202:	680b      	ldr	r3, [r1, #0]
 8007204:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007206:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007208:	2b01      	cmp	r3, #1
 800720a:	d10c      	bne.n	8007226 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800720c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800720e:	2b00      	cmp	r3, #0
 8007210:	d104      	bne.n	800721c <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8007212:	2100      	movs	r1, #0
 8007214:	6878      	ldr	r0, [r7, #4]
 8007216:	f000 f965 	bl	80074e4 <USB_SetDevSpeed>
 800721a:	e008      	b.n	800722e <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800721c:	2101      	movs	r1, #1
 800721e:	6878      	ldr	r0, [r7, #4]
 8007220:	f000 f960 	bl	80074e4 <USB_SetDevSpeed>
 8007224:	e003      	b.n	800722e <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007226:	2103      	movs	r1, #3
 8007228:	6878      	ldr	r0, [r7, #4]
 800722a:	f000 f95b 	bl	80074e4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800722e:	2110      	movs	r1, #16
 8007230:	6878      	ldr	r0, [r7, #4]
 8007232:	f000 f8f3 	bl	800741c <USB_FlushTxFifo>
 8007236:	4603      	mov	r3, r0
 8007238:	2b00      	cmp	r3, #0
 800723a:	d001      	beq.n	8007240 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800723c:	2301      	movs	r3, #1
 800723e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007240:	6878      	ldr	r0, [r7, #4]
 8007242:	f000 f91f 	bl	8007484 <USB_FlushRxFifo>
 8007246:	4603      	mov	r3, r0
 8007248:	2b00      	cmp	r3, #0
 800724a:	d001      	beq.n	8007250 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800724c:	2301      	movs	r3, #1
 800724e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007256:	461a      	mov	r2, r3
 8007258:	2300      	movs	r3, #0
 800725a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007262:	461a      	mov	r2, r3
 8007264:	2300      	movs	r3, #0
 8007266:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800726e:	461a      	mov	r2, r3
 8007270:	2300      	movs	r3, #0
 8007272:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007274:	2300      	movs	r3, #0
 8007276:	613b      	str	r3, [r7, #16]
 8007278:	e043      	b.n	8007302 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800727a:	693b      	ldr	r3, [r7, #16]
 800727c:	015a      	lsls	r2, r3, #5
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	4413      	add	r3, r2
 8007282:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800728c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007290:	d118      	bne.n	80072c4 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8007292:	693b      	ldr	r3, [r7, #16]
 8007294:	2b00      	cmp	r3, #0
 8007296:	d10a      	bne.n	80072ae <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007298:	693b      	ldr	r3, [r7, #16]
 800729a:	015a      	lsls	r2, r3, #5
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	4413      	add	r3, r2
 80072a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072a4:	461a      	mov	r2, r3
 80072a6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80072aa:	6013      	str	r3, [r2, #0]
 80072ac:	e013      	b.n	80072d6 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80072ae:	693b      	ldr	r3, [r7, #16]
 80072b0:	015a      	lsls	r2, r3, #5
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	4413      	add	r3, r2
 80072b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072ba:	461a      	mov	r2, r3
 80072bc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80072c0:	6013      	str	r3, [r2, #0]
 80072c2:	e008      	b.n	80072d6 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80072c4:	693b      	ldr	r3, [r7, #16]
 80072c6:	015a      	lsls	r2, r3, #5
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	4413      	add	r3, r2
 80072cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072d0:	461a      	mov	r2, r3
 80072d2:	2300      	movs	r3, #0
 80072d4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80072d6:	693b      	ldr	r3, [r7, #16]
 80072d8:	015a      	lsls	r2, r3, #5
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	4413      	add	r3, r2
 80072de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072e2:	461a      	mov	r2, r3
 80072e4:	2300      	movs	r3, #0
 80072e6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80072e8:	693b      	ldr	r3, [r7, #16]
 80072ea:	015a      	lsls	r2, r3, #5
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	4413      	add	r3, r2
 80072f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072f4:	461a      	mov	r2, r3
 80072f6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80072fa:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80072fc:	693b      	ldr	r3, [r7, #16]
 80072fe:	3301      	adds	r3, #1
 8007300:	613b      	str	r3, [r7, #16]
 8007302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007304:	693a      	ldr	r2, [r7, #16]
 8007306:	429a      	cmp	r2, r3
 8007308:	d3b7      	bcc.n	800727a <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800730a:	2300      	movs	r3, #0
 800730c:	613b      	str	r3, [r7, #16]
 800730e:	e043      	b.n	8007398 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007310:	693b      	ldr	r3, [r7, #16]
 8007312:	015a      	lsls	r2, r3, #5
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	4413      	add	r3, r2
 8007318:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007322:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007326:	d118      	bne.n	800735a <USB_DevInit+0x206>
    {
      if (i == 0U)
 8007328:	693b      	ldr	r3, [r7, #16]
 800732a:	2b00      	cmp	r3, #0
 800732c:	d10a      	bne.n	8007344 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800732e:	693b      	ldr	r3, [r7, #16]
 8007330:	015a      	lsls	r2, r3, #5
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	4413      	add	r3, r2
 8007336:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800733a:	461a      	mov	r2, r3
 800733c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007340:	6013      	str	r3, [r2, #0]
 8007342:	e013      	b.n	800736c <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007344:	693b      	ldr	r3, [r7, #16]
 8007346:	015a      	lsls	r2, r3, #5
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	4413      	add	r3, r2
 800734c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007350:	461a      	mov	r2, r3
 8007352:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007356:	6013      	str	r3, [r2, #0]
 8007358:	e008      	b.n	800736c <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800735a:	693b      	ldr	r3, [r7, #16]
 800735c:	015a      	lsls	r2, r3, #5
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	4413      	add	r3, r2
 8007362:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007366:	461a      	mov	r2, r3
 8007368:	2300      	movs	r3, #0
 800736a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800736c:	693b      	ldr	r3, [r7, #16]
 800736e:	015a      	lsls	r2, r3, #5
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	4413      	add	r3, r2
 8007374:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007378:	461a      	mov	r2, r3
 800737a:	2300      	movs	r3, #0
 800737c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800737e:	693b      	ldr	r3, [r7, #16]
 8007380:	015a      	lsls	r2, r3, #5
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	4413      	add	r3, r2
 8007386:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800738a:	461a      	mov	r2, r3
 800738c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007390:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007392:	693b      	ldr	r3, [r7, #16]
 8007394:	3301      	adds	r3, #1
 8007396:	613b      	str	r3, [r7, #16]
 8007398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800739a:	693a      	ldr	r2, [r7, #16]
 800739c:	429a      	cmp	r2, r3
 800739e:	d3b7      	bcc.n	8007310 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80073a6:	691b      	ldr	r3, [r3, #16]
 80073a8:	68fa      	ldr	r2, [r7, #12]
 80073aa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80073ae:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80073b2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	2200      	movs	r2, #0
 80073b8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80073c0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80073c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d105      	bne.n	80073d4 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	699b      	ldr	r3, [r3, #24]
 80073cc:	f043 0210 	orr.w	r2, r3, #16
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	699a      	ldr	r2, [r3, #24]
 80073d8:	4b0f      	ldr	r3, [pc, #60]	; (8007418 <USB_DevInit+0x2c4>)
 80073da:	4313      	orrs	r3, r2
 80073dc:	687a      	ldr	r2, [r7, #4]
 80073de:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80073e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d005      	beq.n	80073f2 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	699b      	ldr	r3, [r3, #24]
 80073ea:	f043 0208 	orr.w	r2, r3, #8
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80073f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80073f4:	2b01      	cmp	r3, #1
 80073f6:	d107      	bne.n	8007408 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	699b      	ldr	r3, [r3, #24]
 80073fc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007400:	f043 0304 	orr.w	r3, r3, #4
 8007404:	687a      	ldr	r2, [r7, #4]
 8007406:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007408:	7dfb      	ldrb	r3, [r7, #23]
}
 800740a:	4618      	mov	r0, r3
 800740c:	3718      	adds	r7, #24
 800740e:	46bd      	mov	sp, r7
 8007410:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007414:	b004      	add	sp, #16
 8007416:	4770      	bx	lr
 8007418:	803c3800 	.word	0x803c3800

0800741c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800741c:	b480      	push	{r7}
 800741e:	b085      	sub	sp, #20
 8007420:	af00      	add	r7, sp, #0
 8007422:	6078      	str	r0, [r7, #4]
 8007424:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007426:	2300      	movs	r3, #0
 8007428:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	3301      	adds	r3, #1
 800742e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	4a13      	ldr	r2, [pc, #76]	; (8007480 <USB_FlushTxFifo+0x64>)
 8007434:	4293      	cmp	r3, r2
 8007436:	d901      	bls.n	800743c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007438:	2303      	movs	r3, #3
 800743a:	e01b      	b.n	8007474 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	691b      	ldr	r3, [r3, #16]
 8007440:	2b00      	cmp	r3, #0
 8007442:	daf2      	bge.n	800742a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007444:	2300      	movs	r3, #0
 8007446:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007448:	683b      	ldr	r3, [r7, #0]
 800744a:	019b      	lsls	r3, r3, #6
 800744c:	f043 0220 	orr.w	r2, r3, #32
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	3301      	adds	r3, #1
 8007458:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	4a08      	ldr	r2, [pc, #32]	; (8007480 <USB_FlushTxFifo+0x64>)
 800745e:	4293      	cmp	r3, r2
 8007460:	d901      	bls.n	8007466 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007462:	2303      	movs	r3, #3
 8007464:	e006      	b.n	8007474 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	691b      	ldr	r3, [r3, #16]
 800746a:	f003 0320 	and.w	r3, r3, #32
 800746e:	2b20      	cmp	r3, #32
 8007470:	d0f0      	beq.n	8007454 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007472:	2300      	movs	r3, #0
}
 8007474:	4618      	mov	r0, r3
 8007476:	3714      	adds	r7, #20
 8007478:	46bd      	mov	sp, r7
 800747a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800747e:	4770      	bx	lr
 8007480:	00030d40 	.word	0x00030d40

08007484 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007484:	b480      	push	{r7}
 8007486:	b085      	sub	sp, #20
 8007488:	af00      	add	r7, sp, #0
 800748a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800748c:	2300      	movs	r3, #0
 800748e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	3301      	adds	r3, #1
 8007494:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	4a11      	ldr	r2, [pc, #68]	; (80074e0 <USB_FlushRxFifo+0x5c>)
 800749a:	4293      	cmp	r3, r2
 800749c:	d901      	bls.n	80074a2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800749e:	2303      	movs	r3, #3
 80074a0:	e018      	b.n	80074d4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	691b      	ldr	r3, [r3, #16]
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	daf2      	bge.n	8007490 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80074aa:	2300      	movs	r3, #0
 80074ac:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	2210      	movs	r2, #16
 80074b2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	3301      	adds	r3, #1
 80074b8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	4a08      	ldr	r2, [pc, #32]	; (80074e0 <USB_FlushRxFifo+0x5c>)
 80074be:	4293      	cmp	r3, r2
 80074c0:	d901      	bls.n	80074c6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80074c2:	2303      	movs	r3, #3
 80074c4:	e006      	b.n	80074d4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	691b      	ldr	r3, [r3, #16]
 80074ca:	f003 0310 	and.w	r3, r3, #16
 80074ce:	2b10      	cmp	r3, #16
 80074d0:	d0f0      	beq.n	80074b4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80074d2:	2300      	movs	r3, #0
}
 80074d4:	4618      	mov	r0, r3
 80074d6:	3714      	adds	r7, #20
 80074d8:	46bd      	mov	sp, r7
 80074da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074de:	4770      	bx	lr
 80074e0:	00030d40 	.word	0x00030d40

080074e4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80074e4:	b480      	push	{r7}
 80074e6:	b085      	sub	sp, #20
 80074e8:	af00      	add	r7, sp, #0
 80074ea:	6078      	str	r0, [r7, #4]
 80074ec:	460b      	mov	r3, r1
 80074ee:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80074fa:	681a      	ldr	r2, [r3, #0]
 80074fc:	78fb      	ldrb	r3, [r7, #3]
 80074fe:	68f9      	ldr	r1, [r7, #12]
 8007500:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007504:	4313      	orrs	r3, r2
 8007506:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007508:	2300      	movs	r3, #0
}
 800750a:	4618      	mov	r0, r3
 800750c:	3714      	adds	r7, #20
 800750e:	46bd      	mov	sp, r7
 8007510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007514:	4770      	bx	lr

08007516 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8007516:	b480      	push	{r7}
 8007518:	b087      	sub	sp, #28
 800751a:	af00      	add	r7, sp, #0
 800751c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8007522:	693b      	ldr	r3, [r7, #16]
 8007524:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007528:	689b      	ldr	r3, [r3, #8]
 800752a:	f003 0306 	and.w	r3, r3, #6
 800752e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	2b00      	cmp	r3, #0
 8007534:	d102      	bne.n	800753c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8007536:	2300      	movs	r3, #0
 8007538:	75fb      	strb	r3, [r7, #23]
 800753a:	e00a      	b.n	8007552 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	2b02      	cmp	r3, #2
 8007540:	d002      	beq.n	8007548 <USB_GetDevSpeed+0x32>
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	2b06      	cmp	r3, #6
 8007546:	d102      	bne.n	800754e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8007548:	2302      	movs	r3, #2
 800754a:	75fb      	strb	r3, [r7, #23]
 800754c:	e001      	b.n	8007552 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800754e:	230f      	movs	r3, #15
 8007550:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8007552:	7dfb      	ldrb	r3, [r7, #23]
}
 8007554:	4618      	mov	r0, r3
 8007556:	371c      	adds	r7, #28
 8007558:	46bd      	mov	sp, r7
 800755a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800755e:	4770      	bx	lr

08007560 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007560:	b480      	push	{r7}
 8007562:	b085      	sub	sp, #20
 8007564:	af00      	add	r7, sp, #0
 8007566:	6078      	str	r0, [r7, #4]
 8007568:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800756e:	683b      	ldr	r3, [r7, #0]
 8007570:	781b      	ldrb	r3, [r3, #0]
 8007572:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007574:	683b      	ldr	r3, [r7, #0]
 8007576:	785b      	ldrb	r3, [r3, #1]
 8007578:	2b01      	cmp	r3, #1
 800757a:	d13a      	bne.n	80075f2 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007582:	69da      	ldr	r2, [r3, #28]
 8007584:	683b      	ldr	r3, [r7, #0]
 8007586:	781b      	ldrb	r3, [r3, #0]
 8007588:	f003 030f 	and.w	r3, r3, #15
 800758c:	2101      	movs	r1, #1
 800758e:	fa01 f303 	lsl.w	r3, r1, r3
 8007592:	b29b      	uxth	r3, r3
 8007594:	68f9      	ldr	r1, [r7, #12]
 8007596:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800759a:	4313      	orrs	r3, r2
 800759c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800759e:	68bb      	ldr	r3, [r7, #8]
 80075a0:	015a      	lsls	r2, r3, #5
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	4413      	add	r3, r2
 80075a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d155      	bne.n	8007660 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80075b4:	68bb      	ldr	r3, [r7, #8]
 80075b6:	015a      	lsls	r2, r3, #5
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	4413      	add	r3, r2
 80075bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075c0:	681a      	ldr	r2, [r3, #0]
 80075c2:	683b      	ldr	r3, [r7, #0]
 80075c4:	68db      	ldr	r3, [r3, #12]
 80075c6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80075ca:	683b      	ldr	r3, [r7, #0]
 80075cc:	791b      	ldrb	r3, [r3, #4]
 80075ce:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80075d0:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80075d2:	68bb      	ldr	r3, [r7, #8]
 80075d4:	059b      	lsls	r3, r3, #22
 80075d6:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80075d8:	4313      	orrs	r3, r2
 80075da:	68ba      	ldr	r2, [r7, #8]
 80075dc:	0151      	lsls	r1, r2, #5
 80075de:	68fa      	ldr	r2, [r7, #12]
 80075e0:	440a      	add	r2, r1
 80075e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80075e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80075ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80075ee:	6013      	str	r3, [r2, #0]
 80075f0:	e036      	b.n	8007660 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80075f8:	69da      	ldr	r2, [r3, #28]
 80075fa:	683b      	ldr	r3, [r7, #0]
 80075fc:	781b      	ldrb	r3, [r3, #0]
 80075fe:	f003 030f 	and.w	r3, r3, #15
 8007602:	2101      	movs	r1, #1
 8007604:	fa01 f303 	lsl.w	r3, r1, r3
 8007608:	041b      	lsls	r3, r3, #16
 800760a:	68f9      	ldr	r1, [r7, #12]
 800760c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007610:	4313      	orrs	r3, r2
 8007612:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8007614:	68bb      	ldr	r3, [r7, #8]
 8007616:	015a      	lsls	r2, r3, #5
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	4413      	add	r3, r2
 800761c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007626:	2b00      	cmp	r3, #0
 8007628:	d11a      	bne.n	8007660 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800762a:	68bb      	ldr	r3, [r7, #8]
 800762c:	015a      	lsls	r2, r3, #5
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	4413      	add	r3, r2
 8007632:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007636:	681a      	ldr	r2, [r3, #0]
 8007638:	683b      	ldr	r3, [r7, #0]
 800763a:	68db      	ldr	r3, [r3, #12]
 800763c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8007640:	683b      	ldr	r3, [r7, #0]
 8007642:	791b      	ldrb	r3, [r3, #4]
 8007644:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007646:	430b      	orrs	r3, r1
 8007648:	4313      	orrs	r3, r2
 800764a:	68ba      	ldr	r2, [r7, #8]
 800764c:	0151      	lsls	r1, r2, #5
 800764e:	68fa      	ldr	r2, [r7, #12]
 8007650:	440a      	add	r2, r1
 8007652:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007656:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800765a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800765e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8007660:	2300      	movs	r3, #0
}
 8007662:	4618      	mov	r0, r3
 8007664:	3714      	adds	r7, #20
 8007666:	46bd      	mov	sp, r7
 8007668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800766c:	4770      	bx	lr
	...

08007670 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007670:	b480      	push	{r7}
 8007672:	b085      	sub	sp, #20
 8007674:	af00      	add	r7, sp, #0
 8007676:	6078      	str	r0, [r7, #4]
 8007678:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800767e:	683b      	ldr	r3, [r7, #0]
 8007680:	781b      	ldrb	r3, [r3, #0]
 8007682:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8007684:	683b      	ldr	r3, [r7, #0]
 8007686:	785b      	ldrb	r3, [r3, #1]
 8007688:	2b01      	cmp	r3, #1
 800768a:	d161      	bne.n	8007750 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800768c:	68bb      	ldr	r3, [r7, #8]
 800768e:	015a      	lsls	r2, r3, #5
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	4413      	add	r3, r2
 8007694:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800769e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80076a2:	d11f      	bne.n	80076e4 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80076a4:	68bb      	ldr	r3, [r7, #8]
 80076a6:	015a      	lsls	r2, r3, #5
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	4413      	add	r3, r2
 80076ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	68ba      	ldr	r2, [r7, #8]
 80076b4:	0151      	lsls	r1, r2, #5
 80076b6:	68fa      	ldr	r2, [r7, #12]
 80076b8:	440a      	add	r2, r1
 80076ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80076be:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80076c2:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80076c4:	68bb      	ldr	r3, [r7, #8]
 80076c6:	015a      	lsls	r2, r3, #5
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	4413      	add	r3, r2
 80076cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	68ba      	ldr	r2, [r7, #8]
 80076d4:	0151      	lsls	r1, r2, #5
 80076d6:	68fa      	ldr	r2, [r7, #12]
 80076d8:	440a      	add	r2, r1
 80076da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80076de:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80076e2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80076ea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80076ec:	683b      	ldr	r3, [r7, #0]
 80076ee:	781b      	ldrb	r3, [r3, #0]
 80076f0:	f003 030f 	and.w	r3, r3, #15
 80076f4:	2101      	movs	r1, #1
 80076f6:	fa01 f303 	lsl.w	r3, r1, r3
 80076fa:	b29b      	uxth	r3, r3
 80076fc:	43db      	mvns	r3, r3
 80076fe:	68f9      	ldr	r1, [r7, #12]
 8007700:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007704:	4013      	ands	r3, r2
 8007706:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800770e:	69da      	ldr	r2, [r3, #28]
 8007710:	683b      	ldr	r3, [r7, #0]
 8007712:	781b      	ldrb	r3, [r3, #0]
 8007714:	f003 030f 	and.w	r3, r3, #15
 8007718:	2101      	movs	r1, #1
 800771a:	fa01 f303 	lsl.w	r3, r1, r3
 800771e:	b29b      	uxth	r3, r3
 8007720:	43db      	mvns	r3, r3
 8007722:	68f9      	ldr	r1, [r7, #12]
 8007724:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007728:	4013      	ands	r3, r2
 800772a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800772c:	68bb      	ldr	r3, [r7, #8]
 800772e:	015a      	lsls	r2, r3, #5
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	4413      	add	r3, r2
 8007734:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007738:	681a      	ldr	r2, [r3, #0]
 800773a:	68bb      	ldr	r3, [r7, #8]
 800773c:	0159      	lsls	r1, r3, #5
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	440b      	add	r3, r1
 8007742:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007746:	4619      	mov	r1, r3
 8007748:	4b35      	ldr	r3, [pc, #212]	; (8007820 <USB_DeactivateEndpoint+0x1b0>)
 800774a:	4013      	ands	r3, r2
 800774c:	600b      	str	r3, [r1, #0]
 800774e:	e060      	b.n	8007812 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007750:	68bb      	ldr	r3, [r7, #8]
 8007752:	015a      	lsls	r2, r3, #5
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	4413      	add	r3, r2
 8007758:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007762:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007766:	d11f      	bne.n	80077a8 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8007768:	68bb      	ldr	r3, [r7, #8]
 800776a:	015a      	lsls	r2, r3, #5
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	4413      	add	r3, r2
 8007770:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	68ba      	ldr	r2, [r7, #8]
 8007778:	0151      	lsls	r1, r2, #5
 800777a:	68fa      	ldr	r2, [r7, #12]
 800777c:	440a      	add	r2, r1
 800777e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007782:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007786:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8007788:	68bb      	ldr	r3, [r7, #8]
 800778a:	015a      	lsls	r2, r3, #5
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	4413      	add	r3, r2
 8007790:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	68ba      	ldr	r2, [r7, #8]
 8007798:	0151      	lsls	r1, r2, #5
 800779a:	68fa      	ldr	r2, [r7, #12]
 800779c:	440a      	add	r2, r1
 800779e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80077a2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80077a6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80077ae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80077b0:	683b      	ldr	r3, [r7, #0]
 80077b2:	781b      	ldrb	r3, [r3, #0]
 80077b4:	f003 030f 	and.w	r3, r3, #15
 80077b8:	2101      	movs	r1, #1
 80077ba:	fa01 f303 	lsl.w	r3, r1, r3
 80077be:	041b      	lsls	r3, r3, #16
 80077c0:	43db      	mvns	r3, r3
 80077c2:	68f9      	ldr	r1, [r7, #12]
 80077c4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80077c8:	4013      	ands	r3, r2
 80077ca:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80077d2:	69da      	ldr	r2, [r3, #28]
 80077d4:	683b      	ldr	r3, [r7, #0]
 80077d6:	781b      	ldrb	r3, [r3, #0]
 80077d8:	f003 030f 	and.w	r3, r3, #15
 80077dc:	2101      	movs	r1, #1
 80077de:	fa01 f303 	lsl.w	r3, r1, r3
 80077e2:	041b      	lsls	r3, r3, #16
 80077e4:	43db      	mvns	r3, r3
 80077e6:	68f9      	ldr	r1, [r7, #12]
 80077e8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80077ec:	4013      	ands	r3, r2
 80077ee:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80077f0:	68bb      	ldr	r3, [r7, #8]
 80077f2:	015a      	lsls	r2, r3, #5
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	4413      	add	r3, r2
 80077f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80077fc:	681a      	ldr	r2, [r3, #0]
 80077fe:	68bb      	ldr	r3, [r7, #8]
 8007800:	0159      	lsls	r1, r3, #5
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	440b      	add	r3, r1
 8007806:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800780a:	4619      	mov	r1, r3
 800780c:	4b05      	ldr	r3, [pc, #20]	; (8007824 <USB_DeactivateEndpoint+0x1b4>)
 800780e:	4013      	ands	r3, r2
 8007810:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8007812:	2300      	movs	r3, #0
}
 8007814:	4618      	mov	r0, r3
 8007816:	3714      	adds	r7, #20
 8007818:	46bd      	mov	sp, r7
 800781a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800781e:	4770      	bx	lr
 8007820:	ec337800 	.word	0xec337800
 8007824:	eff37800 	.word	0xeff37800

08007828 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007828:	b580      	push	{r7, lr}
 800782a:	b08a      	sub	sp, #40	; 0x28
 800782c:	af02      	add	r7, sp, #8
 800782e:	60f8      	str	r0, [r7, #12]
 8007830:	60b9      	str	r1, [r7, #8]
 8007832:	4613      	mov	r3, r2
 8007834:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800783a:	68bb      	ldr	r3, [r7, #8]
 800783c:	781b      	ldrb	r3, [r3, #0]
 800783e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007840:	68bb      	ldr	r3, [r7, #8]
 8007842:	785b      	ldrb	r3, [r3, #1]
 8007844:	2b01      	cmp	r3, #1
 8007846:	f040 815c 	bne.w	8007b02 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800784a:	68bb      	ldr	r3, [r7, #8]
 800784c:	699b      	ldr	r3, [r3, #24]
 800784e:	2b00      	cmp	r3, #0
 8007850:	d132      	bne.n	80078b8 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007852:	69bb      	ldr	r3, [r7, #24]
 8007854:	015a      	lsls	r2, r3, #5
 8007856:	69fb      	ldr	r3, [r7, #28]
 8007858:	4413      	add	r3, r2
 800785a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800785e:	691b      	ldr	r3, [r3, #16]
 8007860:	69ba      	ldr	r2, [r7, #24]
 8007862:	0151      	lsls	r1, r2, #5
 8007864:	69fa      	ldr	r2, [r7, #28]
 8007866:	440a      	add	r2, r1
 8007868:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800786c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007870:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007874:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007876:	69bb      	ldr	r3, [r7, #24]
 8007878:	015a      	lsls	r2, r3, #5
 800787a:	69fb      	ldr	r3, [r7, #28]
 800787c:	4413      	add	r3, r2
 800787e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007882:	691b      	ldr	r3, [r3, #16]
 8007884:	69ba      	ldr	r2, [r7, #24]
 8007886:	0151      	lsls	r1, r2, #5
 8007888:	69fa      	ldr	r2, [r7, #28]
 800788a:	440a      	add	r2, r1
 800788c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007890:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007894:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007896:	69bb      	ldr	r3, [r7, #24]
 8007898:	015a      	lsls	r2, r3, #5
 800789a:	69fb      	ldr	r3, [r7, #28]
 800789c:	4413      	add	r3, r2
 800789e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078a2:	691b      	ldr	r3, [r3, #16]
 80078a4:	69ba      	ldr	r2, [r7, #24]
 80078a6:	0151      	lsls	r1, r2, #5
 80078a8:	69fa      	ldr	r2, [r7, #28]
 80078aa:	440a      	add	r2, r1
 80078ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80078b0:	0cdb      	lsrs	r3, r3, #19
 80078b2:	04db      	lsls	r3, r3, #19
 80078b4:	6113      	str	r3, [r2, #16]
 80078b6:	e074      	b.n	80079a2 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80078b8:	69bb      	ldr	r3, [r7, #24]
 80078ba:	015a      	lsls	r2, r3, #5
 80078bc:	69fb      	ldr	r3, [r7, #28]
 80078be:	4413      	add	r3, r2
 80078c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078c4:	691b      	ldr	r3, [r3, #16]
 80078c6:	69ba      	ldr	r2, [r7, #24]
 80078c8:	0151      	lsls	r1, r2, #5
 80078ca:	69fa      	ldr	r2, [r7, #28]
 80078cc:	440a      	add	r2, r1
 80078ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80078d2:	0cdb      	lsrs	r3, r3, #19
 80078d4:	04db      	lsls	r3, r3, #19
 80078d6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80078d8:	69bb      	ldr	r3, [r7, #24]
 80078da:	015a      	lsls	r2, r3, #5
 80078dc:	69fb      	ldr	r3, [r7, #28]
 80078de:	4413      	add	r3, r2
 80078e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078e4:	691b      	ldr	r3, [r3, #16]
 80078e6:	69ba      	ldr	r2, [r7, #24]
 80078e8:	0151      	lsls	r1, r2, #5
 80078ea:	69fa      	ldr	r2, [r7, #28]
 80078ec:	440a      	add	r2, r1
 80078ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80078f2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80078f6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80078fa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80078fc:	69bb      	ldr	r3, [r7, #24]
 80078fe:	015a      	lsls	r2, r3, #5
 8007900:	69fb      	ldr	r3, [r7, #28]
 8007902:	4413      	add	r3, r2
 8007904:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007908:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800790a:	68bb      	ldr	r3, [r7, #8]
 800790c:	6999      	ldr	r1, [r3, #24]
 800790e:	68bb      	ldr	r3, [r7, #8]
 8007910:	68db      	ldr	r3, [r3, #12]
 8007912:	440b      	add	r3, r1
 8007914:	1e59      	subs	r1, r3, #1
 8007916:	68bb      	ldr	r3, [r7, #8]
 8007918:	68db      	ldr	r3, [r3, #12]
 800791a:	fbb1 f3f3 	udiv	r3, r1, r3
 800791e:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8007920:	4b9d      	ldr	r3, [pc, #628]	; (8007b98 <USB_EPStartXfer+0x370>)
 8007922:	400b      	ands	r3, r1
 8007924:	69b9      	ldr	r1, [r7, #24]
 8007926:	0148      	lsls	r0, r1, #5
 8007928:	69f9      	ldr	r1, [r7, #28]
 800792a:	4401      	add	r1, r0
 800792c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007930:	4313      	orrs	r3, r2
 8007932:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007934:	69bb      	ldr	r3, [r7, #24]
 8007936:	015a      	lsls	r2, r3, #5
 8007938:	69fb      	ldr	r3, [r7, #28]
 800793a:	4413      	add	r3, r2
 800793c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007940:	691a      	ldr	r2, [r3, #16]
 8007942:	68bb      	ldr	r3, [r7, #8]
 8007944:	699b      	ldr	r3, [r3, #24]
 8007946:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800794a:	69b9      	ldr	r1, [r7, #24]
 800794c:	0148      	lsls	r0, r1, #5
 800794e:	69f9      	ldr	r1, [r7, #28]
 8007950:	4401      	add	r1, r0
 8007952:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007956:	4313      	orrs	r3, r2
 8007958:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800795a:	68bb      	ldr	r3, [r7, #8]
 800795c:	791b      	ldrb	r3, [r3, #4]
 800795e:	2b01      	cmp	r3, #1
 8007960:	d11f      	bne.n	80079a2 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8007962:	69bb      	ldr	r3, [r7, #24]
 8007964:	015a      	lsls	r2, r3, #5
 8007966:	69fb      	ldr	r3, [r7, #28]
 8007968:	4413      	add	r3, r2
 800796a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800796e:	691b      	ldr	r3, [r3, #16]
 8007970:	69ba      	ldr	r2, [r7, #24]
 8007972:	0151      	lsls	r1, r2, #5
 8007974:	69fa      	ldr	r2, [r7, #28]
 8007976:	440a      	add	r2, r1
 8007978:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800797c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8007980:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8007982:	69bb      	ldr	r3, [r7, #24]
 8007984:	015a      	lsls	r2, r3, #5
 8007986:	69fb      	ldr	r3, [r7, #28]
 8007988:	4413      	add	r3, r2
 800798a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800798e:	691b      	ldr	r3, [r3, #16]
 8007990:	69ba      	ldr	r2, [r7, #24]
 8007992:	0151      	lsls	r1, r2, #5
 8007994:	69fa      	ldr	r2, [r7, #28]
 8007996:	440a      	add	r2, r1
 8007998:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800799c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80079a0:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80079a2:	79fb      	ldrb	r3, [r7, #7]
 80079a4:	2b01      	cmp	r3, #1
 80079a6:	d14b      	bne.n	8007a40 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80079a8:	68bb      	ldr	r3, [r7, #8]
 80079aa:	695b      	ldr	r3, [r3, #20]
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d009      	beq.n	80079c4 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80079b0:	69bb      	ldr	r3, [r7, #24]
 80079b2:	015a      	lsls	r2, r3, #5
 80079b4:	69fb      	ldr	r3, [r7, #28]
 80079b6:	4413      	add	r3, r2
 80079b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80079bc:	461a      	mov	r2, r3
 80079be:	68bb      	ldr	r3, [r7, #8]
 80079c0:	695b      	ldr	r3, [r3, #20]
 80079c2:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80079c4:	68bb      	ldr	r3, [r7, #8]
 80079c6:	791b      	ldrb	r3, [r3, #4]
 80079c8:	2b01      	cmp	r3, #1
 80079ca:	d128      	bne.n	8007a1e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80079cc:	69fb      	ldr	r3, [r7, #28]
 80079ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80079d2:	689b      	ldr	r3, [r3, #8]
 80079d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d110      	bne.n	80079fe <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80079dc:	69bb      	ldr	r3, [r7, #24]
 80079de:	015a      	lsls	r2, r3, #5
 80079e0:	69fb      	ldr	r3, [r7, #28]
 80079e2:	4413      	add	r3, r2
 80079e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	69ba      	ldr	r2, [r7, #24]
 80079ec:	0151      	lsls	r1, r2, #5
 80079ee:	69fa      	ldr	r2, [r7, #28]
 80079f0:	440a      	add	r2, r1
 80079f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80079f6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80079fa:	6013      	str	r3, [r2, #0]
 80079fc:	e00f      	b.n	8007a1e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80079fe:	69bb      	ldr	r3, [r7, #24]
 8007a00:	015a      	lsls	r2, r3, #5
 8007a02:	69fb      	ldr	r3, [r7, #28]
 8007a04:	4413      	add	r3, r2
 8007a06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	69ba      	ldr	r2, [r7, #24]
 8007a0e:	0151      	lsls	r1, r2, #5
 8007a10:	69fa      	ldr	r2, [r7, #28]
 8007a12:	440a      	add	r2, r1
 8007a14:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007a18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007a1c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007a1e:	69bb      	ldr	r3, [r7, #24]
 8007a20:	015a      	lsls	r2, r3, #5
 8007a22:	69fb      	ldr	r3, [r7, #28]
 8007a24:	4413      	add	r3, r2
 8007a26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	69ba      	ldr	r2, [r7, #24]
 8007a2e:	0151      	lsls	r1, r2, #5
 8007a30:	69fa      	ldr	r2, [r7, #28]
 8007a32:	440a      	add	r2, r1
 8007a34:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007a38:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007a3c:	6013      	str	r3, [r2, #0]
 8007a3e:	e133      	b.n	8007ca8 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007a40:	69bb      	ldr	r3, [r7, #24]
 8007a42:	015a      	lsls	r2, r3, #5
 8007a44:	69fb      	ldr	r3, [r7, #28]
 8007a46:	4413      	add	r3, r2
 8007a48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	69ba      	ldr	r2, [r7, #24]
 8007a50:	0151      	lsls	r1, r2, #5
 8007a52:	69fa      	ldr	r2, [r7, #28]
 8007a54:	440a      	add	r2, r1
 8007a56:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007a5a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007a5e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007a60:	68bb      	ldr	r3, [r7, #8]
 8007a62:	791b      	ldrb	r3, [r3, #4]
 8007a64:	2b01      	cmp	r3, #1
 8007a66:	d015      	beq.n	8007a94 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8007a68:	68bb      	ldr	r3, [r7, #8]
 8007a6a:	699b      	ldr	r3, [r3, #24]
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	f000 811b 	beq.w	8007ca8 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007a72:	69fb      	ldr	r3, [r7, #28]
 8007a74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a78:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007a7a:	68bb      	ldr	r3, [r7, #8]
 8007a7c:	781b      	ldrb	r3, [r3, #0]
 8007a7e:	f003 030f 	and.w	r3, r3, #15
 8007a82:	2101      	movs	r1, #1
 8007a84:	fa01 f303 	lsl.w	r3, r1, r3
 8007a88:	69f9      	ldr	r1, [r7, #28]
 8007a8a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007a8e:	4313      	orrs	r3, r2
 8007a90:	634b      	str	r3, [r1, #52]	; 0x34
 8007a92:	e109      	b.n	8007ca8 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007a94:	69fb      	ldr	r3, [r7, #28]
 8007a96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a9a:	689b      	ldr	r3, [r3, #8]
 8007a9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d110      	bne.n	8007ac6 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007aa4:	69bb      	ldr	r3, [r7, #24]
 8007aa6:	015a      	lsls	r2, r3, #5
 8007aa8:	69fb      	ldr	r3, [r7, #28]
 8007aaa:	4413      	add	r3, r2
 8007aac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	69ba      	ldr	r2, [r7, #24]
 8007ab4:	0151      	lsls	r1, r2, #5
 8007ab6:	69fa      	ldr	r2, [r7, #28]
 8007ab8:	440a      	add	r2, r1
 8007aba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007abe:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007ac2:	6013      	str	r3, [r2, #0]
 8007ac4:	e00f      	b.n	8007ae6 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007ac6:	69bb      	ldr	r3, [r7, #24]
 8007ac8:	015a      	lsls	r2, r3, #5
 8007aca:	69fb      	ldr	r3, [r7, #28]
 8007acc:	4413      	add	r3, r2
 8007ace:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	69ba      	ldr	r2, [r7, #24]
 8007ad6:	0151      	lsls	r1, r2, #5
 8007ad8:	69fa      	ldr	r2, [r7, #28]
 8007ada:	440a      	add	r2, r1
 8007adc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007ae0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007ae4:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8007ae6:	68bb      	ldr	r3, [r7, #8]
 8007ae8:	6919      	ldr	r1, [r3, #16]
 8007aea:	68bb      	ldr	r3, [r7, #8]
 8007aec:	781a      	ldrb	r2, [r3, #0]
 8007aee:	68bb      	ldr	r3, [r7, #8]
 8007af0:	699b      	ldr	r3, [r3, #24]
 8007af2:	b298      	uxth	r0, r3
 8007af4:	79fb      	ldrb	r3, [r7, #7]
 8007af6:	9300      	str	r3, [sp, #0]
 8007af8:	4603      	mov	r3, r0
 8007afa:	68f8      	ldr	r0, [r7, #12]
 8007afc:	f000 fade 	bl	80080bc <USB_WritePacket>
 8007b00:	e0d2      	b.n	8007ca8 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007b02:	69bb      	ldr	r3, [r7, #24]
 8007b04:	015a      	lsls	r2, r3, #5
 8007b06:	69fb      	ldr	r3, [r7, #28]
 8007b08:	4413      	add	r3, r2
 8007b0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b0e:	691b      	ldr	r3, [r3, #16]
 8007b10:	69ba      	ldr	r2, [r7, #24]
 8007b12:	0151      	lsls	r1, r2, #5
 8007b14:	69fa      	ldr	r2, [r7, #28]
 8007b16:	440a      	add	r2, r1
 8007b18:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007b1c:	0cdb      	lsrs	r3, r3, #19
 8007b1e:	04db      	lsls	r3, r3, #19
 8007b20:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007b22:	69bb      	ldr	r3, [r7, #24]
 8007b24:	015a      	lsls	r2, r3, #5
 8007b26:	69fb      	ldr	r3, [r7, #28]
 8007b28:	4413      	add	r3, r2
 8007b2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b2e:	691b      	ldr	r3, [r3, #16]
 8007b30:	69ba      	ldr	r2, [r7, #24]
 8007b32:	0151      	lsls	r1, r2, #5
 8007b34:	69fa      	ldr	r2, [r7, #28]
 8007b36:	440a      	add	r2, r1
 8007b38:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007b3c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007b40:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007b44:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8007b46:	68bb      	ldr	r3, [r7, #8]
 8007b48:	699b      	ldr	r3, [r3, #24]
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d126      	bne.n	8007b9c <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8007b4e:	69bb      	ldr	r3, [r7, #24]
 8007b50:	015a      	lsls	r2, r3, #5
 8007b52:	69fb      	ldr	r3, [r7, #28]
 8007b54:	4413      	add	r3, r2
 8007b56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b5a:	691a      	ldr	r2, [r3, #16]
 8007b5c:	68bb      	ldr	r3, [r7, #8]
 8007b5e:	68db      	ldr	r3, [r3, #12]
 8007b60:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007b64:	69b9      	ldr	r1, [r7, #24]
 8007b66:	0148      	lsls	r0, r1, #5
 8007b68:	69f9      	ldr	r1, [r7, #28]
 8007b6a:	4401      	add	r1, r0
 8007b6c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007b70:	4313      	orrs	r3, r2
 8007b72:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007b74:	69bb      	ldr	r3, [r7, #24]
 8007b76:	015a      	lsls	r2, r3, #5
 8007b78:	69fb      	ldr	r3, [r7, #28]
 8007b7a:	4413      	add	r3, r2
 8007b7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b80:	691b      	ldr	r3, [r3, #16]
 8007b82:	69ba      	ldr	r2, [r7, #24]
 8007b84:	0151      	lsls	r1, r2, #5
 8007b86:	69fa      	ldr	r2, [r7, #28]
 8007b88:	440a      	add	r2, r1
 8007b8a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007b8e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007b92:	6113      	str	r3, [r2, #16]
 8007b94:	e03a      	b.n	8007c0c <USB_EPStartXfer+0x3e4>
 8007b96:	bf00      	nop
 8007b98:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8007b9c:	68bb      	ldr	r3, [r7, #8]
 8007b9e:	699a      	ldr	r2, [r3, #24]
 8007ba0:	68bb      	ldr	r3, [r7, #8]
 8007ba2:	68db      	ldr	r3, [r3, #12]
 8007ba4:	4413      	add	r3, r2
 8007ba6:	1e5a      	subs	r2, r3, #1
 8007ba8:	68bb      	ldr	r3, [r7, #8]
 8007baa:	68db      	ldr	r3, [r3, #12]
 8007bac:	fbb2 f3f3 	udiv	r3, r2, r3
 8007bb0:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8007bb2:	68bb      	ldr	r3, [r7, #8]
 8007bb4:	68db      	ldr	r3, [r3, #12]
 8007bb6:	8afa      	ldrh	r2, [r7, #22]
 8007bb8:	fb03 f202 	mul.w	r2, r3, r2
 8007bbc:	68bb      	ldr	r3, [r7, #8]
 8007bbe:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8007bc0:	69bb      	ldr	r3, [r7, #24]
 8007bc2:	015a      	lsls	r2, r3, #5
 8007bc4:	69fb      	ldr	r3, [r7, #28]
 8007bc6:	4413      	add	r3, r2
 8007bc8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007bcc:	691a      	ldr	r2, [r3, #16]
 8007bce:	8afb      	ldrh	r3, [r7, #22]
 8007bd0:	04d9      	lsls	r1, r3, #19
 8007bd2:	4b38      	ldr	r3, [pc, #224]	; (8007cb4 <USB_EPStartXfer+0x48c>)
 8007bd4:	400b      	ands	r3, r1
 8007bd6:	69b9      	ldr	r1, [r7, #24]
 8007bd8:	0148      	lsls	r0, r1, #5
 8007bda:	69f9      	ldr	r1, [r7, #28]
 8007bdc:	4401      	add	r1, r0
 8007bde:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007be2:	4313      	orrs	r3, r2
 8007be4:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8007be6:	69bb      	ldr	r3, [r7, #24]
 8007be8:	015a      	lsls	r2, r3, #5
 8007bea:	69fb      	ldr	r3, [r7, #28]
 8007bec:	4413      	add	r3, r2
 8007bee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007bf2:	691a      	ldr	r2, [r3, #16]
 8007bf4:	68bb      	ldr	r3, [r7, #8]
 8007bf6:	69db      	ldr	r3, [r3, #28]
 8007bf8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007bfc:	69b9      	ldr	r1, [r7, #24]
 8007bfe:	0148      	lsls	r0, r1, #5
 8007c00:	69f9      	ldr	r1, [r7, #28]
 8007c02:	4401      	add	r1, r0
 8007c04:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007c08:	4313      	orrs	r3, r2
 8007c0a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8007c0c:	79fb      	ldrb	r3, [r7, #7]
 8007c0e:	2b01      	cmp	r3, #1
 8007c10:	d10d      	bne.n	8007c2e <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8007c12:	68bb      	ldr	r3, [r7, #8]
 8007c14:	691b      	ldr	r3, [r3, #16]
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d009      	beq.n	8007c2e <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8007c1a:	68bb      	ldr	r3, [r7, #8]
 8007c1c:	6919      	ldr	r1, [r3, #16]
 8007c1e:	69bb      	ldr	r3, [r7, #24]
 8007c20:	015a      	lsls	r2, r3, #5
 8007c22:	69fb      	ldr	r3, [r7, #28]
 8007c24:	4413      	add	r3, r2
 8007c26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c2a:	460a      	mov	r2, r1
 8007c2c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8007c2e:	68bb      	ldr	r3, [r7, #8]
 8007c30:	791b      	ldrb	r3, [r3, #4]
 8007c32:	2b01      	cmp	r3, #1
 8007c34:	d128      	bne.n	8007c88 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007c36:	69fb      	ldr	r3, [r7, #28]
 8007c38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c3c:	689b      	ldr	r3, [r3, #8]
 8007c3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d110      	bne.n	8007c68 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8007c46:	69bb      	ldr	r3, [r7, #24]
 8007c48:	015a      	lsls	r2, r3, #5
 8007c4a:	69fb      	ldr	r3, [r7, #28]
 8007c4c:	4413      	add	r3, r2
 8007c4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	69ba      	ldr	r2, [r7, #24]
 8007c56:	0151      	lsls	r1, r2, #5
 8007c58:	69fa      	ldr	r2, [r7, #28]
 8007c5a:	440a      	add	r2, r1
 8007c5c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007c60:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007c64:	6013      	str	r3, [r2, #0]
 8007c66:	e00f      	b.n	8007c88 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8007c68:	69bb      	ldr	r3, [r7, #24]
 8007c6a:	015a      	lsls	r2, r3, #5
 8007c6c:	69fb      	ldr	r3, [r7, #28]
 8007c6e:	4413      	add	r3, r2
 8007c70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	69ba      	ldr	r2, [r7, #24]
 8007c78:	0151      	lsls	r1, r2, #5
 8007c7a:	69fa      	ldr	r2, [r7, #28]
 8007c7c:	440a      	add	r2, r1
 8007c7e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007c82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007c86:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007c88:	69bb      	ldr	r3, [r7, #24]
 8007c8a:	015a      	lsls	r2, r3, #5
 8007c8c:	69fb      	ldr	r3, [r7, #28]
 8007c8e:	4413      	add	r3, r2
 8007c90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	69ba      	ldr	r2, [r7, #24]
 8007c98:	0151      	lsls	r1, r2, #5
 8007c9a:	69fa      	ldr	r2, [r7, #28]
 8007c9c:	440a      	add	r2, r1
 8007c9e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007ca2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007ca6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007ca8:	2300      	movs	r3, #0
}
 8007caa:	4618      	mov	r0, r3
 8007cac:	3720      	adds	r7, #32
 8007cae:	46bd      	mov	sp, r7
 8007cb0:	bd80      	pop	{r7, pc}
 8007cb2:	bf00      	nop
 8007cb4:	1ff80000 	.word	0x1ff80000

08007cb8 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007cb8:	b480      	push	{r7}
 8007cba:	b087      	sub	sp, #28
 8007cbc:	af00      	add	r7, sp, #0
 8007cbe:	60f8      	str	r0, [r7, #12]
 8007cc0:	60b9      	str	r1, [r7, #8]
 8007cc2:	4613      	mov	r3, r2
 8007cc4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8007cca:	68bb      	ldr	r3, [r7, #8]
 8007ccc:	781b      	ldrb	r3, [r3, #0]
 8007cce:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007cd0:	68bb      	ldr	r3, [r7, #8]
 8007cd2:	785b      	ldrb	r3, [r3, #1]
 8007cd4:	2b01      	cmp	r3, #1
 8007cd6:	f040 80ce 	bne.w	8007e76 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8007cda:	68bb      	ldr	r3, [r7, #8]
 8007cdc:	699b      	ldr	r3, [r3, #24]
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d132      	bne.n	8007d48 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007ce2:	693b      	ldr	r3, [r7, #16]
 8007ce4:	015a      	lsls	r2, r3, #5
 8007ce6:	697b      	ldr	r3, [r7, #20]
 8007ce8:	4413      	add	r3, r2
 8007cea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007cee:	691b      	ldr	r3, [r3, #16]
 8007cf0:	693a      	ldr	r2, [r7, #16]
 8007cf2:	0151      	lsls	r1, r2, #5
 8007cf4:	697a      	ldr	r2, [r7, #20]
 8007cf6:	440a      	add	r2, r1
 8007cf8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007cfc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007d00:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007d04:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007d06:	693b      	ldr	r3, [r7, #16]
 8007d08:	015a      	lsls	r2, r3, #5
 8007d0a:	697b      	ldr	r3, [r7, #20]
 8007d0c:	4413      	add	r3, r2
 8007d0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d12:	691b      	ldr	r3, [r3, #16]
 8007d14:	693a      	ldr	r2, [r7, #16]
 8007d16:	0151      	lsls	r1, r2, #5
 8007d18:	697a      	ldr	r2, [r7, #20]
 8007d1a:	440a      	add	r2, r1
 8007d1c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007d20:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007d24:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007d26:	693b      	ldr	r3, [r7, #16]
 8007d28:	015a      	lsls	r2, r3, #5
 8007d2a:	697b      	ldr	r3, [r7, #20]
 8007d2c:	4413      	add	r3, r2
 8007d2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d32:	691b      	ldr	r3, [r3, #16]
 8007d34:	693a      	ldr	r2, [r7, #16]
 8007d36:	0151      	lsls	r1, r2, #5
 8007d38:	697a      	ldr	r2, [r7, #20]
 8007d3a:	440a      	add	r2, r1
 8007d3c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007d40:	0cdb      	lsrs	r3, r3, #19
 8007d42:	04db      	lsls	r3, r3, #19
 8007d44:	6113      	str	r3, [r2, #16]
 8007d46:	e04e      	b.n	8007de6 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007d48:	693b      	ldr	r3, [r7, #16]
 8007d4a:	015a      	lsls	r2, r3, #5
 8007d4c:	697b      	ldr	r3, [r7, #20]
 8007d4e:	4413      	add	r3, r2
 8007d50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d54:	691b      	ldr	r3, [r3, #16]
 8007d56:	693a      	ldr	r2, [r7, #16]
 8007d58:	0151      	lsls	r1, r2, #5
 8007d5a:	697a      	ldr	r2, [r7, #20]
 8007d5c:	440a      	add	r2, r1
 8007d5e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007d62:	0cdb      	lsrs	r3, r3, #19
 8007d64:	04db      	lsls	r3, r3, #19
 8007d66:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007d68:	693b      	ldr	r3, [r7, #16]
 8007d6a:	015a      	lsls	r2, r3, #5
 8007d6c:	697b      	ldr	r3, [r7, #20]
 8007d6e:	4413      	add	r3, r2
 8007d70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d74:	691b      	ldr	r3, [r3, #16]
 8007d76:	693a      	ldr	r2, [r7, #16]
 8007d78:	0151      	lsls	r1, r2, #5
 8007d7a:	697a      	ldr	r2, [r7, #20]
 8007d7c:	440a      	add	r2, r1
 8007d7e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007d82:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007d86:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007d8a:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8007d8c:	68bb      	ldr	r3, [r7, #8]
 8007d8e:	699a      	ldr	r2, [r3, #24]
 8007d90:	68bb      	ldr	r3, [r7, #8]
 8007d92:	68db      	ldr	r3, [r3, #12]
 8007d94:	429a      	cmp	r2, r3
 8007d96:	d903      	bls.n	8007da0 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8007d98:	68bb      	ldr	r3, [r7, #8]
 8007d9a:	68da      	ldr	r2, [r3, #12]
 8007d9c:	68bb      	ldr	r3, [r7, #8]
 8007d9e:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007da0:	693b      	ldr	r3, [r7, #16]
 8007da2:	015a      	lsls	r2, r3, #5
 8007da4:	697b      	ldr	r3, [r7, #20]
 8007da6:	4413      	add	r3, r2
 8007da8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007dac:	691b      	ldr	r3, [r3, #16]
 8007dae:	693a      	ldr	r2, [r7, #16]
 8007db0:	0151      	lsls	r1, r2, #5
 8007db2:	697a      	ldr	r2, [r7, #20]
 8007db4:	440a      	add	r2, r1
 8007db6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007dba:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007dbe:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007dc0:	693b      	ldr	r3, [r7, #16]
 8007dc2:	015a      	lsls	r2, r3, #5
 8007dc4:	697b      	ldr	r3, [r7, #20]
 8007dc6:	4413      	add	r3, r2
 8007dc8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007dcc:	691a      	ldr	r2, [r3, #16]
 8007dce:	68bb      	ldr	r3, [r7, #8]
 8007dd0:	699b      	ldr	r3, [r3, #24]
 8007dd2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007dd6:	6939      	ldr	r1, [r7, #16]
 8007dd8:	0148      	lsls	r0, r1, #5
 8007dda:	6979      	ldr	r1, [r7, #20]
 8007ddc:	4401      	add	r1, r0
 8007dde:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007de2:	4313      	orrs	r3, r2
 8007de4:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8007de6:	79fb      	ldrb	r3, [r7, #7]
 8007de8:	2b01      	cmp	r3, #1
 8007dea:	d11e      	bne.n	8007e2a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007dec:	68bb      	ldr	r3, [r7, #8]
 8007dee:	695b      	ldr	r3, [r3, #20]
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d009      	beq.n	8007e08 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007df4:	693b      	ldr	r3, [r7, #16]
 8007df6:	015a      	lsls	r2, r3, #5
 8007df8:	697b      	ldr	r3, [r7, #20]
 8007dfa:	4413      	add	r3, r2
 8007dfc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e00:	461a      	mov	r2, r3
 8007e02:	68bb      	ldr	r3, [r7, #8]
 8007e04:	695b      	ldr	r3, [r3, #20]
 8007e06:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007e08:	693b      	ldr	r3, [r7, #16]
 8007e0a:	015a      	lsls	r2, r3, #5
 8007e0c:	697b      	ldr	r3, [r7, #20]
 8007e0e:	4413      	add	r3, r2
 8007e10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	693a      	ldr	r2, [r7, #16]
 8007e18:	0151      	lsls	r1, r2, #5
 8007e1a:	697a      	ldr	r2, [r7, #20]
 8007e1c:	440a      	add	r2, r1
 8007e1e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007e22:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007e26:	6013      	str	r3, [r2, #0]
 8007e28:	e097      	b.n	8007f5a <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007e2a:	693b      	ldr	r3, [r7, #16]
 8007e2c:	015a      	lsls	r2, r3, #5
 8007e2e:	697b      	ldr	r3, [r7, #20]
 8007e30:	4413      	add	r3, r2
 8007e32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	693a      	ldr	r2, [r7, #16]
 8007e3a:	0151      	lsls	r1, r2, #5
 8007e3c:	697a      	ldr	r2, [r7, #20]
 8007e3e:	440a      	add	r2, r1
 8007e40:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007e44:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007e48:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8007e4a:	68bb      	ldr	r3, [r7, #8]
 8007e4c:	699b      	ldr	r3, [r3, #24]
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	f000 8083 	beq.w	8007f5a <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007e54:	697b      	ldr	r3, [r7, #20]
 8007e56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e5a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007e5c:	68bb      	ldr	r3, [r7, #8]
 8007e5e:	781b      	ldrb	r3, [r3, #0]
 8007e60:	f003 030f 	and.w	r3, r3, #15
 8007e64:	2101      	movs	r1, #1
 8007e66:	fa01 f303 	lsl.w	r3, r1, r3
 8007e6a:	6979      	ldr	r1, [r7, #20]
 8007e6c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007e70:	4313      	orrs	r3, r2
 8007e72:	634b      	str	r3, [r1, #52]	; 0x34
 8007e74:	e071      	b.n	8007f5a <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007e76:	693b      	ldr	r3, [r7, #16]
 8007e78:	015a      	lsls	r2, r3, #5
 8007e7a:	697b      	ldr	r3, [r7, #20]
 8007e7c:	4413      	add	r3, r2
 8007e7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e82:	691b      	ldr	r3, [r3, #16]
 8007e84:	693a      	ldr	r2, [r7, #16]
 8007e86:	0151      	lsls	r1, r2, #5
 8007e88:	697a      	ldr	r2, [r7, #20]
 8007e8a:	440a      	add	r2, r1
 8007e8c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007e90:	0cdb      	lsrs	r3, r3, #19
 8007e92:	04db      	lsls	r3, r3, #19
 8007e94:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007e96:	693b      	ldr	r3, [r7, #16]
 8007e98:	015a      	lsls	r2, r3, #5
 8007e9a:	697b      	ldr	r3, [r7, #20]
 8007e9c:	4413      	add	r3, r2
 8007e9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ea2:	691b      	ldr	r3, [r3, #16]
 8007ea4:	693a      	ldr	r2, [r7, #16]
 8007ea6:	0151      	lsls	r1, r2, #5
 8007ea8:	697a      	ldr	r2, [r7, #20]
 8007eaa:	440a      	add	r2, r1
 8007eac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007eb0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007eb4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007eb8:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8007eba:	68bb      	ldr	r3, [r7, #8]
 8007ebc:	699b      	ldr	r3, [r3, #24]
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d003      	beq.n	8007eca <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8007ec2:	68bb      	ldr	r3, [r7, #8]
 8007ec4:	68da      	ldr	r2, [r3, #12]
 8007ec6:	68bb      	ldr	r3, [r7, #8]
 8007ec8:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8007eca:	68bb      	ldr	r3, [r7, #8]
 8007ecc:	68da      	ldr	r2, [r3, #12]
 8007ece:	68bb      	ldr	r3, [r7, #8]
 8007ed0:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007ed2:	693b      	ldr	r3, [r7, #16]
 8007ed4:	015a      	lsls	r2, r3, #5
 8007ed6:	697b      	ldr	r3, [r7, #20]
 8007ed8:	4413      	add	r3, r2
 8007eda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ede:	691b      	ldr	r3, [r3, #16]
 8007ee0:	693a      	ldr	r2, [r7, #16]
 8007ee2:	0151      	lsls	r1, r2, #5
 8007ee4:	697a      	ldr	r2, [r7, #20]
 8007ee6:	440a      	add	r2, r1
 8007ee8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007eec:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007ef0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8007ef2:	693b      	ldr	r3, [r7, #16]
 8007ef4:	015a      	lsls	r2, r3, #5
 8007ef6:	697b      	ldr	r3, [r7, #20]
 8007ef8:	4413      	add	r3, r2
 8007efa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007efe:	691a      	ldr	r2, [r3, #16]
 8007f00:	68bb      	ldr	r3, [r7, #8]
 8007f02:	69db      	ldr	r3, [r3, #28]
 8007f04:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007f08:	6939      	ldr	r1, [r7, #16]
 8007f0a:	0148      	lsls	r0, r1, #5
 8007f0c:	6979      	ldr	r1, [r7, #20]
 8007f0e:	4401      	add	r1, r0
 8007f10:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007f14:	4313      	orrs	r3, r2
 8007f16:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8007f18:	79fb      	ldrb	r3, [r7, #7]
 8007f1a:	2b01      	cmp	r3, #1
 8007f1c:	d10d      	bne.n	8007f3a <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8007f1e:	68bb      	ldr	r3, [r7, #8]
 8007f20:	691b      	ldr	r3, [r3, #16]
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d009      	beq.n	8007f3a <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8007f26:	68bb      	ldr	r3, [r7, #8]
 8007f28:	6919      	ldr	r1, [r3, #16]
 8007f2a:	693b      	ldr	r3, [r7, #16]
 8007f2c:	015a      	lsls	r2, r3, #5
 8007f2e:	697b      	ldr	r3, [r7, #20]
 8007f30:	4413      	add	r3, r2
 8007f32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f36:	460a      	mov	r2, r1
 8007f38:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007f3a:	693b      	ldr	r3, [r7, #16]
 8007f3c:	015a      	lsls	r2, r3, #5
 8007f3e:	697b      	ldr	r3, [r7, #20]
 8007f40:	4413      	add	r3, r2
 8007f42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	693a      	ldr	r2, [r7, #16]
 8007f4a:	0151      	lsls	r1, r2, #5
 8007f4c:	697a      	ldr	r2, [r7, #20]
 8007f4e:	440a      	add	r2, r1
 8007f50:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007f54:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007f58:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007f5a:	2300      	movs	r3, #0
}
 8007f5c:	4618      	mov	r0, r3
 8007f5e:	371c      	adds	r7, #28
 8007f60:	46bd      	mov	sp, r7
 8007f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f66:	4770      	bx	lr

08007f68 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007f68:	b480      	push	{r7}
 8007f6a:	b087      	sub	sp, #28
 8007f6c:	af00      	add	r7, sp, #0
 8007f6e:	6078      	str	r0, [r7, #4]
 8007f70:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007f72:	2300      	movs	r3, #0
 8007f74:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8007f76:	2300      	movs	r3, #0
 8007f78:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007f7e:	683b      	ldr	r3, [r7, #0]
 8007f80:	785b      	ldrb	r3, [r3, #1]
 8007f82:	2b01      	cmp	r3, #1
 8007f84:	d14a      	bne.n	800801c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007f86:	683b      	ldr	r3, [r7, #0]
 8007f88:	781b      	ldrb	r3, [r3, #0]
 8007f8a:	015a      	lsls	r2, r3, #5
 8007f8c:	693b      	ldr	r3, [r7, #16]
 8007f8e:	4413      	add	r3, r2
 8007f90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007f9a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007f9e:	f040 8086 	bne.w	80080ae <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8007fa2:	683b      	ldr	r3, [r7, #0]
 8007fa4:	781b      	ldrb	r3, [r3, #0]
 8007fa6:	015a      	lsls	r2, r3, #5
 8007fa8:	693b      	ldr	r3, [r7, #16]
 8007faa:	4413      	add	r3, r2
 8007fac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	683a      	ldr	r2, [r7, #0]
 8007fb4:	7812      	ldrb	r2, [r2, #0]
 8007fb6:	0151      	lsls	r1, r2, #5
 8007fb8:	693a      	ldr	r2, [r7, #16]
 8007fba:	440a      	add	r2, r1
 8007fbc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007fc0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007fc4:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8007fc6:	683b      	ldr	r3, [r7, #0]
 8007fc8:	781b      	ldrb	r3, [r3, #0]
 8007fca:	015a      	lsls	r2, r3, #5
 8007fcc:	693b      	ldr	r3, [r7, #16]
 8007fce:	4413      	add	r3, r2
 8007fd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	683a      	ldr	r2, [r7, #0]
 8007fd8:	7812      	ldrb	r2, [r2, #0]
 8007fda:	0151      	lsls	r1, r2, #5
 8007fdc:	693a      	ldr	r2, [r7, #16]
 8007fde:	440a      	add	r2, r1
 8007fe0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007fe4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007fe8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	3301      	adds	r3, #1
 8007fee:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	f242 7210 	movw	r2, #10000	; 0x2710
 8007ff6:	4293      	cmp	r3, r2
 8007ff8:	d902      	bls.n	8008000 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8007ffa:	2301      	movs	r3, #1
 8007ffc:	75fb      	strb	r3, [r7, #23]
          break;
 8007ffe:	e056      	b.n	80080ae <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8008000:	683b      	ldr	r3, [r7, #0]
 8008002:	781b      	ldrb	r3, [r3, #0]
 8008004:	015a      	lsls	r2, r3, #5
 8008006:	693b      	ldr	r3, [r7, #16]
 8008008:	4413      	add	r3, r2
 800800a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008014:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008018:	d0e7      	beq.n	8007fea <USB_EPStopXfer+0x82>
 800801a:	e048      	b.n	80080ae <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800801c:	683b      	ldr	r3, [r7, #0]
 800801e:	781b      	ldrb	r3, [r3, #0]
 8008020:	015a      	lsls	r2, r3, #5
 8008022:	693b      	ldr	r3, [r7, #16]
 8008024:	4413      	add	r3, r2
 8008026:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008030:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008034:	d13b      	bne.n	80080ae <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8008036:	683b      	ldr	r3, [r7, #0]
 8008038:	781b      	ldrb	r3, [r3, #0]
 800803a:	015a      	lsls	r2, r3, #5
 800803c:	693b      	ldr	r3, [r7, #16]
 800803e:	4413      	add	r3, r2
 8008040:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	683a      	ldr	r2, [r7, #0]
 8008048:	7812      	ldrb	r2, [r2, #0]
 800804a:	0151      	lsls	r1, r2, #5
 800804c:	693a      	ldr	r2, [r7, #16]
 800804e:	440a      	add	r2, r1
 8008050:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008054:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008058:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800805a:	683b      	ldr	r3, [r7, #0]
 800805c:	781b      	ldrb	r3, [r3, #0]
 800805e:	015a      	lsls	r2, r3, #5
 8008060:	693b      	ldr	r3, [r7, #16]
 8008062:	4413      	add	r3, r2
 8008064:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	683a      	ldr	r2, [r7, #0]
 800806c:	7812      	ldrb	r2, [r2, #0]
 800806e:	0151      	lsls	r1, r2, #5
 8008070:	693a      	ldr	r2, [r7, #16]
 8008072:	440a      	add	r2, r1
 8008074:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008078:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800807c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	3301      	adds	r3, #1
 8008082:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	f242 7210 	movw	r2, #10000	; 0x2710
 800808a:	4293      	cmp	r3, r2
 800808c:	d902      	bls.n	8008094 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800808e:	2301      	movs	r3, #1
 8008090:	75fb      	strb	r3, [r7, #23]
          break;
 8008092:	e00c      	b.n	80080ae <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8008094:	683b      	ldr	r3, [r7, #0]
 8008096:	781b      	ldrb	r3, [r3, #0]
 8008098:	015a      	lsls	r2, r3, #5
 800809a:	693b      	ldr	r3, [r7, #16]
 800809c:	4413      	add	r3, r2
 800809e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80080a8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80080ac:	d0e7      	beq.n	800807e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80080ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80080b0:	4618      	mov	r0, r3
 80080b2:	371c      	adds	r7, #28
 80080b4:	46bd      	mov	sp, r7
 80080b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ba:	4770      	bx	lr

080080bc <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80080bc:	b480      	push	{r7}
 80080be:	b089      	sub	sp, #36	; 0x24
 80080c0:	af00      	add	r7, sp, #0
 80080c2:	60f8      	str	r0, [r7, #12]
 80080c4:	60b9      	str	r1, [r7, #8]
 80080c6:	4611      	mov	r1, r2
 80080c8:	461a      	mov	r2, r3
 80080ca:	460b      	mov	r3, r1
 80080cc:	71fb      	strb	r3, [r7, #7]
 80080ce:	4613      	mov	r3, r2
 80080d0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80080d6:	68bb      	ldr	r3, [r7, #8]
 80080d8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80080da:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d123      	bne.n	800812a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80080e2:	88bb      	ldrh	r3, [r7, #4]
 80080e4:	3303      	adds	r3, #3
 80080e6:	089b      	lsrs	r3, r3, #2
 80080e8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80080ea:	2300      	movs	r3, #0
 80080ec:	61bb      	str	r3, [r7, #24]
 80080ee:	e018      	b.n	8008122 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80080f0:	79fb      	ldrb	r3, [r7, #7]
 80080f2:	031a      	lsls	r2, r3, #12
 80080f4:	697b      	ldr	r3, [r7, #20]
 80080f6:	4413      	add	r3, r2
 80080f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80080fc:	461a      	mov	r2, r3
 80080fe:	69fb      	ldr	r3, [r7, #28]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	6013      	str	r3, [r2, #0]
      pSrc++;
 8008104:	69fb      	ldr	r3, [r7, #28]
 8008106:	3301      	adds	r3, #1
 8008108:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800810a:	69fb      	ldr	r3, [r7, #28]
 800810c:	3301      	adds	r3, #1
 800810e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008110:	69fb      	ldr	r3, [r7, #28]
 8008112:	3301      	adds	r3, #1
 8008114:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008116:	69fb      	ldr	r3, [r7, #28]
 8008118:	3301      	adds	r3, #1
 800811a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800811c:	69bb      	ldr	r3, [r7, #24]
 800811e:	3301      	adds	r3, #1
 8008120:	61bb      	str	r3, [r7, #24]
 8008122:	69ba      	ldr	r2, [r7, #24]
 8008124:	693b      	ldr	r3, [r7, #16]
 8008126:	429a      	cmp	r2, r3
 8008128:	d3e2      	bcc.n	80080f0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800812a:	2300      	movs	r3, #0
}
 800812c:	4618      	mov	r0, r3
 800812e:	3724      	adds	r7, #36	; 0x24
 8008130:	46bd      	mov	sp, r7
 8008132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008136:	4770      	bx	lr

08008138 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8008138:	b480      	push	{r7}
 800813a:	b08b      	sub	sp, #44	; 0x2c
 800813c:	af00      	add	r7, sp, #0
 800813e:	60f8      	str	r0, [r7, #12]
 8008140:	60b9      	str	r1, [r7, #8]
 8008142:	4613      	mov	r3, r2
 8008144:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800814a:	68bb      	ldr	r3, [r7, #8]
 800814c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800814e:	88fb      	ldrh	r3, [r7, #6]
 8008150:	089b      	lsrs	r3, r3, #2
 8008152:	b29b      	uxth	r3, r3
 8008154:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8008156:	88fb      	ldrh	r3, [r7, #6]
 8008158:	f003 0303 	and.w	r3, r3, #3
 800815c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800815e:	2300      	movs	r3, #0
 8008160:	623b      	str	r3, [r7, #32]
 8008162:	e014      	b.n	800818e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8008164:	69bb      	ldr	r3, [r7, #24]
 8008166:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800816a:	681a      	ldr	r2, [r3, #0]
 800816c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800816e:	601a      	str	r2, [r3, #0]
    pDest++;
 8008170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008172:	3301      	adds	r3, #1
 8008174:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008178:	3301      	adds	r3, #1
 800817a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800817c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800817e:	3301      	adds	r3, #1
 8008180:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008184:	3301      	adds	r3, #1
 8008186:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8008188:	6a3b      	ldr	r3, [r7, #32]
 800818a:	3301      	adds	r3, #1
 800818c:	623b      	str	r3, [r7, #32]
 800818e:	6a3a      	ldr	r2, [r7, #32]
 8008190:	697b      	ldr	r3, [r7, #20]
 8008192:	429a      	cmp	r2, r3
 8008194:	d3e6      	bcc.n	8008164 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8008196:	8bfb      	ldrh	r3, [r7, #30]
 8008198:	2b00      	cmp	r3, #0
 800819a:	d01e      	beq.n	80081da <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800819c:	2300      	movs	r3, #0
 800819e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80081a0:	69bb      	ldr	r3, [r7, #24]
 80081a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80081a6:	461a      	mov	r2, r3
 80081a8:	f107 0310 	add.w	r3, r7, #16
 80081ac:	6812      	ldr	r2, [r2, #0]
 80081ae:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80081b0:	693a      	ldr	r2, [r7, #16]
 80081b2:	6a3b      	ldr	r3, [r7, #32]
 80081b4:	b2db      	uxtb	r3, r3
 80081b6:	00db      	lsls	r3, r3, #3
 80081b8:	fa22 f303 	lsr.w	r3, r2, r3
 80081bc:	b2da      	uxtb	r2, r3
 80081be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081c0:	701a      	strb	r2, [r3, #0]
      i++;
 80081c2:	6a3b      	ldr	r3, [r7, #32]
 80081c4:	3301      	adds	r3, #1
 80081c6:	623b      	str	r3, [r7, #32]
      pDest++;
 80081c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081ca:	3301      	adds	r3, #1
 80081cc:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80081ce:	8bfb      	ldrh	r3, [r7, #30]
 80081d0:	3b01      	subs	r3, #1
 80081d2:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80081d4:	8bfb      	ldrh	r3, [r7, #30]
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d1ea      	bne.n	80081b0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80081da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80081dc:	4618      	mov	r0, r3
 80081de:	372c      	adds	r7, #44	; 0x2c
 80081e0:	46bd      	mov	sp, r7
 80081e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e6:	4770      	bx	lr

080081e8 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80081e8:	b480      	push	{r7}
 80081ea:	b085      	sub	sp, #20
 80081ec:	af00      	add	r7, sp, #0
 80081ee:	6078      	str	r0, [r7, #4]
 80081f0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80081f6:	683b      	ldr	r3, [r7, #0]
 80081f8:	781b      	ldrb	r3, [r3, #0]
 80081fa:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80081fc:	683b      	ldr	r3, [r7, #0]
 80081fe:	785b      	ldrb	r3, [r3, #1]
 8008200:	2b01      	cmp	r3, #1
 8008202:	d12c      	bne.n	800825e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008204:	68bb      	ldr	r3, [r7, #8]
 8008206:	015a      	lsls	r2, r3, #5
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	4413      	add	r3, r2
 800820c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	2b00      	cmp	r3, #0
 8008214:	db12      	blt.n	800823c <USB_EPSetStall+0x54>
 8008216:	68bb      	ldr	r3, [r7, #8]
 8008218:	2b00      	cmp	r3, #0
 800821a:	d00f      	beq.n	800823c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800821c:	68bb      	ldr	r3, [r7, #8]
 800821e:	015a      	lsls	r2, r3, #5
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	4413      	add	r3, r2
 8008224:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	68ba      	ldr	r2, [r7, #8]
 800822c:	0151      	lsls	r1, r2, #5
 800822e:	68fa      	ldr	r2, [r7, #12]
 8008230:	440a      	add	r2, r1
 8008232:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008236:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800823a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800823c:	68bb      	ldr	r3, [r7, #8]
 800823e:	015a      	lsls	r2, r3, #5
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	4413      	add	r3, r2
 8008244:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	68ba      	ldr	r2, [r7, #8]
 800824c:	0151      	lsls	r1, r2, #5
 800824e:	68fa      	ldr	r2, [r7, #12]
 8008250:	440a      	add	r2, r1
 8008252:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008256:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800825a:	6013      	str	r3, [r2, #0]
 800825c:	e02b      	b.n	80082b6 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800825e:	68bb      	ldr	r3, [r7, #8]
 8008260:	015a      	lsls	r2, r3, #5
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	4413      	add	r3, r2
 8008266:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	2b00      	cmp	r3, #0
 800826e:	db12      	blt.n	8008296 <USB_EPSetStall+0xae>
 8008270:	68bb      	ldr	r3, [r7, #8]
 8008272:	2b00      	cmp	r3, #0
 8008274:	d00f      	beq.n	8008296 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8008276:	68bb      	ldr	r3, [r7, #8]
 8008278:	015a      	lsls	r2, r3, #5
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	4413      	add	r3, r2
 800827e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	68ba      	ldr	r2, [r7, #8]
 8008286:	0151      	lsls	r1, r2, #5
 8008288:	68fa      	ldr	r2, [r7, #12]
 800828a:	440a      	add	r2, r1
 800828c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008290:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008294:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8008296:	68bb      	ldr	r3, [r7, #8]
 8008298:	015a      	lsls	r2, r3, #5
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	4413      	add	r3, r2
 800829e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	68ba      	ldr	r2, [r7, #8]
 80082a6:	0151      	lsls	r1, r2, #5
 80082a8:	68fa      	ldr	r2, [r7, #12]
 80082aa:	440a      	add	r2, r1
 80082ac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80082b0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80082b4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80082b6:	2300      	movs	r3, #0
}
 80082b8:	4618      	mov	r0, r3
 80082ba:	3714      	adds	r7, #20
 80082bc:	46bd      	mov	sp, r7
 80082be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082c2:	4770      	bx	lr

080082c4 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80082c4:	b480      	push	{r7}
 80082c6:	b085      	sub	sp, #20
 80082c8:	af00      	add	r7, sp, #0
 80082ca:	6078      	str	r0, [r7, #4]
 80082cc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80082d2:	683b      	ldr	r3, [r7, #0]
 80082d4:	781b      	ldrb	r3, [r3, #0]
 80082d6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80082d8:	683b      	ldr	r3, [r7, #0]
 80082da:	785b      	ldrb	r3, [r3, #1]
 80082dc:	2b01      	cmp	r3, #1
 80082de:	d128      	bne.n	8008332 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80082e0:	68bb      	ldr	r3, [r7, #8]
 80082e2:	015a      	lsls	r2, r3, #5
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	4413      	add	r3, r2
 80082e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	68ba      	ldr	r2, [r7, #8]
 80082f0:	0151      	lsls	r1, r2, #5
 80082f2:	68fa      	ldr	r2, [r7, #12]
 80082f4:	440a      	add	r2, r1
 80082f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80082fa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80082fe:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008300:	683b      	ldr	r3, [r7, #0]
 8008302:	791b      	ldrb	r3, [r3, #4]
 8008304:	2b03      	cmp	r3, #3
 8008306:	d003      	beq.n	8008310 <USB_EPClearStall+0x4c>
 8008308:	683b      	ldr	r3, [r7, #0]
 800830a:	791b      	ldrb	r3, [r3, #4]
 800830c:	2b02      	cmp	r3, #2
 800830e:	d138      	bne.n	8008382 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008310:	68bb      	ldr	r3, [r7, #8]
 8008312:	015a      	lsls	r2, r3, #5
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	4413      	add	r3, r2
 8008318:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	68ba      	ldr	r2, [r7, #8]
 8008320:	0151      	lsls	r1, r2, #5
 8008322:	68fa      	ldr	r2, [r7, #12]
 8008324:	440a      	add	r2, r1
 8008326:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800832a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800832e:	6013      	str	r3, [r2, #0]
 8008330:	e027      	b.n	8008382 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8008332:	68bb      	ldr	r3, [r7, #8]
 8008334:	015a      	lsls	r2, r3, #5
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	4413      	add	r3, r2
 800833a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	68ba      	ldr	r2, [r7, #8]
 8008342:	0151      	lsls	r1, r2, #5
 8008344:	68fa      	ldr	r2, [r7, #12]
 8008346:	440a      	add	r2, r1
 8008348:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800834c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008350:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008352:	683b      	ldr	r3, [r7, #0]
 8008354:	791b      	ldrb	r3, [r3, #4]
 8008356:	2b03      	cmp	r3, #3
 8008358:	d003      	beq.n	8008362 <USB_EPClearStall+0x9e>
 800835a:	683b      	ldr	r3, [r7, #0]
 800835c:	791b      	ldrb	r3, [r3, #4]
 800835e:	2b02      	cmp	r3, #2
 8008360:	d10f      	bne.n	8008382 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008362:	68bb      	ldr	r3, [r7, #8]
 8008364:	015a      	lsls	r2, r3, #5
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	4413      	add	r3, r2
 800836a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	68ba      	ldr	r2, [r7, #8]
 8008372:	0151      	lsls	r1, r2, #5
 8008374:	68fa      	ldr	r2, [r7, #12]
 8008376:	440a      	add	r2, r1
 8008378:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800837c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008380:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8008382:	2300      	movs	r3, #0
}
 8008384:	4618      	mov	r0, r3
 8008386:	3714      	adds	r7, #20
 8008388:	46bd      	mov	sp, r7
 800838a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800838e:	4770      	bx	lr

08008390 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8008390:	b480      	push	{r7}
 8008392:	b085      	sub	sp, #20
 8008394:	af00      	add	r7, sp, #0
 8008396:	6078      	str	r0, [r7, #4]
 8008398:	460b      	mov	r3, r1
 800839a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	68fa      	ldr	r2, [r7, #12]
 80083aa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80083ae:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80083b2:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80083ba:	681a      	ldr	r2, [r3, #0]
 80083bc:	78fb      	ldrb	r3, [r7, #3]
 80083be:	011b      	lsls	r3, r3, #4
 80083c0:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80083c4:	68f9      	ldr	r1, [r7, #12]
 80083c6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80083ca:	4313      	orrs	r3, r2
 80083cc:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80083ce:	2300      	movs	r3, #0
}
 80083d0:	4618      	mov	r0, r3
 80083d2:	3714      	adds	r7, #20
 80083d4:	46bd      	mov	sp, r7
 80083d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083da:	4770      	bx	lr

080083dc <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80083dc:	b480      	push	{r7}
 80083de:	b085      	sub	sp, #20
 80083e0:	af00      	add	r7, sp, #0
 80083e2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	68fa      	ldr	r2, [r7, #12]
 80083f2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80083f6:	f023 0303 	bic.w	r3, r3, #3
 80083fa:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008402:	685b      	ldr	r3, [r3, #4]
 8008404:	68fa      	ldr	r2, [r7, #12]
 8008406:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800840a:	f023 0302 	bic.w	r3, r3, #2
 800840e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008410:	2300      	movs	r3, #0
}
 8008412:	4618      	mov	r0, r3
 8008414:	3714      	adds	r7, #20
 8008416:	46bd      	mov	sp, r7
 8008418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800841c:	4770      	bx	lr

0800841e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800841e:	b480      	push	{r7}
 8008420:	b085      	sub	sp, #20
 8008422:	af00      	add	r7, sp, #0
 8008424:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	68fa      	ldr	r2, [r7, #12]
 8008434:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008438:	f023 0303 	bic.w	r3, r3, #3
 800843c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008444:	685b      	ldr	r3, [r3, #4]
 8008446:	68fa      	ldr	r2, [r7, #12]
 8008448:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800844c:	f043 0302 	orr.w	r3, r3, #2
 8008450:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008452:	2300      	movs	r3, #0
}
 8008454:	4618      	mov	r0, r3
 8008456:	3714      	adds	r7, #20
 8008458:	46bd      	mov	sp, r7
 800845a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800845e:	4770      	bx	lr

08008460 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8008460:	b480      	push	{r7}
 8008462:	b085      	sub	sp, #20
 8008464:	af00      	add	r7, sp, #0
 8008466:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	695b      	ldr	r3, [r3, #20]
 800846c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	699b      	ldr	r3, [r3, #24]
 8008472:	68fa      	ldr	r2, [r7, #12]
 8008474:	4013      	ands	r3, r2
 8008476:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8008478:	68fb      	ldr	r3, [r7, #12]
}
 800847a:	4618      	mov	r0, r3
 800847c:	3714      	adds	r7, #20
 800847e:	46bd      	mov	sp, r7
 8008480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008484:	4770      	bx	lr

08008486 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8008486:	b480      	push	{r7}
 8008488:	b085      	sub	sp, #20
 800848a:	af00      	add	r7, sp, #0
 800848c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008498:	699b      	ldr	r3, [r3, #24]
 800849a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80084a2:	69db      	ldr	r3, [r3, #28]
 80084a4:	68ba      	ldr	r2, [r7, #8]
 80084a6:	4013      	ands	r3, r2
 80084a8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80084aa:	68bb      	ldr	r3, [r7, #8]
 80084ac:	0c1b      	lsrs	r3, r3, #16
}
 80084ae:	4618      	mov	r0, r3
 80084b0:	3714      	adds	r7, #20
 80084b2:	46bd      	mov	sp, r7
 80084b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b8:	4770      	bx	lr

080084ba <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80084ba:	b480      	push	{r7}
 80084bc:	b085      	sub	sp, #20
 80084be:	af00      	add	r7, sp, #0
 80084c0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80084cc:	699b      	ldr	r3, [r3, #24]
 80084ce:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80084d6:	69db      	ldr	r3, [r3, #28]
 80084d8:	68ba      	ldr	r2, [r7, #8]
 80084da:	4013      	ands	r3, r2
 80084dc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80084de:	68bb      	ldr	r3, [r7, #8]
 80084e0:	b29b      	uxth	r3, r3
}
 80084e2:	4618      	mov	r0, r3
 80084e4:	3714      	adds	r7, #20
 80084e6:	46bd      	mov	sp, r7
 80084e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ec:	4770      	bx	lr

080084ee <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80084ee:	b480      	push	{r7}
 80084f0:	b085      	sub	sp, #20
 80084f2:	af00      	add	r7, sp, #0
 80084f4:	6078      	str	r0, [r7, #4]
 80084f6:	460b      	mov	r3, r1
 80084f8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80084fe:	78fb      	ldrb	r3, [r7, #3]
 8008500:	015a      	lsls	r2, r3, #5
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	4413      	add	r3, r2
 8008506:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800850a:	689b      	ldr	r3, [r3, #8]
 800850c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008514:	695b      	ldr	r3, [r3, #20]
 8008516:	68ba      	ldr	r2, [r7, #8]
 8008518:	4013      	ands	r3, r2
 800851a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800851c:	68bb      	ldr	r3, [r7, #8]
}
 800851e:	4618      	mov	r0, r3
 8008520:	3714      	adds	r7, #20
 8008522:	46bd      	mov	sp, r7
 8008524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008528:	4770      	bx	lr

0800852a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800852a:	b480      	push	{r7}
 800852c:	b087      	sub	sp, #28
 800852e:	af00      	add	r7, sp, #0
 8008530:	6078      	str	r0, [r7, #4]
 8008532:	460b      	mov	r3, r1
 8008534:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800853a:	697b      	ldr	r3, [r7, #20]
 800853c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008540:	691b      	ldr	r3, [r3, #16]
 8008542:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8008544:	697b      	ldr	r3, [r7, #20]
 8008546:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800854a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800854c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800854e:	78fb      	ldrb	r3, [r7, #3]
 8008550:	f003 030f 	and.w	r3, r3, #15
 8008554:	68fa      	ldr	r2, [r7, #12]
 8008556:	fa22 f303 	lsr.w	r3, r2, r3
 800855a:	01db      	lsls	r3, r3, #7
 800855c:	b2db      	uxtb	r3, r3
 800855e:	693a      	ldr	r2, [r7, #16]
 8008560:	4313      	orrs	r3, r2
 8008562:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8008564:	78fb      	ldrb	r3, [r7, #3]
 8008566:	015a      	lsls	r2, r3, #5
 8008568:	697b      	ldr	r3, [r7, #20]
 800856a:	4413      	add	r3, r2
 800856c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008570:	689b      	ldr	r3, [r3, #8]
 8008572:	693a      	ldr	r2, [r7, #16]
 8008574:	4013      	ands	r3, r2
 8008576:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008578:	68bb      	ldr	r3, [r7, #8]
}
 800857a:	4618      	mov	r0, r3
 800857c:	371c      	adds	r7, #28
 800857e:	46bd      	mov	sp, r7
 8008580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008584:	4770      	bx	lr

08008586 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8008586:	b480      	push	{r7}
 8008588:	b083      	sub	sp, #12
 800858a:	af00      	add	r7, sp, #0
 800858c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	695b      	ldr	r3, [r3, #20]
 8008592:	f003 0301 	and.w	r3, r3, #1
}
 8008596:	4618      	mov	r0, r3
 8008598:	370c      	adds	r7, #12
 800859a:	46bd      	mov	sp, r7
 800859c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085a0:	4770      	bx	lr

080085a2 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80085a2:	b480      	push	{r7}
 80085a4:	b085      	sub	sp, #20
 80085a6:	af00      	add	r7, sp, #0
 80085a8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	68fa      	ldr	r2, [r7, #12]
 80085b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80085bc:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80085c0:	f023 0307 	bic.w	r3, r3, #7
 80085c4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80085cc:	685b      	ldr	r3, [r3, #4]
 80085ce:	68fa      	ldr	r2, [r7, #12]
 80085d0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80085d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80085d8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80085da:	2300      	movs	r3, #0
}
 80085dc:	4618      	mov	r0, r3
 80085de:	3714      	adds	r7, #20
 80085e0:	46bd      	mov	sp, r7
 80085e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085e6:	4770      	bx	lr

080085e8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80085e8:	b480      	push	{r7}
 80085ea:	b087      	sub	sp, #28
 80085ec:	af00      	add	r7, sp, #0
 80085ee:	60f8      	str	r0, [r7, #12]
 80085f0:	460b      	mov	r3, r1
 80085f2:	607a      	str	r2, [r7, #4]
 80085f4:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	333c      	adds	r3, #60	; 0x3c
 80085fe:	3304      	adds	r3, #4
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8008604:	693b      	ldr	r3, [r7, #16]
 8008606:	4a26      	ldr	r2, [pc, #152]	; (80086a0 <USB_EP0_OutStart+0xb8>)
 8008608:	4293      	cmp	r3, r2
 800860a:	d90a      	bls.n	8008622 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800860c:	697b      	ldr	r3, [r7, #20]
 800860e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008618:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800861c:	d101      	bne.n	8008622 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800861e:	2300      	movs	r3, #0
 8008620:	e037      	b.n	8008692 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8008622:	697b      	ldr	r3, [r7, #20]
 8008624:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008628:	461a      	mov	r2, r3
 800862a:	2300      	movs	r3, #0
 800862c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800862e:	697b      	ldr	r3, [r7, #20]
 8008630:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008634:	691b      	ldr	r3, [r3, #16]
 8008636:	697a      	ldr	r2, [r7, #20]
 8008638:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800863c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008640:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8008642:	697b      	ldr	r3, [r7, #20]
 8008644:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008648:	691b      	ldr	r3, [r3, #16]
 800864a:	697a      	ldr	r2, [r7, #20]
 800864c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008650:	f043 0318 	orr.w	r3, r3, #24
 8008654:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8008656:	697b      	ldr	r3, [r7, #20]
 8008658:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800865c:	691b      	ldr	r3, [r3, #16]
 800865e:	697a      	ldr	r2, [r7, #20]
 8008660:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008664:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8008668:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800866a:	7afb      	ldrb	r3, [r7, #11]
 800866c:	2b01      	cmp	r3, #1
 800866e:	d10f      	bne.n	8008690 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8008670:	697b      	ldr	r3, [r7, #20]
 8008672:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008676:	461a      	mov	r2, r3
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800867c:	697b      	ldr	r3, [r7, #20]
 800867e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	697a      	ldr	r2, [r7, #20]
 8008686:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800868a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800868e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008690:	2300      	movs	r3, #0
}
 8008692:	4618      	mov	r0, r3
 8008694:	371c      	adds	r7, #28
 8008696:	46bd      	mov	sp, r7
 8008698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800869c:	4770      	bx	lr
 800869e:	bf00      	nop
 80086a0:	4f54300a 	.word	0x4f54300a

080086a4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80086a4:	b480      	push	{r7}
 80086a6:	b085      	sub	sp, #20
 80086a8:	af00      	add	r7, sp, #0
 80086aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80086ac:	2300      	movs	r3, #0
 80086ae:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	3301      	adds	r3, #1
 80086b4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	4a13      	ldr	r2, [pc, #76]	; (8008708 <USB_CoreReset+0x64>)
 80086ba:	4293      	cmp	r3, r2
 80086bc:	d901      	bls.n	80086c2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80086be:	2303      	movs	r3, #3
 80086c0:	e01b      	b.n	80086fa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	691b      	ldr	r3, [r3, #16]
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	daf2      	bge.n	80086b0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80086ca:	2300      	movs	r3, #0
 80086cc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	691b      	ldr	r3, [r3, #16]
 80086d2:	f043 0201 	orr.w	r2, r3, #1
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	3301      	adds	r3, #1
 80086de:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	4a09      	ldr	r2, [pc, #36]	; (8008708 <USB_CoreReset+0x64>)
 80086e4:	4293      	cmp	r3, r2
 80086e6:	d901      	bls.n	80086ec <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80086e8:	2303      	movs	r3, #3
 80086ea:	e006      	b.n	80086fa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	691b      	ldr	r3, [r3, #16]
 80086f0:	f003 0301 	and.w	r3, r3, #1
 80086f4:	2b01      	cmp	r3, #1
 80086f6:	d0f0      	beq.n	80086da <USB_CoreReset+0x36>

  return HAL_OK;
 80086f8:	2300      	movs	r3, #0
}
 80086fa:	4618      	mov	r0, r3
 80086fc:	3714      	adds	r7, #20
 80086fe:	46bd      	mov	sp, r7
 8008700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008704:	4770      	bx	lr
 8008706:	bf00      	nop
 8008708:	00030d40 	.word	0x00030d40

0800870c <USBD_MSC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800870c:	b580      	push	{r7, lr}
 800870e:	b084      	sub	sp, #16
 8008710:	af00      	add	r7, sp, #0
 8008712:	6078      	str	r0, [r7, #4]
 8008714:	460b      	mov	r3, r1
 8008716:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_MSC_BOT_HandleTypeDef *hmsc;

  hmsc = (USBD_MSC_BOT_HandleTypeDef *)USBD_malloc(sizeof(USBD_MSC_BOT_HandleTypeDef));
 8008718:	f241 0074 	movw	r0, #4212	; 0x1074
 800871c:	f004 f852 	bl	800c7c4 <USBD_static_malloc>
 8008720:	60f8      	str	r0, [r7, #12]

  if (hmsc == NULL)
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	2b00      	cmp	r3, #0
 8008726:	d109      	bne.n	800873c <USBD_MSC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	32b0      	adds	r2, #176	; 0xb0
 8008732:	2100      	movs	r1, #0
 8008734:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8008738:	2302      	movs	r3, #2
 800873a:	e06e      	b.n	800881a <USBD_MSC_Init+0x10e>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hmsc;
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	32b0      	adds	r2, #176	; 0xb0
 8008746:	68f9      	ldr	r1, [r7, #12]
 8008748:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	32b0      	adds	r2, #176	; 0xb0
 8008756:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	7c1b      	ldrb	r3, [r3, #16]
 8008764:	2b00      	cmp	r3, #0
 8008766:	d12b      	bne.n	80087c0 <USBD_MSC_Init+0xb4>
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSCOutEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 8008768:	4b2e      	ldr	r3, [pc, #184]	; (8008824 <USBD_MSC_Init+0x118>)
 800876a:	7819      	ldrb	r1, [r3, #0]
 800876c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008770:	2202      	movs	r2, #2
 8008772:	6878      	ldr	r0, [r7, #4]
 8008774:	f003 fee4 	bl	800c540 <USBD_LL_OpenEP>
    pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 1U;
 8008778:	4b2a      	ldr	r3, [pc, #168]	; (8008824 <USBD_MSC_Init+0x118>)
 800877a:	781b      	ldrb	r3, [r3, #0]
 800877c:	f003 020f 	and.w	r2, r3, #15
 8008780:	6879      	ldr	r1, [r7, #4]
 8008782:	4613      	mov	r3, r2
 8008784:	009b      	lsls	r3, r3, #2
 8008786:	4413      	add	r3, r2
 8008788:	009b      	lsls	r3, r3, #2
 800878a:	440b      	add	r3, r1
 800878c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008790:	2201      	movs	r2, #1
 8008792:	801a      	strh	r2, [r3, #0]

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSCInEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 8008794:	4b24      	ldr	r3, [pc, #144]	; (8008828 <USBD_MSC_Init+0x11c>)
 8008796:	7819      	ldrb	r1, [r3, #0]
 8008798:	f44f 7300 	mov.w	r3, #512	; 0x200
 800879c:	2202      	movs	r2, #2
 800879e:	6878      	ldr	r0, [r7, #4]
 80087a0:	f003 fece 	bl	800c540 <USBD_LL_OpenEP>
    pdev->ep_in[MSCInEpAdd & 0xFU].is_used = 1U;
 80087a4:	4b20      	ldr	r3, [pc, #128]	; (8008828 <USBD_MSC_Init+0x11c>)
 80087a6:	781b      	ldrb	r3, [r3, #0]
 80087a8:	f003 020f 	and.w	r2, r3, #15
 80087ac:	6879      	ldr	r1, [r7, #4]
 80087ae:	4613      	mov	r3, r2
 80087b0:	009b      	lsls	r3, r3, #2
 80087b2:	4413      	add	r3, r2
 80087b4:	009b      	lsls	r3, r3, #2
 80087b6:	440b      	add	r3, r1
 80087b8:	3324      	adds	r3, #36	; 0x24
 80087ba:	2201      	movs	r2, #1
 80087bc:	801a      	strh	r2, [r3, #0]
 80087be:	e028      	b.n	8008812 <USBD_MSC_Init+0x106>
  }
  else
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSCOutEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 80087c0:	4b18      	ldr	r3, [pc, #96]	; (8008824 <USBD_MSC_Init+0x118>)
 80087c2:	7819      	ldrb	r1, [r3, #0]
 80087c4:	2340      	movs	r3, #64	; 0x40
 80087c6:	2202      	movs	r2, #2
 80087c8:	6878      	ldr	r0, [r7, #4]
 80087ca:	f003 feb9 	bl	800c540 <USBD_LL_OpenEP>
    pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 1U;
 80087ce:	4b15      	ldr	r3, [pc, #84]	; (8008824 <USBD_MSC_Init+0x118>)
 80087d0:	781b      	ldrb	r3, [r3, #0]
 80087d2:	f003 020f 	and.w	r2, r3, #15
 80087d6:	6879      	ldr	r1, [r7, #4]
 80087d8:	4613      	mov	r3, r2
 80087da:	009b      	lsls	r3, r3, #2
 80087dc:	4413      	add	r3, r2
 80087de:	009b      	lsls	r3, r3, #2
 80087e0:	440b      	add	r3, r1
 80087e2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80087e6:	2201      	movs	r2, #1
 80087e8:	801a      	strh	r2, [r3, #0]

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSCInEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 80087ea:	4b0f      	ldr	r3, [pc, #60]	; (8008828 <USBD_MSC_Init+0x11c>)
 80087ec:	7819      	ldrb	r1, [r3, #0]
 80087ee:	2340      	movs	r3, #64	; 0x40
 80087f0:	2202      	movs	r2, #2
 80087f2:	6878      	ldr	r0, [r7, #4]
 80087f4:	f003 fea4 	bl	800c540 <USBD_LL_OpenEP>
    pdev->ep_in[MSCInEpAdd & 0xFU].is_used = 1U;
 80087f8:	4b0b      	ldr	r3, [pc, #44]	; (8008828 <USBD_MSC_Init+0x11c>)
 80087fa:	781b      	ldrb	r3, [r3, #0]
 80087fc:	f003 020f 	and.w	r2, r3, #15
 8008800:	6879      	ldr	r1, [r7, #4]
 8008802:	4613      	mov	r3, r2
 8008804:	009b      	lsls	r3, r3, #2
 8008806:	4413      	add	r3, r2
 8008808:	009b      	lsls	r3, r3, #2
 800880a:	440b      	add	r3, r1
 800880c:	3324      	adds	r3, #36	; 0x24
 800880e:	2201      	movs	r2, #1
 8008810:	801a      	strh	r2, [r3, #0]
  }

  /* Init the BOT  layer */
  MSC_BOT_Init(pdev);
 8008812:	6878      	ldr	r0, [r7, #4]
 8008814:	f000 fa2c 	bl	8008c70 <MSC_BOT_Init>

  return (uint8_t)USBD_OK;
 8008818:	2300      	movs	r3, #0
}
 800881a:	4618      	mov	r0, r3
 800881c:	3710      	adds	r7, #16
 800881e:	46bd      	mov	sp, r7
 8008820:	bd80      	pop	{r7, pc}
 8008822:	bf00      	nop
 8008824:	20000073 	.word	0x20000073
 8008828:	20000072 	.word	0x20000072

0800882c <USBD_MSC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800882c:	b580      	push	{r7, lr}
 800882e:	b082      	sub	sp, #8
 8008830:	af00      	add	r7, sp, #0
 8008832:	6078      	str	r0, [r7, #4]
 8008834:	460b      	mov	r3, r1
 8008836:	70fb      	strb	r3, [r7, #3]
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  /* Close MSC EPs */
  (void)USBD_LL_CloseEP(pdev, MSCOutEpAdd);
 8008838:	4b26      	ldr	r3, [pc, #152]	; (80088d4 <USBD_MSC_DeInit+0xa8>)
 800883a:	781b      	ldrb	r3, [r3, #0]
 800883c:	4619      	mov	r1, r3
 800883e:	6878      	ldr	r0, [r7, #4]
 8008840:	f003 fea4 	bl	800c58c <USBD_LL_CloseEP>
  pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 0U;
 8008844:	4b23      	ldr	r3, [pc, #140]	; (80088d4 <USBD_MSC_DeInit+0xa8>)
 8008846:	781b      	ldrb	r3, [r3, #0]
 8008848:	f003 020f 	and.w	r2, r3, #15
 800884c:	6879      	ldr	r1, [r7, #4]
 800884e:	4613      	mov	r3, r2
 8008850:	009b      	lsls	r3, r3, #2
 8008852:	4413      	add	r3, r2
 8008854:	009b      	lsls	r3, r3, #2
 8008856:	440b      	add	r3, r1
 8008858:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800885c:	2200      	movs	r2, #0
 800885e:	801a      	strh	r2, [r3, #0]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, MSCInEpAdd);
 8008860:	4b1d      	ldr	r3, [pc, #116]	; (80088d8 <USBD_MSC_DeInit+0xac>)
 8008862:	781b      	ldrb	r3, [r3, #0]
 8008864:	4619      	mov	r1, r3
 8008866:	6878      	ldr	r0, [r7, #4]
 8008868:	f003 fe90 	bl	800c58c <USBD_LL_CloseEP>
  pdev->ep_in[MSCInEpAdd & 0xFU].is_used = 0U;
 800886c:	4b1a      	ldr	r3, [pc, #104]	; (80088d8 <USBD_MSC_DeInit+0xac>)
 800886e:	781b      	ldrb	r3, [r3, #0]
 8008870:	f003 020f 	and.w	r2, r3, #15
 8008874:	6879      	ldr	r1, [r7, #4]
 8008876:	4613      	mov	r3, r2
 8008878:	009b      	lsls	r3, r3, #2
 800887a:	4413      	add	r3, r2
 800887c:	009b      	lsls	r3, r3, #2
 800887e:	440b      	add	r3, r1
 8008880:	3324      	adds	r3, #36	; 0x24
 8008882:	2200      	movs	r2, #0
 8008884:	801a      	strh	r2, [r3, #0]

  /* Free MSC Class Resources */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	32b0      	adds	r2, #176	; 0xb0
 8008890:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008894:	2b00      	cmp	r3, #0
 8008896:	d018      	beq.n	80088ca <USBD_MSC_DeInit+0x9e>
  {
    /* De-Init the BOT layer */
    MSC_BOT_DeInit(pdev);
 8008898:	6878      	ldr	r0, [r7, #4]
 800889a:	f000 fa6f 	bl	8008d7c <MSC_BOT_DeInit>

    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	32b0      	adds	r2, #176	; 0xb0
 80088a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80088ac:	4618      	mov	r0, r3
 80088ae:	f003 ff97 	bl	800c7e0 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId]  = NULL;
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	32b0      	adds	r2, #176	; 0xb0
 80088bc:	2100      	movs	r1, #0
 80088be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	2200      	movs	r2, #0
 80088c6:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80088ca:	2300      	movs	r3, #0
}
 80088cc:	4618      	mov	r0, r3
 80088ce:	3708      	adds	r7, #8
 80088d0:	46bd      	mov	sp, r7
 80088d2:	bd80      	pop	{r7, pc}
 80088d4:	20000073 	.word	0x20000073
 80088d8:	20000072 	.word	0x20000072

080088dc <USBD_MSC_Setup>:
  * @param  pdev: device instance
  * @param  req: USB request
  * @retval status
  */
uint8_t USBD_MSC_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80088dc:	b580      	push	{r7, lr}
 80088de:	b086      	sub	sp, #24
 80088e0:	af00      	add	r7, sp, #0
 80088e2:	6078      	str	r0, [r7, #4]
 80088e4:	6039      	str	r1, [r7, #0]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	32b0      	adds	r2, #176	; 0xb0
 80088f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80088f4:	613b      	str	r3, [r7, #16]
  USBD_StatusTypeDef ret = USBD_OK;
 80088f6:	2300      	movs	r3, #0
 80088f8:	75fb      	strb	r3, [r7, #23]
  uint16_t status_info = 0U;
 80088fa:	2300      	movs	r3, #0
 80088fc:	81fb      	strh	r3, [r7, #14]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 80088fe:	693b      	ldr	r3, [r7, #16]
 8008900:	2b00      	cmp	r3, #0
 8008902:	d101      	bne.n	8008908 <USBD_MSC_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 8008904:	2303      	movs	r3, #3
 8008906:	e0e1      	b.n	8008acc <USBD_MSC_Setup+0x1f0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008908:	683b      	ldr	r3, [r7, #0]
 800890a:	781b      	ldrb	r3, [r3, #0]
 800890c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008910:	2b00      	cmp	r3, #0
 8008912:	d053      	beq.n	80089bc <USBD_MSC_Setup+0xe0>
 8008914:	2b20      	cmp	r3, #32
 8008916:	f040 80d1 	bne.w	8008abc <USBD_MSC_Setup+0x1e0>
  {
    /* Class request */
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 800891a:	683b      	ldr	r3, [r7, #0]
 800891c:	785b      	ldrb	r3, [r3, #1]
 800891e:	2bfe      	cmp	r3, #254	; 0xfe
 8008920:	d002      	beq.n	8008928 <USBD_MSC_Setup+0x4c>
 8008922:	2bff      	cmp	r3, #255	; 0xff
 8008924:	d02a      	beq.n	800897c <USBD_MSC_Setup+0xa0>
 8008926:	e041      	b.n	80089ac <USBD_MSC_Setup+0xd0>
      {
        case BOT_GET_MAX_LUN:
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 8008928:	683b      	ldr	r3, [r7, #0]
 800892a:	885b      	ldrh	r3, [r3, #2]
 800892c:	2b00      	cmp	r3, #0
 800892e:	d11e      	bne.n	800896e <USBD_MSC_Setup+0x92>
 8008930:	683b      	ldr	r3, [r7, #0]
 8008932:	88db      	ldrh	r3, [r3, #6]
 8008934:	2b01      	cmp	r3, #1
 8008936:	d11a      	bne.n	800896e <USBD_MSC_Setup+0x92>
              ((req->bmRequest & 0x80U) == 0x80U))
 8008938:	683b      	ldr	r3, [r7, #0]
 800893a:	781b      	ldrb	r3, [r3, #0]
 800893c:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 800893e:	2b00      	cmp	r3, #0
 8008940:	da15      	bge.n	800896e <USBD_MSC_Setup+0x92>
          {
            hmsc->max_lun = (uint32_t)((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetMaxLun();
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008948:	687a      	ldr	r2, [r7, #4]
 800894a:	33b0      	adds	r3, #176	; 0xb0
 800894c:	009b      	lsls	r3, r3, #2
 800894e:	4413      	add	r3, r2
 8008950:	685b      	ldr	r3, [r3, #4]
 8008952:	699b      	ldr	r3, [r3, #24]
 8008954:	4798      	blx	r3
 8008956:	4603      	mov	r3, r0
 8008958:	461a      	mov	r2, r3
 800895a:	693b      	ldr	r3, [r7, #16]
 800895c:	601a      	str	r2, [r3, #0]
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->max_lun, 1U);
 800895e:	693b      	ldr	r3, [r7, #16]
 8008960:	2201      	movs	r2, #1
 8008962:	4619      	mov	r1, r3
 8008964:	6878      	ldr	r0, [r7, #4]
 8008966:	f003 f9f3 	bl	800bd50 <USBD_CtlSendData>
 800896a:	bf00      	nop
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800896c:	e025      	b.n	80089ba <USBD_MSC_Setup+0xde>
            USBD_CtlError(pdev, req);
 800896e:	6839      	ldr	r1, [r7, #0]
 8008970:	6878      	ldr	r0, [r7, #4]
 8008972:	f003 f97c 	bl	800bc6e <USBD_CtlError>
            ret = USBD_FAIL;
 8008976:	2303      	movs	r3, #3
 8008978:	75fb      	strb	r3, [r7, #23]
          break;
 800897a:	e01e      	b.n	80089ba <USBD_MSC_Setup+0xde>

        case BOT_RESET :
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 800897c:	683b      	ldr	r3, [r7, #0]
 800897e:	885b      	ldrh	r3, [r3, #2]
 8008980:	2b00      	cmp	r3, #0
 8008982:	d10c      	bne.n	800899e <USBD_MSC_Setup+0xc2>
 8008984:	683b      	ldr	r3, [r7, #0]
 8008986:	88db      	ldrh	r3, [r3, #6]
 8008988:	2b00      	cmp	r3, #0
 800898a:	d108      	bne.n	800899e <USBD_MSC_Setup+0xc2>
              ((req->bmRequest & 0x80U) != 0x80U))
 800898c:	683b      	ldr	r3, [r7, #0]
 800898e:	781b      	ldrb	r3, [r3, #0]
 8008990:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 8008992:	2b00      	cmp	r3, #0
 8008994:	db03      	blt.n	800899e <USBD_MSC_Setup+0xc2>
          {
            MSC_BOT_Reset(pdev);
 8008996:	6878      	ldr	r0, [r7, #4]
 8008998:	f000 f9bc 	bl	8008d14 <MSC_BOT_Reset>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800899c:	e00d      	b.n	80089ba <USBD_MSC_Setup+0xde>
            USBD_CtlError(pdev, req);
 800899e:	6839      	ldr	r1, [r7, #0]
 80089a0:	6878      	ldr	r0, [r7, #4]
 80089a2:	f003 f964 	bl	800bc6e <USBD_CtlError>
            ret = USBD_FAIL;
 80089a6:	2303      	movs	r3, #3
 80089a8:	75fb      	strb	r3, [r7, #23]
          break;
 80089aa:	e006      	b.n	80089ba <USBD_MSC_Setup+0xde>

        default:
          USBD_CtlError(pdev, req);
 80089ac:	6839      	ldr	r1, [r7, #0]
 80089ae:	6878      	ldr	r0, [r7, #4]
 80089b0:	f003 f95d 	bl	800bc6e <USBD_CtlError>
          ret = USBD_FAIL;
 80089b4:	2303      	movs	r3, #3
 80089b6:	75fb      	strb	r3, [r7, #23]
          break;
 80089b8:	bf00      	nop
      }
      break;
 80089ba:	e086      	b.n	8008aca <USBD_MSC_Setup+0x1ee>
    /* Interface & Endpoint request */
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80089bc:	683b      	ldr	r3, [r7, #0]
 80089be:	785b      	ldrb	r3, [r3, #1]
 80089c0:	2b0b      	cmp	r3, #11
 80089c2:	d872      	bhi.n	8008aaa <USBD_MSC_Setup+0x1ce>
 80089c4:	a201      	add	r2, pc, #4	; (adr r2, 80089cc <USBD_MSC_Setup+0xf0>)
 80089c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089ca:	bf00      	nop
 80089cc:	080089fd 	.word	0x080089fd
 80089d0:	08008a79 	.word	0x08008a79
 80089d4:	08008aab 	.word	0x08008aab
 80089d8:	08008aab 	.word	0x08008aab
 80089dc:	08008aab 	.word	0x08008aab
 80089e0:	08008aab 	.word	0x08008aab
 80089e4:	08008aab 	.word	0x08008aab
 80089e8:	08008aab 	.word	0x08008aab
 80089ec:	08008aab 	.word	0x08008aab
 80089f0:	08008aab 	.word	0x08008aab
 80089f4:	08008a27 	.word	0x08008a27
 80089f8:	08008a51 	.word	0x08008a51
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a02:	b2db      	uxtb	r3, r3
 8008a04:	2b03      	cmp	r3, #3
 8008a06:	d107      	bne.n	8008a18 <USBD_MSC_Setup+0x13c>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8008a08:	f107 030e 	add.w	r3, r7, #14
 8008a0c:	2202      	movs	r2, #2
 8008a0e:	4619      	mov	r1, r3
 8008a10:	6878      	ldr	r0, [r7, #4]
 8008a12:	f003 f99d 	bl	800bd50 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008a16:	e050      	b.n	8008aba <USBD_MSC_Setup+0x1de>
            USBD_CtlError(pdev, req);
 8008a18:	6839      	ldr	r1, [r7, #0]
 8008a1a:	6878      	ldr	r0, [r7, #4]
 8008a1c:	f003 f927 	bl	800bc6e <USBD_CtlError>
            ret = USBD_FAIL;
 8008a20:	2303      	movs	r3, #3
 8008a22:	75fb      	strb	r3, [r7, #23]
          break;
 8008a24:	e049      	b.n	8008aba <USBD_MSC_Setup+0x1de>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a2c:	b2db      	uxtb	r3, r3
 8008a2e:	2b03      	cmp	r3, #3
 8008a30:	d107      	bne.n	8008a42 <USBD_MSC_Setup+0x166>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->interface, 1U);
 8008a32:	693b      	ldr	r3, [r7, #16]
 8008a34:	3304      	adds	r3, #4
 8008a36:	2201      	movs	r2, #1
 8008a38:	4619      	mov	r1, r3
 8008a3a:	6878      	ldr	r0, [r7, #4]
 8008a3c:	f003 f988 	bl	800bd50 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008a40:	e03b      	b.n	8008aba <USBD_MSC_Setup+0x1de>
            USBD_CtlError(pdev, req);
 8008a42:	6839      	ldr	r1, [r7, #0]
 8008a44:	6878      	ldr	r0, [r7, #4]
 8008a46:	f003 f912 	bl	800bc6e <USBD_CtlError>
            ret = USBD_FAIL;
 8008a4a:	2303      	movs	r3, #3
 8008a4c:	75fb      	strb	r3, [r7, #23]
          break;
 8008a4e:	e034      	b.n	8008aba <USBD_MSC_Setup+0x1de>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a56:	b2db      	uxtb	r3, r3
 8008a58:	2b03      	cmp	r3, #3
 8008a5a:	d106      	bne.n	8008a6a <USBD_MSC_Setup+0x18e>
          {
            hmsc->interface = (uint8_t)(req->wValue);
 8008a5c:	683b      	ldr	r3, [r7, #0]
 8008a5e:	885b      	ldrh	r3, [r3, #2]
 8008a60:	b2db      	uxtb	r3, r3
 8008a62:	461a      	mov	r2, r3
 8008a64:	693b      	ldr	r3, [r7, #16]
 8008a66:	605a      	str	r2, [r3, #4]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008a68:	e027      	b.n	8008aba <USBD_MSC_Setup+0x1de>
            USBD_CtlError(pdev, req);
 8008a6a:	6839      	ldr	r1, [r7, #0]
 8008a6c:	6878      	ldr	r0, [r7, #4]
 8008a6e:	f003 f8fe 	bl	800bc6e <USBD_CtlError>
            ret = USBD_FAIL;
 8008a72:	2303      	movs	r3, #3
 8008a74:	75fb      	strb	r3, [r7, #23]
          break;
 8008a76:	e020      	b.n	8008aba <USBD_MSC_Setup+0x1de>

        case USB_REQ_CLEAR_FEATURE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a7e:	b2db      	uxtb	r3, r3
 8008a80:	2b03      	cmp	r3, #3
 8008a82:	d119      	bne.n	8008ab8 <USBD_MSC_Setup+0x1dc>
          {
            if (req->wValue == USB_FEATURE_EP_HALT)
 8008a84:	683b      	ldr	r3, [r7, #0]
 8008a86:	885b      	ldrh	r3, [r3, #2]
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d115      	bne.n	8008ab8 <USBD_MSC_Setup+0x1dc>
            {
              /* Flush the FIFO */
              (void)USBD_LL_FlushEP(pdev, (uint8_t)req->wIndex);
 8008a8c:	683b      	ldr	r3, [r7, #0]
 8008a8e:	889b      	ldrh	r3, [r3, #4]
 8008a90:	b2db      	uxtb	r3, r3
 8008a92:	4619      	mov	r1, r3
 8008a94:	6878      	ldr	r0, [r7, #4]
 8008a96:	f003 fd98 	bl	800c5ca <USBD_LL_FlushEP>

              /* Handle BOT error */
              MSC_BOT_CplClrFeature(pdev, (uint8_t)req->wIndex);
 8008a9a:	683b      	ldr	r3, [r7, #0]
 8008a9c:	889b      	ldrh	r3, [r3, #4]
 8008a9e:	b2db      	uxtb	r3, r3
 8008aa0:	4619      	mov	r1, r3
 8008aa2:	6878      	ldr	r0, [r7, #4]
 8008aa4:	f000 fb54 	bl	8009150 <MSC_BOT_CplClrFeature>
            }
          }
          break;
 8008aa8:	e006      	b.n	8008ab8 <USBD_MSC_Setup+0x1dc>

        default:
          USBD_CtlError(pdev, req);
 8008aaa:	6839      	ldr	r1, [r7, #0]
 8008aac:	6878      	ldr	r0, [r7, #4]
 8008aae:	f003 f8de 	bl	800bc6e <USBD_CtlError>
          ret = USBD_FAIL;
 8008ab2:	2303      	movs	r3, #3
 8008ab4:	75fb      	strb	r3, [r7, #23]
          break;
 8008ab6:	e000      	b.n	8008aba <USBD_MSC_Setup+0x1de>
          break;
 8008ab8:	bf00      	nop
      }
      break;
 8008aba:	e006      	b.n	8008aca <USBD_MSC_Setup+0x1ee>

    default:
      USBD_CtlError(pdev, req);
 8008abc:	6839      	ldr	r1, [r7, #0]
 8008abe:	6878      	ldr	r0, [r7, #4]
 8008ac0:	f003 f8d5 	bl	800bc6e <USBD_CtlError>
      ret = USBD_FAIL;
 8008ac4:	2303      	movs	r3, #3
 8008ac6:	75fb      	strb	r3, [r7, #23]
      break;
 8008ac8:	bf00      	nop
  }

  return (uint8_t)ret;
 8008aca:	7dfb      	ldrb	r3, [r7, #23]
}
 8008acc:	4618      	mov	r0, r3
 8008ace:	3718      	adds	r7, #24
 8008ad0:	46bd      	mov	sp, r7
 8008ad2:	bd80      	pop	{r7, pc}

08008ad4 <USBD_MSC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
uint8_t USBD_MSC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008ad4:	b580      	push	{r7, lr}
 8008ad6:	b082      	sub	sp, #8
 8008ad8:	af00      	add	r7, sp, #0
 8008ada:	6078      	str	r0, [r7, #4]
 8008adc:	460b      	mov	r3, r1
 8008ade:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataIn(pdev, epnum);
 8008ae0:	78fb      	ldrb	r3, [r7, #3]
 8008ae2:	4619      	mov	r1, r3
 8008ae4:	6878      	ldr	r0, [r7, #4]
 8008ae6:	f000 f961 	bl	8008dac <MSC_BOT_DataIn>

  return (uint8_t)USBD_OK;
 8008aea:	2300      	movs	r3, #0
}
 8008aec:	4618      	mov	r0, r3
 8008aee:	3708      	adds	r7, #8
 8008af0:	46bd      	mov	sp, r7
 8008af2:	bd80      	pop	{r7, pc}

08008af4 <USBD_MSC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
uint8_t USBD_MSC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008af4:	b580      	push	{r7, lr}
 8008af6:	b082      	sub	sp, #8
 8008af8:	af00      	add	r7, sp, #0
 8008afa:	6078      	str	r0, [r7, #4]
 8008afc:	460b      	mov	r3, r1
 8008afe:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataOut(pdev, epnum);
 8008b00:	78fb      	ldrb	r3, [r7, #3]
 8008b02:	4619      	mov	r1, r3
 8008b04:	6878      	ldr	r0, [r7, #4]
 8008b06:	f000 f98d 	bl	8008e24 <MSC_BOT_DataOut>

  return (uint8_t)USBD_OK;
 8008b0a:	2300      	movs	r3, #0
}
 8008b0c:	4618      	mov	r0, r3
 8008b0e:	3708      	adds	r7, #8
 8008b10:	46bd      	mov	sp, r7
 8008b12:	bd80      	pop	{r7, pc}

08008b14 <USBD_MSC_GetHSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetHSCfgDesc(uint16_t *length)
{
 8008b14:	b580      	push	{r7, lr}
 8008b16:	b084      	sub	sp, #16
 8008b18:	af00      	add	r7, sp, #0
 8008b1a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPIN_ADDR);
 8008b1c:	2181      	movs	r1, #129	; 0x81
 8008b1e:	4812      	ldr	r0, [pc, #72]	; (8008b68 <USBD_MSC_GetHSCfgDesc+0x54>)
 8008b20:	f002 fa6d 	bl	800affe <USBD_GetEpDesc>
 8008b24:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPOUT_ADDR);
 8008b26:	2101      	movs	r1, #1
 8008b28:	480f      	ldr	r0, [pc, #60]	; (8008b68 <USBD_MSC_GetHSCfgDesc+0x54>)
 8008b2a:	f002 fa68 	bl	800affe <USBD_GetEpDesc>
 8008b2e:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d006      	beq.n	8008b44 <USBD_MSC_GetHSCfgDesc+0x30>
  {
    pEpInDesc->wMaxPacketSize = MSC_MAX_HS_PACKET;
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	2200      	movs	r2, #0
 8008b3a:	711a      	strb	r2, [r3, #4]
 8008b3c:	2200      	movs	r2, #0
 8008b3e:	f042 0202 	orr.w	r2, r2, #2
 8008b42:	715a      	strb	r2, [r3, #5]
  }

  if (pEpOutDesc != NULL)
 8008b44:	68bb      	ldr	r3, [r7, #8]
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d006      	beq.n	8008b58 <USBD_MSC_GetHSCfgDesc+0x44>
  {
    pEpOutDesc->wMaxPacketSize = MSC_MAX_HS_PACKET;
 8008b4a:	68bb      	ldr	r3, [r7, #8]
 8008b4c:	2200      	movs	r2, #0
 8008b4e:	711a      	strb	r2, [r3, #4]
 8008b50:	2200      	movs	r2, #0
 8008b52:	f042 0202 	orr.w	r2, r2, #2
 8008b56:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_MSC_CfgDesc);
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	2220      	movs	r2, #32
 8008b5c:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CfgDesc;
 8008b5e:	4b02      	ldr	r3, [pc, #8]	; (8008b68 <USBD_MSC_GetHSCfgDesc+0x54>)
}
 8008b60:	4618      	mov	r0, r3
 8008b62:	3710      	adds	r7, #16
 8008b64:	46bd      	mov	sp, r7
 8008b66:	bd80      	pop	{r7, pc}
 8008b68:	20000048 	.word	0x20000048

08008b6c <USBD_MSC_GetFSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetFSCfgDesc(uint16_t *length)
{
 8008b6c:	b580      	push	{r7, lr}
 8008b6e:	b084      	sub	sp, #16
 8008b70:	af00      	add	r7, sp, #0
 8008b72:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPIN_ADDR);
 8008b74:	2181      	movs	r1, #129	; 0x81
 8008b76:	4812      	ldr	r0, [pc, #72]	; (8008bc0 <USBD_MSC_GetFSCfgDesc+0x54>)
 8008b78:	f002 fa41 	bl	800affe <USBD_GetEpDesc>
 8008b7c:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPOUT_ADDR);
 8008b7e:	2101      	movs	r1, #1
 8008b80:	480f      	ldr	r0, [pc, #60]	; (8008bc0 <USBD_MSC_GetFSCfgDesc+0x54>)
 8008b82:	f002 fa3c 	bl	800affe <USBD_GetEpDesc>
 8008b86:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d006      	beq.n	8008b9c <USBD_MSC_GetFSCfgDesc+0x30>
  {
    pEpInDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	2200      	movs	r2, #0
 8008b92:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008b96:	711a      	strb	r2, [r3, #4]
 8008b98:	2200      	movs	r2, #0
 8008b9a:	715a      	strb	r2, [r3, #5]
  }

  if (pEpOutDesc != NULL)
 8008b9c:	68bb      	ldr	r3, [r7, #8]
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d006      	beq.n	8008bb0 <USBD_MSC_GetFSCfgDesc+0x44>
  {
    pEpOutDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 8008ba2:	68bb      	ldr	r3, [r7, #8]
 8008ba4:	2200      	movs	r2, #0
 8008ba6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008baa:	711a      	strb	r2, [r3, #4]
 8008bac:	2200      	movs	r2, #0
 8008bae:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_MSC_CfgDesc);
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	2220      	movs	r2, #32
 8008bb4:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CfgDesc;
 8008bb6:	4b02      	ldr	r3, [pc, #8]	; (8008bc0 <USBD_MSC_GetFSCfgDesc+0x54>)
}
 8008bb8:	4618      	mov	r0, r3
 8008bba:	3710      	adds	r7, #16
 8008bbc:	46bd      	mov	sp, r7
 8008bbe:	bd80      	pop	{r7, pc}
 8008bc0:	20000048 	.word	0x20000048

08008bc4 <USBD_MSC_GetOtherSpeedCfgDesc>:
  *         return other speed configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008bc4:	b580      	push	{r7, lr}
 8008bc6:	b084      	sub	sp, #16
 8008bc8:	af00      	add	r7, sp, #0
 8008bca:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPIN_ADDR);
 8008bcc:	2181      	movs	r1, #129	; 0x81
 8008bce:	4812      	ldr	r0, [pc, #72]	; (8008c18 <USBD_MSC_GetOtherSpeedCfgDesc+0x54>)
 8008bd0:	f002 fa15 	bl	800affe <USBD_GetEpDesc>
 8008bd4:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPOUT_ADDR);
 8008bd6:	2101      	movs	r1, #1
 8008bd8:	480f      	ldr	r0, [pc, #60]	; (8008c18 <USBD_MSC_GetOtherSpeedCfgDesc+0x54>)
 8008bda:	f002 fa10 	bl	800affe <USBD_GetEpDesc>
 8008bde:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d006      	beq.n	8008bf4 <USBD_MSC_GetOtherSpeedCfgDesc+0x30>
  {
    pEpInDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	2200      	movs	r2, #0
 8008bea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008bee:	711a      	strb	r2, [r3, #4]
 8008bf0:	2200      	movs	r2, #0
 8008bf2:	715a      	strb	r2, [r3, #5]
  }

  if (pEpOutDesc != NULL)
 8008bf4:	68bb      	ldr	r3, [r7, #8]
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d006      	beq.n	8008c08 <USBD_MSC_GetOtherSpeedCfgDesc+0x44>
  {
    pEpOutDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 8008bfa:	68bb      	ldr	r3, [r7, #8]
 8008bfc:	2200      	movs	r2, #0
 8008bfe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008c02:	711a      	strb	r2, [r3, #4]
 8008c04:	2200      	movs	r2, #0
 8008c06:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_MSC_CfgDesc);
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	2220      	movs	r2, #32
 8008c0c:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CfgDesc;
 8008c0e:	4b02      	ldr	r3, [pc, #8]	; (8008c18 <USBD_MSC_GetOtherSpeedCfgDesc+0x54>)
}
 8008c10:	4618      	mov	r0, r3
 8008c12:	3710      	adds	r7, #16
 8008c14:	46bd      	mov	sp, r7
 8008c16:	bd80      	pop	{r7, pc}
 8008c18:	20000048 	.word	0x20000048

08008c1c <USBD_MSC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8008c1c:	b480      	push	{r7}
 8008c1e:	b083      	sub	sp, #12
 8008c20:	af00      	add	r7, sp, #0
 8008c22:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_DeviceQualifierDesc);
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	220a      	movs	r2, #10
 8008c28:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_DeviceQualifierDesc;
 8008c2a:	4b03      	ldr	r3, [pc, #12]	; (8008c38 <USBD_MSC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008c2c:	4618      	mov	r0, r3
 8008c2e:	370c      	adds	r7, #12
 8008c30:	46bd      	mov	sp, r7
 8008c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c36:	4770      	bx	lr
 8008c38:	20000068 	.word	0x20000068

08008c3c <USBD_MSC_RegisterStorage>:
  * @brief  USBD_MSC_RegisterStorage
  * @param  fops: storage callback
  * @retval status
  */
uint8_t USBD_MSC_RegisterStorage(USBD_HandleTypeDef *pdev, USBD_StorageTypeDef *fops)
{
 8008c3c:	b480      	push	{r7}
 8008c3e:	b083      	sub	sp, #12
 8008c40:	af00      	add	r7, sp, #0
 8008c42:	6078      	str	r0, [r7, #4]
 8008c44:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8008c46:	683b      	ldr	r3, [r7, #0]
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d101      	bne.n	8008c50 <USBD_MSC_RegisterStorage+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8008c4c:	2303      	movs	r3, #3
 8008c4e:	e009      	b.n	8008c64 <USBD_MSC_RegisterStorage+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008c56:	687a      	ldr	r2, [r7, #4]
 8008c58:	33b0      	adds	r3, #176	; 0xb0
 8008c5a:	009b      	lsls	r3, r3, #2
 8008c5c:	4413      	add	r3, r2
 8008c5e:	683a      	ldr	r2, [r7, #0]
 8008c60:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8008c62:	2300      	movs	r3, #0
}
 8008c64:	4618      	mov	r0, r3
 8008c66:	370c      	adds	r7, #12
 8008c68:	46bd      	mov	sp, r7
 8008c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c6e:	4770      	bx	lr

08008c70 <MSC_BOT_Init>:
  *         Initialize the BOT Process
  * @param  pdev: device instance
  * @retval None
  */
void MSC_BOT_Init(USBD_HandleTypeDef *pdev)
{
 8008c70:	b580      	push	{r7, lr}
 8008c72:	b084      	sub	sp, #16
 8008c74:	af00      	add	r7, sp, #0
 8008c76:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	32b0      	adds	r2, #176	; 0xb0
 8008c82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c86:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d039      	beq.n	8008d02 <MSC_BOT_Init+0x92>
  {
    return;
  }

  hmsc->bot_state = USBD_BOT_IDLE;
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	2200      	movs	r2, #0
 8008c92:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	2200      	movs	r2, #0
 8008c98:	725a      	strb	r2, [r3, #9]

  hmsc->scsi_sense_tail = 0U;
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008ca0:	2200      	movs	r2, #0
 8008ca2:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
  hmsc->scsi_sense_head = 0U;
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008cac:	2200      	movs	r2, #0
 8008cae:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
  hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008cb8:	2200      	movs	r2, #0
 8008cba:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62

  ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Init(0U);
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008cc4:	687a      	ldr	r2, [r7, #4]
 8008cc6:	33b0      	adds	r3, #176	; 0xb0
 8008cc8:	009b      	lsls	r3, r3, #2
 8008cca:	4413      	add	r3, r2
 8008ccc:	685b      	ldr	r3, [r3, #4]
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	2000      	movs	r0, #0
 8008cd2:	4798      	blx	r3

  (void)USBD_LL_FlushEP(pdev, MSCOutEpAdd);
 8008cd4:	4b0d      	ldr	r3, [pc, #52]	; (8008d0c <MSC_BOT_Init+0x9c>)
 8008cd6:	781b      	ldrb	r3, [r3, #0]
 8008cd8:	4619      	mov	r1, r3
 8008cda:	6878      	ldr	r0, [r7, #4]
 8008cdc:	f003 fc75 	bl	800c5ca <USBD_LL_FlushEP>
  (void)USBD_LL_FlushEP(pdev, MSCInEpAdd);
 8008ce0:	4b0b      	ldr	r3, [pc, #44]	; (8008d10 <MSC_BOT_Init+0xa0>)
 8008ce2:	781b      	ldrb	r3, [r3, #0]
 8008ce4:	4619      	mov	r1, r3
 8008ce6:	6878      	ldr	r0, [r7, #4]
 8008ce8:	f003 fc6f 	bl	800c5ca <USBD_LL_FlushEP>

  /* Prepare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 8008cec:	4b07      	ldr	r3, [pc, #28]	; (8008d0c <MSC_BOT_Init+0x9c>)
 8008cee:	7819      	ldrb	r1, [r3, #0]
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 8008cf6:	3210      	adds	r2, #16
 8008cf8:	231f      	movs	r3, #31
 8008cfa:	6878      	ldr	r0, [r7, #4]
 8008cfc:	f003 fd2e 	bl	800c75c <USBD_LL_PrepareReceive>
 8008d00:	e000      	b.n	8008d04 <MSC_BOT_Init+0x94>
    return;
 8008d02:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 8008d04:	3710      	adds	r7, #16
 8008d06:	46bd      	mov	sp, r7
 8008d08:	bd80      	pop	{r7, pc}
 8008d0a:	bf00      	nop
 8008d0c:	20000073 	.word	0x20000073
 8008d10:	20000072 	.word	0x20000072

08008d14 <MSC_BOT_Reset>:
  *         Reset the BOT Machine
  * @param  pdev: device instance
  * @retval  None
  */
void MSC_BOT_Reset(USBD_HandleTypeDef *pdev)
{
 8008d14:	b580      	push	{r7, lr}
 8008d16:	b084      	sub	sp, #16
 8008d18:	af00      	add	r7, sp, #0
 8008d1a:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	32b0      	adds	r2, #176	; 0xb0
 8008d26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d2a:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d01c      	beq.n	8008d6c <MSC_BOT_Reset+0x58>
  {
    return;
  }

  hmsc->bot_state  = USBD_BOT_IDLE;
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	2200      	movs	r2, #0
 8008d36:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_RECOVERY;
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	2201      	movs	r2, #1
 8008d3c:	725a      	strb	r2, [r3, #9]

  (void)USBD_LL_ClearStallEP(pdev, MSCInEpAdd);
 8008d3e:	4b0d      	ldr	r3, [pc, #52]	; (8008d74 <MSC_BOT_Reset+0x60>)
 8008d40:	781b      	ldrb	r3, [r3, #0]
 8008d42:	4619      	mov	r1, r3
 8008d44:	6878      	ldr	r0, [r7, #4]
 8008d46:	f003 fc7e 	bl	800c646 <USBD_LL_ClearStallEP>
  (void)USBD_LL_ClearStallEP(pdev, MSCOutEpAdd);
 8008d4a:	4b0b      	ldr	r3, [pc, #44]	; (8008d78 <MSC_BOT_Reset+0x64>)
 8008d4c:	781b      	ldrb	r3, [r3, #0]
 8008d4e:	4619      	mov	r1, r3
 8008d50:	6878      	ldr	r0, [r7, #4]
 8008d52:	f003 fc78 	bl	800c646 <USBD_LL_ClearStallEP>

  /* Prepare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 8008d56:	4b08      	ldr	r3, [pc, #32]	; (8008d78 <MSC_BOT_Reset+0x64>)
 8008d58:	7819      	ldrb	r1, [r3, #0]
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 8008d60:	3210      	adds	r2, #16
 8008d62:	231f      	movs	r3, #31
 8008d64:	6878      	ldr	r0, [r7, #4]
 8008d66:	f003 fcf9 	bl	800c75c <USBD_LL_PrepareReceive>
 8008d6a:	e000      	b.n	8008d6e <MSC_BOT_Reset+0x5a>
    return;
 8008d6c:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 8008d6e:	3710      	adds	r7, #16
 8008d70:	46bd      	mov	sp, r7
 8008d72:	bd80      	pop	{r7, pc}
 8008d74:	20000072 	.word	0x20000072
 8008d78:	20000073 	.word	0x20000073

08008d7c <MSC_BOT_DeInit>:
  *         DeInitialize the BOT Machine
  * @param  pdev: device instance
  * @retval None
  */
void MSC_BOT_DeInit(USBD_HandleTypeDef  *pdev)
{
 8008d7c:	b480      	push	{r7}
 8008d7e:	b085      	sub	sp, #20
 8008d80:	af00      	add	r7, sp, #0
 8008d82:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	32b0      	adds	r2, #176	; 0xb0
 8008d8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d92:	60fb      	str	r3, [r7, #12]

  if (hmsc != NULL)
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d002      	beq.n	8008da0 <MSC_BOT_DeInit+0x24>
  {
    hmsc->bot_state = USBD_BOT_IDLE;
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	2200      	movs	r2, #0
 8008d9e:	721a      	strb	r2, [r3, #8]
  }
}
 8008da0:	bf00      	nop
 8008da2:	3714      	adds	r7, #20
 8008da4:	46bd      	mov	sp, r7
 8008da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008daa:	4770      	bx	lr

08008dac <MSC_BOT_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval None
  */
void MSC_BOT_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008dac:	b580      	push	{r7, lr}
 8008dae:	b084      	sub	sp, #16
 8008db0:	af00      	add	r7, sp, #0
 8008db2:	6078      	str	r0, [r7, #4]
 8008db4:	460b      	mov	r3, r1
 8008db6:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	32b0      	adds	r2, #176	; 0xb0
 8008dc2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008dc6:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d022      	beq.n	8008e14 <MSC_BOT_DataIn+0x68>
  {
    return;
  }

  switch (hmsc->bot_state)
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	7a1b      	ldrb	r3, [r3, #8]
 8008dd2:	2b02      	cmp	r3, #2
 8008dd4:	d005      	beq.n	8008de2 <MSC_BOT_DataIn+0x36>
 8008dd6:	2b02      	cmp	r3, #2
 8008dd8:	db1e      	blt.n	8008e18 <MSC_BOT_DataIn+0x6c>
 8008dda:	3b03      	subs	r3, #3
 8008ddc:	2b01      	cmp	r3, #1
 8008dde:	d81b      	bhi.n	8008e18 <MSC_BOT_DataIn+0x6c>
 8008de0:	e013      	b.n	8008e0a <MSC_BOT_DataIn+0x5e>
  {
    case USBD_BOT_DATA_IN:
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008de8:	7f59      	ldrb	r1, [r3, #29]
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008df0:	331f      	adds	r3, #31
 8008df2:	461a      	mov	r2, r3
 8008df4:	6878      	ldr	r0, [r7, #4]
 8008df6:	f000 f9e5 	bl	80091c4 <SCSI_ProcessCmd>
 8008dfa:	4603      	mov	r3, r0
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	da0d      	bge.n	8008e1c <MSC_BOT_DataIn+0x70>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8008e00:	2101      	movs	r1, #1
 8008e02:	6878      	ldr	r0, [r7, #4]
 8008e04:	f000 f920 	bl	8009048 <MSC_BOT_SendCSW>
      }
      break;
 8008e08:	e008      	b.n	8008e1c <MSC_BOT_DataIn+0x70>

    case USBD_BOT_SEND_DATA:
    case USBD_BOT_LAST_DATA_IN:
      MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8008e0a:	2100      	movs	r1, #0
 8008e0c:	6878      	ldr	r0, [r7, #4]
 8008e0e:	f000 f91b 	bl	8009048 <MSC_BOT_SendCSW>
      break;
 8008e12:	e004      	b.n	8008e1e <MSC_BOT_DataIn+0x72>
    return;
 8008e14:	bf00      	nop
 8008e16:	e002      	b.n	8008e1e <MSC_BOT_DataIn+0x72>

    default:
      break;
 8008e18:	bf00      	nop
 8008e1a:	e000      	b.n	8008e1e <MSC_BOT_DataIn+0x72>
      break;
 8008e1c:	bf00      	nop
  }
}
 8008e1e:	3710      	adds	r7, #16
 8008e20:	46bd      	mov	sp, r7
 8008e22:	bd80      	pop	{r7, pc}

08008e24 <MSC_BOT_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval None
  */
void MSC_BOT_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008e24:	b580      	push	{r7, lr}
 8008e26:	b084      	sub	sp, #16
 8008e28:	af00      	add	r7, sp, #0
 8008e2a:	6078      	str	r0, [r7, #4]
 8008e2c:	460b      	mov	r3, r1
 8008e2e:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	32b0      	adds	r2, #176	; 0xb0
 8008e3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e3e:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d01e      	beq.n	8008e84 <MSC_BOT_DataOut+0x60>
  {
    return;
  }

  switch (hmsc->bot_state)
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	7a1b      	ldrb	r3, [r3, #8]
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d002      	beq.n	8008e54 <MSC_BOT_DataOut+0x30>
 8008e4e:	2b01      	cmp	r3, #1
 8008e50:	d004      	beq.n	8008e5c <MSC_BOT_DataOut+0x38>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
      }
      break;

    default:
      break;
 8008e52:	e01a      	b.n	8008e8a <MSC_BOT_DataOut+0x66>
      MSC_BOT_CBW_Decode(pdev);
 8008e54:	6878      	ldr	r0, [r7, #4]
 8008e56:	f000 f81b 	bl	8008e90 <MSC_BOT_CBW_Decode>
      break;
 8008e5a:	e016      	b.n	8008e8a <MSC_BOT_DataOut+0x66>
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008e62:	7f59      	ldrb	r1, [r3, #29]
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008e6a:	331f      	adds	r3, #31
 8008e6c:	461a      	mov	r2, r3
 8008e6e:	6878      	ldr	r0, [r7, #4]
 8008e70:	f000 f9a8 	bl	80091c4 <SCSI_ProcessCmd>
 8008e74:	4603      	mov	r3, r0
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	da06      	bge.n	8008e88 <MSC_BOT_DataOut+0x64>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8008e7a:	2101      	movs	r1, #1
 8008e7c:	6878      	ldr	r0, [r7, #4]
 8008e7e:	f000 f8e3 	bl	8009048 <MSC_BOT_SendCSW>
      break;
 8008e82:	e001      	b.n	8008e88 <MSC_BOT_DataOut+0x64>
    return;
 8008e84:	bf00      	nop
 8008e86:	e000      	b.n	8008e8a <MSC_BOT_DataOut+0x66>
      break;
 8008e88:	bf00      	nop
  }
}
 8008e8a:	3710      	adds	r7, #16
 8008e8c:	46bd      	mov	sp, r7
 8008e8e:	bd80      	pop	{r7, pc}

08008e90 <MSC_BOT_CBW_Decode>:
  *         Decode the CBW command and set the BOT state machine accordingly
  * @param  pdev: device instance
  * @retval None
  */
static void  MSC_BOT_CBW_Decode(USBD_HandleTypeDef *pdev)
{
 8008e90:	b580      	push	{r7, lr}
 8008e92:	b084      	sub	sp, #16
 8008e94:	af00      	add	r7, sp, #0
 8008e96:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	32b0      	adds	r2, #176	; 0xb0
 8008ea2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ea6:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	f000 8085 	beq.w	8008fba <MSC_BOT_CBW_Decode+0x12a>
  {
    return;
  }

  hmsc->csw.dTag = hmsc->cbw.dTag;
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008eb6:	695b      	ldr	r3, [r3, #20]
 8008eb8:	68fa      	ldr	r2, [r7, #12]
 8008eba:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008ebe:	6353      	str	r3, [r2, #52]	; 0x34
  hmsc->csw.dDataResidue = hmsc->cbw.dDataLength;
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008ec6:	699b      	ldr	r3, [r3, #24]
 8008ec8:	68fa      	ldr	r2, [r7, #12]
 8008eca:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008ece:	6393      	str	r3, [r2, #56]	; 0x38

  if ((USBD_LL_GetRxDataSize(pdev, MSCOutEpAdd) != USBD_BOT_CBW_LENGTH) ||
 8008ed0:	4b3d      	ldr	r3, [pc, #244]	; (8008fc8 <MSC_BOT_CBW_Decode+0x138>)
 8008ed2:	781b      	ldrb	r3, [r3, #0]
 8008ed4:	4619      	mov	r1, r3
 8008ed6:	6878      	ldr	r0, [r7, #4]
 8008ed8:	f003 fc61 	bl	800c79e <USBD_LL_GetRxDataSize>
 8008edc:	4603      	mov	r3, r0
 8008ede:	2b1f      	cmp	r3, #31
 8008ee0:	d118      	bne.n	8008f14 <MSC_BOT_CBW_Decode+0x84>
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008ee8:	691b      	ldr	r3, [r3, #16]
  if ((USBD_LL_GetRxDataSize(pdev, MSCOutEpAdd) != USBD_BOT_CBW_LENGTH) ||
 8008eea:	4a38      	ldr	r2, [pc, #224]	; (8008fcc <MSC_BOT_CBW_Decode+0x13c>)
 8008eec:	4293      	cmp	r3, r2
 8008eee:	d111      	bne.n	8008f14 <MSC_BOT_CBW_Decode+0x84>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008ef6:	7f5b      	ldrb	r3, [r3, #29]
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 8008ef8:	2b01      	cmp	r3, #1
 8008efa:	d80b      	bhi.n	8008f14 <MSC_BOT_CBW_Decode+0x84>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008f02:	7f9b      	ldrb	r3, [r3, #30]
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d005      	beq.n	8008f14 <MSC_BOT_CBW_Decode+0x84>
      (hmsc->cbw.bCBLength > 16U))
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008f0e:	7f9b      	ldrb	r3, [r3, #30]
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 8008f10:	2b10      	cmp	r3, #16
 8008f12:	d90f      	bls.n	8008f34 <MSC_BOT_CBW_Decode+0xa4>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008f1a:	7f59      	ldrb	r1, [r3, #29]
 8008f1c:	2320      	movs	r3, #32
 8008f1e:	2205      	movs	r2, #5
 8008f20:	6878      	ldr	r0, [r7, #4]
 8008f22:	f000 fe79 	bl	8009c18 <SCSI_SenseCode>

    hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	2202      	movs	r2, #2
 8008f2a:	725a      	strb	r2, [r3, #9]
    MSC_BOT_Abort(pdev);
 8008f2c:	6878      	ldr	r0, [r7, #4]
 8008f2e:	f000 f8cb 	bl	80090c8 <MSC_BOT_Abort>
 8008f32:	e045      	b.n	8008fc0 <MSC_BOT_CBW_Decode+0x130>
  }
  else
  {
    if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008f3a:	7f59      	ldrb	r1, [r3, #29]
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008f42:	331f      	adds	r3, #31
 8008f44:	461a      	mov	r2, r3
 8008f46:	6878      	ldr	r0, [r7, #4]
 8008f48:	f000 f93c 	bl	80091c4 <SCSI_ProcessCmd>
 8008f4c:	4603      	mov	r3, r0
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	da0c      	bge.n	8008f6c <MSC_BOT_CBW_Decode+0xdc>
    {
      if (hmsc->bot_state == USBD_BOT_NO_DATA)
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	7a1b      	ldrb	r3, [r3, #8]
 8008f56:	2b05      	cmp	r3, #5
 8008f58:	d104      	bne.n	8008f64 <MSC_BOT_CBW_Decode+0xd4>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8008f5a:	2101      	movs	r1, #1
 8008f5c:	6878      	ldr	r0, [r7, #4]
 8008f5e:	f000 f873 	bl	8009048 <MSC_BOT_SendCSW>
 8008f62:	e02d      	b.n	8008fc0 <MSC_BOT_CBW_Decode+0x130>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 8008f64:	6878      	ldr	r0, [r7, #4]
 8008f66:	f000 f8af 	bl	80090c8 <MSC_BOT_Abort>
 8008f6a:	e029      	b.n	8008fc0 <MSC_BOT_CBW_Decode+0x130>
      }
    }
    /* Burst xfer handled internally */
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	7a1b      	ldrb	r3, [r3, #8]
 8008f70:	2b02      	cmp	r3, #2
 8008f72:	d024      	beq.n	8008fbe <MSC_BOT_CBW_Decode+0x12e>
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	7a1b      	ldrb	r3, [r3, #8]
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 8008f78:	2b01      	cmp	r3, #1
 8008f7a:	d020      	beq.n	8008fbe <MSC_BOT_CBW_Decode+0x12e>
             (hmsc->bot_state != USBD_BOT_LAST_DATA_IN))
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	7a1b      	ldrb	r3, [r3, #8]
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 8008f80:	2b03      	cmp	r3, #3
 8008f82:	d01c      	beq.n	8008fbe <MSC_BOT_CBW_Decode+0x12e>
    {
      if (hmsc->bot_data_length > 0U)
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	68db      	ldr	r3, [r3, #12]
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d009      	beq.n	8008fa0 <MSC_BOT_CBW_Decode+0x110>
      {
        MSC_BOT_SendData(pdev, hmsc->bot_data, hmsc->bot_data_length);
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	f103 0110 	add.w	r1, r3, #16
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	68db      	ldr	r3, [r3, #12]
 8008f96:	461a      	mov	r2, r3
 8008f98:	6878      	ldr	r0, [r7, #4]
 8008f9a:	f000 f819 	bl	8008fd0 <MSC_BOT_SendData>
      if (hmsc->bot_data_length > 0U)
 8008f9e:	e00f      	b.n	8008fc0 <MSC_BOT_CBW_Decode+0x130>
      }
      else if (hmsc->bot_data_length == 0U)
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	68db      	ldr	r3, [r3, #12]
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d104      	bne.n	8008fb2 <MSC_BOT_CBW_Decode+0x122>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8008fa8:	2100      	movs	r1, #0
 8008faa:	6878      	ldr	r0, [r7, #4]
 8008fac:	f000 f84c 	bl	8009048 <MSC_BOT_SendCSW>
      if (hmsc->bot_data_length > 0U)
 8008fb0:	e006      	b.n	8008fc0 <MSC_BOT_CBW_Decode+0x130>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 8008fb2:	6878      	ldr	r0, [r7, #4]
 8008fb4:	f000 f888 	bl	80090c8 <MSC_BOT_Abort>
      if (hmsc->bot_data_length > 0U)
 8008fb8:	e002      	b.n	8008fc0 <MSC_BOT_CBW_Decode+0x130>
    return;
 8008fba:	bf00      	nop
 8008fbc:	e000      	b.n	8008fc0 <MSC_BOT_CBW_Decode+0x130>
      }
    }
    else
    {
      return;
 8008fbe:	bf00      	nop
    }
  }
}
 8008fc0:	3710      	adds	r7, #16
 8008fc2:	46bd      	mov	sp, r7
 8008fc4:	bd80      	pop	{r7, pc}
 8008fc6:	bf00      	nop
 8008fc8:	20000073 	.word	0x20000073
 8008fcc:	43425355 	.word	0x43425355

08008fd0 <MSC_BOT_SendData>:
  * @param  buf: pointer to data buffer
  * @param  len: Data Length
  * @retval None
  */
static void  MSC_BOT_SendData(USBD_HandleTypeDef *pdev, uint8_t *pbuf, uint32_t len)
{
 8008fd0:	b580      	push	{r7, lr}
 8008fd2:	b086      	sub	sp, #24
 8008fd4:	af00      	add	r7, sp, #0
 8008fd6:	60f8      	str	r0, [r7, #12]
 8008fd8:	60b9      	str	r1, [r7, #8]
 8008fda:	607a      	str	r2, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	32b0      	adds	r2, #176	; 0xb0
 8008fe6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008fea:	617b      	str	r3, [r7, #20]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8008fec:	697b      	ldr	r3, [r7, #20]
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d023      	beq.n	800903a <MSC_BOT_SendData+0x6a>
  {
    return;
  }

  length = MIN(hmsc->cbw.dDataLength, len);
 8008ff2:	697b      	ldr	r3, [r7, #20]
 8008ff4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008ff8:	699b      	ldr	r3, [r3, #24]
 8008ffa:	687a      	ldr	r2, [r7, #4]
 8008ffc:	4293      	cmp	r3, r2
 8008ffe:	bf28      	it	cs
 8009000:	4613      	movcs	r3, r2
 8009002:	613b      	str	r3, [r7, #16]

  hmsc->csw.dDataResidue -= len;
 8009004:	697b      	ldr	r3, [r7, #20]
 8009006:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800900a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	1ad3      	subs	r3, r2, r3
 8009010:	697a      	ldr	r2, [r7, #20]
 8009012:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8009016:	6393      	str	r3, [r2, #56]	; 0x38
  hmsc->csw.bStatus = USBD_CSW_CMD_PASSED;
 8009018:	697b      	ldr	r3, [r7, #20]
 800901a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800901e:	2200      	movs	r2, #0
 8009020:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  hmsc->bot_state = USBD_BOT_SEND_DATA;
 8009024:	697b      	ldr	r3, [r7, #20]
 8009026:	2204      	movs	r2, #4
 8009028:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, pbuf, length);
 800902a:	4b06      	ldr	r3, [pc, #24]	; (8009044 <MSC_BOT_SendData+0x74>)
 800902c:	7819      	ldrb	r1, [r3, #0]
 800902e:	693b      	ldr	r3, [r7, #16]
 8009030:	68ba      	ldr	r2, [r7, #8]
 8009032:	68f8      	ldr	r0, [r7, #12]
 8009034:	f003 fb71 	bl	800c71a <USBD_LL_Transmit>
 8009038:	e000      	b.n	800903c <MSC_BOT_SendData+0x6c>
    return;
 800903a:	bf00      	nop
}
 800903c:	3718      	adds	r7, #24
 800903e:	46bd      	mov	sp, r7
 8009040:	bd80      	pop	{r7, pc}
 8009042:	bf00      	nop
 8009044:	20000072 	.word	0x20000072

08009048 <MSC_BOT_SendCSW>:
  * @param  pdev: device instance
  * @param  status : CSW status
  * @retval None
  */
void  MSC_BOT_SendCSW(USBD_HandleTypeDef *pdev, uint8_t CSW_Status)
{
 8009048:	b580      	push	{r7, lr}
 800904a:	b084      	sub	sp, #16
 800904c:	af00      	add	r7, sp, #0
 800904e:	6078      	str	r0, [r7, #4]
 8009050:	460b      	mov	r3, r1
 8009052:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	32b0      	adds	r2, #176	; 0xb0
 800905e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009062:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	2b00      	cmp	r3, #0
 8009068:	d024      	beq.n	80090b4 <MSC_BOT_SendCSW+0x6c>
  {
    return;
  }

  hmsc->csw.dSignature = USBD_BOT_CSW_SIGNATURE;
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009070:	461a      	mov	r2, r3
 8009072:	4b12      	ldr	r3, [pc, #72]	; (80090bc <MSC_BOT_SendCSW+0x74>)
 8009074:	6313      	str	r3, [r2, #48]	; 0x30
  hmsc->csw.bStatus = CSW_Status;
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800907c:	461a      	mov	r2, r3
 800907e:	78fb      	ldrb	r3, [r7, #3]
 8009080:	f882 303c 	strb.w	r3, [r2, #60]	; 0x3c
  hmsc->bot_state = USBD_BOT_IDLE;
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	2200      	movs	r2, #0
 8009088:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, (uint8_t *)&hmsc->csw,
 800908a:	4b0d      	ldr	r3, [pc, #52]	; (80090c0 <MSC_BOT_SendCSW+0x78>)
 800908c:	7819      	ldrb	r1, [r3, #0]
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	f503 5281 	add.w	r2, r3, #4128	; 0x1020
 8009094:	3210      	adds	r2, #16
 8009096:	230d      	movs	r3, #13
 8009098:	6878      	ldr	r0, [r7, #4]
 800909a:	f003 fb3e 	bl	800c71a <USBD_LL_Transmit>
                         USBD_BOT_CSW_LENGTH);

  /* Prepare EP to Receive next Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 800909e:	4b09      	ldr	r3, [pc, #36]	; (80090c4 <MSC_BOT_SendCSW+0x7c>)
 80090a0:	7819      	ldrb	r1, [r3, #0]
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 80090a8:	3210      	adds	r2, #16
 80090aa:	231f      	movs	r3, #31
 80090ac:	6878      	ldr	r0, [r7, #4]
 80090ae:	f003 fb55 	bl	800c75c <USBD_LL_PrepareReceive>
 80090b2:	e000      	b.n	80090b6 <MSC_BOT_SendCSW+0x6e>
    return;
 80090b4:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 80090b6:	3710      	adds	r7, #16
 80090b8:	46bd      	mov	sp, r7
 80090ba:	bd80      	pop	{r7, pc}
 80090bc:	53425355 	.word	0x53425355
 80090c0:	20000072 	.word	0x20000072
 80090c4:	20000073 	.word	0x20000073

080090c8 <MSC_BOT_Abort>:
  * @param  pdev: device instance
  * @retval status
  */

static void  MSC_BOT_Abort(USBD_HandleTypeDef *pdev)
{
 80090c8:	b580      	push	{r7, lr}
 80090ca:	b084      	sub	sp, #16
 80090cc:	af00      	add	r7, sp, #0
 80090ce:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	32b0      	adds	r2, #176	; 0xb0
 80090da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80090de:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d02c      	beq.n	8009140 <MSC_BOT_Abort+0x78>
  {
    return;
  }

  if ((hmsc->cbw.bmFlags == 0U) &&
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80090ec:	7f1b      	ldrb	r3, [r3, #28]
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d10f      	bne.n	8009112 <MSC_BOT_Abort+0x4a>
      (hmsc->cbw.dDataLength != 0U) &&
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80090f8:	699b      	ldr	r3, [r3, #24]
  if ((hmsc->cbw.bmFlags == 0U) &&
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d009      	beq.n	8009112 <MSC_BOT_Abort+0x4a>
      (hmsc->bot_status == USBD_BOT_STATUS_NORMAL))
 80090fe:	68fb      	ldr	r3, [r7, #12]
 8009100:	7a5b      	ldrb	r3, [r3, #9]
      (hmsc->cbw.dDataLength != 0U) &&
 8009102:	2b00      	cmp	r3, #0
 8009104:	d105      	bne.n	8009112 <MSC_BOT_Abort+0x4a>
  {
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 8009106:	4b10      	ldr	r3, [pc, #64]	; (8009148 <MSC_BOT_Abort+0x80>)
 8009108:	781b      	ldrb	r3, [r3, #0]
 800910a:	4619      	mov	r1, r3
 800910c:	6878      	ldr	r0, [r7, #4]
 800910e:	f003 fa7b 	bl	800c608 <USBD_LL_StallEP>
  }

  (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
 8009112:	4b0e      	ldr	r3, [pc, #56]	; (800914c <MSC_BOT_Abort+0x84>)
 8009114:	781b      	ldrb	r3, [r3, #0]
 8009116:	4619      	mov	r1, r3
 8009118:	6878      	ldr	r0, [r7, #4]
 800911a:	f003 fa75 	bl	800c608 <USBD_LL_StallEP>

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR)
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	7a5b      	ldrb	r3, [r3, #9]
 8009122:	2b02      	cmp	r3, #2
 8009124:	d10d      	bne.n	8009142 <MSC_BOT_Abort+0x7a>
  {
    (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
 8009126:	4b09      	ldr	r3, [pc, #36]	; (800914c <MSC_BOT_Abort+0x84>)
 8009128:	781b      	ldrb	r3, [r3, #0]
 800912a:	4619      	mov	r1, r3
 800912c:	6878      	ldr	r0, [r7, #4]
 800912e:	f003 fa6b 	bl	800c608 <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 8009132:	4b05      	ldr	r3, [pc, #20]	; (8009148 <MSC_BOT_Abort+0x80>)
 8009134:	781b      	ldrb	r3, [r3, #0]
 8009136:	4619      	mov	r1, r3
 8009138:	6878      	ldr	r0, [r7, #4]
 800913a:	f003 fa65 	bl	800c608 <USBD_LL_StallEP>
 800913e:	e000      	b.n	8009142 <MSC_BOT_Abort+0x7a>
    return;
 8009140:	bf00      	nop
  }
}
 8009142:	3710      	adds	r7, #16
 8009144:	46bd      	mov	sp, r7
 8009146:	bd80      	pop	{r7, pc}
 8009148:	20000073 	.word	0x20000073
 800914c:	20000072 	.word	0x20000072

08009150 <MSC_BOT_CplClrFeature>:
  * @param  epnum: endpoint index
  * @retval None
  */

void  MSC_BOT_CplClrFeature(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009150:	b580      	push	{r7, lr}
 8009152:	b084      	sub	sp, #16
 8009154:	af00      	add	r7, sp, #0
 8009156:	6078      	str	r0, [r7, #4]
 8009158:	460b      	mov	r3, r1
 800915a:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	32b0      	adds	r2, #176	; 0xb0
 8009166:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800916a:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	2b00      	cmp	r3, #0
 8009170:	d01d      	beq.n	80091ae <MSC_BOT_CplClrFeature+0x5e>
  {
    return;
  }

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR) /* Bad CBW Signature */
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	7a5b      	ldrb	r3, [r3, #9]
 8009176:	2b02      	cmp	r3, #2
 8009178:	d10c      	bne.n	8009194 <MSC_BOT_CplClrFeature+0x44>
  {
    (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
 800917a:	4b10      	ldr	r3, [pc, #64]	; (80091bc <MSC_BOT_CplClrFeature+0x6c>)
 800917c:	781b      	ldrb	r3, [r3, #0]
 800917e:	4619      	mov	r1, r3
 8009180:	6878      	ldr	r0, [r7, #4]
 8009182:	f003 fa41 	bl	800c608 <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 8009186:	4b0e      	ldr	r3, [pc, #56]	; (80091c0 <MSC_BOT_CplClrFeature+0x70>)
 8009188:	781b      	ldrb	r3, [r3, #0]
 800918a:	4619      	mov	r1, r3
 800918c:	6878      	ldr	r0, [r7, #4]
 800918e:	f003 fa3b 	bl	800c608 <USBD_LL_StallEP>
 8009192:	e00f      	b.n	80091b4 <MSC_BOT_CplClrFeature+0x64>
  }
  else if (((epnum & 0x80U) == 0x80U) && (hmsc->bot_status != USBD_BOT_STATUS_RECOVERY))
 8009194:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009198:	2b00      	cmp	r3, #0
 800919a:	da0a      	bge.n	80091b2 <MSC_BOT_CplClrFeature+0x62>
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	7a5b      	ldrb	r3, [r3, #9]
 80091a0:	2b01      	cmp	r3, #1
 80091a2:	d006      	beq.n	80091b2 <MSC_BOT_CplClrFeature+0x62>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 80091a4:	2101      	movs	r1, #1
 80091a6:	6878      	ldr	r0, [r7, #4]
 80091a8:	f7ff ff4e 	bl	8009048 <MSC_BOT_SendCSW>
 80091ac:	e002      	b.n	80091b4 <MSC_BOT_CplClrFeature+0x64>
    return;
 80091ae:	bf00      	nop
 80091b0:	e000      	b.n	80091b4 <MSC_BOT_CplClrFeature+0x64>
  }
  else
  {
    return;
 80091b2:	bf00      	nop
  }
}
 80091b4:	3710      	adds	r7, #16
 80091b6:	46bd      	mov	sp, r7
 80091b8:	bd80      	pop	{r7, pc}
 80091ba:	bf00      	nop
 80091bc:	20000072 	.word	0x20000072
 80091c0:	20000073 	.word	0x20000073

080091c4 <SCSI_ProcessCmd>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
int8_t SCSI_ProcessCmd(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *cmd)
{
 80091c4:	b580      	push	{r7, lr}
 80091c6:	b086      	sub	sp, #24
 80091c8:	af00      	add	r7, sp, #0
 80091ca:	60f8      	str	r0, [r7, #12]
 80091cc:	460b      	mov	r3, r1
 80091ce:	607a      	str	r2, [r7, #4]
 80091d0:	72fb      	strb	r3, [r7, #11]
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	32b0      	adds	r2, #176	; 0xb0
 80091dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80091e0:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 80091e2:	693b      	ldr	r3, [r7, #16]
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d102      	bne.n	80091ee <SCSI_ProcessCmd+0x2a>
  {
    return -1;
 80091e8:	f04f 33ff 	mov.w	r3, #4294967295
 80091ec:	e168      	b.n	80094c0 <SCSI_ProcessCmd+0x2fc>
  }

  switch (cmd[0])
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	781b      	ldrb	r3, [r3, #0]
 80091f2:	2baa      	cmp	r3, #170	; 0xaa
 80091f4:	f000 8144 	beq.w	8009480 <SCSI_ProcessCmd+0x2bc>
 80091f8:	2baa      	cmp	r3, #170	; 0xaa
 80091fa:	f300 8153 	bgt.w	80094a4 <SCSI_ProcessCmd+0x2e0>
 80091fe:	2ba8      	cmp	r3, #168	; 0xa8
 8009200:	f000 812c 	beq.w	800945c <SCSI_ProcessCmd+0x298>
 8009204:	2ba8      	cmp	r3, #168	; 0xa8
 8009206:	f300 814d 	bgt.w	80094a4 <SCSI_ProcessCmd+0x2e0>
 800920a:	2b5a      	cmp	r3, #90	; 0x5a
 800920c:	f300 80c0 	bgt.w	8009390 <SCSI_ProcessCmd+0x1cc>
 8009210:	2b00      	cmp	r3, #0
 8009212:	f2c0 8147 	blt.w	80094a4 <SCSI_ProcessCmd+0x2e0>
 8009216:	2b5a      	cmp	r3, #90	; 0x5a
 8009218:	f200 8144 	bhi.w	80094a4 <SCSI_ProcessCmd+0x2e0>
 800921c:	a201      	add	r2, pc, #4	; (adr r2, 8009224 <SCSI_ProcessCmd+0x60>)
 800921e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009222:	bf00      	nop
 8009224:	08009397 	.word	0x08009397
 8009228:	080094a5 	.word	0x080094a5
 800922c:	080094a5 	.word	0x080094a5
 8009230:	080093a9 	.word	0x080093a9
 8009234:	080094a5 	.word	0x080094a5
 8009238:	080094a5 	.word	0x080094a5
 800923c:	080094a5 	.word	0x080094a5
 8009240:	080094a5 	.word	0x080094a5
 8009244:	080094a5 	.word	0x080094a5
 8009248:	080094a5 	.word	0x080094a5
 800924c:	080094a5 	.word	0x080094a5
 8009250:	080094a5 	.word	0x080094a5
 8009254:	080094a5 	.word	0x080094a5
 8009258:	080094a5 	.word	0x080094a5
 800925c:	080094a5 	.word	0x080094a5
 8009260:	080094a5 	.word	0x080094a5
 8009264:	080094a5 	.word	0x080094a5
 8009268:	080094a5 	.word	0x080094a5
 800926c:	080093bb 	.word	0x080093bb
 8009270:	080094a5 	.word	0x080094a5
 8009274:	080094a5 	.word	0x080094a5
 8009278:	080094a5 	.word	0x080094a5
 800927c:	080094a5 	.word	0x080094a5
 8009280:	080094a5 	.word	0x080094a5
 8009284:	080094a5 	.word	0x080094a5
 8009288:	080094a5 	.word	0x080094a5
 800928c:	080093f1 	.word	0x080093f1
 8009290:	080093cd 	.word	0x080093cd
 8009294:	080094a5 	.word	0x080094a5
 8009298:	080094a5 	.word	0x080094a5
 800929c:	080093df 	.word	0x080093df
 80092a0:	080094a5 	.word	0x080094a5
 80092a4:	080094a5 	.word	0x080094a5
 80092a8:	080094a5 	.word	0x080094a5
 80092ac:	080094a5 	.word	0x080094a5
 80092b0:	08009415 	.word	0x08009415
 80092b4:	080094a5 	.word	0x080094a5
 80092b8:	08009427 	.word	0x08009427
 80092bc:	080094a5 	.word	0x080094a5
 80092c0:	080094a5 	.word	0x080094a5
 80092c4:	0800944b 	.word	0x0800944b
 80092c8:	080094a5 	.word	0x080094a5
 80092cc:	0800946f 	.word	0x0800946f
 80092d0:	080094a5 	.word	0x080094a5
 80092d4:	080094a5 	.word	0x080094a5
 80092d8:	080094a5 	.word	0x080094a5
 80092dc:	080094a5 	.word	0x080094a5
 80092e0:	08009493 	.word	0x08009493
 80092e4:	080094a5 	.word	0x080094a5
 80092e8:	080094a5 	.word	0x080094a5
 80092ec:	080094a5 	.word	0x080094a5
 80092f0:	080094a5 	.word	0x080094a5
 80092f4:	080094a5 	.word	0x080094a5
 80092f8:	080094a5 	.word	0x080094a5
 80092fc:	080094a5 	.word	0x080094a5
 8009300:	080094a5 	.word	0x080094a5
 8009304:	080094a5 	.word	0x080094a5
 8009308:	080094a5 	.word	0x080094a5
 800930c:	080094a5 	.word	0x080094a5
 8009310:	080094a5 	.word	0x080094a5
 8009314:	080094a5 	.word	0x080094a5
 8009318:	080094a5 	.word	0x080094a5
 800931c:	080094a5 	.word	0x080094a5
 8009320:	080094a5 	.word	0x080094a5
 8009324:	080094a5 	.word	0x080094a5
 8009328:	080094a5 	.word	0x080094a5
 800932c:	080094a5 	.word	0x080094a5
 8009330:	080094a5 	.word	0x080094a5
 8009334:	080094a5 	.word	0x080094a5
 8009338:	080094a5 	.word	0x080094a5
 800933c:	080094a5 	.word	0x080094a5
 8009340:	080094a5 	.word	0x080094a5
 8009344:	080094a5 	.word	0x080094a5
 8009348:	080094a5 	.word	0x080094a5
 800934c:	080094a5 	.word	0x080094a5
 8009350:	080094a5 	.word	0x080094a5
 8009354:	080094a5 	.word	0x080094a5
 8009358:	080094a5 	.word	0x080094a5
 800935c:	080094a5 	.word	0x080094a5
 8009360:	080094a5 	.word	0x080094a5
 8009364:	080094a5 	.word	0x080094a5
 8009368:	080094a5 	.word	0x080094a5
 800936c:	080094a5 	.word	0x080094a5
 8009370:	080094a5 	.word	0x080094a5
 8009374:	080094a5 	.word	0x080094a5
 8009378:	080094a5 	.word	0x080094a5
 800937c:	080094a5 	.word	0x080094a5
 8009380:	080094a5 	.word	0x080094a5
 8009384:	080094a5 	.word	0x080094a5
 8009388:	080094a5 	.word	0x080094a5
 800938c:	08009403 	.word	0x08009403
 8009390:	2b9e      	cmp	r3, #158	; 0x9e
 8009392:	d051      	beq.n	8009438 <SCSI_ProcessCmd+0x274>
 8009394:	e086      	b.n	80094a4 <SCSI_ProcessCmd+0x2e0>
  {
    case SCSI_TEST_UNIT_READY:
      ret = SCSI_TestUnitReady(pdev, lun, cmd);
 8009396:	7afb      	ldrb	r3, [r7, #11]
 8009398:	687a      	ldr	r2, [r7, #4]
 800939a:	4619      	mov	r1, r3
 800939c:	68f8      	ldr	r0, [r7, #12]
 800939e:	f000 f893 	bl	80094c8 <SCSI_TestUnitReady>
 80093a2:	4603      	mov	r3, r0
 80093a4:	75fb      	strb	r3, [r7, #23]
      break;
 80093a6:	e089      	b.n	80094bc <SCSI_ProcessCmd+0x2f8>

    case SCSI_REQUEST_SENSE:
      ret = SCSI_RequestSense(pdev, lun, cmd);
 80093a8:	7afb      	ldrb	r3, [r7, #11]
 80093aa:	687a      	ldr	r2, [r7, #4]
 80093ac:	4619      	mov	r1, r3
 80093ae:	68f8      	ldr	r0, [r7, #12]
 80093b0:	f000 fb98 	bl	8009ae4 <SCSI_RequestSense>
 80093b4:	4603      	mov	r3, r0
 80093b6:	75fb      	strb	r3, [r7, #23]
      break;
 80093b8:	e080      	b.n	80094bc <SCSI_ProcessCmd+0x2f8>

    case SCSI_INQUIRY:
      ret = SCSI_Inquiry(pdev, lun, cmd);
 80093ba:	7afb      	ldrb	r3, [r7, #11]
 80093bc:	687a      	ldr	r2, [r7, #4]
 80093be:	4619      	mov	r1, r3
 80093c0:	68f8      	ldr	r0, [r7, #12]
 80093c2:	f000 f8df 	bl	8009584 <SCSI_Inquiry>
 80093c6:	4603      	mov	r3, r0
 80093c8:	75fb      	strb	r3, [r7, #23]
      break;
 80093ca:	e077      	b.n	80094bc <SCSI_ProcessCmd+0x2f8>

    case SCSI_START_STOP_UNIT:
      ret = SCSI_StartStopUnit(pdev, lun, cmd);
 80093cc:	7afb      	ldrb	r3, [r7, #11]
 80093ce:	687a      	ldr	r2, [r7, #4]
 80093d0:	4619      	mov	r1, r3
 80093d2:	68f8      	ldr	r0, [r7, #12]
 80093d4:	f000 fc7c 	bl	8009cd0 <SCSI_StartStopUnit>
 80093d8:	4603      	mov	r3, r0
 80093da:	75fb      	strb	r3, [r7, #23]
      break;
 80093dc:	e06e      	b.n	80094bc <SCSI_ProcessCmd+0x2f8>

    case SCSI_ALLOW_MEDIUM_REMOVAL:
      ret = SCSI_AllowPreventRemovable(pdev, lun, cmd);
 80093de:	7afb      	ldrb	r3, [r7, #11]
 80093e0:	687a      	ldr	r2, [r7, #4]
 80093e2:	4619      	mov	r1, r3
 80093e4:	68f8      	ldr	r0, [r7, #12]
 80093e6:	f000 fcd0 	bl	8009d8a <SCSI_AllowPreventRemovable>
 80093ea:	4603      	mov	r3, r0
 80093ec:	75fb      	strb	r3, [r7, #23]
      break;
 80093ee:	e065      	b.n	80094bc <SCSI_ProcessCmd+0x2f8>

    case SCSI_MODE_SENSE6:
      ret = SCSI_ModeSense6(pdev, lun, cmd);
 80093f0:	7afb      	ldrb	r3, [r7, #11]
 80093f2:	687a      	ldr	r2, [r7, #4]
 80093f4:	4619      	mov	r1, r3
 80093f6:	68f8      	ldr	r0, [r7, #12]
 80093f8:	f000 fb14 	bl	8009a24 <SCSI_ModeSense6>
 80093fc:	4603      	mov	r3, r0
 80093fe:	75fb      	strb	r3, [r7, #23]
      break;
 8009400:	e05c      	b.n	80094bc <SCSI_ProcessCmd+0x2f8>

    case SCSI_MODE_SENSE10:
      ret = SCSI_ModeSense10(pdev, lun, cmd);
 8009402:	7afb      	ldrb	r3, [r7, #11]
 8009404:	687a      	ldr	r2, [r7, #4]
 8009406:	4619      	mov	r1, r3
 8009408:	68f8      	ldr	r0, [r7, #12]
 800940a:	f000 fb3b 	bl	8009a84 <SCSI_ModeSense10>
 800940e:	4603      	mov	r3, r0
 8009410:	75fb      	strb	r3, [r7, #23]
      break;
 8009412:	e053      	b.n	80094bc <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ_FORMAT_CAPACITIES:
      ret = SCSI_ReadFormatCapacity(pdev, lun, cmd);
 8009414:	7afb      	ldrb	r3, [r7, #11]
 8009416:	687a      	ldr	r2, [r7, #4]
 8009418:	4619      	mov	r1, r3
 800941a:	68f8      	ldr	r0, [r7, #12]
 800941c:	f000 fa85 	bl	800992a <SCSI_ReadFormatCapacity>
 8009420:	4603      	mov	r3, r0
 8009422:	75fb      	strb	r3, [r7, #23]
      break;
 8009424:	e04a      	b.n	80094bc <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ_CAPACITY10:
      ret = SCSI_ReadCapacity10(pdev, lun, cmd);
 8009426:	7afb      	ldrb	r3, [r7, #11]
 8009428:	687a      	ldr	r2, [r7, #4]
 800942a:	4619      	mov	r1, r3
 800942c:	68f8      	ldr	r0, [r7, #12]
 800942e:	f000 f929 	bl	8009684 <SCSI_ReadCapacity10>
 8009432:	4603      	mov	r3, r0
 8009434:	75fb      	strb	r3, [r7, #23]
      break;
 8009436:	e041      	b.n	80094bc <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ_CAPACITY16:
      ret = SCSI_ReadCapacity16(pdev, lun, cmd);
 8009438:	7afb      	ldrb	r3, [r7, #11]
 800943a:	687a      	ldr	r2, [r7, #4]
 800943c:	4619      	mov	r1, r3
 800943e:	68f8      	ldr	r0, [r7, #12]
 8009440:	f000 f9af 	bl	80097a2 <SCSI_ReadCapacity16>
 8009444:	4603      	mov	r3, r0
 8009446:	75fb      	strb	r3, [r7, #23]
      break;
 8009448:	e038      	b.n	80094bc <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ10:
      ret = SCSI_Read10(pdev, lun, cmd);
 800944a:	7afb      	ldrb	r3, [r7, #11]
 800944c:	687a      	ldr	r2, [r7, #4]
 800944e:	4619      	mov	r1, r3
 8009450:	68f8      	ldr	r0, [r7, #12]
 8009452:	f000 fccb 	bl	8009dec <SCSI_Read10>
 8009456:	4603      	mov	r3, r0
 8009458:	75fb      	strb	r3, [r7, #23]
      break;
 800945a:	e02f      	b.n	80094bc <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ12:
      ret = SCSI_Read12(pdev, lun, cmd);
 800945c:	7afb      	ldrb	r3, [r7, #11]
 800945e:	687a      	ldr	r2, [r7, #4]
 8009460:	4619      	mov	r1, r3
 8009462:	68f8      	ldr	r0, [r7, #12]
 8009464:	f000 fd79 	bl	8009f5a <SCSI_Read12>
 8009468:	4603      	mov	r3, r0
 800946a:	75fb      	strb	r3, [r7, #23]
      break;
 800946c:	e026      	b.n	80094bc <SCSI_ProcessCmd+0x2f8>

    case SCSI_WRITE10:
      ret = SCSI_Write10(pdev, lun, cmd);
 800946e:	7afb      	ldrb	r3, [r7, #11]
 8009470:	687a      	ldr	r2, [r7, #4]
 8009472:	4619      	mov	r1, r3
 8009474:	68f8      	ldr	r0, [r7, #12]
 8009476:	f000 fe31 	bl	800a0dc <SCSI_Write10>
 800947a:	4603      	mov	r3, r0
 800947c:	75fb      	strb	r3, [r7, #23]
      break;
 800947e:	e01d      	b.n	80094bc <SCSI_ProcessCmd+0x2f8>

    case SCSI_WRITE12:
      ret = SCSI_Write12(pdev, lun, cmd);
 8009480:	7afb      	ldrb	r3, [r7, #11]
 8009482:	687a      	ldr	r2, [r7, #4]
 8009484:	4619      	mov	r1, r3
 8009486:	68f8      	ldr	r0, [r7, #12]
 8009488:	f000 ff0c 	bl	800a2a4 <SCSI_Write12>
 800948c:	4603      	mov	r3, r0
 800948e:	75fb      	strb	r3, [r7, #23]
      break;
 8009490:	e014      	b.n	80094bc <SCSI_ProcessCmd+0x2f8>

    case SCSI_VERIFY10:
      ret = SCSI_Verify10(pdev, lun, cmd);
 8009492:	7afb      	ldrb	r3, [r7, #11]
 8009494:	687a      	ldr	r2, [r7, #4]
 8009496:	4619      	mov	r1, r3
 8009498:	68f8      	ldr	r0, [r7, #12]
 800949a:	f000 fff7 	bl	800a48c <SCSI_Verify10>
 800949e:	4603      	mov	r3, r0
 80094a0:	75fb      	strb	r3, [r7, #23]
      break;
 80094a2:	e00b      	b.n	80094bc <SCSI_ProcessCmd+0x2f8>

    default:
      SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_CDB);
 80094a4:	7af9      	ldrb	r1, [r7, #11]
 80094a6:	2320      	movs	r3, #32
 80094a8:	2205      	movs	r2, #5
 80094aa:	68f8      	ldr	r0, [r7, #12]
 80094ac:	f000 fbb4 	bl	8009c18 <SCSI_SenseCode>
      hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 80094b0:	693b      	ldr	r3, [r7, #16]
 80094b2:	2202      	movs	r2, #2
 80094b4:	725a      	strb	r2, [r3, #9]
      ret = -1;
 80094b6:	23ff      	movs	r3, #255	; 0xff
 80094b8:	75fb      	strb	r3, [r7, #23]
      break;
 80094ba:	bf00      	nop
  }

  return ret;
 80094bc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80094c0:	4618      	mov	r0, r3
 80094c2:	3718      	adds	r7, #24
 80094c4:	46bd      	mov	sp, r7
 80094c6:	bd80      	pop	{r7, pc}

080094c8 <SCSI_TestUnitReady>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_TestUnitReady(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80094c8:	b580      	push	{r7, lr}
 80094ca:	b086      	sub	sp, #24
 80094cc:	af00      	add	r7, sp, #0
 80094ce:	60f8      	str	r0, [r7, #12]
 80094d0:	460b      	mov	r3, r1
 80094d2:	607a      	str	r2, [r7, #4]
 80094d4:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	32b0      	adds	r2, #176	; 0xb0
 80094e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80094e4:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 80094e6:	697b      	ldr	r3, [r7, #20]
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d102      	bne.n	80094f2 <SCSI_TestUnitReady+0x2a>
  {
    return -1;
 80094ec:	f04f 33ff 	mov.w	r3, #4294967295
 80094f0:	e043      	b.n	800957a <SCSI_TestUnitReady+0xb2>
  }

  /* case 9 : Hi > D0 */
  if (hmsc->cbw.dDataLength != 0U)
 80094f2:	697b      	ldr	r3, [r7, #20]
 80094f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80094f8:	699b      	ldr	r3, [r3, #24]
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d00b      	beq.n	8009516 <SCSI_TestUnitReady+0x4e>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80094fe:	697b      	ldr	r3, [r7, #20]
 8009500:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009504:	7f59      	ldrb	r1, [r3, #29]
 8009506:	2320      	movs	r3, #32
 8009508:	2205      	movs	r2, #5
 800950a:	68f8      	ldr	r0, [r7, #12]
 800950c:	f000 fb84 	bl	8009c18 <SCSI_SenseCode>

    return -1;
 8009510:	f04f 33ff 	mov.w	r3, #4294967295
 8009514:	e031      	b.n	800957a <SCSI_TestUnitReady+0xb2>
  }

  if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 8009516:	697b      	ldr	r3, [r7, #20]
 8009518:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800951c:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8009520:	2b02      	cmp	r3, #2
 8009522:	d10b      	bne.n	800953c <SCSI_TestUnitReady+0x74>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8009524:	7af9      	ldrb	r1, [r7, #11]
 8009526:	233a      	movs	r3, #58	; 0x3a
 8009528:	2202      	movs	r2, #2
 800952a:	68f8      	ldr	r0, [r7, #12]
 800952c:	f000 fb74 	bl	8009c18 <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 8009530:	697b      	ldr	r3, [r7, #20]
 8009532:	2205      	movs	r2, #5
 8009534:	721a      	strb	r2, [r3, #8]
    return -1;
 8009536:	f04f 33ff 	mov.w	r3, #4294967295
 800953a:	e01e      	b.n	800957a <SCSI_TestUnitReady+0xb2>
  }

  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009542:	68fa      	ldr	r2, [r7, #12]
 8009544:	33b0      	adds	r3, #176	; 0xb0
 8009546:	009b      	lsls	r3, r3, #2
 8009548:	4413      	add	r3, r2
 800954a:	685b      	ldr	r3, [r3, #4]
 800954c:	689b      	ldr	r3, [r3, #8]
 800954e:	7afa      	ldrb	r2, [r7, #11]
 8009550:	4610      	mov	r0, r2
 8009552:	4798      	blx	r3
 8009554:	4603      	mov	r3, r0
 8009556:	2b00      	cmp	r3, #0
 8009558:	d00b      	beq.n	8009572 <SCSI_TestUnitReady+0xaa>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800955a:	7af9      	ldrb	r1, [r7, #11]
 800955c:	233a      	movs	r3, #58	; 0x3a
 800955e:	2202      	movs	r2, #2
 8009560:	68f8      	ldr	r0, [r7, #12]
 8009562:	f000 fb59 	bl	8009c18 <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 8009566:	697b      	ldr	r3, [r7, #20]
 8009568:	2205      	movs	r2, #5
 800956a:	721a      	strb	r2, [r3, #8]

    return -1;
 800956c:	f04f 33ff 	mov.w	r3, #4294967295
 8009570:	e003      	b.n	800957a <SCSI_TestUnitReady+0xb2>
  }
  hmsc->bot_data_length = 0U;
 8009572:	697b      	ldr	r3, [r7, #20]
 8009574:	2200      	movs	r2, #0
 8009576:	60da      	str	r2, [r3, #12]

  return 0;
 8009578:	2300      	movs	r3, #0
}
 800957a:	4618      	mov	r0, r3
 800957c:	3718      	adds	r7, #24
 800957e:	46bd      	mov	sp, r7
 8009580:	bd80      	pop	{r7, pc}
	...

08009584 <SCSI_Inquiry>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Inquiry(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8009584:	b580      	push	{r7, lr}
 8009586:	b088      	sub	sp, #32
 8009588:	af00      	add	r7, sp, #0
 800958a:	60f8      	str	r0, [r7, #12]
 800958c:	460b      	mov	r3, r1
 800958e:	607a      	str	r2, [r7, #4]
 8009590:	72fb      	strb	r3, [r7, #11]
  uint8_t *pPage;
  uint16_t len;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	32b0      	adds	r2, #176	; 0xb0
 800959c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80095a0:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 80095a2:	69bb      	ldr	r3, [r7, #24]
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d102      	bne.n	80095ae <SCSI_Inquiry+0x2a>
  {
    return -1;
 80095a8:	f04f 33ff 	mov.w	r3, #4294967295
 80095ac:	e062      	b.n	8009674 <SCSI_Inquiry+0xf0>
  }

  if (hmsc->cbw.dDataLength == 0U)
 80095ae:	69bb      	ldr	r3, [r7, #24]
 80095b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80095b4:	699b      	ldr	r3, [r3, #24]
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	d10b      	bne.n	80095d2 <SCSI_Inquiry+0x4e>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80095ba:	69bb      	ldr	r3, [r7, #24]
 80095bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80095c0:	7f59      	ldrb	r1, [r3, #29]
 80095c2:	2320      	movs	r3, #32
 80095c4:	2205      	movs	r2, #5
 80095c6:	68f8      	ldr	r0, [r7, #12]
 80095c8:	f000 fb26 	bl	8009c18 <SCSI_SenseCode>
    return -1;
 80095cc:	f04f 33ff 	mov.w	r3, #4294967295
 80095d0:	e050      	b.n	8009674 <SCSI_Inquiry+0xf0>
  }

  if ((params[1] & 0x01U) != 0U) /* Evpd is set */
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	3301      	adds	r3, #1
 80095d6:	781b      	ldrb	r3, [r3, #0]
 80095d8:	f003 0301 	and.w	r3, r3, #1
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d021      	beq.n	8009624 <SCSI_Inquiry+0xa0>
  {
    if (params[2] == 0U) /* Request for Supported Vital Product Data Pages*/
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	3302      	adds	r3, #2
 80095e4:	781b      	ldrb	r3, [r3, #0]
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d105      	bne.n	80095f6 <SCSI_Inquiry+0x72>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page00_Inquiry_Data, LENGTH_INQUIRY_PAGE00);
 80095ea:	2206      	movs	r2, #6
 80095ec:	4923      	ldr	r1, [pc, #140]	; (800967c <SCSI_Inquiry+0xf8>)
 80095ee:	69b8      	ldr	r0, [r7, #24]
 80095f0:	f001 f8f8 	bl	800a7e4 <SCSI_UpdateBotData>
 80095f4:	e03d      	b.n	8009672 <SCSI_Inquiry+0xee>
    }
    else if (params[2] == 0x80U) /* Request for VPD page 0x80 Unit Serial Number */
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	3302      	adds	r3, #2
 80095fa:	781b      	ldrb	r3, [r3, #0]
 80095fc:	2b80      	cmp	r3, #128	; 0x80
 80095fe:	d105      	bne.n	800960c <SCSI_Inquiry+0x88>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page80_Inquiry_Data, LENGTH_INQUIRY_PAGE80);
 8009600:	2208      	movs	r2, #8
 8009602:	491f      	ldr	r1, [pc, #124]	; (8009680 <SCSI_Inquiry+0xfc>)
 8009604:	69b8      	ldr	r0, [r7, #24]
 8009606:	f001 f8ed 	bl	800a7e4 <SCSI_UpdateBotData>
 800960a:	e032      	b.n	8009672 <SCSI_Inquiry+0xee>
    }
    else /* Request Not supported */
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST,
 800960c:	69bb      	ldr	r3, [r7, #24]
 800960e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009612:	7f59      	ldrb	r1, [r3, #29]
 8009614:	2324      	movs	r3, #36	; 0x24
 8009616:	2205      	movs	r2, #5
 8009618:	68f8      	ldr	r0, [r7, #12]
 800961a:	f000 fafd 	bl	8009c18 <SCSI_SenseCode>
                     INVALID_FIELED_IN_COMMAND);

      return -1;
 800961e:	f04f 33ff 	mov.w	r3, #4294967295
 8009622:	e027      	b.n	8009674 <SCSI_Inquiry+0xf0>
    }
  }
  else
  {

    pPage = (uint8_t *) & ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->pInquiry[lun * STANDARD_INQUIRY_DATA_LEN];
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800962a:	68fa      	ldr	r2, [r7, #12]
 800962c:	33b0      	adds	r3, #176	; 0xb0
 800962e:	009b      	lsls	r3, r3, #2
 8009630:	4413      	add	r3, r2
 8009632:	685b      	ldr	r3, [r3, #4]
 8009634:	69d9      	ldr	r1, [r3, #28]
 8009636:	7afa      	ldrb	r2, [r7, #11]
 8009638:	4613      	mov	r3, r2
 800963a:	00db      	lsls	r3, r3, #3
 800963c:	4413      	add	r3, r2
 800963e:	009b      	lsls	r3, r3, #2
 8009640:	440b      	add	r3, r1
 8009642:	617b      	str	r3, [r7, #20]
    len = (uint16_t)pPage[4] + 5U;
 8009644:	697b      	ldr	r3, [r7, #20]
 8009646:	3304      	adds	r3, #4
 8009648:	781b      	ldrb	r3, [r3, #0]
 800964a:	b29b      	uxth	r3, r3
 800964c:	3305      	adds	r3, #5
 800964e:	83fb      	strh	r3, [r7, #30]

    if (params[4] <= len)
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	3304      	adds	r3, #4
 8009654:	781b      	ldrb	r3, [r3, #0]
 8009656:	b29b      	uxth	r3, r3
 8009658:	8bfa      	ldrh	r2, [r7, #30]
 800965a:	429a      	cmp	r2, r3
 800965c:	d303      	bcc.n	8009666 <SCSI_Inquiry+0xe2>
    {
      len = params[4];
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	3304      	adds	r3, #4
 8009662:	781b      	ldrb	r3, [r3, #0]
 8009664:	83fb      	strh	r3, [r7, #30]
    }

    (void)SCSI_UpdateBotData(hmsc, pPage, len);
 8009666:	8bfb      	ldrh	r3, [r7, #30]
 8009668:	461a      	mov	r2, r3
 800966a:	6979      	ldr	r1, [r7, #20]
 800966c:	69b8      	ldr	r0, [r7, #24]
 800966e:	f001 f8b9 	bl	800a7e4 <SCSI_UpdateBotData>
  }

  return 0;
 8009672:	2300      	movs	r3, #0
}
 8009674:	4618      	mov	r0, r3
 8009676:	3720      	adds	r7, #32
 8009678:	46bd      	mov	sp, r7
 800967a:	bd80      	pop	{r7, pc}
 800967c:	20000074 	.word	0x20000074
 8009680:	2000007c 	.word	0x2000007c

08009684 <SCSI_ReadCapacity10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadCapacity10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8009684:	b590      	push	{r4, r7, lr}
 8009686:	b087      	sub	sp, #28
 8009688:	af00      	add	r7, sp, #0
 800968a:	60f8      	str	r0, [r7, #12]
 800968c:	460b      	mov	r3, r1
 800968e:	607a      	str	r2, [r7, #4]
 8009690:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	32b0      	adds	r2, #176	; 0xb0
 800969c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80096a0:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 80096a2:	697b      	ldr	r3, [r7, #20]
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d102      	bne.n	80096ae <SCSI_ReadCapacity10+0x2a>
  {
    return -1;
 80096a8:	f04f 33ff 	mov.w	r3, #4294967295
 80096ac:	e075      	b.n	800979a <SCSI_ReadCapacity10+0x116>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size);
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80096b4:	68fa      	ldr	r2, [r7, #12]
 80096b6:	33b0      	adds	r3, #176	; 0xb0
 80096b8:	009b      	lsls	r3, r3, #2
 80096ba:	4413      	add	r3, r2
 80096bc:	685b      	ldr	r3, [r3, #4]
 80096be:	685c      	ldr	r4, [r3, #4]
 80096c0:	697b      	ldr	r3, [r7, #20]
 80096c2:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 80096c6:	3308      	adds	r3, #8
 80096c8:	697a      	ldr	r2, [r7, #20]
 80096ca:	f502 5283 	add.w	r2, r2, #4192	; 0x1060
 80096ce:	3204      	adds	r2, #4
 80096d0:	7af8      	ldrb	r0, [r7, #11]
 80096d2:	4619      	mov	r1, r3
 80096d4:	47a0      	blx	r4
 80096d6:	4603      	mov	r3, r0
 80096d8:	74fb      	strb	r3, [r7, #19]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 80096da:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d106      	bne.n	80096f0 <SCSI_ReadCapacity10+0x6c>
 80096e2:	697b      	ldr	r3, [r7, #20]
 80096e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80096e8:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 80096ec:	2b02      	cmp	r3, #2
 80096ee:	d108      	bne.n	8009702 <SCSI_ReadCapacity10+0x7e>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80096f0:	7af9      	ldrb	r1, [r7, #11]
 80096f2:	233a      	movs	r3, #58	; 0x3a
 80096f4:	2202      	movs	r2, #2
 80096f6:	68f8      	ldr	r0, [r7, #12]
 80096f8:	f000 fa8e 	bl	8009c18 <SCSI_SenseCode>
    return -1;
 80096fc:	f04f 33ff 	mov.w	r3, #4294967295
 8009700:	e04b      	b.n	800979a <SCSI_ReadCapacity10+0x116>
  }

  hmsc->bot_data[0] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 8009702:	697b      	ldr	r3, [r7, #20]
 8009704:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009708:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800970a:	3b01      	subs	r3, #1
 800970c:	0e1b      	lsrs	r3, r3, #24
 800970e:	b2da      	uxtb	r2, r3
 8009710:	697b      	ldr	r3, [r7, #20]
 8009712:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[1] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 8009714:	697b      	ldr	r3, [r7, #20]
 8009716:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800971a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800971c:	3b01      	subs	r3, #1
 800971e:	0c1b      	lsrs	r3, r3, #16
 8009720:	b2da      	uxtb	r2, r3
 8009722:	697b      	ldr	r3, [r7, #20]
 8009724:	745a      	strb	r2, [r3, #17]
  hmsc->bot_data[2] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 8009726:	697b      	ldr	r3, [r7, #20]
 8009728:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800972c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800972e:	3b01      	subs	r3, #1
 8009730:	0a1b      	lsrs	r3, r3, #8
 8009732:	b2da      	uxtb	r2, r3
 8009734:	697b      	ldr	r3, [r7, #20]
 8009736:	749a      	strb	r2, [r3, #18]
  hmsc->bot_data[3] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 8009738:	697b      	ldr	r3, [r7, #20]
 800973a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800973e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009740:	b2db      	uxtb	r3, r3
 8009742:	3b01      	subs	r3, #1
 8009744:	b2da      	uxtb	r2, r3
 8009746:	697b      	ldr	r3, [r7, #20]
 8009748:	74da      	strb	r2, [r3, #19]

  hmsc->bot_data[4] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 800974a:	697b      	ldr	r3, [r7, #20]
 800974c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009750:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8009754:	161b      	asrs	r3, r3, #24
 8009756:	b2da      	uxtb	r2, r3
 8009758:	697b      	ldr	r3, [r7, #20]
 800975a:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 800975c:	697b      	ldr	r3, [r7, #20]
 800975e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009762:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8009766:	141b      	asrs	r3, r3, #16
 8009768:	b2da      	uxtb	r2, r3
 800976a:	697b      	ldr	r3, [r7, #20]
 800976c:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 800976e:	697b      	ldr	r3, [r7, #20]
 8009770:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009774:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8009778:	0a1b      	lsrs	r3, r3, #8
 800977a:	b29b      	uxth	r3, r3
 800977c:	b2da      	uxtb	r2, r3
 800977e:	697b      	ldr	r3, [r7, #20]
 8009780:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_size);
 8009782:	697b      	ldr	r3, [r7, #20]
 8009784:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009788:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800978c:	b2da      	uxtb	r2, r3
 800978e:	697b      	ldr	r3, [r7, #20]
 8009790:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data_length = 8U;
 8009792:	697b      	ldr	r3, [r7, #20]
 8009794:	2208      	movs	r2, #8
 8009796:	60da      	str	r2, [r3, #12]

  return 0;
 8009798:	2300      	movs	r3, #0

}
 800979a:	4618      	mov	r0, r3
 800979c:	371c      	adds	r7, #28
 800979e:	46bd      	mov	sp, r7
 80097a0:	bd90      	pop	{r4, r7, pc}

080097a2 <SCSI_ReadCapacity16>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadCapacity16(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80097a2:	b590      	push	{r4, r7, lr}
 80097a4:	b089      	sub	sp, #36	; 0x24
 80097a6:	af00      	add	r7, sp, #0
 80097a8:	60f8      	str	r0, [r7, #12]
 80097aa:	460b      	mov	r3, r1
 80097ac:	607a      	str	r2, [r7, #4]
 80097ae:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint8_t idx;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	32b0      	adds	r2, #176	; 0xb0
 80097ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80097be:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 80097c0:	69bb      	ldr	r3, [r7, #24]
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d102      	bne.n	80097cc <SCSI_ReadCapacity16+0x2a>
  {
    return -1;
 80097c6:	f04f 33ff 	mov.w	r3, #4294967295
 80097ca:	e0aa      	b.n	8009922 <SCSI_ReadCapacity16+0x180>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size);
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80097d2:	68fa      	ldr	r2, [r7, #12]
 80097d4:	33b0      	adds	r3, #176	; 0xb0
 80097d6:	009b      	lsls	r3, r3, #2
 80097d8:	4413      	add	r3, r2
 80097da:	685b      	ldr	r3, [r3, #4]
 80097dc:	685c      	ldr	r4, [r3, #4]
 80097de:	69bb      	ldr	r3, [r7, #24]
 80097e0:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 80097e4:	3308      	adds	r3, #8
 80097e6:	69ba      	ldr	r2, [r7, #24]
 80097e8:	f502 5283 	add.w	r2, r2, #4192	; 0x1060
 80097ec:	3204      	adds	r2, #4
 80097ee:	7af8      	ldrb	r0, [r7, #11]
 80097f0:	4619      	mov	r1, r3
 80097f2:	47a0      	blx	r4
 80097f4:	4603      	mov	r3, r0
 80097f6:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 80097f8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	d106      	bne.n	800980e <SCSI_ReadCapacity16+0x6c>
 8009800:	69bb      	ldr	r3, [r7, #24]
 8009802:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009806:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 800980a:	2b02      	cmp	r3, #2
 800980c:	d108      	bne.n	8009820 <SCSI_ReadCapacity16+0x7e>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800980e:	7af9      	ldrb	r1, [r7, #11]
 8009810:	233a      	movs	r3, #58	; 0x3a
 8009812:	2202      	movs	r2, #2
 8009814:	68f8      	ldr	r0, [r7, #12]
 8009816:	f000 f9ff 	bl	8009c18 <SCSI_SenseCode>
    return -1;
 800981a:	f04f 33ff 	mov.w	r3, #4294967295
 800981e:	e080      	b.n	8009922 <SCSI_ReadCapacity16+0x180>
  }

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	330a      	adds	r3, #10
 8009824:	781b      	ldrb	r3, [r3, #0]
 8009826:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	330b      	adds	r3, #11
 800982c:	781b      	ldrb	r3, [r3, #0]
 800982e:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8009830:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	330c      	adds	r3, #12
 8009836:	781b      	ldrb	r3, [r3, #0]
 8009838:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 800983a:	4313      	orrs	r3, r2
                          (uint32_t)params[13];
 800983c:	687a      	ldr	r2, [r7, #4]
 800983e:	320d      	adds	r2, #13
 8009840:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 8009842:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8009844:	69bb      	ldr	r3, [r7, #24]
 8009846:	60da      	str	r2, [r3, #12]

  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 8009848:	2300      	movs	r3, #0
 800984a:	77fb      	strb	r3, [r7, #31]
 800984c:	e007      	b.n	800985e <SCSI_ReadCapacity16+0xbc>
  {
    hmsc->bot_data[idx] = 0U;
 800984e:	7ffb      	ldrb	r3, [r7, #31]
 8009850:	69ba      	ldr	r2, [r7, #24]
 8009852:	4413      	add	r3, r2
 8009854:	2200      	movs	r2, #0
 8009856:	741a      	strb	r2, [r3, #16]
  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 8009858:	7ffb      	ldrb	r3, [r7, #31]
 800985a:	3301      	adds	r3, #1
 800985c:	77fb      	strb	r3, [r7, #31]
 800985e:	7ffa      	ldrb	r2, [r7, #31]
 8009860:	69bb      	ldr	r3, [r7, #24]
 8009862:	68db      	ldr	r3, [r3, #12]
 8009864:	429a      	cmp	r2, r3
 8009866:	d3f2      	bcc.n	800984e <SCSI_ReadCapacity16+0xac>
  }

  hmsc->bot_data[4] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 8009868:	69bb      	ldr	r3, [r7, #24]
 800986a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800986e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009870:	3b01      	subs	r3, #1
 8009872:	0e1b      	lsrs	r3, r3, #24
 8009874:	b2da      	uxtb	r2, r3
 8009876:	69bb      	ldr	r3, [r7, #24]
 8009878:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 800987a:	69bb      	ldr	r3, [r7, #24]
 800987c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009880:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009882:	3b01      	subs	r3, #1
 8009884:	0c1b      	lsrs	r3, r3, #16
 8009886:	b2da      	uxtb	r2, r3
 8009888:	69bb      	ldr	r3, [r7, #24]
 800988a:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 800988c:	69bb      	ldr	r3, [r7, #24]
 800988e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009892:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009894:	3b01      	subs	r3, #1
 8009896:	0a1b      	lsrs	r3, r3, #8
 8009898:	b2da      	uxtb	r2, r3
 800989a:	69bb      	ldr	r3, [r7, #24]
 800989c:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 800989e:	69bb      	ldr	r3, [r7, #24]
 80098a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80098a4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80098a6:	b2db      	uxtb	r3, r3
 80098a8:	3b01      	subs	r3, #1
 80098aa:	b2da      	uxtb	r2, r3
 80098ac:	69bb      	ldr	r3, [r7, #24]
 80098ae:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 80098b0:	69bb      	ldr	r3, [r7, #24]
 80098b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80098b6:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80098ba:	161b      	asrs	r3, r3, #24
 80098bc:	b2da      	uxtb	r2, r3
 80098be:	69bb      	ldr	r3, [r7, #24]
 80098c0:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 80098c2:	69bb      	ldr	r3, [r7, #24]
 80098c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80098c8:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80098cc:	141b      	asrs	r3, r3, #16
 80098ce:	b2da      	uxtb	r2, r3
 80098d0:	69bb      	ldr	r3, [r7, #24]
 80098d2:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 80098d4:	69bb      	ldr	r3, [r7, #24]
 80098d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80098da:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80098de:	0a1b      	lsrs	r3, r3, #8
 80098e0:	b29b      	uxth	r3, r3
 80098e2:	b2da      	uxtb	r2, r3
 80098e4:	69bb      	ldr	r3, [r7, #24]
 80098e6:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(hmsc->scsi_blk_size);
 80098e8:	69bb      	ldr	r3, [r7, #24]
 80098ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80098ee:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80098f2:	b2da      	uxtb	r2, r3
 80098f4:	69bb      	ldr	r3, [r7, #24]
 80098f6:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	330a      	adds	r3, #10
 80098fc:	781b      	ldrb	r3, [r3, #0]
 80098fe:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	330b      	adds	r3, #11
 8009904:	781b      	ldrb	r3, [r3, #0]
 8009906:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8009908:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	330c      	adds	r3, #12
 800990e:	781b      	ldrb	r3, [r3, #0]
 8009910:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 8009912:	4313      	orrs	r3, r2
                          (uint32_t)params[13];
 8009914:	687a      	ldr	r2, [r7, #4]
 8009916:	320d      	adds	r2, #13
 8009918:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 800991a:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800991c:	69bb      	ldr	r3, [r7, #24]
 800991e:	60da      	str	r2, [r3, #12]

  return 0;
 8009920:	2300      	movs	r3, #0
}
 8009922:	4618      	mov	r0, r3
 8009924:	3724      	adds	r7, #36	; 0x24
 8009926:	46bd      	mov	sp, r7
 8009928:	bd90      	pop	{r4, r7, pc}

0800992a <SCSI_ReadFormatCapacity>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadFormatCapacity(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800992a:	b580      	push	{r7, lr}
 800992c:	b088      	sub	sp, #32
 800992e:	af00      	add	r7, sp, #0
 8009930:	60f8      	str	r0, [r7, #12]
 8009932:	460b      	mov	r3, r1
 8009934:	607a      	str	r2, [r7, #4]
 8009936:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint16_t blk_size;
  uint32_t blk_nbr;
  uint16_t i;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	32b0      	adds	r2, #176	; 0xb0
 8009942:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009946:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 8009948:	69bb      	ldr	r3, [r7, #24]
 800994a:	2b00      	cmp	r3, #0
 800994c:	d102      	bne.n	8009954 <SCSI_ReadFormatCapacity+0x2a>
  {
    return -1;
 800994e:	f04f 33ff 	mov.w	r3, #4294967295
 8009952:	e063      	b.n	8009a1c <SCSI_ReadFormatCapacity+0xf2>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetCapacity(lun, &blk_nbr, &blk_size);
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800995a:	68fa      	ldr	r2, [r7, #12]
 800995c:	33b0      	adds	r3, #176	; 0xb0
 800995e:	009b      	lsls	r3, r3, #2
 8009960:	4413      	add	r3, r2
 8009962:	685b      	ldr	r3, [r3, #4]
 8009964:	685b      	ldr	r3, [r3, #4]
 8009966:	f107 0214 	add.w	r2, r7, #20
 800996a:	f107 0110 	add.w	r1, r7, #16
 800996e:	7af8      	ldrb	r0, [r7, #11]
 8009970:	4798      	blx	r3
 8009972:	4603      	mov	r3, r0
 8009974:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 8009976:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800997a:	2b00      	cmp	r3, #0
 800997c:	d106      	bne.n	800998c <SCSI_ReadFormatCapacity+0x62>
 800997e:	69bb      	ldr	r3, [r7, #24]
 8009980:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009984:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8009988:	2b02      	cmp	r3, #2
 800998a:	d108      	bne.n	800999e <SCSI_ReadFormatCapacity+0x74>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800998c:	7af9      	ldrb	r1, [r7, #11]
 800998e:	233a      	movs	r3, #58	; 0x3a
 8009990:	2202      	movs	r2, #2
 8009992:	68f8      	ldr	r0, [r7, #12]
 8009994:	f000 f940 	bl	8009c18 <SCSI_SenseCode>
    return -1;
 8009998:	f04f 33ff 	mov.w	r3, #4294967295
 800999c:	e03e      	b.n	8009a1c <SCSI_ReadFormatCapacity+0xf2>
  }

  for (i = 0U; i < 12U ; i++)
 800999e:	2300      	movs	r3, #0
 80099a0:	83fb      	strh	r3, [r7, #30]
 80099a2:	e007      	b.n	80099b4 <SCSI_ReadFormatCapacity+0x8a>
  {
    hmsc->bot_data[i] = 0U;
 80099a4:	8bfb      	ldrh	r3, [r7, #30]
 80099a6:	69ba      	ldr	r2, [r7, #24]
 80099a8:	4413      	add	r3, r2
 80099aa:	2200      	movs	r2, #0
 80099ac:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < 12U ; i++)
 80099ae:	8bfb      	ldrh	r3, [r7, #30]
 80099b0:	3301      	adds	r3, #1
 80099b2:	83fb      	strh	r3, [r7, #30]
 80099b4:	8bfb      	ldrh	r3, [r7, #30]
 80099b6:	2b0b      	cmp	r3, #11
 80099b8:	d9f4      	bls.n	80099a4 <SCSI_ReadFormatCapacity+0x7a>
  }

  hmsc->bot_data[3] = 0x08U;
 80099ba:	69bb      	ldr	r3, [r7, #24]
 80099bc:	2208      	movs	r2, #8
 80099be:	74da      	strb	r2, [r3, #19]
  hmsc->bot_data[4] = (uint8_t)((blk_nbr - 1U) >> 24);
 80099c0:	693b      	ldr	r3, [r7, #16]
 80099c2:	3b01      	subs	r3, #1
 80099c4:	0e1b      	lsrs	r3, r3, #24
 80099c6:	b2da      	uxtb	r2, r3
 80099c8:	69bb      	ldr	r3, [r7, #24]
 80099ca:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((blk_nbr - 1U) >> 16);
 80099cc:	693b      	ldr	r3, [r7, #16]
 80099ce:	3b01      	subs	r3, #1
 80099d0:	0c1b      	lsrs	r3, r3, #16
 80099d2:	b2da      	uxtb	r2, r3
 80099d4:	69bb      	ldr	r3, [r7, #24]
 80099d6:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((blk_nbr - 1U) >>  8);
 80099d8:	693b      	ldr	r3, [r7, #16]
 80099da:	3b01      	subs	r3, #1
 80099dc:	0a1b      	lsrs	r3, r3, #8
 80099de:	b2da      	uxtb	r2, r3
 80099e0:	69bb      	ldr	r3, [r7, #24]
 80099e2:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(blk_nbr - 1U);
 80099e4:	693b      	ldr	r3, [r7, #16]
 80099e6:	b2db      	uxtb	r3, r3
 80099e8:	3b01      	subs	r3, #1
 80099ea:	b2da      	uxtb	r2, r3
 80099ec:	69bb      	ldr	r3, [r7, #24]
 80099ee:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = 0x02U;
 80099f0:	69bb      	ldr	r3, [r7, #24]
 80099f2:	2202      	movs	r2, #2
 80099f4:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(blk_size >>  16);
 80099f6:	8abb      	ldrh	r3, [r7, #20]
 80099f8:	141b      	asrs	r3, r3, #16
 80099fa:	b2da      	uxtb	r2, r3
 80099fc:	69bb      	ldr	r3, [r7, #24]
 80099fe:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(blk_size >>  8);
 8009a00:	8abb      	ldrh	r3, [r7, #20]
 8009a02:	0a1b      	lsrs	r3, r3, #8
 8009a04:	b29b      	uxth	r3, r3
 8009a06:	b2da      	uxtb	r2, r3
 8009a08:	69bb      	ldr	r3, [r7, #24]
 8009a0a:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(blk_size);
 8009a0c:	8abb      	ldrh	r3, [r7, #20]
 8009a0e:	b2da      	uxtb	r2, r3
 8009a10:	69bb      	ldr	r3, [r7, #24]
 8009a12:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = 12U;
 8009a14:	69bb      	ldr	r3, [r7, #24]
 8009a16:	220c      	movs	r2, #12
 8009a18:	60da      	str	r2, [r3, #12]

  return 0;
 8009a1a:	2300      	movs	r3, #0
}
 8009a1c:	4618      	mov	r0, r3
 8009a1e:	3720      	adds	r7, #32
 8009a20:	46bd      	mov	sp, r7
 8009a22:	bd80      	pop	{r7, pc}

08009a24 <SCSI_ModeSense6>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ModeSense6(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8009a24:	b580      	push	{r7, lr}
 8009a26:	b086      	sub	sp, #24
 8009a28:	af00      	add	r7, sp, #0
 8009a2a:	60f8      	str	r0, [r7, #12]
 8009a2c:	460b      	mov	r3, r1
 8009a2e:	607a      	str	r2, [r7, #4]
 8009a30:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009a32:	68fb      	ldr	r3, [r7, #12]
 8009a34:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	32b0      	adds	r2, #176	; 0xb0
 8009a3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a40:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE6_LEN;
 8009a42:	2317      	movs	r3, #23
 8009a44:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 8009a46:	693b      	ldr	r3, [r7, #16]
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	d102      	bne.n	8009a52 <SCSI_ModeSense6+0x2e>
  {
    return -1;
 8009a4c:	f04f 33ff 	mov.w	r3, #4294967295
 8009a50:	e011      	b.n	8009a76 <SCSI_ModeSense6+0x52>
  }

  if (params[4] <= len)
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	3304      	adds	r3, #4
 8009a56:	781b      	ldrb	r3, [r3, #0]
 8009a58:	b29b      	uxth	r3, r3
 8009a5a:	8afa      	ldrh	r2, [r7, #22]
 8009a5c:	429a      	cmp	r2, r3
 8009a5e:	d303      	bcc.n	8009a68 <SCSI_ModeSense6+0x44>
  {
    len = params[4];
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	3304      	adds	r3, #4
 8009a64:	781b      	ldrb	r3, [r3, #0]
 8009a66:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense6_data, len);
 8009a68:	8afb      	ldrh	r3, [r7, #22]
 8009a6a:	461a      	mov	r2, r3
 8009a6c:	4904      	ldr	r1, [pc, #16]	; (8009a80 <SCSI_ModeSense6+0x5c>)
 8009a6e:	6938      	ldr	r0, [r7, #16]
 8009a70:	f000 feb8 	bl	800a7e4 <SCSI_UpdateBotData>

  return 0;
 8009a74:	2300      	movs	r3, #0
}
 8009a76:	4618      	mov	r0, r3
 8009a78:	3718      	adds	r7, #24
 8009a7a:	46bd      	mov	sp, r7
 8009a7c:	bd80      	pop	{r7, pc}
 8009a7e:	bf00      	nop
 8009a80:	20000084 	.word	0x20000084

08009a84 <SCSI_ModeSense10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ModeSense10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8009a84:	b580      	push	{r7, lr}
 8009a86:	b086      	sub	sp, #24
 8009a88:	af00      	add	r7, sp, #0
 8009a8a:	60f8      	str	r0, [r7, #12]
 8009a8c:	460b      	mov	r3, r1
 8009a8e:	607a      	str	r2, [r7, #4]
 8009a90:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009a92:	68fb      	ldr	r3, [r7, #12]
 8009a94:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009a98:	68fb      	ldr	r3, [r7, #12]
 8009a9a:	32b0      	adds	r2, #176	; 0xb0
 8009a9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009aa0:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE10_LEN;
 8009aa2:	231b      	movs	r3, #27
 8009aa4:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 8009aa6:	693b      	ldr	r3, [r7, #16]
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d102      	bne.n	8009ab2 <SCSI_ModeSense10+0x2e>
  {
    return -1;
 8009aac:	f04f 33ff 	mov.w	r3, #4294967295
 8009ab0:	e011      	b.n	8009ad6 <SCSI_ModeSense10+0x52>
  }

  if (params[8] <= len)
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	3308      	adds	r3, #8
 8009ab6:	781b      	ldrb	r3, [r3, #0]
 8009ab8:	b29b      	uxth	r3, r3
 8009aba:	8afa      	ldrh	r2, [r7, #22]
 8009abc:	429a      	cmp	r2, r3
 8009abe:	d303      	bcc.n	8009ac8 <SCSI_ModeSense10+0x44>
  {
    len = params[8];
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	3308      	adds	r3, #8
 8009ac4:	781b      	ldrb	r3, [r3, #0]
 8009ac6:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense10_data, len);
 8009ac8:	8afb      	ldrh	r3, [r7, #22]
 8009aca:	461a      	mov	r2, r3
 8009acc:	4904      	ldr	r1, [pc, #16]	; (8009ae0 <SCSI_ModeSense10+0x5c>)
 8009ace:	6938      	ldr	r0, [r7, #16]
 8009ad0:	f000 fe88 	bl	800a7e4 <SCSI_UpdateBotData>

  return 0;
 8009ad4:	2300      	movs	r3, #0
}
 8009ad6:	4618      	mov	r0, r3
 8009ad8:	3718      	adds	r7, #24
 8009ada:	46bd      	mov	sp, r7
 8009adc:	bd80      	pop	{r7, pc}
 8009ade:	bf00      	nop
 8009ae0:	2000009c 	.word	0x2000009c

08009ae4 <SCSI_RequestSense>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_RequestSense(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8009ae4:	b580      	push	{r7, lr}
 8009ae6:	b086      	sub	sp, #24
 8009ae8:	af00      	add	r7, sp, #0
 8009aea:	60f8      	str	r0, [r7, #12]
 8009aec:	460b      	mov	r3, r1
 8009aee:	607a      	str	r2, [r7, #4]
 8009af0:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  uint8_t i;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009af8:	68fb      	ldr	r3, [r7, #12]
 8009afa:	32b0      	adds	r2, #176	; 0xb0
 8009afc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b00:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 8009b02:	693b      	ldr	r3, [r7, #16]
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	d102      	bne.n	8009b0e <SCSI_RequestSense+0x2a>
  {
    return -1;
 8009b08:	f04f 33ff 	mov.w	r3, #4294967295
 8009b0c:	e080      	b.n	8009c10 <SCSI_RequestSense+0x12c>
  }

  if (hmsc->cbw.dDataLength == 0U)
 8009b0e:	693b      	ldr	r3, [r7, #16]
 8009b10:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009b14:	699b      	ldr	r3, [r3, #24]
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	d10b      	bne.n	8009b32 <SCSI_RequestSense+0x4e>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8009b1a:	693b      	ldr	r3, [r7, #16]
 8009b1c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009b20:	7f59      	ldrb	r1, [r3, #29]
 8009b22:	2320      	movs	r3, #32
 8009b24:	2205      	movs	r2, #5
 8009b26:	68f8      	ldr	r0, [r7, #12]
 8009b28:	f000 f876 	bl	8009c18 <SCSI_SenseCode>
    return -1;
 8009b2c:	f04f 33ff 	mov.w	r3, #4294967295
 8009b30:	e06e      	b.n	8009c10 <SCSI_RequestSense+0x12c>
  }

  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 8009b32:	2300      	movs	r3, #0
 8009b34:	75fb      	strb	r3, [r7, #23]
 8009b36:	e007      	b.n	8009b48 <SCSI_RequestSense+0x64>
  {
    hmsc->bot_data[i] = 0U;
 8009b38:	7dfb      	ldrb	r3, [r7, #23]
 8009b3a:	693a      	ldr	r2, [r7, #16]
 8009b3c:	4413      	add	r3, r2
 8009b3e:	2200      	movs	r2, #0
 8009b40:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 8009b42:	7dfb      	ldrb	r3, [r7, #23]
 8009b44:	3301      	adds	r3, #1
 8009b46:	75fb      	strb	r3, [r7, #23]
 8009b48:	7dfb      	ldrb	r3, [r7, #23]
 8009b4a:	2b11      	cmp	r3, #17
 8009b4c:	d9f4      	bls.n	8009b38 <SCSI_RequestSense+0x54>
  }

  hmsc->bot_data[0] = 0x70U;
 8009b4e:	693b      	ldr	r3, [r7, #16]
 8009b50:	2270      	movs	r2, #112	; 0x70
 8009b52:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[7] = REQUEST_SENSE_DATA_LEN - 6U;
 8009b54:	693b      	ldr	r3, [r7, #16]
 8009b56:	220c      	movs	r2, #12
 8009b58:	75da      	strb	r2, [r3, #23]

  if ((hmsc->scsi_sense_head != hmsc->scsi_sense_tail))
 8009b5a:	693b      	ldr	r3, [r7, #16]
 8009b5c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009b60:	f893 2060 	ldrb.w	r2, [r3, #96]	; 0x60
 8009b64:	693b      	ldr	r3, [r7, #16]
 8009b66:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009b6a:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8009b6e:	429a      	cmp	r2, r3
 8009b70:	d03f      	beq.n	8009bf2 <SCSI_RequestSense+0x10e>
  {
    hmsc->bot_data[2] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].Skey;
 8009b72:	693b      	ldr	r3, [r7, #16]
 8009b74:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009b78:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8009b7c:	461a      	mov	r2, r3
 8009b7e:	693b      	ldr	r3, [r7, #16]
 8009b80:	f502 7202 	add.w	r2, r2, #520	; 0x208
 8009b84:	f813 2032 	ldrb.w	r2, [r3, r2, lsl #3]
 8009b88:	693b      	ldr	r3, [r7, #16]
 8009b8a:	749a      	strb	r2, [r3, #18]
    hmsc->bot_data[12] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASC;
 8009b8c:	693b      	ldr	r3, [r7, #16]
 8009b8e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009b92:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8009b96:	693a      	ldr	r2, [r7, #16]
 8009b98:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8009b9c:	00db      	lsls	r3, r3, #3
 8009b9e:	4413      	add	r3, r2
 8009ba0:	791a      	ldrb	r2, [r3, #4]
 8009ba2:	693b      	ldr	r3, [r7, #16]
 8009ba4:	771a      	strb	r2, [r3, #28]
    hmsc->bot_data[13] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASCQ;
 8009ba6:	693b      	ldr	r3, [r7, #16]
 8009ba8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009bac:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8009bb0:	693a      	ldr	r2, [r7, #16]
 8009bb2:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8009bb6:	00db      	lsls	r3, r3, #3
 8009bb8:	4413      	add	r3, r2
 8009bba:	795a      	ldrb	r2, [r3, #5]
 8009bbc:	693b      	ldr	r3, [r7, #16]
 8009bbe:	775a      	strb	r2, [r3, #29]
    hmsc->scsi_sense_head++;
 8009bc0:	693b      	ldr	r3, [r7, #16]
 8009bc2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009bc6:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8009bca:	3301      	adds	r3, #1
 8009bcc:	b2da      	uxtb	r2, r3
 8009bce:	693b      	ldr	r3, [r7, #16]
 8009bd0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009bd4:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

    if (hmsc->scsi_sense_head == SENSE_LIST_DEEPTH)
 8009bd8:	693b      	ldr	r3, [r7, #16]
 8009bda:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009bde:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8009be2:	2b04      	cmp	r3, #4
 8009be4:	d105      	bne.n	8009bf2 <SCSI_RequestSense+0x10e>
    {
      hmsc->scsi_sense_head = 0U;
 8009be6:	693b      	ldr	r3, [r7, #16]
 8009be8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009bec:	2200      	movs	r2, #0
 8009bee:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
    }
  }

  hmsc->bot_data_length = REQUEST_SENSE_DATA_LEN;
 8009bf2:	693b      	ldr	r3, [r7, #16]
 8009bf4:	2212      	movs	r2, #18
 8009bf6:	60da      	str	r2, [r3, #12]

  if (params[4] <= REQUEST_SENSE_DATA_LEN)
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	3304      	adds	r3, #4
 8009bfc:	781b      	ldrb	r3, [r3, #0]
 8009bfe:	2b12      	cmp	r3, #18
 8009c00:	d805      	bhi.n	8009c0e <SCSI_RequestSense+0x12a>
  {
    hmsc->bot_data_length = params[4];
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	3304      	adds	r3, #4
 8009c06:	781b      	ldrb	r3, [r3, #0]
 8009c08:	461a      	mov	r2, r3
 8009c0a:	693b      	ldr	r3, [r7, #16]
 8009c0c:	60da      	str	r2, [r3, #12]
  }

  return 0;
 8009c0e:	2300      	movs	r3, #0
}
 8009c10:	4618      	mov	r0, r3
 8009c12:	3718      	adds	r7, #24
 8009c14:	46bd      	mov	sp, r7
 8009c16:	bd80      	pop	{r7, pc}

08009c18 <SCSI_SenseCode>:
  * @param  ASC: Additional Sense Code
  * @retval none

  */
void SCSI_SenseCode(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t sKey, uint8_t ASC)
{
 8009c18:	b480      	push	{r7}
 8009c1a:	b085      	sub	sp, #20
 8009c1c:	af00      	add	r7, sp, #0
 8009c1e:	6078      	str	r0, [r7, #4]
 8009c20:	4608      	mov	r0, r1
 8009c22:	4611      	mov	r1, r2
 8009c24:	461a      	mov	r2, r3
 8009c26:	4603      	mov	r3, r0
 8009c28:	70fb      	strb	r3, [r7, #3]
 8009c2a:	460b      	mov	r3, r1
 8009c2c:	70bb      	strb	r3, [r7, #2]
 8009c2e:	4613      	mov	r3, r2
 8009c30:	707b      	strb	r3, [r7, #1]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	32b0      	adds	r2, #176	; 0xb0
 8009c3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c40:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	d03d      	beq.n	8009cc4 <SCSI_SenseCode+0xac>
  {
    return;
  }

  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey = sKey;
 8009c48:	68fb      	ldr	r3, [r7, #12]
 8009c4a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009c4e:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8009c52:	461a      	mov	r2, r3
 8009c54:	68fb      	ldr	r3, [r7, #12]
 8009c56:	f502 7202 	add.w	r2, r2, #520	; 0x208
 8009c5a:	78b9      	ldrb	r1, [r7, #2]
 8009c5c:	f803 1032 	strb.w	r1, [r3, r2, lsl #3]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASC = ASC;
 8009c60:	68fb      	ldr	r3, [r7, #12]
 8009c62:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009c66:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8009c6a:	68fa      	ldr	r2, [r7, #12]
 8009c6c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8009c70:	00db      	lsls	r3, r3, #3
 8009c72:	4413      	add	r3, r2
 8009c74:	787a      	ldrb	r2, [r7, #1]
 8009c76:	711a      	strb	r2, [r3, #4]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASCQ = 0U;
 8009c78:	68fb      	ldr	r3, [r7, #12]
 8009c7a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009c7e:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8009c82:	68fa      	ldr	r2, [r7, #12]
 8009c84:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8009c88:	00db      	lsls	r3, r3, #3
 8009c8a:	4413      	add	r3, r2
 8009c8c:	2200      	movs	r2, #0
 8009c8e:	715a      	strb	r2, [r3, #5]
  hmsc->scsi_sense_tail++;
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009c96:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8009c9a:	3301      	adds	r3, #1
 8009c9c:	b2da      	uxtb	r2, r3
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009ca4:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 8009ca8:	68fb      	ldr	r3, [r7, #12]
 8009caa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009cae:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8009cb2:	2b04      	cmp	r3, #4
 8009cb4:	d107      	bne.n	8009cc6 <SCSI_SenseCode+0xae>
  {
    hmsc->scsi_sense_tail = 0U;
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009cbc:	2200      	movs	r2, #0
 8009cbe:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
 8009cc2:	e000      	b.n	8009cc6 <SCSI_SenseCode+0xae>
    return;
 8009cc4:	bf00      	nop
  }
}
 8009cc6:	3714      	adds	r7, #20
 8009cc8:	46bd      	mov	sp, r7
 8009cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cce:	4770      	bx	lr

08009cd0 <SCSI_StartStopUnit>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_StartStopUnit(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8009cd0:	b580      	push	{r7, lr}
 8009cd2:	b086      	sub	sp, #24
 8009cd4:	af00      	add	r7, sp, #0
 8009cd6:	60f8      	str	r0, [r7, #12]
 8009cd8:	460b      	mov	r3, r1
 8009cda:	607a      	str	r2, [r7, #4]
 8009cdc:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009cde:	68fb      	ldr	r3, [r7, #12]
 8009ce0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	32b0      	adds	r2, #176	; 0xb0
 8009ce8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009cec:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8009cee:	697b      	ldr	r3, [r7, #20]
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	d102      	bne.n	8009cfa <SCSI_StartStopUnit+0x2a>
  {
    return -1;
 8009cf4:	f04f 33ff 	mov.w	r3, #4294967295
 8009cf8:	e043      	b.n	8009d82 <SCSI_StartStopUnit+0xb2>
  }

  if ((hmsc->scsi_medium_state == SCSI_MEDIUM_LOCKED) && ((params[4] & 0x3U) == 2U))
 8009cfa:	697b      	ldr	r3, [r7, #20]
 8009cfc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009d00:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8009d04:	2b01      	cmp	r3, #1
 8009d06:	d10f      	bne.n	8009d28 <SCSI_StartStopUnit+0x58>
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	3304      	adds	r3, #4
 8009d0c:	781b      	ldrb	r3, [r3, #0]
 8009d0e:	f003 0303 	and.w	r3, r3, #3
 8009d12:	2b02      	cmp	r3, #2
 8009d14:	d108      	bne.n	8009d28 <SCSI_StartStopUnit+0x58>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 8009d16:	7af9      	ldrb	r1, [r7, #11]
 8009d18:	2324      	movs	r3, #36	; 0x24
 8009d1a:	2205      	movs	r2, #5
 8009d1c:	68f8      	ldr	r0, [r7, #12]
 8009d1e:	f7ff ff7b 	bl	8009c18 <SCSI_SenseCode>

    return -1;
 8009d22:	f04f 33ff 	mov.w	r3, #4294967295
 8009d26:	e02c      	b.n	8009d82 <SCSI_StartStopUnit+0xb2>
  }

  if ((params[4] & 0x3U) == 0x1U) /* START=1 */
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	3304      	adds	r3, #4
 8009d2c:	781b      	ldrb	r3, [r3, #0]
 8009d2e:	f003 0303 	and.w	r3, r3, #3
 8009d32:	2b01      	cmp	r3, #1
 8009d34:	d106      	bne.n	8009d44 <SCSI_StartStopUnit+0x74>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 8009d36:	697b      	ldr	r3, [r7, #20]
 8009d38:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009d3c:	2200      	movs	r2, #0
 8009d3e:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
 8009d42:	e01a      	b.n	8009d7a <SCSI_StartStopUnit+0xaa>
  }
  else if ((params[4] & 0x3U) == 0x2U) /* START=0 and LOEJ Load Eject=1 */
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	3304      	adds	r3, #4
 8009d48:	781b      	ldrb	r3, [r3, #0]
 8009d4a:	f003 0303 	and.w	r3, r3, #3
 8009d4e:	2b02      	cmp	r3, #2
 8009d50:	d106      	bne.n	8009d60 <SCSI_StartStopUnit+0x90>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_EJECTED;
 8009d52:	697b      	ldr	r3, [r7, #20]
 8009d54:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009d58:	2202      	movs	r2, #2
 8009d5a:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
 8009d5e:	e00c      	b.n	8009d7a <SCSI_StartStopUnit+0xaa>
  }
  else if ((params[4] & 0x3U) == 0x3U) /* START=1 and LOEJ Load Eject=1 */
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	3304      	adds	r3, #4
 8009d64:	781b      	ldrb	r3, [r3, #0]
 8009d66:	f003 0303 	and.w	r3, r3, #3
 8009d6a:	2b03      	cmp	r3, #3
 8009d6c:	d105      	bne.n	8009d7a <SCSI_StartStopUnit+0xaa>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 8009d6e:	697b      	ldr	r3, [r7, #20]
 8009d70:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009d74:	2200      	movs	r2, #0
 8009d76:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
  }
  else
  {
    /* .. */
  }
  hmsc->bot_data_length = 0U;
 8009d7a:	697b      	ldr	r3, [r7, #20]
 8009d7c:	2200      	movs	r2, #0
 8009d7e:	60da      	str	r2, [r3, #12]

  return 0;
 8009d80:	2300      	movs	r3, #0
}
 8009d82:	4618      	mov	r0, r3
 8009d84:	3718      	adds	r7, #24
 8009d86:	46bd      	mov	sp, r7
 8009d88:	bd80      	pop	{r7, pc}

08009d8a <SCSI_AllowPreventRemovable>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_AllowPreventRemovable(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8009d8a:	b480      	push	{r7}
 8009d8c:	b087      	sub	sp, #28
 8009d8e:	af00      	add	r7, sp, #0
 8009d90:	60f8      	str	r0, [r7, #12]
 8009d92:	460b      	mov	r3, r1
 8009d94:	607a      	str	r2, [r7, #4]
 8009d96:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009d98:	68fb      	ldr	r3, [r7, #12]
 8009d9a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009d9e:	68fb      	ldr	r3, [r7, #12]
 8009da0:	32b0      	adds	r2, #176	; 0xb0
 8009da2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009da6:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8009da8:	697b      	ldr	r3, [r7, #20]
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d102      	bne.n	8009db4 <SCSI_AllowPreventRemovable+0x2a>
  {
    return -1;
 8009dae:	f04f 33ff 	mov.w	r3, #4294967295
 8009db2:	e015      	b.n	8009de0 <SCSI_AllowPreventRemovable+0x56>
  }

  if (params[4] == 0U)
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	3304      	adds	r3, #4
 8009db8:	781b      	ldrb	r3, [r3, #0]
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d106      	bne.n	8009dcc <SCSI_AllowPreventRemovable+0x42>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 8009dbe:	697b      	ldr	r3, [r7, #20]
 8009dc0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009dc4:	2200      	movs	r2, #0
 8009dc6:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
 8009dca:	e005      	b.n	8009dd8 <SCSI_AllowPreventRemovable+0x4e>
  }
  else
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_LOCKED;
 8009dcc:	697b      	ldr	r3, [r7, #20]
 8009dce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009dd2:	2201      	movs	r2, #1
 8009dd4:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
  }

  hmsc->bot_data_length = 0U;
 8009dd8:	697b      	ldr	r3, [r7, #20]
 8009dda:	2200      	movs	r2, #0
 8009ddc:	60da      	str	r2, [r3, #12]

  return 0;
 8009dde:	2300      	movs	r3, #0
}
 8009de0:	4618      	mov	r0, r3
 8009de2:	371c      	adds	r7, #28
 8009de4:	46bd      	mov	sp, r7
 8009de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dea:	4770      	bx	lr

08009dec <SCSI_Read10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Read10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8009dec:	b580      	push	{r7, lr}
 8009dee:	b086      	sub	sp, #24
 8009df0:	af00      	add	r7, sp, #0
 8009df2:	60f8      	str	r0, [r7, #12]
 8009df4:	460b      	mov	r3, r1
 8009df6:	607a      	str	r2, [r7, #4]
 8009df8:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009dfa:	68fb      	ldr	r3, [r7, #12]
 8009dfc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009e00:	68fb      	ldr	r3, [r7, #12]
 8009e02:	32b0      	adds	r2, #176	; 0xb0
 8009e04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009e08:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8009e0a:	697b      	ldr	r3, [r7, #20]
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	d102      	bne.n	8009e16 <SCSI_Read10+0x2a>
  {
    return -1;
 8009e10:	f04f 33ff 	mov.w	r3, #4294967295
 8009e14:	e09d      	b.n	8009f52 <SCSI_Read10+0x166>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8009e16:	697b      	ldr	r3, [r7, #20]
 8009e18:	7a1b      	ldrb	r3, [r3, #8]
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	f040 808f 	bne.w	8009f3e <SCSI_Read10+0x152>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 8009e20:	697b      	ldr	r3, [r7, #20]
 8009e22:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009e26:	7f1b      	ldrb	r3, [r3, #28]
 8009e28:	b25b      	sxtb	r3, r3
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	db0b      	blt.n	8009e46 <SCSI_Read10+0x5a>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8009e2e:	697b      	ldr	r3, [r7, #20]
 8009e30:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009e34:	7f59      	ldrb	r1, [r3, #29]
 8009e36:	2320      	movs	r3, #32
 8009e38:	2205      	movs	r2, #5
 8009e3a:	68f8      	ldr	r0, [r7, #12]
 8009e3c:	f7ff feec 	bl	8009c18 <SCSI_SenseCode>
      return -1;
 8009e40:	f04f 33ff 	mov.w	r3, #4294967295
 8009e44:	e085      	b.n	8009f52 <SCSI_Read10+0x166>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 8009e46:	697b      	ldr	r3, [r7, #20]
 8009e48:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009e4c:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8009e50:	2b02      	cmp	r3, #2
 8009e52:	d108      	bne.n	8009e66 <SCSI_Read10+0x7a>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8009e54:	7af9      	ldrb	r1, [r7, #11]
 8009e56:	233a      	movs	r3, #58	; 0x3a
 8009e58:	2202      	movs	r2, #2
 8009e5a:	68f8      	ldr	r0, [r7, #12]
 8009e5c:	f7ff fedc 	bl	8009c18 <SCSI_SenseCode>

      return -1;
 8009e60:	f04f 33ff 	mov.w	r3, #4294967295
 8009e64:	e075      	b.n	8009f52 <SCSI_Read10+0x166>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009e6c:	68fa      	ldr	r2, [r7, #12]
 8009e6e:	33b0      	adds	r3, #176	; 0xb0
 8009e70:	009b      	lsls	r3, r3, #2
 8009e72:	4413      	add	r3, r2
 8009e74:	685b      	ldr	r3, [r3, #4]
 8009e76:	689b      	ldr	r3, [r3, #8]
 8009e78:	7afa      	ldrb	r2, [r7, #11]
 8009e7a:	4610      	mov	r0, r2
 8009e7c:	4798      	blx	r3
 8009e7e:	4603      	mov	r3, r0
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	d008      	beq.n	8009e96 <SCSI_Read10+0xaa>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8009e84:	7af9      	ldrb	r1, [r7, #11]
 8009e86:	233a      	movs	r3, #58	; 0x3a
 8009e88:	2202      	movs	r2, #2
 8009e8a:	68f8      	ldr	r0, [r7, #12]
 8009e8c:	f7ff fec4 	bl	8009c18 <SCSI_SenseCode>
      return -1;
 8009e90:	f04f 33ff 	mov.w	r3, #4294967295
 8009e94:	e05d      	b.n	8009f52 <SCSI_Read10+0x166>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	3302      	adds	r3, #2
 8009e9a:	781b      	ldrb	r3, [r3, #0]
 8009e9c:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	3303      	adds	r3, #3
 8009ea2:	781b      	ldrb	r3, [r3, #0]
 8009ea4:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8009ea6:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	3304      	adds	r3, #4
 8009eac:	781b      	ldrb	r3, [r3, #0]
 8009eae:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8009eb0:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8009eb2:	687a      	ldr	r2, [r7, #4]
 8009eb4:	3205      	adds	r2, #5
 8009eb6:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 8009eb8:	4313      	orrs	r3, r2
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8009eba:	697a      	ldr	r2, [r7, #20]
 8009ebc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8009ec0:	66d3      	str	r3, [r2, #108]	; 0x6c

    hmsc->scsi_blk_len = ((uint32_t)params[7] <<  8) | (uint32_t)params[8];
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	3307      	adds	r3, #7
 8009ec6:	781b      	ldrb	r3, [r3, #0]
 8009ec8:	021b      	lsls	r3, r3, #8
 8009eca:	687a      	ldr	r2, [r7, #4]
 8009ecc:	3208      	adds	r2, #8
 8009ece:	7812      	ldrb	r2, [r2, #0]
 8009ed0:	4313      	orrs	r3, r2
 8009ed2:	697a      	ldr	r2, [r7, #20]
 8009ed4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8009ed8:	6713      	str	r3, [r2, #112]	; 0x70

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8009eda:	697b      	ldr	r3, [r7, #20]
 8009edc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009ee0:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8009ee2:	697b      	ldr	r3, [r7, #20]
 8009ee4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009ee8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009eea:	7af9      	ldrb	r1, [r7, #11]
 8009eec:	68f8      	ldr	r0, [r7, #12]
 8009eee:	f000 fb0c 	bl	800a50a <SCSI_CheckAddressRange>
 8009ef2:	4603      	mov	r3, r0
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	da02      	bge.n	8009efe <SCSI_Read10+0x112>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8009ef8:	f04f 33ff 	mov.w	r3, #4294967295
 8009efc:	e029      	b.n	8009f52 <SCSI_Read10+0x166>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 8009efe:	697b      	ldr	r3, [r7, #20]
 8009f00:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009f04:	699a      	ldr	r2, [r3, #24]
 8009f06:	697b      	ldr	r3, [r7, #20]
 8009f08:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009f0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009f0e:	6979      	ldr	r1, [r7, #20]
 8009f10:	f501 5180 	add.w	r1, r1, #4096	; 0x1000
 8009f14:	f8b1 1064 	ldrh.w	r1, [r1, #100]	; 0x64
 8009f18:	fb01 f303 	mul.w	r3, r1, r3
 8009f1c:	429a      	cmp	r2, r3
 8009f1e:	d00b      	beq.n	8009f38 <SCSI_Read10+0x14c>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8009f20:	697b      	ldr	r3, [r7, #20]
 8009f22:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009f26:	7f59      	ldrb	r1, [r3, #29]
 8009f28:	2320      	movs	r3, #32
 8009f2a:	2205      	movs	r2, #5
 8009f2c:	68f8      	ldr	r0, [r7, #12]
 8009f2e:	f7ff fe73 	bl	8009c18 <SCSI_SenseCode>
      return -1;
 8009f32:	f04f 33ff 	mov.w	r3, #4294967295
 8009f36:	e00c      	b.n	8009f52 <SCSI_Read10+0x166>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 8009f38:	697b      	ldr	r3, [r7, #20]
 8009f3a:	2202      	movs	r2, #2
 8009f3c:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 8009f3e:	697b      	ldr	r3, [r7, #20]
 8009f40:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8009f44:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 8009f46:	7afb      	ldrb	r3, [r7, #11]
 8009f48:	4619      	mov	r1, r3
 8009f4a:	68f8      	ldr	r0, [r7, #12]
 8009f4c:	f000 fb0a 	bl	800a564 <SCSI_ProcessRead>
 8009f50:	4603      	mov	r3, r0
}
 8009f52:	4618      	mov	r0, r3
 8009f54:	3718      	adds	r7, #24
 8009f56:	46bd      	mov	sp, r7
 8009f58:	bd80      	pop	{r7, pc}

08009f5a <SCSI_Read12>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Read12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8009f5a:	b580      	push	{r7, lr}
 8009f5c:	b086      	sub	sp, #24
 8009f5e:	af00      	add	r7, sp, #0
 8009f60:	60f8      	str	r0, [r7, #12]
 8009f62:	460b      	mov	r3, r1
 8009f64:	607a      	str	r2, [r7, #4]
 8009f66:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009f68:	68fb      	ldr	r3, [r7, #12]
 8009f6a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009f6e:	68fb      	ldr	r3, [r7, #12]
 8009f70:	32b0      	adds	r2, #176	; 0xb0
 8009f72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009f76:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8009f78:	697b      	ldr	r3, [r7, #20]
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	d102      	bne.n	8009f84 <SCSI_Read12+0x2a>
  {
    return -1;
 8009f7e:	f04f 33ff 	mov.w	r3, #4294967295
 8009f82:	e0a7      	b.n	800a0d4 <SCSI_Read12+0x17a>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8009f84:	697b      	ldr	r3, [r7, #20]
 8009f86:	7a1b      	ldrb	r3, [r3, #8]
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	f040 8099 	bne.w	800a0c0 <SCSI_Read12+0x166>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 8009f8e:	697b      	ldr	r3, [r7, #20]
 8009f90:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009f94:	7f1b      	ldrb	r3, [r3, #28]
 8009f96:	b25b      	sxtb	r3, r3
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	db0b      	blt.n	8009fb4 <SCSI_Read12+0x5a>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8009f9c:	697b      	ldr	r3, [r7, #20]
 8009f9e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009fa2:	7f59      	ldrb	r1, [r3, #29]
 8009fa4:	2320      	movs	r3, #32
 8009fa6:	2205      	movs	r2, #5
 8009fa8:	68f8      	ldr	r0, [r7, #12]
 8009faa:	f7ff fe35 	bl	8009c18 <SCSI_SenseCode>
      return -1;
 8009fae:	f04f 33ff 	mov.w	r3, #4294967295
 8009fb2:	e08f      	b.n	800a0d4 <SCSI_Read12+0x17a>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 8009fb4:	697b      	ldr	r3, [r7, #20]
 8009fb6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009fba:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8009fbe:	2b02      	cmp	r3, #2
 8009fc0:	d108      	bne.n	8009fd4 <SCSI_Read12+0x7a>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8009fc2:	7af9      	ldrb	r1, [r7, #11]
 8009fc4:	233a      	movs	r3, #58	; 0x3a
 8009fc6:	2202      	movs	r2, #2
 8009fc8:	68f8      	ldr	r0, [r7, #12]
 8009fca:	f7ff fe25 	bl	8009c18 <SCSI_SenseCode>
      return -1;
 8009fce:	f04f 33ff 	mov.w	r3, #4294967295
 8009fd2:	e07f      	b.n	800a0d4 <SCSI_Read12+0x17a>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009fda:	68fa      	ldr	r2, [r7, #12]
 8009fdc:	33b0      	adds	r3, #176	; 0xb0
 8009fde:	009b      	lsls	r3, r3, #2
 8009fe0:	4413      	add	r3, r2
 8009fe2:	685b      	ldr	r3, [r3, #4]
 8009fe4:	689b      	ldr	r3, [r3, #8]
 8009fe6:	7afa      	ldrb	r2, [r7, #11]
 8009fe8:	4610      	mov	r0, r2
 8009fea:	4798      	blx	r3
 8009fec:	4603      	mov	r3, r0
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	d008      	beq.n	800a004 <SCSI_Read12+0xaa>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8009ff2:	7af9      	ldrb	r1, [r7, #11]
 8009ff4:	233a      	movs	r3, #58	; 0x3a
 8009ff6:	2202      	movs	r2, #2
 8009ff8:	68f8      	ldr	r0, [r7, #12]
 8009ffa:	f7ff fe0d 	bl	8009c18 <SCSI_SenseCode>
      return -1;
 8009ffe:	f04f 33ff 	mov.w	r3, #4294967295
 800a002:	e067      	b.n	800a0d4 <SCSI_Read12+0x17a>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	3302      	adds	r3, #2
 800a008:	781b      	ldrb	r3, [r3, #0]
 800a00a:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	3303      	adds	r3, #3
 800a010:	781b      	ldrb	r3, [r3, #0]
 800a012:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800a014:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	3304      	adds	r3, #4
 800a01a:	781b      	ldrb	r3, [r3, #0]
 800a01c:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800a01e:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 800a020:	687a      	ldr	r2, [r7, #4]
 800a022:	3205      	adds	r2, #5
 800a024:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 800a026:	4313      	orrs	r3, r2
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800a028:	697a      	ldr	r2, [r7, #20]
 800a02a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a02e:	66d3      	str	r3, [r2, #108]	; 0x6c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	3306      	adds	r3, #6
 800a034:	781b      	ldrb	r3, [r3, #0]
 800a036:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	3307      	adds	r3, #7
 800a03c:	781b      	ldrb	r3, [r3, #0]
 800a03e:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800a040:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	3308      	adds	r3, #8
 800a046:	781b      	ldrb	r3, [r3, #0]
 800a048:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 800a04a:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 800a04c:	687a      	ldr	r2, [r7, #4]
 800a04e:	3209      	adds	r2, #9
 800a050:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 800a052:	4313      	orrs	r3, r2
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800a054:	697a      	ldr	r2, [r7, #20]
 800a056:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a05a:	6713      	str	r3, [r2, #112]	; 0x70

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800a05c:	697b      	ldr	r3, [r7, #20]
 800a05e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a062:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800a064:	697b      	ldr	r3, [r7, #20]
 800a066:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a06a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a06c:	7af9      	ldrb	r1, [r7, #11]
 800a06e:	68f8      	ldr	r0, [r7, #12]
 800a070:	f000 fa4b 	bl	800a50a <SCSI_CheckAddressRange>
 800a074:	4603      	mov	r3, r0
 800a076:	2b00      	cmp	r3, #0
 800a078:	da02      	bge.n	800a080 <SCSI_Read12+0x126>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800a07a:	f04f 33ff 	mov.w	r3, #4294967295
 800a07e:	e029      	b.n	800a0d4 <SCSI_Read12+0x17a>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 800a080:	697b      	ldr	r3, [r7, #20]
 800a082:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a086:	699a      	ldr	r2, [r3, #24]
 800a088:	697b      	ldr	r3, [r7, #20]
 800a08a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a08e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a090:	6979      	ldr	r1, [r7, #20]
 800a092:	f501 5180 	add.w	r1, r1, #4096	; 0x1000
 800a096:	f8b1 1064 	ldrh.w	r1, [r1, #100]	; 0x64
 800a09a:	fb01 f303 	mul.w	r3, r1, r3
 800a09e:	429a      	cmp	r2, r3
 800a0a0:	d00b      	beq.n	800a0ba <SCSI_Read12+0x160>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800a0a2:	697b      	ldr	r3, [r7, #20]
 800a0a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a0a8:	7f59      	ldrb	r1, [r3, #29]
 800a0aa:	2320      	movs	r3, #32
 800a0ac:	2205      	movs	r2, #5
 800a0ae:	68f8      	ldr	r0, [r7, #12]
 800a0b0:	f7ff fdb2 	bl	8009c18 <SCSI_SenseCode>
      return -1;
 800a0b4:	f04f 33ff 	mov.w	r3, #4294967295
 800a0b8:	e00c      	b.n	800a0d4 <SCSI_Read12+0x17a>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 800a0ba:	697b      	ldr	r3, [r7, #20]
 800a0bc:	2202      	movs	r2, #2
 800a0be:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 800a0c0:	697b      	ldr	r3, [r7, #20]
 800a0c2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800a0c6:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 800a0c8:	7afb      	ldrb	r3, [r7, #11]
 800a0ca:	4619      	mov	r1, r3
 800a0cc:	68f8      	ldr	r0, [r7, #12]
 800a0ce:	f000 fa49 	bl	800a564 <SCSI_ProcessRead>
 800a0d2:	4603      	mov	r3, r0
}
 800a0d4:	4618      	mov	r0, r3
 800a0d6:	3718      	adds	r7, #24
 800a0d8:	46bd      	mov	sp, r7
 800a0da:	bd80      	pop	{r7, pc}

0800a0dc <SCSI_Write10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Write10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800a0dc:	b580      	push	{r7, lr}
 800a0de:	b086      	sub	sp, #24
 800a0e0:	af00      	add	r7, sp, #0
 800a0e2:	60f8      	str	r0, [r7, #12]
 800a0e4:	460b      	mov	r3, r1
 800a0e6:	607a      	str	r2, [r7, #4]
 800a0e8:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a0ea:	68fb      	ldr	r3, [r7, #12]
 800a0ec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a0f0:	68fb      	ldr	r3, [r7, #12]
 800a0f2:	32b0      	adds	r2, #176	; 0xb0
 800a0f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a0f8:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc == NULL)
 800a0fa:	697b      	ldr	r3, [r7, #20]
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	d102      	bne.n	800a106 <SCSI_Write10+0x2a>
  {
    return -1;
 800a100:	f04f 33ff 	mov.w	r3, #4294967295
 800a104:	e0c7      	b.n	800a296 <SCSI_Write10+0x1ba>
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800a106:	697b      	ldr	r3, [r7, #20]
 800a108:	7a1b      	ldrb	r3, [r3, #8]
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	f040 80bd 	bne.w	800a28a <SCSI_Write10+0x1ae>
  {
    if (hmsc->cbw.dDataLength == 0U)
 800a110:	697b      	ldr	r3, [r7, #20]
 800a112:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a116:	699b      	ldr	r3, [r3, #24]
 800a118:	2b00      	cmp	r3, #0
 800a11a:	d10b      	bne.n	800a134 <SCSI_Write10+0x58>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800a11c:	697b      	ldr	r3, [r7, #20]
 800a11e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a122:	7f59      	ldrb	r1, [r3, #29]
 800a124:	2320      	movs	r3, #32
 800a126:	2205      	movs	r2, #5
 800a128:	68f8      	ldr	r0, [r7, #12]
 800a12a:	f7ff fd75 	bl	8009c18 <SCSI_SenseCode>
      return -1;
 800a12e:	f04f 33ff 	mov.w	r3, #4294967295
 800a132:	e0b0      	b.n	800a296 <SCSI_Write10+0x1ba>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 800a134:	697b      	ldr	r3, [r7, #20]
 800a136:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a13a:	7f1b      	ldrb	r3, [r3, #28]
 800a13c:	b25b      	sxtb	r3, r3
 800a13e:	2b00      	cmp	r3, #0
 800a140:	da0b      	bge.n	800a15a <SCSI_Write10+0x7e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800a142:	697b      	ldr	r3, [r7, #20]
 800a144:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a148:	7f59      	ldrb	r1, [r3, #29]
 800a14a:	2320      	movs	r3, #32
 800a14c:	2205      	movs	r2, #5
 800a14e:	68f8      	ldr	r0, [r7, #12]
 800a150:	f7ff fd62 	bl	8009c18 <SCSI_SenseCode>
      return -1;
 800a154:	f04f 33ff 	mov.w	r3, #4294967295
 800a158:	e09d      	b.n	800a296 <SCSI_Write10+0x1ba>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 800a15a:	68fb      	ldr	r3, [r7, #12]
 800a15c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a160:	68fa      	ldr	r2, [r7, #12]
 800a162:	33b0      	adds	r3, #176	; 0xb0
 800a164:	009b      	lsls	r3, r3, #2
 800a166:	4413      	add	r3, r2
 800a168:	685b      	ldr	r3, [r3, #4]
 800a16a:	689b      	ldr	r3, [r3, #8]
 800a16c:	7afa      	ldrb	r2, [r7, #11]
 800a16e:	4610      	mov	r0, r2
 800a170:	4798      	blx	r3
 800a172:	4603      	mov	r3, r0
 800a174:	2b00      	cmp	r3, #0
 800a176:	d008      	beq.n	800a18a <SCSI_Write10+0xae>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800a178:	7af9      	ldrb	r1, [r7, #11]
 800a17a:	233a      	movs	r3, #58	; 0x3a
 800a17c:	2202      	movs	r2, #2
 800a17e:	68f8      	ldr	r0, [r7, #12]
 800a180:	f7ff fd4a 	bl	8009c18 <SCSI_SenseCode>
      return -1;
 800a184:	f04f 33ff 	mov.w	r3, #4294967295
 800a188:	e085      	b.n	800a296 <SCSI_Write10+0x1ba>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsWriteProtected(lun) != 0)
 800a18a:	68fb      	ldr	r3, [r7, #12]
 800a18c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a190:	68fa      	ldr	r2, [r7, #12]
 800a192:	33b0      	adds	r3, #176	; 0xb0
 800a194:	009b      	lsls	r3, r3, #2
 800a196:	4413      	add	r3, r2
 800a198:	685b      	ldr	r3, [r3, #4]
 800a19a:	68db      	ldr	r3, [r3, #12]
 800a19c:	7afa      	ldrb	r2, [r7, #11]
 800a19e:	4610      	mov	r0, r2
 800a1a0:	4798      	blx	r3
 800a1a2:	4603      	mov	r3, r0
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	d008      	beq.n	800a1ba <SCSI_Write10+0xde>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 800a1a8:	7af9      	ldrb	r1, [r7, #11]
 800a1aa:	2327      	movs	r3, #39	; 0x27
 800a1ac:	2202      	movs	r2, #2
 800a1ae:	68f8      	ldr	r0, [r7, #12]
 800a1b0:	f7ff fd32 	bl	8009c18 <SCSI_SenseCode>
      return -1;
 800a1b4:	f04f 33ff 	mov.w	r3, #4294967295
 800a1b8:	e06d      	b.n	800a296 <SCSI_Write10+0x1ba>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	3302      	adds	r3, #2
 800a1be:	781b      	ldrb	r3, [r3, #0]
 800a1c0:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	3303      	adds	r3, #3
 800a1c6:	781b      	ldrb	r3, [r3, #0]
 800a1c8:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800a1ca:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	3304      	adds	r3, #4
 800a1d0:	781b      	ldrb	r3, [r3, #0]
 800a1d2:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800a1d4:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 800a1d6:	687a      	ldr	r2, [r7, #4]
 800a1d8:	3205      	adds	r2, #5
 800a1da:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 800a1dc:	4313      	orrs	r3, r2
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800a1de:	697a      	ldr	r2, [r7, #20]
 800a1e0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a1e4:	66d3      	str	r3, [r2, #108]	; 0x6c

    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	3307      	adds	r3, #7
 800a1ea:	781b      	ldrb	r3, [r3, #0]
 800a1ec:	021b      	lsls	r3, r3, #8
                         (uint32_t)params[8];
 800a1ee:	687a      	ldr	r2, [r7, #4]
 800a1f0:	3208      	adds	r2, #8
 800a1f2:	7812      	ldrb	r2, [r2, #0]
    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 800a1f4:	4313      	orrs	r3, r2
 800a1f6:	697a      	ldr	r2, [r7, #20]
 800a1f8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a1fc:	6713      	str	r3, [r2, #112]	; 0x70

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800a1fe:	697b      	ldr	r3, [r7, #20]
 800a200:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a204:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800a206:	697b      	ldr	r3, [r7, #20]
 800a208:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a20c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a20e:	7af9      	ldrb	r1, [r7, #11]
 800a210:	68f8      	ldr	r0, [r7, #12]
 800a212:	f000 f97a 	bl	800a50a <SCSI_CheckAddressRange>
 800a216:	4603      	mov	r3, r0
 800a218:	2b00      	cmp	r3, #0
 800a21a:	da02      	bge.n	800a222 <SCSI_Write10+0x146>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800a21c:	f04f 33ff 	mov.w	r3, #4294967295
 800a220:	e039      	b.n	800a296 <SCSI_Write10+0x1ba>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800a222:	697b      	ldr	r3, [r7, #20]
 800a224:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a228:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a22a:	697a      	ldr	r2, [r7, #20]
 800a22c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a230:	f8b2 2064 	ldrh.w	r2, [r2, #100]	; 0x64
 800a234:	fb02 f303 	mul.w	r3, r2, r3
 800a238:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 800a23a:	697b      	ldr	r3, [r7, #20]
 800a23c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a240:	699b      	ldr	r3, [r3, #24]
 800a242:	693a      	ldr	r2, [r7, #16]
 800a244:	429a      	cmp	r2, r3
 800a246:	d00b      	beq.n	800a260 <SCSI_Write10+0x184>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800a248:	697b      	ldr	r3, [r7, #20]
 800a24a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a24e:	7f59      	ldrb	r1, [r3, #29]
 800a250:	2320      	movs	r3, #32
 800a252:	2205      	movs	r2, #5
 800a254:	68f8      	ldr	r0, [r7, #12]
 800a256:	f7ff fcdf 	bl	8009c18 <SCSI_SenseCode>
      return -1;
 800a25a:	f04f 33ff 	mov.w	r3, #4294967295
 800a25e:	e01a      	b.n	800a296 <SCSI_Write10+0x1ba>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 800a260:	693b      	ldr	r3, [r7, #16]
 800a262:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a266:	bf28      	it	cs
 800a268:	f44f 5380 	movcs.w	r3, #4096	; 0x1000
 800a26c:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 800a26e:	697b      	ldr	r3, [r7, #20]
 800a270:	2201      	movs	r2, #1
 800a272:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
 800a274:	4b0a      	ldr	r3, [pc, #40]	; (800a2a0 <SCSI_Write10+0x1c4>)
 800a276:	7819      	ldrb	r1, [r3, #0]
 800a278:	697b      	ldr	r3, [r7, #20]
 800a27a:	f103 0210 	add.w	r2, r3, #16
 800a27e:	693b      	ldr	r3, [r7, #16]
 800a280:	68f8      	ldr	r0, [r7, #12]
 800a282:	f002 fa6b 	bl	800c75c <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 800a286:	2300      	movs	r3, #0
 800a288:	e005      	b.n	800a296 <SCSI_Write10+0x1ba>
    return SCSI_ProcessWrite(pdev, lun);
 800a28a:	7afb      	ldrb	r3, [r7, #11]
 800a28c:	4619      	mov	r1, r3
 800a28e:	68f8      	ldr	r0, [r7, #12]
 800a290:	f000 f9fe 	bl	800a690 <SCSI_ProcessWrite>
 800a294:	4603      	mov	r3, r0
}
 800a296:	4618      	mov	r0, r3
 800a298:	3718      	adds	r7, #24
 800a29a:	46bd      	mov	sp, r7
 800a29c:	bd80      	pop	{r7, pc}
 800a29e:	bf00      	nop
 800a2a0:	20000073 	.word	0x20000073

0800a2a4 <SCSI_Write12>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Write12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800a2a4:	b580      	push	{r7, lr}
 800a2a6:	b086      	sub	sp, #24
 800a2a8:	af00      	add	r7, sp, #0
 800a2aa:	60f8      	str	r0, [r7, #12]
 800a2ac:	460b      	mov	r3, r1
 800a2ae:	607a      	str	r2, [r7, #4]
 800a2b0:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a2b2:	68fb      	ldr	r3, [r7, #12]
 800a2b4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a2b8:	68fb      	ldr	r3, [r7, #12]
 800a2ba:	32b0      	adds	r2, #176	; 0xb0
 800a2bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a2c0:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc == NULL)
 800a2c2:	697b      	ldr	r3, [r7, #20]
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	d102      	bne.n	800a2ce <SCSI_Write12+0x2a>
  {
    return -1;
 800a2c8:	f04f 33ff 	mov.w	r3, #4294967295
 800a2cc:	e0d7      	b.n	800a47e <SCSI_Write12+0x1da>
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800a2ce:	697b      	ldr	r3, [r7, #20]
 800a2d0:	7a1b      	ldrb	r3, [r3, #8]
 800a2d2:	2b00      	cmp	r3, #0
 800a2d4:	f040 80cd 	bne.w	800a472 <SCSI_Write12+0x1ce>
  {
    if (hmsc->cbw.dDataLength == 0U)
 800a2d8:	697b      	ldr	r3, [r7, #20]
 800a2da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a2de:	699b      	ldr	r3, [r3, #24]
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	d10b      	bne.n	800a2fc <SCSI_Write12+0x58>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800a2e4:	697b      	ldr	r3, [r7, #20]
 800a2e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a2ea:	7f59      	ldrb	r1, [r3, #29]
 800a2ec:	2320      	movs	r3, #32
 800a2ee:	2205      	movs	r2, #5
 800a2f0:	68f8      	ldr	r0, [r7, #12]
 800a2f2:	f7ff fc91 	bl	8009c18 <SCSI_SenseCode>
      return -1;
 800a2f6:	f04f 33ff 	mov.w	r3, #4294967295
 800a2fa:	e0c0      	b.n	800a47e <SCSI_Write12+0x1da>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 800a2fc:	697b      	ldr	r3, [r7, #20]
 800a2fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a302:	7f1b      	ldrb	r3, [r3, #28]
 800a304:	b25b      	sxtb	r3, r3
 800a306:	2b00      	cmp	r3, #0
 800a308:	da0b      	bge.n	800a322 <SCSI_Write12+0x7e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800a30a:	697b      	ldr	r3, [r7, #20]
 800a30c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a310:	7f59      	ldrb	r1, [r3, #29]
 800a312:	2320      	movs	r3, #32
 800a314:	2205      	movs	r2, #5
 800a316:	68f8      	ldr	r0, [r7, #12]
 800a318:	f7ff fc7e 	bl	8009c18 <SCSI_SenseCode>
      return -1;
 800a31c:	f04f 33ff 	mov.w	r3, #4294967295
 800a320:	e0ad      	b.n	800a47e <SCSI_Write12+0x1da>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 800a322:	68fb      	ldr	r3, [r7, #12]
 800a324:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a328:	68fa      	ldr	r2, [r7, #12]
 800a32a:	33b0      	adds	r3, #176	; 0xb0
 800a32c:	009b      	lsls	r3, r3, #2
 800a32e:	4413      	add	r3, r2
 800a330:	685b      	ldr	r3, [r3, #4]
 800a332:	689b      	ldr	r3, [r3, #8]
 800a334:	7afa      	ldrb	r2, [r7, #11]
 800a336:	4610      	mov	r0, r2
 800a338:	4798      	blx	r3
 800a33a:	4603      	mov	r3, r0
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	d00b      	beq.n	800a358 <SCSI_Write12+0xb4>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800a340:	7af9      	ldrb	r1, [r7, #11]
 800a342:	233a      	movs	r3, #58	; 0x3a
 800a344:	2202      	movs	r2, #2
 800a346:	68f8      	ldr	r0, [r7, #12]
 800a348:	f7ff fc66 	bl	8009c18 <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 800a34c:	697b      	ldr	r3, [r7, #20]
 800a34e:	2205      	movs	r2, #5
 800a350:	721a      	strb	r2, [r3, #8]
      return -1;
 800a352:	f04f 33ff 	mov.w	r3, #4294967295
 800a356:	e092      	b.n	800a47e <SCSI_Write12+0x1da>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsWriteProtected(lun) != 0)
 800a358:	68fb      	ldr	r3, [r7, #12]
 800a35a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a35e:	68fa      	ldr	r2, [r7, #12]
 800a360:	33b0      	adds	r3, #176	; 0xb0
 800a362:	009b      	lsls	r3, r3, #2
 800a364:	4413      	add	r3, r2
 800a366:	685b      	ldr	r3, [r3, #4]
 800a368:	68db      	ldr	r3, [r3, #12]
 800a36a:	7afa      	ldrb	r2, [r7, #11]
 800a36c:	4610      	mov	r0, r2
 800a36e:	4798      	blx	r3
 800a370:	4603      	mov	r3, r0
 800a372:	2b00      	cmp	r3, #0
 800a374:	d00b      	beq.n	800a38e <SCSI_Write12+0xea>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 800a376:	7af9      	ldrb	r1, [r7, #11]
 800a378:	2327      	movs	r3, #39	; 0x27
 800a37a:	2202      	movs	r2, #2
 800a37c:	68f8      	ldr	r0, [r7, #12]
 800a37e:	f7ff fc4b 	bl	8009c18 <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 800a382:	697b      	ldr	r3, [r7, #20]
 800a384:	2205      	movs	r2, #5
 800a386:	721a      	strb	r2, [r3, #8]
      return -1;
 800a388:	f04f 33ff 	mov.w	r3, #4294967295
 800a38c:	e077      	b.n	800a47e <SCSI_Write12+0x1da>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	3302      	adds	r3, #2
 800a392:	781b      	ldrb	r3, [r3, #0]
 800a394:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	3303      	adds	r3, #3
 800a39a:	781b      	ldrb	r3, [r3, #0]
 800a39c:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800a39e:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	3304      	adds	r3, #4
 800a3a4:	781b      	ldrb	r3, [r3, #0]
 800a3a6:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800a3a8:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 800a3aa:	687a      	ldr	r2, [r7, #4]
 800a3ac:	3205      	adds	r2, #5
 800a3ae:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 800a3b0:	4313      	orrs	r3, r2
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800a3b2:	697a      	ldr	r2, [r7, #20]
 800a3b4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a3b8:	66d3      	str	r3, [r2, #108]	; 0x6c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	3306      	adds	r3, #6
 800a3be:	781b      	ldrb	r3, [r3, #0]
 800a3c0:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	3307      	adds	r3, #7
 800a3c6:	781b      	ldrb	r3, [r3, #0]
 800a3c8:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800a3ca:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	3308      	adds	r3, #8
 800a3d0:	781b      	ldrb	r3, [r3, #0]
 800a3d2:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 800a3d4:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 800a3d6:	687a      	ldr	r2, [r7, #4]
 800a3d8:	3209      	adds	r2, #9
 800a3da:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 800a3dc:	4313      	orrs	r3, r2
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800a3de:	697a      	ldr	r2, [r7, #20]
 800a3e0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a3e4:	6713      	str	r3, [r2, #112]	; 0x70

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800a3e6:	697b      	ldr	r3, [r7, #20]
 800a3e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a3ec:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800a3ee:	697b      	ldr	r3, [r7, #20]
 800a3f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a3f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a3f6:	7af9      	ldrb	r1, [r7, #11]
 800a3f8:	68f8      	ldr	r0, [r7, #12]
 800a3fa:	f000 f886 	bl	800a50a <SCSI_CheckAddressRange>
 800a3fe:	4603      	mov	r3, r0
 800a400:	2b00      	cmp	r3, #0
 800a402:	da02      	bge.n	800a40a <SCSI_Write12+0x166>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800a404:	f04f 33ff 	mov.w	r3, #4294967295
 800a408:	e039      	b.n	800a47e <SCSI_Write12+0x1da>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800a40a:	697b      	ldr	r3, [r7, #20]
 800a40c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a410:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a412:	697a      	ldr	r2, [r7, #20]
 800a414:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a418:	f8b2 2064 	ldrh.w	r2, [r2, #100]	; 0x64
 800a41c:	fb02 f303 	mul.w	r3, r2, r3
 800a420:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 800a422:	697b      	ldr	r3, [r7, #20]
 800a424:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a428:	699b      	ldr	r3, [r3, #24]
 800a42a:	693a      	ldr	r2, [r7, #16]
 800a42c:	429a      	cmp	r2, r3
 800a42e:	d00b      	beq.n	800a448 <SCSI_Write12+0x1a4>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800a430:	697b      	ldr	r3, [r7, #20]
 800a432:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a436:	7f59      	ldrb	r1, [r3, #29]
 800a438:	2320      	movs	r3, #32
 800a43a:	2205      	movs	r2, #5
 800a43c:	68f8      	ldr	r0, [r7, #12]
 800a43e:	f7ff fbeb 	bl	8009c18 <SCSI_SenseCode>
      return -1;
 800a442:	f04f 33ff 	mov.w	r3, #4294967295
 800a446:	e01a      	b.n	800a47e <SCSI_Write12+0x1da>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 800a448:	693b      	ldr	r3, [r7, #16]
 800a44a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a44e:	bf28      	it	cs
 800a450:	f44f 5380 	movcs.w	r3, #4096	; 0x1000
 800a454:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 800a456:	697b      	ldr	r3, [r7, #20]
 800a458:	2201      	movs	r2, #1
 800a45a:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
 800a45c:	4b0a      	ldr	r3, [pc, #40]	; (800a488 <SCSI_Write12+0x1e4>)
 800a45e:	7819      	ldrb	r1, [r3, #0]
 800a460:	697b      	ldr	r3, [r7, #20]
 800a462:	f103 0210 	add.w	r2, r3, #16
 800a466:	693b      	ldr	r3, [r7, #16]
 800a468:	68f8      	ldr	r0, [r7, #12]
 800a46a:	f002 f977 	bl	800c75c <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 800a46e:	2300      	movs	r3, #0
 800a470:	e005      	b.n	800a47e <SCSI_Write12+0x1da>
    return SCSI_ProcessWrite(pdev, lun);
 800a472:	7afb      	ldrb	r3, [r7, #11]
 800a474:	4619      	mov	r1, r3
 800a476:	68f8      	ldr	r0, [r7, #12]
 800a478:	f000 f90a 	bl	800a690 <SCSI_ProcessWrite>
 800a47c:	4603      	mov	r3, r0
}
 800a47e:	4618      	mov	r0, r3
 800a480:	3718      	adds	r7, #24
 800a482:	46bd      	mov	sp, r7
 800a484:	bd80      	pop	{r7, pc}
 800a486:	bf00      	nop
 800a488:	20000073 	.word	0x20000073

0800a48c <SCSI_Verify10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Verify10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800a48c:	b580      	push	{r7, lr}
 800a48e:	b086      	sub	sp, #24
 800a490:	af00      	add	r7, sp, #0
 800a492:	60f8      	str	r0, [r7, #12]
 800a494:	460b      	mov	r3, r1
 800a496:	607a      	str	r2, [r7, #4]
 800a498:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a49a:	68fb      	ldr	r3, [r7, #12]
 800a49c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a4a0:	68fb      	ldr	r3, [r7, #12]
 800a4a2:	32b0      	adds	r2, #176	; 0xb0
 800a4a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a4a8:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800a4aa:	697b      	ldr	r3, [r7, #20]
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	d102      	bne.n	800a4b6 <SCSI_Verify10+0x2a>
  {
    return -1;
 800a4b0:	f04f 33ff 	mov.w	r3, #4294967295
 800a4b4:	e025      	b.n	800a502 <SCSI_Verify10+0x76>
  }

  if ((params[1] & 0x02U) == 0x02U)
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	3301      	adds	r3, #1
 800a4ba:	781b      	ldrb	r3, [r3, #0]
 800a4bc:	f003 0302 	and.w	r3, r3, #2
 800a4c0:	2b00      	cmp	r3, #0
 800a4c2:	d008      	beq.n	800a4d6 <SCSI_Verify10+0x4a>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 800a4c4:	7af9      	ldrb	r1, [r7, #11]
 800a4c6:	2324      	movs	r3, #36	; 0x24
 800a4c8:	2205      	movs	r2, #5
 800a4ca:	68f8      	ldr	r0, [r7, #12]
 800a4cc:	f7ff fba4 	bl	8009c18 <SCSI_SenseCode>
    return -1; /* Error, Verify Mode Not supported*/
 800a4d0:	f04f 33ff 	mov.w	r3, #4294967295
 800a4d4:	e015      	b.n	800a502 <SCSI_Verify10+0x76>
  }

  if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr, hmsc->scsi_blk_len) < 0)
 800a4d6:	697b      	ldr	r3, [r7, #20]
 800a4d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a4dc:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800a4de:	697b      	ldr	r3, [r7, #20]
 800a4e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a4e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a4e6:	7af9      	ldrb	r1, [r7, #11]
 800a4e8:	68f8      	ldr	r0, [r7, #12]
 800a4ea:	f000 f80e 	bl	800a50a <SCSI_CheckAddressRange>
 800a4ee:	4603      	mov	r3, r0
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	da02      	bge.n	800a4fa <SCSI_Verify10+0x6e>
  {
    return -1; /* error */
 800a4f4:	f04f 33ff 	mov.w	r3, #4294967295
 800a4f8:	e003      	b.n	800a502 <SCSI_Verify10+0x76>
  }

  hmsc->bot_data_length = 0U;
 800a4fa:	697b      	ldr	r3, [r7, #20]
 800a4fc:	2200      	movs	r2, #0
 800a4fe:	60da      	str	r2, [r3, #12]

  return 0;
 800a500:	2300      	movs	r3, #0
}
 800a502:	4618      	mov	r0, r3
 800a504:	3718      	adds	r7, #24
 800a506:	46bd      	mov	sp, r7
 800a508:	bd80      	pop	{r7, pc}

0800a50a <SCSI_CheckAddressRange>:
  * @param  blk_nbr: number of block to be processed
  * @retval status
  */
static int8_t SCSI_CheckAddressRange(USBD_HandleTypeDef *pdev, uint8_t lun,
                                     uint32_t blk_offset, uint32_t blk_nbr)
{
 800a50a:	b580      	push	{r7, lr}
 800a50c:	b086      	sub	sp, #24
 800a50e:	af00      	add	r7, sp, #0
 800a510:	60f8      	str	r0, [r7, #12]
 800a512:	607a      	str	r2, [r7, #4]
 800a514:	603b      	str	r3, [r7, #0]
 800a516:	460b      	mov	r3, r1
 800a518:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a51a:	68fb      	ldr	r3, [r7, #12]
 800a51c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a520:	68fb      	ldr	r3, [r7, #12]
 800a522:	32b0      	adds	r2, #176	; 0xb0
 800a524:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a528:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800a52a:	697b      	ldr	r3, [r7, #20]
 800a52c:	2b00      	cmp	r3, #0
 800a52e:	d102      	bne.n	800a536 <SCSI_CheckAddressRange+0x2c>
  {
    return -1;
 800a530:	f04f 33ff 	mov.w	r3, #4294967295
 800a534:	e012      	b.n	800a55c <SCSI_CheckAddressRange+0x52>
  }

  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr)
 800a536:	687a      	ldr	r2, [r7, #4]
 800a538:	683b      	ldr	r3, [r7, #0]
 800a53a:	441a      	add	r2, r3
 800a53c:	697b      	ldr	r3, [r7, #20]
 800a53e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a542:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a544:	429a      	cmp	r2, r3
 800a546:	d908      	bls.n	800a55a <SCSI_CheckAddressRange+0x50>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, ADDRESS_OUT_OF_RANGE);
 800a548:	7af9      	ldrb	r1, [r7, #11]
 800a54a:	2321      	movs	r3, #33	; 0x21
 800a54c:	2205      	movs	r2, #5
 800a54e:	68f8      	ldr	r0, [r7, #12]
 800a550:	f7ff fb62 	bl	8009c18 <SCSI_SenseCode>
    return -1;
 800a554:	f04f 33ff 	mov.w	r3, #4294967295
 800a558:	e000      	b.n	800a55c <SCSI_CheckAddressRange+0x52>
  }

  return 0;
 800a55a:	2300      	movs	r3, #0
}
 800a55c:	4618      	mov	r0, r3
 800a55e:	3718      	adds	r7, #24
 800a560:	46bd      	mov	sp, r7
 800a562:	bd80      	pop	{r7, pc}

0800a564 <SCSI_ProcessRead>:
  *         Handle Read Process
  * @param  lun: Logical unit number
  * @retval status
  */
static int8_t SCSI_ProcessRead(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 800a564:	b590      	push	{r4, r7, lr}
 800a566:	b085      	sub	sp, #20
 800a568:	af00      	add	r7, sp, #0
 800a56a:	6078      	str	r0, [r7, #4]
 800a56c:	460b      	mov	r3, r1
 800a56e:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	32b0      	adds	r2, #176	; 0xb0
 800a57a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a57e:	60fb      	str	r3, [r7, #12]
  uint32_t len;

  if (hmsc == NULL)
 800a580:	68fb      	ldr	r3, [r7, #12]
 800a582:	2b00      	cmp	r3, #0
 800a584:	d102      	bne.n	800a58c <SCSI_ProcessRead+0x28>
  {
    return -1;
 800a586:	f04f 33ff 	mov.w	r3, #4294967295
 800a58a:	e07b      	b.n	800a684 <SCSI_ProcessRead+0x120>
  }

  len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800a58c:	68fb      	ldr	r3, [r7, #12]
 800a58e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a592:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a594:	68fa      	ldr	r2, [r7, #12]
 800a596:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a59a:	f8b2 2064 	ldrh.w	r2, [r2, #100]	; 0x64
 800a59e:	fb02 f303 	mul.w	r3, r2, r3
 800a5a2:	60bb      	str	r3, [r7, #8]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  len = MIN(len, MSC_MEDIA_PACKET);
 800a5a4:	68bb      	ldr	r3, [r7, #8]
 800a5a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a5aa:	bf28      	it	cs
 800a5ac:	f44f 5380 	movcs.w	r3, #4096	; 0x1000
 800a5b0:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Read(lun, hmsc->bot_data,
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a5b8:	687a      	ldr	r2, [r7, #4]
 800a5ba:	33b0      	adds	r3, #176	; 0xb0
 800a5bc:	009b      	lsls	r3, r3, #2
 800a5be:	4413      	add	r3, r2
 800a5c0:	685b      	ldr	r3, [r3, #4]
 800a5c2:	691c      	ldr	r4, [r3, #16]
 800a5c4:	68fb      	ldr	r3, [r7, #12]
 800a5c6:	f103 0110 	add.w	r1, r3, #16
 800a5ca:	68fb      	ldr	r3, [r7, #12]
 800a5cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a5d0:	6eda      	ldr	r2, [r3, #108]	; 0x6c
                                                                    hmsc->scsi_blk_addr,
                                                                    (len / hmsc->scsi_blk_size)) < 0)
 800a5d2:	68fb      	ldr	r3, [r7, #12]
 800a5d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a5d8:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800a5dc:	4618      	mov	r0, r3
 800a5de:	68bb      	ldr	r3, [r7, #8]
 800a5e0:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Read(lun, hmsc->bot_data,
 800a5e4:	b29b      	uxth	r3, r3
 800a5e6:	78f8      	ldrb	r0, [r7, #3]
 800a5e8:	47a0      	blx	r4
 800a5ea:	4603      	mov	r3, r0
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	da08      	bge.n	800a602 <SCSI_ProcessRead+0x9e>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, UNRECOVERED_READ_ERROR);
 800a5f0:	78f9      	ldrb	r1, [r7, #3]
 800a5f2:	2311      	movs	r3, #17
 800a5f4:	2204      	movs	r2, #4
 800a5f6:	6878      	ldr	r0, [r7, #4]
 800a5f8:	f7ff fb0e 	bl	8009c18 <SCSI_SenseCode>
    return -1;
 800a5fc:	f04f 33ff 	mov.w	r3, #4294967295
 800a600:	e040      	b.n	800a684 <SCSI_ProcessRead+0x120>
  }

  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, hmsc->bot_data, len);
 800a602:	4b22      	ldr	r3, [pc, #136]	; (800a68c <SCSI_ProcessRead+0x128>)
 800a604:	7819      	ldrb	r1, [r3, #0]
 800a606:	68fb      	ldr	r3, [r7, #12]
 800a608:	f103 0210 	add.w	r2, r3, #16
 800a60c:	68bb      	ldr	r3, [r7, #8]
 800a60e:	6878      	ldr	r0, [r7, #4]
 800a610:	f002 f883 	bl	800c71a <USBD_LL_Transmit>

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 800a614:	68fb      	ldr	r3, [r7, #12]
 800a616:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a61a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800a61c:	68fb      	ldr	r3, [r7, #12]
 800a61e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a622:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800a626:	4619      	mov	r1, r3
 800a628:	68bb      	ldr	r3, [r7, #8]
 800a62a:	fbb3 f3f1 	udiv	r3, r3, r1
 800a62e:	4413      	add	r3, r2
 800a630:	68fa      	ldr	r2, [r7, #12]
 800a632:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a636:	66d3      	str	r3, [r2, #108]	; 0x6c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 800a638:	68fb      	ldr	r3, [r7, #12]
 800a63a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a63e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800a640:	68fb      	ldr	r3, [r7, #12]
 800a642:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a646:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800a64a:	4619      	mov	r1, r3
 800a64c:	68bb      	ldr	r3, [r7, #8]
 800a64e:	fbb3 f3f1 	udiv	r3, r3, r1
 800a652:	1ad3      	subs	r3, r2, r3
 800a654:	68fa      	ldr	r2, [r7, #12]
 800a656:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a65a:	6713      	str	r3, [r2, #112]	; 0x70

  /* case 6 : Hi = Di */
  hmsc->csw.dDataResidue -= len;
 800a65c:	68fb      	ldr	r3, [r7, #12]
 800a65e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a662:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a664:	68bb      	ldr	r3, [r7, #8]
 800a666:	1ad3      	subs	r3, r2, r3
 800a668:	68fa      	ldr	r2, [r7, #12]
 800a66a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a66e:	6393      	str	r3, [r2, #56]	; 0x38

  if (hmsc->scsi_blk_len == 0U)
 800a670:	68fb      	ldr	r3, [r7, #12]
 800a672:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a676:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a678:	2b00      	cmp	r3, #0
 800a67a:	d102      	bne.n	800a682 <SCSI_ProcessRead+0x11e>
  {
    hmsc->bot_state = USBD_BOT_LAST_DATA_IN;
 800a67c:	68fb      	ldr	r3, [r7, #12]
 800a67e:	2203      	movs	r2, #3
 800a680:	721a      	strb	r2, [r3, #8]
  }

  return 0;
 800a682:	2300      	movs	r3, #0
}
 800a684:	4618      	mov	r0, r3
 800a686:	3714      	adds	r7, #20
 800a688:	46bd      	mov	sp, r7
 800a68a:	bd90      	pop	{r4, r7, pc}
 800a68c:	20000072 	.word	0x20000072

0800a690 <SCSI_ProcessWrite>:
  *         Handle Write Process
  * @param  lun: Logical unit number
  * @retval status
  */
static int8_t SCSI_ProcessWrite(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 800a690:	b590      	push	{r4, r7, lr}
 800a692:	b085      	sub	sp, #20
 800a694:	af00      	add	r7, sp, #0
 800a696:	6078      	str	r0, [r7, #4]
 800a698:	460b      	mov	r3, r1
 800a69a:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	32b0      	adds	r2, #176	; 0xb0
 800a6a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a6aa:	60fb      	str	r3, [r7, #12]
  uint32_t len;

  if (hmsc == NULL)
 800a6ac:	68fb      	ldr	r3, [r7, #12]
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	d102      	bne.n	800a6b8 <SCSI_ProcessWrite+0x28>
  {
    return -1;
 800a6b2:	f04f 33ff 	mov.w	r3, #4294967295
 800a6b6:	e08e      	b.n	800a7d6 <SCSI_ProcessWrite+0x146>
  }

  len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800a6b8:	68fb      	ldr	r3, [r7, #12]
 800a6ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a6be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a6c0:	68fa      	ldr	r2, [r7, #12]
 800a6c2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a6c6:	f8b2 2064 	ldrh.w	r2, [r2, #100]	; 0x64
 800a6ca:	fb02 f303 	mul.w	r3, r2, r3
 800a6ce:	60bb      	str	r3, [r7, #8]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  len = MIN(len, MSC_MEDIA_PACKET);
 800a6d0:	68bb      	ldr	r3, [r7, #8]
 800a6d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a6d6:	bf28      	it	cs
 800a6d8:	f44f 5380 	movcs.w	r3, #4096	; 0x1000
 800a6dc:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Write(lun, hmsc->bot_data,
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a6e4:	687a      	ldr	r2, [r7, #4]
 800a6e6:	33b0      	adds	r3, #176	; 0xb0
 800a6e8:	009b      	lsls	r3, r3, #2
 800a6ea:	4413      	add	r3, r2
 800a6ec:	685b      	ldr	r3, [r3, #4]
 800a6ee:	695c      	ldr	r4, [r3, #20]
 800a6f0:	68fb      	ldr	r3, [r7, #12]
 800a6f2:	f103 0110 	add.w	r1, r3, #16
 800a6f6:	68fb      	ldr	r3, [r7, #12]
 800a6f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a6fc:	6eda      	ldr	r2, [r3, #108]	; 0x6c
                                                                     hmsc->scsi_blk_addr,
                                                                     (len / hmsc->scsi_blk_size)) < 0)
 800a6fe:	68fb      	ldr	r3, [r7, #12]
 800a700:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a704:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800a708:	4618      	mov	r0, r3
 800a70a:	68bb      	ldr	r3, [r7, #8]
 800a70c:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Write(lun, hmsc->bot_data,
 800a710:	b29b      	uxth	r3, r3
 800a712:	78f8      	ldrb	r0, [r7, #3]
 800a714:	47a0      	blx	r4
 800a716:	4603      	mov	r3, r0
 800a718:	2b00      	cmp	r3, #0
 800a71a:	da08      	bge.n	800a72e <SCSI_ProcessWrite+0x9e>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, WRITE_FAULT);
 800a71c:	78f9      	ldrb	r1, [r7, #3]
 800a71e:	2303      	movs	r3, #3
 800a720:	2204      	movs	r2, #4
 800a722:	6878      	ldr	r0, [r7, #4]
 800a724:	f7ff fa78 	bl	8009c18 <SCSI_SenseCode>
    return -1;
 800a728:	f04f 33ff 	mov.w	r3, #4294967295
 800a72c:	e053      	b.n	800a7d6 <SCSI_ProcessWrite+0x146>
  }

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 800a72e:	68fb      	ldr	r3, [r7, #12]
 800a730:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a734:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800a736:	68fb      	ldr	r3, [r7, #12]
 800a738:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a73c:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800a740:	4619      	mov	r1, r3
 800a742:	68bb      	ldr	r3, [r7, #8]
 800a744:	fbb3 f3f1 	udiv	r3, r3, r1
 800a748:	4413      	add	r3, r2
 800a74a:	68fa      	ldr	r2, [r7, #12]
 800a74c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a750:	66d3      	str	r3, [r2, #108]	; 0x6c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 800a752:	68fb      	ldr	r3, [r7, #12]
 800a754:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a758:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800a75a:	68fb      	ldr	r3, [r7, #12]
 800a75c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a760:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800a764:	4619      	mov	r1, r3
 800a766:	68bb      	ldr	r3, [r7, #8]
 800a768:	fbb3 f3f1 	udiv	r3, r3, r1
 800a76c:	1ad3      	subs	r3, r2, r3
 800a76e:	68fa      	ldr	r2, [r7, #12]
 800a770:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a774:	6713      	str	r3, [r2, #112]	; 0x70

  /* case 12 : Ho = Do */
  hmsc->csw.dDataResidue -= len;
 800a776:	68fb      	ldr	r3, [r7, #12]
 800a778:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a77c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a77e:	68bb      	ldr	r3, [r7, #8]
 800a780:	1ad3      	subs	r3, r2, r3
 800a782:	68fa      	ldr	r2, [r7, #12]
 800a784:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a788:	6393      	str	r3, [r2, #56]	; 0x38

  if (hmsc->scsi_blk_len == 0U)
 800a78a:	68fb      	ldr	r3, [r7, #12]
 800a78c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a790:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a792:	2b00      	cmp	r3, #0
 800a794:	d104      	bne.n	800a7a0 <SCSI_ProcessWrite+0x110>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 800a796:	2100      	movs	r1, #0
 800a798:	6878      	ldr	r0, [r7, #4]
 800a79a:	f7fe fc55 	bl	8009048 <MSC_BOT_SendCSW>
 800a79e:	e019      	b.n	800a7d4 <SCSI_ProcessWrite+0x144>
  }
  else
  {
    len = MIN((hmsc->scsi_blk_len * hmsc->scsi_blk_size), MSC_MEDIA_PACKET);
 800a7a0:	68fb      	ldr	r3, [r7, #12]
 800a7a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a7a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a7a8:	68fa      	ldr	r2, [r7, #12]
 800a7aa:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a7ae:	f8b2 2064 	ldrh.w	r2, [r2, #100]	; 0x64
 800a7b2:	fb02 f303 	mul.w	r3, r2, r3
 800a7b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a7ba:	bf28      	it	cs
 800a7bc:	f44f 5380 	movcs.w	r3, #4096	; 0x1000
 800a7c0:	60bb      	str	r3, [r7, #8]

    /* Prepare EP to Receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
 800a7c2:	4b07      	ldr	r3, [pc, #28]	; (800a7e0 <SCSI_ProcessWrite+0x150>)
 800a7c4:	7819      	ldrb	r1, [r3, #0]
 800a7c6:	68fb      	ldr	r3, [r7, #12]
 800a7c8:	f103 0210 	add.w	r2, r3, #16
 800a7cc:	68bb      	ldr	r3, [r7, #8]
 800a7ce:	6878      	ldr	r0, [r7, #4]
 800a7d0:	f001 ffc4 	bl	800c75c <USBD_LL_PrepareReceive>
  }

  return 0;
 800a7d4:	2300      	movs	r3, #0
}
 800a7d6:	4618      	mov	r0, r3
 800a7d8:	3714      	adds	r7, #20
 800a7da:	46bd      	mov	sp, r7
 800a7dc:	bd90      	pop	{r4, r7, pc}
 800a7de:	bf00      	nop
 800a7e0:	20000073 	.word	0x20000073

0800a7e4 <SCSI_UpdateBotData>:
  * @param  length: Data length
  * @retval status
  */
static int8_t SCSI_UpdateBotData(USBD_MSC_BOT_HandleTypeDef *hmsc,
                                 uint8_t *pBuff, uint16_t length)
{
 800a7e4:	b480      	push	{r7}
 800a7e6:	b087      	sub	sp, #28
 800a7e8:	af00      	add	r7, sp, #0
 800a7ea:	60f8      	str	r0, [r7, #12]
 800a7ec:	60b9      	str	r1, [r7, #8]
 800a7ee:	4613      	mov	r3, r2
 800a7f0:	80fb      	strh	r3, [r7, #6]
  uint16_t len = length;
 800a7f2:	88fb      	ldrh	r3, [r7, #6]
 800a7f4:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 800a7f6:	68fb      	ldr	r3, [r7, #12]
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	d102      	bne.n	800a802 <SCSI_UpdateBotData+0x1e>
  {
    return -1;
 800a7fc:	f04f 33ff 	mov.w	r3, #4294967295
 800a800:	e013      	b.n	800a82a <SCSI_UpdateBotData+0x46>
  }

  hmsc->bot_data_length = len;
 800a802:	8afa      	ldrh	r2, [r7, #22]
 800a804:	68fb      	ldr	r3, [r7, #12]
 800a806:	60da      	str	r2, [r3, #12]

  while (len != 0U)
 800a808:	e00b      	b.n	800a822 <SCSI_UpdateBotData+0x3e>
  {
    len--;
 800a80a:	8afb      	ldrh	r3, [r7, #22]
 800a80c:	3b01      	subs	r3, #1
 800a80e:	82fb      	strh	r3, [r7, #22]
    hmsc->bot_data[len] = pBuff[len];
 800a810:	8afb      	ldrh	r3, [r7, #22]
 800a812:	68ba      	ldr	r2, [r7, #8]
 800a814:	441a      	add	r2, r3
 800a816:	8afb      	ldrh	r3, [r7, #22]
 800a818:	7811      	ldrb	r1, [r2, #0]
 800a81a:	68fa      	ldr	r2, [r7, #12]
 800a81c:	4413      	add	r3, r2
 800a81e:	460a      	mov	r2, r1
 800a820:	741a      	strb	r2, [r3, #16]
  while (len != 0U)
 800a822:	8afb      	ldrh	r3, [r7, #22]
 800a824:	2b00      	cmp	r3, #0
 800a826:	d1f0      	bne.n	800a80a <SCSI_UpdateBotData+0x26>
  }

  return 0;
 800a828:	2300      	movs	r3, #0
}
 800a82a:	4618      	mov	r0, r3
 800a82c:	371c      	adds	r7, #28
 800a82e:	46bd      	mov	sp, r7
 800a830:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a834:	4770      	bx	lr

0800a836 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800a836:	b580      	push	{r7, lr}
 800a838:	b086      	sub	sp, #24
 800a83a:	af00      	add	r7, sp, #0
 800a83c:	60f8      	str	r0, [r7, #12]
 800a83e:	60b9      	str	r1, [r7, #8]
 800a840:	4613      	mov	r3, r2
 800a842:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800a844:	68fb      	ldr	r3, [r7, #12]
 800a846:	2b00      	cmp	r3, #0
 800a848:	d101      	bne.n	800a84e <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800a84a:	2303      	movs	r3, #3
 800a84c:	e01f      	b.n	800a88e <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800a84e:	68fb      	ldr	r3, [r7, #12]
 800a850:	2200      	movs	r2, #0
 800a852:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800a856:	68fb      	ldr	r3, [r7, #12]
 800a858:	2200      	movs	r2, #0
 800a85a:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800a85e:	68fb      	ldr	r3, [r7, #12]
 800a860:	2200      	movs	r2, #0
 800a862:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800a866:	68bb      	ldr	r3, [r7, #8]
 800a868:	2b00      	cmp	r3, #0
 800a86a:	d003      	beq.n	800a874 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800a86c:	68fb      	ldr	r3, [r7, #12]
 800a86e:	68ba      	ldr	r2, [r7, #8]
 800a870:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a874:	68fb      	ldr	r3, [r7, #12]
 800a876:	2201      	movs	r2, #1
 800a878:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800a87c:	68fb      	ldr	r3, [r7, #12]
 800a87e:	79fa      	ldrb	r2, [r7, #7]
 800a880:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800a882:	68f8      	ldr	r0, [r7, #12]
 800a884:	f001 fdda 	bl	800c43c <USBD_LL_Init>
 800a888:	4603      	mov	r3, r0
 800a88a:	75fb      	strb	r3, [r7, #23]

  return ret;
 800a88c:	7dfb      	ldrb	r3, [r7, #23]
}
 800a88e:	4618      	mov	r0, r3
 800a890:	3718      	adds	r7, #24
 800a892:	46bd      	mov	sp, r7
 800a894:	bd80      	pop	{r7, pc}

0800a896 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800a896:	b580      	push	{r7, lr}
 800a898:	b084      	sub	sp, #16
 800a89a:	af00      	add	r7, sp, #0
 800a89c:	6078      	str	r0, [r7, #4]
 800a89e:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a8a0:	2300      	movs	r3, #0
 800a8a2:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800a8a4:	683b      	ldr	r3, [r7, #0]
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	d101      	bne.n	800a8ae <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800a8aa:	2303      	movs	r3, #3
 800a8ac:	e025      	b.n	800a8fa <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	683a      	ldr	r2, [r7, #0]
 800a8b2:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	32ae      	adds	r2, #174	; 0xae
 800a8c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a8c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	d00f      	beq.n	800a8ea <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	32ae      	adds	r2, #174	; 0xae
 800a8d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a8d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8da:	f107 020e 	add.w	r2, r7, #14
 800a8de:	4610      	mov	r0, r2
 800a8e0:	4798      	blx	r3
 800a8e2:	4602      	mov	r2, r0
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800a8f0:	1c5a      	adds	r2, r3, #1
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800a8f8:	2300      	movs	r3, #0
}
 800a8fa:	4618      	mov	r0, r3
 800a8fc:	3710      	adds	r7, #16
 800a8fe:	46bd      	mov	sp, r7
 800a900:	bd80      	pop	{r7, pc}

0800a902 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800a902:	b580      	push	{r7, lr}
 800a904:	b082      	sub	sp, #8
 800a906:	af00      	add	r7, sp, #0
 800a908:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800a90a:	6878      	ldr	r0, [r7, #4]
 800a90c:	f001 fde2 	bl	800c4d4 <USBD_LL_Start>
 800a910:	4603      	mov	r3, r0
}
 800a912:	4618      	mov	r0, r3
 800a914:	3708      	adds	r7, #8
 800a916:	46bd      	mov	sp, r7
 800a918:	bd80      	pop	{r7, pc}

0800a91a <USBD_Stop>:
  *         Stop the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Stop(USBD_HandleTypeDef *pdev)
{
 800a91a:	b580      	push	{r7, lr}
 800a91c:	b082      	sub	sp, #8
 800a91e:	af00      	add	r7, sp, #0
 800a920:	6078      	str	r0, [r7, #4]
  /* Disconnect USB Device */
  (void)USBD_LL_Stop(pdev);
 800a922:	6878      	ldr	r0, [r7, #4]
 800a924:	f001 fdf1 	bl	800c50a <USBD_LL_Stop>
  }

  /* Reset the class ID */
  pdev->classId = 0U;
#else
  if (pdev->pClass[0] != NULL)
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a92e:	2b00      	cmp	r3, #0
 800a930:	d009      	beq.n	800a946 <USBD_Stop+0x2c>
  {
    (void)pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config);
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a938:	685b      	ldr	r3, [r3, #4]
 800a93a:	687a      	ldr	r2, [r7, #4]
 800a93c:	6852      	ldr	r2, [r2, #4]
 800a93e:	b2d2      	uxtb	r2, r2
 800a940:	4611      	mov	r1, r2
 800a942:	6878      	ldr	r0, [r7, #4]
 800a944:	4798      	blx	r3
  }
#endif /* USE_USBD_COMPOSITE */

  return USBD_OK;
 800a946:	2300      	movs	r3, #0
}
 800a948:	4618      	mov	r0, r3
 800a94a:	3708      	adds	r7, #8
 800a94c:	46bd      	mov	sp, r7
 800a94e:	bd80      	pop	{r7, pc}

0800a950 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800a950:	b480      	push	{r7}
 800a952:	b083      	sub	sp, #12
 800a954:	af00      	add	r7, sp, #0
 800a956:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a958:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800a95a:	4618      	mov	r0, r3
 800a95c:	370c      	adds	r7, #12
 800a95e:	46bd      	mov	sp, r7
 800a960:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a964:	4770      	bx	lr

0800a966 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a966:	b580      	push	{r7, lr}
 800a968:	b084      	sub	sp, #16
 800a96a:	af00      	add	r7, sp, #0
 800a96c:	6078      	str	r0, [r7, #4]
 800a96e:	460b      	mov	r3, r1
 800a970:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800a972:	2300      	movs	r3, #0
 800a974:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a97c:	2b00      	cmp	r3, #0
 800a97e:	d009      	beq.n	800a994 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a986:	681b      	ldr	r3, [r3, #0]
 800a988:	78fa      	ldrb	r2, [r7, #3]
 800a98a:	4611      	mov	r1, r2
 800a98c:	6878      	ldr	r0, [r7, #4]
 800a98e:	4798      	blx	r3
 800a990:	4603      	mov	r3, r0
 800a992:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a994:	7bfb      	ldrb	r3, [r7, #15]
}
 800a996:	4618      	mov	r0, r3
 800a998:	3710      	adds	r7, #16
 800a99a:	46bd      	mov	sp, r7
 800a99c:	bd80      	pop	{r7, pc}

0800a99e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a99e:	b580      	push	{r7, lr}
 800a9a0:	b084      	sub	sp, #16
 800a9a2:	af00      	add	r7, sp, #0
 800a9a4:	6078      	str	r0, [r7, #4]
 800a9a6:	460b      	mov	r3, r1
 800a9a8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800a9aa:	2300      	movs	r3, #0
 800a9ac:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a9b4:	685b      	ldr	r3, [r3, #4]
 800a9b6:	78fa      	ldrb	r2, [r7, #3]
 800a9b8:	4611      	mov	r1, r2
 800a9ba:	6878      	ldr	r0, [r7, #4]
 800a9bc:	4798      	blx	r3
 800a9be:	4603      	mov	r3, r0
 800a9c0:	2b00      	cmp	r3, #0
 800a9c2:	d001      	beq.n	800a9c8 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800a9c4:	2303      	movs	r3, #3
 800a9c6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a9c8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a9ca:	4618      	mov	r0, r3
 800a9cc:	3710      	adds	r7, #16
 800a9ce:	46bd      	mov	sp, r7
 800a9d0:	bd80      	pop	{r7, pc}

0800a9d2 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800a9d2:	b580      	push	{r7, lr}
 800a9d4:	b084      	sub	sp, #16
 800a9d6:	af00      	add	r7, sp, #0
 800a9d8:	6078      	str	r0, [r7, #4]
 800a9da:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a9e2:	6839      	ldr	r1, [r7, #0]
 800a9e4:	4618      	mov	r0, r3
 800a9e6:	f001 f908 	bl	800bbfa <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	2201      	movs	r2, #1
 800a9ee:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800a9f8:	461a      	mov	r2, r3
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800aa06:	f003 031f 	and.w	r3, r3, #31
 800aa0a:	2b02      	cmp	r3, #2
 800aa0c:	d01a      	beq.n	800aa44 <USBD_LL_SetupStage+0x72>
 800aa0e:	2b02      	cmp	r3, #2
 800aa10:	d822      	bhi.n	800aa58 <USBD_LL_SetupStage+0x86>
 800aa12:	2b00      	cmp	r3, #0
 800aa14:	d002      	beq.n	800aa1c <USBD_LL_SetupStage+0x4a>
 800aa16:	2b01      	cmp	r3, #1
 800aa18:	d00a      	beq.n	800aa30 <USBD_LL_SetupStage+0x5e>
 800aa1a:	e01d      	b.n	800aa58 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800aa22:	4619      	mov	r1, r3
 800aa24:	6878      	ldr	r0, [r7, #4]
 800aa26:	f000 fb5f 	bl	800b0e8 <USBD_StdDevReq>
 800aa2a:	4603      	mov	r3, r0
 800aa2c:	73fb      	strb	r3, [r7, #15]
      break;
 800aa2e:	e020      	b.n	800aa72 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800aa36:	4619      	mov	r1, r3
 800aa38:	6878      	ldr	r0, [r7, #4]
 800aa3a:	f000 fbc7 	bl	800b1cc <USBD_StdItfReq>
 800aa3e:	4603      	mov	r3, r0
 800aa40:	73fb      	strb	r3, [r7, #15]
      break;
 800aa42:	e016      	b.n	800aa72 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800aa4a:	4619      	mov	r1, r3
 800aa4c:	6878      	ldr	r0, [r7, #4]
 800aa4e:	f000 fc29 	bl	800b2a4 <USBD_StdEPReq>
 800aa52:	4603      	mov	r3, r0
 800aa54:	73fb      	strb	r3, [r7, #15]
      break;
 800aa56:	e00c      	b.n	800aa72 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800aa5e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800aa62:	b2db      	uxtb	r3, r3
 800aa64:	4619      	mov	r1, r3
 800aa66:	6878      	ldr	r0, [r7, #4]
 800aa68:	f001 fdce 	bl	800c608 <USBD_LL_StallEP>
 800aa6c:	4603      	mov	r3, r0
 800aa6e:	73fb      	strb	r3, [r7, #15]
      break;
 800aa70:	bf00      	nop
  }

  return ret;
 800aa72:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa74:	4618      	mov	r0, r3
 800aa76:	3710      	adds	r7, #16
 800aa78:	46bd      	mov	sp, r7
 800aa7a:	bd80      	pop	{r7, pc}

0800aa7c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800aa7c:	b580      	push	{r7, lr}
 800aa7e:	b086      	sub	sp, #24
 800aa80:	af00      	add	r7, sp, #0
 800aa82:	60f8      	str	r0, [r7, #12]
 800aa84:	460b      	mov	r3, r1
 800aa86:	607a      	str	r2, [r7, #4]
 800aa88:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800aa8a:	2300      	movs	r3, #0
 800aa8c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800aa8e:	7afb      	ldrb	r3, [r7, #11]
 800aa90:	2b00      	cmp	r3, #0
 800aa92:	d16e      	bne.n	800ab72 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800aa94:	68fb      	ldr	r3, [r7, #12]
 800aa96:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800aa9a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800aa9c:	68fb      	ldr	r3, [r7, #12]
 800aa9e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800aaa2:	2b03      	cmp	r3, #3
 800aaa4:	f040 8098 	bne.w	800abd8 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800aaa8:	693b      	ldr	r3, [r7, #16]
 800aaaa:	689a      	ldr	r2, [r3, #8]
 800aaac:	693b      	ldr	r3, [r7, #16]
 800aaae:	68db      	ldr	r3, [r3, #12]
 800aab0:	429a      	cmp	r2, r3
 800aab2:	d913      	bls.n	800aadc <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800aab4:	693b      	ldr	r3, [r7, #16]
 800aab6:	689a      	ldr	r2, [r3, #8]
 800aab8:	693b      	ldr	r3, [r7, #16]
 800aaba:	68db      	ldr	r3, [r3, #12]
 800aabc:	1ad2      	subs	r2, r2, r3
 800aabe:	693b      	ldr	r3, [r7, #16]
 800aac0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800aac2:	693b      	ldr	r3, [r7, #16]
 800aac4:	68da      	ldr	r2, [r3, #12]
 800aac6:	693b      	ldr	r3, [r7, #16]
 800aac8:	689b      	ldr	r3, [r3, #8]
 800aaca:	4293      	cmp	r3, r2
 800aacc:	bf28      	it	cs
 800aace:	4613      	movcs	r3, r2
 800aad0:	461a      	mov	r2, r3
 800aad2:	6879      	ldr	r1, [r7, #4]
 800aad4:	68f8      	ldr	r0, [r7, #12]
 800aad6:	f001 f967 	bl	800bda8 <USBD_CtlContinueRx>
 800aada:	e07d      	b.n	800abd8 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800aadc:	68fb      	ldr	r3, [r7, #12]
 800aade:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800aae2:	f003 031f 	and.w	r3, r3, #31
 800aae6:	2b02      	cmp	r3, #2
 800aae8:	d014      	beq.n	800ab14 <USBD_LL_DataOutStage+0x98>
 800aaea:	2b02      	cmp	r3, #2
 800aaec:	d81d      	bhi.n	800ab2a <USBD_LL_DataOutStage+0xae>
 800aaee:	2b00      	cmp	r3, #0
 800aaf0:	d002      	beq.n	800aaf8 <USBD_LL_DataOutStage+0x7c>
 800aaf2:	2b01      	cmp	r3, #1
 800aaf4:	d003      	beq.n	800aafe <USBD_LL_DataOutStage+0x82>
 800aaf6:	e018      	b.n	800ab2a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800aaf8:	2300      	movs	r3, #0
 800aafa:	75bb      	strb	r3, [r7, #22]
            break;
 800aafc:	e018      	b.n	800ab30 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800aafe:	68fb      	ldr	r3, [r7, #12]
 800ab00:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800ab04:	b2db      	uxtb	r3, r3
 800ab06:	4619      	mov	r1, r3
 800ab08:	68f8      	ldr	r0, [r7, #12]
 800ab0a:	f000 fa5e 	bl	800afca <USBD_CoreFindIF>
 800ab0e:	4603      	mov	r3, r0
 800ab10:	75bb      	strb	r3, [r7, #22]
            break;
 800ab12:	e00d      	b.n	800ab30 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800ab14:	68fb      	ldr	r3, [r7, #12]
 800ab16:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800ab1a:	b2db      	uxtb	r3, r3
 800ab1c:	4619      	mov	r1, r3
 800ab1e:	68f8      	ldr	r0, [r7, #12]
 800ab20:	f000 fa60 	bl	800afe4 <USBD_CoreFindEP>
 800ab24:	4603      	mov	r3, r0
 800ab26:	75bb      	strb	r3, [r7, #22]
            break;
 800ab28:	e002      	b.n	800ab30 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800ab2a:	2300      	movs	r3, #0
 800ab2c:	75bb      	strb	r3, [r7, #22]
            break;
 800ab2e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800ab30:	7dbb      	ldrb	r3, [r7, #22]
 800ab32:	2b00      	cmp	r3, #0
 800ab34:	d119      	bne.n	800ab6a <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ab36:	68fb      	ldr	r3, [r7, #12]
 800ab38:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ab3c:	b2db      	uxtb	r3, r3
 800ab3e:	2b03      	cmp	r3, #3
 800ab40:	d113      	bne.n	800ab6a <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800ab42:	7dba      	ldrb	r2, [r7, #22]
 800ab44:	68fb      	ldr	r3, [r7, #12]
 800ab46:	32ae      	adds	r2, #174	; 0xae
 800ab48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab4c:	691b      	ldr	r3, [r3, #16]
 800ab4e:	2b00      	cmp	r3, #0
 800ab50:	d00b      	beq.n	800ab6a <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800ab52:	7dba      	ldrb	r2, [r7, #22]
 800ab54:	68fb      	ldr	r3, [r7, #12]
 800ab56:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800ab5a:	7dba      	ldrb	r2, [r7, #22]
 800ab5c:	68fb      	ldr	r3, [r7, #12]
 800ab5e:	32ae      	adds	r2, #174	; 0xae
 800ab60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab64:	691b      	ldr	r3, [r3, #16]
 800ab66:	68f8      	ldr	r0, [r7, #12]
 800ab68:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800ab6a:	68f8      	ldr	r0, [r7, #12]
 800ab6c:	f001 f92d 	bl	800bdca <USBD_CtlSendStatus>
 800ab70:	e032      	b.n	800abd8 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800ab72:	7afb      	ldrb	r3, [r7, #11]
 800ab74:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ab78:	b2db      	uxtb	r3, r3
 800ab7a:	4619      	mov	r1, r3
 800ab7c:	68f8      	ldr	r0, [r7, #12]
 800ab7e:	f000 fa31 	bl	800afe4 <USBD_CoreFindEP>
 800ab82:	4603      	mov	r3, r0
 800ab84:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ab86:	7dbb      	ldrb	r3, [r7, #22]
 800ab88:	2bff      	cmp	r3, #255	; 0xff
 800ab8a:	d025      	beq.n	800abd8 <USBD_LL_DataOutStage+0x15c>
 800ab8c:	7dbb      	ldrb	r3, [r7, #22]
 800ab8e:	2b00      	cmp	r3, #0
 800ab90:	d122      	bne.n	800abd8 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ab92:	68fb      	ldr	r3, [r7, #12]
 800ab94:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ab98:	b2db      	uxtb	r3, r3
 800ab9a:	2b03      	cmp	r3, #3
 800ab9c:	d117      	bne.n	800abce <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800ab9e:	7dba      	ldrb	r2, [r7, #22]
 800aba0:	68fb      	ldr	r3, [r7, #12]
 800aba2:	32ae      	adds	r2, #174	; 0xae
 800aba4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aba8:	699b      	ldr	r3, [r3, #24]
 800abaa:	2b00      	cmp	r3, #0
 800abac:	d00f      	beq.n	800abce <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800abae:	7dba      	ldrb	r2, [r7, #22]
 800abb0:	68fb      	ldr	r3, [r7, #12]
 800abb2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800abb6:	7dba      	ldrb	r2, [r7, #22]
 800abb8:	68fb      	ldr	r3, [r7, #12]
 800abba:	32ae      	adds	r2, #174	; 0xae
 800abbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800abc0:	699b      	ldr	r3, [r3, #24]
 800abc2:	7afa      	ldrb	r2, [r7, #11]
 800abc4:	4611      	mov	r1, r2
 800abc6:	68f8      	ldr	r0, [r7, #12]
 800abc8:	4798      	blx	r3
 800abca:	4603      	mov	r3, r0
 800abcc:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800abce:	7dfb      	ldrb	r3, [r7, #23]
 800abd0:	2b00      	cmp	r3, #0
 800abd2:	d001      	beq.n	800abd8 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800abd4:	7dfb      	ldrb	r3, [r7, #23]
 800abd6:	e000      	b.n	800abda <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800abd8:	2300      	movs	r3, #0
}
 800abda:	4618      	mov	r0, r3
 800abdc:	3718      	adds	r7, #24
 800abde:	46bd      	mov	sp, r7
 800abe0:	bd80      	pop	{r7, pc}

0800abe2 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800abe2:	b580      	push	{r7, lr}
 800abe4:	b086      	sub	sp, #24
 800abe6:	af00      	add	r7, sp, #0
 800abe8:	60f8      	str	r0, [r7, #12]
 800abea:	460b      	mov	r3, r1
 800abec:	607a      	str	r2, [r7, #4]
 800abee:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800abf0:	7afb      	ldrb	r3, [r7, #11]
 800abf2:	2b00      	cmp	r3, #0
 800abf4:	d16f      	bne.n	800acd6 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800abf6:	68fb      	ldr	r3, [r7, #12]
 800abf8:	3314      	adds	r3, #20
 800abfa:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800abfc:	68fb      	ldr	r3, [r7, #12]
 800abfe:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800ac02:	2b02      	cmp	r3, #2
 800ac04:	d15a      	bne.n	800acbc <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800ac06:	693b      	ldr	r3, [r7, #16]
 800ac08:	689a      	ldr	r2, [r3, #8]
 800ac0a:	693b      	ldr	r3, [r7, #16]
 800ac0c:	68db      	ldr	r3, [r3, #12]
 800ac0e:	429a      	cmp	r2, r3
 800ac10:	d914      	bls.n	800ac3c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800ac12:	693b      	ldr	r3, [r7, #16]
 800ac14:	689a      	ldr	r2, [r3, #8]
 800ac16:	693b      	ldr	r3, [r7, #16]
 800ac18:	68db      	ldr	r3, [r3, #12]
 800ac1a:	1ad2      	subs	r2, r2, r3
 800ac1c:	693b      	ldr	r3, [r7, #16]
 800ac1e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800ac20:	693b      	ldr	r3, [r7, #16]
 800ac22:	689b      	ldr	r3, [r3, #8]
 800ac24:	461a      	mov	r2, r3
 800ac26:	6879      	ldr	r1, [r7, #4]
 800ac28:	68f8      	ldr	r0, [r7, #12]
 800ac2a:	f001 f8ac 	bl	800bd86 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ac2e:	2300      	movs	r3, #0
 800ac30:	2200      	movs	r2, #0
 800ac32:	2100      	movs	r1, #0
 800ac34:	68f8      	ldr	r0, [r7, #12]
 800ac36:	f001 fd91 	bl	800c75c <USBD_LL_PrepareReceive>
 800ac3a:	e03f      	b.n	800acbc <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800ac3c:	693b      	ldr	r3, [r7, #16]
 800ac3e:	68da      	ldr	r2, [r3, #12]
 800ac40:	693b      	ldr	r3, [r7, #16]
 800ac42:	689b      	ldr	r3, [r3, #8]
 800ac44:	429a      	cmp	r2, r3
 800ac46:	d11c      	bne.n	800ac82 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800ac48:	693b      	ldr	r3, [r7, #16]
 800ac4a:	685a      	ldr	r2, [r3, #4]
 800ac4c:	693b      	ldr	r3, [r7, #16]
 800ac4e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800ac50:	429a      	cmp	r2, r3
 800ac52:	d316      	bcc.n	800ac82 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800ac54:	693b      	ldr	r3, [r7, #16]
 800ac56:	685a      	ldr	r2, [r3, #4]
 800ac58:	68fb      	ldr	r3, [r7, #12]
 800ac5a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800ac5e:	429a      	cmp	r2, r3
 800ac60:	d20f      	bcs.n	800ac82 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800ac62:	2200      	movs	r2, #0
 800ac64:	2100      	movs	r1, #0
 800ac66:	68f8      	ldr	r0, [r7, #12]
 800ac68:	f001 f88d 	bl	800bd86 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800ac6c:	68fb      	ldr	r3, [r7, #12]
 800ac6e:	2200      	movs	r2, #0
 800ac70:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ac74:	2300      	movs	r3, #0
 800ac76:	2200      	movs	r2, #0
 800ac78:	2100      	movs	r1, #0
 800ac7a:	68f8      	ldr	r0, [r7, #12]
 800ac7c:	f001 fd6e 	bl	800c75c <USBD_LL_PrepareReceive>
 800ac80:	e01c      	b.n	800acbc <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ac82:	68fb      	ldr	r3, [r7, #12]
 800ac84:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ac88:	b2db      	uxtb	r3, r3
 800ac8a:	2b03      	cmp	r3, #3
 800ac8c:	d10f      	bne.n	800acae <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800ac8e:	68fb      	ldr	r3, [r7, #12]
 800ac90:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ac94:	68db      	ldr	r3, [r3, #12]
 800ac96:	2b00      	cmp	r3, #0
 800ac98:	d009      	beq.n	800acae <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800ac9a:	68fb      	ldr	r3, [r7, #12]
 800ac9c:	2200      	movs	r2, #0
 800ac9e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800aca2:	68fb      	ldr	r3, [r7, #12]
 800aca4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aca8:	68db      	ldr	r3, [r3, #12]
 800acaa:	68f8      	ldr	r0, [r7, #12]
 800acac:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800acae:	2180      	movs	r1, #128	; 0x80
 800acb0:	68f8      	ldr	r0, [r7, #12]
 800acb2:	f001 fca9 	bl	800c608 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800acb6:	68f8      	ldr	r0, [r7, #12]
 800acb8:	f001 f89a 	bl	800bdf0 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800acbc:	68fb      	ldr	r3, [r7, #12]
 800acbe:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	d03a      	beq.n	800ad3c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800acc6:	68f8      	ldr	r0, [r7, #12]
 800acc8:	f7ff fe42 	bl	800a950 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800accc:	68fb      	ldr	r3, [r7, #12]
 800acce:	2200      	movs	r2, #0
 800acd0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800acd4:	e032      	b.n	800ad3c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800acd6:	7afb      	ldrb	r3, [r7, #11]
 800acd8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800acdc:	b2db      	uxtb	r3, r3
 800acde:	4619      	mov	r1, r3
 800ace0:	68f8      	ldr	r0, [r7, #12]
 800ace2:	f000 f97f 	bl	800afe4 <USBD_CoreFindEP>
 800ace6:	4603      	mov	r3, r0
 800ace8:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800acea:	7dfb      	ldrb	r3, [r7, #23]
 800acec:	2bff      	cmp	r3, #255	; 0xff
 800acee:	d025      	beq.n	800ad3c <USBD_LL_DataInStage+0x15a>
 800acf0:	7dfb      	ldrb	r3, [r7, #23]
 800acf2:	2b00      	cmp	r3, #0
 800acf4:	d122      	bne.n	800ad3c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800acf6:	68fb      	ldr	r3, [r7, #12]
 800acf8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800acfc:	b2db      	uxtb	r3, r3
 800acfe:	2b03      	cmp	r3, #3
 800ad00:	d11c      	bne.n	800ad3c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800ad02:	7dfa      	ldrb	r2, [r7, #23]
 800ad04:	68fb      	ldr	r3, [r7, #12]
 800ad06:	32ae      	adds	r2, #174	; 0xae
 800ad08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ad0c:	695b      	ldr	r3, [r3, #20]
 800ad0e:	2b00      	cmp	r3, #0
 800ad10:	d014      	beq.n	800ad3c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800ad12:	7dfa      	ldrb	r2, [r7, #23]
 800ad14:	68fb      	ldr	r3, [r7, #12]
 800ad16:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800ad1a:	7dfa      	ldrb	r2, [r7, #23]
 800ad1c:	68fb      	ldr	r3, [r7, #12]
 800ad1e:	32ae      	adds	r2, #174	; 0xae
 800ad20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ad24:	695b      	ldr	r3, [r3, #20]
 800ad26:	7afa      	ldrb	r2, [r7, #11]
 800ad28:	4611      	mov	r1, r2
 800ad2a:	68f8      	ldr	r0, [r7, #12]
 800ad2c:	4798      	blx	r3
 800ad2e:	4603      	mov	r3, r0
 800ad30:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800ad32:	7dbb      	ldrb	r3, [r7, #22]
 800ad34:	2b00      	cmp	r3, #0
 800ad36:	d001      	beq.n	800ad3c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800ad38:	7dbb      	ldrb	r3, [r7, #22]
 800ad3a:	e000      	b.n	800ad3e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800ad3c:	2300      	movs	r3, #0
}
 800ad3e:	4618      	mov	r0, r3
 800ad40:	3718      	adds	r7, #24
 800ad42:	46bd      	mov	sp, r7
 800ad44:	bd80      	pop	{r7, pc}

0800ad46 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800ad46:	b580      	push	{r7, lr}
 800ad48:	b084      	sub	sp, #16
 800ad4a:	af00      	add	r7, sp, #0
 800ad4c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800ad4e:	2300      	movs	r3, #0
 800ad50:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	2201      	movs	r2, #1
 800ad56:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	2200      	movs	r2, #0
 800ad5e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	2200      	movs	r2, #0
 800ad66:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	2200      	movs	r2, #0
 800ad6c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	2200      	movs	r2, #0
 800ad74:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ad7e:	2b00      	cmp	r3, #0
 800ad80:	d014      	beq.n	800adac <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ad88:	685b      	ldr	r3, [r3, #4]
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	d00e      	beq.n	800adac <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ad94:	685b      	ldr	r3, [r3, #4]
 800ad96:	687a      	ldr	r2, [r7, #4]
 800ad98:	6852      	ldr	r2, [r2, #4]
 800ad9a:	b2d2      	uxtb	r2, r2
 800ad9c:	4611      	mov	r1, r2
 800ad9e:	6878      	ldr	r0, [r7, #4]
 800ada0:	4798      	blx	r3
 800ada2:	4603      	mov	r3, r0
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	d001      	beq.n	800adac <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800ada8:	2303      	movs	r3, #3
 800adaa:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800adac:	2340      	movs	r3, #64	; 0x40
 800adae:	2200      	movs	r2, #0
 800adb0:	2100      	movs	r1, #0
 800adb2:	6878      	ldr	r0, [r7, #4]
 800adb4:	f001 fbc4 	bl	800c540 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	2201      	movs	r2, #1
 800adbc:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	2240      	movs	r2, #64	; 0x40
 800adc4:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800adc8:	2340      	movs	r3, #64	; 0x40
 800adca:	2200      	movs	r2, #0
 800adcc:	2180      	movs	r1, #128	; 0x80
 800adce:	6878      	ldr	r0, [r7, #4]
 800add0:	f001 fbb6 	bl	800c540 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	2201      	movs	r2, #1
 800add8:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	2240      	movs	r2, #64	; 0x40
 800adde:	621a      	str	r2, [r3, #32]

  return ret;
 800ade0:	7bfb      	ldrb	r3, [r7, #15]
}
 800ade2:	4618      	mov	r0, r3
 800ade4:	3710      	adds	r7, #16
 800ade6:	46bd      	mov	sp, r7
 800ade8:	bd80      	pop	{r7, pc}

0800adea <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800adea:	b480      	push	{r7}
 800adec:	b083      	sub	sp, #12
 800adee:	af00      	add	r7, sp, #0
 800adf0:	6078      	str	r0, [r7, #4]
 800adf2:	460b      	mov	r3, r1
 800adf4:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	78fa      	ldrb	r2, [r7, #3]
 800adfa:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800adfc:	2300      	movs	r3, #0
}
 800adfe:	4618      	mov	r0, r3
 800ae00:	370c      	adds	r7, #12
 800ae02:	46bd      	mov	sp, r7
 800ae04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae08:	4770      	bx	lr

0800ae0a <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800ae0a:	b480      	push	{r7}
 800ae0c:	b083      	sub	sp, #12
 800ae0e:	af00      	add	r7, sp, #0
 800ae10:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ae18:	b2da      	uxtb	r2, r3
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	2204      	movs	r2, #4
 800ae24:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800ae28:	2300      	movs	r3, #0
}
 800ae2a:	4618      	mov	r0, r3
 800ae2c:	370c      	adds	r7, #12
 800ae2e:	46bd      	mov	sp, r7
 800ae30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae34:	4770      	bx	lr

0800ae36 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800ae36:	b480      	push	{r7}
 800ae38:	b083      	sub	sp, #12
 800ae3a:	af00      	add	r7, sp, #0
 800ae3c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ae44:	b2db      	uxtb	r3, r3
 800ae46:	2b04      	cmp	r3, #4
 800ae48:	d106      	bne.n	800ae58 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800ae50:	b2da      	uxtb	r2, r3
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800ae58:	2300      	movs	r3, #0
}
 800ae5a:	4618      	mov	r0, r3
 800ae5c:	370c      	adds	r7, #12
 800ae5e:	46bd      	mov	sp, r7
 800ae60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae64:	4770      	bx	lr

0800ae66 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800ae66:	b580      	push	{r7, lr}
 800ae68:	b082      	sub	sp, #8
 800ae6a:	af00      	add	r7, sp, #0
 800ae6c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ae74:	b2db      	uxtb	r3, r3
 800ae76:	2b03      	cmp	r3, #3
 800ae78:	d110      	bne.n	800ae9c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ae80:	2b00      	cmp	r3, #0
 800ae82:	d00b      	beq.n	800ae9c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ae8a:	69db      	ldr	r3, [r3, #28]
 800ae8c:	2b00      	cmp	r3, #0
 800ae8e:	d005      	beq.n	800ae9c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ae96:	69db      	ldr	r3, [r3, #28]
 800ae98:	6878      	ldr	r0, [r7, #4]
 800ae9a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800ae9c:	2300      	movs	r3, #0
}
 800ae9e:	4618      	mov	r0, r3
 800aea0:	3708      	adds	r7, #8
 800aea2:	46bd      	mov	sp, r7
 800aea4:	bd80      	pop	{r7, pc}

0800aea6 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800aea6:	b580      	push	{r7, lr}
 800aea8:	b082      	sub	sp, #8
 800aeaa:	af00      	add	r7, sp, #0
 800aeac:	6078      	str	r0, [r7, #4]
 800aeae:	460b      	mov	r3, r1
 800aeb0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	32ae      	adds	r2, #174	; 0xae
 800aebc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aec0:	2b00      	cmp	r3, #0
 800aec2:	d101      	bne.n	800aec8 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800aec4:	2303      	movs	r3, #3
 800aec6:	e01c      	b.n	800af02 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aece:	b2db      	uxtb	r3, r3
 800aed0:	2b03      	cmp	r3, #3
 800aed2:	d115      	bne.n	800af00 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	32ae      	adds	r2, #174	; 0xae
 800aede:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aee2:	6a1b      	ldr	r3, [r3, #32]
 800aee4:	2b00      	cmp	r3, #0
 800aee6:	d00b      	beq.n	800af00 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	32ae      	adds	r2, #174	; 0xae
 800aef2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aef6:	6a1b      	ldr	r3, [r3, #32]
 800aef8:	78fa      	ldrb	r2, [r7, #3]
 800aefa:	4611      	mov	r1, r2
 800aefc:	6878      	ldr	r0, [r7, #4]
 800aefe:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800af00:	2300      	movs	r3, #0
}
 800af02:	4618      	mov	r0, r3
 800af04:	3708      	adds	r7, #8
 800af06:	46bd      	mov	sp, r7
 800af08:	bd80      	pop	{r7, pc}

0800af0a <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800af0a:	b580      	push	{r7, lr}
 800af0c:	b082      	sub	sp, #8
 800af0e:	af00      	add	r7, sp, #0
 800af10:	6078      	str	r0, [r7, #4]
 800af12:	460b      	mov	r3, r1
 800af14:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	32ae      	adds	r2, #174	; 0xae
 800af20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af24:	2b00      	cmp	r3, #0
 800af26:	d101      	bne.n	800af2c <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800af28:	2303      	movs	r3, #3
 800af2a:	e01c      	b.n	800af66 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800af32:	b2db      	uxtb	r3, r3
 800af34:	2b03      	cmp	r3, #3
 800af36:	d115      	bne.n	800af64 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	32ae      	adds	r2, #174	; 0xae
 800af42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af48:	2b00      	cmp	r3, #0
 800af4a:	d00b      	beq.n	800af64 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	32ae      	adds	r2, #174	; 0xae
 800af56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af5c:	78fa      	ldrb	r2, [r7, #3]
 800af5e:	4611      	mov	r1, r2
 800af60:	6878      	ldr	r0, [r7, #4]
 800af62:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800af64:	2300      	movs	r3, #0
}
 800af66:	4618      	mov	r0, r3
 800af68:	3708      	adds	r7, #8
 800af6a:	46bd      	mov	sp, r7
 800af6c:	bd80      	pop	{r7, pc}

0800af6e <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800af6e:	b480      	push	{r7}
 800af70:	b083      	sub	sp, #12
 800af72:	af00      	add	r7, sp, #0
 800af74:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800af76:	2300      	movs	r3, #0
}
 800af78:	4618      	mov	r0, r3
 800af7a:	370c      	adds	r7, #12
 800af7c:	46bd      	mov	sp, r7
 800af7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af82:	4770      	bx	lr

0800af84 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800af84:	b580      	push	{r7, lr}
 800af86:	b084      	sub	sp, #16
 800af88:	af00      	add	r7, sp, #0
 800af8a:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800af8c:	2300      	movs	r3, #0
 800af8e:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	2201      	movs	r2, #1
 800af94:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800af9e:	2b00      	cmp	r3, #0
 800afa0:	d00e      	beq.n	800afc0 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800afa8:	685b      	ldr	r3, [r3, #4]
 800afaa:	687a      	ldr	r2, [r7, #4]
 800afac:	6852      	ldr	r2, [r2, #4]
 800afae:	b2d2      	uxtb	r2, r2
 800afb0:	4611      	mov	r1, r2
 800afb2:	6878      	ldr	r0, [r7, #4]
 800afb4:	4798      	blx	r3
 800afb6:	4603      	mov	r3, r0
 800afb8:	2b00      	cmp	r3, #0
 800afba:	d001      	beq.n	800afc0 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800afbc:	2303      	movs	r3, #3
 800afbe:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800afc0:	7bfb      	ldrb	r3, [r7, #15]
}
 800afc2:	4618      	mov	r0, r3
 800afc4:	3710      	adds	r7, #16
 800afc6:	46bd      	mov	sp, r7
 800afc8:	bd80      	pop	{r7, pc}

0800afca <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800afca:	b480      	push	{r7}
 800afcc:	b083      	sub	sp, #12
 800afce:	af00      	add	r7, sp, #0
 800afd0:	6078      	str	r0, [r7, #4]
 800afd2:	460b      	mov	r3, r1
 800afd4:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800afd6:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800afd8:	4618      	mov	r0, r3
 800afda:	370c      	adds	r7, #12
 800afdc:	46bd      	mov	sp, r7
 800afde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afe2:	4770      	bx	lr

0800afe4 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800afe4:	b480      	push	{r7}
 800afe6:	b083      	sub	sp, #12
 800afe8:	af00      	add	r7, sp, #0
 800afea:	6078      	str	r0, [r7, #4]
 800afec:	460b      	mov	r3, r1
 800afee:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800aff0:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800aff2:	4618      	mov	r0, r3
 800aff4:	370c      	adds	r7, #12
 800aff6:	46bd      	mov	sp, r7
 800aff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800affc:	4770      	bx	lr

0800affe <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800affe:	b580      	push	{r7, lr}
 800b000:	b086      	sub	sp, #24
 800b002:	af00      	add	r7, sp, #0
 800b004:	6078      	str	r0, [r7, #4]
 800b006:	460b      	mov	r3, r1
 800b008:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800b012:	2300      	movs	r3, #0
 800b014:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800b016:	68fb      	ldr	r3, [r7, #12]
 800b018:	885b      	ldrh	r3, [r3, #2]
 800b01a:	b29a      	uxth	r2, r3
 800b01c:	68fb      	ldr	r3, [r7, #12]
 800b01e:	781b      	ldrb	r3, [r3, #0]
 800b020:	b29b      	uxth	r3, r3
 800b022:	429a      	cmp	r2, r3
 800b024:	d920      	bls.n	800b068 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800b026:	68fb      	ldr	r3, [r7, #12]
 800b028:	781b      	ldrb	r3, [r3, #0]
 800b02a:	b29b      	uxth	r3, r3
 800b02c:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800b02e:	e013      	b.n	800b058 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800b030:	f107 030a 	add.w	r3, r7, #10
 800b034:	4619      	mov	r1, r3
 800b036:	6978      	ldr	r0, [r7, #20]
 800b038:	f000 f81b 	bl	800b072 <USBD_GetNextDesc>
 800b03c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800b03e:	697b      	ldr	r3, [r7, #20]
 800b040:	785b      	ldrb	r3, [r3, #1]
 800b042:	2b05      	cmp	r3, #5
 800b044:	d108      	bne.n	800b058 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800b046:	697b      	ldr	r3, [r7, #20]
 800b048:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800b04a:	693b      	ldr	r3, [r7, #16]
 800b04c:	789b      	ldrb	r3, [r3, #2]
 800b04e:	78fa      	ldrb	r2, [r7, #3]
 800b050:	429a      	cmp	r2, r3
 800b052:	d008      	beq.n	800b066 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800b054:	2300      	movs	r3, #0
 800b056:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800b058:	68fb      	ldr	r3, [r7, #12]
 800b05a:	885b      	ldrh	r3, [r3, #2]
 800b05c:	b29a      	uxth	r2, r3
 800b05e:	897b      	ldrh	r3, [r7, #10]
 800b060:	429a      	cmp	r2, r3
 800b062:	d8e5      	bhi.n	800b030 <USBD_GetEpDesc+0x32>
 800b064:	e000      	b.n	800b068 <USBD_GetEpDesc+0x6a>
          break;
 800b066:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800b068:	693b      	ldr	r3, [r7, #16]
}
 800b06a:	4618      	mov	r0, r3
 800b06c:	3718      	adds	r7, #24
 800b06e:	46bd      	mov	sp, r7
 800b070:	bd80      	pop	{r7, pc}

0800b072 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800b072:	b480      	push	{r7}
 800b074:	b085      	sub	sp, #20
 800b076:	af00      	add	r7, sp, #0
 800b078:	6078      	str	r0, [r7, #4]
 800b07a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800b080:	683b      	ldr	r3, [r7, #0]
 800b082:	881a      	ldrh	r2, [r3, #0]
 800b084:	68fb      	ldr	r3, [r7, #12]
 800b086:	781b      	ldrb	r3, [r3, #0]
 800b088:	b29b      	uxth	r3, r3
 800b08a:	4413      	add	r3, r2
 800b08c:	b29a      	uxth	r2, r3
 800b08e:	683b      	ldr	r3, [r7, #0]
 800b090:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800b092:	68fb      	ldr	r3, [r7, #12]
 800b094:	781b      	ldrb	r3, [r3, #0]
 800b096:	461a      	mov	r2, r3
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	4413      	add	r3, r2
 800b09c:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800b09e:	68fb      	ldr	r3, [r7, #12]
}
 800b0a0:	4618      	mov	r0, r3
 800b0a2:	3714      	adds	r7, #20
 800b0a4:	46bd      	mov	sp, r7
 800b0a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0aa:	4770      	bx	lr

0800b0ac <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800b0ac:	b480      	push	{r7}
 800b0ae:	b087      	sub	sp, #28
 800b0b0:	af00      	add	r7, sp, #0
 800b0b2:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800b0b8:	697b      	ldr	r3, [r7, #20]
 800b0ba:	781b      	ldrb	r3, [r3, #0]
 800b0bc:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800b0be:	697b      	ldr	r3, [r7, #20]
 800b0c0:	3301      	adds	r3, #1
 800b0c2:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800b0c4:	697b      	ldr	r3, [r7, #20]
 800b0c6:	781b      	ldrb	r3, [r3, #0]
 800b0c8:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800b0ca:	8a3b      	ldrh	r3, [r7, #16]
 800b0cc:	021b      	lsls	r3, r3, #8
 800b0ce:	b21a      	sxth	r2, r3
 800b0d0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800b0d4:	4313      	orrs	r3, r2
 800b0d6:	b21b      	sxth	r3, r3
 800b0d8:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800b0da:	89fb      	ldrh	r3, [r7, #14]
}
 800b0dc:	4618      	mov	r0, r3
 800b0de:	371c      	adds	r7, #28
 800b0e0:	46bd      	mov	sp, r7
 800b0e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0e6:	4770      	bx	lr

0800b0e8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b0e8:	b580      	push	{r7, lr}
 800b0ea:	b084      	sub	sp, #16
 800b0ec:	af00      	add	r7, sp, #0
 800b0ee:	6078      	str	r0, [r7, #4]
 800b0f0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b0f2:	2300      	movs	r3, #0
 800b0f4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b0f6:	683b      	ldr	r3, [r7, #0]
 800b0f8:	781b      	ldrb	r3, [r3, #0]
 800b0fa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b0fe:	2b40      	cmp	r3, #64	; 0x40
 800b100:	d005      	beq.n	800b10e <USBD_StdDevReq+0x26>
 800b102:	2b40      	cmp	r3, #64	; 0x40
 800b104:	d857      	bhi.n	800b1b6 <USBD_StdDevReq+0xce>
 800b106:	2b00      	cmp	r3, #0
 800b108:	d00f      	beq.n	800b12a <USBD_StdDevReq+0x42>
 800b10a:	2b20      	cmp	r3, #32
 800b10c:	d153      	bne.n	800b1b6 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	32ae      	adds	r2, #174	; 0xae
 800b118:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b11c:	689b      	ldr	r3, [r3, #8]
 800b11e:	6839      	ldr	r1, [r7, #0]
 800b120:	6878      	ldr	r0, [r7, #4]
 800b122:	4798      	blx	r3
 800b124:	4603      	mov	r3, r0
 800b126:	73fb      	strb	r3, [r7, #15]
      break;
 800b128:	e04a      	b.n	800b1c0 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b12a:	683b      	ldr	r3, [r7, #0]
 800b12c:	785b      	ldrb	r3, [r3, #1]
 800b12e:	2b09      	cmp	r3, #9
 800b130:	d83b      	bhi.n	800b1aa <USBD_StdDevReq+0xc2>
 800b132:	a201      	add	r2, pc, #4	; (adr r2, 800b138 <USBD_StdDevReq+0x50>)
 800b134:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b138:	0800b18d 	.word	0x0800b18d
 800b13c:	0800b1a1 	.word	0x0800b1a1
 800b140:	0800b1ab 	.word	0x0800b1ab
 800b144:	0800b197 	.word	0x0800b197
 800b148:	0800b1ab 	.word	0x0800b1ab
 800b14c:	0800b16b 	.word	0x0800b16b
 800b150:	0800b161 	.word	0x0800b161
 800b154:	0800b1ab 	.word	0x0800b1ab
 800b158:	0800b183 	.word	0x0800b183
 800b15c:	0800b175 	.word	0x0800b175
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800b160:	6839      	ldr	r1, [r7, #0]
 800b162:	6878      	ldr	r0, [r7, #4]
 800b164:	f000 fa3c 	bl	800b5e0 <USBD_GetDescriptor>
          break;
 800b168:	e024      	b.n	800b1b4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800b16a:	6839      	ldr	r1, [r7, #0]
 800b16c:	6878      	ldr	r0, [r7, #4]
 800b16e:	f000 fba1 	bl	800b8b4 <USBD_SetAddress>
          break;
 800b172:	e01f      	b.n	800b1b4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800b174:	6839      	ldr	r1, [r7, #0]
 800b176:	6878      	ldr	r0, [r7, #4]
 800b178:	f000 fbe0 	bl	800b93c <USBD_SetConfig>
 800b17c:	4603      	mov	r3, r0
 800b17e:	73fb      	strb	r3, [r7, #15]
          break;
 800b180:	e018      	b.n	800b1b4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800b182:	6839      	ldr	r1, [r7, #0]
 800b184:	6878      	ldr	r0, [r7, #4]
 800b186:	f000 fc83 	bl	800ba90 <USBD_GetConfig>
          break;
 800b18a:	e013      	b.n	800b1b4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800b18c:	6839      	ldr	r1, [r7, #0]
 800b18e:	6878      	ldr	r0, [r7, #4]
 800b190:	f000 fcb4 	bl	800bafc <USBD_GetStatus>
          break;
 800b194:	e00e      	b.n	800b1b4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800b196:	6839      	ldr	r1, [r7, #0]
 800b198:	6878      	ldr	r0, [r7, #4]
 800b19a:	f000 fce3 	bl	800bb64 <USBD_SetFeature>
          break;
 800b19e:	e009      	b.n	800b1b4 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800b1a0:	6839      	ldr	r1, [r7, #0]
 800b1a2:	6878      	ldr	r0, [r7, #4]
 800b1a4:	f000 fd07 	bl	800bbb6 <USBD_ClrFeature>
          break;
 800b1a8:	e004      	b.n	800b1b4 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800b1aa:	6839      	ldr	r1, [r7, #0]
 800b1ac:	6878      	ldr	r0, [r7, #4]
 800b1ae:	f000 fd5e 	bl	800bc6e <USBD_CtlError>
          break;
 800b1b2:	bf00      	nop
      }
      break;
 800b1b4:	e004      	b.n	800b1c0 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800b1b6:	6839      	ldr	r1, [r7, #0]
 800b1b8:	6878      	ldr	r0, [r7, #4]
 800b1ba:	f000 fd58 	bl	800bc6e <USBD_CtlError>
      break;
 800b1be:	bf00      	nop
  }

  return ret;
 800b1c0:	7bfb      	ldrb	r3, [r7, #15]
}
 800b1c2:	4618      	mov	r0, r3
 800b1c4:	3710      	adds	r7, #16
 800b1c6:	46bd      	mov	sp, r7
 800b1c8:	bd80      	pop	{r7, pc}
 800b1ca:	bf00      	nop

0800b1cc <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b1cc:	b580      	push	{r7, lr}
 800b1ce:	b084      	sub	sp, #16
 800b1d0:	af00      	add	r7, sp, #0
 800b1d2:	6078      	str	r0, [r7, #4]
 800b1d4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b1d6:	2300      	movs	r3, #0
 800b1d8:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b1da:	683b      	ldr	r3, [r7, #0]
 800b1dc:	781b      	ldrb	r3, [r3, #0]
 800b1de:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b1e2:	2b40      	cmp	r3, #64	; 0x40
 800b1e4:	d005      	beq.n	800b1f2 <USBD_StdItfReq+0x26>
 800b1e6:	2b40      	cmp	r3, #64	; 0x40
 800b1e8:	d852      	bhi.n	800b290 <USBD_StdItfReq+0xc4>
 800b1ea:	2b00      	cmp	r3, #0
 800b1ec:	d001      	beq.n	800b1f2 <USBD_StdItfReq+0x26>
 800b1ee:	2b20      	cmp	r3, #32
 800b1f0:	d14e      	bne.n	800b290 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b1f8:	b2db      	uxtb	r3, r3
 800b1fa:	3b01      	subs	r3, #1
 800b1fc:	2b02      	cmp	r3, #2
 800b1fe:	d840      	bhi.n	800b282 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800b200:	683b      	ldr	r3, [r7, #0]
 800b202:	889b      	ldrh	r3, [r3, #4]
 800b204:	b2db      	uxtb	r3, r3
 800b206:	2b01      	cmp	r3, #1
 800b208:	d836      	bhi.n	800b278 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800b20a:	683b      	ldr	r3, [r7, #0]
 800b20c:	889b      	ldrh	r3, [r3, #4]
 800b20e:	b2db      	uxtb	r3, r3
 800b210:	4619      	mov	r1, r3
 800b212:	6878      	ldr	r0, [r7, #4]
 800b214:	f7ff fed9 	bl	800afca <USBD_CoreFindIF>
 800b218:	4603      	mov	r3, r0
 800b21a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b21c:	7bbb      	ldrb	r3, [r7, #14]
 800b21e:	2bff      	cmp	r3, #255	; 0xff
 800b220:	d01d      	beq.n	800b25e <USBD_StdItfReq+0x92>
 800b222:	7bbb      	ldrb	r3, [r7, #14]
 800b224:	2b00      	cmp	r3, #0
 800b226:	d11a      	bne.n	800b25e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800b228:	7bba      	ldrb	r2, [r7, #14]
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	32ae      	adds	r2, #174	; 0xae
 800b22e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b232:	689b      	ldr	r3, [r3, #8]
 800b234:	2b00      	cmp	r3, #0
 800b236:	d00f      	beq.n	800b258 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800b238:	7bba      	ldrb	r2, [r7, #14]
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800b240:	7bba      	ldrb	r2, [r7, #14]
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	32ae      	adds	r2, #174	; 0xae
 800b246:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b24a:	689b      	ldr	r3, [r3, #8]
 800b24c:	6839      	ldr	r1, [r7, #0]
 800b24e:	6878      	ldr	r0, [r7, #4]
 800b250:	4798      	blx	r3
 800b252:	4603      	mov	r3, r0
 800b254:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800b256:	e004      	b.n	800b262 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800b258:	2303      	movs	r3, #3
 800b25a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800b25c:	e001      	b.n	800b262 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800b25e:	2303      	movs	r3, #3
 800b260:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800b262:	683b      	ldr	r3, [r7, #0]
 800b264:	88db      	ldrh	r3, [r3, #6]
 800b266:	2b00      	cmp	r3, #0
 800b268:	d110      	bne.n	800b28c <USBD_StdItfReq+0xc0>
 800b26a:	7bfb      	ldrb	r3, [r7, #15]
 800b26c:	2b00      	cmp	r3, #0
 800b26e:	d10d      	bne.n	800b28c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800b270:	6878      	ldr	r0, [r7, #4]
 800b272:	f000 fdaa 	bl	800bdca <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800b276:	e009      	b.n	800b28c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800b278:	6839      	ldr	r1, [r7, #0]
 800b27a:	6878      	ldr	r0, [r7, #4]
 800b27c:	f000 fcf7 	bl	800bc6e <USBD_CtlError>
          break;
 800b280:	e004      	b.n	800b28c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800b282:	6839      	ldr	r1, [r7, #0]
 800b284:	6878      	ldr	r0, [r7, #4]
 800b286:	f000 fcf2 	bl	800bc6e <USBD_CtlError>
          break;
 800b28a:	e000      	b.n	800b28e <USBD_StdItfReq+0xc2>
          break;
 800b28c:	bf00      	nop
      }
      break;
 800b28e:	e004      	b.n	800b29a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800b290:	6839      	ldr	r1, [r7, #0]
 800b292:	6878      	ldr	r0, [r7, #4]
 800b294:	f000 fceb 	bl	800bc6e <USBD_CtlError>
      break;
 800b298:	bf00      	nop
  }

  return ret;
 800b29a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b29c:	4618      	mov	r0, r3
 800b29e:	3710      	adds	r7, #16
 800b2a0:	46bd      	mov	sp, r7
 800b2a2:	bd80      	pop	{r7, pc}

0800b2a4 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b2a4:	b580      	push	{r7, lr}
 800b2a6:	b084      	sub	sp, #16
 800b2a8:	af00      	add	r7, sp, #0
 800b2aa:	6078      	str	r0, [r7, #4]
 800b2ac:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800b2ae:	2300      	movs	r3, #0
 800b2b0:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800b2b2:	683b      	ldr	r3, [r7, #0]
 800b2b4:	889b      	ldrh	r3, [r3, #4]
 800b2b6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b2b8:	683b      	ldr	r3, [r7, #0]
 800b2ba:	781b      	ldrb	r3, [r3, #0]
 800b2bc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b2c0:	2b40      	cmp	r3, #64	; 0x40
 800b2c2:	d007      	beq.n	800b2d4 <USBD_StdEPReq+0x30>
 800b2c4:	2b40      	cmp	r3, #64	; 0x40
 800b2c6:	f200 817f 	bhi.w	800b5c8 <USBD_StdEPReq+0x324>
 800b2ca:	2b00      	cmp	r3, #0
 800b2cc:	d02a      	beq.n	800b324 <USBD_StdEPReq+0x80>
 800b2ce:	2b20      	cmp	r3, #32
 800b2d0:	f040 817a 	bne.w	800b5c8 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800b2d4:	7bbb      	ldrb	r3, [r7, #14]
 800b2d6:	4619      	mov	r1, r3
 800b2d8:	6878      	ldr	r0, [r7, #4]
 800b2da:	f7ff fe83 	bl	800afe4 <USBD_CoreFindEP>
 800b2de:	4603      	mov	r3, r0
 800b2e0:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b2e2:	7b7b      	ldrb	r3, [r7, #13]
 800b2e4:	2bff      	cmp	r3, #255	; 0xff
 800b2e6:	f000 8174 	beq.w	800b5d2 <USBD_StdEPReq+0x32e>
 800b2ea:	7b7b      	ldrb	r3, [r7, #13]
 800b2ec:	2b00      	cmp	r3, #0
 800b2ee:	f040 8170 	bne.w	800b5d2 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800b2f2:	7b7a      	ldrb	r2, [r7, #13]
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800b2fa:	7b7a      	ldrb	r2, [r7, #13]
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	32ae      	adds	r2, #174	; 0xae
 800b300:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b304:	689b      	ldr	r3, [r3, #8]
 800b306:	2b00      	cmp	r3, #0
 800b308:	f000 8163 	beq.w	800b5d2 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800b30c:	7b7a      	ldrb	r2, [r7, #13]
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	32ae      	adds	r2, #174	; 0xae
 800b312:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b316:	689b      	ldr	r3, [r3, #8]
 800b318:	6839      	ldr	r1, [r7, #0]
 800b31a:	6878      	ldr	r0, [r7, #4]
 800b31c:	4798      	blx	r3
 800b31e:	4603      	mov	r3, r0
 800b320:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800b322:	e156      	b.n	800b5d2 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b324:	683b      	ldr	r3, [r7, #0]
 800b326:	785b      	ldrb	r3, [r3, #1]
 800b328:	2b03      	cmp	r3, #3
 800b32a:	d008      	beq.n	800b33e <USBD_StdEPReq+0x9a>
 800b32c:	2b03      	cmp	r3, #3
 800b32e:	f300 8145 	bgt.w	800b5bc <USBD_StdEPReq+0x318>
 800b332:	2b00      	cmp	r3, #0
 800b334:	f000 809b 	beq.w	800b46e <USBD_StdEPReq+0x1ca>
 800b338:	2b01      	cmp	r3, #1
 800b33a:	d03c      	beq.n	800b3b6 <USBD_StdEPReq+0x112>
 800b33c:	e13e      	b.n	800b5bc <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b344:	b2db      	uxtb	r3, r3
 800b346:	2b02      	cmp	r3, #2
 800b348:	d002      	beq.n	800b350 <USBD_StdEPReq+0xac>
 800b34a:	2b03      	cmp	r3, #3
 800b34c:	d016      	beq.n	800b37c <USBD_StdEPReq+0xd8>
 800b34e:	e02c      	b.n	800b3aa <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b350:	7bbb      	ldrb	r3, [r7, #14]
 800b352:	2b00      	cmp	r3, #0
 800b354:	d00d      	beq.n	800b372 <USBD_StdEPReq+0xce>
 800b356:	7bbb      	ldrb	r3, [r7, #14]
 800b358:	2b80      	cmp	r3, #128	; 0x80
 800b35a:	d00a      	beq.n	800b372 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800b35c:	7bbb      	ldrb	r3, [r7, #14]
 800b35e:	4619      	mov	r1, r3
 800b360:	6878      	ldr	r0, [r7, #4]
 800b362:	f001 f951 	bl	800c608 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b366:	2180      	movs	r1, #128	; 0x80
 800b368:	6878      	ldr	r0, [r7, #4]
 800b36a:	f001 f94d 	bl	800c608 <USBD_LL_StallEP>
 800b36e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b370:	e020      	b.n	800b3b4 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800b372:	6839      	ldr	r1, [r7, #0]
 800b374:	6878      	ldr	r0, [r7, #4]
 800b376:	f000 fc7a 	bl	800bc6e <USBD_CtlError>
              break;
 800b37a:	e01b      	b.n	800b3b4 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b37c:	683b      	ldr	r3, [r7, #0]
 800b37e:	885b      	ldrh	r3, [r3, #2]
 800b380:	2b00      	cmp	r3, #0
 800b382:	d10e      	bne.n	800b3a2 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800b384:	7bbb      	ldrb	r3, [r7, #14]
 800b386:	2b00      	cmp	r3, #0
 800b388:	d00b      	beq.n	800b3a2 <USBD_StdEPReq+0xfe>
 800b38a:	7bbb      	ldrb	r3, [r7, #14]
 800b38c:	2b80      	cmp	r3, #128	; 0x80
 800b38e:	d008      	beq.n	800b3a2 <USBD_StdEPReq+0xfe>
 800b390:	683b      	ldr	r3, [r7, #0]
 800b392:	88db      	ldrh	r3, [r3, #6]
 800b394:	2b00      	cmp	r3, #0
 800b396:	d104      	bne.n	800b3a2 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800b398:	7bbb      	ldrb	r3, [r7, #14]
 800b39a:	4619      	mov	r1, r3
 800b39c:	6878      	ldr	r0, [r7, #4]
 800b39e:	f001 f933 	bl	800c608 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800b3a2:	6878      	ldr	r0, [r7, #4]
 800b3a4:	f000 fd11 	bl	800bdca <USBD_CtlSendStatus>

              break;
 800b3a8:	e004      	b.n	800b3b4 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800b3aa:	6839      	ldr	r1, [r7, #0]
 800b3ac:	6878      	ldr	r0, [r7, #4]
 800b3ae:	f000 fc5e 	bl	800bc6e <USBD_CtlError>
              break;
 800b3b2:	bf00      	nop
          }
          break;
 800b3b4:	e107      	b.n	800b5c6 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b3bc:	b2db      	uxtb	r3, r3
 800b3be:	2b02      	cmp	r3, #2
 800b3c0:	d002      	beq.n	800b3c8 <USBD_StdEPReq+0x124>
 800b3c2:	2b03      	cmp	r3, #3
 800b3c4:	d016      	beq.n	800b3f4 <USBD_StdEPReq+0x150>
 800b3c6:	e04b      	b.n	800b460 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b3c8:	7bbb      	ldrb	r3, [r7, #14]
 800b3ca:	2b00      	cmp	r3, #0
 800b3cc:	d00d      	beq.n	800b3ea <USBD_StdEPReq+0x146>
 800b3ce:	7bbb      	ldrb	r3, [r7, #14]
 800b3d0:	2b80      	cmp	r3, #128	; 0x80
 800b3d2:	d00a      	beq.n	800b3ea <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800b3d4:	7bbb      	ldrb	r3, [r7, #14]
 800b3d6:	4619      	mov	r1, r3
 800b3d8:	6878      	ldr	r0, [r7, #4]
 800b3da:	f001 f915 	bl	800c608 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b3de:	2180      	movs	r1, #128	; 0x80
 800b3e0:	6878      	ldr	r0, [r7, #4]
 800b3e2:	f001 f911 	bl	800c608 <USBD_LL_StallEP>
 800b3e6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b3e8:	e040      	b.n	800b46c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800b3ea:	6839      	ldr	r1, [r7, #0]
 800b3ec:	6878      	ldr	r0, [r7, #4]
 800b3ee:	f000 fc3e 	bl	800bc6e <USBD_CtlError>
              break;
 800b3f2:	e03b      	b.n	800b46c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b3f4:	683b      	ldr	r3, [r7, #0]
 800b3f6:	885b      	ldrh	r3, [r3, #2]
 800b3f8:	2b00      	cmp	r3, #0
 800b3fa:	d136      	bne.n	800b46a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800b3fc:	7bbb      	ldrb	r3, [r7, #14]
 800b3fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b402:	2b00      	cmp	r3, #0
 800b404:	d004      	beq.n	800b410 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800b406:	7bbb      	ldrb	r3, [r7, #14]
 800b408:	4619      	mov	r1, r3
 800b40a:	6878      	ldr	r0, [r7, #4]
 800b40c:	f001 f91b 	bl	800c646 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800b410:	6878      	ldr	r0, [r7, #4]
 800b412:	f000 fcda 	bl	800bdca <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800b416:	7bbb      	ldrb	r3, [r7, #14]
 800b418:	4619      	mov	r1, r3
 800b41a:	6878      	ldr	r0, [r7, #4]
 800b41c:	f7ff fde2 	bl	800afe4 <USBD_CoreFindEP>
 800b420:	4603      	mov	r3, r0
 800b422:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b424:	7b7b      	ldrb	r3, [r7, #13]
 800b426:	2bff      	cmp	r3, #255	; 0xff
 800b428:	d01f      	beq.n	800b46a <USBD_StdEPReq+0x1c6>
 800b42a:	7b7b      	ldrb	r3, [r7, #13]
 800b42c:	2b00      	cmp	r3, #0
 800b42e:	d11c      	bne.n	800b46a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800b430:	7b7a      	ldrb	r2, [r7, #13]
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800b438:	7b7a      	ldrb	r2, [r7, #13]
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	32ae      	adds	r2, #174	; 0xae
 800b43e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b442:	689b      	ldr	r3, [r3, #8]
 800b444:	2b00      	cmp	r3, #0
 800b446:	d010      	beq.n	800b46a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800b448:	7b7a      	ldrb	r2, [r7, #13]
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	32ae      	adds	r2, #174	; 0xae
 800b44e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b452:	689b      	ldr	r3, [r3, #8]
 800b454:	6839      	ldr	r1, [r7, #0]
 800b456:	6878      	ldr	r0, [r7, #4]
 800b458:	4798      	blx	r3
 800b45a:	4603      	mov	r3, r0
 800b45c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800b45e:	e004      	b.n	800b46a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800b460:	6839      	ldr	r1, [r7, #0]
 800b462:	6878      	ldr	r0, [r7, #4]
 800b464:	f000 fc03 	bl	800bc6e <USBD_CtlError>
              break;
 800b468:	e000      	b.n	800b46c <USBD_StdEPReq+0x1c8>
              break;
 800b46a:	bf00      	nop
          }
          break;
 800b46c:	e0ab      	b.n	800b5c6 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b474:	b2db      	uxtb	r3, r3
 800b476:	2b02      	cmp	r3, #2
 800b478:	d002      	beq.n	800b480 <USBD_StdEPReq+0x1dc>
 800b47a:	2b03      	cmp	r3, #3
 800b47c:	d032      	beq.n	800b4e4 <USBD_StdEPReq+0x240>
 800b47e:	e097      	b.n	800b5b0 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b480:	7bbb      	ldrb	r3, [r7, #14]
 800b482:	2b00      	cmp	r3, #0
 800b484:	d007      	beq.n	800b496 <USBD_StdEPReq+0x1f2>
 800b486:	7bbb      	ldrb	r3, [r7, #14]
 800b488:	2b80      	cmp	r3, #128	; 0x80
 800b48a:	d004      	beq.n	800b496 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800b48c:	6839      	ldr	r1, [r7, #0]
 800b48e:	6878      	ldr	r0, [r7, #4]
 800b490:	f000 fbed 	bl	800bc6e <USBD_CtlError>
                break;
 800b494:	e091      	b.n	800b5ba <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b496:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b49a:	2b00      	cmp	r3, #0
 800b49c:	da0b      	bge.n	800b4b6 <USBD_StdEPReq+0x212>
 800b49e:	7bbb      	ldrb	r3, [r7, #14]
 800b4a0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b4a4:	4613      	mov	r3, r2
 800b4a6:	009b      	lsls	r3, r3, #2
 800b4a8:	4413      	add	r3, r2
 800b4aa:	009b      	lsls	r3, r3, #2
 800b4ac:	3310      	adds	r3, #16
 800b4ae:	687a      	ldr	r2, [r7, #4]
 800b4b0:	4413      	add	r3, r2
 800b4b2:	3304      	adds	r3, #4
 800b4b4:	e00b      	b.n	800b4ce <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b4b6:	7bbb      	ldrb	r3, [r7, #14]
 800b4b8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b4bc:	4613      	mov	r3, r2
 800b4be:	009b      	lsls	r3, r3, #2
 800b4c0:	4413      	add	r3, r2
 800b4c2:	009b      	lsls	r3, r3, #2
 800b4c4:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b4c8:	687a      	ldr	r2, [r7, #4]
 800b4ca:	4413      	add	r3, r2
 800b4cc:	3304      	adds	r3, #4
 800b4ce:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800b4d0:	68bb      	ldr	r3, [r7, #8]
 800b4d2:	2200      	movs	r2, #0
 800b4d4:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b4d6:	68bb      	ldr	r3, [r7, #8]
 800b4d8:	2202      	movs	r2, #2
 800b4da:	4619      	mov	r1, r3
 800b4dc:	6878      	ldr	r0, [r7, #4]
 800b4de:	f000 fc37 	bl	800bd50 <USBD_CtlSendData>
              break;
 800b4e2:	e06a      	b.n	800b5ba <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800b4e4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b4e8:	2b00      	cmp	r3, #0
 800b4ea:	da11      	bge.n	800b510 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800b4ec:	7bbb      	ldrb	r3, [r7, #14]
 800b4ee:	f003 020f 	and.w	r2, r3, #15
 800b4f2:	6879      	ldr	r1, [r7, #4]
 800b4f4:	4613      	mov	r3, r2
 800b4f6:	009b      	lsls	r3, r3, #2
 800b4f8:	4413      	add	r3, r2
 800b4fa:	009b      	lsls	r3, r3, #2
 800b4fc:	440b      	add	r3, r1
 800b4fe:	3324      	adds	r3, #36	; 0x24
 800b500:	881b      	ldrh	r3, [r3, #0]
 800b502:	2b00      	cmp	r3, #0
 800b504:	d117      	bne.n	800b536 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800b506:	6839      	ldr	r1, [r7, #0]
 800b508:	6878      	ldr	r0, [r7, #4]
 800b50a:	f000 fbb0 	bl	800bc6e <USBD_CtlError>
                  break;
 800b50e:	e054      	b.n	800b5ba <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800b510:	7bbb      	ldrb	r3, [r7, #14]
 800b512:	f003 020f 	and.w	r2, r3, #15
 800b516:	6879      	ldr	r1, [r7, #4]
 800b518:	4613      	mov	r3, r2
 800b51a:	009b      	lsls	r3, r3, #2
 800b51c:	4413      	add	r3, r2
 800b51e:	009b      	lsls	r3, r3, #2
 800b520:	440b      	add	r3, r1
 800b522:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800b526:	881b      	ldrh	r3, [r3, #0]
 800b528:	2b00      	cmp	r3, #0
 800b52a:	d104      	bne.n	800b536 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800b52c:	6839      	ldr	r1, [r7, #0]
 800b52e:	6878      	ldr	r0, [r7, #4]
 800b530:	f000 fb9d 	bl	800bc6e <USBD_CtlError>
                  break;
 800b534:	e041      	b.n	800b5ba <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b536:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b53a:	2b00      	cmp	r3, #0
 800b53c:	da0b      	bge.n	800b556 <USBD_StdEPReq+0x2b2>
 800b53e:	7bbb      	ldrb	r3, [r7, #14]
 800b540:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b544:	4613      	mov	r3, r2
 800b546:	009b      	lsls	r3, r3, #2
 800b548:	4413      	add	r3, r2
 800b54a:	009b      	lsls	r3, r3, #2
 800b54c:	3310      	adds	r3, #16
 800b54e:	687a      	ldr	r2, [r7, #4]
 800b550:	4413      	add	r3, r2
 800b552:	3304      	adds	r3, #4
 800b554:	e00b      	b.n	800b56e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b556:	7bbb      	ldrb	r3, [r7, #14]
 800b558:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b55c:	4613      	mov	r3, r2
 800b55e:	009b      	lsls	r3, r3, #2
 800b560:	4413      	add	r3, r2
 800b562:	009b      	lsls	r3, r3, #2
 800b564:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b568:	687a      	ldr	r2, [r7, #4]
 800b56a:	4413      	add	r3, r2
 800b56c:	3304      	adds	r3, #4
 800b56e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800b570:	7bbb      	ldrb	r3, [r7, #14]
 800b572:	2b00      	cmp	r3, #0
 800b574:	d002      	beq.n	800b57c <USBD_StdEPReq+0x2d8>
 800b576:	7bbb      	ldrb	r3, [r7, #14]
 800b578:	2b80      	cmp	r3, #128	; 0x80
 800b57a:	d103      	bne.n	800b584 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800b57c:	68bb      	ldr	r3, [r7, #8]
 800b57e:	2200      	movs	r2, #0
 800b580:	601a      	str	r2, [r3, #0]
 800b582:	e00e      	b.n	800b5a2 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800b584:	7bbb      	ldrb	r3, [r7, #14]
 800b586:	4619      	mov	r1, r3
 800b588:	6878      	ldr	r0, [r7, #4]
 800b58a:	f001 f87b 	bl	800c684 <USBD_LL_IsStallEP>
 800b58e:	4603      	mov	r3, r0
 800b590:	2b00      	cmp	r3, #0
 800b592:	d003      	beq.n	800b59c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800b594:	68bb      	ldr	r3, [r7, #8]
 800b596:	2201      	movs	r2, #1
 800b598:	601a      	str	r2, [r3, #0]
 800b59a:	e002      	b.n	800b5a2 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800b59c:	68bb      	ldr	r3, [r7, #8]
 800b59e:	2200      	movs	r2, #0
 800b5a0:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b5a2:	68bb      	ldr	r3, [r7, #8]
 800b5a4:	2202      	movs	r2, #2
 800b5a6:	4619      	mov	r1, r3
 800b5a8:	6878      	ldr	r0, [r7, #4]
 800b5aa:	f000 fbd1 	bl	800bd50 <USBD_CtlSendData>
              break;
 800b5ae:	e004      	b.n	800b5ba <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800b5b0:	6839      	ldr	r1, [r7, #0]
 800b5b2:	6878      	ldr	r0, [r7, #4]
 800b5b4:	f000 fb5b 	bl	800bc6e <USBD_CtlError>
              break;
 800b5b8:	bf00      	nop
          }
          break;
 800b5ba:	e004      	b.n	800b5c6 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800b5bc:	6839      	ldr	r1, [r7, #0]
 800b5be:	6878      	ldr	r0, [r7, #4]
 800b5c0:	f000 fb55 	bl	800bc6e <USBD_CtlError>
          break;
 800b5c4:	bf00      	nop
      }
      break;
 800b5c6:	e005      	b.n	800b5d4 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800b5c8:	6839      	ldr	r1, [r7, #0]
 800b5ca:	6878      	ldr	r0, [r7, #4]
 800b5cc:	f000 fb4f 	bl	800bc6e <USBD_CtlError>
      break;
 800b5d0:	e000      	b.n	800b5d4 <USBD_StdEPReq+0x330>
      break;
 800b5d2:	bf00      	nop
  }

  return ret;
 800b5d4:	7bfb      	ldrb	r3, [r7, #15]
}
 800b5d6:	4618      	mov	r0, r3
 800b5d8:	3710      	adds	r7, #16
 800b5da:	46bd      	mov	sp, r7
 800b5dc:	bd80      	pop	{r7, pc}
	...

0800b5e0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b5e0:	b580      	push	{r7, lr}
 800b5e2:	b084      	sub	sp, #16
 800b5e4:	af00      	add	r7, sp, #0
 800b5e6:	6078      	str	r0, [r7, #4]
 800b5e8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b5ea:	2300      	movs	r3, #0
 800b5ec:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800b5ee:	2300      	movs	r3, #0
 800b5f0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800b5f2:	2300      	movs	r3, #0
 800b5f4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800b5f6:	683b      	ldr	r3, [r7, #0]
 800b5f8:	885b      	ldrh	r3, [r3, #2]
 800b5fa:	0a1b      	lsrs	r3, r3, #8
 800b5fc:	b29b      	uxth	r3, r3
 800b5fe:	3b01      	subs	r3, #1
 800b600:	2b06      	cmp	r3, #6
 800b602:	f200 8128 	bhi.w	800b856 <USBD_GetDescriptor+0x276>
 800b606:	a201      	add	r2, pc, #4	; (adr r2, 800b60c <USBD_GetDescriptor+0x2c>)
 800b608:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b60c:	0800b629 	.word	0x0800b629
 800b610:	0800b641 	.word	0x0800b641
 800b614:	0800b681 	.word	0x0800b681
 800b618:	0800b857 	.word	0x0800b857
 800b61c:	0800b857 	.word	0x0800b857
 800b620:	0800b7f7 	.word	0x0800b7f7
 800b624:	0800b823 	.word	0x0800b823
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b62e:	681b      	ldr	r3, [r3, #0]
 800b630:	687a      	ldr	r2, [r7, #4]
 800b632:	7c12      	ldrb	r2, [r2, #16]
 800b634:	f107 0108 	add.w	r1, r7, #8
 800b638:	4610      	mov	r0, r2
 800b63a:	4798      	blx	r3
 800b63c:	60f8      	str	r0, [r7, #12]
      break;
 800b63e:	e112      	b.n	800b866 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	7c1b      	ldrb	r3, [r3, #16]
 800b644:	2b00      	cmp	r3, #0
 800b646:	d10d      	bne.n	800b664 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b64e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b650:	f107 0208 	add.w	r2, r7, #8
 800b654:	4610      	mov	r0, r2
 800b656:	4798      	blx	r3
 800b658:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b65a:	68fb      	ldr	r3, [r7, #12]
 800b65c:	3301      	adds	r3, #1
 800b65e:	2202      	movs	r2, #2
 800b660:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800b662:	e100      	b.n	800b866 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b66a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b66c:	f107 0208 	add.w	r2, r7, #8
 800b670:	4610      	mov	r0, r2
 800b672:	4798      	blx	r3
 800b674:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b676:	68fb      	ldr	r3, [r7, #12]
 800b678:	3301      	adds	r3, #1
 800b67a:	2202      	movs	r2, #2
 800b67c:	701a      	strb	r2, [r3, #0]
      break;
 800b67e:	e0f2      	b.n	800b866 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800b680:	683b      	ldr	r3, [r7, #0]
 800b682:	885b      	ldrh	r3, [r3, #2]
 800b684:	b2db      	uxtb	r3, r3
 800b686:	2b05      	cmp	r3, #5
 800b688:	f200 80ac 	bhi.w	800b7e4 <USBD_GetDescriptor+0x204>
 800b68c:	a201      	add	r2, pc, #4	; (adr r2, 800b694 <USBD_GetDescriptor+0xb4>)
 800b68e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b692:	bf00      	nop
 800b694:	0800b6ad 	.word	0x0800b6ad
 800b698:	0800b6e1 	.word	0x0800b6e1
 800b69c:	0800b715 	.word	0x0800b715
 800b6a0:	0800b749 	.word	0x0800b749
 800b6a4:	0800b77d 	.word	0x0800b77d
 800b6a8:	0800b7b1 	.word	0x0800b7b1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b6b2:	685b      	ldr	r3, [r3, #4]
 800b6b4:	2b00      	cmp	r3, #0
 800b6b6:	d00b      	beq.n	800b6d0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b6be:	685b      	ldr	r3, [r3, #4]
 800b6c0:	687a      	ldr	r2, [r7, #4]
 800b6c2:	7c12      	ldrb	r2, [r2, #16]
 800b6c4:	f107 0108 	add.w	r1, r7, #8
 800b6c8:	4610      	mov	r0, r2
 800b6ca:	4798      	blx	r3
 800b6cc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b6ce:	e091      	b.n	800b7f4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b6d0:	6839      	ldr	r1, [r7, #0]
 800b6d2:	6878      	ldr	r0, [r7, #4]
 800b6d4:	f000 facb 	bl	800bc6e <USBD_CtlError>
            err++;
 800b6d8:	7afb      	ldrb	r3, [r7, #11]
 800b6da:	3301      	adds	r3, #1
 800b6dc:	72fb      	strb	r3, [r7, #11]
          break;
 800b6de:	e089      	b.n	800b7f4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b6e6:	689b      	ldr	r3, [r3, #8]
 800b6e8:	2b00      	cmp	r3, #0
 800b6ea:	d00b      	beq.n	800b704 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b6f2:	689b      	ldr	r3, [r3, #8]
 800b6f4:	687a      	ldr	r2, [r7, #4]
 800b6f6:	7c12      	ldrb	r2, [r2, #16]
 800b6f8:	f107 0108 	add.w	r1, r7, #8
 800b6fc:	4610      	mov	r0, r2
 800b6fe:	4798      	blx	r3
 800b700:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b702:	e077      	b.n	800b7f4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b704:	6839      	ldr	r1, [r7, #0]
 800b706:	6878      	ldr	r0, [r7, #4]
 800b708:	f000 fab1 	bl	800bc6e <USBD_CtlError>
            err++;
 800b70c:	7afb      	ldrb	r3, [r7, #11]
 800b70e:	3301      	adds	r3, #1
 800b710:	72fb      	strb	r3, [r7, #11]
          break;
 800b712:	e06f      	b.n	800b7f4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b71a:	68db      	ldr	r3, [r3, #12]
 800b71c:	2b00      	cmp	r3, #0
 800b71e:	d00b      	beq.n	800b738 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b726:	68db      	ldr	r3, [r3, #12]
 800b728:	687a      	ldr	r2, [r7, #4]
 800b72a:	7c12      	ldrb	r2, [r2, #16]
 800b72c:	f107 0108 	add.w	r1, r7, #8
 800b730:	4610      	mov	r0, r2
 800b732:	4798      	blx	r3
 800b734:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b736:	e05d      	b.n	800b7f4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b738:	6839      	ldr	r1, [r7, #0]
 800b73a:	6878      	ldr	r0, [r7, #4]
 800b73c:	f000 fa97 	bl	800bc6e <USBD_CtlError>
            err++;
 800b740:	7afb      	ldrb	r3, [r7, #11]
 800b742:	3301      	adds	r3, #1
 800b744:	72fb      	strb	r3, [r7, #11]
          break;
 800b746:	e055      	b.n	800b7f4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b74e:	691b      	ldr	r3, [r3, #16]
 800b750:	2b00      	cmp	r3, #0
 800b752:	d00b      	beq.n	800b76c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b75a:	691b      	ldr	r3, [r3, #16]
 800b75c:	687a      	ldr	r2, [r7, #4]
 800b75e:	7c12      	ldrb	r2, [r2, #16]
 800b760:	f107 0108 	add.w	r1, r7, #8
 800b764:	4610      	mov	r0, r2
 800b766:	4798      	blx	r3
 800b768:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b76a:	e043      	b.n	800b7f4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b76c:	6839      	ldr	r1, [r7, #0]
 800b76e:	6878      	ldr	r0, [r7, #4]
 800b770:	f000 fa7d 	bl	800bc6e <USBD_CtlError>
            err++;
 800b774:	7afb      	ldrb	r3, [r7, #11]
 800b776:	3301      	adds	r3, #1
 800b778:	72fb      	strb	r3, [r7, #11]
          break;
 800b77a:	e03b      	b.n	800b7f4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b782:	695b      	ldr	r3, [r3, #20]
 800b784:	2b00      	cmp	r3, #0
 800b786:	d00b      	beq.n	800b7a0 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b78e:	695b      	ldr	r3, [r3, #20]
 800b790:	687a      	ldr	r2, [r7, #4]
 800b792:	7c12      	ldrb	r2, [r2, #16]
 800b794:	f107 0108 	add.w	r1, r7, #8
 800b798:	4610      	mov	r0, r2
 800b79a:	4798      	blx	r3
 800b79c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b79e:	e029      	b.n	800b7f4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b7a0:	6839      	ldr	r1, [r7, #0]
 800b7a2:	6878      	ldr	r0, [r7, #4]
 800b7a4:	f000 fa63 	bl	800bc6e <USBD_CtlError>
            err++;
 800b7a8:	7afb      	ldrb	r3, [r7, #11]
 800b7aa:	3301      	adds	r3, #1
 800b7ac:	72fb      	strb	r3, [r7, #11]
          break;
 800b7ae:	e021      	b.n	800b7f4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b7b6:	699b      	ldr	r3, [r3, #24]
 800b7b8:	2b00      	cmp	r3, #0
 800b7ba:	d00b      	beq.n	800b7d4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b7c2:	699b      	ldr	r3, [r3, #24]
 800b7c4:	687a      	ldr	r2, [r7, #4]
 800b7c6:	7c12      	ldrb	r2, [r2, #16]
 800b7c8:	f107 0108 	add.w	r1, r7, #8
 800b7cc:	4610      	mov	r0, r2
 800b7ce:	4798      	blx	r3
 800b7d0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b7d2:	e00f      	b.n	800b7f4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b7d4:	6839      	ldr	r1, [r7, #0]
 800b7d6:	6878      	ldr	r0, [r7, #4]
 800b7d8:	f000 fa49 	bl	800bc6e <USBD_CtlError>
            err++;
 800b7dc:	7afb      	ldrb	r3, [r7, #11]
 800b7de:	3301      	adds	r3, #1
 800b7e0:	72fb      	strb	r3, [r7, #11]
          break;
 800b7e2:	e007      	b.n	800b7f4 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800b7e4:	6839      	ldr	r1, [r7, #0]
 800b7e6:	6878      	ldr	r0, [r7, #4]
 800b7e8:	f000 fa41 	bl	800bc6e <USBD_CtlError>
          err++;
 800b7ec:	7afb      	ldrb	r3, [r7, #11]
 800b7ee:	3301      	adds	r3, #1
 800b7f0:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800b7f2:	bf00      	nop
      }
      break;
 800b7f4:	e037      	b.n	800b866 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	7c1b      	ldrb	r3, [r3, #16]
 800b7fa:	2b00      	cmp	r3, #0
 800b7fc:	d109      	bne.n	800b812 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b804:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b806:	f107 0208 	add.w	r2, r7, #8
 800b80a:	4610      	mov	r0, r2
 800b80c:	4798      	blx	r3
 800b80e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b810:	e029      	b.n	800b866 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800b812:	6839      	ldr	r1, [r7, #0]
 800b814:	6878      	ldr	r0, [r7, #4]
 800b816:	f000 fa2a 	bl	800bc6e <USBD_CtlError>
        err++;
 800b81a:	7afb      	ldrb	r3, [r7, #11]
 800b81c:	3301      	adds	r3, #1
 800b81e:	72fb      	strb	r3, [r7, #11]
      break;
 800b820:	e021      	b.n	800b866 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	7c1b      	ldrb	r3, [r3, #16]
 800b826:	2b00      	cmp	r3, #0
 800b828:	d10d      	bne.n	800b846 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b832:	f107 0208 	add.w	r2, r7, #8
 800b836:	4610      	mov	r0, r2
 800b838:	4798      	blx	r3
 800b83a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800b83c:	68fb      	ldr	r3, [r7, #12]
 800b83e:	3301      	adds	r3, #1
 800b840:	2207      	movs	r2, #7
 800b842:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b844:	e00f      	b.n	800b866 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800b846:	6839      	ldr	r1, [r7, #0]
 800b848:	6878      	ldr	r0, [r7, #4]
 800b84a:	f000 fa10 	bl	800bc6e <USBD_CtlError>
        err++;
 800b84e:	7afb      	ldrb	r3, [r7, #11]
 800b850:	3301      	adds	r3, #1
 800b852:	72fb      	strb	r3, [r7, #11]
      break;
 800b854:	e007      	b.n	800b866 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800b856:	6839      	ldr	r1, [r7, #0]
 800b858:	6878      	ldr	r0, [r7, #4]
 800b85a:	f000 fa08 	bl	800bc6e <USBD_CtlError>
      err++;
 800b85e:	7afb      	ldrb	r3, [r7, #11]
 800b860:	3301      	adds	r3, #1
 800b862:	72fb      	strb	r3, [r7, #11]
      break;
 800b864:	bf00      	nop
  }

  if (err != 0U)
 800b866:	7afb      	ldrb	r3, [r7, #11]
 800b868:	2b00      	cmp	r3, #0
 800b86a:	d11e      	bne.n	800b8aa <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800b86c:	683b      	ldr	r3, [r7, #0]
 800b86e:	88db      	ldrh	r3, [r3, #6]
 800b870:	2b00      	cmp	r3, #0
 800b872:	d016      	beq.n	800b8a2 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800b874:	893b      	ldrh	r3, [r7, #8]
 800b876:	2b00      	cmp	r3, #0
 800b878:	d00e      	beq.n	800b898 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800b87a:	683b      	ldr	r3, [r7, #0]
 800b87c:	88da      	ldrh	r2, [r3, #6]
 800b87e:	893b      	ldrh	r3, [r7, #8]
 800b880:	4293      	cmp	r3, r2
 800b882:	bf28      	it	cs
 800b884:	4613      	movcs	r3, r2
 800b886:	b29b      	uxth	r3, r3
 800b888:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800b88a:	893b      	ldrh	r3, [r7, #8]
 800b88c:	461a      	mov	r2, r3
 800b88e:	68f9      	ldr	r1, [r7, #12]
 800b890:	6878      	ldr	r0, [r7, #4]
 800b892:	f000 fa5d 	bl	800bd50 <USBD_CtlSendData>
 800b896:	e009      	b.n	800b8ac <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800b898:	6839      	ldr	r1, [r7, #0]
 800b89a:	6878      	ldr	r0, [r7, #4]
 800b89c:	f000 f9e7 	bl	800bc6e <USBD_CtlError>
 800b8a0:	e004      	b.n	800b8ac <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800b8a2:	6878      	ldr	r0, [r7, #4]
 800b8a4:	f000 fa91 	bl	800bdca <USBD_CtlSendStatus>
 800b8a8:	e000      	b.n	800b8ac <USBD_GetDescriptor+0x2cc>
    return;
 800b8aa:	bf00      	nop
  }
}
 800b8ac:	3710      	adds	r7, #16
 800b8ae:	46bd      	mov	sp, r7
 800b8b0:	bd80      	pop	{r7, pc}
 800b8b2:	bf00      	nop

0800b8b4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b8b4:	b580      	push	{r7, lr}
 800b8b6:	b084      	sub	sp, #16
 800b8b8:	af00      	add	r7, sp, #0
 800b8ba:	6078      	str	r0, [r7, #4]
 800b8bc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800b8be:	683b      	ldr	r3, [r7, #0]
 800b8c0:	889b      	ldrh	r3, [r3, #4]
 800b8c2:	2b00      	cmp	r3, #0
 800b8c4:	d131      	bne.n	800b92a <USBD_SetAddress+0x76>
 800b8c6:	683b      	ldr	r3, [r7, #0]
 800b8c8:	88db      	ldrh	r3, [r3, #6]
 800b8ca:	2b00      	cmp	r3, #0
 800b8cc:	d12d      	bne.n	800b92a <USBD_SetAddress+0x76>
 800b8ce:	683b      	ldr	r3, [r7, #0]
 800b8d0:	885b      	ldrh	r3, [r3, #2]
 800b8d2:	2b7f      	cmp	r3, #127	; 0x7f
 800b8d4:	d829      	bhi.n	800b92a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800b8d6:	683b      	ldr	r3, [r7, #0]
 800b8d8:	885b      	ldrh	r3, [r3, #2]
 800b8da:	b2db      	uxtb	r3, r3
 800b8dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b8e0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b8e8:	b2db      	uxtb	r3, r3
 800b8ea:	2b03      	cmp	r3, #3
 800b8ec:	d104      	bne.n	800b8f8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800b8ee:	6839      	ldr	r1, [r7, #0]
 800b8f0:	6878      	ldr	r0, [r7, #4]
 800b8f2:	f000 f9bc 	bl	800bc6e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b8f6:	e01d      	b.n	800b934 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	7bfa      	ldrb	r2, [r7, #15]
 800b8fc:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800b900:	7bfb      	ldrb	r3, [r7, #15]
 800b902:	4619      	mov	r1, r3
 800b904:	6878      	ldr	r0, [r7, #4]
 800b906:	f000 fee9 	bl	800c6dc <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800b90a:	6878      	ldr	r0, [r7, #4]
 800b90c:	f000 fa5d 	bl	800bdca <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800b910:	7bfb      	ldrb	r3, [r7, #15]
 800b912:	2b00      	cmp	r3, #0
 800b914:	d004      	beq.n	800b920 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	2202      	movs	r2, #2
 800b91a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b91e:	e009      	b.n	800b934 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	2201      	movs	r2, #1
 800b924:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b928:	e004      	b.n	800b934 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800b92a:	6839      	ldr	r1, [r7, #0]
 800b92c:	6878      	ldr	r0, [r7, #4]
 800b92e:	f000 f99e 	bl	800bc6e <USBD_CtlError>
  }
}
 800b932:	bf00      	nop
 800b934:	bf00      	nop
 800b936:	3710      	adds	r7, #16
 800b938:	46bd      	mov	sp, r7
 800b93a:	bd80      	pop	{r7, pc}

0800b93c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b93c:	b580      	push	{r7, lr}
 800b93e:	b084      	sub	sp, #16
 800b940:	af00      	add	r7, sp, #0
 800b942:	6078      	str	r0, [r7, #4]
 800b944:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b946:	2300      	movs	r3, #0
 800b948:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800b94a:	683b      	ldr	r3, [r7, #0]
 800b94c:	885b      	ldrh	r3, [r3, #2]
 800b94e:	b2da      	uxtb	r2, r3
 800b950:	4b4e      	ldr	r3, [pc, #312]	; (800ba8c <USBD_SetConfig+0x150>)
 800b952:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800b954:	4b4d      	ldr	r3, [pc, #308]	; (800ba8c <USBD_SetConfig+0x150>)
 800b956:	781b      	ldrb	r3, [r3, #0]
 800b958:	2b01      	cmp	r3, #1
 800b95a:	d905      	bls.n	800b968 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800b95c:	6839      	ldr	r1, [r7, #0]
 800b95e:	6878      	ldr	r0, [r7, #4]
 800b960:	f000 f985 	bl	800bc6e <USBD_CtlError>
    return USBD_FAIL;
 800b964:	2303      	movs	r3, #3
 800b966:	e08c      	b.n	800ba82 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b96e:	b2db      	uxtb	r3, r3
 800b970:	2b02      	cmp	r3, #2
 800b972:	d002      	beq.n	800b97a <USBD_SetConfig+0x3e>
 800b974:	2b03      	cmp	r3, #3
 800b976:	d029      	beq.n	800b9cc <USBD_SetConfig+0x90>
 800b978:	e075      	b.n	800ba66 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800b97a:	4b44      	ldr	r3, [pc, #272]	; (800ba8c <USBD_SetConfig+0x150>)
 800b97c:	781b      	ldrb	r3, [r3, #0]
 800b97e:	2b00      	cmp	r3, #0
 800b980:	d020      	beq.n	800b9c4 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800b982:	4b42      	ldr	r3, [pc, #264]	; (800ba8c <USBD_SetConfig+0x150>)
 800b984:	781b      	ldrb	r3, [r3, #0]
 800b986:	461a      	mov	r2, r3
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b98c:	4b3f      	ldr	r3, [pc, #252]	; (800ba8c <USBD_SetConfig+0x150>)
 800b98e:	781b      	ldrb	r3, [r3, #0]
 800b990:	4619      	mov	r1, r3
 800b992:	6878      	ldr	r0, [r7, #4]
 800b994:	f7fe ffe7 	bl	800a966 <USBD_SetClassConfig>
 800b998:	4603      	mov	r3, r0
 800b99a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800b99c:	7bfb      	ldrb	r3, [r7, #15]
 800b99e:	2b00      	cmp	r3, #0
 800b9a0:	d008      	beq.n	800b9b4 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800b9a2:	6839      	ldr	r1, [r7, #0]
 800b9a4:	6878      	ldr	r0, [r7, #4]
 800b9a6:	f000 f962 	bl	800bc6e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	2202      	movs	r2, #2
 800b9ae:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b9b2:	e065      	b.n	800ba80 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800b9b4:	6878      	ldr	r0, [r7, #4]
 800b9b6:	f000 fa08 	bl	800bdca <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	2203      	movs	r2, #3
 800b9be:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800b9c2:	e05d      	b.n	800ba80 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800b9c4:	6878      	ldr	r0, [r7, #4]
 800b9c6:	f000 fa00 	bl	800bdca <USBD_CtlSendStatus>
      break;
 800b9ca:	e059      	b.n	800ba80 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800b9cc:	4b2f      	ldr	r3, [pc, #188]	; (800ba8c <USBD_SetConfig+0x150>)
 800b9ce:	781b      	ldrb	r3, [r3, #0]
 800b9d0:	2b00      	cmp	r3, #0
 800b9d2:	d112      	bne.n	800b9fa <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	2202      	movs	r2, #2
 800b9d8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800b9dc:	4b2b      	ldr	r3, [pc, #172]	; (800ba8c <USBD_SetConfig+0x150>)
 800b9de:	781b      	ldrb	r3, [r3, #0]
 800b9e0:	461a      	mov	r2, r3
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b9e6:	4b29      	ldr	r3, [pc, #164]	; (800ba8c <USBD_SetConfig+0x150>)
 800b9e8:	781b      	ldrb	r3, [r3, #0]
 800b9ea:	4619      	mov	r1, r3
 800b9ec:	6878      	ldr	r0, [r7, #4]
 800b9ee:	f7fe ffd6 	bl	800a99e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800b9f2:	6878      	ldr	r0, [r7, #4]
 800b9f4:	f000 f9e9 	bl	800bdca <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b9f8:	e042      	b.n	800ba80 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800b9fa:	4b24      	ldr	r3, [pc, #144]	; (800ba8c <USBD_SetConfig+0x150>)
 800b9fc:	781b      	ldrb	r3, [r3, #0]
 800b9fe:	461a      	mov	r2, r3
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	685b      	ldr	r3, [r3, #4]
 800ba04:	429a      	cmp	r2, r3
 800ba06:	d02a      	beq.n	800ba5e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	685b      	ldr	r3, [r3, #4]
 800ba0c:	b2db      	uxtb	r3, r3
 800ba0e:	4619      	mov	r1, r3
 800ba10:	6878      	ldr	r0, [r7, #4]
 800ba12:	f7fe ffc4 	bl	800a99e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800ba16:	4b1d      	ldr	r3, [pc, #116]	; (800ba8c <USBD_SetConfig+0x150>)
 800ba18:	781b      	ldrb	r3, [r3, #0]
 800ba1a:	461a      	mov	r2, r3
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800ba20:	4b1a      	ldr	r3, [pc, #104]	; (800ba8c <USBD_SetConfig+0x150>)
 800ba22:	781b      	ldrb	r3, [r3, #0]
 800ba24:	4619      	mov	r1, r3
 800ba26:	6878      	ldr	r0, [r7, #4]
 800ba28:	f7fe ff9d 	bl	800a966 <USBD_SetClassConfig>
 800ba2c:	4603      	mov	r3, r0
 800ba2e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800ba30:	7bfb      	ldrb	r3, [r7, #15]
 800ba32:	2b00      	cmp	r3, #0
 800ba34:	d00f      	beq.n	800ba56 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800ba36:	6839      	ldr	r1, [r7, #0]
 800ba38:	6878      	ldr	r0, [r7, #4]
 800ba3a:	f000 f918 	bl	800bc6e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	685b      	ldr	r3, [r3, #4]
 800ba42:	b2db      	uxtb	r3, r3
 800ba44:	4619      	mov	r1, r3
 800ba46:	6878      	ldr	r0, [r7, #4]
 800ba48:	f7fe ffa9 	bl	800a99e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	2202      	movs	r2, #2
 800ba50:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800ba54:	e014      	b.n	800ba80 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800ba56:	6878      	ldr	r0, [r7, #4]
 800ba58:	f000 f9b7 	bl	800bdca <USBD_CtlSendStatus>
      break;
 800ba5c:	e010      	b.n	800ba80 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800ba5e:	6878      	ldr	r0, [r7, #4]
 800ba60:	f000 f9b3 	bl	800bdca <USBD_CtlSendStatus>
      break;
 800ba64:	e00c      	b.n	800ba80 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800ba66:	6839      	ldr	r1, [r7, #0]
 800ba68:	6878      	ldr	r0, [r7, #4]
 800ba6a:	f000 f900 	bl	800bc6e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800ba6e:	4b07      	ldr	r3, [pc, #28]	; (800ba8c <USBD_SetConfig+0x150>)
 800ba70:	781b      	ldrb	r3, [r3, #0]
 800ba72:	4619      	mov	r1, r3
 800ba74:	6878      	ldr	r0, [r7, #4]
 800ba76:	f7fe ff92 	bl	800a99e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800ba7a:	2303      	movs	r3, #3
 800ba7c:	73fb      	strb	r3, [r7, #15]
      break;
 800ba7e:	bf00      	nop
  }

  return ret;
 800ba80:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba82:	4618      	mov	r0, r3
 800ba84:	3710      	adds	r7, #16
 800ba86:	46bd      	mov	sp, r7
 800ba88:	bd80      	pop	{r7, pc}
 800ba8a:	bf00      	nop
 800ba8c:	2000128c 	.word	0x2000128c

0800ba90 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ba90:	b580      	push	{r7, lr}
 800ba92:	b082      	sub	sp, #8
 800ba94:	af00      	add	r7, sp, #0
 800ba96:	6078      	str	r0, [r7, #4]
 800ba98:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800ba9a:	683b      	ldr	r3, [r7, #0]
 800ba9c:	88db      	ldrh	r3, [r3, #6]
 800ba9e:	2b01      	cmp	r3, #1
 800baa0:	d004      	beq.n	800baac <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800baa2:	6839      	ldr	r1, [r7, #0]
 800baa4:	6878      	ldr	r0, [r7, #4]
 800baa6:	f000 f8e2 	bl	800bc6e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800baaa:	e023      	b.n	800baf4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bab2:	b2db      	uxtb	r3, r3
 800bab4:	2b02      	cmp	r3, #2
 800bab6:	dc02      	bgt.n	800babe <USBD_GetConfig+0x2e>
 800bab8:	2b00      	cmp	r3, #0
 800baba:	dc03      	bgt.n	800bac4 <USBD_GetConfig+0x34>
 800babc:	e015      	b.n	800baea <USBD_GetConfig+0x5a>
 800babe:	2b03      	cmp	r3, #3
 800bac0:	d00b      	beq.n	800bada <USBD_GetConfig+0x4a>
 800bac2:	e012      	b.n	800baea <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	2200      	movs	r2, #0
 800bac8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	3308      	adds	r3, #8
 800bace:	2201      	movs	r2, #1
 800bad0:	4619      	mov	r1, r3
 800bad2:	6878      	ldr	r0, [r7, #4]
 800bad4:	f000 f93c 	bl	800bd50 <USBD_CtlSendData>
        break;
 800bad8:	e00c      	b.n	800baf4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	3304      	adds	r3, #4
 800bade:	2201      	movs	r2, #1
 800bae0:	4619      	mov	r1, r3
 800bae2:	6878      	ldr	r0, [r7, #4]
 800bae4:	f000 f934 	bl	800bd50 <USBD_CtlSendData>
        break;
 800bae8:	e004      	b.n	800baf4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800baea:	6839      	ldr	r1, [r7, #0]
 800baec:	6878      	ldr	r0, [r7, #4]
 800baee:	f000 f8be 	bl	800bc6e <USBD_CtlError>
        break;
 800baf2:	bf00      	nop
}
 800baf4:	bf00      	nop
 800baf6:	3708      	adds	r7, #8
 800baf8:	46bd      	mov	sp, r7
 800bafa:	bd80      	pop	{r7, pc}

0800bafc <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bafc:	b580      	push	{r7, lr}
 800bafe:	b082      	sub	sp, #8
 800bb00:	af00      	add	r7, sp, #0
 800bb02:	6078      	str	r0, [r7, #4]
 800bb04:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bb0c:	b2db      	uxtb	r3, r3
 800bb0e:	3b01      	subs	r3, #1
 800bb10:	2b02      	cmp	r3, #2
 800bb12:	d81e      	bhi.n	800bb52 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800bb14:	683b      	ldr	r3, [r7, #0]
 800bb16:	88db      	ldrh	r3, [r3, #6]
 800bb18:	2b02      	cmp	r3, #2
 800bb1a:	d004      	beq.n	800bb26 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800bb1c:	6839      	ldr	r1, [r7, #0]
 800bb1e:	6878      	ldr	r0, [r7, #4]
 800bb20:	f000 f8a5 	bl	800bc6e <USBD_CtlError>
        break;
 800bb24:	e01a      	b.n	800bb5c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	2201      	movs	r2, #1
 800bb2a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800bb32:	2b00      	cmp	r3, #0
 800bb34:	d005      	beq.n	800bb42 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	68db      	ldr	r3, [r3, #12]
 800bb3a:	f043 0202 	orr.w	r2, r3, #2
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	330c      	adds	r3, #12
 800bb46:	2202      	movs	r2, #2
 800bb48:	4619      	mov	r1, r3
 800bb4a:	6878      	ldr	r0, [r7, #4]
 800bb4c:	f000 f900 	bl	800bd50 <USBD_CtlSendData>
      break;
 800bb50:	e004      	b.n	800bb5c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800bb52:	6839      	ldr	r1, [r7, #0]
 800bb54:	6878      	ldr	r0, [r7, #4]
 800bb56:	f000 f88a 	bl	800bc6e <USBD_CtlError>
      break;
 800bb5a:	bf00      	nop
  }
}
 800bb5c:	bf00      	nop
 800bb5e:	3708      	adds	r7, #8
 800bb60:	46bd      	mov	sp, r7
 800bb62:	bd80      	pop	{r7, pc}

0800bb64 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bb64:	b580      	push	{r7, lr}
 800bb66:	b082      	sub	sp, #8
 800bb68:	af00      	add	r7, sp, #0
 800bb6a:	6078      	str	r0, [r7, #4]
 800bb6c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800bb6e:	683b      	ldr	r3, [r7, #0]
 800bb70:	885b      	ldrh	r3, [r3, #2]
 800bb72:	2b01      	cmp	r3, #1
 800bb74:	d107      	bne.n	800bb86 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	2201      	movs	r2, #1
 800bb7a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800bb7e:	6878      	ldr	r0, [r7, #4]
 800bb80:	f000 f923 	bl	800bdca <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800bb84:	e013      	b.n	800bbae <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800bb86:	683b      	ldr	r3, [r7, #0]
 800bb88:	885b      	ldrh	r3, [r3, #2]
 800bb8a:	2b02      	cmp	r3, #2
 800bb8c:	d10b      	bne.n	800bba6 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800bb8e:	683b      	ldr	r3, [r7, #0]
 800bb90:	889b      	ldrh	r3, [r3, #4]
 800bb92:	0a1b      	lsrs	r3, r3, #8
 800bb94:	b29b      	uxth	r3, r3
 800bb96:	b2da      	uxtb	r2, r3
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800bb9e:	6878      	ldr	r0, [r7, #4]
 800bba0:	f000 f913 	bl	800bdca <USBD_CtlSendStatus>
}
 800bba4:	e003      	b.n	800bbae <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800bba6:	6839      	ldr	r1, [r7, #0]
 800bba8:	6878      	ldr	r0, [r7, #4]
 800bbaa:	f000 f860 	bl	800bc6e <USBD_CtlError>
}
 800bbae:	bf00      	nop
 800bbb0:	3708      	adds	r7, #8
 800bbb2:	46bd      	mov	sp, r7
 800bbb4:	bd80      	pop	{r7, pc}

0800bbb6 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bbb6:	b580      	push	{r7, lr}
 800bbb8:	b082      	sub	sp, #8
 800bbba:	af00      	add	r7, sp, #0
 800bbbc:	6078      	str	r0, [r7, #4]
 800bbbe:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bbc6:	b2db      	uxtb	r3, r3
 800bbc8:	3b01      	subs	r3, #1
 800bbca:	2b02      	cmp	r3, #2
 800bbcc:	d80b      	bhi.n	800bbe6 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800bbce:	683b      	ldr	r3, [r7, #0]
 800bbd0:	885b      	ldrh	r3, [r3, #2]
 800bbd2:	2b01      	cmp	r3, #1
 800bbd4:	d10c      	bne.n	800bbf0 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	2200      	movs	r2, #0
 800bbda:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800bbde:	6878      	ldr	r0, [r7, #4]
 800bbe0:	f000 f8f3 	bl	800bdca <USBD_CtlSendStatus>
      }
      break;
 800bbe4:	e004      	b.n	800bbf0 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800bbe6:	6839      	ldr	r1, [r7, #0]
 800bbe8:	6878      	ldr	r0, [r7, #4]
 800bbea:	f000 f840 	bl	800bc6e <USBD_CtlError>
      break;
 800bbee:	e000      	b.n	800bbf2 <USBD_ClrFeature+0x3c>
      break;
 800bbf0:	bf00      	nop
  }
}
 800bbf2:	bf00      	nop
 800bbf4:	3708      	adds	r7, #8
 800bbf6:	46bd      	mov	sp, r7
 800bbf8:	bd80      	pop	{r7, pc}

0800bbfa <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800bbfa:	b580      	push	{r7, lr}
 800bbfc:	b084      	sub	sp, #16
 800bbfe:	af00      	add	r7, sp, #0
 800bc00:	6078      	str	r0, [r7, #4]
 800bc02:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800bc04:	683b      	ldr	r3, [r7, #0]
 800bc06:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800bc08:	68fb      	ldr	r3, [r7, #12]
 800bc0a:	781a      	ldrb	r2, [r3, #0]
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800bc10:	68fb      	ldr	r3, [r7, #12]
 800bc12:	3301      	adds	r3, #1
 800bc14:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800bc16:	68fb      	ldr	r3, [r7, #12]
 800bc18:	781a      	ldrb	r2, [r3, #0]
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800bc1e:	68fb      	ldr	r3, [r7, #12]
 800bc20:	3301      	adds	r3, #1
 800bc22:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800bc24:	68f8      	ldr	r0, [r7, #12]
 800bc26:	f7ff fa41 	bl	800b0ac <SWAPBYTE>
 800bc2a:	4603      	mov	r3, r0
 800bc2c:	461a      	mov	r2, r3
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800bc32:	68fb      	ldr	r3, [r7, #12]
 800bc34:	3301      	adds	r3, #1
 800bc36:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800bc38:	68fb      	ldr	r3, [r7, #12]
 800bc3a:	3301      	adds	r3, #1
 800bc3c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800bc3e:	68f8      	ldr	r0, [r7, #12]
 800bc40:	f7ff fa34 	bl	800b0ac <SWAPBYTE>
 800bc44:	4603      	mov	r3, r0
 800bc46:	461a      	mov	r2, r3
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800bc4c:	68fb      	ldr	r3, [r7, #12]
 800bc4e:	3301      	adds	r3, #1
 800bc50:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800bc52:	68fb      	ldr	r3, [r7, #12]
 800bc54:	3301      	adds	r3, #1
 800bc56:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800bc58:	68f8      	ldr	r0, [r7, #12]
 800bc5a:	f7ff fa27 	bl	800b0ac <SWAPBYTE>
 800bc5e:	4603      	mov	r3, r0
 800bc60:	461a      	mov	r2, r3
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	80da      	strh	r2, [r3, #6]
}
 800bc66:	bf00      	nop
 800bc68:	3710      	adds	r7, #16
 800bc6a:	46bd      	mov	sp, r7
 800bc6c:	bd80      	pop	{r7, pc}

0800bc6e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bc6e:	b580      	push	{r7, lr}
 800bc70:	b082      	sub	sp, #8
 800bc72:	af00      	add	r7, sp, #0
 800bc74:	6078      	str	r0, [r7, #4]
 800bc76:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800bc78:	2180      	movs	r1, #128	; 0x80
 800bc7a:	6878      	ldr	r0, [r7, #4]
 800bc7c:	f000 fcc4 	bl	800c608 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800bc80:	2100      	movs	r1, #0
 800bc82:	6878      	ldr	r0, [r7, #4]
 800bc84:	f000 fcc0 	bl	800c608 <USBD_LL_StallEP>
}
 800bc88:	bf00      	nop
 800bc8a:	3708      	adds	r7, #8
 800bc8c:	46bd      	mov	sp, r7
 800bc8e:	bd80      	pop	{r7, pc}

0800bc90 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800bc90:	b580      	push	{r7, lr}
 800bc92:	b086      	sub	sp, #24
 800bc94:	af00      	add	r7, sp, #0
 800bc96:	60f8      	str	r0, [r7, #12]
 800bc98:	60b9      	str	r1, [r7, #8]
 800bc9a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800bc9c:	2300      	movs	r3, #0
 800bc9e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800bca0:	68fb      	ldr	r3, [r7, #12]
 800bca2:	2b00      	cmp	r3, #0
 800bca4:	d036      	beq.n	800bd14 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800bca6:	68fb      	ldr	r3, [r7, #12]
 800bca8:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800bcaa:	6938      	ldr	r0, [r7, #16]
 800bcac:	f000 f836 	bl	800bd1c <USBD_GetLen>
 800bcb0:	4603      	mov	r3, r0
 800bcb2:	3301      	adds	r3, #1
 800bcb4:	b29b      	uxth	r3, r3
 800bcb6:	005b      	lsls	r3, r3, #1
 800bcb8:	b29a      	uxth	r2, r3
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800bcbe:	7dfb      	ldrb	r3, [r7, #23]
 800bcc0:	68ba      	ldr	r2, [r7, #8]
 800bcc2:	4413      	add	r3, r2
 800bcc4:	687a      	ldr	r2, [r7, #4]
 800bcc6:	7812      	ldrb	r2, [r2, #0]
 800bcc8:	701a      	strb	r2, [r3, #0]
  idx++;
 800bcca:	7dfb      	ldrb	r3, [r7, #23]
 800bccc:	3301      	adds	r3, #1
 800bcce:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800bcd0:	7dfb      	ldrb	r3, [r7, #23]
 800bcd2:	68ba      	ldr	r2, [r7, #8]
 800bcd4:	4413      	add	r3, r2
 800bcd6:	2203      	movs	r2, #3
 800bcd8:	701a      	strb	r2, [r3, #0]
  idx++;
 800bcda:	7dfb      	ldrb	r3, [r7, #23]
 800bcdc:	3301      	adds	r3, #1
 800bcde:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800bce0:	e013      	b.n	800bd0a <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800bce2:	7dfb      	ldrb	r3, [r7, #23]
 800bce4:	68ba      	ldr	r2, [r7, #8]
 800bce6:	4413      	add	r3, r2
 800bce8:	693a      	ldr	r2, [r7, #16]
 800bcea:	7812      	ldrb	r2, [r2, #0]
 800bcec:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800bcee:	693b      	ldr	r3, [r7, #16]
 800bcf0:	3301      	adds	r3, #1
 800bcf2:	613b      	str	r3, [r7, #16]
    idx++;
 800bcf4:	7dfb      	ldrb	r3, [r7, #23]
 800bcf6:	3301      	adds	r3, #1
 800bcf8:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800bcfa:	7dfb      	ldrb	r3, [r7, #23]
 800bcfc:	68ba      	ldr	r2, [r7, #8]
 800bcfe:	4413      	add	r3, r2
 800bd00:	2200      	movs	r2, #0
 800bd02:	701a      	strb	r2, [r3, #0]
    idx++;
 800bd04:	7dfb      	ldrb	r3, [r7, #23]
 800bd06:	3301      	adds	r3, #1
 800bd08:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800bd0a:	693b      	ldr	r3, [r7, #16]
 800bd0c:	781b      	ldrb	r3, [r3, #0]
 800bd0e:	2b00      	cmp	r3, #0
 800bd10:	d1e7      	bne.n	800bce2 <USBD_GetString+0x52>
 800bd12:	e000      	b.n	800bd16 <USBD_GetString+0x86>
    return;
 800bd14:	bf00      	nop
  }
}
 800bd16:	3718      	adds	r7, #24
 800bd18:	46bd      	mov	sp, r7
 800bd1a:	bd80      	pop	{r7, pc}

0800bd1c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800bd1c:	b480      	push	{r7}
 800bd1e:	b085      	sub	sp, #20
 800bd20:	af00      	add	r7, sp, #0
 800bd22:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800bd24:	2300      	movs	r3, #0
 800bd26:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800bd2c:	e005      	b.n	800bd3a <USBD_GetLen+0x1e>
  {
    len++;
 800bd2e:	7bfb      	ldrb	r3, [r7, #15]
 800bd30:	3301      	adds	r3, #1
 800bd32:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800bd34:	68bb      	ldr	r3, [r7, #8]
 800bd36:	3301      	adds	r3, #1
 800bd38:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800bd3a:	68bb      	ldr	r3, [r7, #8]
 800bd3c:	781b      	ldrb	r3, [r3, #0]
 800bd3e:	2b00      	cmp	r3, #0
 800bd40:	d1f5      	bne.n	800bd2e <USBD_GetLen+0x12>
  }

  return len;
 800bd42:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd44:	4618      	mov	r0, r3
 800bd46:	3714      	adds	r7, #20
 800bd48:	46bd      	mov	sp, r7
 800bd4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd4e:	4770      	bx	lr

0800bd50 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800bd50:	b580      	push	{r7, lr}
 800bd52:	b084      	sub	sp, #16
 800bd54:	af00      	add	r7, sp, #0
 800bd56:	60f8      	str	r0, [r7, #12]
 800bd58:	60b9      	str	r1, [r7, #8]
 800bd5a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800bd5c:	68fb      	ldr	r3, [r7, #12]
 800bd5e:	2202      	movs	r2, #2
 800bd60:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800bd64:	68fb      	ldr	r3, [r7, #12]
 800bd66:	687a      	ldr	r2, [r7, #4]
 800bd68:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800bd6a:	68fb      	ldr	r3, [r7, #12]
 800bd6c:	687a      	ldr	r2, [r7, #4]
 800bd6e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	68ba      	ldr	r2, [r7, #8]
 800bd74:	2100      	movs	r1, #0
 800bd76:	68f8      	ldr	r0, [r7, #12]
 800bd78:	f000 fccf 	bl	800c71a <USBD_LL_Transmit>

  return USBD_OK;
 800bd7c:	2300      	movs	r3, #0
}
 800bd7e:	4618      	mov	r0, r3
 800bd80:	3710      	adds	r7, #16
 800bd82:	46bd      	mov	sp, r7
 800bd84:	bd80      	pop	{r7, pc}

0800bd86 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800bd86:	b580      	push	{r7, lr}
 800bd88:	b084      	sub	sp, #16
 800bd8a:	af00      	add	r7, sp, #0
 800bd8c:	60f8      	str	r0, [r7, #12]
 800bd8e:	60b9      	str	r1, [r7, #8]
 800bd90:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	68ba      	ldr	r2, [r7, #8]
 800bd96:	2100      	movs	r1, #0
 800bd98:	68f8      	ldr	r0, [r7, #12]
 800bd9a:	f000 fcbe 	bl	800c71a <USBD_LL_Transmit>

  return USBD_OK;
 800bd9e:	2300      	movs	r3, #0
}
 800bda0:	4618      	mov	r0, r3
 800bda2:	3710      	adds	r7, #16
 800bda4:	46bd      	mov	sp, r7
 800bda6:	bd80      	pop	{r7, pc}

0800bda8 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800bda8:	b580      	push	{r7, lr}
 800bdaa:	b084      	sub	sp, #16
 800bdac:	af00      	add	r7, sp, #0
 800bdae:	60f8      	str	r0, [r7, #12]
 800bdb0:	60b9      	str	r1, [r7, #8]
 800bdb2:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	68ba      	ldr	r2, [r7, #8]
 800bdb8:	2100      	movs	r1, #0
 800bdba:	68f8      	ldr	r0, [r7, #12]
 800bdbc:	f000 fcce 	bl	800c75c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800bdc0:	2300      	movs	r3, #0
}
 800bdc2:	4618      	mov	r0, r3
 800bdc4:	3710      	adds	r7, #16
 800bdc6:	46bd      	mov	sp, r7
 800bdc8:	bd80      	pop	{r7, pc}

0800bdca <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800bdca:	b580      	push	{r7, lr}
 800bdcc:	b082      	sub	sp, #8
 800bdce:	af00      	add	r7, sp, #0
 800bdd0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	2204      	movs	r2, #4
 800bdd6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800bdda:	2300      	movs	r3, #0
 800bddc:	2200      	movs	r2, #0
 800bdde:	2100      	movs	r1, #0
 800bde0:	6878      	ldr	r0, [r7, #4]
 800bde2:	f000 fc9a 	bl	800c71a <USBD_LL_Transmit>

  return USBD_OK;
 800bde6:	2300      	movs	r3, #0
}
 800bde8:	4618      	mov	r0, r3
 800bdea:	3708      	adds	r7, #8
 800bdec:	46bd      	mov	sp, r7
 800bdee:	bd80      	pop	{r7, pc}

0800bdf0 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800bdf0:	b580      	push	{r7, lr}
 800bdf2:	b082      	sub	sp, #8
 800bdf4:	af00      	add	r7, sp, #0
 800bdf6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	2205      	movs	r2, #5
 800bdfc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800be00:	2300      	movs	r3, #0
 800be02:	2200      	movs	r2, #0
 800be04:	2100      	movs	r1, #0
 800be06:	6878      	ldr	r0, [r7, #4]
 800be08:	f000 fca8 	bl	800c75c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800be0c:	2300      	movs	r3, #0
}
 800be0e:	4618      	mov	r0, r3
 800be10:	3708      	adds	r7, #8
 800be12:	46bd      	mov	sp, r7
 800be14:	bd80      	pop	{r7, pc}
	...

0800be18 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800be18:	b580      	push	{r7, lr}
 800be1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800be1c:	2200      	movs	r2, #0
 800be1e:	4912      	ldr	r1, [pc, #72]	; (800be68 <MX_USB_DEVICE_Init+0x50>)
 800be20:	4812      	ldr	r0, [pc, #72]	; (800be6c <MX_USB_DEVICE_Init+0x54>)
 800be22:	f7fe fd08 	bl	800a836 <USBD_Init>
 800be26:	4603      	mov	r3, r0
 800be28:	2b00      	cmp	r3, #0
 800be2a:	d001      	beq.n	800be30 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800be2c:	f7f5 fd6c 	bl	8001908 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_MSC) != USBD_OK)
 800be30:	490f      	ldr	r1, [pc, #60]	; (800be70 <MX_USB_DEVICE_Init+0x58>)
 800be32:	480e      	ldr	r0, [pc, #56]	; (800be6c <MX_USB_DEVICE_Init+0x54>)
 800be34:	f7fe fd2f 	bl	800a896 <USBD_RegisterClass>
 800be38:	4603      	mov	r3, r0
 800be3a:	2b00      	cmp	r3, #0
 800be3c:	d001      	beq.n	800be42 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800be3e:	f7f5 fd63 	bl	8001908 <Error_Handler>
  }
  if (USBD_MSC_RegisterStorage(&hUsbDeviceFS, &USBD_Storage_Interface_fops_FS) != USBD_OK)
 800be42:	490c      	ldr	r1, [pc, #48]	; (800be74 <MX_USB_DEVICE_Init+0x5c>)
 800be44:	4809      	ldr	r0, [pc, #36]	; (800be6c <MX_USB_DEVICE_Init+0x54>)
 800be46:	f7fc fef9 	bl	8008c3c <USBD_MSC_RegisterStorage>
 800be4a:	4603      	mov	r3, r0
 800be4c:	2b00      	cmp	r3, #0
 800be4e:	d001      	beq.n	800be54 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800be50:	f7f5 fd5a 	bl	8001908 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800be54:	4805      	ldr	r0, [pc, #20]	; (800be6c <MX_USB_DEVICE_Init+0x54>)
 800be56:	f7fe fd54 	bl	800a902 <USBD_Start>
 800be5a:	4603      	mov	r3, r0
 800be5c:	2b00      	cmp	r3, #0
 800be5e:	d001      	beq.n	800be64 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800be60:	f7f5 fd52 	bl	8001908 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800be64:	bf00      	nop
 800be66:	bd80      	pop	{r7, pc}
 800be68:	200000b8 	.word	0x200000b8
 800be6c:	20001290 	.word	0x20001290
 800be70:	20000010 	.word	0x20000010
 800be74:	20000108 	.word	0x20000108

0800be78 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800be78:	b480      	push	{r7}
 800be7a:	b083      	sub	sp, #12
 800be7c:	af00      	add	r7, sp, #0
 800be7e:	4603      	mov	r3, r0
 800be80:	6039      	str	r1, [r7, #0]
 800be82:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800be84:	683b      	ldr	r3, [r7, #0]
 800be86:	2212      	movs	r2, #18
 800be88:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800be8a:	4b03      	ldr	r3, [pc, #12]	; (800be98 <USBD_FS_DeviceDescriptor+0x20>)
}
 800be8c:	4618      	mov	r0, r3
 800be8e:	370c      	adds	r7, #12
 800be90:	46bd      	mov	sp, r7
 800be92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be96:	4770      	bx	lr
 800be98:	200000d4 	.word	0x200000d4

0800be9c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800be9c:	b480      	push	{r7}
 800be9e:	b083      	sub	sp, #12
 800bea0:	af00      	add	r7, sp, #0
 800bea2:	4603      	mov	r3, r0
 800bea4:	6039      	str	r1, [r7, #0]
 800bea6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800bea8:	683b      	ldr	r3, [r7, #0]
 800beaa:	2204      	movs	r2, #4
 800beac:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800beae:	4b03      	ldr	r3, [pc, #12]	; (800bebc <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800beb0:	4618      	mov	r0, r3
 800beb2:	370c      	adds	r7, #12
 800beb4:	46bd      	mov	sp, r7
 800beb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beba:	4770      	bx	lr
 800bebc:	200000e8 	.word	0x200000e8

0800bec0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bec0:	b580      	push	{r7, lr}
 800bec2:	b082      	sub	sp, #8
 800bec4:	af00      	add	r7, sp, #0
 800bec6:	4603      	mov	r3, r0
 800bec8:	6039      	str	r1, [r7, #0]
 800beca:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800becc:	79fb      	ldrb	r3, [r7, #7]
 800bece:	2b00      	cmp	r3, #0
 800bed0:	d105      	bne.n	800bede <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800bed2:	683a      	ldr	r2, [r7, #0]
 800bed4:	4907      	ldr	r1, [pc, #28]	; (800bef4 <USBD_FS_ProductStrDescriptor+0x34>)
 800bed6:	4808      	ldr	r0, [pc, #32]	; (800bef8 <USBD_FS_ProductStrDescriptor+0x38>)
 800bed8:	f7ff feda 	bl	800bc90 <USBD_GetString>
 800bedc:	e004      	b.n	800bee8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800bede:	683a      	ldr	r2, [r7, #0]
 800bee0:	4904      	ldr	r1, [pc, #16]	; (800bef4 <USBD_FS_ProductStrDescriptor+0x34>)
 800bee2:	4805      	ldr	r0, [pc, #20]	; (800bef8 <USBD_FS_ProductStrDescriptor+0x38>)
 800bee4:	f7ff fed4 	bl	800bc90 <USBD_GetString>
  }
  return USBD_StrDesc;
 800bee8:	4b02      	ldr	r3, [pc, #8]	; (800bef4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800beea:	4618      	mov	r0, r3
 800beec:	3708      	adds	r7, #8
 800beee:	46bd      	mov	sp, r7
 800bef0:	bd80      	pop	{r7, pc}
 800bef2:	bf00      	nop
 800bef4:	2000156c 	.word	0x2000156c
 800bef8:	0800c8bc 	.word	0x0800c8bc

0800befc <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800befc:	b580      	push	{r7, lr}
 800befe:	b082      	sub	sp, #8
 800bf00:	af00      	add	r7, sp, #0
 800bf02:	4603      	mov	r3, r0
 800bf04:	6039      	str	r1, [r7, #0]
 800bf06:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800bf08:	683a      	ldr	r2, [r7, #0]
 800bf0a:	4904      	ldr	r1, [pc, #16]	; (800bf1c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800bf0c:	4804      	ldr	r0, [pc, #16]	; (800bf20 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800bf0e:	f7ff febf 	bl	800bc90 <USBD_GetString>
  return USBD_StrDesc;
 800bf12:	4b02      	ldr	r3, [pc, #8]	; (800bf1c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800bf14:	4618      	mov	r0, r3
 800bf16:	3708      	adds	r7, #8
 800bf18:	46bd      	mov	sp, r7
 800bf1a:	bd80      	pop	{r7, pc}
 800bf1c:	2000156c 	.word	0x2000156c
 800bf20:	0800c8c8 	.word	0x0800c8c8

0800bf24 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bf24:	b580      	push	{r7, lr}
 800bf26:	b082      	sub	sp, #8
 800bf28:	af00      	add	r7, sp, #0
 800bf2a:	4603      	mov	r3, r0
 800bf2c:	6039      	str	r1, [r7, #0]
 800bf2e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800bf30:	683b      	ldr	r3, [r7, #0]
 800bf32:	221a      	movs	r2, #26
 800bf34:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800bf36:	f000 f843 	bl	800bfc0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800bf3a:	4b02      	ldr	r3, [pc, #8]	; (800bf44 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800bf3c:	4618      	mov	r0, r3
 800bf3e:	3708      	adds	r7, #8
 800bf40:	46bd      	mov	sp, r7
 800bf42:	bd80      	pop	{r7, pc}
 800bf44:	200000ec 	.word	0x200000ec

0800bf48 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bf48:	b580      	push	{r7, lr}
 800bf4a:	b082      	sub	sp, #8
 800bf4c:	af00      	add	r7, sp, #0
 800bf4e:	4603      	mov	r3, r0
 800bf50:	6039      	str	r1, [r7, #0]
 800bf52:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800bf54:	79fb      	ldrb	r3, [r7, #7]
 800bf56:	2b00      	cmp	r3, #0
 800bf58:	d105      	bne.n	800bf66 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800bf5a:	683a      	ldr	r2, [r7, #0]
 800bf5c:	4907      	ldr	r1, [pc, #28]	; (800bf7c <USBD_FS_ConfigStrDescriptor+0x34>)
 800bf5e:	4808      	ldr	r0, [pc, #32]	; (800bf80 <USBD_FS_ConfigStrDescriptor+0x38>)
 800bf60:	f7ff fe96 	bl	800bc90 <USBD_GetString>
 800bf64:	e004      	b.n	800bf70 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800bf66:	683a      	ldr	r2, [r7, #0]
 800bf68:	4904      	ldr	r1, [pc, #16]	; (800bf7c <USBD_FS_ConfigStrDescriptor+0x34>)
 800bf6a:	4805      	ldr	r0, [pc, #20]	; (800bf80 <USBD_FS_ConfigStrDescriptor+0x38>)
 800bf6c:	f7ff fe90 	bl	800bc90 <USBD_GetString>
  }
  return USBD_StrDesc;
 800bf70:	4b02      	ldr	r3, [pc, #8]	; (800bf7c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800bf72:	4618      	mov	r0, r3
 800bf74:	3708      	adds	r7, #8
 800bf76:	46bd      	mov	sp, r7
 800bf78:	bd80      	pop	{r7, pc}
 800bf7a:	bf00      	nop
 800bf7c:	2000156c 	.word	0x2000156c
 800bf80:	0800c8dc 	.word	0x0800c8dc

0800bf84 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bf84:	b580      	push	{r7, lr}
 800bf86:	b082      	sub	sp, #8
 800bf88:	af00      	add	r7, sp, #0
 800bf8a:	4603      	mov	r3, r0
 800bf8c:	6039      	str	r1, [r7, #0]
 800bf8e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800bf90:	79fb      	ldrb	r3, [r7, #7]
 800bf92:	2b00      	cmp	r3, #0
 800bf94:	d105      	bne.n	800bfa2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800bf96:	683a      	ldr	r2, [r7, #0]
 800bf98:	4907      	ldr	r1, [pc, #28]	; (800bfb8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800bf9a:	4808      	ldr	r0, [pc, #32]	; (800bfbc <USBD_FS_InterfaceStrDescriptor+0x38>)
 800bf9c:	f7ff fe78 	bl	800bc90 <USBD_GetString>
 800bfa0:	e004      	b.n	800bfac <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800bfa2:	683a      	ldr	r2, [r7, #0]
 800bfa4:	4904      	ldr	r1, [pc, #16]	; (800bfb8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800bfa6:	4805      	ldr	r0, [pc, #20]	; (800bfbc <USBD_FS_InterfaceStrDescriptor+0x38>)
 800bfa8:	f7ff fe72 	bl	800bc90 <USBD_GetString>
  }
  return USBD_StrDesc;
 800bfac:	4b02      	ldr	r3, [pc, #8]	; (800bfb8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800bfae:	4618      	mov	r0, r3
 800bfb0:	3708      	adds	r7, #8
 800bfb2:	46bd      	mov	sp, r7
 800bfb4:	bd80      	pop	{r7, pc}
 800bfb6:	bf00      	nop
 800bfb8:	2000156c 	.word	0x2000156c
 800bfbc:	0800c8e8 	.word	0x0800c8e8

0800bfc0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800bfc0:	b580      	push	{r7, lr}
 800bfc2:	b084      	sub	sp, #16
 800bfc4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800bfc6:	4b0f      	ldr	r3, [pc, #60]	; (800c004 <Get_SerialNum+0x44>)
 800bfc8:	681b      	ldr	r3, [r3, #0]
 800bfca:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800bfcc:	4b0e      	ldr	r3, [pc, #56]	; (800c008 <Get_SerialNum+0x48>)
 800bfce:	681b      	ldr	r3, [r3, #0]
 800bfd0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800bfd2:	4b0e      	ldr	r3, [pc, #56]	; (800c00c <Get_SerialNum+0x4c>)
 800bfd4:	681b      	ldr	r3, [r3, #0]
 800bfd6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800bfd8:	68fa      	ldr	r2, [r7, #12]
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	4413      	add	r3, r2
 800bfde:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800bfe0:	68fb      	ldr	r3, [r7, #12]
 800bfe2:	2b00      	cmp	r3, #0
 800bfe4:	d009      	beq.n	800bffa <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800bfe6:	2208      	movs	r2, #8
 800bfe8:	4909      	ldr	r1, [pc, #36]	; (800c010 <Get_SerialNum+0x50>)
 800bfea:	68f8      	ldr	r0, [r7, #12]
 800bfec:	f000 f814 	bl	800c018 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800bff0:	2204      	movs	r2, #4
 800bff2:	4908      	ldr	r1, [pc, #32]	; (800c014 <Get_SerialNum+0x54>)
 800bff4:	68b8      	ldr	r0, [r7, #8]
 800bff6:	f000 f80f 	bl	800c018 <IntToUnicode>
  }
}
 800bffa:	bf00      	nop
 800bffc:	3710      	adds	r7, #16
 800bffe:	46bd      	mov	sp, r7
 800c000:	bd80      	pop	{r7, pc}
 800c002:	bf00      	nop
 800c004:	1fff7a10 	.word	0x1fff7a10
 800c008:	1fff7a14 	.word	0x1fff7a14
 800c00c:	1fff7a18 	.word	0x1fff7a18
 800c010:	200000ee 	.word	0x200000ee
 800c014:	200000fe 	.word	0x200000fe

0800c018 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800c018:	b480      	push	{r7}
 800c01a:	b087      	sub	sp, #28
 800c01c:	af00      	add	r7, sp, #0
 800c01e:	60f8      	str	r0, [r7, #12]
 800c020:	60b9      	str	r1, [r7, #8]
 800c022:	4613      	mov	r3, r2
 800c024:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800c026:	2300      	movs	r3, #0
 800c028:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800c02a:	2300      	movs	r3, #0
 800c02c:	75fb      	strb	r3, [r7, #23]
 800c02e:	e027      	b.n	800c080 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800c030:	68fb      	ldr	r3, [r7, #12]
 800c032:	0f1b      	lsrs	r3, r3, #28
 800c034:	2b09      	cmp	r3, #9
 800c036:	d80b      	bhi.n	800c050 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800c038:	68fb      	ldr	r3, [r7, #12]
 800c03a:	0f1b      	lsrs	r3, r3, #28
 800c03c:	b2da      	uxtb	r2, r3
 800c03e:	7dfb      	ldrb	r3, [r7, #23]
 800c040:	005b      	lsls	r3, r3, #1
 800c042:	4619      	mov	r1, r3
 800c044:	68bb      	ldr	r3, [r7, #8]
 800c046:	440b      	add	r3, r1
 800c048:	3230      	adds	r2, #48	; 0x30
 800c04a:	b2d2      	uxtb	r2, r2
 800c04c:	701a      	strb	r2, [r3, #0]
 800c04e:	e00a      	b.n	800c066 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800c050:	68fb      	ldr	r3, [r7, #12]
 800c052:	0f1b      	lsrs	r3, r3, #28
 800c054:	b2da      	uxtb	r2, r3
 800c056:	7dfb      	ldrb	r3, [r7, #23]
 800c058:	005b      	lsls	r3, r3, #1
 800c05a:	4619      	mov	r1, r3
 800c05c:	68bb      	ldr	r3, [r7, #8]
 800c05e:	440b      	add	r3, r1
 800c060:	3237      	adds	r2, #55	; 0x37
 800c062:	b2d2      	uxtb	r2, r2
 800c064:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800c066:	68fb      	ldr	r3, [r7, #12]
 800c068:	011b      	lsls	r3, r3, #4
 800c06a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800c06c:	7dfb      	ldrb	r3, [r7, #23]
 800c06e:	005b      	lsls	r3, r3, #1
 800c070:	3301      	adds	r3, #1
 800c072:	68ba      	ldr	r2, [r7, #8]
 800c074:	4413      	add	r3, r2
 800c076:	2200      	movs	r2, #0
 800c078:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800c07a:	7dfb      	ldrb	r3, [r7, #23]
 800c07c:	3301      	adds	r3, #1
 800c07e:	75fb      	strb	r3, [r7, #23]
 800c080:	7dfa      	ldrb	r2, [r7, #23]
 800c082:	79fb      	ldrb	r3, [r7, #7]
 800c084:	429a      	cmp	r2, r3
 800c086:	d3d3      	bcc.n	800c030 <IntToUnicode+0x18>
  }
}
 800c088:	bf00      	nop
 800c08a:	bf00      	nop
 800c08c:	371c      	adds	r7, #28
 800c08e:	46bd      	mov	sp, r7
 800c090:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c094:	4770      	bx	lr

0800c096 <STORAGE_Init_FS>:
  * @brief  Initializes the storage unit (medium) over USB FS IP
  * @param  lun: Logical unit number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Init_FS(uint8_t lun)
{
 800c096:	b480      	push	{r7}
 800c098:	b083      	sub	sp, #12
 800c09a:	af00      	add	r7, sp, #0
 800c09c:	4603      	mov	r3, r0
 800c09e:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 2 */
 UNUSED(lun);

  return (USBD_OK);
 800c0a0:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 800c0a2:	4618      	mov	r0, r3
 800c0a4:	370c      	adds	r7, #12
 800c0a6:	46bd      	mov	sp, r7
 800c0a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0ac:	4770      	bx	lr

0800c0ae <STORAGE_GetCapacity_FS>:
  * @param  block_num: Number of total block number.
  * @param  block_size: Block size.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_GetCapacity_FS(uint8_t lun, uint32_t *block_num, uint16_t *block_size)
{
 800c0ae:	b480      	push	{r7}
 800c0b0:	b085      	sub	sp, #20
 800c0b2:	af00      	add	r7, sp, #0
 800c0b4:	4603      	mov	r3, r0
 800c0b6:	60b9      	str	r1, [r7, #8]
 800c0b8:	607a      	str	r2, [r7, #4]
 800c0ba:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 3 */
  UNUSED(lun);

  *block_num  = W25Q_SECTORS;
 800c0bc:	68bb      	ldr	r3, [r7, #8]
 800c0be:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800c0c2:	601a      	str	r2, [r3, #0]
  *block_size = W25Q_SECTOR_SIZE;
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800c0ca:	801a      	strh	r2, [r3, #0]
  return (USBD_OK);
 800c0cc:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800c0ce:	4618      	mov	r0, r3
 800c0d0:	3714      	adds	r7, #20
 800c0d2:	46bd      	mov	sp, r7
 800c0d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0d8:	4770      	bx	lr

0800c0da <STORAGE_IsReady_FS>:
  * @brief   Checks whether the medium is ready.
  * @param  lun:  Logical unit number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsReady_FS(uint8_t lun)
{
 800c0da:	b480      	push	{r7}
 800c0dc:	b083      	sub	sp, #12
 800c0de:	af00      	add	r7, sp, #0
 800c0e0:	4603      	mov	r3, r0
 800c0e2:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 4 */
  UNUSED(lun);
  /*if(W25Q_Busy()){
    return (USBD_FAIL);
  }*/
  return (USBD_OK);
 800c0e4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800c0e6:	4618      	mov	r0, r3
 800c0e8:	370c      	adds	r7, #12
 800c0ea:	46bd      	mov	sp, r7
 800c0ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0f0:	4770      	bx	lr

0800c0f2 <STORAGE_IsWriteProtected_FS>:
  * @brief  Checks whether the medium is write protected.
  * @param  lun: Logical unit number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsWriteProtected_FS(uint8_t lun)
{
 800c0f2:	b480      	push	{r7}
 800c0f4:	b083      	sub	sp, #12
 800c0f6:	af00      	add	r7, sp, #0
 800c0f8:	4603      	mov	r3, r0
 800c0fa:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 5 */
  UNUSED(lun);

  return (USBD_OK);
 800c0fc:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800c0fe:	4618      	mov	r0, r3
 800c100:	370c      	adds	r7, #12
 800c102:	46bd      	mov	sp, r7
 800c104:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c108:	4770      	bx	lr

0800c10a <STORAGE_Read_FS>:
  * @param  blk_addr: Logical block address.
  * @param  blk_len: Blocks number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Read_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 800c10a:	b580      	push	{r7, lr}
 800c10c:	b086      	sub	sp, #24
 800c10e:	af00      	add	r7, sp, #0
 800c110:	60b9      	str	r1, [r7, #8]
 800c112:	607a      	str	r2, [r7, #4]
 800c114:	461a      	mov	r2, r3
 800c116:	4603      	mov	r3, r0
 800c118:	73fb      	strb	r3, [r7, #15]
 800c11a:	4613      	mov	r3, r2
 800c11c:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 6 */
  UNUSED(lun);
  uint16_t i = 0;
 800c11e:	2300      	movs	r3, #0
 800c120:	82fb      	strh	r3, [r7, #22]
  while(i != blk_len){
 800c122:	e00f      	b.n	800c144 <STORAGE_Read_FS+0x3a>
	W25Q_Read_Sector(&buf[W25Q_SECTOR_SIZE * i], blk_addr + i);
 800c124:	8afb      	ldrh	r3, [r7, #22]
 800c126:	031b      	lsls	r3, r3, #12
 800c128:	461a      	mov	r2, r3
 800c12a:	68bb      	ldr	r3, [r7, #8]
 800c12c:	1898      	adds	r0, r3, r2
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	b29a      	uxth	r2, r3
 800c132:	8afb      	ldrh	r3, [r7, #22]
 800c134:	4413      	add	r3, r2
 800c136:	b29b      	uxth	r3, r3
 800c138:	4619      	mov	r1, r3
 800c13a:	f7f5 f90d 	bl	8001358 <W25Q_Read_Sector>
    i++;
 800c13e:	8afb      	ldrh	r3, [r7, #22]
 800c140:	3301      	adds	r3, #1
 800c142:	82fb      	strh	r3, [r7, #22]
  while(i != blk_len){
 800c144:	8afa      	ldrh	r2, [r7, #22]
 800c146:	89bb      	ldrh	r3, [r7, #12]
 800c148:	429a      	cmp	r2, r3
 800c14a:	d1eb      	bne.n	800c124 <STORAGE_Read_FS+0x1a>
  }

  return (USBD_OK);
 800c14c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800c14e:	4618      	mov	r0, r3
 800c150:	3718      	adds	r7, #24
 800c152:	46bd      	mov	sp, r7
 800c154:	bd80      	pop	{r7, pc}

0800c156 <STORAGE_Write_FS>:
  * @param  blk_addr: Logical block address.
  * @param  blk_len: Blocks number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Write_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 800c156:	b580      	push	{r7, lr}
 800c158:	b086      	sub	sp, #24
 800c15a:	af00      	add	r7, sp, #0
 800c15c:	60b9      	str	r1, [r7, #8]
 800c15e:	607a      	str	r2, [r7, #4]
 800c160:	461a      	mov	r2, r3
 800c162:	4603      	mov	r3, r0
 800c164:	73fb      	strb	r3, [r7, #15]
 800c166:	4613      	mov	r3, r2
 800c168:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 7 */
  UNUSED(lun);

  uint16_t i = 0;
 800c16a:	2300      	movs	r3, #0
 800c16c:	82fb      	strh	r3, [r7, #22]
  while(i != blk_len){
 800c16e:	e017      	b.n	800c1a0 <STORAGE_Write_FS+0x4a>
    W25Q_Erase_Sector(blk_addr + i);
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	b29a      	uxth	r2, r3
 800c174:	8afb      	ldrh	r3, [r7, #22]
 800c176:	4413      	add	r3, r2
 800c178:	b29b      	uxth	r3, r3
 800c17a:	4618      	mov	r0, r3
 800c17c:	f7f5 f84f 	bl	800121e <W25Q_Erase_Sector>
	W25Q_Write_Sector(&buf[W25Q_SECTOR_SIZE * i], blk_addr + i);
 800c180:	8afb      	ldrh	r3, [r7, #22]
 800c182:	031b      	lsls	r3, r3, #12
 800c184:	461a      	mov	r2, r3
 800c186:	68bb      	ldr	r3, [r7, #8]
 800c188:	1898      	adds	r0, r3, r2
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	b29a      	uxth	r2, r3
 800c18e:	8afb      	ldrh	r3, [r7, #22]
 800c190:	4413      	add	r3, r2
 800c192:	b29b      	uxth	r3, r3
 800c194:	4619      	mov	r1, r3
 800c196:	f7f5 f885 	bl	80012a4 <W25Q_Write_Sector>
    i++;
 800c19a:	8afb      	ldrh	r3, [r7, #22]
 800c19c:	3301      	adds	r3, #1
 800c19e:	82fb      	strh	r3, [r7, #22]
  while(i != blk_len){
 800c1a0:	8afa      	ldrh	r2, [r7, #22]
 800c1a2:	89bb      	ldrh	r3, [r7, #12]
 800c1a4:	429a      	cmp	r2, r3
 800c1a6:	d1e3      	bne.n	800c170 <STORAGE_Write_FS+0x1a>
  }

  return (USBD_OK);
 800c1a8:	2300      	movs	r3, #0
  /* USER CODE END 7 */
}
 800c1aa:	4618      	mov	r0, r3
 800c1ac:	3718      	adds	r7, #24
 800c1ae:	46bd      	mov	sp, r7
 800c1b0:	bd80      	pop	{r7, pc}

0800c1b2 <STORAGE_GetMaxLun_FS>:
  * @brief  Returns the Max Supported LUNs.
  * @param  None
  * @retval Lun(s) number.
  */
int8_t STORAGE_GetMaxLun_FS(void)
{
 800c1b2:	b480      	push	{r7}
 800c1b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  return (STORAGE_LUN_NBR - 1);
 800c1b6:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 800c1b8:	4618      	mov	r0, r3
 800c1ba:	46bd      	mov	sp, r7
 800c1bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1c0:	4770      	bx	lr
	...

0800c1c4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800c1c4:	b580      	push	{r7, lr}
 800c1c6:	b08a      	sub	sp, #40	; 0x28
 800c1c8:	af00      	add	r7, sp, #0
 800c1ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c1cc:	f107 0314 	add.w	r3, r7, #20
 800c1d0:	2200      	movs	r2, #0
 800c1d2:	601a      	str	r2, [r3, #0]
 800c1d4:	605a      	str	r2, [r3, #4]
 800c1d6:	609a      	str	r2, [r3, #8]
 800c1d8:	60da      	str	r2, [r3, #12]
 800c1da:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	681b      	ldr	r3, [r3, #0]
 800c1e0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c1e4:	d13a      	bne.n	800c25c <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c1e6:	2300      	movs	r3, #0
 800c1e8:	613b      	str	r3, [r7, #16]
 800c1ea:	4b1e      	ldr	r3, [pc, #120]	; (800c264 <HAL_PCD_MspInit+0xa0>)
 800c1ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c1ee:	4a1d      	ldr	r2, [pc, #116]	; (800c264 <HAL_PCD_MspInit+0xa0>)
 800c1f0:	f043 0301 	orr.w	r3, r3, #1
 800c1f4:	6313      	str	r3, [r2, #48]	; 0x30
 800c1f6:	4b1b      	ldr	r3, [pc, #108]	; (800c264 <HAL_PCD_MspInit+0xa0>)
 800c1f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c1fa:	f003 0301 	and.w	r3, r3, #1
 800c1fe:	613b      	str	r3, [r7, #16]
 800c200:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800c202:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800c206:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c208:	2302      	movs	r3, #2
 800c20a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c20c:	2300      	movs	r3, #0
 800c20e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c210:	2303      	movs	r3, #3
 800c212:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800c214:	230a      	movs	r3, #10
 800c216:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c218:	f107 0314 	add.w	r3, r7, #20
 800c21c:	4619      	mov	r1, r3
 800c21e:	4812      	ldr	r0, [pc, #72]	; (800c268 <HAL_PCD_MspInit+0xa4>)
 800c220:	f7f6 fb16 	bl	8002850 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800c224:	4b0f      	ldr	r3, [pc, #60]	; (800c264 <HAL_PCD_MspInit+0xa0>)
 800c226:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c228:	4a0e      	ldr	r2, [pc, #56]	; (800c264 <HAL_PCD_MspInit+0xa0>)
 800c22a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c22e:	6353      	str	r3, [r2, #52]	; 0x34
 800c230:	2300      	movs	r3, #0
 800c232:	60fb      	str	r3, [r7, #12]
 800c234:	4b0b      	ldr	r3, [pc, #44]	; (800c264 <HAL_PCD_MspInit+0xa0>)
 800c236:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c238:	4a0a      	ldr	r2, [pc, #40]	; (800c264 <HAL_PCD_MspInit+0xa0>)
 800c23a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800c23e:	6453      	str	r3, [r2, #68]	; 0x44
 800c240:	4b08      	ldr	r3, [pc, #32]	; (800c264 <HAL_PCD_MspInit+0xa0>)
 800c242:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c244:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c248:	60fb      	str	r3, [r7, #12]
 800c24a:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800c24c:	2200      	movs	r2, #0
 800c24e:	2100      	movs	r1, #0
 800c250:	2043      	movs	r0, #67	; 0x43
 800c252:	f7f5 feba 	bl	8001fca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800c256:	2043      	movs	r0, #67	; 0x43
 800c258:	f7f5 fed3 	bl	8002002 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800c25c:	bf00      	nop
 800c25e:	3728      	adds	r7, #40	; 0x28
 800c260:	46bd      	mov	sp, r7
 800c262:	bd80      	pop	{r7, pc}
 800c264:	40023800 	.word	0x40023800
 800c268:	40020000 	.word	0x40020000

0800c26c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c26c:	b580      	push	{r7, lr}
 800c26e:	b082      	sub	sp, #8
 800c270:	af00      	add	r7, sp, #0
 800c272:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800c280:	4619      	mov	r1, r3
 800c282:	4610      	mov	r0, r2
 800c284:	f7fe fba5 	bl	800a9d2 <USBD_LL_SetupStage>
}
 800c288:	bf00      	nop
 800c28a:	3708      	adds	r7, #8
 800c28c:	46bd      	mov	sp, r7
 800c28e:	bd80      	pop	{r7, pc}

0800c290 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c290:	b580      	push	{r7, lr}
 800c292:	b082      	sub	sp, #8
 800c294:	af00      	add	r7, sp, #0
 800c296:	6078      	str	r0, [r7, #4]
 800c298:	460b      	mov	r3, r1
 800c29a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800c2a2:	78fa      	ldrb	r2, [r7, #3]
 800c2a4:	6879      	ldr	r1, [r7, #4]
 800c2a6:	4613      	mov	r3, r2
 800c2a8:	00db      	lsls	r3, r3, #3
 800c2aa:	4413      	add	r3, r2
 800c2ac:	009b      	lsls	r3, r3, #2
 800c2ae:	440b      	add	r3, r1
 800c2b0:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800c2b4:	681a      	ldr	r2, [r3, #0]
 800c2b6:	78fb      	ldrb	r3, [r7, #3]
 800c2b8:	4619      	mov	r1, r3
 800c2ba:	f7fe fbdf 	bl	800aa7c <USBD_LL_DataOutStage>
}
 800c2be:	bf00      	nop
 800c2c0:	3708      	adds	r7, #8
 800c2c2:	46bd      	mov	sp, r7
 800c2c4:	bd80      	pop	{r7, pc}

0800c2c6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c2c6:	b580      	push	{r7, lr}
 800c2c8:	b082      	sub	sp, #8
 800c2ca:	af00      	add	r7, sp, #0
 800c2cc:	6078      	str	r0, [r7, #4]
 800c2ce:	460b      	mov	r3, r1
 800c2d0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800c2d8:	78fa      	ldrb	r2, [r7, #3]
 800c2da:	6879      	ldr	r1, [r7, #4]
 800c2dc:	4613      	mov	r3, r2
 800c2de:	00db      	lsls	r3, r3, #3
 800c2e0:	4413      	add	r3, r2
 800c2e2:	009b      	lsls	r3, r3, #2
 800c2e4:	440b      	add	r3, r1
 800c2e6:	334c      	adds	r3, #76	; 0x4c
 800c2e8:	681a      	ldr	r2, [r3, #0]
 800c2ea:	78fb      	ldrb	r3, [r7, #3]
 800c2ec:	4619      	mov	r1, r3
 800c2ee:	f7fe fc78 	bl	800abe2 <USBD_LL_DataInStage>
}
 800c2f2:	bf00      	nop
 800c2f4:	3708      	adds	r7, #8
 800c2f6:	46bd      	mov	sp, r7
 800c2f8:	bd80      	pop	{r7, pc}

0800c2fa <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c2fa:	b580      	push	{r7, lr}
 800c2fc:	b082      	sub	sp, #8
 800c2fe:	af00      	add	r7, sp, #0
 800c300:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c308:	4618      	mov	r0, r3
 800c30a:	f7fe fdac 	bl	800ae66 <USBD_LL_SOF>
}
 800c30e:	bf00      	nop
 800c310:	3708      	adds	r7, #8
 800c312:	46bd      	mov	sp, r7
 800c314:	bd80      	pop	{r7, pc}

0800c316 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c316:	b580      	push	{r7, lr}
 800c318:	b084      	sub	sp, #16
 800c31a:	af00      	add	r7, sp, #0
 800c31c:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800c31e:	2301      	movs	r3, #1
 800c320:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	68db      	ldr	r3, [r3, #12]
 800c326:	2b02      	cmp	r3, #2
 800c328:	d001      	beq.n	800c32e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800c32a:	f7f5 faed 	bl	8001908 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c334:	7bfa      	ldrb	r2, [r7, #15]
 800c336:	4611      	mov	r1, r2
 800c338:	4618      	mov	r0, r3
 800c33a:	f7fe fd56 	bl	800adea <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c344:	4618      	mov	r0, r3
 800c346:	f7fe fcfe 	bl	800ad46 <USBD_LL_Reset>
}
 800c34a:	bf00      	nop
 800c34c:	3710      	adds	r7, #16
 800c34e:	46bd      	mov	sp, r7
 800c350:	bd80      	pop	{r7, pc}
	...

0800c354 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c354:	b580      	push	{r7, lr}
 800c356:	b082      	sub	sp, #8
 800c358:	af00      	add	r7, sp, #0
 800c35a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c362:	4618      	mov	r0, r3
 800c364:	f7fe fd51 	bl	800ae0a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	681b      	ldr	r3, [r3, #0]
 800c36c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c370:	681b      	ldr	r3, [r3, #0]
 800c372:	687a      	ldr	r2, [r7, #4]
 800c374:	6812      	ldr	r2, [r2, #0]
 800c376:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800c37a:	f043 0301 	orr.w	r3, r3, #1
 800c37e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	6a1b      	ldr	r3, [r3, #32]
 800c384:	2b00      	cmp	r3, #0
 800c386:	d005      	beq.n	800c394 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c388:	4b04      	ldr	r3, [pc, #16]	; (800c39c <HAL_PCD_SuspendCallback+0x48>)
 800c38a:	691b      	ldr	r3, [r3, #16]
 800c38c:	4a03      	ldr	r2, [pc, #12]	; (800c39c <HAL_PCD_SuspendCallback+0x48>)
 800c38e:	f043 0306 	orr.w	r3, r3, #6
 800c392:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800c394:	bf00      	nop
 800c396:	3708      	adds	r7, #8
 800c398:	46bd      	mov	sp, r7
 800c39a:	bd80      	pop	{r7, pc}
 800c39c:	e000ed00 	.word	0xe000ed00

0800c3a0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c3a0:	b580      	push	{r7, lr}
 800c3a2:	b082      	sub	sp, #8
 800c3a4:	af00      	add	r7, sp, #0
 800c3a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c3ae:	4618      	mov	r0, r3
 800c3b0:	f7fe fd41 	bl	800ae36 <USBD_LL_Resume>
}
 800c3b4:	bf00      	nop
 800c3b6:	3708      	adds	r7, #8
 800c3b8:	46bd      	mov	sp, r7
 800c3ba:	bd80      	pop	{r7, pc}

0800c3bc <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c3bc:	b580      	push	{r7, lr}
 800c3be:	b082      	sub	sp, #8
 800c3c0:	af00      	add	r7, sp, #0
 800c3c2:	6078      	str	r0, [r7, #4]
 800c3c4:	460b      	mov	r3, r1
 800c3c6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c3ce:	78fa      	ldrb	r2, [r7, #3]
 800c3d0:	4611      	mov	r1, r2
 800c3d2:	4618      	mov	r0, r3
 800c3d4:	f7fe fd99 	bl	800af0a <USBD_LL_IsoOUTIncomplete>
}
 800c3d8:	bf00      	nop
 800c3da:	3708      	adds	r7, #8
 800c3dc:	46bd      	mov	sp, r7
 800c3de:	bd80      	pop	{r7, pc}

0800c3e0 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c3e0:	b580      	push	{r7, lr}
 800c3e2:	b082      	sub	sp, #8
 800c3e4:	af00      	add	r7, sp, #0
 800c3e6:	6078      	str	r0, [r7, #4]
 800c3e8:	460b      	mov	r3, r1
 800c3ea:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c3f2:	78fa      	ldrb	r2, [r7, #3]
 800c3f4:	4611      	mov	r1, r2
 800c3f6:	4618      	mov	r0, r3
 800c3f8:	f7fe fd55 	bl	800aea6 <USBD_LL_IsoINIncomplete>
}
 800c3fc:	bf00      	nop
 800c3fe:	3708      	adds	r7, #8
 800c400:	46bd      	mov	sp, r7
 800c402:	bd80      	pop	{r7, pc}

0800c404 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c404:	b580      	push	{r7, lr}
 800c406:	b082      	sub	sp, #8
 800c408:	af00      	add	r7, sp, #0
 800c40a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c412:	4618      	mov	r0, r3
 800c414:	f7fe fdab 	bl	800af6e <USBD_LL_DevConnected>
}
 800c418:	bf00      	nop
 800c41a:	3708      	adds	r7, #8
 800c41c:	46bd      	mov	sp, r7
 800c41e:	bd80      	pop	{r7, pc}

0800c420 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c420:	b580      	push	{r7, lr}
 800c422:	b082      	sub	sp, #8
 800c424:	af00      	add	r7, sp, #0
 800c426:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c42e:	4618      	mov	r0, r3
 800c430:	f7fe fda8 	bl	800af84 <USBD_LL_DevDisconnected>
}
 800c434:	bf00      	nop
 800c436:	3708      	adds	r7, #8
 800c438:	46bd      	mov	sp, r7
 800c43a:	bd80      	pop	{r7, pc}

0800c43c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800c43c:	b580      	push	{r7, lr}
 800c43e:	b082      	sub	sp, #8
 800c440:	af00      	add	r7, sp, #0
 800c442:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	781b      	ldrb	r3, [r3, #0]
 800c448:	2b00      	cmp	r3, #0
 800c44a:	d13c      	bne.n	800c4c6 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800c44c:	4a20      	ldr	r2, [pc, #128]	; (800c4d0 <USBD_LL_Init+0x94>)
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	4a1e      	ldr	r2, [pc, #120]	; (800c4d0 <USBD_LL_Init+0x94>)
 800c458:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800c45c:	4b1c      	ldr	r3, [pc, #112]	; (800c4d0 <USBD_LL_Init+0x94>)
 800c45e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800c462:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800c464:	4b1a      	ldr	r3, [pc, #104]	; (800c4d0 <USBD_LL_Init+0x94>)
 800c466:	2204      	movs	r2, #4
 800c468:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800c46a:	4b19      	ldr	r3, [pc, #100]	; (800c4d0 <USBD_LL_Init+0x94>)
 800c46c:	2202      	movs	r2, #2
 800c46e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800c470:	4b17      	ldr	r3, [pc, #92]	; (800c4d0 <USBD_LL_Init+0x94>)
 800c472:	2200      	movs	r2, #0
 800c474:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800c476:	4b16      	ldr	r3, [pc, #88]	; (800c4d0 <USBD_LL_Init+0x94>)
 800c478:	2202      	movs	r2, #2
 800c47a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800c47c:	4b14      	ldr	r3, [pc, #80]	; (800c4d0 <USBD_LL_Init+0x94>)
 800c47e:	2200      	movs	r2, #0
 800c480:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800c482:	4b13      	ldr	r3, [pc, #76]	; (800c4d0 <USBD_LL_Init+0x94>)
 800c484:	2200      	movs	r2, #0
 800c486:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800c488:	4b11      	ldr	r3, [pc, #68]	; (800c4d0 <USBD_LL_Init+0x94>)
 800c48a:	2200      	movs	r2, #0
 800c48c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800c48e:	4b10      	ldr	r3, [pc, #64]	; (800c4d0 <USBD_LL_Init+0x94>)
 800c490:	2200      	movs	r2, #0
 800c492:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800c494:	4b0e      	ldr	r3, [pc, #56]	; (800c4d0 <USBD_LL_Init+0x94>)
 800c496:	2200      	movs	r2, #0
 800c498:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800c49a:	480d      	ldr	r0, [pc, #52]	; (800c4d0 <USBD_LL_Init+0x94>)
 800c49c:	f7f6 fba6 	bl	8002bec <HAL_PCD_Init>
 800c4a0:	4603      	mov	r3, r0
 800c4a2:	2b00      	cmp	r3, #0
 800c4a4:	d001      	beq.n	800c4aa <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800c4a6:	f7f5 fa2f 	bl	8001908 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800c4aa:	2180      	movs	r1, #128	; 0x80
 800c4ac:	4808      	ldr	r0, [pc, #32]	; (800c4d0 <USBD_LL_Init+0x94>)
 800c4ae:	f7f7 fe64 	bl	800417a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800c4b2:	2240      	movs	r2, #64	; 0x40
 800c4b4:	2100      	movs	r1, #0
 800c4b6:	4806      	ldr	r0, [pc, #24]	; (800c4d0 <USBD_LL_Init+0x94>)
 800c4b8:	f7f7 fe18 	bl	80040ec <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800c4bc:	2280      	movs	r2, #128	; 0x80
 800c4be:	2101      	movs	r1, #1
 800c4c0:	4803      	ldr	r0, [pc, #12]	; (800c4d0 <USBD_LL_Init+0x94>)
 800c4c2:	f7f7 fe13 	bl	80040ec <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800c4c6:	2300      	movs	r3, #0
}
 800c4c8:	4618      	mov	r0, r3
 800c4ca:	3708      	adds	r7, #8
 800c4cc:	46bd      	mov	sp, r7
 800c4ce:	bd80      	pop	{r7, pc}
 800c4d0:	2000176c 	.word	0x2000176c

0800c4d4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800c4d4:	b580      	push	{r7, lr}
 800c4d6:	b084      	sub	sp, #16
 800c4d8:	af00      	add	r7, sp, #0
 800c4da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c4dc:	2300      	movs	r3, #0
 800c4de:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c4e0:	2300      	movs	r3, #0
 800c4e2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c4ea:	4618      	mov	r0, r3
 800c4ec:	f7f6 fc9b 	bl	8002e26 <HAL_PCD_Start>
 800c4f0:	4603      	mov	r3, r0
 800c4f2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c4f4:	7bfb      	ldrb	r3, [r7, #15]
 800c4f6:	4618      	mov	r0, r3
 800c4f8:	f000 f97c 	bl	800c7f4 <USBD_Get_USB_Status>
 800c4fc:	4603      	mov	r3, r0
 800c4fe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c500:	7bbb      	ldrb	r3, [r7, #14]
}
 800c502:	4618      	mov	r0, r3
 800c504:	3710      	adds	r7, #16
 800c506:	46bd      	mov	sp, r7
 800c508:	bd80      	pop	{r7, pc}

0800c50a <USBD_LL_Stop>:
  * @brief  Stops the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Stop(USBD_HandleTypeDef *pdev)
{
 800c50a:	b580      	push	{r7, lr}
 800c50c:	b084      	sub	sp, #16
 800c50e:	af00      	add	r7, sp, #0
 800c510:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c512:	2300      	movs	r3, #0
 800c514:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c516:	2300      	movs	r3, #0
 800c518:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Stop(pdev->pData);
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c520:	4618      	mov	r0, r3
 800c522:	f7f6 fcb3 	bl	8002e8c <HAL_PCD_Stop>
 800c526:	4603      	mov	r3, r0
 800c528:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c52a:	7bfb      	ldrb	r3, [r7, #15]
 800c52c:	4618      	mov	r0, r3
 800c52e:	f000 f961 	bl	800c7f4 <USBD_Get_USB_Status>
 800c532:	4603      	mov	r3, r0
 800c534:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c536:	7bbb      	ldrb	r3, [r7, #14]
}
 800c538:	4618      	mov	r0, r3
 800c53a:	3710      	adds	r7, #16
 800c53c:	46bd      	mov	sp, r7
 800c53e:	bd80      	pop	{r7, pc}

0800c540 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800c540:	b580      	push	{r7, lr}
 800c542:	b084      	sub	sp, #16
 800c544:	af00      	add	r7, sp, #0
 800c546:	6078      	str	r0, [r7, #4]
 800c548:	4608      	mov	r0, r1
 800c54a:	4611      	mov	r1, r2
 800c54c:	461a      	mov	r2, r3
 800c54e:	4603      	mov	r3, r0
 800c550:	70fb      	strb	r3, [r7, #3]
 800c552:	460b      	mov	r3, r1
 800c554:	70bb      	strb	r3, [r7, #2]
 800c556:	4613      	mov	r3, r2
 800c558:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c55a:	2300      	movs	r3, #0
 800c55c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c55e:	2300      	movs	r3, #0
 800c560:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800c568:	78bb      	ldrb	r3, [r7, #2]
 800c56a:	883a      	ldrh	r2, [r7, #0]
 800c56c:	78f9      	ldrb	r1, [r7, #3]
 800c56e:	f7f7 f98a 	bl	8003886 <HAL_PCD_EP_Open>
 800c572:	4603      	mov	r3, r0
 800c574:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c576:	7bfb      	ldrb	r3, [r7, #15]
 800c578:	4618      	mov	r0, r3
 800c57a:	f000 f93b 	bl	800c7f4 <USBD_Get_USB_Status>
 800c57e:	4603      	mov	r3, r0
 800c580:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c582:	7bbb      	ldrb	r3, [r7, #14]
}
 800c584:	4618      	mov	r0, r3
 800c586:	3710      	adds	r7, #16
 800c588:	46bd      	mov	sp, r7
 800c58a:	bd80      	pop	{r7, pc}

0800c58c <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c58c:	b580      	push	{r7, lr}
 800c58e:	b084      	sub	sp, #16
 800c590:	af00      	add	r7, sp, #0
 800c592:	6078      	str	r0, [r7, #4]
 800c594:	460b      	mov	r3, r1
 800c596:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c598:	2300      	movs	r3, #0
 800c59a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c59c:	2300      	movs	r3, #0
 800c59e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c5a6:	78fa      	ldrb	r2, [r7, #3]
 800c5a8:	4611      	mov	r1, r2
 800c5aa:	4618      	mov	r0, r3
 800c5ac:	f7f7 f9d3 	bl	8003956 <HAL_PCD_EP_Close>
 800c5b0:	4603      	mov	r3, r0
 800c5b2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c5b4:	7bfb      	ldrb	r3, [r7, #15]
 800c5b6:	4618      	mov	r0, r3
 800c5b8:	f000 f91c 	bl	800c7f4 <USBD_Get_USB_Status>
 800c5bc:	4603      	mov	r3, r0
 800c5be:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c5c0:	7bbb      	ldrb	r3, [r7, #14]
}
 800c5c2:	4618      	mov	r0, r3
 800c5c4:	3710      	adds	r7, #16
 800c5c6:	46bd      	mov	sp, r7
 800c5c8:	bd80      	pop	{r7, pc}

0800c5ca <USBD_LL_FlushEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_FlushEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c5ca:	b580      	push	{r7, lr}
 800c5cc:	b084      	sub	sp, #16
 800c5ce:	af00      	add	r7, sp, #0
 800c5d0:	6078      	str	r0, [r7, #4]
 800c5d2:	460b      	mov	r3, r1
 800c5d4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c5d6:	2300      	movs	r3, #0
 800c5d8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c5da:	2300      	movs	r3, #0
 800c5dc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c5e4:	78fa      	ldrb	r2, [r7, #3]
 800c5e6:	4611      	mov	r1, r2
 800c5e8:	4618      	mov	r0, r3
 800c5ea:	f7f7 fb96 	bl	8003d1a <HAL_PCD_EP_Flush>
 800c5ee:	4603      	mov	r3, r0
 800c5f0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c5f2:	7bfb      	ldrb	r3, [r7, #15]
 800c5f4:	4618      	mov	r0, r3
 800c5f6:	f000 f8fd 	bl	800c7f4 <USBD_Get_USB_Status>
 800c5fa:	4603      	mov	r3, r0
 800c5fc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c5fe:	7bbb      	ldrb	r3, [r7, #14]
}
 800c600:	4618      	mov	r0, r3
 800c602:	3710      	adds	r7, #16
 800c604:	46bd      	mov	sp, r7
 800c606:	bd80      	pop	{r7, pc}

0800c608 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c608:	b580      	push	{r7, lr}
 800c60a:	b084      	sub	sp, #16
 800c60c:	af00      	add	r7, sp, #0
 800c60e:	6078      	str	r0, [r7, #4]
 800c610:	460b      	mov	r3, r1
 800c612:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c614:	2300      	movs	r3, #0
 800c616:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c618:	2300      	movs	r3, #0
 800c61a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c622:	78fa      	ldrb	r2, [r7, #3]
 800c624:	4611      	mov	r1, r2
 800c626:	4618      	mov	r0, r3
 800c628:	f7f7 fa8c 	bl	8003b44 <HAL_PCD_EP_SetStall>
 800c62c:	4603      	mov	r3, r0
 800c62e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c630:	7bfb      	ldrb	r3, [r7, #15]
 800c632:	4618      	mov	r0, r3
 800c634:	f000 f8de 	bl	800c7f4 <USBD_Get_USB_Status>
 800c638:	4603      	mov	r3, r0
 800c63a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c63c:	7bbb      	ldrb	r3, [r7, #14]
}
 800c63e:	4618      	mov	r0, r3
 800c640:	3710      	adds	r7, #16
 800c642:	46bd      	mov	sp, r7
 800c644:	bd80      	pop	{r7, pc}

0800c646 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c646:	b580      	push	{r7, lr}
 800c648:	b084      	sub	sp, #16
 800c64a:	af00      	add	r7, sp, #0
 800c64c:	6078      	str	r0, [r7, #4]
 800c64e:	460b      	mov	r3, r1
 800c650:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c652:	2300      	movs	r3, #0
 800c654:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c656:	2300      	movs	r3, #0
 800c658:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800c65a:	687b      	ldr	r3, [r7, #4]
 800c65c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c660:	78fa      	ldrb	r2, [r7, #3]
 800c662:	4611      	mov	r1, r2
 800c664:	4618      	mov	r0, r3
 800c666:	f7f7 fad1 	bl	8003c0c <HAL_PCD_EP_ClrStall>
 800c66a:	4603      	mov	r3, r0
 800c66c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c66e:	7bfb      	ldrb	r3, [r7, #15]
 800c670:	4618      	mov	r0, r3
 800c672:	f000 f8bf 	bl	800c7f4 <USBD_Get_USB_Status>
 800c676:	4603      	mov	r3, r0
 800c678:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c67a:	7bbb      	ldrb	r3, [r7, #14]
}
 800c67c:	4618      	mov	r0, r3
 800c67e:	3710      	adds	r7, #16
 800c680:	46bd      	mov	sp, r7
 800c682:	bd80      	pop	{r7, pc}

0800c684 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c684:	b480      	push	{r7}
 800c686:	b085      	sub	sp, #20
 800c688:	af00      	add	r7, sp, #0
 800c68a:	6078      	str	r0, [r7, #4]
 800c68c:	460b      	mov	r3, r1
 800c68e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c696:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800c698:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c69c:	2b00      	cmp	r3, #0
 800c69e:	da0b      	bge.n	800c6b8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800c6a0:	78fb      	ldrb	r3, [r7, #3]
 800c6a2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c6a6:	68f9      	ldr	r1, [r7, #12]
 800c6a8:	4613      	mov	r3, r2
 800c6aa:	00db      	lsls	r3, r3, #3
 800c6ac:	4413      	add	r3, r2
 800c6ae:	009b      	lsls	r3, r3, #2
 800c6b0:	440b      	add	r3, r1
 800c6b2:	333e      	adds	r3, #62	; 0x3e
 800c6b4:	781b      	ldrb	r3, [r3, #0]
 800c6b6:	e00b      	b.n	800c6d0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800c6b8:	78fb      	ldrb	r3, [r7, #3]
 800c6ba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c6be:	68f9      	ldr	r1, [r7, #12]
 800c6c0:	4613      	mov	r3, r2
 800c6c2:	00db      	lsls	r3, r3, #3
 800c6c4:	4413      	add	r3, r2
 800c6c6:	009b      	lsls	r3, r3, #2
 800c6c8:	440b      	add	r3, r1
 800c6ca:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800c6ce:	781b      	ldrb	r3, [r3, #0]
  }
}
 800c6d0:	4618      	mov	r0, r3
 800c6d2:	3714      	adds	r7, #20
 800c6d4:	46bd      	mov	sp, r7
 800c6d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6da:	4770      	bx	lr

0800c6dc <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800c6dc:	b580      	push	{r7, lr}
 800c6de:	b084      	sub	sp, #16
 800c6e0:	af00      	add	r7, sp, #0
 800c6e2:	6078      	str	r0, [r7, #4]
 800c6e4:	460b      	mov	r3, r1
 800c6e6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c6e8:	2300      	movs	r3, #0
 800c6ea:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c6ec:	2300      	movs	r3, #0
 800c6ee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c6f6:	78fa      	ldrb	r2, [r7, #3]
 800c6f8:	4611      	mov	r1, r2
 800c6fa:	4618      	mov	r0, r3
 800c6fc:	f7f7 f89e 	bl	800383c <HAL_PCD_SetAddress>
 800c700:	4603      	mov	r3, r0
 800c702:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c704:	7bfb      	ldrb	r3, [r7, #15]
 800c706:	4618      	mov	r0, r3
 800c708:	f000 f874 	bl	800c7f4 <USBD_Get_USB_Status>
 800c70c:	4603      	mov	r3, r0
 800c70e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c710:	7bbb      	ldrb	r3, [r7, #14]
}
 800c712:	4618      	mov	r0, r3
 800c714:	3710      	adds	r7, #16
 800c716:	46bd      	mov	sp, r7
 800c718:	bd80      	pop	{r7, pc}

0800c71a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c71a:	b580      	push	{r7, lr}
 800c71c:	b086      	sub	sp, #24
 800c71e:	af00      	add	r7, sp, #0
 800c720:	60f8      	str	r0, [r7, #12]
 800c722:	607a      	str	r2, [r7, #4]
 800c724:	603b      	str	r3, [r7, #0]
 800c726:	460b      	mov	r3, r1
 800c728:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c72a:	2300      	movs	r3, #0
 800c72c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c72e:	2300      	movs	r3, #0
 800c730:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800c732:	68fb      	ldr	r3, [r7, #12]
 800c734:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800c738:	7af9      	ldrb	r1, [r7, #11]
 800c73a:	683b      	ldr	r3, [r7, #0]
 800c73c:	687a      	ldr	r2, [r7, #4]
 800c73e:	f7f7 f9b7 	bl	8003ab0 <HAL_PCD_EP_Transmit>
 800c742:	4603      	mov	r3, r0
 800c744:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c746:	7dfb      	ldrb	r3, [r7, #23]
 800c748:	4618      	mov	r0, r3
 800c74a:	f000 f853 	bl	800c7f4 <USBD_Get_USB_Status>
 800c74e:	4603      	mov	r3, r0
 800c750:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c752:	7dbb      	ldrb	r3, [r7, #22]
}
 800c754:	4618      	mov	r0, r3
 800c756:	3718      	adds	r7, #24
 800c758:	46bd      	mov	sp, r7
 800c75a:	bd80      	pop	{r7, pc}

0800c75c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c75c:	b580      	push	{r7, lr}
 800c75e:	b086      	sub	sp, #24
 800c760:	af00      	add	r7, sp, #0
 800c762:	60f8      	str	r0, [r7, #12]
 800c764:	607a      	str	r2, [r7, #4]
 800c766:	603b      	str	r3, [r7, #0]
 800c768:	460b      	mov	r3, r1
 800c76a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c76c:	2300      	movs	r3, #0
 800c76e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c770:	2300      	movs	r3, #0
 800c772:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800c774:	68fb      	ldr	r3, [r7, #12]
 800c776:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800c77a:	7af9      	ldrb	r1, [r7, #11]
 800c77c:	683b      	ldr	r3, [r7, #0]
 800c77e:	687a      	ldr	r2, [r7, #4]
 800c780:	f7f7 f933 	bl	80039ea <HAL_PCD_EP_Receive>
 800c784:	4603      	mov	r3, r0
 800c786:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c788:	7dfb      	ldrb	r3, [r7, #23]
 800c78a:	4618      	mov	r0, r3
 800c78c:	f000 f832 	bl	800c7f4 <USBD_Get_USB_Status>
 800c790:	4603      	mov	r3, r0
 800c792:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c794:	7dbb      	ldrb	r3, [r7, #22]
}
 800c796:	4618      	mov	r0, r3
 800c798:	3718      	adds	r7, #24
 800c79a:	46bd      	mov	sp, r7
 800c79c:	bd80      	pop	{r7, pc}

0800c79e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c79e:	b580      	push	{r7, lr}
 800c7a0:	b082      	sub	sp, #8
 800c7a2:	af00      	add	r7, sp, #0
 800c7a4:	6078      	str	r0, [r7, #4]
 800c7a6:	460b      	mov	r3, r1
 800c7a8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c7b0:	78fa      	ldrb	r2, [r7, #3]
 800c7b2:	4611      	mov	r1, r2
 800c7b4:	4618      	mov	r0, r3
 800c7b6:	f7f7 f963 	bl	8003a80 <HAL_PCD_EP_GetRxCount>
 800c7ba:	4603      	mov	r3, r0
}
 800c7bc:	4618      	mov	r0, r3
 800c7be:	3708      	adds	r7, #8
 800c7c0:	46bd      	mov	sp, r7
 800c7c2:	bd80      	pop	{r7, pc}

0800c7c4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800c7c4:	b480      	push	{r7}
 800c7c6:	b083      	sub	sp, #12
 800c7c8:	af00      	add	r7, sp, #0
 800c7ca:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_MSC_BOT_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800c7cc:	4b03      	ldr	r3, [pc, #12]	; (800c7dc <USBD_static_malloc+0x18>)
}
 800c7ce:	4618      	mov	r0, r3
 800c7d0:	370c      	adds	r7, #12
 800c7d2:	46bd      	mov	sp, r7
 800c7d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7d8:	4770      	bx	lr
 800c7da:	bf00      	nop
 800c7dc:	20001c78 	.word	0x20001c78

0800c7e0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800c7e0:	b480      	push	{r7}
 800c7e2:	b083      	sub	sp, #12
 800c7e4:	af00      	add	r7, sp, #0
 800c7e6:	6078      	str	r0, [r7, #4]

}
 800c7e8:	bf00      	nop
 800c7ea:	370c      	adds	r7, #12
 800c7ec:	46bd      	mov	sp, r7
 800c7ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7f2:	4770      	bx	lr

0800c7f4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800c7f4:	b480      	push	{r7}
 800c7f6:	b085      	sub	sp, #20
 800c7f8:	af00      	add	r7, sp, #0
 800c7fa:	4603      	mov	r3, r0
 800c7fc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c7fe:	2300      	movs	r3, #0
 800c800:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800c802:	79fb      	ldrb	r3, [r7, #7]
 800c804:	2b03      	cmp	r3, #3
 800c806:	d817      	bhi.n	800c838 <USBD_Get_USB_Status+0x44>
 800c808:	a201      	add	r2, pc, #4	; (adr r2, 800c810 <USBD_Get_USB_Status+0x1c>)
 800c80a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c80e:	bf00      	nop
 800c810:	0800c821 	.word	0x0800c821
 800c814:	0800c827 	.word	0x0800c827
 800c818:	0800c82d 	.word	0x0800c82d
 800c81c:	0800c833 	.word	0x0800c833
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800c820:	2300      	movs	r3, #0
 800c822:	73fb      	strb	r3, [r7, #15]
    break;
 800c824:	e00b      	b.n	800c83e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c826:	2303      	movs	r3, #3
 800c828:	73fb      	strb	r3, [r7, #15]
    break;
 800c82a:	e008      	b.n	800c83e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c82c:	2301      	movs	r3, #1
 800c82e:	73fb      	strb	r3, [r7, #15]
    break;
 800c830:	e005      	b.n	800c83e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c832:	2303      	movs	r3, #3
 800c834:	73fb      	strb	r3, [r7, #15]
    break;
 800c836:	e002      	b.n	800c83e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800c838:	2303      	movs	r3, #3
 800c83a:	73fb      	strb	r3, [r7, #15]
    break;
 800c83c:	bf00      	nop
  }
  return usb_status;
 800c83e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c840:	4618      	mov	r0, r3
 800c842:	3714      	adds	r7, #20
 800c844:	46bd      	mov	sp, r7
 800c846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c84a:	4770      	bx	lr

0800c84c <__libc_init_array>:
 800c84c:	b570      	push	{r4, r5, r6, lr}
 800c84e:	4d0d      	ldr	r5, [pc, #52]	; (800c884 <__libc_init_array+0x38>)
 800c850:	4c0d      	ldr	r4, [pc, #52]	; (800c888 <__libc_init_array+0x3c>)
 800c852:	1b64      	subs	r4, r4, r5
 800c854:	10a4      	asrs	r4, r4, #2
 800c856:	2600      	movs	r6, #0
 800c858:	42a6      	cmp	r6, r4
 800c85a:	d109      	bne.n	800c870 <__libc_init_array+0x24>
 800c85c:	4d0b      	ldr	r5, [pc, #44]	; (800c88c <__libc_init_array+0x40>)
 800c85e:	4c0c      	ldr	r4, [pc, #48]	; (800c890 <__libc_init_array+0x44>)
 800c860:	f000 f820 	bl	800c8a4 <_init>
 800c864:	1b64      	subs	r4, r4, r5
 800c866:	10a4      	asrs	r4, r4, #2
 800c868:	2600      	movs	r6, #0
 800c86a:	42a6      	cmp	r6, r4
 800c86c:	d105      	bne.n	800c87a <__libc_init_array+0x2e>
 800c86e:	bd70      	pop	{r4, r5, r6, pc}
 800c870:	f855 3b04 	ldr.w	r3, [r5], #4
 800c874:	4798      	blx	r3
 800c876:	3601      	adds	r6, #1
 800c878:	e7ee      	b.n	800c858 <__libc_init_array+0xc>
 800c87a:	f855 3b04 	ldr.w	r3, [r5], #4
 800c87e:	4798      	blx	r3
 800c880:	3601      	adds	r6, #1
 800c882:	e7f2      	b.n	800c86a <__libc_init_array+0x1e>
 800c884:	0800c93c 	.word	0x0800c93c
 800c888:	0800c93c 	.word	0x0800c93c
 800c88c:	0800c93c 	.word	0x0800c93c
 800c890:	0800c940 	.word	0x0800c940

0800c894 <memset>:
 800c894:	4402      	add	r2, r0
 800c896:	4603      	mov	r3, r0
 800c898:	4293      	cmp	r3, r2
 800c89a:	d100      	bne.n	800c89e <memset+0xa>
 800c89c:	4770      	bx	lr
 800c89e:	f803 1b01 	strb.w	r1, [r3], #1
 800c8a2:	e7f9      	b.n	800c898 <memset+0x4>

0800c8a4 <_init>:
 800c8a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c8a6:	bf00      	nop
 800c8a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c8aa:	bc08      	pop	{r3}
 800c8ac:	469e      	mov	lr, r3
 800c8ae:	4770      	bx	lr

0800c8b0 <_fini>:
 800c8b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c8b2:	bf00      	nop
 800c8b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c8b6:	bc08      	pop	{r3}
 800c8b8:	469e      	mov	lr, r3
 800c8ba:	4770      	bx	lr
